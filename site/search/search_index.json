{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u7a0b\u5e8f\u5458\u505a\u996d\u6307\u5357 \u6700\u8fd1\u5728\u5bb6\u9694\u79bb\uff0c\u51fa\u4e0d\u4e86\u95e8\u3002\u53ea\u80fd\u5b85\u5728\u5bb6\u505a\u996d\u4e86\u3002\u4f5c\u4e3a\u7a0b\u5e8f\u5458\uff0c\u6211\u5076\u5c14\u5728\u7f51\u4e0a\u627e\u627e\u83dc\u8c31\u548c\u505a\u6cd5\u3002\u4f46\u662f\u8fd9\u4e9b\u83dc\u8c31\u5f80\u5f80\u5199\u6cd5\u5343\u5947\u767e\u602a\uff0c\u7ecf\u5e38\u4e2d\u95f4\u83ab\u540d\u51fa\u6765\u4e00\u4e9b\u6750\u6599\u3002\u5bf9\u4e8e\u4e60\u60ef\u4e86\u5f62\u5f0f\u8bed\u8a00\u7684\u7a0b\u5e8f\u5458\u6765\u8bf4\u6781\u5176\u4e0d\u53cb\u597d\u3002 \u6240\u4ee5\uff0c\u6211\u8ba1\u5212\u81ea\u5df1\u641c\u5bfb\u83dc\u8c31\u548c\u5e76\u7ed3\u5408\u5b9e\u9645\u505a\u83dc\u7684\u7ecf\u9a8c\uff0c\u51c6\u5907\u7528\u66f4\u6e05\u6670\u7cbe\u51c6\u7684\u63cf\u8ff0\u6765\u6574\u7406\u5e38\u89c1\u83dc\u7684\u505a\u6cd5\uff0c\u4ee5\u65b9\u4fbf\u7a0b\u5e8f\u5458\u5728\u5bb6\u505a\u996d\u3002 \u540c\u6837\uff0c\u6211\u5e0c\u671b\u5b83\u662f\u4e00\u4e2a\u7531\u793e\u533a\u9a71\u52a8\u548c\u7ef4\u62a4\u7684\u5f00\u6e90\u9879\u76ee\uff0c\u4f7f\u66f4\u591a\u4eba\u80fd\u591f\u4e00\u8d77\u505a\u4e00\u4e2a\u6709\u8da3\u7684\u4ed3\u5e93\u3002\u6240\u4ee5\u975e\u5e38\u6b22\u8fce\u5927\u5bb6\u8d21\u732e\u5b83~ \u5982\u4f55\u8d21\u732e \u9488\u5bf9\u53d1\u73b0\u7684\u95ee\u9898\uff0c\u76f4\u63a5\u4fee\u6539\u5e76\u63d0\u4ea4 Pull request \u5373\u53ef\u3002 \u5728\u5199\u65b0\u83dc\u8c31\u65f6\uff0c\u8bf7\u590d\u5236\u5e76\u4fee\u6539\u5df2\u6709\u7684\u83dc\u8c31\u6a21\u677f: \u793a\u4f8b\u83dc \u3002 \u505a\u83dc\u4e4b\u524d \u53a8\u623f\u51c6\u5907 \u5982\u4f55\u9009\u62e9\u73b0\u5728\u5403\u4ec0\u4e48 \u9ad8\u538b\u529b\u9505 \u98df\u54c1\u5b89\u5168 \u5fae\u6ce2\u7089 \u5b66\u4e60\u712f\u6c34 \u5b66\u4e60\u7092\u4e0e\u714e \u5b66\u4e60\u814c \u5b66\u4e60\u84b8 \u5b66\u4e60\u716e \u83dc\u8c31 \u5bb6\u5e38\u83dc \u7d20\u83dc \u83e0\u83dc\u7092\u9e21\u86cb \u7092\u6ed1\u86cb \u7092\u9752\u83dc \u8471\u714e\u8c46\u8150 \u5730\u4e09\u9c9c \u7ea2\u70e7\u8304\u5b50 \u864e\u76ae\u9752\u6912 \u9e21\u86cb\u7fb9 \u5fae\u6ce2\u7089\u9e21\u86cb\u7fb9 \u8304\u5b50\u7096\u571f\u8c46 \u6912\u76d0\u7389\u7c73 \u70e4\u8304\u5b50 \u6984\u83dc\u8089\u672b\u56db\u5b63\u8c46 \u51c9\u62cc\u9ec4\u74dc \u51c9\u62cc\u6cb9\u9ea6\u83dc \u84b2\u70e7\u8304\u5b50 \u4e0a\u6c64\u5a03\u5a03\u83dc \u6c34\u6cb9\u7116\u852c\u83dc \u9178\u8fa3\u571f\u8c46\u4e1d \u7cd6\u62cc\u897f\u7ea2\u67ff \u897f\u7ea2\u67ff\u7092\u9e21\u86cb \u8364\u83dc \u767d\u83dc\u732a\u8089\u7096\u7c89\u6761 \u5bab\u4fdd\u9e21\u4e01 \u5495\u565c\u8089 \u9ed1\u6912\u725b\u67f3 \u7b80\u6613\u7ea2\u70e7\u8089 \u5357\u6d3e\u7ea2\u70e7\u8089 \u7ea2\u70e7\u732a\u8e44 \u9ec4\u74dc\u7092\u8089 \u56de\u9505\u8089 \u5c16\u6912\u7092\u725b\u8089 \u59dc\u7092\u9e21 \u9171\u725b\u8089 \u53ef\u4e50\u9e21\u7fc5 \u53e3\u6c34\u9e21 \u8fa3\u6912\u7092\u8089 \u8001\u5f0f\u9505\u5305\u8089 \u51b7\u5403\u5154 \u51c9\u62cc\u9e21\u4e1d \u841d\u535c\u7096\u7f8a\u6392 \u9ebb\u8fa3\u9999\u9505 \u6c34\u716e\u725b\u8089 \u6c34\u716e\u8089\u7247 \u849c\u82d4\u7092\u8089\u672b \u7cd6\u918b\u91cc\u810a \u571f\u8c46\u7096\u6392\u9aa8 \u897f\u7ea2\u67ff\u725b\u8169 \u897f\u7ea2\u67ff\u571f\u8c46\u7096\u725b\u8089 \u9999\u5e72\u82b9\u83dc\u7092\u8089 \u9999\u5e72\u8089\u4e1d \u9999\u83c7\u6ed1\u9e21 \u5c0f\u7092\u9ec4\u725b\u8089 \u5c0f\u7092\u8089 \u65b0\u7586\u5927\u76d8\u9e21 \u8840\u6d46\u9e2d \u6d0b\u8471\u7092\u732a\u8089 \u9c7c\u9999\u8304\u5b50 \u9c7c\u9999\u8089\u4e1d \u5b5c\u7136\u725b\u8089 \u6c34\u4ea7 \u767d\u707c\u867e \u9cca\u9c7c\u7096\u8c46\u8150 \u7ea2\u70e7\u9ca4\u9c7c \u7ea2\u70e7\u9c7c\u5934 \u9ec4\u6cb9\u714e\u867e \u70e4\u9c7c \u5496\u55b1\u7092\u87f9 \u6e05\u84b8\u9c88\u9c7c \u6e05\u84b8\u751f\u869d \u7cd6\u918b\u9ca4\u9c7c \u5fae\u6ce2\u8471\u59dc\u9ed1\u9cd5\u9c7c \u65e9\u9910 \u8336\u53f6\u86cb \u9e21\u86cb\u4e09\u660e\u6cbb \u714e\u997a \u7a7a\u6c14\u70b8\u9505\u9762\u5305\u7247 \u7f8e\u5f0f\u7092\u86cb \u725b\u5976\u71d5\u9ea6 \u6c34\u716e\u7389\u7c73 \u592a\u9633\u86cb \u6e8f\u5fc3\u86cb \u5410\u53f8\u679c\u9171 \u5fae\u6ce2\u7089\u86cb\u7cd5 \u71d5\u9ea6\u9e21\u86cb\u997c \u84b8\u82b1\u5377 \u4e3b\u98df \u7092\u65b9\u4fbf\u9762 \u7092\u6cb3\u7c89 \u7092\u998d \u7092\u610f\u5927\u5229\u9762 \u86cb\u7092\u996d \u97e9\u5f0f\u62cc\u996d \u91aa\u7cdf\u5c0f\u6c64\u5706 \u8001\u5e72\u5988\u62cc\u9762 \u8001\u53cb\u732a\u8089\u7c89 \u70d9\u997c \u51c9\u7c89 \u9ebb\u8fa3\u51cf\u8102\u835e\u9ea6\u9762 \u9ebb\u6cb9\u62cc\u9762 \u7535\u996d\u7172\u84b8\u7c73\u996d \u716e\u9505\u84b8\u7c73\u996d \u70ed\u5e72\u9762 \u65e5\u5f0f\u5496\u55b1\u996d \u624b\u5de5\u6c34\u997a \u6c64\u9762 \u5fae\u6ce2\u7089\u814a\u80a0\u7172\u4ed4\u996d \u70b8\u9171\u9762 \u4e2d\u5f0f\u9985\u997c \u716e\u6ce1\u9762\u52a0\u86cb \u62ab\u8428\u997c\u76ae \u534a\u6210\u54c1\u52a0\u5de5 \u61d2\u4eba\u86cb\u631e \u51c9\u76ae \u85af\u6761 \u901f\u51bb\u9984\u9968 \u901f\u51bb\u6c34\u997a \u901f\u51bb\u6c64\u5706 \u6c64\u4e0e\u7ca5 \u6602\u523a\u9c7c\u8c46\u8150\u6c64 \u91d1\u9488\u83c7\u6c64 \u83cc\u83c7\u7096\u4e73\u9e3d \u7f57\u5b8b\u6c64 \u7c73\u7ca5 \u76ae\u86cb\u7626\u8089\u7ca5 \u751f\u6c46\u4e38\u5b50\u6c64 \u897f\u7ea2\u67ff\u9e21\u86cb\u6c64 \u5c0f\u7c73\u7ca5 \u7d2b\u83dc\u86cb\u82b1\u6c64 \u996e\u6599 \u8019\u8019\u67d1\u8336 \u767e\u9999\u679c\u6a59\u5b50\u7279\u8c03 \u91d1\u83f2\u58eb \u91d1\u6c64\u529b \u53ef\u4e50\u6876 \u5976\u8336 \u5947\u5f02\u679c\u83e0\u83dc\u7279\u8c03 \u9178\u6885\u6c64 \u9178\u6885\u6c64\uff08\u534a\u6210\u54c1\u52a0\u5de5\uff09 \u6768\u679d\u7518\u9732 B52\u8f70\u70b8\u673a \u9171\u6599\u548c\u5176\u5b83\u6750\u6599 \u8349\u8393\u9171 \u849c\u9999\u9171\u6cb9 \u7cd6\u918b\u6c41 \u7cd6\u8272 \u6cb9\u6cfc\u8fa3\u5b50 \u6cb9\u9165 \u70b8\u4e32\u9171\u6599 \u8517\u7cd6\u7cd6\u6d46 \u751c\u54c1 \u5965\u5229\u5965\u51b0\u6dc7\u6dcb \u70e4\u86cb\u631e \u621a\u98ce\u86cb\u7cd5 \u63d0\u62c9\u7c73\u82cf \u828b\u6ce5\u96ea\u5a9a\u5a18 \u8fdb\u9636\u77e5\u8bc6\u5b66\u4e60 \u5982\u679c\u4f60\u5df2\u7ecf\u505a\u4e86\u8bb8\u591a\u4e0a\u9762\u7684\u83dc\uff0c\u5bf9\u4e8e\u53a8\u827a\u5df2\u7ecf\u5165\u95e8\uff0c\u5e76\u4e14\u60f3\u5b66\u4e60\u66f4\u52a0\u9ad8\u6df1\u7684\u70f9\u996a\u6280\u5de7\uff0c\u8bf7\u7ee7\u7eed\u9605\u8bfb\u4e0b\u9762\u7684\u5185\u5bb9\uff1a \u8f85\u6599\u6280\u5de7 \u9ad8\u7ea7\u4e13\u4e1a\u672f\u8bed \u6cb9\u6e29\u5224\u65ad\u6280\u5de7","title":"\u7a0b\u5e8f\u5458\u505a\u996d\u6307\u5357"},{"location":"#_1","text":"\u6700\u8fd1\u5728\u5bb6\u9694\u79bb\uff0c\u51fa\u4e0d\u4e86\u95e8\u3002\u53ea\u80fd\u5b85\u5728\u5bb6\u505a\u996d\u4e86\u3002\u4f5c\u4e3a\u7a0b\u5e8f\u5458\uff0c\u6211\u5076\u5c14\u5728\u7f51\u4e0a\u627e\u627e\u83dc\u8c31\u548c\u505a\u6cd5\u3002\u4f46\u662f\u8fd9\u4e9b\u83dc\u8c31\u5f80\u5f80\u5199\u6cd5\u5343\u5947\u767e\u602a\uff0c\u7ecf\u5e38\u4e2d\u95f4\u83ab\u540d\u51fa\u6765\u4e00\u4e9b\u6750\u6599\u3002\u5bf9\u4e8e\u4e60\u60ef\u4e86\u5f62\u5f0f\u8bed\u8a00\u7684\u7a0b\u5e8f\u5458\u6765\u8bf4\u6781\u5176\u4e0d\u53cb\u597d\u3002 \u6240\u4ee5\uff0c\u6211\u8ba1\u5212\u81ea\u5df1\u641c\u5bfb\u83dc\u8c31\u548c\u5e76\u7ed3\u5408\u5b9e\u9645\u505a\u83dc\u7684\u7ecf\u9a8c\uff0c\u51c6\u5907\u7528\u66f4\u6e05\u6670\u7cbe\u51c6\u7684\u63cf\u8ff0\u6765\u6574\u7406\u5e38\u89c1\u83dc\u7684\u505a\u6cd5\uff0c\u4ee5\u65b9\u4fbf\u7a0b\u5e8f\u5458\u5728\u5bb6\u505a\u996d\u3002 \u540c\u6837\uff0c\u6211\u5e0c\u671b\u5b83\u662f\u4e00\u4e2a\u7531\u793e\u533a\u9a71\u52a8\u548c\u7ef4\u62a4\u7684\u5f00\u6e90\u9879\u76ee\uff0c\u4f7f\u66f4\u591a\u4eba\u80fd\u591f\u4e00\u8d77\u505a\u4e00\u4e2a\u6709\u8da3\u7684\u4ed3\u5e93\u3002\u6240\u4ee5\u975e\u5e38\u6b22\u8fce\u5927\u5bb6\u8d21\u732e\u5b83~","title":"\u7a0b\u5e8f\u5458\u505a\u996d\u6307\u5357"},{"location":"#_2","text":"\u9488\u5bf9\u53d1\u73b0\u7684\u95ee\u9898\uff0c\u76f4\u63a5\u4fee\u6539\u5e76\u63d0\u4ea4 Pull request \u5373\u53ef\u3002 \u5728\u5199\u65b0\u83dc\u8c31\u65f6\uff0c\u8bf7\u590d\u5236\u5e76\u4fee\u6539\u5df2\u6709\u7684\u83dc\u8c31\u6a21\u677f: \u793a\u4f8b\u83dc \u3002","title":"\u5982\u4f55\u8d21\u732e"},{"location":"#_3","text":"\u53a8\u623f\u51c6\u5907 \u5982\u4f55\u9009\u62e9\u73b0\u5728\u5403\u4ec0\u4e48 \u9ad8\u538b\u529b\u9505 \u98df\u54c1\u5b89\u5168 \u5fae\u6ce2\u7089 \u5b66\u4e60\u712f\u6c34 \u5b66\u4e60\u7092\u4e0e\u714e \u5b66\u4e60\u814c \u5b66\u4e60\u84b8 \u5b66\u4e60\u716e","title":"\u505a\u83dc\u4e4b\u524d"},{"location":"#_4","text":"","title":"\u83dc\u8c31"},{"location":"#_5","text":"","title":"\u5bb6\u5e38\u83dc"},{"location":"#_6","text":"\u83e0\u83dc\u7092\u9e21\u86cb \u7092\u6ed1\u86cb \u7092\u9752\u83dc \u8471\u714e\u8c46\u8150 \u5730\u4e09\u9c9c \u7ea2\u70e7\u8304\u5b50 \u864e\u76ae\u9752\u6912 \u9e21\u86cb\u7fb9 \u5fae\u6ce2\u7089\u9e21\u86cb\u7fb9 \u8304\u5b50\u7096\u571f\u8c46 \u6912\u76d0\u7389\u7c73 \u70e4\u8304\u5b50 \u6984\u83dc\u8089\u672b\u56db\u5b63\u8c46 \u51c9\u62cc\u9ec4\u74dc \u51c9\u62cc\u6cb9\u9ea6\u83dc \u84b2\u70e7\u8304\u5b50 \u4e0a\u6c64\u5a03\u5a03\u83dc \u6c34\u6cb9\u7116\u852c\u83dc \u9178\u8fa3\u571f\u8c46\u4e1d \u7cd6\u62cc\u897f\u7ea2\u67ff \u897f\u7ea2\u67ff\u7092\u9e21\u86cb","title":"\u7d20\u83dc"},{"location":"#_7","text":"\u767d\u83dc\u732a\u8089\u7096\u7c89\u6761 \u5bab\u4fdd\u9e21\u4e01 \u5495\u565c\u8089 \u9ed1\u6912\u725b\u67f3 \u7b80\u6613\u7ea2\u70e7\u8089 \u5357\u6d3e\u7ea2\u70e7\u8089 \u7ea2\u70e7\u732a\u8e44 \u9ec4\u74dc\u7092\u8089 \u56de\u9505\u8089 \u5c16\u6912\u7092\u725b\u8089 \u59dc\u7092\u9e21 \u9171\u725b\u8089 \u53ef\u4e50\u9e21\u7fc5 \u53e3\u6c34\u9e21 \u8fa3\u6912\u7092\u8089 \u8001\u5f0f\u9505\u5305\u8089 \u51b7\u5403\u5154 \u51c9\u62cc\u9e21\u4e1d \u841d\u535c\u7096\u7f8a\u6392 \u9ebb\u8fa3\u9999\u9505 \u6c34\u716e\u725b\u8089 \u6c34\u716e\u8089\u7247 \u849c\u82d4\u7092\u8089\u672b \u7cd6\u918b\u91cc\u810a \u571f\u8c46\u7096\u6392\u9aa8 \u897f\u7ea2\u67ff\u725b\u8169 \u897f\u7ea2\u67ff\u571f\u8c46\u7096\u725b\u8089 \u9999\u5e72\u82b9\u83dc\u7092\u8089 \u9999\u5e72\u8089\u4e1d \u9999\u83c7\u6ed1\u9e21 \u5c0f\u7092\u9ec4\u725b\u8089 \u5c0f\u7092\u8089 \u65b0\u7586\u5927\u76d8\u9e21 \u8840\u6d46\u9e2d \u6d0b\u8471\u7092\u732a\u8089 \u9c7c\u9999\u8304\u5b50 \u9c7c\u9999\u8089\u4e1d \u5b5c\u7136\u725b\u8089","title":"\u8364\u83dc"},{"location":"#_8","text":"\u767d\u707c\u867e \u9cca\u9c7c\u7096\u8c46\u8150 \u7ea2\u70e7\u9ca4\u9c7c \u7ea2\u70e7\u9c7c\u5934 \u9ec4\u6cb9\u714e\u867e \u70e4\u9c7c \u5496\u55b1\u7092\u87f9 \u6e05\u84b8\u9c88\u9c7c \u6e05\u84b8\u751f\u869d \u7cd6\u918b\u9ca4\u9c7c \u5fae\u6ce2\u8471\u59dc\u9ed1\u9cd5\u9c7c","title":"\u6c34\u4ea7"},{"location":"#_9","text":"\u8336\u53f6\u86cb \u9e21\u86cb\u4e09\u660e\u6cbb \u714e\u997a \u7a7a\u6c14\u70b8\u9505\u9762\u5305\u7247 \u7f8e\u5f0f\u7092\u86cb \u725b\u5976\u71d5\u9ea6 \u6c34\u716e\u7389\u7c73 \u592a\u9633\u86cb \u6e8f\u5fc3\u86cb \u5410\u53f8\u679c\u9171 \u5fae\u6ce2\u7089\u86cb\u7cd5 \u71d5\u9ea6\u9e21\u86cb\u997c \u84b8\u82b1\u5377","title":"\u65e9\u9910"},{"location":"#_10","text":"\u7092\u65b9\u4fbf\u9762 \u7092\u6cb3\u7c89 \u7092\u998d \u7092\u610f\u5927\u5229\u9762 \u86cb\u7092\u996d \u97e9\u5f0f\u62cc\u996d \u91aa\u7cdf\u5c0f\u6c64\u5706 \u8001\u5e72\u5988\u62cc\u9762 \u8001\u53cb\u732a\u8089\u7c89 \u70d9\u997c \u51c9\u7c89 \u9ebb\u8fa3\u51cf\u8102\u835e\u9ea6\u9762 \u9ebb\u6cb9\u62cc\u9762 \u7535\u996d\u7172\u84b8\u7c73\u996d \u716e\u9505\u84b8\u7c73\u996d \u70ed\u5e72\u9762 \u65e5\u5f0f\u5496\u55b1\u996d \u624b\u5de5\u6c34\u997a \u6c64\u9762 \u5fae\u6ce2\u7089\u814a\u80a0\u7172\u4ed4\u996d \u70b8\u9171\u9762 \u4e2d\u5f0f\u9985\u997c \u716e\u6ce1\u9762\u52a0\u86cb \u62ab\u8428\u997c\u76ae","title":"\u4e3b\u98df"},{"location":"#_11","text":"\u61d2\u4eba\u86cb\u631e \u51c9\u76ae \u85af\u6761 \u901f\u51bb\u9984\u9968 \u901f\u51bb\u6c34\u997a \u901f\u51bb\u6c64\u5706","title":"\u534a\u6210\u54c1\u52a0\u5de5"},{"location":"#_12","text":"\u6602\u523a\u9c7c\u8c46\u8150\u6c64 \u91d1\u9488\u83c7\u6c64 \u83cc\u83c7\u7096\u4e73\u9e3d \u7f57\u5b8b\u6c64 \u7c73\u7ca5 \u76ae\u86cb\u7626\u8089\u7ca5 \u751f\u6c46\u4e38\u5b50\u6c64 \u897f\u7ea2\u67ff\u9e21\u86cb\u6c64 \u5c0f\u7c73\u7ca5 \u7d2b\u83dc\u86cb\u82b1\u6c64","title":"\u6c64\u4e0e\u7ca5"},{"location":"#_13","text":"\u8019\u8019\u67d1\u8336 \u767e\u9999\u679c\u6a59\u5b50\u7279\u8c03 \u91d1\u83f2\u58eb \u91d1\u6c64\u529b \u53ef\u4e50\u6876 \u5976\u8336 \u5947\u5f02\u679c\u83e0\u83dc\u7279\u8c03 \u9178\u6885\u6c64 \u9178\u6885\u6c64\uff08\u534a\u6210\u54c1\u52a0\u5de5\uff09 \u6768\u679d\u7518\u9732 B52\u8f70\u70b8\u673a","title":"\u996e\u6599"},{"location":"#_14","text":"\u8349\u8393\u9171 \u849c\u9999\u9171\u6cb9 \u7cd6\u918b\u6c41 \u7cd6\u8272 \u6cb9\u6cfc\u8fa3\u5b50 \u6cb9\u9165 \u70b8\u4e32\u9171\u6599 \u8517\u7cd6\u7cd6\u6d46","title":"\u9171\u6599\u548c\u5176\u5b83\u6750\u6599"},{"location":"#_15","text":"\u5965\u5229\u5965\u51b0\u6dc7\u6dcb \u70e4\u86cb\u631e \u621a\u98ce\u86cb\u7cd5 \u63d0\u62c9\u7c73\u82cf \u828b\u6ce5\u96ea\u5a9a\u5a18","title":"\u751c\u54c1"},{"location":"#_16","text":"\u5982\u679c\u4f60\u5df2\u7ecf\u505a\u4e86\u8bb8\u591a\u4e0a\u9762\u7684\u83dc\uff0c\u5bf9\u4e8e\u53a8\u827a\u5df2\u7ecf\u5165\u95e8\uff0c\u5e76\u4e14\u60f3\u5b66\u4e60\u66f4\u52a0\u9ad8\u6df1\u7684\u70f9\u996a\u6280\u5de7\uff0c\u8bf7\u7ee7\u7eed\u9605\u8bfb\u4e0b\u9762\u7684\u5185\u5bb9\uff1a \u8f85\u6599\u6280\u5de7 \u9ad8\u7ea7\u4e13\u4e1a\u672f\u8bed \u6cb9\u6e29\u5224\u65ad\u6280\u5de7","title":"\u8fdb\u9636\u77e5\u8bc6\u5b66\u4e60"},{"location":"CODE_OF_CONDUCT/","text":"\u884c\u4e3a\u51c6\u5219 \u6211\u4eec\u4e3a\u4ec0\u4e48\u575a\u6301\u7ef4\u62a4\u8fd9\u4e2a\u4ed3\u5e93 \u6709\u5f88\u591a\u670b\u53cb\u95ee\u6211\uff0c\u4e3a\u4ec0\u4e48\u8981\u7ef4\u62a4\u8fd9\u4e2a\u4ed3\u5e93\uff1f\u4e3a\u4ec0\u4e48\u575a\u6301\u7cbe\u51c6\u7684\u83dc\u8c31\uff1f\u672a\u6765\u8fd9\u4e2a\u4ed3\u5e93\u6253\u7b97\u600e\u4e48\u53d1\u5c55\uff1f\u6709\u6ca1\u6709\u60f3\u6d41\u91cf\u53d8\u73b0\uff1f\u6211\u60f3\u5728\u8fd9\u91cc\u7ed9\u51fa\u6211\u81ea\u5df1\u7684\u7b54\u6848\uff0c\u5e76\u660e\u786e\u8d21\u732e\u7684\u4ef7\u503c\u89c2\u5427\u3002 \u6211\u59cb\u7ec8\u8ba4\u4e3a\uff0c\u6211\u4eec\u6709\u5f88\u5f3a\u7684\u57fa\u7840\u8bbe\u65bd\u5efa\u8bbe\u80fd\u529b\u3002\u4f8b\u5982\uff1a\u6211\u4eec\u6709\u5065\u8eab App\uff0c\u6709\u624b\u73af\uff0c\u6709\u533b\u7597\u5e73\u53f0\uff0c\u6709\u4e70\u83dc\u5e73\u53f0\uff0c\u6709\u5916\u5356\u5e73\u53f0\uff0c\u6709\u667a\u80fd\u51b0\u7bb1\uff0c\u6709\u667a\u80fd\u4f53\u91cd\u79e4\u3001\u667a\u80fd\u8dd1\u6b65\u673a\u7b49\u7b49\u2026\u2026\u4f46\u662f\u6211\u5374\u603b\u9700\u8981\u82b1\u8d39\u7279\u522b\u591a\u7684\u7cbe\u529b\u5468\u65cb\u548c\u8ba1\u7b97\u4e8e\u5b83\u4eec\u4e4b\u95f4\u3002\u6211\u89c9\u5f97\u8fd9\u4e9b\u57fa\u7840\u8bbe\u65bd\u5f7c\u6b64\u4e4b\u95f4\u6c9f\u901a\u80fd\u529b\u7279\u522b\u5dee\u3002 \u6211\u66fe\u7ecf\u5e7b\u60f3\u5728\u672a\u6765\u7684\u4e16\u754c\uff0c\u4eba\u7c7b\u4e0d\u518d\u9700\u8981\u5173\u5fc3\u67f4\u7c73\u6cb9\u76d0\uff0c\u5403\u4ec0\u4e48\u7684\u95ee\u9898\u5c06\u5f7b\u5e95\u5f97\u5230\u89e3\u51b3\u3002\u6211\u4eec\u6bcf\u5929\u7684\u884c\u4e3a\u53ef\u4ee5\u5b8c\u5168\u7531\u8ba1\u7b97\u673a\u7ed9\u51fa\u6700\u4f73\u65b9\u6848\u3002 \u4f8b\u5982\uff1a\u533b\u751f\u5efa\u8bae\u6211\u5728 50 \u5929\u5185\u51cf\u80a5 15 \u65a4\u3002\u90a3\u4e48\u8fd9\u4e9b\u5e94\u7528\u6536\u5230\u4e86\u533b\u7597\u5e73\u53f0\u7684\u7ed3\u8bba\uff0c\u4f1a\u8054\u52a8\u8d77\u6765\u3002\u4e3a\u6211\u8bbe\u8ba1\u5065\u8eab\u8ba1\u5212\uff0c\u81ea\u52a8\u8ba1\u7b97\u6211\u5e94\u8be5\u5403\u7684\u996d\u83dc\uff0c\u81ea\u52a8\u628a\u51b0\u7bb1\u91cc\u7f3a\u7684\u4e1c\u897f\u70b9\u8fc7\u6765\uff0c\u81ea\u52a8\u907f\u514d\u8fc7\u671f\uff0c\u81ea\u52a8\u8ba1\u7b97\u63a8\u8350\u5efa\u8bae\u7684\u996d\u83dc\uff0c\u81ea\u52a8\u5e2e\u6211\u8ba1\u7b97\u70ed\u91cf\u7684\u6444\u5165\u548c\u6d88\u8017\uff0c\u81ea\u52a8\u786e\u4fdd\u6211\u5403\u7684\u8db3\u591f\u591a\u6837\u597d\u5403\u800c\u4e14\u80fd\u591f\u6ee1\u8db3\u6211\u7684\u5065\u5eb7\u8981\u6c42\uff0c\u5e76\u4e14\u81ea\u52a8\u6839\u636e\u6211\u7684\u4f53\u91cd\u79e4\u6d4b\u91cf\u7684\u7ed3\u679c\u77eb\u6b63\u7b49\u3002 \u6211\u89c9\u5f97\u8fd9\u662f\u4e00\u4e2a\u7406\u60f3\u7684\u751f\u547d\u7ba1\u7406\u4f53\u7cfb\u3002\u9700\u8981\u975e\u5e38\u591a\u7684\u57fa\u7840\u8bbe\u65bd\u8054\u5408\uff0c\u6765\u8ba9\u4eba\u771f\u6b63\u5b9e\u73b0\u4e0d\u9700\u8981\u64cd\u5fc3\u8fd9\u4e9b\u67f4\u7c73\u6cb9\u76d0\uff0c\u53ea\u4e13\u6ce8\u4e8e\u81ea\u5df1\u7684\u559c\u7231\u7684\u4e8b\u60c5\u5c31\u884c\u4e86\u3002\u81f3\u4e8e\u6bcf\u5929\u5403\u4ec0\u4e48\u3001\u51e0\u70b9\u5403\u3001\u5403\u591a\u5c11\u3001\u600e\u4e48\u597d\u5403\u3001\u600e\u4e48\u5065\u5eb7\u3001\u600e\u4e48\u5b8c\u6210\u6211\u7684\u5065\u8eab\u8981\u6c42\uff0c\u600e\u4e48\u7b26\u5408\u533b\u751f\u7684\u5efa\u8bae\u7b49\u7b49\u2026\u2026\u5b8c\u5168\u7531\u8ba1\u7b97\u673a\u5e2e\u6211\u5168\u90e8\u641e\u597d\u5c31\u884c\u4e86\u3002 \u6216\u8bb8\u6211\u60f3\uff0c\u5efa\u8bbe\u8fd9\u79cd\u751f\u547d\u5065\u5eb7\u7684\u7cfb\u7edf\uff0c\u6210\u672c\u6781\u9ad8\uff0c\u800c\u4e14\u5f88\u96be\u76c8\u5229\u3002\u6211\u4eec\u73b0\u5728\u8fd8\u662f\u5728\u4e13\u6ce8\u4e8e\u89e3\u51b3\u95ee\u9898\uff0c\u5728\u9047\u5230\u75be\u75c5\u518d\u53bb\u533b\u9662\uff0c\u800c\u6ca1\u6709\u4e00\u4e2a\u7a0b\u5e8f\u771f\u6b63\u5e2e\u6211\u7ba1\u7406\u4e86\u5065\u5eb7\u3002 \u5f53\u7136\u7406\u60f3\u8fd8\u662f\u8981\u6709\u7684\uff0c\u5e0c\u671b\u6709\u4e00\u5929\u8ba1\u7b97\u673a\u80fd\u591f\u5e2e\u52a9\u4eba\u7c7b\u6d88\u706d\u75be\u75c5\u3002\u800c\u90a3\u65f6\uff0c\u6211\u5e0c\u671b\u6211\u7684\u4ed3\u5e93\uff0c\u80fd\u591f\u662f\u8fd9\u4e00\u6574\u5957\u590d\u6742\u7684\u7cfb\u7edf\u4e2d\u7684\u4e00\u5757\u53ef\u9760\u53c8\u5f3a\u5927\u7684\u87ba\u4e1d\u9489\uff0c\u5fe0\u5b9e\u7684\u627f\u62c5\u5b83\u90a3\u6700\u521d\u7684\u4f7f\u547d\uff1a \u63d0\u4f9b\u4e00\u4efd\u8db3\u591f\u7cbe\u51c6\u7684\u83dc\u8c31\u3002 \u4ed3\u5e93\u539f\u5219 \u5f31\u534f\u8bae \u6211\u5e0c\u671b\u80fd\u591f\u6709\u5546\u4e1a\u516c\u53f8\u3001\u996d\u5e97\u3001\u4f01\u4e1a\u6216\u79d1\u7814\u673a\u6784\u80fd\u591f\u5f15\u7528\u8fd9\u4e2a\u4ed3\u5e93\u3002\u56e0\u6b64\u5b83\u5c06\u59cb\u7ec8\u575a\u6301\u4e00\u4e2a\u8f83\u5f31\u7684\u8bb8\u53ef\u534f\u8bae\u3002\u6211\u4eec\u5e0c\u671b\u5b83\u4f1a\u4f5c\u4e3a\u4e00\u4e2a\u57fa\u7840\u8bbe\u65bd\uff0c\u672a\u6765\u5e94\u7528\u5728\u66f4\u591a\u66f4\u590d\u6742\u7684\u4ea7\u54c1\u548c\u573a\u666f\u4e2d\u3002 \u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u81ea\u7531\u590d\u5236\uff0c\u4fee\u6539\uff0c\u53d1\u5e03\uff0c\u4f7f\u7528\uff0c\u7f16\u8bd1\uff0c\u51fa\u552e\u6216\u4ee5\u83dc\u8c31\u7684\u5f62\u5f0f\u6216\u83dc\u7684\u5f62\u5f0f\u5206\u53d1\uff0c\u65e0\u8bba\u662f\u51fa\u4e8e\u5546\u4e1a\u76ee\u7684\u8fd8\u662f\u975e\u5546\u76ee\u7684\uff0c\u4ee5\u53ca\u4efb\u4f55\u624b\u6bb5\u3002 \u5c3d\u53ef\u80fd\u5f62\u5f0f\u5316 \u5c3d\u53ef\u80fd\u5f62\u5f0f\u5316\uff0c\u5305\u62ec\u7edf\u4e00\u83dc\u8c31\u7684\u6587\u4ef6\u683c\u5f0f\uff0c\u907f\u514d\u4e0d\u7cbe\u51c6\uff08\u5c24\u5176\u662f\u8ba1\u7b97\u673a\u65e0\u6cd5\u7406\u89e3\uff09\u7684\u5355\u4f4d\u548c\u64cd\u4f5c\uff0c\u4fdd\u6301\u6e05\u6670\u7684\u76ee\u5f55\u7ed3\u6784\u7b49\u3002 \u5f88\u591a\u8d21\u732e\u8005\u62b1\u6028\uff1a\u60f3\u7b7e\u5165\u83dc\u8c31\u592a\u96be\uff0c\u8981\u6c42\u592a\u7e41\u7410\u3002\u4f46\u5b9e\u9645\u4e0a\u8fd9\u4efd\u83dc\u8c31\u66f4\u591a\u7684\u4e0d\u662f\u7ed9\u4eba\u7c7b\u9605\u8bfb\u7684\uff0c\u800c\u662f\u66f4\u591a\u7684\u53ef\u80fd\u4f1a\u88ab\u673a\u5668\u5904\u7406\u3002 \u6211\u4eec\u4e00\u5b9a\u8981\u4fdd\u8bc1\uff0c\u6309\u7167\u540c\u4e00\u4efd\u83dc\u8c31\u505a\u83dc\uff0c\u4e0d\u540c\u7684\u4eba\u4e5f\u80fd\u5f97\u5230\u51e0\u4e4e\u76f8\u540c\u7684\u7ed3\u679c\u3002 \u975e\u5546\u4e1a HowToCook \u5c06\u6c38\u8fdc\u4e0d\u63d2\u5165\u5e7f\u544a\uff0c\u5c3d\u53ef\u80fd\u907f\u514d\u83dc\u8c31\u4e2d\u7684\u6750\u6599\u8026\u5408\u7279\u5b9a\u54c1\u724c\uff0c\u5c3d\u53ef\u80fd\u4f7f\u7528\u5bb9\u6613\u53d6\u5f97\u7684\u539f\u6750\u6599\u3002 HowToCook \u5c06\u6c38\u8fdc\u4e0d\u8ba8\u8bba\u53d8\u73b0\u95ee\u9898\u3002\u5e76\u4e14\u6c38\u8fdc\u7531\u793e\u533a\u9a71\u52a8\u7684\u7ef4\u62a4\u4e0b\u53bb\u3002","title":"\u884c\u4e3a\u51c6\u5219"},{"location":"CODE_OF_CONDUCT/#_1","text":"","title":"\u884c\u4e3a\u51c6\u5219"},{"location":"CODE_OF_CONDUCT/#_2","text":"\u6709\u5f88\u591a\u670b\u53cb\u95ee\u6211\uff0c\u4e3a\u4ec0\u4e48\u8981\u7ef4\u62a4\u8fd9\u4e2a\u4ed3\u5e93\uff1f\u4e3a\u4ec0\u4e48\u575a\u6301\u7cbe\u51c6\u7684\u83dc\u8c31\uff1f\u672a\u6765\u8fd9\u4e2a\u4ed3\u5e93\u6253\u7b97\u600e\u4e48\u53d1\u5c55\uff1f\u6709\u6ca1\u6709\u60f3\u6d41\u91cf\u53d8\u73b0\uff1f\u6211\u60f3\u5728\u8fd9\u91cc\u7ed9\u51fa\u6211\u81ea\u5df1\u7684\u7b54\u6848\uff0c\u5e76\u660e\u786e\u8d21\u732e\u7684\u4ef7\u503c\u89c2\u5427\u3002 \u6211\u59cb\u7ec8\u8ba4\u4e3a\uff0c\u6211\u4eec\u6709\u5f88\u5f3a\u7684\u57fa\u7840\u8bbe\u65bd\u5efa\u8bbe\u80fd\u529b\u3002\u4f8b\u5982\uff1a\u6211\u4eec\u6709\u5065\u8eab App\uff0c\u6709\u624b\u73af\uff0c\u6709\u533b\u7597\u5e73\u53f0\uff0c\u6709\u4e70\u83dc\u5e73\u53f0\uff0c\u6709\u5916\u5356\u5e73\u53f0\uff0c\u6709\u667a\u80fd\u51b0\u7bb1\uff0c\u6709\u667a\u80fd\u4f53\u91cd\u79e4\u3001\u667a\u80fd\u8dd1\u6b65\u673a\u7b49\u7b49\u2026\u2026\u4f46\u662f\u6211\u5374\u603b\u9700\u8981\u82b1\u8d39\u7279\u522b\u591a\u7684\u7cbe\u529b\u5468\u65cb\u548c\u8ba1\u7b97\u4e8e\u5b83\u4eec\u4e4b\u95f4\u3002\u6211\u89c9\u5f97\u8fd9\u4e9b\u57fa\u7840\u8bbe\u65bd\u5f7c\u6b64\u4e4b\u95f4\u6c9f\u901a\u80fd\u529b\u7279\u522b\u5dee\u3002 \u6211\u66fe\u7ecf\u5e7b\u60f3\u5728\u672a\u6765\u7684\u4e16\u754c\uff0c\u4eba\u7c7b\u4e0d\u518d\u9700\u8981\u5173\u5fc3\u67f4\u7c73\u6cb9\u76d0\uff0c\u5403\u4ec0\u4e48\u7684\u95ee\u9898\u5c06\u5f7b\u5e95\u5f97\u5230\u89e3\u51b3\u3002\u6211\u4eec\u6bcf\u5929\u7684\u884c\u4e3a\u53ef\u4ee5\u5b8c\u5168\u7531\u8ba1\u7b97\u673a\u7ed9\u51fa\u6700\u4f73\u65b9\u6848\u3002 \u4f8b\u5982\uff1a\u533b\u751f\u5efa\u8bae\u6211\u5728 50 \u5929\u5185\u51cf\u80a5 15 \u65a4\u3002\u90a3\u4e48\u8fd9\u4e9b\u5e94\u7528\u6536\u5230\u4e86\u533b\u7597\u5e73\u53f0\u7684\u7ed3\u8bba\uff0c\u4f1a\u8054\u52a8\u8d77\u6765\u3002\u4e3a\u6211\u8bbe\u8ba1\u5065\u8eab\u8ba1\u5212\uff0c\u81ea\u52a8\u8ba1\u7b97\u6211\u5e94\u8be5\u5403\u7684\u996d\u83dc\uff0c\u81ea\u52a8\u628a\u51b0\u7bb1\u91cc\u7f3a\u7684\u4e1c\u897f\u70b9\u8fc7\u6765\uff0c\u81ea\u52a8\u907f\u514d\u8fc7\u671f\uff0c\u81ea\u52a8\u8ba1\u7b97\u63a8\u8350\u5efa\u8bae\u7684\u996d\u83dc\uff0c\u81ea\u52a8\u5e2e\u6211\u8ba1\u7b97\u70ed\u91cf\u7684\u6444\u5165\u548c\u6d88\u8017\uff0c\u81ea\u52a8\u786e\u4fdd\u6211\u5403\u7684\u8db3\u591f\u591a\u6837\u597d\u5403\u800c\u4e14\u80fd\u591f\u6ee1\u8db3\u6211\u7684\u5065\u5eb7\u8981\u6c42\uff0c\u5e76\u4e14\u81ea\u52a8\u6839\u636e\u6211\u7684\u4f53\u91cd\u79e4\u6d4b\u91cf\u7684\u7ed3\u679c\u77eb\u6b63\u7b49\u3002 \u6211\u89c9\u5f97\u8fd9\u662f\u4e00\u4e2a\u7406\u60f3\u7684\u751f\u547d\u7ba1\u7406\u4f53\u7cfb\u3002\u9700\u8981\u975e\u5e38\u591a\u7684\u57fa\u7840\u8bbe\u65bd\u8054\u5408\uff0c\u6765\u8ba9\u4eba\u771f\u6b63\u5b9e\u73b0\u4e0d\u9700\u8981\u64cd\u5fc3\u8fd9\u4e9b\u67f4\u7c73\u6cb9\u76d0\uff0c\u53ea\u4e13\u6ce8\u4e8e\u81ea\u5df1\u7684\u559c\u7231\u7684\u4e8b\u60c5\u5c31\u884c\u4e86\u3002\u81f3\u4e8e\u6bcf\u5929\u5403\u4ec0\u4e48\u3001\u51e0\u70b9\u5403\u3001\u5403\u591a\u5c11\u3001\u600e\u4e48\u597d\u5403\u3001\u600e\u4e48\u5065\u5eb7\u3001\u600e\u4e48\u5b8c\u6210\u6211\u7684\u5065\u8eab\u8981\u6c42\uff0c\u600e\u4e48\u7b26\u5408\u533b\u751f\u7684\u5efa\u8bae\u7b49\u7b49\u2026\u2026\u5b8c\u5168\u7531\u8ba1\u7b97\u673a\u5e2e\u6211\u5168\u90e8\u641e\u597d\u5c31\u884c\u4e86\u3002 \u6216\u8bb8\u6211\u60f3\uff0c\u5efa\u8bbe\u8fd9\u79cd\u751f\u547d\u5065\u5eb7\u7684\u7cfb\u7edf\uff0c\u6210\u672c\u6781\u9ad8\uff0c\u800c\u4e14\u5f88\u96be\u76c8\u5229\u3002\u6211\u4eec\u73b0\u5728\u8fd8\u662f\u5728\u4e13\u6ce8\u4e8e\u89e3\u51b3\u95ee\u9898\uff0c\u5728\u9047\u5230\u75be\u75c5\u518d\u53bb\u533b\u9662\uff0c\u800c\u6ca1\u6709\u4e00\u4e2a\u7a0b\u5e8f\u771f\u6b63\u5e2e\u6211\u7ba1\u7406\u4e86\u5065\u5eb7\u3002 \u5f53\u7136\u7406\u60f3\u8fd8\u662f\u8981\u6709\u7684\uff0c\u5e0c\u671b\u6709\u4e00\u5929\u8ba1\u7b97\u673a\u80fd\u591f\u5e2e\u52a9\u4eba\u7c7b\u6d88\u706d\u75be\u75c5\u3002\u800c\u90a3\u65f6\uff0c\u6211\u5e0c\u671b\u6211\u7684\u4ed3\u5e93\uff0c\u80fd\u591f\u662f\u8fd9\u4e00\u6574\u5957\u590d\u6742\u7684\u7cfb\u7edf\u4e2d\u7684\u4e00\u5757\u53ef\u9760\u53c8\u5f3a\u5927\u7684\u87ba\u4e1d\u9489\uff0c\u5fe0\u5b9e\u7684\u627f\u62c5\u5b83\u90a3\u6700\u521d\u7684\u4f7f\u547d\uff1a \u63d0\u4f9b\u4e00\u4efd\u8db3\u591f\u7cbe\u51c6\u7684\u83dc\u8c31\u3002","title":"\u6211\u4eec\u4e3a\u4ec0\u4e48\u575a\u6301\u7ef4\u62a4\u8fd9\u4e2a\u4ed3\u5e93"},{"location":"CODE_OF_CONDUCT/#_3","text":"","title":"\u4ed3\u5e93\u539f\u5219"},{"location":"CODE_OF_CONDUCT/#_4","text":"\u6211\u5e0c\u671b\u80fd\u591f\u6709\u5546\u4e1a\u516c\u53f8\u3001\u996d\u5e97\u3001\u4f01\u4e1a\u6216\u79d1\u7814\u673a\u6784\u80fd\u591f\u5f15\u7528\u8fd9\u4e2a\u4ed3\u5e93\u3002\u56e0\u6b64\u5b83\u5c06\u59cb\u7ec8\u575a\u6301\u4e00\u4e2a\u8f83\u5f31\u7684\u8bb8\u53ef\u534f\u8bae\u3002\u6211\u4eec\u5e0c\u671b\u5b83\u4f1a\u4f5c\u4e3a\u4e00\u4e2a\u57fa\u7840\u8bbe\u65bd\uff0c\u672a\u6765\u5e94\u7528\u5728\u66f4\u591a\u66f4\u590d\u6742\u7684\u4ea7\u54c1\u548c\u573a\u666f\u4e2d\u3002 \u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u81ea\u7531\u590d\u5236\uff0c\u4fee\u6539\uff0c\u53d1\u5e03\uff0c\u4f7f\u7528\uff0c\u7f16\u8bd1\uff0c\u51fa\u552e\u6216\u4ee5\u83dc\u8c31\u7684\u5f62\u5f0f\u6216\u83dc\u7684\u5f62\u5f0f\u5206\u53d1\uff0c\u65e0\u8bba\u662f\u51fa\u4e8e\u5546\u4e1a\u76ee\u7684\u8fd8\u662f\u975e\u5546\u76ee\u7684\uff0c\u4ee5\u53ca\u4efb\u4f55\u624b\u6bb5\u3002","title":"\u5f31\u534f\u8bae"},{"location":"CODE_OF_CONDUCT/#_5","text":"\u5c3d\u53ef\u80fd\u5f62\u5f0f\u5316\uff0c\u5305\u62ec\u7edf\u4e00\u83dc\u8c31\u7684\u6587\u4ef6\u683c\u5f0f\uff0c\u907f\u514d\u4e0d\u7cbe\u51c6\uff08\u5c24\u5176\u662f\u8ba1\u7b97\u673a\u65e0\u6cd5\u7406\u89e3\uff09\u7684\u5355\u4f4d\u548c\u64cd\u4f5c\uff0c\u4fdd\u6301\u6e05\u6670\u7684\u76ee\u5f55\u7ed3\u6784\u7b49\u3002 \u5f88\u591a\u8d21\u732e\u8005\u62b1\u6028\uff1a\u60f3\u7b7e\u5165\u83dc\u8c31\u592a\u96be\uff0c\u8981\u6c42\u592a\u7e41\u7410\u3002\u4f46\u5b9e\u9645\u4e0a\u8fd9\u4efd\u83dc\u8c31\u66f4\u591a\u7684\u4e0d\u662f\u7ed9\u4eba\u7c7b\u9605\u8bfb\u7684\uff0c\u800c\u662f\u66f4\u591a\u7684\u53ef\u80fd\u4f1a\u88ab\u673a\u5668\u5904\u7406\u3002 \u6211\u4eec\u4e00\u5b9a\u8981\u4fdd\u8bc1\uff0c\u6309\u7167\u540c\u4e00\u4efd\u83dc\u8c31\u505a\u83dc\uff0c\u4e0d\u540c\u7684\u4eba\u4e5f\u80fd\u5f97\u5230\u51e0\u4e4e\u76f8\u540c\u7684\u7ed3\u679c\u3002","title":"\u5c3d\u53ef\u80fd\u5f62\u5f0f\u5316"},{"location":"CODE_OF_CONDUCT/#_6","text":"HowToCook \u5c06\u6c38\u8fdc\u4e0d\u63d2\u5165\u5e7f\u544a\uff0c\u5c3d\u53ef\u80fd\u907f\u514d\u83dc\u8c31\u4e2d\u7684\u6750\u6599\u8026\u5408\u7279\u5b9a\u54c1\u724c\uff0c\u5c3d\u53ef\u80fd\u4f7f\u7528\u5bb9\u6613\u53d6\u5f97\u7684\u539f\u6750\u6599\u3002 HowToCook \u5c06\u6c38\u8fdc\u4e0d\u8ba8\u8bba\u53d8\u73b0\u95ee\u9898\u3002\u5e76\u4e14\u6c38\u8fdc\u7531\u793e\u533a\u9a71\u52a8\u7684\u7ef4\u62a4\u4e0b\u53bb\u3002","title":"\u975e\u5546\u4e1a"},{"location":"CONTRIBUTING/","text":"\u5982\u4f55\u8d21\u732e \u7b80\u4ecb \u76f4\u63a5\u4fee\u6539/\u6dfb\u52a0\u505a\u83dc\u6307\u5357\u5e76\u63d0\u4ea4 Pull request \u5373\u53ef\u3002 \u5728\u5199\u65b0\u83dc\u8c31\u65f6\uff0c\u8bf7\u590d\u5236\u5e76\u4fee\u6539\u5df2\u6709\u7684\u6a21\u677f: \u793a\u4f8b\u83dc \u3002 \u6211\u4eec\u5efa\u8bae\u5728\u8d21\u732e\u4e4b\u524d\uff0c\u9605\u8bfb\u4ed3\u5e93\u7684 \u884c\u4e3a\u5b88\u5219 \u3002 \u5185\u5bb9\u89c4\u8303 \u83dc\u8c31\u63d0\u4ea4\u8005 \u65e0\u9700 \u9605\u8bfb\u6b64\u5185\u5bb9\u89c4\u8303\u3002\u4ee5\u4e0b\u5185\u5bb9\u5df2\u7ecf\u4ee5\u7b80\u660e\u6613\u61c2\u7684\u65b9\u5f0f\u5305\u542b\u5728\u793a\u4f8b\u6a21\u677f\u4e2d\u3002\u9879\u76ee\u7684\u7ef4\u62a4\u8005\u4f1a\u5728\u4f60\u7684 PR \u4e2d\u63d0\u51fa\u5efa\u8bae, \u5e76\u534f\u52a9\u4fee\u6539\u3002 \u672c\u9879\u76ee\u7684 Motivation \u8981\u6c42\u83dc\u8c31\u6ee1\u8db3\u4ee5\u4e0b\u89c4\u8303\uff0c\u4e0d\u7b26\u5408\u89c4\u8303\u7684\u83dc\u8c31\u5c06\u4e0d\u4f1a\u88ab\u5408\u5e76\u5230\u4ee3\u7801\u5e93\u4e2d\u3002\u9879\u76ee\u7684\u7ef4\u62a4\u8005\u7ef4\u62a4\u6b64\u6587\u6863, \u4f5c\u4e3a\u6b63\u5f0f\u7684\u6807\u51c6\u4e0e\u5171\u8bc6\u3002 \u6bcf\u4e00\u9053\u83dc\u8c31\u81f3\u5c11\u5e94\u5305\u542b \u539f\u6750\u6599\u4e0e\u5de5\u5177 , \u8ba1\u7b97 , \u64cd\u4f5c \u4e09\u90e8\u5206\u5185\u5bb9\u3002 \u539f\u6750\u6599\u4e0e\u5de5\u5177 \u5e94\u5217\u51fa\u672c\u83dc\u54c1\u9700\u8981\u7684\u9664 \u5047\u60f3\u5df2\u51c6\u5907\u597d\u7684\u7269\u54c1 \u5916\u7684\u6240\u6709\u539f\u6750\u6599\u4e0e\u53a8\u5177\u3002 \u8ba1\u7b97 \u5e94\u5b9a\u91cf\u5217\u51fa\u672c\u83dc\u54c1\u6240\u9700\u7684\u539f\u6750\u6599\u7684\u91cf\u3002\uff08\u65e0\u8bba\u4e0e\u4eba\u6570\u662f\u5426\u76f8\u5173\uff09 \u64cd\u4f5c \u5e94\u8bf4\u660e\u83dc\u54c1\u7684\u5236\u4f5c\u6b65\u9aa4\u3002 \u83dc\u54c1\u7684\u5236\u4f5c\u6b65\u9aa4\u5e94\u5f53\u660e\u786e\uff08\u65e0\u6b67\u4e49,non-ambiguous\uff09\uff0c\u5e76\u5c3d\u53ef\u80fd\u51c6\u786e(accurate)\u3002\u6709\u6b67\u4e49(ambiguous)\u7684\u63cf\u8ff0\u662f\u4e0d\u53ef\u63a5\u53d7\u7684\uff0c\u800c\u4e0d\u51c6\u786e(inaccurate)\u6216\u4e0d\u7cbe\u786e(imprecise)\u7684\u63cf\u8ff0\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\u3002 \u4e0d\u51c6\u786e\u7684\u83dc\u8c31\u4f1a\u5bfc\u81f4\u83dc\u54c1\u53e3\u5473\u6709\u5c11\u8bb8\u504f\u5dee\uff0c\u4e0d\u660e\u786e\u7684\u83dc\u8c31\u4f1a\u5bfc\u81f4\u505a\u83dc\u4eba\u7684\u5fc3\u6001\u6709\u660e\u663e\u4e0d\u5b89\u3002 \u4e3e\u4f8b\uff1a\u6709\u6b67\u4e49\u7684\u63cf\u8ff0 # \u89e3\u91ca\uff1a\u6b64\u5904\u5bf9\u4e8e\u76d0\u91cf\u7684\u63cf\u8ff0\u662f\u6709\u6b67\u4e49\u7684\u3002 # \u56e0\u4e3a\u5bf9\u4e8e\u67d0\u4e2a\u6570\u91cf\u7684\u76d0\uff0c\u7528\u6237\u65e0\u6cd5\u5f97\u51fa\u786e\u5b9a\u7684\u5ba2\u89c2\u7ed3\u8bba\uff1a\u6b64\u6570\u91cf\u662f\u5426\u5c5e\u4e8e\"\u5c11\u91cf\"\u3002 \u52a0\u5165\u5c11\u91cf\u76d0 \u52a0\u5165\u51e0\u6ef4\u869d\u6cb9 \u5c06\u9505\u52a0\u70ed\u81f3\u516b\u5206\u70ed \u6492\u4e0a\u5c11\u8bb8\u8471\u82b1 \u716e\u81f3\u9e21\u8089\u65ad\u751f \u4e3e\u4f8b\uff1a\u65e0\u6b67\u4e49\u7684\u63cf\u8ff0 # \u89e3\u91ca\uff1a\u6b64\u5904\u5bf9\u4e8e\u9505\u7684\u6e29\u5ea6\u7684\u63cf\u8ff0\u662f\u4e0d\u51c6\u786e\u7684\uff08\u53ef\u80fd\u662f200\u6444\u6c0f\u5ea6\u5de6\u53f3\u7684\u4efb\u4f55\u6e29\u5ea6\uff09\uff0c\u4f46\u8fd9\u4e2a\u63cf\u8ff0\u662f\u65e0\u6b67\u4e49\u7684\u3002 # \u56e0\u4e3a\u5bf9\u4e8e\u9505\u7684\u67d0\u4e2a\u72b6\u6001\uff0c\u7528\u6237\u53ef\u4ee5\u8fdb\u884c\u6c34\u6ef4\u6d4b\u8bd5\uff0c\u5e76\u5f97\u51fa\u786e\u5b9a\u7684\u5ba2\u89c2\u7ed3\u8bba\uff1a\u6b64\u72b6\u6001\u8981\u4e48\u7b26\u5408\u8981\u6c42\uff0c\u8981\u4e48\u4e0d\u7b26\u5408\u8981\u6c42\u3002 \u52a0\u70ed\u9505\uff0c\u76f4\u81f3\"\u6ef4\u5165\u51e0\u6ef4\u6c34\u65f6\uff0c\u6c34\u73e0\u80fd\u591f\u5728\u9505\u4e0a\u8fc5\u901f\u6eda\u52a8\u800c\u4e0d\u5438\u9644\" \u52a0\u70ed\u9505\uff0c\u76f4\u81f3\u89c2\u5bdf\u5230\u83b1\u987f\u5f17\u7f57\u65af\u7279\u73b0\u8c61 \u52a0\u51655ml\u9171\u6cb9 \u7b49\u5230\u6c34\u6cb8\u817e\u540e \u7ee7\u7eed\u716e\uff0c\u76f4\u5230\u6c64\u6c41\u5269\u4e0b\u4e8c\u5206\u4e4b\u4e00 \u714e\u81f3\u8868\u9762\u5448\u91d1\u9ec4\u8272 \u7ee7\u7eed\u7ffb\u7092\u4e24\u5206\u949f # \u98df\u6750\u6240\u53ef\u80fd\u7c98\u9644\u7684\u86cb\u6db2\u7684\u91cf\u662f\u786e\u5b9a\u7684 \u88f9\u4e0a\u86cb\u6db2 # \u5728'\u8ba1\u7b97'\u4e2d\u5df2\u63d0\u53ca\u5c06\u7528\u5230\u8471\u82b1\u7684\u91cf \u6492\u4e0a\u8471\u82b1 \u8003\u8651\u5230\u73b0\u5b9e\u56e0\u7d20\uff0c\u5bf9\u4e8e\u67d0\u4e9b\u5728\u5bb6\u5ead\u53a8\u623f\u4e2d\u786e\u5b9e\u96be\u4ee5\u660e\u786e\u63cf\u8ff0\u7684\u56e0\u7d20\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u7279\u4f8b\u6392\u9664\u3002\u4f8b\u5982 # \u5728\u63cf\u8ff0\u71c3\u6c14\u7076\u706b\u7130\u5f3a\u5ea6\u65f6 \u6587\u706b, \u5c0f\u706b, \u4e2d\u706b, \u5927\u706b \u7b49 # \u5728\u63cf\u8ff0\u989c\u8272\u65f6 \u91d1\u9ec4\u8272 \u7b49 # \u5728\u63cf\u8ff0\u786c\u5ea6\u65f6 \u53d8\u8f6f \u53d8\u786c \u83dc\u54c1\u7684 \u5236\u4f5c\u6b65\u9aa4 \u5e94\u5f53\u5b8c\u6574(complete)\u3002\u8fd9\u610f\u5473\u7740, \u5728\u6267\u884c\u5b8c\u6240\u6709\u64cd\u4f5c\u6b65\u9aa4\u540e, \u83dc\u54c1\u5df2\u7ecf\u88ab\u5b8c\u6210\u3002 \u83dc\u54c1\u7684 \u539f\u6750\u6599\u4e0e\u5de5\u5177 \u5e94\u5f53\u5b8c\u6574(complete)\u3002\u8fd9\u610f\u5473\u7740, \u5728\u6267\u884c\u64cd\u4f5c\u6b65\u9aa4\u65f6, \u6ca1\u6709\u7528\u5230 \u539f\u6750\u6599\u4e0e\u5de5\u5177 \u4e2d\u672a\u63d0\u5230\u7684\u7269\u54c1\u3002 \u5ba1\u6838\u5458\u987b\u77e5 \u4e0b\u9762\u7684\u5185\u5bb9\u4ec5\u4f9b\u53c2\u4e0e\u83dc\u8c31\u5ba1\u6279\u7684\u4eba\u5458\u53c2\u8003\u3002 \u5ba1\u6279\u65f6\uff0c\u6700\u91cd\u8981\u7684\u662f\u907f\u514d\u6b67\u4e49\uff1a\u4fdd\u8bc1\u6309\u7167\u4ed6\u7684\u83dc\u8c31\u5c3d\u53ef\u80fd\u6ca1\u6709\u7075\u6d3b\u53d1\u6325\u7a7a\u95f4\u3002\u6240\u6709\u6b67\u4e49\u90fd\u8981\u6307\u51fa\u3002\u5c31\u662f\uff0c\u65e0\u8bba\u662f\u4e2a\u5927\u53a8\u8fd8\u662f\u4e2a\u840c\u65b0\uff0c\u53ea\u8981\u6309\u7167\u83dc\u8c31\uff0c\u505a\u51fa\u6765\u7684\u6548\u679c\u5e94\u8be5\u5b8c\u5168\u4e00\u6837\u3002 \u7edd\u5bf9\u4e0d\u5141\u8bb8\u83dc\u8c31\u4e2d\u51fa\u73b0\u7075\u6d3b\u53d1\u6325\u7684\u7a7a\u95f4\u3002\u4e0d\u5141\u8bb8\u8ba9\u53a8\u5e08\u81ea\u5df1\u659f\u914c\u52a0\u5165\u7684\u91cf\u3002\u4e0d\u5141\u8bb8\u51fa\u73b0 \u9002\u91cf \u5c11\u91cf \u7edd\u5bf9\u4e0d\u5141\u8bb8\u51fa\u73b0\u5141\u8bb8\u53a8\u5e08\u81ea\u5df1\u51b3\u7b56\u7684\u6b65\u9aa4\u3002\u4f8b\u5982\uff1a \u53ef\u4ee5\u6839\u636e\u81ea\u5df1\u7684\u559c\u597d\u8c03\u6574\u716e\u7684\u65f6\u95f4 \u8fd9\u91cc\u8bed\u53e5 \u9488\u5bf9\u5355\u4e2a\u5927\u5c0f\u4f53\u79ef\u91cd\u91cf\u5dee\u8ddd\u6781\u5927\u7684\u7269\u4f53\uff0c\u4e0d\u5141\u8bb8\u7528\u4e2a\u6765\u7ea6\u675f\uff0c\u8981\u989d\u5916\u6807\u6ce8\u91cd\u91cf g \u52fa \u4e0d\u662f\u4e00\u4e2a\u53ef\u9760\u7684\u5355\u4f4d\u3002\u5efa\u8bae\u6362\u6210\u6beb\u5347 ml \u786e\u4fdd\u6587\u4ef6\u8def\u5f84\u5408\u7406\uff0c\u6587\u4ef6\u5f15\u7528\u6b63\u786e\uff0c\u6ca1\u6709\u7b7e\u5165\u65e0\u610f\u4e49\u7684\u6587\u4ef6 \u5bf9\u849c\u7684\u63cf\u8ff0\uff0c\u6307\u7684\u662f\u4e09\u5934\u8fd8\u662f\u4e09\u74e3\u53ef\u80fd\u4ea7\u751f\u6b67\u4e49 \u5141\u8bb8\u51fa\u73b0 \u5927\u706b \u4e2d\u706b \u5c0f\u706b \u4efb\u4f55\u6807\u70b9\u7b26\u53f7\uff0c\u4f8b\u5982\u987f\u53f7\uff0c\u90fd\u9700\u8981\u989d\u5916\u786e\u8ba4\u662f\u5426\u662f \u53ef\u4ee5\u66ff\u4ee3\u7684\u6216 \uff0c\u8fd8\u662f \u5fc5\u987b\u540c\u65f6\u6dfb\u52a0\u7684\u548c \u5982\u679c\u4e00\u4e2a\u539f\u6750\u6599\u4ec5\u4ec5\u8ba1\u7b97\u4e86\u4e00\u6b21\uff0c\u800c\u5f15\u7528\u4e86\u591a\u6b21\uff0c\u5fc5\u987b\u989d\u5916\u786e\u8ba4\u6bcf\u6b21\u5f15\u7528\u65f6\u6307\u7684\u91cf\u7684\u591a\u5c11 \u786e\u4fdd\u4ed6\u5728\u5408\u5e76\u524d\u66f4\u65b0\u4e86 Readme \u5bf9\u4ed6\u7684\u83dc\u8c31\u7684\u5f15\u7528\uff0c\u5982\u679c\u4ed6\u662f\u5728\u65b0\u52a0\u83dc\u8c31\u7684\u8bdd \u786e\u4fdd\u4ed6\u6ca1\u6709\u7834\u574f\u6a21\u677f\u7684\u4e00\u4e8c\u7ea7\u6807\u9898\u683c\u5f0f \u786e\u4fdd\u4ed6\u6ca1\u6709\u5220\u9664\u6a21\u677f\u4e2d\u5fc5\u9700\u7684\u5185\u5bb9 \u786e\u4fdd\u4ed6\u5220\u9664\u5e72\u51c0\u4e86\u6a21\u677f\u91cc\u7684\u6ce8\u91ca \u786e\u4fdd\u5206\u7c7b\u6b63\u786e\uff0c\u4e0d\u548c\u5df2\u6709\u7684\u83dc\u540d\u91cd\u590d \u786e\u4fdd\u7b7e\u5165\u7684\u5185\u5bb9\u90fd\u7b26\u5408 CC0 \u534f\u8bae\u3002\u5c24\u5176\u6ce8\u610f\u56fe\u7247\u662f\u5426\u6709\u6c34\u5370\uff01 \u786e\u4fdd\u4ed6\u6ca1\u6709\u7b7e\u5165\u4efb\u4f55\u4e2a\u4eba\u8eab\u4efd\u4fe1\u606f\u3001EUII\u3001Email \u5730\u5740\u3001GitHub \u7528\u6237\u540d \u6587\u6863\u7f51\u7ad9\u6784\u5efa \u9664\u4e86\u76f4\u63a5\u90e8\u7f72 README.md \u7684 HTML\uff0c\u8fd8\u53ef\u4ee5\u5229\u7528 mkdocs-material \u6765\u6e32\u67d3 markdown \u6587\u4ef6\u3002\u8fd9\u4f1a\u5f97\u5230\u66f4\u52a0\u6f02\u4eae\u7684\u9875\u9762\u3002 \u9700\u6c42: Python > 3.6 \u8c03\u8bd5 pip install -r requirements.txt mkdocs serve \u53ef\u4ee5\u5728\u672c\u5730 http://localhost:8000/ \u6253\u5f00\u3002 \u7f16\u8bd1 mkdocs build --strict \u751f\u6210\u9759\u6001 HTML \u7f51\u9875, \u5b58\u5728\u4e8e\u5728 site/ \u6587\u4ef6\u5939\u4e0b\u3002Hosting \u7684\u65f6\u5019\u6307\u5411\u5230 site/index.html \u5373\u53ef\u3002 Note: \u7531\u4e8e mkdocs \u4e0d\u539f\u751f\u652f\u6301 *.md \u5b58\u5728\u4e8e\u6839\u76ee\u5f55\u4e0b\uff0c\u53ea\u80fd\u6dfb\u52a0\u4e86 mkdocs-same-dir \u8fd9\u4e2a\u63d2\u4ef6\u6765\u505aworkaround\u3002 \u901a\u5e38\u6765\u8bf4mkdoc\u4f1a\u81ea\u52a8\u68c0\u67e5\u6587\u4ef6\u5939\u91cc\u7684\u5404\u79cd\u6587\u4ef6 (eg *.jpg)\u7136\u540e\u751f\u6210\u76f8\u5bf9\u5e94\u7684\u94fe\u63a5\u3002\u7531\u4e8e\u8fd9\u4e2a workaround\uff0c\u6839\u76ee\u5f55\u4e0b\u73b0\u5728\u53ea\u80fd\u68c0\u6d4b\u5230 .md \u6587\u4ef6\u3002\u8fd9\u4e2a\u9650\u5236\u5e76\u4e0d\u5f71\u54cd\u5269\u4e0b\u7684\u6587\u4ef6\u5939\uff08\u6bd4\u65b9\u8bf4 tips \u548c dishes )\u3002 \u624b\u5de5 lint \u5982\u679c\u9700\u8981\u68c0\u67e5\u6587\u6863\u4e2d\u7684\u4e0d\u89c4\u8303\uff0c\u53ef\u4ee5\u624b\u5de5\u8fd0\u884c lint \u64cd\u4f5c\u3002 \u9700\u6c42\uff1aRuby \u5b89\u88c5 markdownlint sudo gem install mdl # Linux gem install mdl # Windows, with administrators permission. \u8fd0\u884c lint mdl . -r ~MD036,~MD024,~MD004,~MD029 \u751f\u6210 Readme \u548c mkdocs \u4e00\u822c\u7684\uff0c\u6bcf\u6b21 master \u5206\u652f\u53d1\u751f\u53d8\u66f4\u540e\uff0c\u4f1a\u81ea\u52a8\u751f\u6210 Readme \u548c mkdocs \u6587\u4ef6\u3002\u4f46\u662f\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u53ef\u80fd\u9700\u8981\u5f00\u53d1\u8005\u624b\u5de5\u751f\u6210\u8fd9\u4e9b\u6587\u4ef6\u3002 \u9700\u6c42\uff1anode,npm node ./.github/readme-generate.js \u81ea\u52a8 markdown \u4fee\u590d \u6846\u67b6\u652f\u6301\u4e00\u4e9b\u81ea\u52a8 markdown \u9519\u8bef\u4fee\u6b63\u529f\u80fd\u3002\u4e00\u822c\u7684\uff0c\u6bcf\u6b21 master \u5206\u652f\u53d1\u751f\u53d8\u66f4\u540e\uff0c\u4f1a\u81ea\u52a8\u4fee\u6b63\u3002\u4f46\u662f\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u53ef\u80fd\u9700\u8981\u5f00\u53d1\u8005\u624b\u5de5\u4fee\u6b63\u3002 \u9700\u6c42\uff1anode,npm npm install ./node_modules/.bin/textlint . --fix","title":"\u5982\u4f55\u8d21\u732e"},{"location":"CONTRIBUTING/#_1","text":"","title":"\u5982\u4f55\u8d21\u732e"},{"location":"CONTRIBUTING/#_2","text":"\u76f4\u63a5\u4fee\u6539/\u6dfb\u52a0\u505a\u83dc\u6307\u5357\u5e76\u63d0\u4ea4 Pull request \u5373\u53ef\u3002 \u5728\u5199\u65b0\u83dc\u8c31\u65f6\uff0c\u8bf7\u590d\u5236\u5e76\u4fee\u6539\u5df2\u6709\u7684\u6a21\u677f: \u793a\u4f8b\u83dc \u3002 \u6211\u4eec\u5efa\u8bae\u5728\u8d21\u732e\u4e4b\u524d\uff0c\u9605\u8bfb\u4ed3\u5e93\u7684 \u884c\u4e3a\u5b88\u5219 \u3002","title":"\u7b80\u4ecb"},{"location":"CONTRIBUTING/#_3","text":"\u83dc\u8c31\u63d0\u4ea4\u8005 \u65e0\u9700 \u9605\u8bfb\u6b64\u5185\u5bb9\u89c4\u8303\u3002\u4ee5\u4e0b\u5185\u5bb9\u5df2\u7ecf\u4ee5\u7b80\u660e\u6613\u61c2\u7684\u65b9\u5f0f\u5305\u542b\u5728\u793a\u4f8b\u6a21\u677f\u4e2d\u3002\u9879\u76ee\u7684\u7ef4\u62a4\u8005\u4f1a\u5728\u4f60\u7684 PR \u4e2d\u63d0\u51fa\u5efa\u8bae, \u5e76\u534f\u52a9\u4fee\u6539\u3002 \u672c\u9879\u76ee\u7684 Motivation \u8981\u6c42\u83dc\u8c31\u6ee1\u8db3\u4ee5\u4e0b\u89c4\u8303\uff0c\u4e0d\u7b26\u5408\u89c4\u8303\u7684\u83dc\u8c31\u5c06\u4e0d\u4f1a\u88ab\u5408\u5e76\u5230\u4ee3\u7801\u5e93\u4e2d\u3002\u9879\u76ee\u7684\u7ef4\u62a4\u8005\u7ef4\u62a4\u6b64\u6587\u6863, \u4f5c\u4e3a\u6b63\u5f0f\u7684\u6807\u51c6\u4e0e\u5171\u8bc6\u3002 \u6bcf\u4e00\u9053\u83dc\u8c31\u81f3\u5c11\u5e94\u5305\u542b \u539f\u6750\u6599\u4e0e\u5de5\u5177 , \u8ba1\u7b97 , \u64cd\u4f5c \u4e09\u90e8\u5206\u5185\u5bb9\u3002 \u539f\u6750\u6599\u4e0e\u5de5\u5177 \u5e94\u5217\u51fa\u672c\u83dc\u54c1\u9700\u8981\u7684\u9664 \u5047\u60f3\u5df2\u51c6\u5907\u597d\u7684\u7269\u54c1 \u5916\u7684\u6240\u6709\u539f\u6750\u6599\u4e0e\u53a8\u5177\u3002 \u8ba1\u7b97 \u5e94\u5b9a\u91cf\u5217\u51fa\u672c\u83dc\u54c1\u6240\u9700\u7684\u539f\u6750\u6599\u7684\u91cf\u3002\uff08\u65e0\u8bba\u4e0e\u4eba\u6570\u662f\u5426\u76f8\u5173\uff09 \u64cd\u4f5c \u5e94\u8bf4\u660e\u83dc\u54c1\u7684\u5236\u4f5c\u6b65\u9aa4\u3002 \u83dc\u54c1\u7684\u5236\u4f5c\u6b65\u9aa4\u5e94\u5f53\u660e\u786e\uff08\u65e0\u6b67\u4e49,non-ambiguous\uff09\uff0c\u5e76\u5c3d\u53ef\u80fd\u51c6\u786e(accurate)\u3002\u6709\u6b67\u4e49(ambiguous)\u7684\u63cf\u8ff0\u662f\u4e0d\u53ef\u63a5\u53d7\u7684\uff0c\u800c\u4e0d\u51c6\u786e(inaccurate)\u6216\u4e0d\u7cbe\u786e(imprecise)\u7684\u63cf\u8ff0\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\u3002 \u4e0d\u51c6\u786e\u7684\u83dc\u8c31\u4f1a\u5bfc\u81f4\u83dc\u54c1\u53e3\u5473\u6709\u5c11\u8bb8\u504f\u5dee\uff0c\u4e0d\u660e\u786e\u7684\u83dc\u8c31\u4f1a\u5bfc\u81f4\u505a\u83dc\u4eba\u7684\u5fc3\u6001\u6709\u660e\u663e\u4e0d\u5b89\u3002 \u4e3e\u4f8b\uff1a\u6709\u6b67\u4e49\u7684\u63cf\u8ff0 # \u89e3\u91ca\uff1a\u6b64\u5904\u5bf9\u4e8e\u76d0\u91cf\u7684\u63cf\u8ff0\u662f\u6709\u6b67\u4e49\u7684\u3002 # \u56e0\u4e3a\u5bf9\u4e8e\u67d0\u4e2a\u6570\u91cf\u7684\u76d0\uff0c\u7528\u6237\u65e0\u6cd5\u5f97\u51fa\u786e\u5b9a\u7684\u5ba2\u89c2\u7ed3\u8bba\uff1a\u6b64\u6570\u91cf\u662f\u5426\u5c5e\u4e8e\"\u5c11\u91cf\"\u3002 \u52a0\u5165\u5c11\u91cf\u76d0 \u52a0\u5165\u51e0\u6ef4\u869d\u6cb9 \u5c06\u9505\u52a0\u70ed\u81f3\u516b\u5206\u70ed \u6492\u4e0a\u5c11\u8bb8\u8471\u82b1 \u716e\u81f3\u9e21\u8089\u65ad\u751f \u4e3e\u4f8b\uff1a\u65e0\u6b67\u4e49\u7684\u63cf\u8ff0 # \u89e3\u91ca\uff1a\u6b64\u5904\u5bf9\u4e8e\u9505\u7684\u6e29\u5ea6\u7684\u63cf\u8ff0\u662f\u4e0d\u51c6\u786e\u7684\uff08\u53ef\u80fd\u662f200\u6444\u6c0f\u5ea6\u5de6\u53f3\u7684\u4efb\u4f55\u6e29\u5ea6\uff09\uff0c\u4f46\u8fd9\u4e2a\u63cf\u8ff0\u662f\u65e0\u6b67\u4e49\u7684\u3002 # \u56e0\u4e3a\u5bf9\u4e8e\u9505\u7684\u67d0\u4e2a\u72b6\u6001\uff0c\u7528\u6237\u53ef\u4ee5\u8fdb\u884c\u6c34\u6ef4\u6d4b\u8bd5\uff0c\u5e76\u5f97\u51fa\u786e\u5b9a\u7684\u5ba2\u89c2\u7ed3\u8bba\uff1a\u6b64\u72b6\u6001\u8981\u4e48\u7b26\u5408\u8981\u6c42\uff0c\u8981\u4e48\u4e0d\u7b26\u5408\u8981\u6c42\u3002 \u52a0\u70ed\u9505\uff0c\u76f4\u81f3\"\u6ef4\u5165\u51e0\u6ef4\u6c34\u65f6\uff0c\u6c34\u73e0\u80fd\u591f\u5728\u9505\u4e0a\u8fc5\u901f\u6eda\u52a8\u800c\u4e0d\u5438\u9644\" \u52a0\u70ed\u9505\uff0c\u76f4\u81f3\u89c2\u5bdf\u5230\u83b1\u987f\u5f17\u7f57\u65af\u7279\u73b0\u8c61 \u52a0\u51655ml\u9171\u6cb9 \u7b49\u5230\u6c34\u6cb8\u817e\u540e \u7ee7\u7eed\u716e\uff0c\u76f4\u5230\u6c64\u6c41\u5269\u4e0b\u4e8c\u5206\u4e4b\u4e00 \u714e\u81f3\u8868\u9762\u5448\u91d1\u9ec4\u8272 \u7ee7\u7eed\u7ffb\u7092\u4e24\u5206\u949f # \u98df\u6750\u6240\u53ef\u80fd\u7c98\u9644\u7684\u86cb\u6db2\u7684\u91cf\u662f\u786e\u5b9a\u7684 \u88f9\u4e0a\u86cb\u6db2 # \u5728'\u8ba1\u7b97'\u4e2d\u5df2\u63d0\u53ca\u5c06\u7528\u5230\u8471\u82b1\u7684\u91cf \u6492\u4e0a\u8471\u82b1 \u8003\u8651\u5230\u73b0\u5b9e\u56e0\u7d20\uff0c\u5bf9\u4e8e\u67d0\u4e9b\u5728\u5bb6\u5ead\u53a8\u623f\u4e2d\u786e\u5b9e\u96be\u4ee5\u660e\u786e\u63cf\u8ff0\u7684\u56e0\u7d20\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u7279\u4f8b\u6392\u9664\u3002\u4f8b\u5982 # \u5728\u63cf\u8ff0\u71c3\u6c14\u7076\u706b\u7130\u5f3a\u5ea6\u65f6 \u6587\u706b, \u5c0f\u706b, \u4e2d\u706b, \u5927\u706b \u7b49 # \u5728\u63cf\u8ff0\u989c\u8272\u65f6 \u91d1\u9ec4\u8272 \u7b49 # \u5728\u63cf\u8ff0\u786c\u5ea6\u65f6 \u53d8\u8f6f \u53d8\u786c \u83dc\u54c1\u7684 \u5236\u4f5c\u6b65\u9aa4 \u5e94\u5f53\u5b8c\u6574(complete)\u3002\u8fd9\u610f\u5473\u7740, \u5728\u6267\u884c\u5b8c\u6240\u6709\u64cd\u4f5c\u6b65\u9aa4\u540e, \u83dc\u54c1\u5df2\u7ecf\u88ab\u5b8c\u6210\u3002 \u83dc\u54c1\u7684 \u539f\u6750\u6599\u4e0e\u5de5\u5177 \u5e94\u5f53\u5b8c\u6574(complete)\u3002\u8fd9\u610f\u5473\u7740, \u5728\u6267\u884c\u64cd\u4f5c\u6b65\u9aa4\u65f6, \u6ca1\u6709\u7528\u5230 \u539f\u6750\u6599\u4e0e\u5de5\u5177 \u4e2d\u672a\u63d0\u5230\u7684\u7269\u54c1\u3002","title":"\u5185\u5bb9\u89c4\u8303"},{"location":"CONTRIBUTING/#_4","text":"\u4e0b\u9762\u7684\u5185\u5bb9\u4ec5\u4f9b\u53c2\u4e0e\u83dc\u8c31\u5ba1\u6279\u7684\u4eba\u5458\u53c2\u8003\u3002 \u5ba1\u6279\u65f6\uff0c\u6700\u91cd\u8981\u7684\u662f\u907f\u514d\u6b67\u4e49\uff1a\u4fdd\u8bc1\u6309\u7167\u4ed6\u7684\u83dc\u8c31\u5c3d\u53ef\u80fd\u6ca1\u6709\u7075\u6d3b\u53d1\u6325\u7a7a\u95f4\u3002\u6240\u6709\u6b67\u4e49\u90fd\u8981\u6307\u51fa\u3002\u5c31\u662f\uff0c\u65e0\u8bba\u662f\u4e2a\u5927\u53a8\u8fd8\u662f\u4e2a\u840c\u65b0\uff0c\u53ea\u8981\u6309\u7167\u83dc\u8c31\uff0c\u505a\u51fa\u6765\u7684\u6548\u679c\u5e94\u8be5\u5b8c\u5168\u4e00\u6837\u3002 \u7edd\u5bf9\u4e0d\u5141\u8bb8\u83dc\u8c31\u4e2d\u51fa\u73b0\u7075\u6d3b\u53d1\u6325\u7684\u7a7a\u95f4\u3002\u4e0d\u5141\u8bb8\u8ba9\u53a8\u5e08\u81ea\u5df1\u659f\u914c\u52a0\u5165\u7684\u91cf\u3002\u4e0d\u5141\u8bb8\u51fa\u73b0 \u9002\u91cf \u5c11\u91cf \u7edd\u5bf9\u4e0d\u5141\u8bb8\u51fa\u73b0\u5141\u8bb8\u53a8\u5e08\u81ea\u5df1\u51b3\u7b56\u7684\u6b65\u9aa4\u3002\u4f8b\u5982\uff1a \u53ef\u4ee5\u6839\u636e\u81ea\u5df1\u7684\u559c\u597d\u8c03\u6574\u716e\u7684\u65f6\u95f4 \u8fd9\u91cc\u8bed\u53e5 \u9488\u5bf9\u5355\u4e2a\u5927\u5c0f\u4f53\u79ef\u91cd\u91cf\u5dee\u8ddd\u6781\u5927\u7684\u7269\u4f53\uff0c\u4e0d\u5141\u8bb8\u7528\u4e2a\u6765\u7ea6\u675f\uff0c\u8981\u989d\u5916\u6807\u6ce8\u91cd\u91cf g \u52fa \u4e0d\u662f\u4e00\u4e2a\u53ef\u9760\u7684\u5355\u4f4d\u3002\u5efa\u8bae\u6362\u6210\u6beb\u5347 ml \u786e\u4fdd\u6587\u4ef6\u8def\u5f84\u5408\u7406\uff0c\u6587\u4ef6\u5f15\u7528\u6b63\u786e\uff0c\u6ca1\u6709\u7b7e\u5165\u65e0\u610f\u4e49\u7684\u6587\u4ef6 \u5bf9\u849c\u7684\u63cf\u8ff0\uff0c\u6307\u7684\u662f\u4e09\u5934\u8fd8\u662f\u4e09\u74e3\u53ef\u80fd\u4ea7\u751f\u6b67\u4e49 \u5141\u8bb8\u51fa\u73b0 \u5927\u706b \u4e2d\u706b \u5c0f\u706b \u4efb\u4f55\u6807\u70b9\u7b26\u53f7\uff0c\u4f8b\u5982\u987f\u53f7\uff0c\u90fd\u9700\u8981\u989d\u5916\u786e\u8ba4\u662f\u5426\u662f \u53ef\u4ee5\u66ff\u4ee3\u7684\u6216 \uff0c\u8fd8\u662f \u5fc5\u987b\u540c\u65f6\u6dfb\u52a0\u7684\u548c \u5982\u679c\u4e00\u4e2a\u539f\u6750\u6599\u4ec5\u4ec5\u8ba1\u7b97\u4e86\u4e00\u6b21\uff0c\u800c\u5f15\u7528\u4e86\u591a\u6b21\uff0c\u5fc5\u987b\u989d\u5916\u786e\u8ba4\u6bcf\u6b21\u5f15\u7528\u65f6\u6307\u7684\u91cf\u7684\u591a\u5c11 \u786e\u4fdd\u4ed6\u5728\u5408\u5e76\u524d\u66f4\u65b0\u4e86 Readme \u5bf9\u4ed6\u7684\u83dc\u8c31\u7684\u5f15\u7528\uff0c\u5982\u679c\u4ed6\u662f\u5728\u65b0\u52a0\u83dc\u8c31\u7684\u8bdd \u786e\u4fdd\u4ed6\u6ca1\u6709\u7834\u574f\u6a21\u677f\u7684\u4e00\u4e8c\u7ea7\u6807\u9898\u683c\u5f0f \u786e\u4fdd\u4ed6\u6ca1\u6709\u5220\u9664\u6a21\u677f\u4e2d\u5fc5\u9700\u7684\u5185\u5bb9 \u786e\u4fdd\u4ed6\u5220\u9664\u5e72\u51c0\u4e86\u6a21\u677f\u91cc\u7684\u6ce8\u91ca \u786e\u4fdd\u5206\u7c7b\u6b63\u786e\uff0c\u4e0d\u548c\u5df2\u6709\u7684\u83dc\u540d\u91cd\u590d \u786e\u4fdd\u7b7e\u5165\u7684\u5185\u5bb9\u90fd\u7b26\u5408 CC0 \u534f\u8bae\u3002\u5c24\u5176\u6ce8\u610f\u56fe\u7247\u662f\u5426\u6709\u6c34\u5370\uff01 \u786e\u4fdd\u4ed6\u6ca1\u6709\u7b7e\u5165\u4efb\u4f55\u4e2a\u4eba\u8eab\u4efd\u4fe1\u606f\u3001EUII\u3001Email \u5730\u5740\u3001GitHub \u7528\u6237\u540d","title":"\u5ba1\u6838\u5458\u987b\u77e5"},{"location":"CONTRIBUTING/#_5","text":"\u9664\u4e86\u76f4\u63a5\u90e8\u7f72 README.md \u7684 HTML\uff0c\u8fd8\u53ef\u4ee5\u5229\u7528 mkdocs-material \u6765\u6e32\u67d3 markdown \u6587\u4ef6\u3002\u8fd9\u4f1a\u5f97\u5230\u66f4\u52a0\u6f02\u4eae\u7684\u9875\u9762\u3002 \u9700\u6c42: Python > 3.6","title":"\u6587\u6863\u7f51\u7ad9\u6784\u5efa"},{"location":"CONTRIBUTING/#_6","text":"pip install -r requirements.txt mkdocs serve \u53ef\u4ee5\u5728\u672c\u5730 http://localhost:8000/ \u6253\u5f00\u3002","title":"\u8c03\u8bd5"},{"location":"CONTRIBUTING/#_7","text":"mkdocs build --strict \u751f\u6210\u9759\u6001 HTML \u7f51\u9875, \u5b58\u5728\u4e8e\u5728 site/ \u6587\u4ef6\u5939\u4e0b\u3002Hosting \u7684\u65f6\u5019\u6307\u5411\u5230 site/index.html \u5373\u53ef\u3002 Note: \u7531\u4e8e mkdocs \u4e0d\u539f\u751f\u652f\u6301 *.md \u5b58\u5728\u4e8e\u6839\u76ee\u5f55\u4e0b\uff0c\u53ea\u80fd\u6dfb\u52a0\u4e86 mkdocs-same-dir \u8fd9\u4e2a\u63d2\u4ef6\u6765\u505aworkaround\u3002 \u901a\u5e38\u6765\u8bf4mkdoc\u4f1a\u81ea\u52a8\u68c0\u67e5\u6587\u4ef6\u5939\u91cc\u7684\u5404\u79cd\u6587\u4ef6 (eg *.jpg)\u7136\u540e\u751f\u6210\u76f8\u5bf9\u5e94\u7684\u94fe\u63a5\u3002\u7531\u4e8e\u8fd9\u4e2a workaround\uff0c\u6839\u76ee\u5f55\u4e0b\u73b0\u5728\u53ea\u80fd\u68c0\u6d4b\u5230 .md \u6587\u4ef6\u3002\u8fd9\u4e2a\u9650\u5236\u5e76\u4e0d\u5f71\u54cd\u5269\u4e0b\u7684\u6587\u4ef6\u5939\uff08\u6bd4\u65b9\u8bf4 tips \u548c dishes )\u3002","title":"\u7f16\u8bd1"},{"location":"CONTRIBUTING/#lint","text":"\u5982\u679c\u9700\u8981\u68c0\u67e5\u6587\u6863\u4e2d\u7684\u4e0d\u89c4\u8303\uff0c\u53ef\u4ee5\u624b\u5de5\u8fd0\u884c lint \u64cd\u4f5c\u3002 \u9700\u6c42\uff1aRuby","title":"\u624b\u5de5 lint"},{"location":"CONTRIBUTING/#markdownlint","text":"sudo gem install mdl # Linux gem install mdl # Windows, with administrators permission.","title":"\u5b89\u88c5 markdownlint"},{"location":"CONTRIBUTING/#lint_1","text":"mdl . -r ~MD036,~MD024,~MD004,~MD029","title":"\u8fd0\u884c lint"},{"location":"CONTRIBUTING/#readme-mkdocs","text":"\u4e00\u822c\u7684\uff0c\u6bcf\u6b21 master \u5206\u652f\u53d1\u751f\u53d8\u66f4\u540e\uff0c\u4f1a\u81ea\u52a8\u751f\u6210 Readme \u548c mkdocs \u6587\u4ef6\u3002\u4f46\u662f\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u53ef\u80fd\u9700\u8981\u5f00\u53d1\u8005\u624b\u5de5\u751f\u6210\u8fd9\u4e9b\u6587\u4ef6\u3002 \u9700\u6c42\uff1anode,npm node ./.github/readme-generate.js","title":"\u751f\u6210 Readme \u548c mkdocs"},{"location":"CONTRIBUTING/#markdown","text":"\u6846\u67b6\u652f\u6301\u4e00\u4e9b\u81ea\u52a8 markdown \u9519\u8bef\u4fee\u6b63\u529f\u80fd\u3002\u4e00\u822c\u7684\uff0c\u6bcf\u6b21 master \u5206\u652f\u53d1\u751f\u53d8\u66f4\u540e\uff0c\u4f1a\u81ea\u52a8\u4fee\u6b63\u3002\u4f46\u662f\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u53ef\u80fd\u9700\u8981\u5f00\u53d1\u8005\u624b\u5de5\u4fee\u6b63\u3002 \u9700\u6c42\uff1anode,npm npm install ./node_modules/.bin/textlint . --fix","title":"\u81ea\u52a8 markdown \u4fee\u590d"},{"location":"dishes/aquatic/%E5%92%96%E5%96%B1%E7%82%92%E8%9F%B9/","text":"\u5496\u55b1\u7092\u87f9\u7684\u505a\u6cd5 \u7b2c\u4e00\u6b21\u5403\u5496\u55b1\u7092\u87f9\u662f\u5728\u6cf0\u56fd\u7684\u5efa\u5174\u9152\u5bb6\u4e2d\u9910\u5385\uff0c\u7206\u8089\u7684\u8783\u87f9\u6302\u6ee1\u6709\u87f9\u9ec4\u5473\u9053\u7684\u5496\u55b1\uff0c\u5473\u9053\u771f\u7684\u7edd\uff0c\u559c\u6b22\u5403\u6d77\u9c9c\u7684\u7a0b\u5e8f\u5458\u7edd\u5bf9\u4e0d\u80fd\u9519\u8fc7\u3002\u64cd\u4f5c\u7b80\u5355\uff0c\u5bf9\u6cbf\u6d77\u7684\u7a0b\u5e8f\u5458\u975e\u5e38\u53cb\u597d\u3002 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u9752\u87f9\uff08\u522b\u79f0\uff1a\u8089\u87f9\uff09 \u5496\u55b1\u5757\uff08\u63a8\u4ecb\u4e50\u60e0\u87f9\u9ec4\u5496\u55b1\uff09 \u6d0b\u8471 \u6930\u6d46 \u9e21\u86cb \u751f\u7c89\uff08\u522b\u79f0\uff1a\u6dc0\u7c89\uff09 \u5927\u849c \u8ba1\u7b97 \u6bcf\u4efd\uff1a \u8089\u87f9 1 \u53ea\uff08300g \u5de6\u53f3\uff09 * \u4eba\u6570 \u5496\u55b1\u5757 15g\uff08\u4e00\u5c0f\u5757\uff09*\u4eba\u6570 \u6930\u6d46 100ml*\u4eba\u6570 \u9e21\u86cb 1 \u4e2a *\u4eba\u6570 \u6d0b\u8471 200g *\u4eba\u6570 \u5927\u849c 5 \u74e3 *\u4eba\u6570 \u64cd\u4f5c \u8089\u87f9\u6380\u76d6\u540e\u5bf9\u534a\u780d\u5f00\uff0c\u87f9\u94b3\u7528\u5200\u80cc\u8f7b\u8f7b\u62cd\u88c2\uff0c\u5207\u53e3\u548c\u87f9\u94b3\u8638\u4e00\u4e0b\u751f\u7c89\uff0c\u4e0d\u8981\u592a\u591a\u3002\u6492 5g \u751f\u7c89\u5230\u87f9\u76d6\u4e2d\uff0c\u76d6\u4f4f\u87f9\u9ec4\uff0c\u5907\u7528 \u6d0b\u8471\u5207\u6210\u6d0b\u8471\u788e\uff0c\u5907\u7528 \u5927\u849c\u5207\u788e\uff0c\u5907\u7528 \u70e7\u4e00\u58f6\u5f00\u6c34\uff0c\u5907\u7528 \u8d77\u9505\u70e7\u6cb9\uff0c\u5012\u5165\u7ea6 20ml \u98df\u7528\u6cb9\uff0c\u7b49\u5f85 10 \u79d2\u8ba9\u6cb9\u6e29\u5347\u9ad8 \u5c06\u8783\u87f9\u5207\u53e3\u671d\u4e0b\uff0c\u8f7b\u8f7b\u653e\u5165\u9505\u4e2d\uff0c\u714e 20 \u79d2\u5de6\u53f3\uff0c\u8fd9\u4e00\u6b65\u4e3b\u8981\u662f\u5c01\u4f4f\u87f9\u9ec4\uff0c\u87f9\u8089\u3002\u7136\u540e\u7ffb\u9762\uff0c\u6bcf\u9762\u714e 10 \u79d2\u5de6\u53f3\u3002\u714e\u5b8c\u5c06\u8783\u87f9\u53d6\u51fa\u5907\u7528 \u5c06\u8783\u87f9\u76d6\u653e\u5165\u9505\u4e2d\uff0c\u4f7f\u7528\u52fa\u5b50\u8200\u8d77\u9505\u4e2d\u70ed\u6cb9\u6cfc\u5230\u87f9\u76d6\u4e2d\uff0c\u714e\u5c01\u4f4f\u87f9\u76d6\u4e2d\u7684\u87f9\u9ec4\uff0c\u714e 20 \u79d2\u540e\u53d6\u51fa\u5907\u7528 \u4e0d\u7528\u5237\u9505\uff0c\u518d\u5012\u5165 10ml \u98df\u7528\u6cb9\uff0c\u5927\u706b\u8ba9\u6cb9\u6e29\u5347\u9ad8\u81f3\u8f7b\u5fae\u5192\u70df\uff0c\u5c06\u5927\u849c\u672b\uff0c\u6d0b\u8471\u788e\u5012\u5165\uff0c\u7092 10 \u79d2\u949f \u5c06\u5496\u55b1\u5757\u653e\u5165\u9505\u4e2d\u7092\u5316\uff0810 \u79d2\u5de6\u53f3\uff09\uff0c\u653e\u5165\u714e\u597d\u7684\u8783\u87f9\uff0c\u7ffb\u7092\u5747\u5300 \u5012\u5165\u5f00\u6c34 300ml\uff0c\u7116\u716e 3min\u3002 \u7116\u716e\u5b8c\u540e\uff0c\u5012\u5165\u6930\u6d46\u548c\u86cb\u6e05\uff0c\u5173\u706b\uff0c\u5173\u706b\u540e\u4e0d\u65ad\u7ffb\u7092\uff0c\u4e00\u76f4\u5230\u9171\u6c41\u53d8\u6d53\u7a20\u3002 \u51fa\u9505 \u9644\u52a0\u5185\u5bb9 \u505a\u6cd5\u53c2\u8003\uff1a \u5341\u51e0\u5e74\u6fb3\u95e8\u53a8\u623f\u4f6c\u6559\u4f60\u6302\u6c41\u7684\u5496\u55b1\u87f9\u600e\u4e48\u505a \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u5496\u55b1\u7092\u87f9"},{"location":"dishes/aquatic/%E5%92%96%E5%96%B1%E7%82%92%E8%9F%B9/#_1","text":"\u7b2c\u4e00\u6b21\u5403\u5496\u55b1\u7092\u87f9\u662f\u5728\u6cf0\u56fd\u7684\u5efa\u5174\u9152\u5bb6\u4e2d\u9910\u5385\uff0c\u7206\u8089\u7684\u8783\u87f9\u6302\u6ee1\u6709\u87f9\u9ec4\u5473\u9053\u7684\u5496\u55b1\uff0c\u5473\u9053\u771f\u7684\u7edd\uff0c\u559c\u6b22\u5403\u6d77\u9c9c\u7684\u7a0b\u5e8f\u5458\u7edd\u5bf9\u4e0d\u80fd\u9519\u8fc7\u3002\u64cd\u4f5c\u7b80\u5355\uff0c\u5bf9\u6cbf\u6d77\u7684\u7a0b\u5e8f\u5458\u975e\u5e38\u53cb\u597d\u3002","title":"\u5496\u55b1\u7092\u87f9\u7684\u505a\u6cd5"},{"location":"dishes/aquatic/%E5%92%96%E5%96%B1%E7%82%92%E8%9F%B9/#_2","text":"\u9752\u87f9\uff08\u522b\u79f0\uff1a\u8089\u87f9\uff09 \u5496\u55b1\u5757\uff08\u63a8\u4ecb\u4e50\u60e0\u87f9\u9ec4\u5496\u55b1\uff09 \u6d0b\u8471 \u6930\u6d46 \u9e21\u86cb \u751f\u7c89\uff08\u522b\u79f0\uff1a\u6dc0\u7c89\uff09 \u5927\u849c","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/aquatic/%E5%92%96%E5%96%B1%E7%82%92%E8%9F%B9/#_3","text":"\u6bcf\u4efd\uff1a \u8089\u87f9 1 \u53ea\uff08300g \u5de6\u53f3\uff09 * \u4eba\u6570 \u5496\u55b1\u5757 15g\uff08\u4e00\u5c0f\u5757\uff09*\u4eba\u6570 \u6930\u6d46 100ml*\u4eba\u6570 \u9e21\u86cb 1 \u4e2a *\u4eba\u6570 \u6d0b\u8471 200g *\u4eba\u6570 \u5927\u849c 5 \u74e3 *\u4eba\u6570","title":"\u8ba1\u7b97"},{"location":"dishes/aquatic/%E5%92%96%E5%96%B1%E7%82%92%E8%9F%B9/#_4","text":"\u8089\u87f9\u6380\u76d6\u540e\u5bf9\u534a\u780d\u5f00\uff0c\u87f9\u94b3\u7528\u5200\u80cc\u8f7b\u8f7b\u62cd\u88c2\uff0c\u5207\u53e3\u548c\u87f9\u94b3\u8638\u4e00\u4e0b\u751f\u7c89\uff0c\u4e0d\u8981\u592a\u591a\u3002\u6492 5g \u751f\u7c89\u5230\u87f9\u76d6\u4e2d\uff0c\u76d6\u4f4f\u87f9\u9ec4\uff0c\u5907\u7528 \u6d0b\u8471\u5207\u6210\u6d0b\u8471\u788e\uff0c\u5907\u7528 \u5927\u849c\u5207\u788e\uff0c\u5907\u7528 \u70e7\u4e00\u58f6\u5f00\u6c34\uff0c\u5907\u7528 \u8d77\u9505\u70e7\u6cb9\uff0c\u5012\u5165\u7ea6 20ml \u98df\u7528\u6cb9\uff0c\u7b49\u5f85 10 \u79d2\u8ba9\u6cb9\u6e29\u5347\u9ad8 \u5c06\u8783\u87f9\u5207\u53e3\u671d\u4e0b\uff0c\u8f7b\u8f7b\u653e\u5165\u9505\u4e2d\uff0c\u714e 20 \u79d2\u5de6\u53f3\uff0c\u8fd9\u4e00\u6b65\u4e3b\u8981\u662f\u5c01\u4f4f\u87f9\u9ec4\uff0c\u87f9\u8089\u3002\u7136\u540e\u7ffb\u9762\uff0c\u6bcf\u9762\u714e 10 \u79d2\u5de6\u53f3\u3002\u714e\u5b8c\u5c06\u8783\u87f9\u53d6\u51fa\u5907\u7528 \u5c06\u8783\u87f9\u76d6\u653e\u5165\u9505\u4e2d\uff0c\u4f7f\u7528\u52fa\u5b50\u8200\u8d77\u9505\u4e2d\u70ed\u6cb9\u6cfc\u5230\u87f9\u76d6\u4e2d\uff0c\u714e\u5c01\u4f4f\u87f9\u76d6\u4e2d\u7684\u87f9\u9ec4\uff0c\u714e 20 \u79d2\u540e\u53d6\u51fa\u5907\u7528 \u4e0d\u7528\u5237\u9505\uff0c\u518d\u5012\u5165 10ml \u98df\u7528\u6cb9\uff0c\u5927\u706b\u8ba9\u6cb9\u6e29\u5347\u9ad8\u81f3\u8f7b\u5fae\u5192\u70df\uff0c\u5c06\u5927\u849c\u672b\uff0c\u6d0b\u8471\u788e\u5012\u5165\uff0c\u7092 10 \u79d2\u949f \u5c06\u5496\u55b1\u5757\u653e\u5165\u9505\u4e2d\u7092\u5316\uff0810 \u79d2\u5de6\u53f3\uff09\uff0c\u653e\u5165\u714e\u597d\u7684\u8783\u87f9\uff0c\u7ffb\u7092\u5747\u5300 \u5012\u5165\u5f00\u6c34 300ml\uff0c\u7116\u716e 3min\u3002 \u7116\u716e\u5b8c\u540e\uff0c\u5012\u5165\u6930\u6d46\u548c\u86cb\u6e05\uff0c\u5173\u706b\uff0c\u5173\u706b\u540e\u4e0d\u65ad\u7ffb\u7092\uff0c\u4e00\u76f4\u5230\u9171\u6c41\u53d8\u6d53\u7a20\u3002 \u51fa\u9505","title":"\u64cd\u4f5c"},{"location":"dishes/aquatic/%E5%92%96%E5%96%B1%E7%82%92%E8%9F%B9/#_5","text":"\u505a\u6cd5\u53c2\u8003\uff1a \u5341\u51e0\u5e74\u6fb3\u95e8\u53a8\u623f\u4f6c\u6559\u4f60\u6302\u6c41\u7684\u5496\u55b1\u87f9\u600e\u4e48\u505a \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/aquatic/%E5%BE%AE%E6%B3%A2%E8%91%B1%E5%A7%9C%E9%BB%91%E9%B3%95%E9%B1%BC/","text":"\u5fae\u6ce2\u8471\u59dc\u9ed1\u9cd5\u9c7c\u7684\u505a\u6cd5 \u8fd9\u9053\u83dc\u6539\u7f16\u81ea\u897f\u96c5\u56fe Veil \u9910\u5385\u4e3b\u53a8 Johnny Zhu \u7684\u6bcd\u4eb2 Margaret Lu \u7684\u83dc\u8c31\u3002\u5362\u5973\u58eb\u539f\u83dc\u8c31\u662f\u4f7f\u7528\u7f57\u975e\u9c7c\u6765\u505a\u8fd9\u9053\u83dc\uff0cJohnny \u6539\u4e3a\u9cd5\u9c7c\uff0c\u4f46\u4e5f\u53ef\u4ee5\u7528\u5927\u6bd4\u76ee\u9c7c\u9c7c\u6392\uff0c\u6216\u8005\u6d77\u9c88\u9c7c\u3001\u9cdf\u9c7c\u7b49\u3002\u6bcf\u79cd\u9c7c\u7684\u5bc6\u5ea6\u6709\u5dee\u522b\uff0c\u70f9\u996a\u65f6\u95f4\u8981\u505a\u5fae\u8c03\u3002 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u539f\u6599\uff1a \u9ed1\u9cd5\u9c7c\uff0c\u5e26\u76ae \u8c03\u5473\u6599\uff1a \u9752\u8471 \u59dc \u6599\u9152 \u9171\u6cb9 \u829d\u9ebb\u6cb9 \u82b1\u751f\u6cb9 \u5de5\u5177\uff1a \u5bc6\u5c01\u888b \u8ba1\u7b97 \u6bcf 2 \u4efd\uff1a \u9ed1\u9cd5\u9c7c\uff0c\u5e26\u76ae\uff0c2 \u7247\uff0c450g\uff08\u672c\u83dc\u8c31\u4e3b\u89d2\uff0c\u6240\u6709\u8c03\u6599\u53ef\u6839\u636e\u9cd5\u9c7c\u7684\u5b9e\u9645\u91cd\u91cf\u8fdb\u884c\u6bd4\u4f8b\u8c03\u6574\uff09 \u9752\u8471\uff0c\u8471\u767d\uff0c25g\u3002 \u9752\u8471\uff0c\u8471\u7eff\uff0c10g\u3002 \u59dc\uff0c13g\u3002 \u6599\u9152\uff0c5mL\u3002 \u9171\u6cb9\uff0c25mL\u3002 \u829d\u9ebb\u6cb9\uff0c2mL\u3002 \u82b1\u751f\u6cb9\uff0c50mL\u3002 \u64cd\u4f5c \u9c7c\u7247\u5206\u522b\u653e\u5165\u5bc6\u5c01\u888b\uff0c\u9c7c\u76ae\u5411\u4e0b\u653e\u5728\u76d8\u5b50\u4e2d\u3002 \u53d6\u8471\u767d\u5207\u4e1d 25g\uff0c\u59dc\u53bb\u76ae\u540e\u5207\u4e1d\uff0c10g\uff0c\u6df7\u5408\u5728\u4e00\u8d77\u540e\u5206\u6210\u4e24\u534a\uff0c\u5206\u522b\u653e\u5728\u888b\u5185\u9c7c\u7247\u4e0a\u3002 \u6bcf\u4e2a\u888b\u5b50\u5012\u5165 2.5mL \u6599\u9152\u3002 \u5c01\u597d\u5bc6\u5c01\u888b\uff0c\u653e\u5165\u5fae\u6ce2\u7089\u4e2d\uff0c\u4e2d\u706b\uff08800 \u74e6\uff09\u5fae\u6ce2\u81f3 \u4e0d\u900f\u660e\u4e14\u5bb9\u6613\u6563\u5f00 \u65f6\uff08\u7ea6 3.5-5 \u5206\u949f\uff09\uff0c\u4ece\u888b\u4e2d\u53d6\u51fa\u9c7c\u7247\u3002 \u53bb\u9664\u9752\u8471\u548c\u59dc\u3002 \u53d6\u9171\u6cb9 25mL\uff0c\u829d\u9ebb\u6cb9 2mL\uff0c\u6df7\u5408\u5747\u5300\u540e\u5e73\u5747\u6dcb\u5728\u4e24\u7247\u9c7c\u7247\u4e0a\u3002 \u53d6\u8471\u7eff\u5207\u7ec6\u4e1d 10g\uff0c\u59dc\u53bb\u76ae\u540e\u5207\u4e1d 3g\uff0c\u6df7\u5408\u540e\u5206\u6210\u4e24\u4efd\u6492\u5728\u9c7c\u7247\u4e0a\u3002 \u53d6\u82b1\u751f\u6cb9 50mL\uff0c\u5728\u5c0f\u9505\u4e2d\u52a0\u70ed\u81f3 190\u2103\u3002 \u5c06\u70ed\u6cb9\u6dcb\u5230\u653e\u6cb9\u8471\u7eff\u7684\u9c7c\u7247\u4e0a\uff0c\u7acb\u523b\u4e0a\u684c\u3002 \u9644\u52a0\u5185\u5bb9 \u4f7f\u7528\u6d77\u9c88\u9c7c\u3001\u7f57\u975e\u9c7c\u3001\u5927\u6bd4\u76ee\u9c7c\u6216\u8005\u9f99\u8137\u9c7c \u9c7c\u7c7b \u662f\u5426\u5207\u7247 \u91cd\u91cf \u5fae\u6ce2\u65f6\u95f4 \u6d77\u9c88\u9c7c \u6574\u6761 450g 6.5 \u5206\u949f \u7f57\u975e\u9c7c \u6574\u6761 800g 6 \u5206\u949f \u5927\u6bd4\u76ee\u9c7c \u5207\u7247 170g 2.25 \u5206\u949f \u9f99\u8137\u9c7c \u5207\u7247 170g 1.5 \u5206\u949f \u5176\u4ed6\u53d8\u5316 \u5982\u679c\u60f3\u8ba9\u9999\u6c14\u66f4\u4e3a\u6d53\u90c1\uff0c\u5728\u5fae\u6ce2\u524d\u53ef\u5c06\u8471\u59dc\u4e0e\u6599\u9152\u5747\u5300\u6d82\u62b9\u5728\u9c7c\u7247\u7684\u4e24\u4fa7\uff0c\u518d\u8fdb\u884c\u5fae\u6ce2\u52a0\u70ed\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u5fae\u6ce2\u8471\u59dc\u9ed1\u9cd5\u9c7c"},{"location":"dishes/aquatic/%E5%BE%AE%E6%B3%A2%E8%91%B1%E5%A7%9C%E9%BB%91%E9%B3%95%E9%B1%BC/#_1","text":"\u8fd9\u9053\u83dc\u6539\u7f16\u81ea\u897f\u96c5\u56fe Veil \u9910\u5385\u4e3b\u53a8 Johnny Zhu \u7684\u6bcd\u4eb2 Margaret Lu \u7684\u83dc\u8c31\u3002\u5362\u5973\u58eb\u539f\u83dc\u8c31\u662f\u4f7f\u7528\u7f57\u975e\u9c7c\u6765\u505a\u8fd9\u9053\u83dc\uff0cJohnny \u6539\u4e3a\u9cd5\u9c7c\uff0c\u4f46\u4e5f\u53ef\u4ee5\u7528\u5927\u6bd4\u76ee\u9c7c\u9c7c\u6392\uff0c\u6216\u8005\u6d77\u9c88\u9c7c\u3001\u9cdf\u9c7c\u7b49\u3002\u6bcf\u79cd\u9c7c\u7684\u5bc6\u5ea6\u6709\u5dee\u522b\uff0c\u70f9\u996a\u65f6\u95f4\u8981\u505a\u5fae\u8c03\u3002","title":"\u5fae\u6ce2\u8471\u59dc\u9ed1\u9cd5\u9c7c\u7684\u505a\u6cd5"},{"location":"dishes/aquatic/%E5%BE%AE%E6%B3%A2%E8%91%B1%E5%A7%9C%E9%BB%91%E9%B3%95%E9%B1%BC/#_2","text":"\u539f\u6599\uff1a \u9ed1\u9cd5\u9c7c\uff0c\u5e26\u76ae \u8c03\u5473\u6599\uff1a \u9752\u8471 \u59dc \u6599\u9152 \u9171\u6cb9 \u829d\u9ebb\u6cb9 \u82b1\u751f\u6cb9 \u5de5\u5177\uff1a \u5bc6\u5c01\u888b","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/aquatic/%E5%BE%AE%E6%B3%A2%E8%91%B1%E5%A7%9C%E9%BB%91%E9%B3%95%E9%B1%BC/#_3","text":"\u6bcf 2 \u4efd\uff1a \u9ed1\u9cd5\u9c7c\uff0c\u5e26\u76ae\uff0c2 \u7247\uff0c450g\uff08\u672c\u83dc\u8c31\u4e3b\u89d2\uff0c\u6240\u6709\u8c03\u6599\u53ef\u6839\u636e\u9cd5\u9c7c\u7684\u5b9e\u9645\u91cd\u91cf\u8fdb\u884c\u6bd4\u4f8b\u8c03\u6574\uff09 \u9752\u8471\uff0c\u8471\u767d\uff0c25g\u3002 \u9752\u8471\uff0c\u8471\u7eff\uff0c10g\u3002 \u59dc\uff0c13g\u3002 \u6599\u9152\uff0c5mL\u3002 \u9171\u6cb9\uff0c25mL\u3002 \u829d\u9ebb\u6cb9\uff0c2mL\u3002 \u82b1\u751f\u6cb9\uff0c50mL\u3002","title":"\u8ba1\u7b97"},{"location":"dishes/aquatic/%E5%BE%AE%E6%B3%A2%E8%91%B1%E5%A7%9C%E9%BB%91%E9%B3%95%E9%B1%BC/#_4","text":"\u9c7c\u7247\u5206\u522b\u653e\u5165\u5bc6\u5c01\u888b\uff0c\u9c7c\u76ae\u5411\u4e0b\u653e\u5728\u76d8\u5b50\u4e2d\u3002 \u53d6\u8471\u767d\u5207\u4e1d 25g\uff0c\u59dc\u53bb\u76ae\u540e\u5207\u4e1d\uff0c10g\uff0c\u6df7\u5408\u5728\u4e00\u8d77\u540e\u5206\u6210\u4e24\u534a\uff0c\u5206\u522b\u653e\u5728\u888b\u5185\u9c7c\u7247\u4e0a\u3002 \u6bcf\u4e2a\u888b\u5b50\u5012\u5165 2.5mL \u6599\u9152\u3002 \u5c01\u597d\u5bc6\u5c01\u888b\uff0c\u653e\u5165\u5fae\u6ce2\u7089\u4e2d\uff0c\u4e2d\u706b\uff08800 \u74e6\uff09\u5fae\u6ce2\u81f3 \u4e0d\u900f\u660e\u4e14\u5bb9\u6613\u6563\u5f00 \u65f6\uff08\u7ea6 3.5-5 \u5206\u949f\uff09\uff0c\u4ece\u888b\u4e2d\u53d6\u51fa\u9c7c\u7247\u3002 \u53bb\u9664\u9752\u8471\u548c\u59dc\u3002 \u53d6\u9171\u6cb9 25mL\uff0c\u829d\u9ebb\u6cb9 2mL\uff0c\u6df7\u5408\u5747\u5300\u540e\u5e73\u5747\u6dcb\u5728\u4e24\u7247\u9c7c\u7247\u4e0a\u3002 \u53d6\u8471\u7eff\u5207\u7ec6\u4e1d 10g\uff0c\u59dc\u53bb\u76ae\u540e\u5207\u4e1d 3g\uff0c\u6df7\u5408\u540e\u5206\u6210\u4e24\u4efd\u6492\u5728\u9c7c\u7247\u4e0a\u3002 \u53d6\u82b1\u751f\u6cb9 50mL\uff0c\u5728\u5c0f\u9505\u4e2d\u52a0\u70ed\u81f3 190\u2103\u3002 \u5c06\u70ed\u6cb9\u6dcb\u5230\u653e\u6cb9\u8471\u7eff\u7684\u9c7c\u7247\u4e0a\uff0c\u7acb\u523b\u4e0a\u684c\u3002","title":"\u64cd\u4f5c"},{"location":"dishes/aquatic/%E5%BE%AE%E6%B3%A2%E8%91%B1%E5%A7%9C%E9%BB%91%E9%B3%95%E9%B1%BC/#_5","text":"","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/aquatic/%E5%BE%AE%E6%B3%A2%E8%91%B1%E5%A7%9C%E9%BB%91%E9%B3%95%E9%B1%BC/#_6","text":"\u9c7c\u7c7b \u662f\u5426\u5207\u7247 \u91cd\u91cf \u5fae\u6ce2\u65f6\u95f4 \u6d77\u9c88\u9c7c \u6574\u6761 450g 6.5 \u5206\u949f \u7f57\u975e\u9c7c \u6574\u6761 800g 6 \u5206\u949f \u5927\u6bd4\u76ee\u9c7c \u5207\u7247 170g 2.25 \u5206\u949f \u9f99\u8137\u9c7c \u5207\u7247 170g 1.5 \u5206\u949f","title":"\u4f7f\u7528\u6d77\u9c88\u9c7c\u3001\u7f57\u975e\u9c7c\u3001\u5927\u6bd4\u76ee\u9c7c\u6216\u8005\u9f99\u8137\u9c7c"},{"location":"dishes/aquatic/%E5%BE%AE%E6%B3%A2%E8%91%B1%E5%A7%9C%E9%BB%91%E9%B3%95%E9%B1%BC/#_7","text":"\u5982\u679c\u60f3\u8ba9\u9999\u6c14\u66f4\u4e3a\u6d53\u90c1\uff0c\u5728\u5fae\u6ce2\u524d\u53ef\u5c06\u8471\u59dc\u4e0e\u6599\u9152\u5747\u5300\u6d82\u62b9\u5728\u9c7c\u7247\u7684\u4e24\u4fa7\uff0c\u518d\u8fdb\u884c\u5fae\u6ce2\u52a0\u70ed\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u5176\u4ed6\u53d8\u5316"},{"location":"dishes/aquatic/%E6%B8%85%E8%92%B8%E7%94%9F%E8%9A%9D/","text":"\u6e05\u84b8\u751f\u869d\u7684\u505a\u6cd5 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u751f\u869d \u8471 \u849c \u59dc \u9171\u6cb9 \u5237\u5b50 \u8ba1\u7b97 \u996e\u7528\u6c34 1 \u5347 \u751f\u869d 6 \u4e2a \u8471 3 \u9897 \u849c 6 \u74e3 \u59dc 1 \u5c0f\u5757 \u9171\u6cb9 \u6bcf\u4e2a\u751f\u869d 1 ml \u64cd\u4f5c \u5c06\u751f\u869d\u7528\u5237\u5b50\u5237\u5e72\u51c0\uff08\u6ca1\u6709\u5237\u5b50\u7528\u7259\u5237\uff09\u3002 \u84b8\u9505\u4e2d\u653e\u6c34\uff0c\u5c06\u84b8\u5c49\u653e\u4e0a\u4e4b\u540e\uff0c\u5c06 6 \u4e2a\u751f\u869d\u5e73\u94fa\u5728\u84b8\u5c49,\u4f7f\u7528 50%\u529f\u7387\uff0c\u84b8 3 \u5206\u949f\u3002 \u7528\u53f3\u624b\u62ff\u7740\u6e7f\u62b9\u5e03\u6380\u5f00\u70eb\u9505\u76d6\uff0c\u5c06\u6bcf\u4e2a\u751f\u869d\u7684\u5916\u58f3\u6380\u5f00\u4e00\u534a\u53bb\u6389\uff0c\u751f\u869d\u7684\u51f8\u9762\u5411\u4e0b\uff0c\u5e73\u9762\u5411\u4e0a\uff0c\u6bcf\u4e2a\u653e 1 \u6839\u59dc\u4e1d,2 \u52fa\u849c\u672b\u653e\u5230\u751f\u869d\u4e0a\u3002 \u5173\u4e0a\u70eb\u9505\u76d6\uff0c100%\u529f\u7387\u84b8 3.5 \u5206\u949f\u3002 \u505c\u706b\uff0c\u7528\u53f3\u624b\u62ff\u7740\u62b9\u5e03\u6380\u5f00\u70eb\u9505\u76d6\uff0c\u6bcf\u4e2a\u653e 1 \u52fa\u9171\u6cb9\u3002 \u76db\u76d8\u3002 \u9644\u52a0\u5185\u5bb9 \u52fa\u5b50\u4e3a\u65e5\u5e38\u8c03\u6599\u54c1\u9644\u5e26\u7684\u52fa\u5b50 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u6e05\u84b8\u751f\u869d"},{"location":"dishes/aquatic/%E6%B8%85%E8%92%B8%E7%94%9F%E8%9A%9D/#_1","text":"","title":"\u6e05\u84b8\u751f\u869d\u7684\u505a\u6cd5"},{"location":"dishes/aquatic/%E6%B8%85%E8%92%B8%E7%94%9F%E8%9A%9D/#_2","text":"\u751f\u869d \u8471 \u849c \u59dc \u9171\u6cb9 \u5237\u5b50","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/aquatic/%E6%B8%85%E8%92%B8%E7%94%9F%E8%9A%9D/#_3","text":"\u996e\u7528\u6c34 1 \u5347 \u751f\u869d 6 \u4e2a \u8471 3 \u9897 \u849c 6 \u74e3 \u59dc 1 \u5c0f\u5757 \u9171\u6cb9 \u6bcf\u4e2a\u751f\u869d 1 ml","title":"\u8ba1\u7b97"},{"location":"dishes/aquatic/%E6%B8%85%E8%92%B8%E7%94%9F%E8%9A%9D/#_4","text":"\u5c06\u751f\u869d\u7528\u5237\u5b50\u5237\u5e72\u51c0\uff08\u6ca1\u6709\u5237\u5b50\u7528\u7259\u5237\uff09\u3002 \u84b8\u9505\u4e2d\u653e\u6c34\uff0c\u5c06\u84b8\u5c49\u653e\u4e0a\u4e4b\u540e\uff0c\u5c06 6 \u4e2a\u751f\u869d\u5e73\u94fa\u5728\u84b8\u5c49,\u4f7f\u7528 50%\u529f\u7387\uff0c\u84b8 3 \u5206\u949f\u3002 \u7528\u53f3\u624b\u62ff\u7740\u6e7f\u62b9\u5e03\u6380\u5f00\u70eb\u9505\u76d6\uff0c\u5c06\u6bcf\u4e2a\u751f\u869d\u7684\u5916\u58f3\u6380\u5f00\u4e00\u534a\u53bb\u6389\uff0c\u751f\u869d\u7684\u51f8\u9762\u5411\u4e0b\uff0c\u5e73\u9762\u5411\u4e0a\uff0c\u6bcf\u4e2a\u653e 1 \u6839\u59dc\u4e1d,2 \u52fa\u849c\u672b\u653e\u5230\u751f\u869d\u4e0a\u3002 \u5173\u4e0a\u70eb\u9505\u76d6\uff0c100%\u529f\u7387\u84b8 3.5 \u5206\u949f\u3002 \u505c\u706b\uff0c\u7528\u53f3\u624b\u62ff\u7740\u62b9\u5e03\u6380\u5f00\u70eb\u9505\u76d6\uff0c\u6bcf\u4e2a\u653e 1 \u52fa\u9171\u6cb9\u3002 \u76db\u76d8\u3002","title":"\u64cd\u4f5c"},{"location":"dishes/aquatic/%E6%B8%85%E8%92%B8%E7%94%9F%E8%9A%9D/#_5","text":"\u52fa\u5b50\u4e3a\u65e5\u5e38\u8c03\u6599\u54c1\u9644\u5e26\u7684\u52fa\u5b50 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/aquatic/%E7%BA%A2%E7%83%A7%E9%B1%BC%E5%A4%B4/","text":"\u7ea2\u70e7\u9c7c\u5934\u7684\u505a\u6cd5 WARNING - \u5982\u679c\u4f60\u6ca1\u6709\u4f7f\u7528\u8fc7\u83dc\u5200\u5241\u8fc7\u8089\u7c7b\u98df\u7269\uff0c\u90a3\u4e48\u6211\u5e76\u4e0d\u63a8\u8350\u4f60\u4f7f\u7528\u8be5\u83dc\u5355\uff01\uff01\uff01 - \u5728\u64cd\u4f5c\u4e2d\uff0c\u950b\u5229\u7684\u83dc\u5200\u53ef\u80fd\u4f1a\u5212\u4f24\u4f60\u7684\u624b\u6307\uff0c\u8bf7\u4e00\u5b9a\u8981\u5c0f\u5fc3\u3002 \u5fc5\u5907\u539f\u6599\u4e0e\u5de5\u5177 \u6ce8\uff1a\u5982\u679c\u6709\u53ef\u80fd\uff0c\u5c3d\u91cf\u53e6\u51c6\u5907\u4e00\u628a\u83dc\u5200\uff0c\u8d85\u5e02\u6216\u5e02\u573a\u4e0a\u5747\u6709\u5ec9\u4ef7\u4e14\u5200\u7247\u66f4\u539a\u7684\u83dc\u5200\uff0c\u5200\u7247\u539a\u5ea6\u5728 5-7mm \u4e3a\u6700\u4f73\u3002 \u5927\u8471\u3001\u59dc\u3001\u5927\u849c\u3001\u9999\u83dc\u3001\u7f8e\u4eba\u6912 \u6cb9\u3001\u76d0\u3001\u9e21\u7cbe\u3001\u751f\u62bd\u3001\u8001\u62bd\u3001\u9648\u918b\u3001\u9ed1\u80e1\u6912\u7c89\u3001\u6599\u9152 \u516b\u89d2\u3001\u5e72\u8fa3\u6912 \u9c7c\u5934\u4e00\u4e2a \u6ce8\uff1a\u5e02\u573a\u76f4\u63a5\u8d29\u5356\u7684\u9c7c\u5934\u4e00\u822c\u5206\u4e3a\u4e24\u79cd\uff1a\u767d\u9ca2\u3001\u82b1\u9ca2\u3002\u524d\u8005\u4ef7\u683c\u4fbf\u5b9c\uff0c\u540e\u8005\u4ef7\u683c\u7565\u8d35\uff0c\u4f46\u53e3\u611f\u4e5f\u66f4\u4f73\uff01 \u8ba1\u7b97 \u6ce8\u610f\uff0c\u8fd9\u9053\u83dc\u4ec5\u6709\u8db3\u591f 2 \u4eba\u98df\u7528\u7684\u7248\u672c\u3002 \u9c7c\u5934\u4e00\u4e2a \u5927\u8471 200g \u59dc 80g \u849c\u74e3 3-4 \u4e2a \u7f8e\u4eba\u6912 1/4 \u4e2a \u9999\u83dc 4 \u68f5 \u516b\u89d2\u4e24\u4e2a\uff0c\u5e72\u8fa3\u6912\u4e94\u4e2a \u64cd\u4f5c \u539f\u6750\u6599\u51c6\u5907 \u8471\u3001\u59dc\u3001\u849c\u3001\u9999\u83dc\u3001\u7f8e\u4eba\u6912\u5206\u522b\u6e05\u6d17\u5e72\u51c0\u3002 \u5e72\u8fa3\u6912\u4e0e\u516b\u89d2\u7a0d\u5fae\u51b2\u6d17\u5373\u53ef\u3002 \u5927\u8471\u5207\u4e24\u534a\u3002\u540e\u534a\u6bb5\u5927\u8471\uff08\u8471\u767d\u5904\uff09\u5207\u6bb5\uff0c\u6bcf\u6bb5\u957f\u5ea6\u7ea6 4cm\u3002\u524d\u534a\u6bb5\uff08\u8471\u53f6\u5904\uff09\u5148\u5207\u6bb5\uff0c\u518d\u5c06\u6bcf\u6bb5\u5288\u4e3a\u56db\u74e3\u3002 \u59dc\u5207\u7247\uff0c\u6bcf\u7247\u539a\u5ea6\u7ea6 3mm\u3002 \u5927\u849c\u62cd\u788e\u3002 \u62ff\u51fa\u4e24\u68f5\u9999\u83dc\u53bb\u6839\uff0c\u5207\u4e3a 1.5cm \u5de6\u53f3\u9999\u83dc\u788e\u3002 \u5c06\u7f8e\u4eba\u6912\u5207\u4e3a\u539a\u5ea6\u4e3a 3mm \u5de6\u53f3\u7684\u8fa3\u6912\u5708\u3002 \u5e72\u8fa3\u6912\u5207\u56db\u6bb5\u3002 \u814c\u5236\u9c7c\u5934 \u6ce8\uff1a\u4e0b\u6587\u6240\u8ff0\u7684\u9c7c\u8eab\u662f\u8d2d\u4e70\u9c7c\u5934\u65f6\u6240\u9644\u5e26\u7684\u9c7c\u8089\u3002 \u5c06\u9c7c\u5934\u53bb\u9cde\uff0c\u6e05\u6d17\u9c7c\u5934\u5904\u672a\u88ab\u6e05\u7406\u5e72\u51c0\u7684\u5185\u810f\u3002 \u5241\u53bb\u9c7c\u9ccd\u3001\u6e05\u7406\u9c7c\u9cc3\u3002 \u5c06\u9c7c\u5934\u4e0b\u5df4\u4e0e\u9c7c\u8eab\u8fde\u63a5\u7684\u5730\u65b9\u5241\u5f00\uff0c\u9c7c\u8eab\u5241\u5757\uff0c\u9c7c\u5934\u5241\u6210\u56db/\u516d\u74e3\u3002 \u6ce8\uff1a\u9c7c\u7684\u5904\u7406\u5f88\u96be\u7528\u6587\u5b57\u5b8c\u5168\u8868\u8ff0\uff0c\u5982\u679c\u4f60\u6709\u4efb\u4f55\u7591\u95ee\u7684\u5730\u65b9\uff0c\u53ef\u4ee5\u641c\u7d22\u9c7c\u5934\u5904\u7406\u76f8\u5173\u89c6\u9891\u3002 \u5c06\u5241\u597d\u7684\u9c7c\u5934\u8fdb\u884c\u6e05\u6d17\uff0c\u6700\u597d\u6d17\u6389\u9c7c\u5757\u4e0a\u6ede\u7559\u7684\u8840\u6c34\u3002 \u5c06\u6e05\u6d17\u597d\u7684\u9c7c\u5757\u653e\u5165\u76c6\u4e2d\uff0c\u52a0\u5165 5g \u76d0\u300110g \u751f\u62bd\u300110g \u6599\u9152\u3002\u653e\u5165\u8471\uff08\u524d\u534a\u6bb5\u5207\u788e\u7684\u90a3\u4e2a\uff09\u30011/3 \u59dc\u7247\u3002\u5c06\u5176\u62cc\u5300\uff0c\u9759\u7f6e 1-2 \u5c0f\u65f6\uff08\u8fd9\u53d6\u51b3\u4e8e\u4f60\u7684\u9965\u997f\u7a0b\u5ea6...\uff09\u3002 \u6700\u7ec8\u6b65\u9aa4 \u52a0\u5165 30ml \u6cb9\uff0c\u7b49\u5f85\u9505\u70ed... \u6cb9\u70ed\uff0c\u5c06\u9505\u5173\u81f3\u5c0f\u706b\uff0c\u5982\u679c\u4f60\u4e0d\u660e\u767d\u4e3a\u4f55\u8981\u8fd9\u6837\u505a\uff0c\u8bf7\u67e5\u770b \u5b66\u4e60\u7092\u4e0e\u714e \u4e2d\u7684\u7ffb\u7092\u8f85\u6599\u3002 \u653e\u5165\u59dc\u7247\uff0c\u6162\u6162\u7ffb\u7092\uff0c\u4ee5\u59dc\u7247\u4e2d\u7684\u5927\u90e8\u5206\u6c41\u6c34\u88ab\u7092\u51fa\uff0c\u4ee5\u91d1\u9ec4\u8272\u4e3a\u51c6\u3002 \u653e\u5165\u8471\u6bb5\uff0c\u7ffb\u7092\u81f3\u8471\u6bb5\u7565\u663e\u53d1\u767d\u3002 \u653e\u5165\u849c\u788e\u3001\u516b\u89d2\u3001\u5e72\u8fa3\u6912\uff0c\u7ffb\u7092 5 \u79d2\u3002 \u5c06\u814c\u5236\u597d\u7684\u9c7c\u5934\u5012\u5165\u9505\u4e2d\uff0c\u7ffb\u7092 2-3 \u5206\u949f\u3002 \u5012\u5165 500ml \u6e05\u6c34\uff0c\u52a0\u5165 2g \u76d0\u30013g \u9e21\u7cbe\u30015g \u751f\u62bd\u30013g \u8001\u62bd\u30015g \u6599\u9152\u30012g \u9ed1\u80e1\u6912\u7c89\u30013g \u9648\u918b\u3002 \u5c06\u4e24\u68f5\u9999\u83dc\u653e\u5165\u9505\u4e2d\uff0c\u76d6\u4e0a\u9505\u76d6\u3002 \u8c03\u81f3\u5927\u706b\uff0c\u5c06\u6c34\u70e7\u5f00\u3002 \u8c03\u81f3\u4e2d\u706b\uff0c\u6162\u7116\u5165\u5473\u3002 \u5f53\u6c64\u6c41\u51cf\u5c11\u4e00\u534a\u5de6\u53f3\u65f6\uff0c\u6253\u5f00\u9505\u76d6\u3002 \u8c03\u81f3\u5927\u706b\u6536\u6c41\uff0c\u6c64\u6c41\u5269\u4f59 1/3 \u65f6\uff0c\u5173\u706b\u76db\u81f3\u5c0f\u76c6\u4e2d\u3002 \u6ce8\uff1a\u5c06\u9505\u4e2d\u7684\u6c64\u6c41\u5747\u5300\u6dcb\u5230\u9c7c\u5934\u4e0a\uff0c\u76db\u76d8\u65f6\u53ef\u4ee5\u5c06\u9505\u4e2d\u716e\u7684\u9999\u83dc\u653e\u5165\u5c0f\u76c6\u5e95\u90e8\uff0c\u8fd9\u6837\u80fd\u8ba9\u4f60\u7684\u6210\u54c1\u83dc\u597d\u770b\u53c8\u597d\u5403\u3002 \u5c06\u9999\u83dc\u653e\u81f3\u5df2\u7ecf\u76db\u51fa\u7684\u9c7c\u5934\u4e0a\uff0c\u628a\u5207\u597d\u7684\u7f8e\u4eba\u6912\u5708\u653e\u5728\u9999\u83dc\u4e4b\u4e0a\u3002 \u606d\u559c\u4f60\u8272\u9999\u5473\u4ff1\u5168\u7684\u7ea2\u70e7\u9c7c\u5934\u51fa\u7089\uff01 \u9644\u52a0\u5185\u5bb9 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u7ea2\u70e7\u9c7c\u5934"},{"location":"dishes/aquatic/%E7%BA%A2%E7%83%A7%E9%B1%BC%E5%A4%B4/#_1","text":"WARNING - \u5982\u679c\u4f60\u6ca1\u6709\u4f7f\u7528\u8fc7\u83dc\u5200\u5241\u8fc7\u8089\u7c7b\u98df\u7269\uff0c\u90a3\u4e48\u6211\u5e76\u4e0d\u63a8\u8350\u4f60\u4f7f\u7528\u8be5\u83dc\u5355\uff01\uff01\uff01 - \u5728\u64cd\u4f5c\u4e2d\uff0c\u950b\u5229\u7684\u83dc\u5200\u53ef\u80fd\u4f1a\u5212\u4f24\u4f60\u7684\u624b\u6307\uff0c\u8bf7\u4e00\u5b9a\u8981\u5c0f\u5fc3\u3002","title":"\u7ea2\u70e7\u9c7c\u5934\u7684\u505a\u6cd5"},{"location":"dishes/aquatic/%E7%BA%A2%E7%83%A7%E9%B1%BC%E5%A4%B4/#_2","text":"\u6ce8\uff1a\u5982\u679c\u6709\u53ef\u80fd\uff0c\u5c3d\u91cf\u53e6\u51c6\u5907\u4e00\u628a\u83dc\u5200\uff0c\u8d85\u5e02\u6216\u5e02\u573a\u4e0a\u5747\u6709\u5ec9\u4ef7\u4e14\u5200\u7247\u66f4\u539a\u7684\u83dc\u5200\uff0c\u5200\u7247\u539a\u5ea6\u5728 5-7mm \u4e3a\u6700\u4f73\u3002 \u5927\u8471\u3001\u59dc\u3001\u5927\u849c\u3001\u9999\u83dc\u3001\u7f8e\u4eba\u6912 \u6cb9\u3001\u76d0\u3001\u9e21\u7cbe\u3001\u751f\u62bd\u3001\u8001\u62bd\u3001\u9648\u918b\u3001\u9ed1\u80e1\u6912\u7c89\u3001\u6599\u9152 \u516b\u89d2\u3001\u5e72\u8fa3\u6912 \u9c7c\u5934\u4e00\u4e2a \u6ce8\uff1a\u5e02\u573a\u76f4\u63a5\u8d29\u5356\u7684\u9c7c\u5934\u4e00\u822c\u5206\u4e3a\u4e24\u79cd\uff1a\u767d\u9ca2\u3001\u82b1\u9ca2\u3002\u524d\u8005\u4ef7\u683c\u4fbf\u5b9c\uff0c\u540e\u8005\u4ef7\u683c\u7565\u8d35\uff0c\u4f46\u53e3\u611f\u4e5f\u66f4\u4f73\uff01","title":"\u5fc5\u5907\u539f\u6599\u4e0e\u5de5\u5177"},{"location":"dishes/aquatic/%E7%BA%A2%E7%83%A7%E9%B1%BC%E5%A4%B4/#_3","text":"\u6ce8\u610f\uff0c\u8fd9\u9053\u83dc\u4ec5\u6709\u8db3\u591f 2 \u4eba\u98df\u7528\u7684\u7248\u672c\u3002 \u9c7c\u5934\u4e00\u4e2a \u5927\u8471 200g \u59dc 80g \u849c\u74e3 3-4 \u4e2a \u7f8e\u4eba\u6912 1/4 \u4e2a \u9999\u83dc 4 \u68f5 \u516b\u89d2\u4e24\u4e2a\uff0c\u5e72\u8fa3\u6912\u4e94\u4e2a","title":"\u8ba1\u7b97"},{"location":"dishes/aquatic/%E7%BA%A2%E7%83%A7%E9%B1%BC%E5%A4%B4/#_4","text":"","title":"\u64cd\u4f5c"},{"location":"dishes/aquatic/%E7%BA%A2%E7%83%A7%E9%B1%BC%E5%A4%B4/#_5","text":"\u8471\u3001\u59dc\u3001\u849c\u3001\u9999\u83dc\u3001\u7f8e\u4eba\u6912\u5206\u522b\u6e05\u6d17\u5e72\u51c0\u3002 \u5e72\u8fa3\u6912\u4e0e\u516b\u89d2\u7a0d\u5fae\u51b2\u6d17\u5373\u53ef\u3002 \u5927\u8471\u5207\u4e24\u534a\u3002\u540e\u534a\u6bb5\u5927\u8471\uff08\u8471\u767d\u5904\uff09\u5207\u6bb5\uff0c\u6bcf\u6bb5\u957f\u5ea6\u7ea6 4cm\u3002\u524d\u534a\u6bb5\uff08\u8471\u53f6\u5904\uff09\u5148\u5207\u6bb5\uff0c\u518d\u5c06\u6bcf\u6bb5\u5288\u4e3a\u56db\u74e3\u3002 \u59dc\u5207\u7247\uff0c\u6bcf\u7247\u539a\u5ea6\u7ea6 3mm\u3002 \u5927\u849c\u62cd\u788e\u3002 \u62ff\u51fa\u4e24\u68f5\u9999\u83dc\u53bb\u6839\uff0c\u5207\u4e3a 1.5cm \u5de6\u53f3\u9999\u83dc\u788e\u3002 \u5c06\u7f8e\u4eba\u6912\u5207\u4e3a\u539a\u5ea6\u4e3a 3mm \u5de6\u53f3\u7684\u8fa3\u6912\u5708\u3002 \u5e72\u8fa3\u6912\u5207\u56db\u6bb5\u3002","title":"\u539f\u6750\u6599\u51c6\u5907"},{"location":"dishes/aquatic/%E7%BA%A2%E7%83%A7%E9%B1%BC%E5%A4%B4/#_6","text":"\u6ce8\uff1a\u4e0b\u6587\u6240\u8ff0\u7684\u9c7c\u8eab\u662f\u8d2d\u4e70\u9c7c\u5934\u65f6\u6240\u9644\u5e26\u7684\u9c7c\u8089\u3002 \u5c06\u9c7c\u5934\u53bb\u9cde\uff0c\u6e05\u6d17\u9c7c\u5934\u5904\u672a\u88ab\u6e05\u7406\u5e72\u51c0\u7684\u5185\u810f\u3002 \u5241\u53bb\u9c7c\u9ccd\u3001\u6e05\u7406\u9c7c\u9cc3\u3002 \u5c06\u9c7c\u5934\u4e0b\u5df4\u4e0e\u9c7c\u8eab\u8fde\u63a5\u7684\u5730\u65b9\u5241\u5f00\uff0c\u9c7c\u8eab\u5241\u5757\uff0c\u9c7c\u5934\u5241\u6210\u56db/\u516d\u74e3\u3002 \u6ce8\uff1a\u9c7c\u7684\u5904\u7406\u5f88\u96be\u7528\u6587\u5b57\u5b8c\u5168\u8868\u8ff0\uff0c\u5982\u679c\u4f60\u6709\u4efb\u4f55\u7591\u95ee\u7684\u5730\u65b9\uff0c\u53ef\u4ee5\u641c\u7d22\u9c7c\u5934\u5904\u7406\u76f8\u5173\u89c6\u9891\u3002 \u5c06\u5241\u597d\u7684\u9c7c\u5934\u8fdb\u884c\u6e05\u6d17\uff0c\u6700\u597d\u6d17\u6389\u9c7c\u5757\u4e0a\u6ede\u7559\u7684\u8840\u6c34\u3002 \u5c06\u6e05\u6d17\u597d\u7684\u9c7c\u5757\u653e\u5165\u76c6\u4e2d\uff0c\u52a0\u5165 5g \u76d0\u300110g \u751f\u62bd\u300110g \u6599\u9152\u3002\u653e\u5165\u8471\uff08\u524d\u534a\u6bb5\u5207\u788e\u7684\u90a3\u4e2a\uff09\u30011/3 \u59dc\u7247\u3002\u5c06\u5176\u62cc\u5300\uff0c\u9759\u7f6e 1-2 \u5c0f\u65f6\uff08\u8fd9\u53d6\u51b3\u4e8e\u4f60\u7684\u9965\u997f\u7a0b\u5ea6...\uff09\u3002","title":"\u814c\u5236\u9c7c\u5934"},{"location":"dishes/aquatic/%E7%BA%A2%E7%83%A7%E9%B1%BC%E5%A4%B4/#_7","text":"\u52a0\u5165 30ml \u6cb9\uff0c\u7b49\u5f85\u9505\u70ed... \u6cb9\u70ed\uff0c\u5c06\u9505\u5173\u81f3\u5c0f\u706b\uff0c\u5982\u679c\u4f60\u4e0d\u660e\u767d\u4e3a\u4f55\u8981\u8fd9\u6837\u505a\uff0c\u8bf7\u67e5\u770b \u5b66\u4e60\u7092\u4e0e\u714e \u4e2d\u7684\u7ffb\u7092\u8f85\u6599\u3002 \u653e\u5165\u59dc\u7247\uff0c\u6162\u6162\u7ffb\u7092\uff0c\u4ee5\u59dc\u7247\u4e2d\u7684\u5927\u90e8\u5206\u6c41\u6c34\u88ab\u7092\u51fa\uff0c\u4ee5\u91d1\u9ec4\u8272\u4e3a\u51c6\u3002 \u653e\u5165\u8471\u6bb5\uff0c\u7ffb\u7092\u81f3\u8471\u6bb5\u7565\u663e\u53d1\u767d\u3002 \u653e\u5165\u849c\u788e\u3001\u516b\u89d2\u3001\u5e72\u8fa3\u6912\uff0c\u7ffb\u7092 5 \u79d2\u3002 \u5c06\u814c\u5236\u597d\u7684\u9c7c\u5934\u5012\u5165\u9505\u4e2d\uff0c\u7ffb\u7092 2-3 \u5206\u949f\u3002 \u5012\u5165 500ml \u6e05\u6c34\uff0c\u52a0\u5165 2g \u76d0\u30013g \u9e21\u7cbe\u30015g \u751f\u62bd\u30013g \u8001\u62bd\u30015g \u6599\u9152\u30012g \u9ed1\u80e1\u6912\u7c89\u30013g \u9648\u918b\u3002 \u5c06\u4e24\u68f5\u9999\u83dc\u653e\u5165\u9505\u4e2d\uff0c\u76d6\u4e0a\u9505\u76d6\u3002 \u8c03\u81f3\u5927\u706b\uff0c\u5c06\u6c34\u70e7\u5f00\u3002 \u8c03\u81f3\u4e2d\u706b\uff0c\u6162\u7116\u5165\u5473\u3002 \u5f53\u6c64\u6c41\u51cf\u5c11\u4e00\u534a\u5de6\u53f3\u65f6\uff0c\u6253\u5f00\u9505\u76d6\u3002 \u8c03\u81f3\u5927\u706b\u6536\u6c41\uff0c\u6c64\u6c41\u5269\u4f59 1/3 \u65f6\uff0c\u5173\u706b\u76db\u81f3\u5c0f\u76c6\u4e2d\u3002 \u6ce8\uff1a\u5c06\u9505\u4e2d\u7684\u6c64\u6c41\u5747\u5300\u6dcb\u5230\u9c7c\u5934\u4e0a\uff0c\u76db\u76d8\u65f6\u53ef\u4ee5\u5c06\u9505\u4e2d\u716e\u7684\u9999\u83dc\u653e\u5165\u5c0f\u76c6\u5e95\u90e8\uff0c\u8fd9\u6837\u80fd\u8ba9\u4f60\u7684\u6210\u54c1\u83dc\u597d\u770b\u53c8\u597d\u5403\u3002 \u5c06\u9999\u83dc\u653e\u81f3\u5df2\u7ecf\u76db\u51fa\u7684\u9c7c\u5934\u4e0a\uff0c\u628a\u5207\u597d\u7684\u7f8e\u4eba\u6912\u5708\u653e\u5728\u9999\u83dc\u4e4b\u4e0a\u3002 \u606d\u559c\u4f60\u8272\u9999\u5473\u4ff1\u5168\u7684\u7ea2\u70e7\u9c7c\u5934\u51fa\u7089\uff01","title":"\u6700\u7ec8\u6b65\u9aa4"},{"location":"dishes/aquatic/%E7%BA%A2%E7%83%A7%E9%B1%BC%E5%A4%B4/#_8","text":"\u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/aquatic/%E7%BA%A2%E7%83%A7%E9%B2%A4%E9%B1%BC/","text":"\u7ea2\u70e7\u9ca4\u9c7c\u7684\u505a\u6cd5 \u5fc5\u5907\u539f\u6599\u4e0e\u5de5\u5177 \u5927\u8471\u3001\u59dc\u3001\u5927\u849c\u3001\u5e72\u8fa3\u6912 \u6cb9\u3001\u76d0\u3001\u751f\u62bd\u3001\u8001\u62bd\u3001\u9648\u918b\u3001\u869d\u6cb9\u3001\u6599\u9152\u3001\u767d\u7cd6 \u9ca4\u9c7c\u3001\u4e94\u82b1\u8089 \u8ba1\u7b97 2 \u4eba\u98df\u7528\u7684\u7248\u672c\u3002 \u9ca4\u9c7c 2 \u65a4\u5de6\u53f3 \u4e94\u82b1\u8089 100g \u5927\u8471 200g \u59dc 80g \u849c\u74e3 3-4 \u4e2a \u5e72\u8fa3\u6912\u4e24\u4e2a \u767d\u7cd6 50g \u64cd\u4f5c \u6ce8\uff1a\u4e0b\u6587\u6240\u8ff0\u7684\u9c7c\u662f\u8d2d\u4e70\u65f6\u5356\u5bb6\u7b80\u6613\u5904\u7406\u540e\u7684\uff0c\u5df2\u522e\u9c7c\u9cde\u5df2\u53bb\u5185\u810f\u3002 \u8471\u3001\u59dc\u3001\u849c\u3001\u5e72\u8fa3\u6912\u5206\u522b\u6e05\u6d17\u5e72\u51c0\u3002 \u8471\u767d\u5904\u5207\u6bb5\uff0c\u6bcf\u6bb5\u957f\u5ea6\u7ea6 4cm\uff0c\u518d\u5c06\u6bcf\u6bb5\u5288\u4e3a\u56db\u74e3\u3002 \u59dc\u5207\u7247\uff0c\u6bcf\u7247\u539a\u5ea6\u7ea6 3mm\u3002 \u4e00\u4e2a\u5927\u849c\u62cd\u788e\u5207\u672b\uff0c\u5176\u4f59\u849c\u5207\u4e3a\u4e8c\u74e3\u3002 \u5e72\u8fa3\u6912\u5207\u56db\u6bb5\u3002 \u4e94\u82b1\u8089\u5207\u7247\uff0c\u7ea6 4cm*4cm\u3002 \u6e05\u6d17\u9c7c\u3002 \u9c7c\u80cc\u8089\u539a\u5904\u62c9\u51e0\u9053\u659c\u53e3\uff0c\u65b9\u4fbf\u5165\u5473 \u9505\u91cc\u591a\u5012\u70b9\u6cb9\uff0c\u70e7\u81f3 7 \u6210\u70ed\uff08\u521a\u521a\u5f00\u59cb\u5192\u70df\uff09\uff0c\u4e0b\u5165\u9c7c\u70b8 1 \u5206\u949f\u5de6\u53f3\u81f3\u9c7c\u76ae\u7a0d\u7a0d\u53d8\u786c\u635e\u51fa\u5907\u7528\uff08\u6ce8\u610f\u4e0d\u8981\u4e00\u4e0b\u9505\u5c31\u62e8\u5f04\u9c7c\uff0c\u7b49\u70b8\u4e00\u4f1a\u518d\u62e8\u5f04\u3001\u7ffb\u9762\uff09\uff0c\u70b8\u9c7c\u7684\u6cb9\u5012\u51fa\uff0c\u9505\u91cc\u7559\u4e00\u70b9\u5e95\u6cb9 \u5c06\u9505\u91cc\u5e95\u6cb9\u70e7\u70ed\uff0c\u4e0b\u5165\u4e94\u82b1\u8089\uff0c\u7178\u51fa\u9999\u5473\u3002 \u653e\u5165\u5e72\u8fa3\u6912\u3001\u8471\u3001\u59dc\u3001\u849c\u74e3\uff0c\u7ffb\u7092 1 \u5206\u949f\u3002 \u5c06\u70b8\u597d\u7684\u9c7c\u5012\u5165\u9505\u4e2d\u3002 \u6cbf\u9505\u8fb9\u5012\u5165 50ml \u6599\u9152\uff08\u7092\u83dc\u52fa\u534a\u52fa\uff09 50ml \u9648\u918b\uff08\u7092\u83dc\u52fa\u534a\u52fa\uff09 50ml \u5473\u6781\u9c9c\uff08\u7092\u83dc\u52fa\u534a\u52fa\uff09 20ml \u8001\u62bd\u8c03\u8272 5ml \u869d\u6cb9\u63d0\u9c9c 5g \u5319\u76d0 50g \u767d\u7cd6\uff08\u7092\u83dc\u52fa 2/3 \u52fa\uff09 \u6e05\u6c34\u6ca1\u8fc7\u9c7c\u9762\u3002 \u8c03\u81f3\u4e2d\u706b\uff0c\u5c06\u6c34\u70e7\u5f00\u3002 \u8c03\u81f3\u5c0f\u706b\uff0c\u6162\u7116\u5165\u5473\u3002 15min \u5de6\u53f3\uff0c\u6253\u5f00\u9505\u76d6\uff0c\u6311\u51fa\u9505\u91cc\u7684\u8471\u3001\u59dc\u3001\u849c\u3001\u5e72\u8fa3\u6912\u3002 \u8c03\u81f3\u5927\u706b\u6536\u6c41\uff0c\u6c64\u6c41\u5269\u4f59 1/4 \u65f6\uff0c\u6492\u70b9\u849c\u672b\uff0c\u5173\u706b\u76db\u51fa\u3002 \u7ea2\u70e7\u9ca4\u9c7c\u51fa\u9505\uff01 \u9644\u52a0\u5185\u5bb9 \u57fa\u4e8e\u4e0b\u5217\u539f\u56e0\uff0c\u6211\u4eec\u9700\u8981\u5728\u7ea2\u70e7\u9ca4\u9c7c\u4e2d\u6dfb\u52a0\u4e94\u82b1\u8089\uff1a \u4e94\u82b1\u8089\u7178\u7092\u7684\u65f6\u5019\u4f1a\u51fa\u732a\u6cb9\uff0c\u76f8\u6bd4\u8f83\u4e8e\u690d\u7269\u6cb9\uff0c\u52a8\u7269\u6cb9\u8102\u66f4\u9999\u3002 \u7178\u7092\u81f3\u91d1\u9ec4\u7684\u4e94\u82b1\u8089\u7096\u716e\u8fc7\u540e\u5403\u8d77\u6765\u4e5f\u5f88\u9999\u7684\uff0c\u76f8\u5f53\u4e8e\u914d\u83dc\u3002 \u9c7c\u7c7b\u672c\u8eab\u8102\u80aa\u542b\u91cf\u5c11\uff0c\u6240\u4ee5\u9999\u5473\u6b20\u7f3a\uff0c\u7740\u91cd\u7684\u662f\u8089\u8d28\u7684\u53e3\u611f\u3002\u6240\u4ee5\u4e00\u822c\u505a\u9c7c\u7c7b\u83dc\u90fd\u5efa\u8bae\u7528\u732a\u6cb9\uff0c\u60f3\u8981\u4e00\u9505\u5976\u767d\u9999\u9187\u7684\u9c7c\u6c64\u3002\u732a\u6cb9\u662f\u6700\u597d\u7684\u9009\u62e9~ \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u7ea2\u70e7\u9ca4\u9c7c"},{"location":"dishes/aquatic/%E7%BA%A2%E7%83%A7%E9%B2%A4%E9%B1%BC/#_1","text":"","title":"\u7ea2\u70e7\u9ca4\u9c7c\u7684\u505a\u6cd5"},{"location":"dishes/aquatic/%E7%BA%A2%E7%83%A7%E9%B2%A4%E9%B1%BC/#_2","text":"\u5927\u8471\u3001\u59dc\u3001\u5927\u849c\u3001\u5e72\u8fa3\u6912 \u6cb9\u3001\u76d0\u3001\u751f\u62bd\u3001\u8001\u62bd\u3001\u9648\u918b\u3001\u869d\u6cb9\u3001\u6599\u9152\u3001\u767d\u7cd6 \u9ca4\u9c7c\u3001\u4e94\u82b1\u8089","title":"\u5fc5\u5907\u539f\u6599\u4e0e\u5de5\u5177"},{"location":"dishes/aquatic/%E7%BA%A2%E7%83%A7%E9%B2%A4%E9%B1%BC/#_3","text":"2 \u4eba\u98df\u7528\u7684\u7248\u672c\u3002 \u9ca4\u9c7c 2 \u65a4\u5de6\u53f3 \u4e94\u82b1\u8089 100g \u5927\u8471 200g \u59dc 80g \u849c\u74e3 3-4 \u4e2a \u5e72\u8fa3\u6912\u4e24\u4e2a \u767d\u7cd6 50g","title":"\u8ba1\u7b97"},{"location":"dishes/aquatic/%E7%BA%A2%E7%83%A7%E9%B2%A4%E9%B1%BC/#_4","text":"\u6ce8\uff1a\u4e0b\u6587\u6240\u8ff0\u7684\u9c7c\u662f\u8d2d\u4e70\u65f6\u5356\u5bb6\u7b80\u6613\u5904\u7406\u540e\u7684\uff0c\u5df2\u522e\u9c7c\u9cde\u5df2\u53bb\u5185\u810f\u3002 \u8471\u3001\u59dc\u3001\u849c\u3001\u5e72\u8fa3\u6912\u5206\u522b\u6e05\u6d17\u5e72\u51c0\u3002 \u8471\u767d\u5904\u5207\u6bb5\uff0c\u6bcf\u6bb5\u957f\u5ea6\u7ea6 4cm\uff0c\u518d\u5c06\u6bcf\u6bb5\u5288\u4e3a\u56db\u74e3\u3002 \u59dc\u5207\u7247\uff0c\u6bcf\u7247\u539a\u5ea6\u7ea6 3mm\u3002 \u4e00\u4e2a\u5927\u849c\u62cd\u788e\u5207\u672b\uff0c\u5176\u4f59\u849c\u5207\u4e3a\u4e8c\u74e3\u3002 \u5e72\u8fa3\u6912\u5207\u56db\u6bb5\u3002 \u4e94\u82b1\u8089\u5207\u7247\uff0c\u7ea6 4cm*4cm\u3002 \u6e05\u6d17\u9c7c\u3002 \u9c7c\u80cc\u8089\u539a\u5904\u62c9\u51e0\u9053\u659c\u53e3\uff0c\u65b9\u4fbf\u5165\u5473 \u9505\u91cc\u591a\u5012\u70b9\u6cb9\uff0c\u70e7\u81f3 7 \u6210\u70ed\uff08\u521a\u521a\u5f00\u59cb\u5192\u70df\uff09\uff0c\u4e0b\u5165\u9c7c\u70b8 1 \u5206\u949f\u5de6\u53f3\u81f3\u9c7c\u76ae\u7a0d\u7a0d\u53d8\u786c\u635e\u51fa\u5907\u7528\uff08\u6ce8\u610f\u4e0d\u8981\u4e00\u4e0b\u9505\u5c31\u62e8\u5f04\u9c7c\uff0c\u7b49\u70b8\u4e00\u4f1a\u518d\u62e8\u5f04\u3001\u7ffb\u9762\uff09\uff0c\u70b8\u9c7c\u7684\u6cb9\u5012\u51fa\uff0c\u9505\u91cc\u7559\u4e00\u70b9\u5e95\u6cb9 \u5c06\u9505\u91cc\u5e95\u6cb9\u70e7\u70ed\uff0c\u4e0b\u5165\u4e94\u82b1\u8089\uff0c\u7178\u51fa\u9999\u5473\u3002 \u653e\u5165\u5e72\u8fa3\u6912\u3001\u8471\u3001\u59dc\u3001\u849c\u74e3\uff0c\u7ffb\u7092 1 \u5206\u949f\u3002 \u5c06\u70b8\u597d\u7684\u9c7c\u5012\u5165\u9505\u4e2d\u3002 \u6cbf\u9505\u8fb9\u5012\u5165 50ml \u6599\u9152\uff08\u7092\u83dc\u52fa\u534a\u52fa\uff09 50ml \u9648\u918b\uff08\u7092\u83dc\u52fa\u534a\u52fa\uff09 50ml \u5473\u6781\u9c9c\uff08\u7092\u83dc\u52fa\u534a\u52fa\uff09 20ml \u8001\u62bd\u8c03\u8272 5ml \u869d\u6cb9\u63d0\u9c9c 5g \u5319\u76d0 50g \u767d\u7cd6\uff08\u7092\u83dc\u52fa 2/3 \u52fa\uff09 \u6e05\u6c34\u6ca1\u8fc7\u9c7c\u9762\u3002 \u8c03\u81f3\u4e2d\u706b\uff0c\u5c06\u6c34\u70e7\u5f00\u3002 \u8c03\u81f3\u5c0f\u706b\uff0c\u6162\u7116\u5165\u5473\u3002 15min \u5de6\u53f3\uff0c\u6253\u5f00\u9505\u76d6\uff0c\u6311\u51fa\u9505\u91cc\u7684\u8471\u3001\u59dc\u3001\u849c\u3001\u5e72\u8fa3\u6912\u3002 \u8c03\u81f3\u5927\u706b\u6536\u6c41\uff0c\u6c64\u6c41\u5269\u4f59 1/4 \u65f6\uff0c\u6492\u70b9\u849c\u672b\uff0c\u5173\u706b\u76db\u51fa\u3002 \u7ea2\u70e7\u9ca4\u9c7c\u51fa\u9505\uff01","title":"\u64cd\u4f5c"},{"location":"dishes/aquatic/%E7%BA%A2%E7%83%A7%E9%B2%A4%E9%B1%BC/#_5","text":"\u57fa\u4e8e\u4e0b\u5217\u539f\u56e0\uff0c\u6211\u4eec\u9700\u8981\u5728\u7ea2\u70e7\u9ca4\u9c7c\u4e2d\u6dfb\u52a0\u4e94\u82b1\u8089\uff1a \u4e94\u82b1\u8089\u7178\u7092\u7684\u65f6\u5019\u4f1a\u51fa\u732a\u6cb9\uff0c\u76f8\u6bd4\u8f83\u4e8e\u690d\u7269\u6cb9\uff0c\u52a8\u7269\u6cb9\u8102\u66f4\u9999\u3002 \u7178\u7092\u81f3\u91d1\u9ec4\u7684\u4e94\u82b1\u8089\u7096\u716e\u8fc7\u540e\u5403\u8d77\u6765\u4e5f\u5f88\u9999\u7684\uff0c\u76f8\u5f53\u4e8e\u914d\u83dc\u3002 \u9c7c\u7c7b\u672c\u8eab\u8102\u80aa\u542b\u91cf\u5c11\uff0c\u6240\u4ee5\u9999\u5473\u6b20\u7f3a\uff0c\u7740\u91cd\u7684\u662f\u8089\u8d28\u7684\u53e3\u611f\u3002\u6240\u4ee5\u4e00\u822c\u505a\u9c7c\u7c7b\u83dc\u90fd\u5efa\u8bae\u7528\u732a\u6cb9\uff0c\u60f3\u8981\u4e00\u9505\u5976\u767d\u9999\u9187\u7684\u9c7c\u6c64\u3002\u732a\u6cb9\u662f\u6700\u597d\u7684\u9009\u62e9~ \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/aquatic/%E6%B7%B7%E5%90%88%E7%83%A4%E9%B1%BC/%E7%83%A4%E9%B1%BC/","text":"\u70e4\u9c7c\u7684\u505a\u6cd5 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u8349\u9c7c\uff08\u519c\u8d38\u5e02\u573a\u6216\u8005\u8d85\u5e02\u8ba9\u5e97\u5bb6\u6740\u6389\uff0c\u53bb\u9664\u4e0d\u8981\u7684\u5668\u5b98\uff09 \u5927\u8471 \u6599\u9152 \u767d\u80e1\u6912\u7c89 \u98df\u7528\u76d0 \u5927\u849c \u6842\u76ae \u516b\u89d2 \u9999\u53f6 \u9752\u82b1\u6912 \u5e72\u8fa3\u6912\u6bb5 \u706f\u7b3c\u6912 \u706b\u9505\u5e95\u6599\uff08\u968f\u610f\uff09 \u5343\u5f20 \u7eff\u8c46\u82bd \u6d0b\u8471 \u8c46\u74e3\u9171 \u82b9\u83dc\u6bb5 \u719f\u82b1\u751f\u7c73 \u767d\u829d\u9ebb \u9999\u83dc\uff08\u653e\u66f4\u597d\u5403\uff0c\u6839\u636e\u4e2a\u4eba\u53e3\u5473\u53ef\u653e\u53ef\u4e0d\u653e\uff09 \u8ba1\u7b97 \u6bcf\u4efd\uff1a \u8349\u9c7c \u4e09\u65a4\u5de6\u53f3 \u5927\u8471 \u534a\u6839 \u98df\u7528\u6cb9 20ml \u6599\u9152 10-15ml \u98df\u7528\u76d0 5-10g \u767d\u80e1\u6912\u7c89 5g-10g \u6842\u76ae \u4e00\u5c0f\u7247 \u516b\u89d2 \u4e24\u4e2a \u5927\u849c\u7c92 \u516b\u4e2a \u9999\u53f6 \u4e24\u5f20 \u9752\u82b1\u6912 \u4e00\u5c0f\u628a \u5e72\u8fa3\u6912\u6bb5 10 \u4e2a \u706f\u7b3c\u6912 4 \u4e2a \u82b9\u83dc\u6bb5 \u4e24\u6839 \u6d0b\u8471 \u534a\u4e2a \u5343\u5f20 \u4e00\u5f20 \u64cd\u4f5c \u4e09\u65a4\u5de6\u53f3\u7684\u8349\u9c7c\u4ece\u80cc\u90e8\u5207\u5f00\uff0c\u4e24\u9762\u6cbf\u7740\u9c7c\u7684\u80cc\u90e8\u5f80\u4e0b\u5212\u51e0\u5200\uff0c\u4e0d\u8981\u5212\u5230\u9c7c\u809a\u76ae\uff0c\u4e0d\u7136\u4e0d\u6613\u5b9a\u578b\uff0c\u53ef\u4ee5\u7528\u70ed\u6c34\u6d47\u5728\u9c7c\u8eab\u4e0a\u6d17\u53bb\u7c98\u6db2\u6216\u8005\u7528\u5237\u5b50\u5728\u6d41\u52a8\u6c34\u9f99\u5934\u4e0b\u9762\u4e0d\u505c\u7684\u5237\u6d17\uff0c\u76f4\u5230\u6478\u7740\u6ca1\u6709\u9ecf\u7cca\u7cca\u7684\u624b\u611f\u3002 \u628a\u9c7c\u653e\u5230\u5bb9\u5668\u4e2d\uff0c\u52a0\u5165\u6599\u9152\uff0c10g \u767d\u80e1\u6912\u7c89\uff0c5g \u98df\u76d0\u62b9\u5300\u814c\u5236\u4e8c\u5341\u5206\u949f\u5165\u5473\u3002 \u628a\u534a\u6839\u5927\u8471\u5207\u6210\u4e00\u5757\u4e00\u5757\uff0c\u5927\u849c\u7c92\u4e2d\u95f4\u5207\u5f00\uff0c\u548c\u516b\u89d2\u9999\u53f6\u6842\u76ae\u653e\u5728\u4e00\u4e2a\u5bb9\u5668\u4e2d\uff0c\u5e72\u8fa3\u6912\u6bb5\u4e2d\u95f4\u4e00\u5206\u4e3a\u4e8c\u5207\u5f00\u5e76\u548c\u706f\u7b3c\u6912\u88c5\u5728\u4e00\u4e2a\u5bb9\u5668\u4e2d\uff0c\u82b9\u83dc\u5207\u5c0f\u6bb5\uff0c\u8c46\u82bd\u712f\u6c34\uff0c\u5343\u5f20\u712f\u6c34\u5207\u6210\u4e1d\uff0c\u6d0b\u8471\u5207\u6210\u4e1d\u3002 \u5bb6\u91cc\u6709\u70e4\u7bb1\u7684\u53ef\u4ee5\u5728\u70e4\u76d8\u5237\u4e0a\u5e95\u6cb9\uff0c\u9c7c\u76ae\u671d\u4e0b\uff0c\u76f4\u5230\u70e4\u5236\u4e24\u9762\u91d1\u9ec4\uff0c\u7136\u540e\u6492\u4e0a\u5b5c\u7136\u7c89\uff0c\u5982\u679c\u6ca1\u6709\u70e4\u7bb1\uff0c\u53ef\u4ee5\u70ed\u9505\u70ed\u6cb9\uff0c\u9505\u7684\u4e24\u8fb9\u6492\u4e0a\u5c11\u8bb8\u98df\u76d0\uff0c\u4e0b\u5165\u8349\u9c7c\u5f00\u59cb\u714e\uff0c\u521a\u4e0b\u5165\u7684\u65f6\u5019\u4e0d\u8981\u7740\u6025\u7ffb\u52a8\uff0c\u7b49\u4e00\u9762\u5b9a\u578b\u540e\u518d\u7ffb\u9762\uff0c\u714e\u5236\u4e24\u9762\u91d1\u9ec4\uff0c\u6492\u4e0a\u5b5c\u7136\u7c89\uff0c\u51fa\u9505\u88c5\u5728\u76d8\u5b50\u91cc\u51c6\u5907\u3002 \u9505\u4e2d\u6492\u4e0a 20ml \u98df\u7528\u6cb9\uff0c\u7b49\u5230\u6cb9\u70ed\u540e\uff0c\u628a\u5927\u8471\u5927\u849c\u516b\u89d2\u9999\u53f6\u5012\u5165\u7092\u9999\uff0c\u52a0\u4e0a\u4e00\u5305\u706b\u9505\u5e95\u6599\u7684\u4e00\u534a\u548c 15-20g \u8c46\u74e3\u9171\uff0c\u7092\u51fa\u7ea2\u6cb9\u540e\uff0c\u52a0\u5165\u5c11\u8bb8\u767d\u7cd6\uff0c10g \u98df\u76d0\uff0c\u5c11\u8bb8\u751f\u62bd\u8c03\u5473\uff0c\u5012\u5165\u548c\u98df\u6750\u9f50\u5e73\u7684\u6e05\u6c34\u716e\u5f00\uff0c\u4f9d\u6b21\u4e0b\u5165\u82b9\u83dc\u6bb5\uff0c\u8c46\u82bd\uff0c\u5343\u5f20\u4e1d\uff0c\u4e0d\u7528\u716e\u719f\uff0c\u7a0d\u5fae\u70eb\u4e00\u4e0b\u540e\u94fa\u4e0a\u6d0b\u8471\u4e1d\uff0c\u653e\u4e0a\u70e4\u9c7c\uff0c\u52a0\u5165\u5e72\u8fa3\u6912\uff0c\u706f\u7b3c\u6912\uff0c\u9752\u82b1\u6912\uff0c\u53e6\u4e00\u4e2a\u9505\u70e7\u6cb9\uff0c\u6cb9\u70ed\u540e\u6d47\u5728\u521a\u52a0\u5165\u7684\u8fa3\u6912\u4e0a\u9762\u6fc0\u53d1\u51fa\u9999\u5473\uff0c\u6700\u540e\u6492\u4e0a\u719f\u82b1\u751f\u7c73\uff0c\u8471\u82b1\uff0c\u767d\u829d\u9ebb\uff0c\u9999\u83dc\uff0c\u716e\u4e94\u516d\u5206\u949f\uff0c\u7f8e\u5473\u5373\u6210\u3002 \u9644\u52a0\u5185\u5bb9 \u6280\u672f\u603b\u7ed3\uff1a \u8fd9\u9053\u83dc\u7684\u98df\u76d0\uff0c\u80e1\u6912\u7c89\uff0c\u5b5c\u7136\u7c89\uff0c\u98df\u7528\u6cb9\uff0c\u751f\u62bd\uff0c\u767d\u7cd6\u7b49\u7684\u4f7f\u7528\u91cf\uff0c\u6839\u636e\u4e2a\u4eba\u53e3\u5473\u548c\u98df\u6750\u6bd4\u4f8b\u505a\u51b3\u5b9a\uff0c\u5e76\u4e0d\u9700\u8981\u4e25\u683c\u6309\u7167\u6211\u5199\u7684\u5206\u91cf\u6765\u505a\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request\u3002","title":"\u70e4\u9c7c"},{"location":"dishes/aquatic/%E6%B7%B7%E5%90%88%E7%83%A4%E9%B1%BC/%E7%83%A4%E9%B1%BC/#_1","text":"","title":"\u70e4\u9c7c\u7684\u505a\u6cd5"},{"location":"dishes/aquatic/%E6%B7%B7%E5%90%88%E7%83%A4%E9%B1%BC/%E7%83%A4%E9%B1%BC/#_2","text":"\u8349\u9c7c\uff08\u519c\u8d38\u5e02\u573a\u6216\u8005\u8d85\u5e02\u8ba9\u5e97\u5bb6\u6740\u6389\uff0c\u53bb\u9664\u4e0d\u8981\u7684\u5668\u5b98\uff09 \u5927\u8471 \u6599\u9152 \u767d\u80e1\u6912\u7c89 \u98df\u7528\u76d0 \u5927\u849c \u6842\u76ae \u516b\u89d2 \u9999\u53f6 \u9752\u82b1\u6912 \u5e72\u8fa3\u6912\u6bb5 \u706f\u7b3c\u6912 \u706b\u9505\u5e95\u6599\uff08\u968f\u610f\uff09 \u5343\u5f20 \u7eff\u8c46\u82bd \u6d0b\u8471 \u8c46\u74e3\u9171 \u82b9\u83dc\u6bb5 \u719f\u82b1\u751f\u7c73 \u767d\u829d\u9ebb \u9999\u83dc\uff08\u653e\u66f4\u597d\u5403\uff0c\u6839\u636e\u4e2a\u4eba\u53e3\u5473\u53ef\u653e\u53ef\u4e0d\u653e\uff09","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/aquatic/%E6%B7%B7%E5%90%88%E7%83%A4%E9%B1%BC/%E7%83%A4%E9%B1%BC/#_3","text":"\u6bcf\u4efd\uff1a \u8349\u9c7c \u4e09\u65a4\u5de6\u53f3 \u5927\u8471 \u534a\u6839 \u98df\u7528\u6cb9 20ml \u6599\u9152 10-15ml \u98df\u7528\u76d0 5-10g \u767d\u80e1\u6912\u7c89 5g-10g \u6842\u76ae \u4e00\u5c0f\u7247 \u516b\u89d2 \u4e24\u4e2a \u5927\u849c\u7c92 \u516b\u4e2a \u9999\u53f6 \u4e24\u5f20 \u9752\u82b1\u6912 \u4e00\u5c0f\u628a \u5e72\u8fa3\u6912\u6bb5 10 \u4e2a \u706f\u7b3c\u6912 4 \u4e2a \u82b9\u83dc\u6bb5 \u4e24\u6839 \u6d0b\u8471 \u534a\u4e2a \u5343\u5f20 \u4e00\u5f20","title":"\u8ba1\u7b97"},{"location":"dishes/aquatic/%E6%B7%B7%E5%90%88%E7%83%A4%E9%B1%BC/%E7%83%A4%E9%B1%BC/#_4","text":"\u4e09\u65a4\u5de6\u53f3\u7684\u8349\u9c7c\u4ece\u80cc\u90e8\u5207\u5f00\uff0c\u4e24\u9762\u6cbf\u7740\u9c7c\u7684\u80cc\u90e8\u5f80\u4e0b\u5212\u51e0\u5200\uff0c\u4e0d\u8981\u5212\u5230\u9c7c\u809a\u76ae\uff0c\u4e0d\u7136\u4e0d\u6613\u5b9a\u578b\uff0c\u53ef\u4ee5\u7528\u70ed\u6c34\u6d47\u5728\u9c7c\u8eab\u4e0a\u6d17\u53bb\u7c98\u6db2\u6216\u8005\u7528\u5237\u5b50\u5728\u6d41\u52a8\u6c34\u9f99\u5934\u4e0b\u9762\u4e0d\u505c\u7684\u5237\u6d17\uff0c\u76f4\u5230\u6478\u7740\u6ca1\u6709\u9ecf\u7cca\u7cca\u7684\u624b\u611f\u3002 \u628a\u9c7c\u653e\u5230\u5bb9\u5668\u4e2d\uff0c\u52a0\u5165\u6599\u9152\uff0c10g \u767d\u80e1\u6912\u7c89\uff0c5g \u98df\u76d0\u62b9\u5300\u814c\u5236\u4e8c\u5341\u5206\u949f\u5165\u5473\u3002 \u628a\u534a\u6839\u5927\u8471\u5207\u6210\u4e00\u5757\u4e00\u5757\uff0c\u5927\u849c\u7c92\u4e2d\u95f4\u5207\u5f00\uff0c\u548c\u516b\u89d2\u9999\u53f6\u6842\u76ae\u653e\u5728\u4e00\u4e2a\u5bb9\u5668\u4e2d\uff0c\u5e72\u8fa3\u6912\u6bb5\u4e2d\u95f4\u4e00\u5206\u4e3a\u4e8c\u5207\u5f00\u5e76\u548c\u706f\u7b3c\u6912\u88c5\u5728\u4e00\u4e2a\u5bb9\u5668\u4e2d\uff0c\u82b9\u83dc\u5207\u5c0f\u6bb5\uff0c\u8c46\u82bd\u712f\u6c34\uff0c\u5343\u5f20\u712f\u6c34\u5207\u6210\u4e1d\uff0c\u6d0b\u8471\u5207\u6210\u4e1d\u3002 \u5bb6\u91cc\u6709\u70e4\u7bb1\u7684\u53ef\u4ee5\u5728\u70e4\u76d8\u5237\u4e0a\u5e95\u6cb9\uff0c\u9c7c\u76ae\u671d\u4e0b\uff0c\u76f4\u5230\u70e4\u5236\u4e24\u9762\u91d1\u9ec4\uff0c\u7136\u540e\u6492\u4e0a\u5b5c\u7136\u7c89\uff0c\u5982\u679c\u6ca1\u6709\u70e4\u7bb1\uff0c\u53ef\u4ee5\u70ed\u9505\u70ed\u6cb9\uff0c\u9505\u7684\u4e24\u8fb9\u6492\u4e0a\u5c11\u8bb8\u98df\u76d0\uff0c\u4e0b\u5165\u8349\u9c7c\u5f00\u59cb\u714e\uff0c\u521a\u4e0b\u5165\u7684\u65f6\u5019\u4e0d\u8981\u7740\u6025\u7ffb\u52a8\uff0c\u7b49\u4e00\u9762\u5b9a\u578b\u540e\u518d\u7ffb\u9762\uff0c\u714e\u5236\u4e24\u9762\u91d1\u9ec4\uff0c\u6492\u4e0a\u5b5c\u7136\u7c89\uff0c\u51fa\u9505\u88c5\u5728\u76d8\u5b50\u91cc\u51c6\u5907\u3002 \u9505\u4e2d\u6492\u4e0a 20ml \u98df\u7528\u6cb9\uff0c\u7b49\u5230\u6cb9\u70ed\u540e\uff0c\u628a\u5927\u8471\u5927\u849c\u516b\u89d2\u9999\u53f6\u5012\u5165\u7092\u9999\uff0c\u52a0\u4e0a\u4e00\u5305\u706b\u9505\u5e95\u6599\u7684\u4e00\u534a\u548c 15-20g \u8c46\u74e3\u9171\uff0c\u7092\u51fa\u7ea2\u6cb9\u540e\uff0c\u52a0\u5165\u5c11\u8bb8\u767d\u7cd6\uff0c10g \u98df\u76d0\uff0c\u5c11\u8bb8\u751f\u62bd\u8c03\u5473\uff0c\u5012\u5165\u548c\u98df\u6750\u9f50\u5e73\u7684\u6e05\u6c34\u716e\u5f00\uff0c\u4f9d\u6b21\u4e0b\u5165\u82b9\u83dc\u6bb5\uff0c\u8c46\u82bd\uff0c\u5343\u5f20\u4e1d\uff0c\u4e0d\u7528\u716e\u719f\uff0c\u7a0d\u5fae\u70eb\u4e00\u4e0b\u540e\u94fa\u4e0a\u6d0b\u8471\u4e1d\uff0c\u653e\u4e0a\u70e4\u9c7c\uff0c\u52a0\u5165\u5e72\u8fa3\u6912\uff0c\u706f\u7b3c\u6912\uff0c\u9752\u82b1\u6912\uff0c\u53e6\u4e00\u4e2a\u9505\u70e7\u6cb9\uff0c\u6cb9\u70ed\u540e\u6d47\u5728\u521a\u52a0\u5165\u7684\u8fa3\u6912\u4e0a\u9762\u6fc0\u53d1\u51fa\u9999\u5473\uff0c\u6700\u540e\u6492\u4e0a\u719f\u82b1\u751f\u7c73\uff0c\u8471\u82b1\uff0c\u767d\u829d\u9ebb\uff0c\u9999\u83dc\uff0c\u716e\u4e94\u516d\u5206\u949f\uff0c\u7f8e\u5473\u5373\u6210\u3002","title":"\u64cd\u4f5c"},{"location":"dishes/aquatic/%E6%B7%B7%E5%90%88%E7%83%A4%E9%B1%BC/%E7%83%A4%E9%B1%BC/#_5","text":"\u6280\u672f\u603b\u7ed3\uff1a \u8fd9\u9053\u83dc\u7684\u98df\u76d0\uff0c\u80e1\u6912\u7c89\uff0c\u5b5c\u7136\u7c89\uff0c\u98df\u7528\u6cb9\uff0c\u751f\u62bd\uff0c\u767d\u7cd6\u7b49\u7684\u4f7f\u7528\u91cf\uff0c\u6839\u636e\u4e2a\u4eba\u53e3\u5473\u548c\u98df\u6750\u6bd4\u4f8b\u505a\u51b3\u5b9a\uff0c\u5e76\u4e0d\u9700\u8981\u4e25\u683c\u6309\u7167\u6211\u5199\u7684\u5206\u91cf\u6765\u505a\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request\u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/aquatic/%E6%B8%85%E8%92%B8%E9%B2%88%E9%B1%BC/%E6%B8%85%E8%92%B8%E9%B2%88%E9%B1%BC/","text":"\u6e05\u84b8\u9c88\u9c7c\u7684\u505a\u6cd5 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u9c88\u9c7c\uff08\u5bb3\u6015\u6740\u9c7c\u7684\u540c\u5b66\u53ef\u4ee5\u8ba9\u5e97\u5bb6\u5e2e\u5fd9\u6740\uff09 \u9999\u8471 \u59dc \u98df\u7528\u6cb9 \u84b8\u9c7c\u8c49\u6cb9 \u6599\u9152 \u98df\u7528\u76d0 \u8ba1\u7b97 \u6bcf\u4efd\uff1a \u9c88\u9c7c \u4e00\u6761 \u9999\u8471 \u4e09\u6839 \u59dc \u4e00\u5757 \u98df\u7528\u6cb9 10-15ml \u84b8\u9c7c\u8c49\u6cb9 10-15ml \u6599\u9152 10-15ml \u98df\u7528\u76d0 5-10g \u64cd\u4f5c \u59dc\u5207\u7247\u5207\u4e1d\u3001\u9999\u8471\u7684\u8471\u767d\u5207\u6bb5\uff0c\u8471\u7eff\u5207\u4e1d\uff0c\u5207\u4e1d\u540e\u653e\u5165\u51b7\u6c34\u6d78\u6ce1\u5907\u7528\u3002 \u9c88\u9c7c\u5904\u7406\u597d\u540e\u6d17\u51c0\uff0c\u7528\u53a8\u623f\u7eb8\u64e6\u5e72\uff0c\u4e24\u9762\u5206\u522b\u5212\u51e0\u5200\uff0c\u7528\u76d0\u6d17\u6389\u9c7c\u8eab\u7684\u7c98\u6db2\uff0c\u5e76\u7528 10g \u76d0\u62b9\u904d\u9c7c\u8eab\u7684\u5185\u5916\uff0c\u814c\u5236 10 \u5206\u949f\u4ee5\u4e0a\u3002 \u8865\u5145\u4e00\u4e2a\u9c88\u9c7c\u6539\u5200\u548c\u6446\u76d8\u7684\u65b9\u6cd5\uff0c\u6539\u5200\u540e\u53ef\u4ee5\u8ba9\u9c88\u9c7c\u7acb\u8d77\u6765\u84b8\uff0c\u5747\u5300\u53d7\u70ed\uff0c\u540c\u65f6\u5403\u8d77\u6765\u66f4\u52a0\u65b9\u4fbf\uff0c\u65e0\u9700\u7ffb\u9762\u3002 \u9c7c\u809a\u5185\u585e\u4e0a\u59dc\u548c\u8471\u767d\uff0c\u9c7c\u8eab\u4e5f\u6492\u4e0a\u59dc\u548c\u8471\u767d\uff0c\u91cf\u4e3a\u5907\u7528\u7684\u4e00\u534a\u3002\u84b8\u9c7c\u7684\u789f\u5b50\u7528\u7b77\u5b50\u5c06\u9c7c\u8ddf\u789f\u5b50\u9694\u5f00\u84b8 \u6c34\u70e7\u70ed\u611f\u89c9\u5230\u6c34\u6e29\u540e\u653e\u8fdb\u5165\u9c7c \u5927\u706b\u6e05\u84b8 10 \u5206\u949f\u3002 \u84b8\u597d\u7684\u9c7c\uff0c\u7528\u5e72\u51c0\u7684\u76d8\u5b50\u88c5\u8d77\u6765\u5e76\u53bb\u9664\u8eab\u4e0a\u59dc\u849c \u9c7c\u8eab\u6d47\u4e0a 15ml \u84b8\u9c7c\u8c49\u6cb9 \u9c7c\u8eab\u91cd\u65b0\u6492\u4e0a\u59dc\u548c\u8471\u4e1d\uff0c\u9505\u5185\u52a0\u4e0a 10ml \u98df\u7528\u6cb9\u5e76\u70e7\u70ed\uff0c\u5c06\u98df\u7528\u6cb9\u6dcb\u81f3\u9c7c\u8eab\u5373\u53ef\u51fa\u83dc \u9644\u52a0\u5185\u5bb9 \u6280\u672f\u603b\u7ed3\uff1a \u8fd9\u9053\u83dc\u5c5e\u4e8e\u6709\u624b\u5c31\u884c\uff0c\u5173\u952e\u70b9\u5728\u4e8e\u706b\u5019\uff0c\u9c7c\u7684\u5927\u5c0f\u8ddf\u706b\u5019\u90fd\u4f1a\u76f8\u5173\uff0c\u592a\u4e45\u4f1a\u5bfc\u81f4\u9c7c\u8089\u592a\u8001\u6781\u5ea6\u5f71\u54cd\u53e3\u611f\uff0c\u592a\u77ed\u4f1a\u5bfc\u81f4\u90e8\u5206\u9c7c\u8089\u6ca1\u719f\u3002\u6240\u4ee5\u5927\u706b\u84b8\u9c7c\u4e00\u822c\u662f 10 \u5206\u949f\u5185\u8f83\u4f73\u3002 \u5207\u8bb0\u84b8\u9c7c\u9700\u8981\u7528\u7b77\u5b50\u9694\u5f00\u88c5\u9c7c\u7684\u76d8\u5b50\uff0c\u8fd9\u6837\u505a\u7684\u597d\u5904\u6709\u4e24\u70b9\uff1a 1\u3001\u9c7c\u5728\u84b8\u7684\u8fc7\u7a0b\u4e2d\u4f1a\u5c06\u6c34\u6ef4\u5230\u76d8\u5b50\uff0c\u5982\u679c\u9c7c\u76f4\u63a5\u63a5\u89e6\u4f1a\u5bfc\u81f4\u9c7c\u98df\u7528\u65f6\u4f1a\u8165\u3002 2\u3001\u80fd\u591f\u5c06\u9c7c\u5747\u5300\u53d7\u70ed\u3002 \u8fd9\u9053\u83dc\u96be\u5ea6\u7cfb\u6570\u7b80\u5355\uff0c\u800c\u4e14\u5473\u9053\u975e\u5e38\u68d2\u54e6 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request\u3002","title":"\u6e05\u84b8\u9c88\u9c7c"},{"location":"dishes/aquatic/%E6%B8%85%E8%92%B8%E9%B2%88%E9%B1%BC/%E6%B8%85%E8%92%B8%E9%B2%88%E9%B1%BC/#_1","text":"","title":"\u6e05\u84b8\u9c88\u9c7c\u7684\u505a\u6cd5"},{"location":"dishes/aquatic/%E6%B8%85%E8%92%B8%E9%B2%88%E9%B1%BC/%E6%B8%85%E8%92%B8%E9%B2%88%E9%B1%BC/#_2","text":"\u9c88\u9c7c\uff08\u5bb3\u6015\u6740\u9c7c\u7684\u540c\u5b66\u53ef\u4ee5\u8ba9\u5e97\u5bb6\u5e2e\u5fd9\u6740\uff09 \u9999\u8471 \u59dc \u98df\u7528\u6cb9 \u84b8\u9c7c\u8c49\u6cb9 \u6599\u9152 \u98df\u7528\u76d0","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/aquatic/%E6%B8%85%E8%92%B8%E9%B2%88%E9%B1%BC/%E6%B8%85%E8%92%B8%E9%B2%88%E9%B1%BC/#_3","text":"\u6bcf\u4efd\uff1a \u9c88\u9c7c \u4e00\u6761 \u9999\u8471 \u4e09\u6839 \u59dc \u4e00\u5757 \u98df\u7528\u6cb9 10-15ml \u84b8\u9c7c\u8c49\u6cb9 10-15ml \u6599\u9152 10-15ml \u98df\u7528\u76d0 5-10g","title":"\u8ba1\u7b97"},{"location":"dishes/aquatic/%E6%B8%85%E8%92%B8%E9%B2%88%E9%B1%BC/%E6%B8%85%E8%92%B8%E9%B2%88%E9%B1%BC/#_4","text":"\u59dc\u5207\u7247\u5207\u4e1d\u3001\u9999\u8471\u7684\u8471\u767d\u5207\u6bb5\uff0c\u8471\u7eff\u5207\u4e1d\uff0c\u5207\u4e1d\u540e\u653e\u5165\u51b7\u6c34\u6d78\u6ce1\u5907\u7528\u3002 \u9c88\u9c7c\u5904\u7406\u597d\u540e\u6d17\u51c0\uff0c\u7528\u53a8\u623f\u7eb8\u64e6\u5e72\uff0c\u4e24\u9762\u5206\u522b\u5212\u51e0\u5200\uff0c\u7528\u76d0\u6d17\u6389\u9c7c\u8eab\u7684\u7c98\u6db2\uff0c\u5e76\u7528 10g \u76d0\u62b9\u904d\u9c7c\u8eab\u7684\u5185\u5916\uff0c\u814c\u5236 10 \u5206\u949f\u4ee5\u4e0a\u3002 \u8865\u5145\u4e00\u4e2a\u9c88\u9c7c\u6539\u5200\u548c\u6446\u76d8\u7684\u65b9\u6cd5\uff0c\u6539\u5200\u540e\u53ef\u4ee5\u8ba9\u9c88\u9c7c\u7acb\u8d77\u6765\u84b8\uff0c\u5747\u5300\u53d7\u70ed\uff0c\u540c\u65f6\u5403\u8d77\u6765\u66f4\u52a0\u65b9\u4fbf\uff0c\u65e0\u9700\u7ffb\u9762\u3002 \u9c7c\u809a\u5185\u585e\u4e0a\u59dc\u548c\u8471\u767d\uff0c\u9c7c\u8eab\u4e5f\u6492\u4e0a\u59dc\u548c\u8471\u767d\uff0c\u91cf\u4e3a\u5907\u7528\u7684\u4e00\u534a\u3002\u84b8\u9c7c\u7684\u789f\u5b50\u7528\u7b77\u5b50\u5c06\u9c7c\u8ddf\u789f\u5b50\u9694\u5f00\u84b8 \u6c34\u70e7\u70ed\u611f\u89c9\u5230\u6c34\u6e29\u540e\u653e\u8fdb\u5165\u9c7c \u5927\u706b\u6e05\u84b8 10 \u5206\u949f\u3002 \u84b8\u597d\u7684\u9c7c\uff0c\u7528\u5e72\u51c0\u7684\u76d8\u5b50\u88c5\u8d77\u6765\u5e76\u53bb\u9664\u8eab\u4e0a\u59dc\u849c \u9c7c\u8eab\u6d47\u4e0a 15ml \u84b8\u9c7c\u8c49\u6cb9 \u9c7c\u8eab\u91cd\u65b0\u6492\u4e0a\u59dc\u548c\u8471\u4e1d\uff0c\u9505\u5185\u52a0\u4e0a 10ml \u98df\u7528\u6cb9\u5e76\u70e7\u70ed\uff0c\u5c06\u98df\u7528\u6cb9\u6dcb\u81f3\u9c7c\u8eab\u5373\u53ef\u51fa\u83dc","title":"\u64cd\u4f5c"},{"location":"dishes/aquatic/%E6%B8%85%E8%92%B8%E9%B2%88%E9%B1%BC/%E6%B8%85%E8%92%B8%E9%B2%88%E9%B1%BC/#_5","text":"\u6280\u672f\u603b\u7ed3\uff1a \u8fd9\u9053\u83dc\u5c5e\u4e8e\u6709\u624b\u5c31\u884c\uff0c\u5173\u952e\u70b9\u5728\u4e8e\u706b\u5019\uff0c\u9c7c\u7684\u5927\u5c0f\u8ddf\u706b\u5019\u90fd\u4f1a\u76f8\u5173\uff0c\u592a\u4e45\u4f1a\u5bfc\u81f4\u9c7c\u8089\u592a\u8001\u6781\u5ea6\u5f71\u54cd\u53e3\u611f\uff0c\u592a\u77ed\u4f1a\u5bfc\u81f4\u90e8\u5206\u9c7c\u8089\u6ca1\u719f\u3002\u6240\u4ee5\u5927\u706b\u84b8\u9c7c\u4e00\u822c\u662f 10 \u5206\u949f\u5185\u8f83\u4f73\u3002 \u5207\u8bb0\u84b8\u9c7c\u9700\u8981\u7528\u7b77\u5b50\u9694\u5f00\u88c5\u9c7c\u7684\u76d8\u5b50\uff0c\u8fd9\u6837\u505a\u7684\u597d\u5904\u6709\u4e24\u70b9\uff1a 1\u3001\u9c7c\u5728\u84b8\u7684\u8fc7\u7a0b\u4e2d\u4f1a\u5c06\u6c34\u6ef4\u5230\u76d8\u5b50\uff0c\u5982\u679c\u9c7c\u76f4\u63a5\u63a5\u89e6\u4f1a\u5bfc\u81f4\u9c7c\u98df\u7528\u65f6\u4f1a\u8165\u3002 2\u3001\u80fd\u591f\u5c06\u9c7c\u5747\u5300\u53d7\u70ed\u3002 \u8fd9\u9053\u83dc\u96be\u5ea6\u7cfb\u6570\u7b80\u5355\uff0c\u800c\u4e14\u5473\u9053\u975e\u5e38\u68d2\u54e6 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request\u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/aquatic/%E7%99%BD%E7%81%BC%E8%99%BE/%E7%99%BD%E7%81%BC%E8%99%BE/","text":"\u767d\u707c\u867e\u7684\u505a\u6cd5 \u767d\u707c\u867e\u975e\u5e38\u9002\u5408\u7a0b\u5e8f\u5458\u5728\u6cbf\u6d77\u5730\u533a\u505a\uff0c\u7c7b\u4f3c\u4e8e\u6e05\u84b8\u9c7c\uff1a\u7b80\u5355\u5bb9\u9519\u3001\u6709\u8425\u517b\u3001\u6709\u6ee1\u8db3\u611f\uff0c\u751a\u81f3\u5f88\u597d\u770b\u3002 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u6d3b\u867e \u6d0b\u8471 \u59dc \u849c \u8471 \u98df\u7528\u6cb9 \u9171\u6cb9 \u6599\u9152 \u829d\u9ebb \u869d\u6cb9 \u9999\u918b \u8ba1\u7b97 \u6bcf\u4efd\uff1a \u867e 250g * \u4eba\u6570\uff08\u5efa\u8bae 1-2 \u4eba\u4efd\uff09 \u8471 \u4e00\u6839 \u59dc \u4e00\u5757 \u6d0b\u8471 \u4e00\u5934 \u849c 5-8 \u74e3 \u98df\u7528\u6cb9 10-15ml \u6599\u9152 20 ml \u9171\u6cb9 10-15ml \u829d\u9ebb \u4e00\u628a \u9999\u918b 10 ml \u869d\u6cb9 10 ml \u64cd\u4f5c \u6d0b\u8471\u5207\u5c0f\u5757\uff0c\u59dc\u5207\u7247\uff0c\u5e73\u94fa\u5e73\u5e95\u9505\u3002 \u6d3b\u867e\u51b2\u6d17\u4e00\u4e0b\uff08\u53bb\u9664\u867e\u7ebf\u3001\u526a\u5200\u51cf\u6389\u867e\u817f\u867e\u987b\u5b50\u90fd\u662f\u53ef\u9009\u64cd\u4f5c\uff09\uff0c\u63a7\u6c34\uff0c\u94fa\u5728\u5e73\u5e95\u9505\u7684\u6d0b\u8471\u3001\u59dc\u7247\u4e4b\u4e0a\u3002 \u5012\u5165\u56fd\u5185\u6599\u9152\uff0c\u76d6\u4e0a\u9505\u76d6\uff0c\u4e2d\u706b 1 \u5206\u949f\uff0c\u5c0f\u706b 5 \u5206\u949f\uff0c\u5173\u706b 5 \u5206\u949f\u3002 \u548c\u4e0a\u4e00\u6b65\u5e76\u884c\u64cd\u4f5c\uff0c\u5236\u4f5c\u8638\u6599\uff1a \u8471\u5207\u6210\u8471\u82b1\u3001\u849c\u5207\u788e\u3001\u5012\u5165\u9171\u6cb9\u3001\u829d\u9ebb\u3001\u9999\u918b\uff0c\u6405\u62cc\u4e4b\u3002 \u6cb9\u70e7\u70ed\uff0c\u6dcb\u5165\u8638\u6599\u3002 \u867e\u51fa\u9505\uff0c\u7528\u5e72\u51c0\u7684\u76d8\u5b50\u88c5\u597d\u3002 \u9644\u52a0\u5185\u5bb9 \u6280\u672f\u7ec6\u8282\uff1a \u5f00\u59cb\u4e0d\u80fd\u5927\u706b\u3001\u9632\u6b62\u7cca\u5e95\u3002 \u5982\u679c\u9505\u76d6\u6709\u901a\u6c14\u53e3\u3001\u65f6\u95f4\u8981\u76f8\u5e94\u8c03\u8282\u4e00\u4e0b\uff08\u8003\u8651\u589e\u52a0 30 \u79d2\u4e2d\u706b\uff09\u3002 \u8638\u6599\u5176\u5b9e\u4e5f\u662f\u53ef\u9009\u7684\u3001\u4e5f\u53ef\u4ee5\u662f\u7eaf\u7684\u918b\uff0c\u5927\u81ea\u7136\u9988\u8d60\u7684\u9c9c\u867e\u5728\u6ca1\u6709\u6c34\u5e26\u8d70\u51b2\u6de1\u9c9c\u751c\u7684\u60c5\u51b5\u4e0b\u53e3\u611f\u5473\u9053\u90fd\u975e\u5e38\u68d2\u7684\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull Request\u3002","title":"\u767d\u707c\u867e"},{"location":"dishes/aquatic/%E7%99%BD%E7%81%BC%E8%99%BE/%E7%99%BD%E7%81%BC%E8%99%BE/#_1","text":"\u767d\u707c\u867e\u975e\u5e38\u9002\u5408\u7a0b\u5e8f\u5458\u5728\u6cbf\u6d77\u5730\u533a\u505a\uff0c\u7c7b\u4f3c\u4e8e\u6e05\u84b8\u9c7c\uff1a\u7b80\u5355\u5bb9\u9519\u3001\u6709\u8425\u517b\u3001\u6709\u6ee1\u8db3\u611f\uff0c\u751a\u81f3\u5f88\u597d\u770b\u3002","title":"\u767d\u707c\u867e\u7684\u505a\u6cd5"},{"location":"dishes/aquatic/%E7%99%BD%E7%81%BC%E8%99%BE/%E7%99%BD%E7%81%BC%E8%99%BE/#_2","text":"\u6d3b\u867e \u6d0b\u8471 \u59dc \u849c \u8471 \u98df\u7528\u6cb9 \u9171\u6cb9 \u6599\u9152 \u829d\u9ebb \u869d\u6cb9 \u9999\u918b","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/aquatic/%E7%99%BD%E7%81%BC%E8%99%BE/%E7%99%BD%E7%81%BC%E8%99%BE/#_3","text":"\u6bcf\u4efd\uff1a \u867e 250g * \u4eba\u6570\uff08\u5efa\u8bae 1-2 \u4eba\u4efd\uff09 \u8471 \u4e00\u6839 \u59dc \u4e00\u5757 \u6d0b\u8471 \u4e00\u5934 \u849c 5-8 \u74e3 \u98df\u7528\u6cb9 10-15ml \u6599\u9152 20 ml \u9171\u6cb9 10-15ml \u829d\u9ebb \u4e00\u628a \u9999\u918b 10 ml \u869d\u6cb9 10 ml","title":"\u8ba1\u7b97"},{"location":"dishes/aquatic/%E7%99%BD%E7%81%BC%E8%99%BE/%E7%99%BD%E7%81%BC%E8%99%BE/#_4","text":"\u6d0b\u8471\u5207\u5c0f\u5757\uff0c\u59dc\u5207\u7247\uff0c\u5e73\u94fa\u5e73\u5e95\u9505\u3002 \u6d3b\u867e\u51b2\u6d17\u4e00\u4e0b\uff08\u53bb\u9664\u867e\u7ebf\u3001\u526a\u5200\u51cf\u6389\u867e\u817f\u867e\u987b\u5b50\u90fd\u662f\u53ef\u9009\u64cd\u4f5c\uff09\uff0c\u63a7\u6c34\uff0c\u94fa\u5728\u5e73\u5e95\u9505\u7684\u6d0b\u8471\u3001\u59dc\u7247\u4e4b\u4e0a\u3002 \u5012\u5165\u56fd\u5185\u6599\u9152\uff0c\u76d6\u4e0a\u9505\u76d6\uff0c\u4e2d\u706b 1 \u5206\u949f\uff0c\u5c0f\u706b 5 \u5206\u949f\uff0c\u5173\u706b 5 \u5206\u949f\u3002 \u548c\u4e0a\u4e00\u6b65\u5e76\u884c\u64cd\u4f5c\uff0c\u5236\u4f5c\u8638\u6599\uff1a \u8471\u5207\u6210\u8471\u82b1\u3001\u849c\u5207\u788e\u3001\u5012\u5165\u9171\u6cb9\u3001\u829d\u9ebb\u3001\u9999\u918b\uff0c\u6405\u62cc\u4e4b\u3002 \u6cb9\u70e7\u70ed\uff0c\u6dcb\u5165\u8638\u6599\u3002 \u867e\u51fa\u9505\uff0c\u7528\u5e72\u51c0\u7684\u76d8\u5b50\u88c5\u597d\u3002","title":"\u64cd\u4f5c"},{"location":"dishes/aquatic/%E7%99%BD%E7%81%BC%E8%99%BE/%E7%99%BD%E7%81%BC%E8%99%BE/#_5","text":"\u6280\u672f\u7ec6\u8282\uff1a \u5f00\u59cb\u4e0d\u80fd\u5927\u706b\u3001\u9632\u6b62\u7cca\u5e95\u3002 \u5982\u679c\u9505\u76d6\u6709\u901a\u6c14\u53e3\u3001\u65f6\u95f4\u8981\u76f8\u5e94\u8c03\u8282\u4e00\u4e0b\uff08\u8003\u8651\u589e\u52a0 30 \u79d2\u4e2d\u706b\uff09\u3002 \u8638\u6599\u5176\u5b9e\u4e5f\u662f\u53ef\u9009\u7684\u3001\u4e5f\u53ef\u4ee5\u662f\u7eaf\u7684\u918b\uff0c\u5927\u81ea\u7136\u9988\u8d60\u7684\u9c9c\u867e\u5728\u6ca1\u6709\u6c34\u5e26\u8d70\u51b2\u6de1\u9c9c\u751c\u7684\u60c5\u51b5\u4e0b\u53e3\u611f\u5473\u9053\u90fd\u975e\u5e38\u68d2\u7684\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull Request\u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/aquatic/%E7%B3%96%E9%86%8B%E9%B2%A4%E9%B1%BC/%E7%B3%96%E9%86%8B%E9%B2%A4%E9%B1%BC/","text":"\u7cd6\u918b\u9ca4\u9c7c\u7684\u505a\u6cd5 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u9ca4\u9c7c \u756a\u8304\u9171 \u767d\u7cd6 \u767d\u918b \u6dc0\u7c89 \u76d0 \u8471 \u59dc \u6599\u9152 \u9999\u83dc\u4e00\u9897 \u76c6\uff08\u4e24\u4e2a\uff09 \u83dc\u5200\u4e00\u4e2a \u7b0a\u7bf1\u4e00\u4e2a\u3001\u9505\u94f2\u4e00\u4e2a \u8ba1\u7b97 \u6ce8\u610f\uff0c\u8be5\u83dc\u53ea\u6709 3 \u4eba\u4ee5\u4e0a\u7248\u672c\uff08\u8fc7\u5927\u6216\u592a\u5c0f\u7684\u9c7c\u90fd\u662f\u4e0d\u5408\u9002\u7684\uff09\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u516c\u5f0f\u8ba1\u7b97\uff0c\u7279\u522b\u9002\u5408\u5bb6\u5ead\u805a\u9910\u65f6\u98df\u7528\uff0c\u5982\u5e74\u591c\u996d \u9ca4\u9c7c = \u7ea6 3 \u65a4 \u6e05\u6c34 = 50g \u756a\u8304\u9171 = 40g \u767d\u7cd6 = 20g \u767d\u918b = 10g \u6dc0\u7c89 = 10g \u76d0 = 30g \u5927\u8471 = 30g\uff08\u7ea6\u534a\u9897\uff09 \u59dc = 30g \u6599\u9152 = 25g \u64cd\u4f5c \u5c06\u9c7c\u6e05\u6d17\u5e72\u51c0\uff0c\u786e\u4fdd\u65e0\u9c7c\u9cde\u7b49\u5f02\u7269 \u5c06\u9c7c\u5934\u671d\u5de6\uff0c\u9c7c\u809a\u671d\u4e0b\uff0c\u53f3\u624b\u6301\u5200\u3002\u5200\u7ad6\u76f4\u5207\u4e0b 1cm\uff0c\u6309\u7d27\u9c7c\u8eab\u5f80\u5de6\u7247 3-4cm\uff0c\u518d\u5c06\u9c7c\u7247\u4e2d\u95f4\u8f7b\u8f7b\u5212\u4e00\u5200 \u5c06\u9c7c\u653e\u8fdb\u76c6\u91cc\uff0c\u7136\u540e\u5c06\u5927\u59dc\u5207\u7247\uff0c\u5927\u8471\u5207\u6bb5\uff08\u968f\u4fbf\u5207\u5207\u5c31\u884c\u4e86\uff0c\u4e3b\u8981\u662f\u9700\u8981\u53bb\u8165\u5473\uff09 \u7528\u5403\u5976\u7684\u529b\u6c14\u5c06\u5927\u8471\u5927\u59dc\u91cc\u7684\u6c41\u6c34\u6324\u5230\u76c6\u4e2d \u52a0\u5165 20g \u76d0\uff0c25g \u6599\u9152\uff0c\u7136\u540e\u7ed9\u9ca4\u9c7c\u6413\u4e2a\u6fa1\uff0c\u6d82\u62b9\u5747\u5300 \uff08\u814c\u9c7c\u65f6\u95f4\u8d8a\u957f\uff0c\u9c7c\u8165\u5473\u5c31\u8d8a\u5c0f\uff0c\u63a8\u8350\u814c 30 \u5206\u949f\u4ee5\u4e0a\uff09 \u627e\u4e2a\u5e72\u51c0\u7684\u76c6\uff0c\u52a0\u5165 100g \u9762\u7c89\u3001200g \u6dc0\u7c89\u3001180g \u6c34\u30015g \u76d0\uff0c\u7528\u624b\u5c06\u5176\u6405\u62cc\u5747\u5300\uff0c\u9762\u7cca\u6b64\u65f6\u7c98\u7a20\u5448\u53ef\u62c9\u4e1d\u72b6\u6001\uff0c\u7136\u540e\u6253\u5165\u4e00\u4e2a\u9e21\u86cb\uff0c\u518d\u6b21\u6405\u5300 \u7b49\u5f85 30 \u5206\u949f \u5c06\u9c7c\u653e\u5728\u6848\u677f\u4e0a\uff0c\u7528\u5e72\u6bdb\u5dfe\u5c06\u9c7c\u8eab\u4e0a\u7684\u6c34\u64e6\u5e72\uff08\u8fd9\u6837\u53ef\u4ee5\u66f4\u597d\u7684\u6302\u7cca\uff09 \u5c06\u76c6\u51b2\u6d17\u5e72\u51c0\uff0c\u7528\u5e72\u6bdb\u5dfe\u64e6\u5e72 \u8d77\u9505\u70e7\u6cb9\uff0c\u52a0\u5165\u7ea6 1L \u5de6\u53f3\u7684\u6cb9\uff0c\u5c06\u6cb9\u6e29\u70e7\u81f3 7 \u6210\u70ed\uff0c\u7ea6 200-240 \u5ea6 \u634f\u8d77\u9c7c\u7684\u5c3e\u5df4\uff0c\u5c06\u9c7c\u5934\u6c89\u5165\u9505\u5e95\uff0c\u7528\u52fa\u5b50\u5f80\u9c7c\u7684\u8eab\u4e0a\u6dcb\u70ed\u6cb9\uff0c\u5f85\u9762\u7cca\u6210\u578b\u540e\uff0c\u5c06\u9c7c\u6162\u6162\u653e\u5165\u9505\u4e2d\uff0c\u62ff\u9505\u94f2\u8f7b\u8f7b\u94f2\u8d77\u9c7c\u7684\u5934\u90e8\uff0c\u7136\u540e\u57ab\u4e0a\u7b0a\u7bf1\u3002\u9632\u6b62\u5e95\u90e8\u70b8\u7cca\u3002 \u51c6\u5907\u4e00\u4e2a\u76db\u9c7c\u7684\u76d8\u5b50\uff0c\u653e\u5728\u9505\u7684\u65c1\u8fb9\u3002 \u7528\u9505\u94f2\u4ece\u9c7c\u8eab\u5904\u8f7b\u8f7b\u94f2\u5165\uff0c\u4e24\u4e2a\u5de5\u5177\u914d\u5408\u9c7c\u7ffb\u4e2a\u8eab\u3002\u518d\u70b8\u4e24\u5206\u949f\uff0c\u8fd8\u662f\u540c\u6837\u7684\u65b9\u5f0f\uff08\u7b0a\u7bf1\u6258\u7740\u9c7c\u5934\uff0c\u9505\u94f2\u6258\u7740\u9c7c\u8eab\uff0c\u5c06\u9c7c\u76db\u5165\u76d8\u4e2d\uff09 \u5c06\u9505\u4e2d\u7684\u6cb9\u5012\u5165\u64e6\u5e72\u7684\u76c6\u4e2d\uff0c\u653e\u7f6e\u4e00\u8fb9\uff0c\u7136\u540e\u5c06\u9505\u5237\u5e72\u51c0 \u5c06 50g \u6e05\u6c34\u300140g \u756a\u8304\u9171\u300120g \u767d\u7cd6\u300110g \u767d\u918b\u653e\u5165\u5c0f\u7897\u4e2d\uff0c\u6405\u62cc\u5747\u5300 \u518d\u51c6\u5907\u4e00\u4e2a\u5c0f\u7897\u52a0\u5165 10g \u6dc0\u7c89\u300110g \u6c34\uff0c\u6405\u62cc\u6210\u6c34\u6dc0\u7c89 \u5f00\u5927\u706b\u5c06\u9505\u70e7\u70ed\uff0c\u7136\u540e\u5012\u5165\u6211\u4eec\u51c6\u5907\u7684\u6599\u6c41\uff0c\u5927\u706b\u70e7\u5f00\uff0c\u8f6c\u5c0f\u706b \u52a0\u5165\u8c03\u597d\u7684\u6c34\u6dc0\u7c89\uff0c\u8fb9\u5012\u8fb9\u6405\u62cc\uff0c\u7136\u540e 20 \u79d2\u540e\u5173\u706b \u5c06\u71ac\u597d\u7684\u7cd6\u918b\u6c41\u7528\u52fa\u5b50\u5747\u5300\u5730\u6d47\u5728\u9c7c\u8eab\u4e0a\uff0c\u53ef\u4ee5\u52a0\u70b9\u9999\u83dc\u6216\u8471\u82b1\u70b9\u7f00\uff0c\u7cd6\u918b\u9ca4\u9c7c\u5c31\u505a\u597d\u4e86 \u6211\u8fd9\u91cc\u7684\u7cd6\u918b\u6c41\u71ac\u7684\u6709\u70b9\u7a20\u4e86...... \u9644\u52a0\u5185\u5bb9 \u8fd9\u9053\u83dc\u96be\u5ea6\u7cfb\u6570\u7b97\u4e2d\u7b49\u5427\uff0c\u5bf9\u65b0\u624b\u8fd8\u662f\u4e0d\u592a\u53cb\u597d\u7684...... \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u7cd6\u918b\u9ca4\u9c7c"},{"location":"dishes/aquatic/%E7%B3%96%E9%86%8B%E9%B2%A4%E9%B1%BC/%E7%B3%96%E9%86%8B%E9%B2%A4%E9%B1%BC/#_1","text":"","title":"\u7cd6\u918b\u9ca4\u9c7c\u7684\u505a\u6cd5"},{"location":"dishes/aquatic/%E7%B3%96%E9%86%8B%E9%B2%A4%E9%B1%BC/%E7%B3%96%E9%86%8B%E9%B2%A4%E9%B1%BC/#_2","text":"\u9ca4\u9c7c \u756a\u8304\u9171 \u767d\u7cd6 \u767d\u918b \u6dc0\u7c89 \u76d0 \u8471 \u59dc \u6599\u9152 \u9999\u83dc\u4e00\u9897 \u76c6\uff08\u4e24\u4e2a\uff09 \u83dc\u5200\u4e00\u4e2a \u7b0a\u7bf1\u4e00\u4e2a\u3001\u9505\u94f2\u4e00\u4e2a","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/aquatic/%E7%B3%96%E9%86%8B%E9%B2%A4%E9%B1%BC/%E7%B3%96%E9%86%8B%E9%B2%A4%E9%B1%BC/#_3","text":"\u6ce8\u610f\uff0c\u8be5\u83dc\u53ea\u6709 3 \u4eba\u4ee5\u4e0a\u7248\u672c\uff08\u8fc7\u5927\u6216\u592a\u5c0f\u7684\u9c7c\u90fd\u662f\u4e0d\u5408\u9002\u7684\uff09\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u516c\u5f0f\u8ba1\u7b97\uff0c\u7279\u522b\u9002\u5408\u5bb6\u5ead\u805a\u9910\u65f6\u98df\u7528\uff0c\u5982\u5e74\u591c\u996d \u9ca4\u9c7c = \u7ea6 3 \u65a4 \u6e05\u6c34 = 50g \u756a\u8304\u9171 = 40g \u767d\u7cd6 = 20g \u767d\u918b = 10g \u6dc0\u7c89 = 10g \u76d0 = 30g \u5927\u8471 = 30g\uff08\u7ea6\u534a\u9897\uff09 \u59dc = 30g \u6599\u9152 = 25g","title":"\u8ba1\u7b97"},{"location":"dishes/aquatic/%E7%B3%96%E9%86%8B%E9%B2%A4%E9%B1%BC/%E7%B3%96%E9%86%8B%E9%B2%A4%E9%B1%BC/#_4","text":"\u5c06\u9c7c\u6e05\u6d17\u5e72\u51c0\uff0c\u786e\u4fdd\u65e0\u9c7c\u9cde\u7b49\u5f02\u7269 \u5c06\u9c7c\u5934\u671d\u5de6\uff0c\u9c7c\u809a\u671d\u4e0b\uff0c\u53f3\u624b\u6301\u5200\u3002\u5200\u7ad6\u76f4\u5207\u4e0b 1cm\uff0c\u6309\u7d27\u9c7c\u8eab\u5f80\u5de6\u7247 3-4cm\uff0c\u518d\u5c06\u9c7c\u7247\u4e2d\u95f4\u8f7b\u8f7b\u5212\u4e00\u5200 \u5c06\u9c7c\u653e\u8fdb\u76c6\u91cc\uff0c\u7136\u540e\u5c06\u5927\u59dc\u5207\u7247\uff0c\u5927\u8471\u5207\u6bb5\uff08\u968f\u4fbf\u5207\u5207\u5c31\u884c\u4e86\uff0c\u4e3b\u8981\u662f\u9700\u8981\u53bb\u8165\u5473\uff09 \u7528\u5403\u5976\u7684\u529b\u6c14\u5c06\u5927\u8471\u5927\u59dc\u91cc\u7684\u6c41\u6c34\u6324\u5230\u76c6\u4e2d \u52a0\u5165 20g \u76d0\uff0c25g \u6599\u9152\uff0c\u7136\u540e\u7ed9\u9ca4\u9c7c\u6413\u4e2a\u6fa1\uff0c\u6d82\u62b9\u5747\u5300 \uff08\u814c\u9c7c\u65f6\u95f4\u8d8a\u957f\uff0c\u9c7c\u8165\u5473\u5c31\u8d8a\u5c0f\uff0c\u63a8\u8350\u814c 30 \u5206\u949f\u4ee5\u4e0a\uff09 \u627e\u4e2a\u5e72\u51c0\u7684\u76c6\uff0c\u52a0\u5165 100g \u9762\u7c89\u3001200g \u6dc0\u7c89\u3001180g \u6c34\u30015g \u76d0\uff0c\u7528\u624b\u5c06\u5176\u6405\u62cc\u5747\u5300\uff0c\u9762\u7cca\u6b64\u65f6\u7c98\u7a20\u5448\u53ef\u62c9\u4e1d\u72b6\u6001\uff0c\u7136\u540e\u6253\u5165\u4e00\u4e2a\u9e21\u86cb\uff0c\u518d\u6b21\u6405\u5300 \u7b49\u5f85 30 \u5206\u949f \u5c06\u9c7c\u653e\u5728\u6848\u677f\u4e0a\uff0c\u7528\u5e72\u6bdb\u5dfe\u5c06\u9c7c\u8eab\u4e0a\u7684\u6c34\u64e6\u5e72\uff08\u8fd9\u6837\u53ef\u4ee5\u66f4\u597d\u7684\u6302\u7cca\uff09 \u5c06\u76c6\u51b2\u6d17\u5e72\u51c0\uff0c\u7528\u5e72\u6bdb\u5dfe\u64e6\u5e72 \u8d77\u9505\u70e7\u6cb9\uff0c\u52a0\u5165\u7ea6 1L \u5de6\u53f3\u7684\u6cb9\uff0c\u5c06\u6cb9\u6e29\u70e7\u81f3 7 \u6210\u70ed\uff0c\u7ea6 200-240 \u5ea6 \u634f\u8d77\u9c7c\u7684\u5c3e\u5df4\uff0c\u5c06\u9c7c\u5934\u6c89\u5165\u9505\u5e95\uff0c\u7528\u52fa\u5b50\u5f80\u9c7c\u7684\u8eab\u4e0a\u6dcb\u70ed\u6cb9\uff0c\u5f85\u9762\u7cca\u6210\u578b\u540e\uff0c\u5c06\u9c7c\u6162\u6162\u653e\u5165\u9505\u4e2d\uff0c\u62ff\u9505\u94f2\u8f7b\u8f7b\u94f2\u8d77\u9c7c\u7684\u5934\u90e8\uff0c\u7136\u540e\u57ab\u4e0a\u7b0a\u7bf1\u3002\u9632\u6b62\u5e95\u90e8\u70b8\u7cca\u3002 \u51c6\u5907\u4e00\u4e2a\u76db\u9c7c\u7684\u76d8\u5b50\uff0c\u653e\u5728\u9505\u7684\u65c1\u8fb9\u3002 \u7528\u9505\u94f2\u4ece\u9c7c\u8eab\u5904\u8f7b\u8f7b\u94f2\u5165\uff0c\u4e24\u4e2a\u5de5\u5177\u914d\u5408\u9c7c\u7ffb\u4e2a\u8eab\u3002\u518d\u70b8\u4e24\u5206\u949f\uff0c\u8fd8\u662f\u540c\u6837\u7684\u65b9\u5f0f\uff08\u7b0a\u7bf1\u6258\u7740\u9c7c\u5934\uff0c\u9505\u94f2\u6258\u7740\u9c7c\u8eab\uff0c\u5c06\u9c7c\u76db\u5165\u76d8\u4e2d\uff09 \u5c06\u9505\u4e2d\u7684\u6cb9\u5012\u5165\u64e6\u5e72\u7684\u76c6\u4e2d\uff0c\u653e\u7f6e\u4e00\u8fb9\uff0c\u7136\u540e\u5c06\u9505\u5237\u5e72\u51c0 \u5c06 50g \u6e05\u6c34\u300140g \u756a\u8304\u9171\u300120g \u767d\u7cd6\u300110g \u767d\u918b\u653e\u5165\u5c0f\u7897\u4e2d\uff0c\u6405\u62cc\u5747\u5300 \u518d\u51c6\u5907\u4e00\u4e2a\u5c0f\u7897\u52a0\u5165 10g \u6dc0\u7c89\u300110g \u6c34\uff0c\u6405\u62cc\u6210\u6c34\u6dc0\u7c89 \u5f00\u5927\u706b\u5c06\u9505\u70e7\u70ed\uff0c\u7136\u540e\u5012\u5165\u6211\u4eec\u51c6\u5907\u7684\u6599\u6c41\uff0c\u5927\u706b\u70e7\u5f00\uff0c\u8f6c\u5c0f\u706b \u52a0\u5165\u8c03\u597d\u7684\u6c34\u6dc0\u7c89\uff0c\u8fb9\u5012\u8fb9\u6405\u62cc\uff0c\u7136\u540e 20 \u79d2\u540e\u5173\u706b \u5c06\u71ac\u597d\u7684\u7cd6\u918b\u6c41\u7528\u52fa\u5b50\u5747\u5300\u5730\u6d47\u5728\u9c7c\u8eab\u4e0a\uff0c\u53ef\u4ee5\u52a0\u70b9\u9999\u83dc\u6216\u8471\u82b1\u70b9\u7f00\uff0c\u7cd6\u918b\u9ca4\u9c7c\u5c31\u505a\u597d\u4e86 \u6211\u8fd9\u91cc\u7684\u7cd6\u918b\u6c41\u71ac\u7684\u6709\u70b9\u7a20\u4e86......","title":"\u64cd\u4f5c"},{"location":"dishes/aquatic/%E7%B3%96%E9%86%8B%E9%B2%A4%E9%B1%BC/%E7%B3%96%E9%86%8B%E9%B2%A4%E9%B1%BC/#_5","text":"\u8fd9\u9053\u83dc\u96be\u5ea6\u7cfb\u6570\u7b97\u4e2d\u7b49\u5427\uff0c\u5bf9\u65b0\u624b\u8fd8\u662f\u4e0d\u592a\u53cb\u597d\u7684...... \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/aquatic/%E9%B3%8A%E9%B1%BC%E7%82%96%E8%B1%86%E8%85%90/%E9%B3%8A%E9%B1%BC%E7%82%96%E8%B1%86%E8%85%90/","text":"\u9cca\u9c7c\u7096\u8c46\u8150\u7684\u505a\u6cd5 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u9cca\u9c7c\uff08\u9c7c\u53ef\u4ee5\u8ba9\u644a\u4e3b\u5e2e\u4f60\u5904\u7406\u597d\uff09 \u8001\u8c46\u8150 \u59dc \u8471 \u849c \u8001\u62bd \u6842\u76ae\uff08\u53ef\u9009\uff09 \u51b0\u7cd6 \u5e72\u8fa3\u6912\uff08\u4e0d\u5403\u8fa3\u53ef\u4ee5\u4e0d\u653e\uff09 \u6599\u9152 \u751f\u62bd \u76d0 \u516b\u89d2\uff08\u53ef\u9009\uff09 \u9999\u53f6\uff08\u53ef\u9009\uff09 \u70ed\u6c34 \u8ba1\u7b97 \u6ce8\uff1a\u8fd9\u4e2a\u91cf\u5927\u6982\u662f 2-3 \u4e2a\u4eba\u7684\u91cf \u6bcf\u4efd\uff1a \u9cca\u9c7c\uff1a550 \u514b\uff08\u4e00\u65a4\u5de6\u53f3\uff09 \u8001\u8c46\u8150\uff1a400 \u514b \u59dc\uff1a5 \u7247 \u8471\uff1a\u534a\u6839\uff0850 \u514b\uff09 \u849c\uff1a4 \u4e2a \u8001\u62bd\uff1a2ml\uff08\u4e0d\u592a\u559c\u6b22\u91cd\u53e3\u7684\u53ef\u4ee5\u4e0d\u653e\uff09 \u6842\u76ae\uff1a1 \u5757 \u51b0\u7cd6\uff1a5 \u5757 \u5e72\u8fa3\u6912\uff1a4-6 \u4e2a\uff08\u6839\u636e\u4e2a\u4eba\u53e3\u5473\u9009\u62e9\uff09 \u6599\u9152\uff1a5ml \u751f\u62bd\uff1a4ml \u76d0\uff1a5-8 \u514b\uff08\u6839\u636e\u4e2a\u4eba\u53e3\u5473\u9009\u62e9\uff09 \u516b\u89d2\uff1a1 \u4e2a \u9999\u53f6\uff1a1-3 \u7247 \u98df\u7528\u6cb9\uff1a10ml \u70ed\u6c34\uff1a400 \u514b \u64cd\u4f5c \u9cca\u9c7c\u6539\u5200,\u653e\u4e0a\u59dc\u7247\u548c\u6599\u9152\u814c\u5236 5-10 \u5206\u949f \u8001\u8c46\u8150\u5207\u5757\u540e\u653e\u5165\u6c34\u4e2d\u5907\u7528 \u9505\u4e2d\u52a0\u6cb9\uff0c\u53ef\u4ee5\u653e\u70b9\u76d0\u5728\u9505\u91cc\uff0c\u9632\u6b62\u714e\u9c7c\u7684\u65f6\u5019\u7c98\u9505\uff0c\u628a\u814c\u5236\u7684\u9c7c\u7528\u53a8\u623f\u7eb8\u64e6\u5e72\u6c34\u5206\uff0c\u628a\u9c7c\u653e\u5230\u9505\u4e2d\uff0c\u4e24\u9762\u90fd\u714e\u4e00\u4e0b \u7b49\u4e24\u9762\u90fd\u714e\u597d\u65f6\uff0c\u628a\u9c7c\u63a8\u5411\u9505\u8fb9\u4e00\u70b9\uff0c\u7559\u70b9\u7a7a\u95f4\u653e\u5165\u8471\u59dc\u849c\uff0c\u5e72\u8fa3\u6912\uff0c\u9999\u53f6\uff0c\u516b\u89d2\u7092\u51fa\u5473\u9053 \u7092\u51fa\u4f50\u6599\u9999\u5473\u540e\uff0c\u52a0\u5165\u6599\u9152\uff0c\u751f\u62bd\uff0c\u8001\u62bd\uff0c\u51b0\u7cd6\uff0c\u6842\u76ae\uff0c\u5012\u5165\u70ed\u6c34\uff0c\u6c34\u91cf\u548c\u9c7c\u5e73\u9f50\u6216\u8005\u5c11\u70b9 \u5927\u706b\u70e7\u5f00\u540e\uff0c\u653e\u5165\u8001\u8c46\u8150\uff0c\u8c46\u8150\u8d34\u5728\u9505\u8fb9\uff0c\u52a0\u5165\u98df\u76d0\uff0c\u8f6c\u5c0f\u706b \u5c0f\u706b\u70e7 10-15 \u5206\u949f\uff0c\u7136\u540e\u5927\u706b\u6536\u70b9\u6c41\uff0c\u5373\u53ef\u51fa\u9505 \u9644\u52a0\u5185\u5bb9 \u9c7c\u7684\u4e24\u9762\uff0c\u5404\u714e 2-4 \u5206\u949f\u5373\u53ef \u714e\u9c7c\u7684\u65f6\u5019\u5168\u7a0b\u4e2d\u5c0f\u706b \u6700\u540e\u51fa\u9505\u65f6\uff0c\u52a0\u5165\u4e00\u4e9b\u5207\u788e\u7684\u5927\u849c\uff0c\u5473\u9053\u4f1a\u66f4\u597d \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9cca\u9c7c\u7096\u8c46\u8150"},{"location":"dishes/aquatic/%E9%B3%8A%E9%B1%BC%E7%82%96%E8%B1%86%E8%85%90/%E9%B3%8A%E9%B1%BC%E7%82%96%E8%B1%86%E8%85%90/#_1","text":"","title":"\u9cca\u9c7c\u7096\u8c46\u8150\u7684\u505a\u6cd5"},{"location":"dishes/aquatic/%E9%B3%8A%E9%B1%BC%E7%82%96%E8%B1%86%E8%85%90/%E9%B3%8A%E9%B1%BC%E7%82%96%E8%B1%86%E8%85%90/#_2","text":"\u9cca\u9c7c\uff08\u9c7c\u53ef\u4ee5\u8ba9\u644a\u4e3b\u5e2e\u4f60\u5904\u7406\u597d\uff09 \u8001\u8c46\u8150 \u59dc \u8471 \u849c \u8001\u62bd \u6842\u76ae\uff08\u53ef\u9009\uff09 \u51b0\u7cd6 \u5e72\u8fa3\u6912\uff08\u4e0d\u5403\u8fa3\u53ef\u4ee5\u4e0d\u653e\uff09 \u6599\u9152 \u751f\u62bd \u76d0 \u516b\u89d2\uff08\u53ef\u9009\uff09 \u9999\u53f6\uff08\u53ef\u9009\uff09 \u70ed\u6c34","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/aquatic/%E9%B3%8A%E9%B1%BC%E7%82%96%E8%B1%86%E8%85%90/%E9%B3%8A%E9%B1%BC%E7%82%96%E8%B1%86%E8%85%90/#_3","text":"\u6ce8\uff1a\u8fd9\u4e2a\u91cf\u5927\u6982\u662f 2-3 \u4e2a\u4eba\u7684\u91cf \u6bcf\u4efd\uff1a \u9cca\u9c7c\uff1a550 \u514b\uff08\u4e00\u65a4\u5de6\u53f3\uff09 \u8001\u8c46\u8150\uff1a400 \u514b \u59dc\uff1a5 \u7247 \u8471\uff1a\u534a\u6839\uff0850 \u514b\uff09 \u849c\uff1a4 \u4e2a \u8001\u62bd\uff1a2ml\uff08\u4e0d\u592a\u559c\u6b22\u91cd\u53e3\u7684\u53ef\u4ee5\u4e0d\u653e\uff09 \u6842\u76ae\uff1a1 \u5757 \u51b0\u7cd6\uff1a5 \u5757 \u5e72\u8fa3\u6912\uff1a4-6 \u4e2a\uff08\u6839\u636e\u4e2a\u4eba\u53e3\u5473\u9009\u62e9\uff09 \u6599\u9152\uff1a5ml \u751f\u62bd\uff1a4ml \u76d0\uff1a5-8 \u514b\uff08\u6839\u636e\u4e2a\u4eba\u53e3\u5473\u9009\u62e9\uff09 \u516b\u89d2\uff1a1 \u4e2a \u9999\u53f6\uff1a1-3 \u7247 \u98df\u7528\u6cb9\uff1a10ml \u70ed\u6c34\uff1a400 \u514b","title":"\u8ba1\u7b97"},{"location":"dishes/aquatic/%E9%B3%8A%E9%B1%BC%E7%82%96%E8%B1%86%E8%85%90/%E9%B3%8A%E9%B1%BC%E7%82%96%E8%B1%86%E8%85%90/#_4","text":"\u9cca\u9c7c\u6539\u5200,\u653e\u4e0a\u59dc\u7247\u548c\u6599\u9152\u814c\u5236 5-10 \u5206\u949f \u8001\u8c46\u8150\u5207\u5757\u540e\u653e\u5165\u6c34\u4e2d\u5907\u7528 \u9505\u4e2d\u52a0\u6cb9\uff0c\u53ef\u4ee5\u653e\u70b9\u76d0\u5728\u9505\u91cc\uff0c\u9632\u6b62\u714e\u9c7c\u7684\u65f6\u5019\u7c98\u9505\uff0c\u628a\u814c\u5236\u7684\u9c7c\u7528\u53a8\u623f\u7eb8\u64e6\u5e72\u6c34\u5206\uff0c\u628a\u9c7c\u653e\u5230\u9505\u4e2d\uff0c\u4e24\u9762\u90fd\u714e\u4e00\u4e0b \u7b49\u4e24\u9762\u90fd\u714e\u597d\u65f6\uff0c\u628a\u9c7c\u63a8\u5411\u9505\u8fb9\u4e00\u70b9\uff0c\u7559\u70b9\u7a7a\u95f4\u653e\u5165\u8471\u59dc\u849c\uff0c\u5e72\u8fa3\u6912\uff0c\u9999\u53f6\uff0c\u516b\u89d2\u7092\u51fa\u5473\u9053 \u7092\u51fa\u4f50\u6599\u9999\u5473\u540e\uff0c\u52a0\u5165\u6599\u9152\uff0c\u751f\u62bd\uff0c\u8001\u62bd\uff0c\u51b0\u7cd6\uff0c\u6842\u76ae\uff0c\u5012\u5165\u70ed\u6c34\uff0c\u6c34\u91cf\u548c\u9c7c\u5e73\u9f50\u6216\u8005\u5c11\u70b9 \u5927\u706b\u70e7\u5f00\u540e\uff0c\u653e\u5165\u8001\u8c46\u8150\uff0c\u8c46\u8150\u8d34\u5728\u9505\u8fb9\uff0c\u52a0\u5165\u98df\u76d0\uff0c\u8f6c\u5c0f\u706b \u5c0f\u706b\u70e7 10-15 \u5206\u949f\uff0c\u7136\u540e\u5927\u706b\u6536\u70b9\u6c41\uff0c\u5373\u53ef\u51fa\u9505","title":"\u64cd\u4f5c"},{"location":"dishes/aquatic/%E9%B3%8A%E9%B1%BC%E7%82%96%E8%B1%86%E8%85%90/%E9%B3%8A%E9%B1%BC%E7%82%96%E8%B1%86%E8%85%90/#_5","text":"\u9c7c\u7684\u4e24\u9762\uff0c\u5404\u714e 2-4 \u5206\u949f\u5373\u53ef \u714e\u9c7c\u7684\u65f6\u5019\u5168\u7a0b\u4e2d\u5c0f\u706b \u6700\u540e\u51fa\u9505\u65f6\uff0c\u52a0\u5165\u4e00\u4e9b\u5207\u788e\u7684\u5927\u849c\uff0c\u5473\u9053\u4f1a\u66f4\u597d \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/aquatic/%E9%BB%84%E6%B2%B9%E7%85%8E%E8%99%BE/%E9%BB%84%E6%B2%B9%E7%85%8E%E8%99%BE/","text":"\u9ec4\u6cb9\u714e\u867e\u7684\u505a\u6cd5 \u9ec4\u6cb9\u714e\u867e\u662f\u4e00\u9053\u5236\u4f5c\u76f8\u5bf9\u7b80\u5355\u3001\u98ce\u5473\u6781\u4f73\u7684\u83dc\u5f0f\uff0c\u4e3b\u8981\u8017\u65f6\u5728\u4e8e\u5904\u7406\u6d3b\u867e\uff0c\u603b\u8017\u65f6\u5728\u4e00\u4e2a\u5c0f\u65f6\u5185\uff0c\u9002\u5408\u521d\u5b66\u8005\u8fdb\u884c\u70f9\u996a\u3002 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u9c9c\u867e\uff08\u5f3a\u63a8\u8089\u8d28\u7d27\u5b9e\u7684\u4e5d\u8282\u867e\uff0c\u666e\u901a\u660e\u867e\u4e5f\u53ef\u4ee5\uff09 \u9ec4\u6cb9\uff08\u63a8\u8350\u5b89\u4f73\uff0c\u4e00\u6b21\u7528\u4e00\u5c0f\u76d2 7g\uff09 \u9ed1\u80e1\u6912\u7c92\uff08\u74f6\u78e8\u7684\u90a3\u79cd\uff09 \u751f\u62bd \u76d0 \u767d\u7cd6 \u7c73\u9152 \u8ba1\u7b97 \u6bcf\u4efd\uff1a \u9c9c\u867e 300g \u9ec4\u6cb9 7g \u9ed1\u80e1\u6912\u7c92 \u5927\u6982 15ml \u98df\u7528\u6cb9 45ml \u751f\u62bd 10ml \u7c73\u9152 5ml \u767d\u7cd6 10ml \u76d0 2.5ml \u64cd\u4f5c \u9c9c\u867e\u6458\u9664\u5934\u90e8\uff0c\u987a\u5e26\u626f\u51fa\u867e\u7ebf\uff08\u8fd9\u6b65\u5904\u7406\u4e0d\u597d\u53ef\u5728\u4e0b\u4e00\u6b65\u5f00\u80cc\u65f6\u53d6\u51fa\u867e\u7ebf\uff09\uff0c\u4f7f\u7528\u526a\u5200\u526a\u5f00\u6216\u83dc\u5200\u7247\u5f00\u867e\u80cc\uff0c\u6ca5\u5e72\u6c34\u5206\u5907\u7528 \u8c03\u5236\u9171\u6c41\uff1a\u5c0f\u7897\u653e\u5165\u4e0a\u8ff0\u91cf\u7684\u5168\u90e8\u751f\u62bd\u3001\u7c73\u9152\u3001\u767d\u7cd6\u3001\u76d0\u6405\u5300\u5907\u7528 \u4e2d\u5927\u706b\u70ed\u9505\uff0c\u70ed\u9505\u5185\u653e\u5165\u98df\u7528\u6cb9\uff0c\u7b49\u5f85 10 \u79d2\u8ba9\u6cb9\u6e29\u5347\u9ad8 \u867e\u5168\u90e8\u653e\u5165\u9505\u4e2d\uff0c\u5f00\u59cb\u74f6\u78e8\u9ed1\u80e1\u6912\uff0c\u5747\u5300\u5730\u6492\u5728\u867e\u4e0a\u7ffb\u7092 \u867e\u53d8\u8272\u540e\u52a0\u5165\u9ec4\u6cb9\uff0c\u9ec4\u6cb9\u5b8c\u5168\u878d\u5316\u540e\u5012\u5165\u8c03\u5236\u9171\u6c41\uff0c\u7ee7\u7eed\u7ffb\u7092 \u5927\u706b\u7ffb\u7092 15 \u79d2\u5de6\u53f3\u6536\u6c41\u5373\u53ef\u88c5\u76d8 \u9644\u52a0\u5185\u5bb9 \u867e\u5f00\u80cc\u624d\u66f4\u597d\u5165\u5473\uff0c\u4e0d\u8fc7\u5904\u7406\u65f6\u5207\u8bb0\u5207\u8bb0\u5c0f\u5fc3\u7528\u5200\uff0c\u65b0\u624b\u5bb9\u6613\u4f24\u5230\u624b \u51af\u5c0f\u53a8\u7684\u83dc\u8c31 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9ec4\u6cb9\u714e\u867e"},{"location":"dishes/aquatic/%E9%BB%84%E6%B2%B9%E7%85%8E%E8%99%BE/%E9%BB%84%E6%B2%B9%E7%85%8E%E8%99%BE/#_1","text":"\u9ec4\u6cb9\u714e\u867e\u662f\u4e00\u9053\u5236\u4f5c\u76f8\u5bf9\u7b80\u5355\u3001\u98ce\u5473\u6781\u4f73\u7684\u83dc\u5f0f\uff0c\u4e3b\u8981\u8017\u65f6\u5728\u4e8e\u5904\u7406\u6d3b\u867e\uff0c\u603b\u8017\u65f6\u5728\u4e00\u4e2a\u5c0f\u65f6\u5185\uff0c\u9002\u5408\u521d\u5b66\u8005\u8fdb\u884c\u70f9\u996a\u3002","title":"\u9ec4\u6cb9\u714e\u867e\u7684\u505a\u6cd5"},{"location":"dishes/aquatic/%E9%BB%84%E6%B2%B9%E7%85%8E%E8%99%BE/%E9%BB%84%E6%B2%B9%E7%85%8E%E8%99%BE/#_2","text":"\u9c9c\u867e\uff08\u5f3a\u63a8\u8089\u8d28\u7d27\u5b9e\u7684\u4e5d\u8282\u867e\uff0c\u666e\u901a\u660e\u867e\u4e5f\u53ef\u4ee5\uff09 \u9ec4\u6cb9\uff08\u63a8\u8350\u5b89\u4f73\uff0c\u4e00\u6b21\u7528\u4e00\u5c0f\u76d2 7g\uff09 \u9ed1\u80e1\u6912\u7c92\uff08\u74f6\u78e8\u7684\u90a3\u79cd\uff09 \u751f\u62bd \u76d0 \u767d\u7cd6 \u7c73\u9152","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/aquatic/%E9%BB%84%E6%B2%B9%E7%85%8E%E8%99%BE/%E9%BB%84%E6%B2%B9%E7%85%8E%E8%99%BE/#_3","text":"\u6bcf\u4efd\uff1a \u9c9c\u867e 300g \u9ec4\u6cb9 7g \u9ed1\u80e1\u6912\u7c92 \u5927\u6982 15ml \u98df\u7528\u6cb9 45ml \u751f\u62bd 10ml \u7c73\u9152 5ml \u767d\u7cd6 10ml \u76d0 2.5ml","title":"\u8ba1\u7b97"},{"location":"dishes/aquatic/%E9%BB%84%E6%B2%B9%E7%85%8E%E8%99%BE/%E9%BB%84%E6%B2%B9%E7%85%8E%E8%99%BE/#_4","text":"\u9c9c\u867e\u6458\u9664\u5934\u90e8\uff0c\u987a\u5e26\u626f\u51fa\u867e\u7ebf\uff08\u8fd9\u6b65\u5904\u7406\u4e0d\u597d\u53ef\u5728\u4e0b\u4e00\u6b65\u5f00\u80cc\u65f6\u53d6\u51fa\u867e\u7ebf\uff09\uff0c\u4f7f\u7528\u526a\u5200\u526a\u5f00\u6216\u83dc\u5200\u7247\u5f00\u867e\u80cc\uff0c\u6ca5\u5e72\u6c34\u5206\u5907\u7528 \u8c03\u5236\u9171\u6c41\uff1a\u5c0f\u7897\u653e\u5165\u4e0a\u8ff0\u91cf\u7684\u5168\u90e8\u751f\u62bd\u3001\u7c73\u9152\u3001\u767d\u7cd6\u3001\u76d0\u6405\u5300\u5907\u7528 \u4e2d\u5927\u706b\u70ed\u9505\uff0c\u70ed\u9505\u5185\u653e\u5165\u98df\u7528\u6cb9\uff0c\u7b49\u5f85 10 \u79d2\u8ba9\u6cb9\u6e29\u5347\u9ad8 \u867e\u5168\u90e8\u653e\u5165\u9505\u4e2d\uff0c\u5f00\u59cb\u74f6\u78e8\u9ed1\u80e1\u6912\uff0c\u5747\u5300\u5730\u6492\u5728\u867e\u4e0a\u7ffb\u7092 \u867e\u53d8\u8272\u540e\u52a0\u5165\u9ec4\u6cb9\uff0c\u9ec4\u6cb9\u5b8c\u5168\u878d\u5316\u540e\u5012\u5165\u8c03\u5236\u9171\u6c41\uff0c\u7ee7\u7eed\u7ffb\u7092 \u5927\u706b\u7ffb\u7092 15 \u79d2\u5de6\u53f3\u6536\u6c41\u5373\u53ef\u88c5\u76d8","title":"\u64cd\u4f5c"},{"location":"dishes/aquatic/%E9%BB%84%E6%B2%B9%E7%85%8E%E8%99%BE/%E9%BB%84%E6%B2%B9%E7%85%8E%E8%99%BE/#_5","text":"\u867e\u5f00\u80cc\u624d\u66f4\u597d\u5165\u5473\uff0c\u4e0d\u8fc7\u5904\u7406\u65f6\u5207\u8bb0\u5207\u8bb0\u5c0f\u5fc3\u7528\u5200\uff0c\u65b0\u624b\u5bb9\u6613\u4f24\u5230\u624b \u51af\u5c0f\u53a8\u7684\u83dc\u8c31 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/breakfast/%E5%90%90%E5%8F%B8%E6%9E%9C%E9%85%B1/","text":"\u5410\u53f8+\u679c\u9171\u7684\u505a\u6cd5 \u9971\u8179\u611f\u7684\u61d2\u4eba\u5feb\u901f\u8425\u517b\u65e9\u9910\uff0c2min \u641e\u5b9a \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u65b0\u9c9c\u5410\u53f8 \u679c\u9171 \u9762\u5305\u673a \u8ba1\u7b97 \u5410\u53f8\u4e24\u7247 \u679c\u9171\u8db3\u591f\u6d82\u6ee1\u4e00\u9762\u571f\u53f8\u7684\u91cf \u64cd\u4f5c \u5c06\u5410\u53f8\u653e\u5165\u9762\u5305\u673a \u8bbe\u7f6e\u597d\u6863\u4f4d,\u65f6\u95f4\u5230\u4e86\u4f1a\u81ea\u52a8\u5f39\u51fa \u4e24\u5206\u949f\u540e\u5410\u53f8\u52a0\u70ed\u5b8c\u6210\u5f39\u51fa \u5148\u53d6\u51fa\u4e00\u7247\u5410\u53f8,\u6d82\u6ee1\u679c\u9171\u518d\u76d6\u4e0a\u53e6\u4e00\u7247\u5410\u53f8\u5373\u53ef \u7528\u9910\u5dfe\u7eb8\u5305\u4e00\u4e0b\u53ef\u4ee5\u8fb9\u8d70\u8fb9\u5403\u4e5f\u53ef\u4ee5\u5403\u5b8c\u518d\u51fa\u95e8 \u4e24\u5206\u949f\u5feb\u901f\u641e\u5b9a,\u64cd\u4f5c\u5f88\u7b80\u5355,\u5473\u9053\u5341\u5206\u7f8e\u5473,\u5341\u5206\u9002\u5408\u7a0b\u5e8f\u5458\u3002\u8017\u65f6\u77ed,\u4e0d\u4f1a\u4ea7\u751f\u989d\u5916\u5783\u573e,\u4e5f\u4e0d\u9700\u8981\u6e05\u6d17\u5de5\u5177\u4ec0\u4e48\u7684\u3002 \u9644\u52a0\u5185\u5bb9 \u9762\u5305\u673a\u4e00\u822c\u4e0d\u4f1a\u8d85\u8fc7\u4e00\u767e\u5757,\u5410\u53f8\u53bb\u697c\u4e0b\u8d85\u5e02\u6216\u7f8e\u56e2\u4e70\u83dc\u9001\u4e0a\u95e8,\u4e00\u822c\u4e00\u5305\u5341\u5757\u94b1\u516b\u7247,\u4fdd\u8d28\u671f\u6bd4\u8f83\u77ed,\u5f88\u5e72\u51c0\u536b\u751f\u3002\u8fd9\u91cc\u679c\u9171\u63a8\u4ecb\u4e00\u4e0b\u5c71\u59c6\u8d85\u5e02\u7684\u8349\u8393\u679c\u9171,\u5f88\u751c,\u5b83\u4eec\u5bb6\u7684\u84dd\u8393\u9171\u5012\u662f\u4e00\u822c\u822c,\u53cd\u6b63\u6211\u662f\u611f\u89c9\u6ca1\u5565\u5473\u3002\u5e72\u51c0\u53c8\u536b\u751f\u54e6,\u5144\u5f1f\u4eec\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request\u3002","title":"\u5410\u53f8\u679c\u9171"},{"location":"dishes/breakfast/%E5%90%90%E5%8F%B8%E6%9E%9C%E9%85%B1/#_1","text":"\u9971\u8179\u611f\u7684\u61d2\u4eba\u5feb\u901f\u8425\u517b\u65e9\u9910\uff0c2min \u641e\u5b9a","title":"\u5410\u53f8+\u679c\u9171\u7684\u505a\u6cd5"},{"location":"dishes/breakfast/%E5%90%90%E5%8F%B8%E6%9E%9C%E9%85%B1/#_2","text":"\u65b0\u9c9c\u5410\u53f8 \u679c\u9171 \u9762\u5305\u673a","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/breakfast/%E5%90%90%E5%8F%B8%E6%9E%9C%E9%85%B1/#_3","text":"\u5410\u53f8\u4e24\u7247 \u679c\u9171\u8db3\u591f\u6d82\u6ee1\u4e00\u9762\u571f\u53f8\u7684\u91cf","title":"\u8ba1\u7b97"},{"location":"dishes/breakfast/%E5%90%90%E5%8F%B8%E6%9E%9C%E9%85%B1/#_4","text":"\u5c06\u5410\u53f8\u653e\u5165\u9762\u5305\u673a \u8bbe\u7f6e\u597d\u6863\u4f4d,\u65f6\u95f4\u5230\u4e86\u4f1a\u81ea\u52a8\u5f39\u51fa \u4e24\u5206\u949f\u540e\u5410\u53f8\u52a0\u70ed\u5b8c\u6210\u5f39\u51fa \u5148\u53d6\u51fa\u4e00\u7247\u5410\u53f8,\u6d82\u6ee1\u679c\u9171\u518d\u76d6\u4e0a\u53e6\u4e00\u7247\u5410\u53f8\u5373\u53ef \u7528\u9910\u5dfe\u7eb8\u5305\u4e00\u4e0b\u53ef\u4ee5\u8fb9\u8d70\u8fb9\u5403\u4e5f\u53ef\u4ee5\u5403\u5b8c\u518d\u51fa\u95e8 \u4e24\u5206\u949f\u5feb\u901f\u641e\u5b9a,\u64cd\u4f5c\u5f88\u7b80\u5355,\u5473\u9053\u5341\u5206\u7f8e\u5473,\u5341\u5206\u9002\u5408\u7a0b\u5e8f\u5458\u3002\u8017\u65f6\u77ed,\u4e0d\u4f1a\u4ea7\u751f\u989d\u5916\u5783\u573e,\u4e5f\u4e0d\u9700\u8981\u6e05\u6d17\u5de5\u5177\u4ec0\u4e48\u7684\u3002","title":"\u64cd\u4f5c"},{"location":"dishes/breakfast/%E5%90%90%E5%8F%B8%E6%9E%9C%E9%85%B1/#_5","text":"\u9762\u5305\u673a\u4e00\u822c\u4e0d\u4f1a\u8d85\u8fc7\u4e00\u767e\u5757,\u5410\u53f8\u53bb\u697c\u4e0b\u8d85\u5e02\u6216\u7f8e\u56e2\u4e70\u83dc\u9001\u4e0a\u95e8,\u4e00\u822c\u4e00\u5305\u5341\u5757\u94b1\u516b\u7247,\u4fdd\u8d28\u671f\u6bd4\u8f83\u77ed,\u5f88\u5e72\u51c0\u536b\u751f\u3002\u8fd9\u91cc\u679c\u9171\u63a8\u4ecb\u4e00\u4e0b\u5c71\u59c6\u8d85\u5e02\u7684\u8349\u8393\u679c\u9171,\u5f88\u751c,\u5b83\u4eec\u5bb6\u7684\u84dd\u8393\u9171\u5012\u662f\u4e00\u822c\u822c,\u53cd\u6b63\u6211\u662f\u611f\u89c9\u6ca1\u5565\u5473\u3002\u5e72\u51c0\u53c8\u536b\u751f\u54e6,\u5144\u5f1f\u4eec\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request\u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/breakfast/%E5%A4%AA%E9%98%B3%E8%9B%8B/","text":"\u592a\u9633\u86cb\u7684\u505a\u6cd5 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u9e21\u86cb \u76d0 \u6cb9 \u5206\u53ef\u63a7\u706b\u5019\u5fae\u6ce2\u7089\u6216\u4e0d\u53ef\u63a7\u706b\u5019\u5fae\u6ce2\u7089\uff08\u5b9a\u4e49\u548c\u5206\u8fa8\u65b9\u5f0f\u8bf7\u89c1\u9644\u52a0\u5185\u5bb9\uff09 \u7b77\u5b50\u6216\u7259\u7b7e \u8ba1\u7b97 \u9e21\u86cb\u7684\u7528\u91cf\u4e3a 1 \u4e2a\u3002 \u76d0\u7684\u7528\u91cf\u4e3a \u9e21\u86cb\u7684\u4e2a\u6570 - 1g\u3002 \u6cb9\u7684\u7528\u91cf\u4e3a \u9e21\u86cb\u7684\u4e2a\u6570 - 5ml\u3002 \u4f7f\u7528\u4e0a\u8ff0\u6761\u4ef6\uff0c\u8ba1\u7b97\u51fa\u8ba1\u5212\u4f7f\u7528\u7684\u539f\u6750\u6599\u6bd4\u4f8b\u3002 \u64cd\u4f5c \u53ef\u63a7\u706b\u5019\u5fae\u6ce2\u7089 \u51c6\u5907\u4e00\u4e2a\u5c0f\u7897\uff0c\u5012\u5165\u5728\u4e0a\u4e00\u6b65\u8ba1\u7b97\u597d\u7684\u6cb9\uff0c\u6492\u76d0\uff0c\u6405\u62cc\u5747\u5300\u3002\u503e\u659c\u7897\u4f7f\u6cb9\u6cbe\u5728\u7897\u8868\u9762\u3002 \u53d6\u51fa\u4e00\u4e2a\u9e21\u86cb\uff0c\u6253\u5165\u5c0f\u7897\u3002 \u86cb\u9ec4\u8868\u9762\u6233\u5b54\u3002\u7259\u7b7e\u6233 5 \u4e2a\u6216\u7b77\u5b50\u6233 1 \u4e2a\u3002 \u653e\u5165\u5fae\u6ce2\u7089\uff0c\u4e2d\u706b 3min\u3002 \u4e0d\u53ef\u63a7\u706b\u5019\u5fae\u6ce2\u7089 \u51c6\u5907\u4e00\u4e2a\u5c0f\u7897\uff0c\u5012\u5165\u5728\u4e0a\u4e00\u6b65\u8ba1\u7b97\u597d\u7684\u6cb9\uff0c\u6492\u76d0\uff0c\u6405\u62cc\u5747\u5300\u3002\u503e\u659c\u7897\u4f7f\u6cb9\u6cbe\u5728\u7897\u8868\u9762\u3002 \u53d6\u51fa\u4e00\u4e2a\u9e21\u86cb\uff0c\u6253\u5165\u5c0f\u7897\u3002 \u86cb\u9ec4\u8868\u9762\u6233\u5b54\u3002\u7259\u7b7e\u6233 5 \u4e2a\u6216\u7b77\u5b50\u6233 1 \u4e2a\u3002 \u653e\u5165\u5fae\u6ce2\u7089\uff0c1min\u3002 while\uff08\u592a\u9633\u86cb \u5426 \u5927\u9762\u79ef\u6210\u56fa\u4f53\u72b6\uff09 \u7528\u5fae\u6ce2\u7089\u6253(30s); \u9644\u52a0\u5185\u5bb9 while\uff08\u592a\u9633\u86cb\u7684\u719f\u5ea6 \u4e0d\u7b26\u5408 \u4e2a\u4eba\u53e3\u5473\uff09 \u7528\u5fae\u6ce2\u7089\u6253(1min); \u4e0d\u53ef\u63a7\u706b\u5019\u5fae\u6ce2\u7089\uff1a \u5b9a\u4e49\uff1a \u5373\u65e0\u6cd5\u63a7\u5236\u706b\u5019\u4ec5\u80fd\u63a7\u5236\u65f6\u957f\u7684\u5fae\u6ce2\u7089\u3002 \u8fa8\u522b\u65b9\u6cd5\uff1a \u82e5\u5728\u5fae\u6ce2\u7089\u64cd\u4f5c\u9762\u677f\u4e0a\u65e0\u6cd5\u627e\u5230\u5c0f\u706b\uff0c\u4e2d\u706b\uff0c \u5927\u706b\u7b49\u5b57\u6837\u5373\u4e3a\u4e0d\u53ef\u63a7\u706b\u5019\u5fae\u6ce2\u7089 \u53ef\u63a7\u706b\u5019\u5fae\u6ce2\u7089\uff1a \u5b9a\u4e49\uff1a\u5373\u80fd\u63a7\u5236\u706b\u5019\u53c8\u80fd\u63a7\u5236\u65f6\u957f\u7684\u5fae\u6ce2\u7089\uff0c \u8fa8\u522b\u65b9\u6cd5\uff1a \u82e5\u5728\u5fae\u6ce2\u7089\u64cd\u4f5c\u9762\u677f\u4e0a\u80fd\u627e\u5230\u5c0f\u706b\uff0c\u4e2d\u706b\uff0c\u5927\u706b\u7b49\u5b57\u6837\u5373\u4e3a\u53ef\u63a7\u706b\u5019\u5fae\u6ce2\u7089 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request\u3002","title":"\u592a\u9633\u86cb"},{"location":"dishes/breakfast/%E5%A4%AA%E9%98%B3%E8%9B%8B/#_1","text":"","title":"\u592a\u9633\u86cb\u7684\u505a\u6cd5"},{"location":"dishes/breakfast/%E5%A4%AA%E9%98%B3%E8%9B%8B/#_2","text":"\u9e21\u86cb \u76d0 \u6cb9 \u5206\u53ef\u63a7\u706b\u5019\u5fae\u6ce2\u7089\u6216\u4e0d\u53ef\u63a7\u706b\u5019\u5fae\u6ce2\u7089\uff08\u5b9a\u4e49\u548c\u5206\u8fa8\u65b9\u5f0f\u8bf7\u89c1\u9644\u52a0\u5185\u5bb9\uff09 \u7b77\u5b50\u6216\u7259\u7b7e","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/breakfast/%E5%A4%AA%E9%98%B3%E8%9B%8B/#_3","text":"\u9e21\u86cb\u7684\u7528\u91cf\u4e3a 1 \u4e2a\u3002 \u76d0\u7684\u7528\u91cf\u4e3a \u9e21\u86cb\u7684\u4e2a\u6570 - 1g\u3002 \u6cb9\u7684\u7528\u91cf\u4e3a \u9e21\u86cb\u7684\u4e2a\u6570 - 5ml\u3002 \u4f7f\u7528\u4e0a\u8ff0\u6761\u4ef6\uff0c\u8ba1\u7b97\u51fa\u8ba1\u5212\u4f7f\u7528\u7684\u539f\u6750\u6599\u6bd4\u4f8b\u3002","title":"\u8ba1\u7b97"},{"location":"dishes/breakfast/%E5%A4%AA%E9%98%B3%E8%9B%8B/#_4","text":"","title":"\u64cd\u4f5c"},{"location":"dishes/breakfast/%E5%A4%AA%E9%98%B3%E8%9B%8B/#_5","text":"\u51c6\u5907\u4e00\u4e2a\u5c0f\u7897\uff0c\u5012\u5165\u5728\u4e0a\u4e00\u6b65\u8ba1\u7b97\u597d\u7684\u6cb9\uff0c\u6492\u76d0\uff0c\u6405\u62cc\u5747\u5300\u3002\u503e\u659c\u7897\u4f7f\u6cb9\u6cbe\u5728\u7897\u8868\u9762\u3002 \u53d6\u51fa\u4e00\u4e2a\u9e21\u86cb\uff0c\u6253\u5165\u5c0f\u7897\u3002 \u86cb\u9ec4\u8868\u9762\u6233\u5b54\u3002\u7259\u7b7e\u6233 5 \u4e2a\u6216\u7b77\u5b50\u6233 1 \u4e2a\u3002 \u653e\u5165\u5fae\u6ce2\u7089\uff0c\u4e2d\u706b 3min\u3002","title":"\u53ef\u63a7\u706b\u5019\u5fae\u6ce2\u7089"},{"location":"dishes/breakfast/%E5%A4%AA%E9%98%B3%E8%9B%8B/#_6","text":"\u51c6\u5907\u4e00\u4e2a\u5c0f\u7897\uff0c\u5012\u5165\u5728\u4e0a\u4e00\u6b65\u8ba1\u7b97\u597d\u7684\u6cb9\uff0c\u6492\u76d0\uff0c\u6405\u62cc\u5747\u5300\u3002\u503e\u659c\u7897\u4f7f\u6cb9\u6cbe\u5728\u7897\u8868\u9762\u3002 \u53d6\u51fa\u4e00\u4e2a\u9e21\u86cb\uff0c\u6253\u5165\u5c0f\u7897\u3002 \u86cb\u9ec4\u8868\u9762\u6233\u5b54\u3002\u7259\u7b7e\u6233 5 \u4e2a\u6216\u7b77\u5b50\u6233 1 \u4e2a\u3002 \u653e\u5165\u5fae\u6ce2\u7089\uff0c1min\u3002 while\uff08\u592a\u9633\u86cb \u5426 \u5927\u9762\u79ef\u6210\u56fa\u4f53\u72b6\uff09 \u7528\u5fae\u6ce2\u7089\u6253(30s);","title":"\u4e0d\u53ef\u63a7\u706b\u5019\u5fae\u6ce2\u7089"},{"location":"dishes/breakfast/%E5%A4%AA%E9%98%B3%E8%9B%8B/#_7","text":"while\uff08\u592a\u9633\u86cb\u7684\u719f\u5ea6 \u4e0d\u7b26\u5408 \u4e2a\u4eba\u53e3\u5473\uff09 \u7528\u5fae\u6ce2\u7089\u6253(1min); \u4e0d\u53ef\u63a7\u706b\u5019\u5fae\u6ce2\u7089\uff1a \u5b9a\u4e49\uff1a \u5373\u65e0\u6cd5\u63a7\u5236\u706b\u5019\u4ec5\u80fd\u63a7\u5236\u65f6\u957f\u7684\u5fae\u6ce2\u7089\u3002 \u8fa8\u522b\u65b9\u6cd5\uff1a \u82e5\u5728\u5fae\u6ce2\u7089\u64cd\u4f5c\u9762\u677f\u4e0a\u65e0\u6cd5\u627e\u5230\u5c0f\u706b\uff0c\u4e2d\u706b\uff0c \u5927\u706b\u7b49\u5b57\u6837\u5373\u4e3a\u4e0d\u53ef\u63a7\u706b\u5019\u5fae\u6ce2\u7089 \u53ef\u63a7\u706b\u5019\u5fae\u6ce2\u7089\uff1a \u5b9a\u4e49\uff1a\u5373\u80fd\u63a7\u5236\u706b\u5019\u53c8\u80fd\u63a7\u5236\u65f6\u957f\u7684\u5fae\u6ce2\u7089\uff0c \u8fa8\u522b\u65b9\u6cd5\uff1a \u82e5\u5728\u5fae\u6ce2\u7089\u64cd\u4f5c\u9762\u677f\u4e0a\u80fd\u627e\u5230\u5c0f\u706b\uff0c\u4e2d\u706b\uff0c\u5927\u706b\u7b49\u5b57\u6837\u5373\u4e3a\u53ef\u63a7\u706b\u5019\u5fae\u6ce2\u7089 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request\u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/breakfast/%E5%BE%AE%E6%B3%A2%E7%82%89%E8%9B%8B%E7%B3%95/","text":"\u5fae\u6ce2\u7089\"\u53ee\"\u86cb\u7cd5\u7684\u505a\u6cd5 \u4e0d\u5fc5\u614c\u5f20, \u4f60\u6709\u5341\u5206\u5145\u8db3\u7684\u65f6\u95f4\u6765\u51c6\u5907, \u53ef\u4ee5\u6839\u636e\u5fc3\u60c5\u52a0\u6599, \u5927\u7ea6\u9700\u8981 2min \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u5fae\u6ce2\u7089 \u80fd\u653e\u8fdb\u5fae\u6ce2\u7089\u7684\u5bb9\u5668 \u9ec4\u6cb9 \u9762\u7c89 \u6ce1\u6253\u7c89\uff08\u4e0d\u52a0\u5403\u7740\u50cf\u997c\uff09 \u9e21\u86cb \u8ba1\u7b97 \u9e21\u86cb\ud83e\udd5a 1 \u4e2a \u9762\u7c89\ud83c\udf5a 15g \u6ce1\u6253\u7c89\ud83c\udf5a 2.5g \u767d\uff08\u7ea2\uff09\u7cd6\ud83c\udf6c 10g \u76d0\ud83e\uddc2 1g \uff08\u53e3\u5473\u53ef\u9009\uff09 \u5496\u5561\u7c89\u2615 \u5de7\u514b\u529b\ud83c\udf6b \u9ea6\u7247\ud83c\udf7f \u725b\u5976\ud83e\udd5b \u575a\u679c\ud83e\udd5c \u997c\u5e72\u5c51\ud83c\udf6a \u9999\u8549\ud83c\udf4c \u975e\u9ed1\u6697\u6599\u7406\ud83c\udf46 \u64cd\u4f5c \u52a0\u5165\u4ee5\u4e0b\u98df\u6750\uff0c\u6ce8\u610f\u4e0d\u8981\u8d85\u8fc7\u5bb9\u5668\u7684 3/4 \u6316\u534a\u4e2a\u9e21\u86cb\u5927\u7684\u9ec4\u6cb9\u653e\u8fdb\u5bb9\u5668, \u5728\u5fae\u6ce2\u7089 \u52a0\u70ed 15 \u79d2\u5de6\u53f3 \u81f3\u878d\u5316 \u5c06 \u5de7\u514b\u529b/\u9999\u8549 \u878d\u5316/\u6405\u788e\u6210 \u9897\u7c92/\u7cca\u72b6 \u6253\u5165\u4e00\u4e2a\u9e21\u86cb\u5e76\u6253\u6563\u6405\u548c 15g \u767d\uff08\u7ea2\uff09\u7cd6\uff08\u751c\u515a\u53ef\u4ee5\u591a\u52a0\u4e9b\uff09 \uff08\u89c1\u9644 4\uff09 \u52a0\u5165 1g \u76d0 ( \u5982\u679c\u540e\u7eed\u7684\u53e3\u5473\u98df\u6750\u542b\u76d0\u9700\u81ea\u5df1\u659f\u914c ) \u52a0\u5165 2.5g \u6ce1\u6253\u7c89 \u52a0\u5165 15g \u9762\u7c89\uff08\u7b4b\u5ea6\u6ca1\u592a\u5927\u5f71\u54cd\uff09 \u52a0\u5165\u4efb\u4f55\u559c\u6b22\u7684\u53e3\u5473\u98df\u6750! \uff08\u575a\u679c\u4e0e\u997c\u5e72\u7b49\u5e72\u98df\u6750\u4e0d\u662f\u73b0\u5728\u653e\uff09 \u6405\u548c\u81f3\u770b\u4e0d\u89c1\u5e72\u7c89\u7684\u7a20\u9178\u5976\u72b6 \u52a0\u5165\u53ef\u9009\u7684\u5e72\u71e5\u98df\u6750\uff08\u4e0d\u5305\u62ec\u51b2\u6ce1\u7c89\uff09\u5728\u9876\u7aef \u5938\u8d5e\u4e00\u4e0b\u81ea\u5df1\ud83e\udd70 \u5fae\u6ce2\u7089\uff08\u9ad8\u706b\uff09\u52a0\u70ed 1\u5206\u949f \uff08\u81f3\u84ec\u677e\u86cb\u7cd5\u5f62\u6001\uff09 \u53d6\u51fa\u676f\u5b50\uff08\u70eb\u624b\u554a\u554a\u554a\u554a\u2191\uff09\u5e76\u62cd\u670b\u53cb\u5708\u5c31\u53ef\u4ee5\u5403\u4e86 \u9644\u52a0\u5185\u5bb9 \u5728\u5938\u8d5e\u81ea\u5df1\u4e4b\u524d\u7684\u64cd\u4f5c\u53ef\u4ee5\u91cd\u590d\u591a\u904d\u505a\u51fa\u66f4\u5927\u7684\u86cb\u7cd5 \u6ce1\u6253\u7c89\u7528\u6765\u8ba9\u86cb\u7cd5\u66f4\u84ec\u677e \u5927\u591a\u4e0d\u542b\u94dd \u51e0\u5757\u94b1\u4e00\u5305 \u53ef\u4ee5\u4e70\u4e86\u5728\u5bb6\u5907\u7740 \u98df\u6750\u4e0d\u8981\u8d85\u8fc7\u5bb9\u5668\u76843/4!! \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request\u3002","title":"\u5fae\u6ce2\u7089\u86cb\u7cd5"},{"location":"dishes/breakfast/%E5%BE%AE%E6%B3%A2%E7%82%89%E8%9B%8B%E7%B3%95/#_1","text":"\u4e0d\u5fc5\u614c\u5f20, \u4f60\u6709\u5341\u5206\u5145\u8db3\u7684\u65f6\u95f4\u6765\u51c6\u5907, \u53ef\u4ee5\u6839\u636e\u5fc3\u60c5\u52a0\u6599, \u5927\u7ea6\u9700\u8981 2min","title":"\u5fae\u6ce2\u7089\"\u53ee\"\u86cb\u7cd5\u7684\u505a\u6cd5"},{"location":"dishes/breakfast/%E5%BE%AE%E6%B3%A2%E7%82%89%E8%9B%8B%E7%B3%95/#_2","text":"\u5fae\u6ce2\u7089 \u80fd\u653e\u8fdb\u5fae\u6ce2\u7089\u7684\u5bb9\u5668 \u9ec4\u6cb9 \u9762\u7c89 \u6ce1\u6253\u7c89\uff08\u4e0d\u52a0\u5403\u7740\u50cf\u997c\uff09 \u9e21\u86cb","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/breakfast/%E5%BE%AE%E6%B3%A2%E7%82%89%E8%9B%8B%E7%B3%95/#_3","text":"\u9e21\u86cb\ud83e\udd5a 1 \u4e2a \u9762\u7c89\ud83c\udf5a 15g \u6ce1\u6253\u7c89\ud83c\udf5a 2.5g \u767d\uff08\u7ea2\uff09\u7cd6\ud83c\udf6c 10g \u76d0\ud83e\uddc2 1g \uff08\u53e3\u5473\u53ef\u9009\uff09 \u5496\u5561\u7c89\u2615 \u5de7\u514b\u529b\ud83c\udf6b \u9ea6\u7247\ud83c\udf7f \u725b\u5976\ud83e\udd5b \u575a\u679c\ud83e\udd5c \u997c\u5e72\u5c51\ud83c\udf6a \u9999\u8549\ud83c\udf4c \u975e\u9ed1\u6697\u6599\u7406\ud83c\udf46","title":"\u8ba1\u7b97"},{"location":"dishes/breakfast/%E5%BE%AE%E6%B3%A2%E7%82%89%E8%9B%8B%E7%B3%95/#_4","text":"\u52a0\u5165\u4ee5\u4e0b\u98df\u6750\uff0c\u6ce8\u610f\u4e0d\u8981\u8d85\u8fc7\u5bb9\u5668\u7684 3/4 \u6316\u534a\u4e2a\u9e21\u86cb\u5927\u7684\u9ec4\u6cb9\u653e\u8fdb\u5bb9\u5668, \u5728\u5fae\u6ce2\u7089 \u52a0\u70ed 15 \u79d2\u5de6\u53f3 \u81f3\u878d\u5316 \u5c06 \u5de7\u514b\u529b/\u9999\u8549 \u878d\u5316/\u6405\u788e\u6210 \u9897\u7c92/\u7cca\u72b6 \u6253\u5165\u4e00\u4e2a\u9e21\u86cb\u5e76\u6253\u6563\u6405\u548c 15g \u767d\uff08\u7ea2\uff09\u7cd6\uff08\u751c\u515a\u53ef\u4ee5\u591a\u52a0\u4e9b\uff09 \uff08\u89c1\u9644 4\uff09 \u52a0\u5165 1g \u76d0 ( \u5982\u679c\u540e\u7eed\u7684\u53e3\u5473\u98df\u6750\u542b\u76d0\u9700\u81ea\u5df1\u659f\u914c ) \u52a0\u5165 2.5g \u6ce1\u6253\u7c89 \u52a0\u5165 15g \u9762\u7c89\uff08\u7b4b\u5ea6\u6ca1\u592a\u5927\u5f71\u54cd\uff09 \u52a0\u5165\u4efb\u4f55\u559c\u6b22\u7684\u53e3\u5473\u98df\u6750! \uff08\u575a\u679c\u4e0e\u997c\u5e72\u7b49\u5e72\u98df\u6750\u4e0d\u662f\u73b0\u5728\u653e\uff09 \u6405\u548c\u81f3\u770b\u4e0d\u89c1\u5e72\u7c89\u7684\u7a20\u9178\u5976\u72b6 \u52a0\u5165\u53ef\u9009\u7684\u5e72\u71e5\u98df\u6750\uff08\u4e0d\u5305\u62ec\u51b2\u6ce1\u7c89\uff09\u5728\u9876\u7aef \u5938\u8d5e\u4e00\u4e0b\u81ea\u5df1\ud83e\udd70 \u5fae\u6ce2\u7089\uff08\u9ad8\u706b\uff09\u52a0\u70ed 1\u5206\u949f \uff08\u81f3\u84ec\u677e\u86cb\u7cd5\u5f62\u6001\uff09 \u53d6\u51fa\u676f\u5b50\uff08\u70eb\u624b\u554a\u554a\u554a\u554a\u2191\uff09\u5e76\u62cd\u670b\u53cb\u5708\u5c31\u53ef\u4ee5\u5403\u4e86","title":"\u64cd\u4f5c"},{"location":"dishes/breakfast/%E5%BE%AE%E6%B3%A2%E7%82%89%E8%9B%8B%E7%B3%95/#_5","text":"\u5728\u5938\u8d5e\u81ea\u5df1\u4e4b\u524d\u7684\u64cd\u4f5c\u53ef\u4ee5\u91cd\u590d\u591a\u904d\u505a\u51fa\u66f4\u5927\u7684\u86cb\u7cd5 \u6ce1\u6253\u7c89\u7528\u6765\u8ba9\u86cb\u7cd5\u66f4\u84ec\u677e \u5927\u591a\u4e0d\u542b\u94dd \u51e0\u5757\u94b1\u4e00\u5305 \u53ef\u4ee5\u4e70\u4e86\u5728\u5bb6\u5907\u7740 \u98df\u6750\u4e0d\u8981\u8d85\u8fc7\u5bb9\u5668\u76843/4!! \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request\u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/breakfast/%E6%B0%B4%E7%85%AE%E7%8E%89%E7%B1%B3/","text":"\u6c34\u716e\u7389\u7c73\u7684\u505a\u6cd5 \u5927\u7ea6 15 \u5206\u949f\u53ef\u4ee5\u5b8c\u6210\u5236\u4f5c\u3002 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u65b0\u9c9c\u7389\u7c73 \u653e\u5f97\u4e0b\u7389\u7c73\u7684\u9505 \u6c34 \u76d0 \u7cd6\uff08\u53ef\u9009\uff09 \u8ba1\u7b97 \u4e00\u4e2a\u5e26\u76ae\u7389\u7c73 \u6df9\u8fc7\u7389\u7c73\u7ea6\u534a\u8282\u6307\u5934\u7684\u6c34 \u716e\u7389\u7c73\u7684\u65f6\u5019\uff0c\u5f00\u59cb\u548c\u6de1\u76d0\u6c34\uff0c\u5dee\u4e0d\u591a 2 \u514b\u76d0\u52a0 50ml \u7684\u6c34 \u6839\u636e\u53e3\u5473\u9009\u62e9\u52a0\u6216\u8005\u4e0d\u52a0\u7cd6\uff08\u53ef\u9009\uff09 \u64cd\u4f5c \u5c06\u65b0\u9c9c\u7389\u7c73\u5265\u53bb\u5916\u76ae\uff0c\u5269\u90e8\u5206\u7389\u7c73\u76ae\u5165\u9505 \u52a0\u5165\u6df9\u8fc7\u7389\u7c73\u7ea6\u534a\u8282\u6307\u5934\u7684\u6c34\uff0c\u52a0\u76d0\u548c\u7cd6 \u6c34\u716e\u5f00\u4e4b\u540e\u8f6c\u81f3\u5c0f\u706b\uff0c\u52a0\u76d6\u7ee7\u7eed\u716e 15-20 \u5206\u949f\uff0c\u7389\u7c73\u716e\u4e45\u70b9\u6ca1\u4e8b\u3002 \u716e\u719f\u540e\u6ca5\u5e72\u6c34\u5206\uff0c\u51b7\u5374\u540e\u98df\u7528\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u6c34\u716e\u7389\u7c73"},{"location":"dishes/breakfast/%E6%B0%B4%E7%85%AE%E7%8E%89%E7%B1%B3/#_1","text":"\u5927\u7ea6 15 \u5206\u949f\u53ef\u4ee5\u5b8c\u6210\u5236\u4f5c\u3002","title":"\u6c34\u716e\u7389\u7c73\u7684\u505a\u6cd5"},{"location":"dishes/breakfast/%E6%B0%B4%E7%85%AE%E7%8E%89%E7%B1%B3/#_2","text":"\u65b0\u9c9c\u7389\u7c73 \u653e\u5f97\u4e0b\u7389\u7c73\u7684\u9505 \u6c34 \u76d0 \u7cd6\uff08\u53ef\u9009\uff09","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/breakfast/%E6%B0%B4%E7%85%AE%E7%8E%89%E7%B1%B3/#_3","text":"\u4e00\u4e2a\u5e26\u76ae\u7389\u7c73 \u6df9\u8fc7\u7389\u7c73\u7ea6\u534a\u8282\u6307\u5934\u7684\u6c34 \u716e\u7389\u7c73\u7684\u65f6\u5019\uff0c\u5f00\u59cb\u548c\u6de1\u76d0\u6c34\uff0c\u5dee\u4e0d\u591a 2 \u514b\u76d0\u52a0 50ml \u7684\u6c34 \u6839\u636e\u53e3\u5473\u9009\u62e9\u52a0\u6216\u8005\u4e0d\u52a0\u7cd6\uff08\u53ef\u9009\uff09","title":"\u8ba1\u7b97"},{"location":"dishes/breakfast/%E6%B0%B4%E7%85%AE%E7%8E%89%E7%B1%B3/#_4","text":"\u5c06\u65b0\u9c9c\u7389\u7c73\u5265\u53bb\u5916\u76ae\uff0c\u5269\u90e8\u5206\u7389\u7c73\u76ae\u5165\u9505 \u52a0\u5165\u6df9\u8fc7\u7389\u7c73\u7ea6\u534a\u8282\u6307\u5934\u7684\u6c34\uff0c\u52a0\u76d0\u548c\u7cd6 \u6c34\u716e\u5f00\u4e4b\u540e\u8f6c\u81f3\u5c0f\u706b\uff0c\u52a0\u76d6\u7ee7\u7eed\u716e 15-20 \u5206\u949f\uff0c\u7389\u7c73\u716e\u4e45\u70b9\u6ca1\u4e8b\u3002 \u716e\u719f\u540e\u6ca5\u5e72\u6c34\u5206\uff0c\u51b7\u5374\u540e\u98df\u7528\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u64cd\u4f5c"},{"location":"dishes/breakfast/%E6%BA%8F%E5%BF%83%E8%9B%8B/","text":"\u6e8f\u5fc3\u86cb\u7684\u505a\u6cd5 \u559c\u6b22\u5065\u8eab\u7684\u5c0f\u4f19\u4f34\u53ef\u4ee5\u5728\u6bcf\u9897\u9e21\u86cb\u4e2d\u83b7\u5f97 6 \u514b\u86cb\u767d\u8d28\u3002\u5927\u7ea6 15 \u5206\u949f\u53ef\u4ee5\u5b8c\u6210\u5236\u4f5c\u3002 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u9e21\u86cb \u7535\u9505 \u6c34 \u79d2\u8868\uff08\u53ef\u9009\uff09 \u8ba1\u7b97 \u9e21\u86cb 1 \u9897\u6216\u66f4\u591a\uff08\u53ea\u8981\u60a8\u7684\u7535\u9505\u88c5\u5f97\u4e0b\uff0c\u4e0d\u7ba1\u6709\u51e0\u9897\u9e21\u86cb\u90fd\u53ef\u4ee5\uff09 \u6df9\u8fc7\u9e21\u86cb\u7ea6 2 \u516c\u5206\u7684\u51b7\u6c34 \u64cd\u4f5c \u5c06\u9e21\u86cb\u653e\u5165\u7535\u9505\u4e2d\u3002\u9e21\u86cb\u4e0d\u53ef\u4e92\u76f8\u5806\u53e0\uff0c\u5e94\u7686\u5728\u5e95\u90e8\uff0c\u5e76\u7559\u6709\u7a7a\u95f4\u53ef\u4ee5\u6643\u52a8 \u5012\u5165\u6df9\u8fc7\u9e21\u86cb\u7ea6 2 \u516c\u5206\u7684\u51b7\u6c34 \u5f00\u76d6\uff0c\u4f7f\u7528\u6700\u5927\u529f\u7387\u52a0\u70ed\u81f3\u6c34\u6eda\u8d77\uff08\u5927\u7ea6 85 - 95 \u5ea6\uff0c\u7a0d\u5fae\u6eda\u52a8\uff0c\u4e0d\u9700\u5b8c\u5168\u6cb8\u817e\uff09 \u5173\u706b\uff0c\u76d6\u4e0a\u76d6\u5b50\uff0c\u8ba9\u9e21\u86cb\u9759\u7f6e\u3002 \u60f3\u8981\u4e2d\u592e\u6709\u5c11\u8bb8\u6d41\u52a8\u7684\u86cb\u9ec4\uff0c\u9700\u9759\u7f6e 6 \u5206\u949f \u82e5\u60f3\u8981\u5b8c\u5168\u716e\u719f\u7684\u6613\u788e\u86cb\u9ec4\uff0c\u9700\u9759\u7f6e 10 \u5206\u949f \u6ca5\u5e72\u6c34\u5206\uff0c\u7528\u51b7\u6c34\u51b2\u6d17\u9e21\u86cb\u7ea6 1 \u5206\u949f\uff0c\u5373\u53ef\u53bb\u58f3\u98df\u7528\u3002 \u9644\u52a0\u5185\u5bb9 \u5982\u679c\u89c9\u5f97\u9e21\u86cb\u4e0d\u591f\u719f\u7684\u5c0f\u4f19\u4f34\u53ef\u4ee5\u4f9d\u7167\u81ea\u5df1\u7684\u559c\u597d\u6dfb\u52a0\u66f4\u591a\u7684\u6c34\u3002 \u8b66\u544a \u6e8f\u5fc3\u86cb\u6709\u6c99\u95e8\u6c0f\u83cc\u611f\u67d3\u7684\u98ce\u9669\u3002\u4e0d\u5efa\u8bae\u9759\u7f6e 5 \u5206\u949f\u4ee5\u5185\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u6e8f\u5fc3\u86cb"},{"location":"dishes/breakfast/%E6%BA%8F%E5%BF%83%E8%9B%8B/#_1","text":"\u559c\u6b22\u5065\u8eab\u7684\u5c0f\u4f19\u4f34\u53ef\u4ee5\u5728\u6bcf\u9897\u9e21\u86cb\u4e2d\u83b7\u5f97 6 \u514b\u86cb\u767d\u8d28\u3002\u5927\u7ea6 15 \u5206\u949f\u53ef\u4ee5\u5b8c\u6210\u5236\u4f5c\u3002","title":"\u6e8f\u5fc3\u86cb\u7684\u505a\u6cd5"},{"location":"dishes/breakfast/%E6%BA%8F%E5%BF%83%E8%9B%8B/#_2","text":"\u9e21\u86cb \u7535\u9505 \u6c34 \u79d2\u8868\uff08\u53ef\u9009\uff09","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/breakfast/%E6%BA%8F%E5%BF%83%E8%9B%8B/#_3","text":"\u9e21\u86cb 1 \u9897\u6216\u66f4\u591a\uff08\u53ea\u8981\u60a8\u7684\u7535\u9505\u88c5\u5f97\u4e0b\uff0c\u4e0d\u7ba1\u6709\u51e0\u9897\u9e21\u86cb\u90fd\u53ef\u4ee5\uff09 \u6df9\u8fc7\u9e21\u86cb\u7ea6 2 \u516c\u5206\u7684\u51b7\u6c34","title":"\u8ba1\u7b97"},{"location":"dishes/breakfast/%E6%BA%8F%E5%BF%83%E8%9B%8B/#_4","text":"\u5c06\u9e21\u86cb\u653e\u5165\u7535\u9505\u4e2d\u3002\u9e21\u86cb\u4e0d\u53ef\u4e92\u76f8\u5806\u53e0\uff0c\u5e94\u7686\u5728\u5e95\u90e8\uff0c\u5e76\u7559\u6709\u7a7a\u95f4\u53ef\u4ee5\u6643\u52a8 \u5012\u5165\u6df9\u8fc7\u9e21\u86cb\u7ea6 2 \u516c\u5206\u7684\u51b7\u6c34 \u5f00\u76d6\uff0c\u4f7f\u7528\u6700\u5927\u529f\u7387\u52a0\u70ed\u81f3\u6c34\u6eda\u8d77\uff08\u5927\u7ea6 85 - 95 \u5ea6\uff0c\u7a0d\u5fae\u6eda\u52a8\uff0c\u4e0d\u9700\u5b8c\u5168\u6cb8\u817e\uff09 \u5173\u706b\uff0c\u76d6\u4e0a\u76d6\u5b50\uff0c\u8ba9\u9e21\u86cb\u9759\u7f6e\u3002 \u60f3\u8981\u4e2d\u592e\u6709\u5c11\u8bb8\u6d41\u52a8\u7684\u86cb\u9ec4\uff0c\u9700\u9759\u7f6e 6 \u5206\u949f \u82e5\u60f3\u8981\u5b8c\u5168\u716e\u719f\u7684\u6613\u788e\u86cb\u9ec4\uff0c\u9700\u9759\u7f6e 10 \u5206\u949f \u6ca5\u5e72\u6c34\u5206\uff0c\u7528\u51b7\u6c34\u51b2\u6d17\u9e21\u86cb\u7ea6 1 \u5206\u949f\uff0c\u5373\u53ef\u53bb\u58f3\u98df\u7528\u3002","title":"\u64cd\u4f5c"},{"location":"dishes/breakfast/%E6%BA%8F%E5%BF%83%E8%9B%8B/#_5","text":"\u5982\u679c\u89c9\u5f97\u9e21\u86cb\u4e0d\u591f\u719f\u7684\u5c0f\u4f19\u4f34\u53ef\u4ee5\u4f9d\u7167\u81ea\u5df1\u7684\u559c\u597d\u6dfb\u52a0\u66f4\u591a\u7684\u6c34\u3002 \u8b66\u544a \u6e8f\u5fc3\u86cb\u6709\u6c99\u95e8\u6c0f\u83cc\u611f\u67d3\u7684\u98ce\u9669\u3002\u4e0d\u5efa\u8bae\u9759\u7f6e 5 \u5206\u949f\u4ee5\u5185\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/breakfast/%E7%85%8E%E9%A5%BA/","text":"\u714e\u997a\u7684\u505a\u6cd5 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u997a\u5b50\uff08\u901f\u51bb\u6c34\u997a\uff09 \u8ba1\u7b97 \u6bcf\u4efd\uff1a \u997a\u5b50\u4e00\u5305 \uff08\u6839\u636e\u4e2a\u4eba\u98df\u91cf\u9009\u62e9\uff0c \u7ea6 10 - 15 \u4e2a\uff09 \u64cd\u4f5c \u53d6\u51fa\u5e73\u5e95\u9505\uff08\u4e0d\u6cbe\u5e73\u5e95\u9505\u6700\u4f73\uff09 \u52a0\u5165 10ml - 15 ml \u98df\u7528\u6cb9 \u5f00\u706b\uff0c\u653e\u5165\u997a\u5b50\uff08\u5c3d\u91cf\u5e73\u5747\u94fa\u5f00\uff0c\u4e0d\u5b9c\u5806\u53e0\uff09 \u7acb\u523b\u52a0\u5165\u6e05\u6c34\uff0c\u6c34\u7ebf\u6ca1\u8fc7\u997a\u5b50\u5e73\u5747\u9ad8\u5ea6\u7684 1/2 \u76d6\u4e0a\u9505\u76d6\uff08\u6b64\u65f6\u7089\u7076\u5e94\u8be5\u5904\u4e8e\u5927\u706b\uff09 \u7b49\u5f85 8 - 10 \u5206\u949f \u5f53\u9505\u4e2d\u6c34\u5206\u4ec5\u5269 2mm \u65f6\uff0c \u8f6c\u4e2d\u706b\u5f00\u59cb\u714e\u5236 \u5f53\u6c34\u5206\u5168\u90e8\u84b8\u53d1\u540e\uff0c\u6447\u6643\u5e73\u5e95\u9505\u4f7f\u997a\u5b50\u53d7\u70ed\u5747\u5300 \u653e\u5165\u9ed1\u829d\u9ebb\u548c\u8471\u82b1\u518d\u7116 10s 1 - 2 \u5206\u949f\u5939\u51fa\u4e00\u4e2a\u997a\u5b50\u89c2\u5bdf\u5e95\u90e8\uff0c\u82e5\u51fa\u73b0\u91d1\u9ec4\u8272\u8106\u76ae\u7acb\u5373\u53d6\u51fa \u9644\u52a0\u5185\u5bb9 \u64cd\u4f5c\u65f6\uff0c\u9700\u65f6\u523b\u89c2\u5bdf\u9505\u5185\u60c5\u51b5\uff0c\u5207\u8bb0\u4e0d\u53ef\u5206\u795e\u73a9\u624b\u673a\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u714e\u997a"},{"location":"dishes/breakfast/%E7%85%8E%E9%A5%BA/#_1","text":"","title":"\u714e\u997a\u7684\u505a\u6cd5"},{"location":"dishes/breakfast/%E7%85%8E%E9%A5%BA/#_2","text":"\u997a\u5b50\uff08\u901f\u51bb\u6c34\u997a\uff09","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/breakfast/%E7%85%8E%E9%A5%BA/#_3","text":"\u6bcf\u4efd\uff1a \u997a\u5b50\u4e00\u5305 \uff08\u6839\u636e\u4e2a\u4eba\u98df\u91cf\u9009\u62e9\uff0c \u7ea6 10 - 15 \u4e2a\uff09","title":"\u8ba1\u7b97"},{"location":"dishes/breakfast/%E7%85%8E%E9%A5%BA/#_4","text":"\u53d6\u51fa\u5e73\u5e95\u9505\uff08\u4e0d\u6cbe\u5e73\u5e95\u9505\u6700\u4f73\uff09 \u52a0\u5165 10ml - 15 ml \u98df\u7528\u6cb9 \u5f00\u706b\uff0c\u653e\u5165\u997a\u5b50\uff08\u5c3d\u91cf\u5e73\u5747\u94fa\u5f00\uff0c\u4e0d\u5b9c\u5806\u53e0\uff09 \u7acb\u523b\u52a0\u5165\u6e05\u6c34\uff0c\u6c34\u7ebf\u6ca1\u8fc7\u997a\u5b50\u5e73\u5747\u9ad8\u5ea6\u7684 1/2 \u76d6\u4e0a\u9505\u76d6\uff08\u6b64\u65f6\u7089\u7076\u5e94\u8be5\u5904\u4e8e\u5927\u706b\uff09 \u7b49\u5f85 8 - 10 \u5206\u949f \u5f53\u9505\u4e2d\u6c34\u5206\u4ec5\u5269 2mm \u65f6\uff0c \u8f6c\u4e2d\u706b\u5f00\u59cb\u714e\u5236 \u5f53\u6c34\u5206\u5168\u90e8\u84b8\u53d1\u540e\uff0c\u6447\u6643\u5e73\u5e95\u9505\u4f7f\u997a\u5b50\u53d7\u70ed\u5747\u5300 \u653e\u5165\u9ed1\u829d\u9ebb\u548c\u8471\u82b1\u518d\u7116 10s 1 - 2 \u5206\u949f\u5939\u51fa\u4e00\u4e2a\u997a\u5b50\u89c2\u5bdf\u5e95\u90e8\uff0c\u82e5\u51fa\u73b0\u91d1\u9ec4\u8272\u8106\u76ae\u7acb\u5373\u53d6\u51fa","title":"\u64cd\u4f5c"},{"location":"dishes/breakfast/%E7%85%8E%E9%A5%BA/#_5","text":"\u64cd\u4f5c\u65f6\uff0c\u9700\u65f6\u523b\u89c2\u5bdf\u9505\u5185\u60c5\u51b5\uff0c\u5207\u8bb0\u4e0d\u53ef\u5206\u795e\u73a9\u624b\u673a\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/breakfast/%E7%87%95%E9%BA%A6%E9%B8%A1%E8%9B%8B%E9%A5%BC/","text":"\u71d5\u9ea6\u9e21\u86cb\u997c\u7684\u505a\u6cd5 \u71d5\u9ea6\u9e21\u86cb\u997c\u662f\u6781\u5177\u8425\u517b\u3001\u4fbf\u4e8e\u5236\u4f5c\u3001\u9002\u5b9c\u5feb\u901f\u5236\u4f5c\u7684\u65e9\u9910\u3002\u5c24\u5176\u9002\u5b9c\u70ed\u7231\u5065\u8eab\u7684\u4e0a\u73ed\u65cf\u3002 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u9e21\u86cb \u71d5\u9ea6 \u725b\u5976 50-100g\uff0c\u80fd\u591f\u5c06\u71d5\u9ea6\u6405\u62cc\u7c98\u7a20\u5373\u53ef \u53ef\u6839\u636e\u53e3\u5473\u9009\u62e9\u5c11\u8bb8\u852c\u83dc\uff0c\u5982\u83e0\u83dc\u3002 \u8ba1\u7b97 \u9e21\u86cb\u4e24\u4e2a\uff0c\u4ea6\u53ef\u9009\u62e9\u4e24\u4e2a\u86cb\u6e05\uff0c\u4e00\u4e2a\u86cb\u9ec4\u3002 \u7eaf\u5e72\u71d5\u9ea6\u7247 50g \u5de6\u53f3\uff08\u7b49\u540c\u4e00\u4e2a\u9e21\u86cb\u7684\u91cf\uff09 \u725b\u5976\u4e00\u76d2 \u7ea6 250ml \u852c\u83dc\u788e\u53f6\u4e00\u628a \u64cd\u4f5c \u5c06\u725b\u5976\u4e0e\u5e72\u71d5\u9ea6\u6df7\u5408\u6405\u62cc\u5747\u5300\u81f3\u9ecf\u7a20\u72b6\u3002 \u5c06\u9e21\u86cb\u6405\u62cc\u5747\u5300\u81f3\u989c\u8272\u5355\u4e00\u7a0b\u5ea6\u3002 \u5c06\u9e21\u86cb\u6db2\u5012\u5165\u71d5\u9ea6\u725b\u5976\u4e2d\u7ee7\u7eed\u6405\u62cc\u81f3\u9ecf\u7a20\u3001\u5747\u5300\u3002 \u5e73\u5e95\u9505\u4e2d\u52a0\u5165\u5c11\u8bb8\u9ec4\u6cb9\u5e76\u8986\u76d6\u5747\u5300\u3002 \u4e0b\u5165\u6405\u62cc\u597d\u7684\u98df\u6750\uff0c\u5e76\u644a\u5f00\u81f3\u997c\u72b6\u3002 \u5c0f\u706b\u52a0\u70ed\u4e24\u5230\u4e09\u5206\u949f\u3002\u5982\u60f3\u8981\u52a0\u5165\u852c\u83dc\uff0c\u53ef\u4ee5\u5728\u52a0\u70ed\u8fc7\u7a0b\u4e2d\u52a0\u5165\u788e\u83dc\u53f6\u3002 \u7ffb\u9762\u7ee7\u7eed\u52a0\u70ed\u4e24\u5206\u949f\u5de6\u53f3\u3002 \u51fa\u9505\uff0c\u642d\u914d\u5269\u4e0b\u7684\u725b\u5976\u4f5c\u4e3a\u65e9\u9910\u3002 \u9644\u52a0\u5185\u5bb9 \u5982\u679c\u53e3\u5473\u504f\u54b8\u53e3\uff0c\u53ef\u4ee5\u5728\u6405\u62cc\u9e21\u86cb\u6db2\u65f6\u52a0\u5165\u76d0\uff0c\u80e1\u6912\u7b49\u8c03\u6599\u3002 \u714e\u997c\u65f6\u4f7f\u7528\u5c0f\u706b\uff0c\u907f\u514d\u71d5\u9ea6\u90e8\u5206\u714e\u7cca\u3002 \u8425\u517b\u6210\u5206 \u4e00\u4efd\u4e0a\u8ff0\u65e9\u9910\u7684\u9884\u4f30\u8425\u517b\u4ef7\u503c\uff08\u4e09\u5927\u8425\u517b\u7d20\uff09\u5982\u4e0b\uff0c\u4f9b\u70ed\u7231\u5065\u8eab\u4eba\u7fa4\u53c2\u8003*\u3002 \u78b3\u6c34\u5316\u5408\u7269\uff1a39g \u86cb\u767d\u8d28\uff1a30g \u8102\u80aa\uff1a19g \u603b\u70ed\u91cf\uff1a450kcal *\uff1a \u725b\u5976\u6309\u7167\u5e38\u89c1\u7684 250ml \u8ba1\u7b97 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u71d5\u9ea6\u9e21\u86cb\u997c"},{"location":"dishes/breakfast/%E7%87%95%E9%BA%A6%E9%B8%A1%E8%9B%8B%E9%A5%BC/#_1","text":"\u71d5\u9ea6\u9e21\u86cb\u997c\u662f\u6781\u5177\u8425\u517b\u3001\u4fbf\u4e8e\u5236\u4f5c\u3001\u9002\u5b9c\u5feb\u901f\u5236\u4f5c\u7684\u65e9\u9910\u3002\u5c24\u5176\u9002\u5b9c\u70ed\u7231\u5065\u8eab\u7684\u4e0a\u73ed\u65cf\u3002","title":"\u71d5\u9ea6\u9e21\u86cb\u997c\u7684\u505a\u6cd5"},{"location":"dishes/breakfast/%E7%87%95%E9%BA%A6%E9%B8%A1%E8%9B%8B%E9%A5%BC/#_2","text":"\u9e21\u86cb \u71d5\u9ea6 \u725b\u5976 50-100g\uff0c\u80fd\u591f\u5c06\u71d5\u9ea6\u6405\u62cc\u7c98\u7a20\u5373\u53ef \u53ef\u6839\u636e\u53e3\u5473\u9009\u62e9\u5c11\u8bb8\u852c\u83dc\uff0c\u5982\u83e0\u83dc\u3002","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/breakfast/%E7%87%95%E9%BA%A6%E9%B8%A1%E8%9B%8B%E9%A5%BC/#_3","text":"\u9e21\u86cb\u4e24\u4e2a\uff0c\u4ea6\u53ef\u9009\u62e9\u4e24\u4e2a\u86cb\u6e05\uff0c\u4e00\u4e2a\u86cb\u9ec4\u3002 \u7eaf\u5e72\u71d5\u9ea6\u7247 50g \u5de6\u53f3\uff08\u7b49\u540c\u4e00\u4e2a\u9e21\u86cb\u7684\u91cf\uff09 \u725b\u5976\u4e00\u76d2 \u7ea6 250ml \u852c\u83dc\u788e\u53f6\u4e00\u628a","title":"\u8ba1\u7b97"},{"location":"dishes/breakfast/%E7%87%95%E9%BA%A6%E9%B8%A1%E8%9B%8B%E9%A5%BC/#_4","text":"\u5c06\u725b\u5976\u4e0e\u5e72\u71d5\u9ea6\u6df7\u5408\u6405\u62cc\u5747\u5300\u81f3\u9ecf\u7a20\u72b6\u3002 \u5c06\u9e21\u86cb\u6405\u62cc\u5747\u5300\u81f3\u989c\u8272\u5355\u4e00\u7a0b\u5ea6\u3002 \u5c06\u9e21\u86cb\u6db2\u5012\u5165\u71d5\u9ea6\u725b\u5976\u4e2d\u7ee7\u7eed\u6405\u62cc\u81f3\u9ecf\u7a20\u3001\u5747\u5300\u3002 \u5e73\u5e95\u9505\u4e2d\u52a0\u5165\u5c11\u8bb8\u9ec4\u6cb9\u5e76\u8986\u76d6\u5747\u5300\u3002 \u4e0b\u5165\u6405\u62cc\u597d\u7684\u98df\u6750\uff0c\u5e76\u644a\u5f00\u81f3\u997c\u72b6\u3002 \u5c0f\u706b\u52a0\u70ed\u4e24\u5230\u4e09\u5206\u949f\u3002\u5982\u60f3\u8981\u52a0\u5165\u852c\u83dc\uff0c\u53ef\u4ee5\u5728\u52a0\u70ed\u8fc7\u7a0b\u4e2d\u52a0\u5165\u788e\u83dc\u53f6\u3002 \u7ffb\u9762\u7ee7\u7eed\u52a0\u70ed\u4e24\u5206\u949f\u5de6\u53f3\u3002 \u51fa\u9505\uff0c\u642d\u914d\u5269\u4e0b\u7684\u725b\u5976\u4f5c\u4e3a\u65e9\u9910\u3002","title":"\u64cd\u4f5c"},{"location":"dishes/breakfast/%E7%87%95%E9%BA%A6%E9%B8%A1%E8%9B%8B%E9%A5%BC/#_5","text":"\u5982\u679c\u53e3\u5473\u504f\u54b8\u53e3\uff0c\u53ef\u4ee5\u5728\u6405\u62cc\u9e21\u86cb\u6db2\u65f6\u52a0\u5165\u76d0\uff0c\u80e1\u6912\u7b49\u8c03\u6599\u3002 \u714e\u997c\u65f6\u4f7f\u7528\u5c0f\u706b\uff0c\u907f\u514d\u71d5\u9ea6\u90e8\u5206\u714e\u7cca\u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/breakfast/%E7%87%95%E9%BA%A6%E9%B8%A1%E8%9B%8B%E9%A5%BC/#_6","text":"\u4e00\u4efd\u4e0a\u8ff0\u65e9\u9910\u7684\u9884\u4f30\u8425\u517b\u4ef7\u503c\uff08\u4e09\u5927\u8425\u517b\u7d20\uff09\u5982\u4e0b\uff0c\u4f9b\u70ed\u7231\u5065\u8eab\u4eba\u7fa4\u53c2\u8003*\u3002 \u78b3\u6c34\u5316\u5408\u7269\uff1a39g \u86cb\u767d\u8d28\uff1a30g \u8102\u80aa\uff1a19g \u603b\u70ed\u91cf\uff1a450kcal *\uff1a \u725b\u5976\u6309\u7167\u5e38\u89c1\u7684 250ml \u8ba1\u7b97 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u8425\u517b\u6210\u5206"},{"location":"dishes/breakfast/%E7%89%9B%E5%A5%B6%E7%87%95%E9%BA%A6/","text":"\u725b\u5976\u71d5\u9ea6\u7684\u505a\u6cd5 \u9ad8\u86cb\u767d\uff0c\u7c97\u8c37\u7269\u7ea4\u7ef4\uff0c\u9971\u8179\u611f\u7684\u61d2\u4eba\u5feb\u901f\u8425\u517b\u65e9\u9910\uff0c3min \u641e\u5b9a \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u725b\u5976\uff08\u5df4\u6c0f\u5976\u53e3\u611f\u66f4\u597d\uff09 \u71d5\u9ea6 \u9e21\u86cb \u8ba1\u7b97 \ud83e\udd5b \u725b\u5976 280ml/per \ud83c\udf73 \u9e21\u86cb 1 \u4e2a/per \ud83c\udf5a \u71d5\u9ea6 40g/per \u4f7f\u7528\u4e0a\u8ff0\u6761\u4ef6\uff0c\u8ba1\u7b97\u51fa\u8ba1\u5212\u4f7f\u7528\u7684\u539f\u6750\u6599\u6bd4\u4f8b\u3002 \u64cd\u4f5c \u71d5\u9ea6\u70f9\u996a\u5e38\u89c4\u65b9\u6cd5 \u5c06\u725b\u5976\u5012\u5165\u65e9\u9910\u676f\uff08\u51b7\u7684\u5373\u53ef\uff09 \u51c6\u5907\u597d 200ml \u6c34\uff0c\u5982\u679c\u662f\u76f4\u996e\u6c34\u76f4\u63a5\u52a0\u5165\u71d5\u9ea6\uff0c\u5426\u5219\u8bf7\u70e7\u5f00\u540e\u52a0\u5165\u71d5\u9ea6 \u6c34\u6cb8\u540e 2min\uff0c\u71d5\u9ea6\u716e\u597d \u716e\u597d\u7684\u71d5\u9ea6\u635e\u51fa\u5012\u5165\u725b\u5976\u4e2d\uff08\u5c3d\u91cf\u4e0d\u8981\u5c06\u716e\u71d5\u9ea6\u7684\u6c34\u4e5f\u5012\u5165\u725b\u5976\uff0c\u5f71\u54cd\u53e3\u611f\uff09 \u71d5\u9ea6\u70f9\u996a\u5feb\u901f\u65b9\u6cd5 \u5c06\u71d5\u9ea6\u66ff\u6362\u4e3a\u5feb\u716e\u71d5\u9ea6 \u5c06\u725b\u5976\u5012\u5165\u88c5\u6709\u5feb\u716e\u71d5\u9ea6\u7684\u5bb9\u5668\u4e2d\u5e76\u6405\u62cc \u5c06\u6df7\u5408\u7269\u653e\u5165\u5fae\u6ce2\u7089\u4e2d 50%\u706b\u529b\u5fae\u6ce2 4min \u714e\u86cb\u70f9\u996a\u65b9\u6cd5 \u70ed\u9505\uff0c\u9505\u5185\u653e\u5c11\u8bb8\u5e95\u6cb9\uff0c\u6cb9\u70ed\u540e\u714e\u9e21\u86cb\uff0c\u6bcf\u9762\u714e 20s\uff0c\u8003\u8651\u8c03\u5e95\u5473\uff083g \u6912\u76d0\uff0c\u53ef\u9009\uff09 \u5173\u706b\uff0c\u88c5\u76d8 \u70f9\u996a\u57fa\u672c 3min \u641e\u5b9a\uff0c\u505a\u5b8c\u83dc\u54c1\u90fd\u662f\u5e38\u6e29\uff0c\u6781\u6613\u5165\u53e3\uff0c\u6211\u6bcf\u6b21 2 \u5206\u949f\u5403\u5b8c\u3002 \ud83e\udd51 \u6c34\u679c\u852c\u83dc\uff0c\u82cf\u6253\u997c\u5e72\u642d\u914d\u98df\u7528\u66f4\u4f73 \u9644\u52a0\u5185\u5bb9 \u7531\u4e8e\u4e0d\u540c\u5fae\u6ce2\u7089\u706b\u529b\u4e0d\u540c\uff0c\u6545\u5fae\u6ce2\u7089\u706b\u529b\u65e0\u6cd5\u7cbe\u786e\u8868\u660e \u4e0d\u5efa\u8bae\u6df7\u5408\u7269\u8d85\u8fc7\u5bb9\u5668\u5bb9\u91cf 50%\uff0c\u5426\u5219\u52a0\u70ed\u8fc7\u7a0b\u4e2d\u5185\u5bb9\u7269\u6781\u6709\u53ef\u80fd\u6ea2\u51fa \u4e0d\u5efa\u8bae\u4f7f\u7528\u73bb\u7483\u676f\u8fdb\u884c\u70f9\u996a\uff0c\u7406\u7531\u540c\u4e0a \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u725b\u5976\u71d5\u9ea6"},{"location":"dishes/breakfast/%E7%89%9B%E5%A5%B6%E7%87%95%E9%BA%A6/#_1","text":"\u9ad8\u86cb\u767d\uff0c\u7c97\u8c37\u7269\u7ea4\u7ef4\uff0c\u9971\u8179\u611f\u7684\u61d2\u4eba\u5feb\u901f\u8425\u517b\u65e9\u9910\uff0c3min \u641e\u5b9a","title":"\u725b\u5976\u71d5\u9ea6\u7684\u505a\u6cd5"},{"location":"dishes/breakfast/%E7%89%9B%E5%A5%B6%E7%87%95%E9%BA%A6/#_2","text":"\u725b\u5976\uff08\u5df4\u6c0f\u5976\u53e3\u611f\u66f4\u597d\uff09 \u71d5\u9ea6 \u9e21\u86cb","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/breakfast/%E7%89%9B%E5%A5%B6%E7%87%95%E9%BA%A6/#_3","text":"\ud83e\udd5b \u725b\u5976 280ml/per \ud83c\udf73 \u9e21\u86cb 1 \u4e2a/per \ud83c\udf5a \u71d5\u9ea6 40g/per \u4f7f\u7528\u4e0a\u8ff0\u6761\u4ef6\uff0c\u8ba1\u7b97\u51fa\u8ba1\u5212\u4f7f\u7528\u7684\u539f\u6750\u6599\u6bd4\u4f8b\u3002","title":"\u8ba1\u7b97"},{"location":"dishes/breakfast/%E7%89%9B%E5%A5%B6%E7%87%95%E9%BA%A6/#_4","text":"","title":"\u64cd\u4f5c"},{"location":"dishes/breakfast/%E7%89%9B%E5%A5%B6%E7%87%95%E9%BA%A6/#_5","text":"\u5c06\u725b\u5976\u5012\u5165\u65e9\u9910\u676f\uff08\u51b7\u7684\u5373\u53ef\uff09 \u51c6\u5907\u597d 200ml \u6c34\uff0c\u5982\u679c\u662f\u76f4\u996e\u6c34\u76f4\u63a5\u52a0\u5165\u71d5\u9ea6\uff0c\u5426\u5219\u8bf7\u70e7\u5f00\u540e\u52a0\u5165\u71d5\u9ea6 \u6c34\u6cb8\u540e 2min\uff0c\u71d5\u9ea6\u716e\u597d \u716e\u597d\u7684\u71d5\u9ea6\u635e\u51fa\u5012\u5165\u725b\u5976\u4e2d\uff08\u5c3d\u91cf\u4e0d\u8981\u5c06\u716e\u71d5\u9ea6\u7684\u6c34\u4e5f\u5012\u5165\u725b\u5976\uff0c\u5f71\u54cd\u53e3\u611f\uff09","title":"\u71d5\u9ea6\u70f9\u996a\u5e38\u89c4\u65b9\u6cd5"},{"location":"dishes/breakfast/%E7%89%9B%E5%A5%B6%E7%87%95%E9%BA%A6/#_6","text":"\u5c06\u71d5\u9ea6\u66ff\u6362\u4e3a\u5feb\u716e\u71d5\u9ea6 \u5c06\u725b\u5976\u5012\u5165\u88c5\u6709\u5feb\u716e\u71d5\u9ea6\u7684\u5bb9\u5668\u4e2d\u5e76\u6405\u62cc \u5c06\u6df7\u5408\u7269\u653e\u5165\u5fae\u6ce2\u7089\u4e2d 50%\u706b\u529b\u5fae\u6ce2 4min","title":"\u71d5\u9ea6\u70f9\u996a\u5feb\u901f\u65b9\u6cd5"},{"location":"dishes/breakfast/%E7%89%9B%E5%A5%B6%E7%87%95%E9%BA%A6/#_7","text":"\u70ed\u9505\uff0c\u9505\u5185\u653e\u5c11\u8bb8\u5e95\u6cb9\uff0c\u6cb9\u70ed\u540e\u714e\u9e21\u86cb\uff0c\u6bcf\u9762\u714e 20s\uff0c\u8003\u8651\u8c03\u5e95\u5473\uff083g \u6912\u76d0\uff0c\u53ef\u9009\uff09 \u5173\u706b\uff0c\u88c5\u76d8 \u70f9\u996a\u57fa\u672c 3min \u641e\u5b9a\uff0c\u505a\u5b8c\u83dc\u54c1\u90fd\u662f\u5e38\u6e29\uff0c\u6781\u6613\u5165\u53e3\uff0c\u6211\u6bcf\u6b21 2 \u5206\u949f\u5403\u5b8c\u3002 \ud83e\udd51 \u6c34\u679c\u852c\u83dc\uff0c\u82cf\u6253\u997c\u5e72\u642d\u914d\u98df\u7528\u66f4\u4f73","title":"\u714e\u86cb\u70f9\u996a\u65b9\u6cd5"},{"location":"dishes/breakfast/%E7%89%9B%E5%A5%B6%E7%87%95%E9%BA%A6/#_8","text":"\u7531\u4e8e\u4e0d\u540c\u5fae\u6ce2\u7089\u706b\u529b\u4e0d\u540c\uff0c\u6545\u5fae\u6ce2\u7089\u706b\u529b\u65e0\u6cd5\u7cbe\u786e\u8868\u660e \u4e0d\u5efa\u8bae\u6df7\u5408\u7269\u8d85\u8fc7\u5bb9\u5668\u5bb9\u91cf 50%\uff0c\u5426\u5219\u52a0\u70ed\u8fc7\u7a0b\u4e2d\u5185\u5bb9\u7269\u6781\u6709\u53ef\u80fd\u6ea2\u51fa \u4e0d\u5efa\u8bae\u4f7f\u7528\u73bb\u7483\u676f\u8fdb\u884c\u70f9\u996a\uff0c\u7406\u7531\u540c\u4e0a \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/breakfast/%E7%A9%BA%E6%B0%94%E7%82%B8%E9%94%85%E9%9D%A2%E5%8C%85%E7%89%87/","text":"\u7a7a\u6c14\u70b8\u9505\u9762\u5305\u7247\u7684\u505a\u6cd5 \u5065\u5eb7\u9971\u809a\u5b50\uff0c\u9002\u5b9c\u6b63\u5728\u51cf\u8102\u671f\u7684\u7a0b\u5e8f\u5458\u98df\u7528 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u9762\u5305\u7247 \u7a7a\u6c14\u70b8\u9505 \u8ba1\u7b97 \u6bcf\u4efd\uff1a \u9762\u5305\u7247\uff08\u4e24\u7247\uff09 \u64cd\u4f5c \u53d6\u51fa\u4e24\u7247\u9762\u5305\u7247\uff08\u5efa\u8bae\u4f7f\u7528\u7c97\u7cae\u9762\u5305\u7247\uff09 \u5c06\u9762\u5305\u7247--\u5782\u76f4--\u653e\u5165\u7a7a\u6c14\u70b8\u9505 200\u00b0C \u70d8\u70e4 5 \u5206\u949f \u53d6\u51fa\u5373\u53ef\u4f7f\u7528 \u9644\u52a0\u5185\u5bb9 \u8425\u517b\u6210\u5206\u8868\uff08\u6570\u636e\u57fa\u4e8e\u5168\u9ea6\u9762\u5305\u7247\uff09 \u70ed\u91cf 254 \u5343\u5361 \u86cb\u767d\u8d28 12.3 \u514b \u8102\u80aa 3.5 \u514b \u78b3\u6c34\u5316\u5408\u7269 43.1 \u514b \u81b3\u98df\u7ea4\u7ef4 6.0 \u514b \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u7a7a\u6c14\u70b8\u9505\u9762\u5305\u7247"},{"location":"dishes/breakfast/%E7%A9%BA%E6%B0%94%E7%82%B8%E9%94%85%E9%9D%A2%E5%8C%85%E7%89%87/#_1","text":"\u5065\u5eb7\u9971\u809a\u5b50\uff0c\u9002\u5b9c\u6b63\u5728\u51cf\u8102\u671f\u7684\u7a0b\u5e8f\u5458\u98df\u7528","title":"\u7a7a\u6c14\u70b8\u9505\u9762\u5305\u7247\u7684\u505a\u6cd5"},{"location":"dishes/breakfast/%E7%A9%BA%E6%B0%94%E7%82%B8%E9%94%85%E9%9D%A2%E5%8C%85%E7%89%87/#_2","text":"\u9762\u5305\u7247 \u7a7a\u6c14\u70b8\u9505","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/breakfast/%E7%A9%BA%E6%B0%94%E7%82%B8%E9%94%85%E9%9D%A2%E5%8C%85%E7%89%87/#_3","text":"\u6bcf\u4efd\uff1a \u9762\u5305\u7247\uff08\u4e24\u7247\uff09","title":"\u8ba1\u7b97"},{"location":"dishes/breakfast/%E7%A9%BA%E6%B0%94%E7%82%B8%E9%94%85%E9%9D%A2%E5%8C%85%E7%89%87/#_4","text":"\u53d6\u51fa\u4e24\u7247\u9762\u5305\u7247\uff08\u5efa\u8bae\u4f7f\u7528\u7c97\u7cae\u9762\u5305\u7247\uff09 \u5c06\u9762\u5305\u7247--\u5782\u76f4--\u653e\u5165\u7a7a\u6c14\u70b8\u9505 200\u00b0C \u70d8\u70e4 5 \u5206\u949f \u53d6\u51fa\u5373\u53ef\u4f7f\u7528","title":"\u64cd\u4f5c"},{"location":"dishes/breakfast/%E7%A9%BA%E6%B0%94%E7%82%B8%E9%94%85%E9%9D%A2%E5%8C%85%E7%89%87/#_5","text":"\u8425\u517b\u6210\u5206\u8868\uff08\u6570\u636e\u57fa\u4e8e\u5168\u9ea6\u9762\u5305\u7247\uff09 \u70ed\u91cf 254 \u5343\u5361 \u86cb\u767d\u8d28 12.3 \u514b \u8102\u80aa 3.5 \u514b \u78b3\u6c34\u5316\u5408\u7269 43.1 \u514b \u81b3\u98df\u7ea4\u7ef4 6.0 \u514b \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/breakfast/%E7%BE%8E%E5%BC%8F%E7%82%92%E8%9B%8B/","text":"\u7f8e\u5f0f\u7092\u86cb\u7684\u505a\u6cd5 \u7f8e\u5f0f\u7092\u86cb\u5177\u6709\u677e\u8f6f\u9c9c\u5ae9\u7684\u53e3\u611f,\u4e0e\u5e73\u65f6\u7684\u7092\u86cb\u4e0d\u540c,\u7f8e\u5f0f\u7092\u86cb\u4e2d\u52a0\u5165\u4e86\u5c11\u91cf\u725b\u5976,\u4f7f\u5f97\u86cb\u82b1\u66f4\u52a0\u7684\u7ec6\u5bc6\u5747\u5300,\u5e76\u4e14\u8425\u517b\u4e30\u5bcc~ \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u9e21\u86cb 3 \u4e2a \u5168\u8102\u725b\u5976/\u5976\u6cb9 10g \u9ec4\u6cb9 5 \u514b \u76d0 1 \u514b \u64cd\u4f5c \u9e21\u86cb\u6253\u5165\u5927\u7897\u4e2d\uff0c\u52a0\u76d0\u6405\u6253\u81f3\u8d77\u6ce1\uff0c\u9759\u7f6e 15 \u5206\u949f \u9ec4\u6cb9\u5207\u5c0f\u5757\u5165\u9505\uff0c\u5012\u5165\u86cb\u6db2\uff0c\u5f00\u5c0f\u706b\u4e0d\u65ad\u6405\u62cc \u9ec4\u6cb9\u4e00\u878d\u5316\uff0c\u5c31\u5feb\u901f\u7ffb\u52a8\u86cb\u6db2\uff0c\u5c06\u5176\u6253\u788e\u6210\u7ec6\u5bc6\u72b6\uff0c\u5728\u86cb\u6db2\u5927\u4f53\u51dd\u56fa\u524d\u5173\u706b \u52a0\u5165\u725b\u5976\u6405\u62cc 15 \u79d2\uff0c\u81f3\u7092\u86cb\u6e7f\u6da6\u7ef5\u5bc6\uff0c\u88c5\u76d8 \u9644\u52a0\u5185\u5bb9 \u60f3\u5403\u7684\u66f4\u4e30\u5bcc\u53ef\u4ee5\u5728\u6700\u540e\u4e00\u6b65\u90a3\u91cc\u52a0\u4e0a\u7092\u597d\u7684\u756a\u8304\u4e01\uff0c\u6d0b\u8471\u4e01\uff0c\u57f9\u6839\u4e01\uff0c\u5207\u597d\u7684\u829d\u58eb\u5c0f\u4e01\uff0c\u7b49\u7b49\u3002\u3002\u3002(\u603b\u4e4b\u4e0d\u4f1a\u518d\u51fa\u6c34\u7684\u4e1c\u4e1c\uff09 \u4f7f\u7528\u5e73\u5e95\u9505\uff08\u4e0d\u7c98\u9505\uff09\u3002 \u8003\u8651\u5230\u5f88\u591a\u4eba\u662f\u4e00\u4eba\u98df\u5c31\u7092\u4e00\u4e24\u4e2a\u9e21\u86cb\uff0c\u53e3\u5f84\u6bd4\u8f83\u5c0f\u7684\u9505\u6216\u8bb8\u66f4\u65b9\u4fbf\u5728\u9505\u4e2d\u5747\u5300\u6405\u62cc\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u7f8e\u5f0f\u7092\u86cb"},{"location":"dishes/breakfast/%E7%BE%8E%E5%BC%8F%E7%82%92%E8%9B%8B/#_1","text":"\u7f8e\u5f0f\u7092\u86cb\u5177\u6709\u677e\u8f6f\u9c9c\u5ae9\u7684\u53e3\u611f,\u4e0e\u5e73\u65f6\u7684\u7092\u86cb\u4e0d\u540c,\u7f8e\u5f0f\u7092\u86cb\u4e2d\u52a0\u5165\u4e86\u5c11\u91cf\u725b\u5976,\u4f7f\u5f97\u86cb\u82b1\u66f4\u52a0\u7684\u7ec6\u5bc6\u5747\u5300,\u5e76\u4e14\u8425\u517b\u4e30\u5bcc~","title":"\u7f8e\u5f0f\u7092\u86cb\u7684\u505a\u6cd5"},{"location":"dishes/breakfast/%E7%BE%8E%E5%BC%8F%E7%82%92%E8%9B%8B/#_2","text":"\u9e21\u86cb 3 \u4e2a \u5168\u8102\u725b\u5976/\u5976\u6cb9 10g \u9ec4\u6cb9 5 \u514b \u76d0 1 \u514b","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/breakfast/%E7%BE%8E%E5%BC%8F%E7%82%92%E8%9B%8B/#_3","text":"\u9e21\u86cb\u6253\u5165\u5927\u7897\u4e2d\uff0c\u52a0\u76d0\u6405\u6253\u81f3\u8d77\u6ce1\uff0c\u9759\u7f6e 15 \u5206\u949f \u9ec4\u6cb9\u5207\u5c0f\u5757\u5165\u9505\uff0c\u5012\u5165\u86cb\u6db2\uff0c\u5f00\u5c0f\u706b\u4e0d\u65ad\u6405\u62cc \u9ec4\u6cb9\u4e00\u878d\u5316\uff0c\u5c31\u5feb\u901f\u7ffb\u52a8\u86cb\u6db2\uff0c\u5c06\u5176\u6253\u788e\u6210\u7ec6\u5bc6\u72b6\uff0c\u5728\u86cb\u6db2\u5927\u4f53\u51dd\u56fa\u524d\u5173\u706b \u52a0\u5165\u725b\u5976\u6405\u62cc 15 \u79d2\uff0c\u81f3\u7092\u86cb\u6e7f\u6da6\u7ef5\u5bc6\uff0c\u88c5\u76d8","title":"\u64cd\u4f5c"},{"location":"dishes/breakfast/%E7%BE%8E%E5%BC%8F%E7%82%92%E8%9B%8B/#_4","text":"\u60f3\u5403\u7684\u66f4\u4e30\u5bcc\u53ef\u4ee5\u5728\u6700\u540e\u4e00\u6b65\u90a3\u91cc\u52a0\u4e0a\u7092\u597d\u7684\u756a\u8304\u4e01\uff0c\u6d0b\u8471\u4e01\uff0c\u57f9\u6839\u4e01\uff0c\u5207\u597d\u7684\u829d\u58eb\u5c0f\u4e01\uff0c\u7b49\u7b49\u3002\u3002\u3002(\u603b\u4e4b\u4e0d\u4f1a\u518d\u51fa\u6c34\u7684\u4e1c\u4e1c\uff09 \u4f7f\u7528\u5e73\u5e95\u9505\uff08\u4e0d\u7c98\u9505\uff09\u3002 \u8003\u8651\u5230\u5f88\u591a\u4eba\u662f\u4e00\u4eba\u98df\u5c31\u7092\u4e00\u4e24\u4e2a\u9e21\u86cb\uff0c\u53e3\u5f84\u6bd4\u8f83\u5c0f\u7684\u9505\u6216\u8bb8\u66f4\u65b9\u4fbf\u5728\u9505\u4e2d\u5747\u5300\u6405\u62cc\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/breakfast/%E8%8C%B6%E5%8F%B6%E8%9B%8B/","text":"\u8336\u53f6\u86cb\u7684\u505a\u6cd5 \u8336\u9999\u6d53\u90c1\uff0c\u9c9c\u9999\u53ef\u53e3\u7684\u9ad8\u86cb\u767d\u5feb\u901f\u8425\u517b\u65e9\u9910\uff0c\u5927\u7ea6\u8017\u65f6 30min\u3002\u70f9\u996a\u7565\u5fae\u8017\u65f6\uff0c\u53ef\u4ee5\u5468\u672b\u5c1d\u8bd5\uff0c\u505a\u4e00\u6b21\u5927\u7ea6\u591f 2-3 \u4e2a\u4eba\u5403\u3002 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u9e21\u86cb \u516b\u89d2 \u9999\u53f6 \u6842\u76ae \u8334\u9999 \u51b0\u7cd6 \u7ea2\u8336 \u751f\u62bd \u8001\u62bd \u98df\u76d0 \u8ba1\u7b97 \u9e21\u86cb 400g\uff08\u7ea6 8 \u9897\uff09 \u516b\u89d2 4g\uff08\u7ea6 2 \u9897\uff09 \u9999\u53f6 0.5-1g\uff08\u7ea6 2 \u7247\uff09 \u6842\u76ae 3g\uff081 \u5c0f\u5757\uff09 \u8334\u9999 5g \u51b0\u7cd6 15g \u7ea2\u8336 20g \u751f\u62bd 15g \u8001\u62bd 25g \u98df\u76d0 3g \u4f7f\u7528\u4e0a\u8ff0\u6761\u4ef6\uff0c\u8ba1\u7b97\u51fa\u8ba1\u5212\u4f7f\u7528\u7684\u539f\u6750\u6599\u6bd4\u4f8b\u3002 \u64cd\u4f5c \u7528\u51b7\u6c34\u5c06\u9e21\u86cb\u716e\u719f\uff0c\u5927\u706b\u5927\u7ea6 8min\uff08\u6839\u636e\u81ea\u5bb6\u53a8\u5177\u51b3\u5b9a\uff09 \u9e21\u86cb\u635e\u51fa\uff0c\u8fc7\u51b7\u6c34 \u5c06\u9e21\u86cb\u4e92\u76f8\u78b0\u649e\uff0c\u4f7f\u6bcf\u4e2a\u9e21\u86cb\u4ea7\u751f\u88c2\u7f1d \u5c06\u9e21\u86cb\u4e0b\u9505\uff0c\u653e\u5165\u516b\u89d2\uff0c\u9999\u53f6\uff0c\u6842\u76ae\uff0c\u8334\u9999\uff0c\u51b0\u7cd6\uff0c\u7ea2\u8336\uff0c\u751f\u62bd\uff0c\u8001\u62bd\uff0c\u98df\u76d0 \u52a0\u6c34\u76f4\u81f3\u6ca1\u8fc7\u9e21\u86cb \u5927\u706b\u716e\u5f00\u4e4b\u540e\uff0c\u8f6c\u4e2d\u5c0f\u706b\u716e 15min \u4e2d\u706b\u716e15min\u4e4b\u540e\uff0c\u635e\u51fa\u6599\u6e23\uff0c\u9e21\u86cb\u518d\u6d78\u6ce1\u4e00\u4f1a\u53e3\u611f\u66f4\u4f73 \u9644\u52a0\u5185\u5bb9 \u9e21\u86cb\u635e\u51fa\u8fc7\u51b7\u6c34\u662f\u4e3a\u4e86\u8ba9\u9e21\u86cb\u548c\u58f3\u4e4b\u95f4\u4ea7\u751f\u95f4\u9699 \u98df\u76d0\u53ef\u6839\u636e\u4e2a\u4eba\u53e3\u5473\u9009\u62e9\u4e0d\u52a0 \u516b\u89d2\uff0c\u9999\u53f6\uff0c\u6842\u76ae\uff0c\u8334\u9999\uff0c\u51b0\u7cd6\uff0c\u81ea\u5df1\u6ca1\u6709\u8fd9\u4e48\u591a\u98df\u6750\u53ef\u4ee5\u4e70\u73b0\u6210\u7684\u5364\u6599\u5305 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u8336\u53f6\u86cb"},{"location":"dishes/breakfast/%E8%8C%B6%E5%8F%B6%E8%9B%8B/#_1","text":"\u8336\u9999\u6d53\u90c1\uff0c\u9c9c\u9999\u53ef\u53e3\u7684\u9ad8\u86cb\u767d\u5feb\u901f\u8425\u517b\u65e9\u9910\uff0c\u5927\u7ea6\u8017\u65f6 30min\u3002\u70f9\u996a\u7565\u5fae\u8017\u65f6\uff0c\u53ef\u4ee5\u5468\u672b\u5c1d\u8bd5\uff0c\u505a\u4e00\u6b21\u5927\u7ea6\u591f 2-3 \u4e2a\u4eba\u5403\u3002","title":"\u8336\u53f6\u86cb\u7684\u505a\u6cd5"},{"location":"dishes/breakfast/%E8%8C%B6%E5%8F%B6%E8%9B%8B/#_2","text":"\u9e21\u86cb \u516b\u89d2 \u9999\u53f6 \u6842\u76ae \u8334\u9999 \u51b0\u7cd6 \u7ea2\u8336 \u751f\u62bd \u8001\u62bd \u98df\u76d0","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/breakfast/%E8%8C%B6%E5%8F%B6%E8%9B%8B/#_3","text":"\u9e21\u86cb 400g\uff08\u7ea6 8 \u9897\uff09 \u516b\u89d2 4g\uff08\u7ea6 2 \u9897\uff09 \u9999\u53f6 0.5-1g\uff08\u7ea6 2 \u7247\uff09 \u6842\u76ae 3g\uff081 \u5c0f\u5757\uff09 \u8334\u9999 5g \u51b0\u7cd6 15g \u7ea2\u8336 20g \u751f\u62bd 15g \u8001\u62bd 25g \u98df\u76d0 3g \u4f7f\u7528\u4e0a\u8ff0\u6761\u4ef6\uff0c\u8ba1\u7b97\u51fa\u8ba1\u5212\u4f7f\u7528\u7684\u539f\u6750\u6599\u6bd4\u4f8b\u3002","title":"\u8ba1\u7b97"},{"location":"dishes/breakfast/%E8%8C%B6%E5%8F%B6%E8%9B%8B/#_4","text":"\u7528\u51b7\u6c34\u5c06\u9e21\u86cb\u716e\u719f\uff0c\u5927\u706b\u5927\u7ea6 8min\uff08\u6839\u636e\u81ea\u5bb6\u53a8\u5177\u51b3\u5b9a\uff09 \u9e21\u86cb\u635e\u51fa\uff0c\u8fc7\u51b7\u6c34 \u5c06\u9e21\u86cb\u4e92\u76f8\u78b0\u649e\uff0c\u4f7f\u6bcf\u4e2a\u9e21\u86cb\u4ea7\u751f\u88c2\u7f1d \u5c06\u9e21\u86cb\u4e0b\u9505\uff0c\u653e\u5165\u516b\u89d2\uff0c\u9999\u53f6\uff0c\u6842\u76ae\uff0c\u8334\u9999\uff0c\u51b0\u7cd6\uff0c\u7ea2\u8336\uff0c\u751f\u62bd\uff0c\u8001\u62bd\uff0c\u98df\u76d0 \u52a0\u6c34\u76f4\u81f3\u6ca1\u8fc7\u9e21\u86cb \u5927\u706b\u716e\u5f00\u4e4b\u540e\uff0c\u8f6c\u4e2d\u5c0f\u706b\u716e 15min \u4e2d\u706b\u716e15min\u4e4b\u540e\uff0c\u635e\u51fa\u6599\u6e23\uff0c\u9e21\u86cb\u518d\u6d78\u6ce1\u4e00\u4f1a\u53e3\u611f\u66f4\u4f73","title":"\u64cd\u4f5c"},{"location":"dishes/breakfast/%E8%8C%B6%E5%8F%B6%E8%9B%8B/#_5","text":"\u9e21\u86cb\u635e\u51fa\u8fc7\u51b7\u6c34\u662f\u4e3a\u4e86\u8ba9\u9e21\u86cb\u548c\u58f3\u4e4b\u95f4\u4ea7\u751f\u95f4\u9699 \u98df\u76d0\u53ef\u6839\u636e\u4e2a\u4eba\u53e3\u5473\u9009\u62e9\u4e0d\u52a0 \u516b\u89d2\uff0c\u9999\u53f6\uff0c\u6842\u76ae\uff0c\u8334\u9999\uff0c\u51b0\u7cd6\uff0c\u81ea\u5df1\u6ca1\u6709\u8fd9\u4e48\u591a\u98df\u6750\u53ef\u4ee5\u4e70\u73b0\u6210\u7684\u5364\u6599\u5305 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/breakfast/%E8%92%B8%E8%8A%B1%E5%8D%B7/","text":"\u84b8\u82b1\u5377 \u84b8\u82b1\u5377\u662f\u4e00\u9053\u7b80\u5355\u6613\u505a\u7684\u83dc\u3002\u80fd\u8865\u5145\u78b3\u6c34\u5316\u5408\u7269\uff0c\u81b3\u98df\u7ea4\u7ef4\u3002\u4e00\u822c\u521d\u5b66\u8005\u53ea\u9700\u8981\u534a\u5c0f\u65f6\u5373\u53ef\u5b8c\u6210\u3002\u4f5c\u4e3a\u5feb\u624b\u65e9\u9910\uff0c\u5b66\u4f1a\u505a\u4e4b\u540e\uff0c\u518d\u4e5f\u4e0d\u4f1a\u65e9\u4e0a\u997f\u809a\u5b50\u4e86\u3002 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u51b7\u51bb\u82b1\u5377 \u5706\u789f\u5b50 \u84b8\u67b6 \u6c34 400ml \u8ba1\u7b97 \u51b7\u51bb\u82b1\u5377 5 \u4e2a\uff08\u5973\u751f\u5206\u91cf 3 \u4e2a\u5373\u53ef\uff09\uff08\u53ef\u4ee5\u5728\u8d85\u5e02\u3001\u5404\u79cd\u4e70\u83dc\u5e73\u53f0\u8d2d\u4e70\uff09 \u5706\u789f\u5b50\uff0c\u76f4\u5f84 28cm \u84b8\u67b6\uff0c\u76f4\u5f84 20cm \u6c34 400ml \u64cd\u4f5c \u4ece\u82b1\u5377\u7684\u5305\u88c5\u888b\u4e2d\u53d6\u51fa 5 \u4e2a\u82b1\u5377 \u628a\u82b1\u5377\u5e73\u94fa\u5728\u789f\u5b50\u4e0a\uff0c\u5c3d\u91cf\u4e0d\u7528\u91cd\u53e0 \u5f80\u9505\u91cc\u5012\u5165 400ml \u6c34\uff0c\u628a\u84b8\u67b6\u653e\u91cc\u9762\uff0c\u628a\u88c5\u82b1\u5377\u7684\u789f\u5b50\u653e\u5728\u84b8\u67b6\u4e0a\uff0c\u76d6\u4e0a\u9505\u76d6\u3002 \u5f00\u5927\u706b\u52a0\u70ed\uff0c\u76f4\u81f3\u6c34\u6cb8\u817e\u3002 \u8f6c\u4e2d\u706b\u52a0\u70ed 15 \u5206\u949f \u5f00\u76d6\u7528\u624b\u611f\u53d7\u82b1\u5377\u7684\u8868\u9762\u6e29\u5ea6\uff0c\u5982\u679c\u4e0d\u591f\u70ed\uff0c\u5c31\u7ee7\u7eed\u76d6\u4e0a\u76d6\u5b50\u52a0\u70ed\uff0c\u5426\u5219\u5c31\u53ef\u4ee5\u5173\u706b\u51fa\u9505\u3002 \u789f\u5b50\u53d6\u51fa\u653e\u51c9\u81f3 50 \u5ea6\u5de6\u53f3\u5373\u53ef\u98df\u7528 \u9644\u52a0\u5185\u5bb9 \u64cd\u4f5c\u65f6\uff0c\u9700\u8981\u6ce8\u610f\u89c2\u5bdf\u9505\u91cc\u7684\u6c34\u4e0d\u80fd\u5c11\u4e8e 50ml\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u84b8\u82b1\u5377"},{"location":"dishes/breakfast/%E8%92%B8%E8%8A%B1%E5%8D%B7/#_1","text":"\u84b8\u82b1\u5377\u662f\u4e00\u9053\u7b80\u5355\u6613\u505a\u7684\u83dc\u3002\u80fd\u8865\u5145\u78b3\u6c34\u5316\u5408\u7269\uff0c\u81b3\u98df\u7ea4\u7ef4\u3002\u4e00\u822c\u521d\u5b66\u8005\u53ea\u9700\u8981\u534a\u5c0f\u65f6\u5373\u53ef\u5b8c\u6210\u3002\u4f5c\u4e3a\u5feb\u624b\u65e9\u9910\uff0c\u5b66\u4f1a\u505a\u4e4b\u540e\uff0c\u518d\u4e5f\u4e0d\u4f1a\u65e9\u4e0a\u997f\u809a\u5b50\u4e86\u3002","title":"\u84b8\u82b1\u5377"},{"location":"dishes/breakfast/%E8%92%B8%E8%8A%B1%E5%8D%B7/#_2","text":"\u51b7\u51bb\u82b1\u5377 \u5706\u789f\u5b50 \u84b8\u67b6 \u6c34 400ml","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/breakfast/%E8%92%B8%E8%8A%B1%E5%8D%B7/#_3","text":"\u51b7\u51bb\u82b1\u5377 5 \u4e2a\uff08\u5973\u751f\u5206\u91cf 3 \u4e2a\u5373\u53ef\uff09\uff08\u53ef\u4ee5\u5728\u8d85\u5e02\u3001\u5404\u79cd\u4e70\u83dc\u5e73\u53f0\u8d2d\u4e70\uff09 \u5706\u789f\u5b50\uff0c\u76f4\u5f84 28cm \u84b8\u67b6\uff0c\u76f4\u5f84 20cm \u6c34 400ml","title":"\u8ba1\u7b97"},{"location":"dishes/breakfast/%E8%92%B8%E8%8A%B1%E5%8D%B7/#_4","text":"\u4ece\u82b1\u5377\u7684\u5305\u88c5\u888b\u4e2d\u53d6\u51fa 5 \u4e2a\u82b1\u5377 \u628a\u82b1\u5377\u5e73\u94fa\u5728\u789f\u5b50\u4e0a\uff0c\u5c3d\u91cf\u4e0d\u7528\u91cd\u53e0 \u5f80\u9505\u91cc\u5012\u5165 400ml \u6c34\uff0c\u628a\u84b8\u67b6\u653e\u91cc\u9762\uff0c\u628a\u88c5\u82b1\u5377\u7684\u789f\u5b50\u653e\u5728\u84b8\u67b6\u4e0a\uff0c\u76d6\u4e0a\u9505\u76d6\u3002 \u5f00\u5927\u706b\u52a0\u70ed\uff0c\u76f4\u81f3\u6c34\u6cb8\u817e\u3002 \u8f6c\u4e2d\u706b\u52a0\u70ed 15 \u5206\u949f \u5f00\u76d6\u7528\u624b\u611f\u53d7\u82b1\u5377\u7684\u8868\u9762\u6e29\u5ea6\uff0c\u5982\u679c\u4e0d\u591f\u70ed\uff0c\u5c31\u7ee7\u7eed\u76d6\u4e0a\u76d6\u5b50\u52a0\u70ed\uff0c\u5426\u5219\u5c31\u53ef\u4ee5\u5173\u706b\u51fa\u9505\u3002 \u789f\u5b50\u53d6\u51fa\u653e\u51c9\u81f3 50 \u5ea6\u5de6\u53f3\u5373\u53ef\u98df\u7528","title":"\u64cd\u4f5c"},{"location":"dishes/breakfast/%E8%92%B8%E8%8A%B1%E5%8D%B7/#_5","text":"\u64cd\u4f5c\u65f6\uff0c\u9700\u8981\u6ce8\u610f\u89c2\u5bdf\u9505\u91cc\u7684\u6c34\u4e0d\u80fd\u5c11\u4e8e 50ml\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/breakfast/%E9%B8%A1%E8%9B%8B%E4%B8%89%E6%98%8E%E6%B2%BB/","text":"\u9e21\u86cb\u4e09\u660e\u6cbb\u7684\u505a\u6cd5 10 \u5206\u949f\u7684\u7b80\u6613\u9e21\u86cb\u4e09\u660e\u6cbb \ud83e\udd6a \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u9e21\u86cb 1 \u4e2a \u5410\u53f8 2 \u7247 \u57f9\u6839 2 \u7247 \u9ec4\u6cb9 10 g \u86cb\u9ec4\u9171 20g \u76d0 1g \u9ed1\u80e1\u6912 2g \u64cd\u4f5c \u5410\u53f8\u5207\u53bb\u56db\u8fb9\uff0c\u5907\u7528 \u9e21\u86cb\u716e\u719f\uff0c\u6363\u788e \u6df7\u5408\u9e21\u86cb\u3001\u86cb\u9ec4\u9171\u3001\u76d0\u3001\u9ed1\u80e1\u6912 \u9505\u4e2d\u52a0\u5165\u9ec4\u6cb9\uff0c\u714e\u719f\u57f9\u6839 \u7ec4\u88c5\u5410\u53f8\uff0c\u5728\u4e24\u7247\u5410\u53f8\u95f4\u52a0\u5165\u5236\u4f5c\u597d\u7684\u9e21\u86cb\u9171\u53ca\u57f9\u6839 \u56db\u8fb9\u5f62\u5410\u53f8\u5207\u6210\u4e09\u89d2\u5f62\u88c5\u76d8 \u9644\u52a0\u5185\u5bb9 \u4e5f\u53ef\u52a0\u5165\u829d\u58eb\u3001\u9178\u9ec4\u74dc\u7b49\u98df\u6750 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9e21\u86cb\u4e09\u660e\u6cbb"},{"location":"dishes/breakfast/%E9%B8%A1%E8%9B%8B%E4%B8%89%E6%98%8E%E6%B2%BB/#_1","text":"10 \u5206\u949f\u7684\u7b80\u6613\u9e21\u86cb\u4e09\u660e\u6cbb \ud83e\udd6a","title":"\u9e21\u86cb\u4e09\u660e\u6cbb\u7684\u505a\u6cd5"},{"location":"dishes/breakfast/%E9%B8%A1%E8%9B%8B%E4%B8%89%E6%98%8E%E6%B2%BB/#_2","text":"\u9e21\u86cb 1 \u4e2a \u5410\u53f8 2 \u7247 \u57f9\u6839 2 \u7247 \u9ec4\u6cb9 10 g \u86cb\u9ec4\u9171 20g \u76d0 1g \u9ed1\u80e1\u6912 2g","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/breakfast/%E9%B8%A1%E8%9B%8B%E4%B8%89%E6%98%8E%E6%B2%BB/#_3","text":"\u5410\u53f8\u5207\u53bb\u56db\u8fb9\uff0c\u5907\u7528 \u9e21\u86cb\u716e\u719f\uff0c\u6363\u788e \u6df7\u5408\u9e21\u86cb\u3001\u86cb\u9ec4\u9171\u3001\u76d0\u3001\u9ed1\u80e1\u6912 \u9505\u4e2d\u52a0\u5165\u9ec4\u6cb9\uff0c\u714e\u719f\u57f9\u6839 \u7ec4\u88c5\u5410\u53f8\uff0c\u5728\u4e24\u7247\u5410\u53f8\u95f4\u52a0\u5165\u5236\u4f5c\u597d\u7684\u9e21\u86cb\u9171\u53ca\u57f9\u6839 \u56db\u8fb9\u5f62\u5410\u53f8\u5207\u6210\u4e09\u89d2\u5f62\u88c5\u76d8","title":"\u64cd\u4f5c"},{"location":"dishes/breakfast/%E9%B8%A1%E8%9B%8B%E4%B8%89%E6%98%8E%E6%B2%BB/#_4","text":"\u4e5f\u53ef\u52a0\u5165\u829d\u58eb\u3001\u9178\u9ec4\u74dc\u7b49\u98df\u6750 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/condiment/%E6%B2%B9%E9%85%A5/","text":"\u6cb9\u9165\u7684\u505a\u6cd5 \u6cb9\u9165\u662f\u7531\u9762\u7c89\u4e0e\u70ed\u6cb9\u6df7\u5408\u8c03\u5236\u7684\uff0c\u901a\u5e38\u5728\u70d9\u997c\u65f6\u6d82\u70b9\u6cb9\u9165\uff0c\u53ef\u4ee5\u4f7f\u5f97\u997c\u5b50\u5c42\u5c42\u5206\u660e\uff0c\u5916\u9165\u91cc\u8f6f\uff0c\u53e3\u611f\u66f4\u4f73\u3002 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u9762\u7c89 \u6cb9 \u76d0 \u8ba1\u7b97 \u6cb9 = \uff08\u8981\u70d9\u997c\u7684\u5f20\u6570 * 10ml\uff09 \u76d0 = \uff08\u8981\u70d9\u997c\u7684\u5f20\u6570 / 2\uff09g \u9762\u7c89 = \uff08\u8981\u70d9\u997c\u7684\u5f20\u6570 / 0.13\uff09g \u64cd\u4f5c \u9762\u7c89\u76db\u5c0f\u7897\u91cc\uff0c\u52a0\u5165\u76d0 \u52a0\u5165 200 \u5ea6\u5de6\u53f3\u7684\u70ed\u6cb9 \u7528\u7b77\u5b50\u5c06\u5176\u6405\u62cc\u6210\u65e0\u56fa\u72b6\u7269\u4f53\u7684\u7cca\u72b6\u3002 \u9644\u52a0\u5185\u5bb9 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u6cb9\u9165"},{"location":"dishes/condiment/%E6%B2%B9%E9%85%A5/#_1","text":"\u6cb9\u9165\u662f\u7531\u9762\u7c89\u4e0e\u70ed\u6cb9\u6df7\u5408\u8c03\u5236\u7684\uff0c\u901a\u5e38\u5728\u70d9\u997c\u65f6\u6d82\u70b9\u6cb9\u9165\uff0c\u53ef\u4ee5\u4f7f\u5f97\u997c\u5b50\u5c42\u5c42\u5206\u660e\uff0c\u5916\u9165\u91cc\u8f6f\uff0c\u53e3\u611f\u66f4\u4f73\u3002","title":"\u6cb9\u9165\u7684\u505a\u6cd5"},{"location":"dishes/condiment/%E6%B2%B9%E9%85%A5/#_2","text":"\u9762\u7c89 \u6cb9 \u76d0","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/condiment/%E6%B2%B9%E9%85%A5/#_3","text":"\u6cb9 = \uff08\u8981\u70d9\u997c\u7684\u5f20\u6570 * 10ml\uff09 \u76d0 = \uff08\u8981\u70d9\u997c\u7684\u5f20\u6570 / 2\uff09g \u9762\u7c89 = \uff08\u8981\u70d9\u997c\u7684\u5f20\u6570 / 0.13\uff09g","title":"\u8ba1\u7b97"},{"location":"dishes/condiment/%E6%B2%B9%E9%85%A5/#_4","text":"\u9762\u7c89\u76db\u5c0f\u7897\u91cc\uff0c\u52a0\u5165\u76d0 \u52a0\u5165 200 \u5ea6\u5de6\u53f3\u7684\u70ed\u6cb9 \u7528\u7b77\u5b50\u5c06\u5176\u6405\u62cc\u6210\u65e0\u56fa\u72b6\u7269\u4f53\u7684\u7cca\u72b6\u3002","title":"\u64cd\u4f5c"},{"location":"dishes/condiment/%E6%B2%B9%E9%85%A5/#_5","text":"\u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/condiment/%E7%82%B8%E4%B8%B2%E9%85%B1%E6%96%99/","text":"\u70b8\u4e32\u9171\u6599\u7684\u505a\u6cd5 \u70b8\u4e32\u9171\u6599\uff0c\u53f7\u79f0\u6dcb\u889c\u5b50\u90fd\u597d\u5403\uff0c\u65b0\u624b\u53cb\u597d\uff0c\u9884\u8ba1\u7528\u65f6 10 \u5206\u949f\u3002 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u5e72\u8fa3\u6912\u9762\uff08\u7c97\u7ec6\u90fd\u51c6\u5907\uff09 \u5b5c\u7136\u7c89 \u80e1\u6912\u7c89 \u4e94\u9999\u7c89 \u82b1\u6912\u7c89 \u5341\u4e09\u9999 \u9ebb\u8fa3\u9c9c \u767d\u829d\u9ebb \u8ba1\u7b97 \u5e72\u8fa3\u6912\u9762 60 \u514b \u5b5c\u7136\u7c89 20 \u514b \u80e1\u6912\u7c89 10 \u514b \u4e94\u9999\u7c89 15 \u514b \u98df\u76d0 20 \u514b \u82b1\u6912\u7c89 15 \u514b \u9e21\u7cbe 8 \u514b \u5341\u4e09\u9999 5 \u514b \u9ebb\u8fa3\u9c9c 5 \u514b \u767d\u829d\u9ebb 30 \u514b \u64cd\u4f5c \u6240\u6709\u539f\u6599\u5728\u5bb9\u5668\u5185\u6df7\u5408\uff0c\u6405\u62cc\u5747\u5300\u3002 \u9505\u91cc\u70e7\u70ed\u6cb9\uff0c\u6cb9\u7684\u7528\u91cf\u4ee5\u5728\u5bb9\u5668\u5185\u6ca1\u8fc7\u6240\u6709\u539f\u6750\u6599\u4e3a\u4f73\u3002 \u5206\u4e09\u6b21\u6dcb\u5165\u70ed\u6cb9\uff0c\u6bcf\u6b21 1/3\uff0c\u540c\u65f6\u6405\u62cc\u3002 \u6700\u540e\u653e\u5165\u9999\u6cb9 10ml\uff0c\u751f\u62bd 10ml\uff0c\u82b1\u6912\u6cb9 10ml\uff0c\u869d\u6cb9 10ml\u3002 \u9644\u52a0\u5185\u5bb9 \u6700\u540e\u4e00\u6b65\u7684\u8c03\u5473\u53ef\u6309\u81ea\u5df1\u559c\u597d\u6dfb\u52a0\u3002 \u4e0d\u5f97\u4e00\u6b21\u6027\u5012\u5165\u6240\u6709\u70ed\u6cb9\uff0c\u5fc5\u987b\u5206\u6b21\u5012\u5165\u5e76\u6405\u62cc\u3002 \u539f\u6599\u53ef\u6309\u6bd4\u4f8b\u7f29\u51cf\u3002","title":"\u70b8\u4e32\u9171\u6599"},{"location":"dishes/condiment/%E7%82%B8%E4%B8%B2%E9%85%B1%E6%96%99/#_1","text":"\u70b8\u4e32\u9171\u6599\uff0c\u53f7\u79f0\u6dcb\u889c\u5b50\u90fd\u597d\u5403\uff0c\u65b0\u624b\u53cb\u597d\uff0c\u9884\u8ba1\u7528\u65f6 10 \u5206\u949f\u3002","title":"\u70b8\u4e32\u9171\u6599\u7684\u505a\u6cd5"},{"location":"dishes/condiment/%E7%82%B8%E4%B8%B2%E9%85%B1%E6%96%99/#_2","text":"\u5e72\u8fa3\u6912\u9762\uff08\u7c97\u7ec6\u90fd\u51c6\u5907\uff09 \u5b5c\u7136\u7c89 \u80e1\u6912\u7c89 \u4e94\u9999\u7c89 \u82b1\u6912\u7c89 \u5341\u4e09\u9999 \u9ebb\u8fa3\u9c9c \u767d\u829d\u9ebb","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/condiment/%E7%82%B8%E4%B8%B2%E9%85%B1%E6%96%99/#_3","text":"\u5e72\u8fa3\u6912\u9762 60 \u514b \u5b5c\u7136\u7c89 20 \u514b \u80e1\u6912\u7c89 10 \u514b \u4e94\u9999\u7c89 15 \u514b \u98df\u76d0 20 \u514b \u82b1\u6912\u7c89 15 \u514b \u9e21\u7cbe 8 \u514b \u5341\u4e09\u9999 5 \u514b \u9ebb\u8fa3\u9c9c 5 \u514b \u767d\u829d\u9ebb 30 \u514b","title":"\u8ba1\u7b97"},{"location":"dishes/condiment/%E7%82%B8%E4%B8%B2%E9%85%B1%E6%96%99/#_4","text":"\u6240\u6709\u539f\u6599\u5728\u5bb9\u5668\u5185\u6df7\u5408\uff0c\u6405\u62cc\u5747\u5300\u3002 \u9505\u91cc\u70e7\u70ed\u6cb9\uff0c\u6cb9\u7684\u7528\u91cf\u4ee5\u5728\u5bb9\u5668\u5185\u6ca1\u8fc7\u6240\u6709\u539f\u6750\u6599\u4e3a\u4f73\u3002 \u5206\u4e09\u6b21\u6dcb\u5165\u70ed\u6cb9\uff0c\u6bcf\u6b21 1/3\uff0c\u540c\u65f6\u6405\u62cc\u3002 \u6700\u540e\u653e\u5165\u9999\u6cb9 10ml\uff0c\u751f\u62bd 10ml\uff0c\u82b1\u6912\u6cb9 10ml\uff0c\u869d\u6cb9 10ml\u3002","title":"\u64cd\u4f5c"},{"location":"dishes/condiment/%E7%82%B8%E4%B8%B2%E9%85%B1%E6%96%99/#_5","text":"\u6700\u540e\u4e00\u6b65\u7684\u8c03\u5473\u53ef\u6309\u81ea\u5df1\u559c\u597d\u6dfb\u52a0\u3002 \u4e0d\u5f97\u4e00\u6b21\u6027\u5012\u5165\u6240\u6709\u70ed\u6cb9\uff0c\u5fc5\u987b\u5206\u6b21\u5012\u5165\u5e76\u6405\u62cc\u3002 \u539f\u6599\u53ef\u6309\u6bd4\u4f8b\u7f29\u51cf\u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/condiment/%E7%B3%96%E8%89%B2/","text":"\u7cd6\u8272\u7684\u505a\u6cd5 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u7cd6\uff08\u4efb\u9009\u5176\u4e00\uff09\uff1a \u51b0\u7cd6\uff1a\u7092\u51fa\u6765\u7684 \u7cd6\u8272 \u8272\u6cfd\u6700\u4e3a\u9c9c\u8273\uff0c\u7ea2\u4eae\uff0c\u5fc5\u987b\u6c34\u6cb9\u7092\uff0c\u4e0d\u52a0\u6c34\u878d\u5316\u4f1a\u5f88\u6162 \u767d\u7802\u7cd6\uff1a\u5fc5\u987b\u6c34\u6cb9\u7092\uff0c\u4e0d\u52a0\u6c34\u878d\u5316\u4f1a\u5f88\u6162 \u7ef5\u767d\u7cd6\uff1a\u53ef\u4ee5\u4e0d\u52a0\u6c34 \u7092\u7cd6\u8272\u8fc7\u7a0b\u706b\u4e0d\u8981\u592a\u5927\uff01\uff01\uff01\u7535\u78c1\u7089\u6e29\u5ea6\u4e0d\u591f\uff0c\u706b\u5019\u8fc7\u4e86\u53d1\u82e6\uff0c\u4e0d\u591f\u53d1\u751c \u8ba1\u91cf \u6cb9 \uff1a100ml \u5f00\u6c34 \uff1a500ml \u7cd6 \uff08\u8fd9\u91cc\u4ee5\u51b0\u7cd6\u4e3a\u4f8b\uff09 \u64cd\u4f5c \u5f00\u706b\uff0c\u5e76\u5411\u9505\u4e2d\u5012\u5165 100ml \u5f00\u6c34 1 \u518d\u5411\u9505\u4e2d\u5012\u5165 100ml \u6cb9\uff0c\u4e0e\u7b2c\u4e00\u6b65\u95f4\u9694\u8d8a\u77ed\u8d8a\u597d\uff0c\u6b64\u65f6\u9505\u4e3a\u5927\u706b\u4e2d\u706b\u90fd\u53ef\u4ee5\uff0c\u7740\u6025\u7684\u8bdd\u53ef\u4ee5\u5927\u706b \u653e\u5165\u51b0\u7cd6\uff08\u5982\u679c\u51b0\u7cd6\u8fc7\u4e8e\u8026\u5408\uff0c\u53ef\u4ee5\u63d0\u524d\u6572\u788e\uff0c\u505a\u5230\u8026\u5408\u5ea6\u8d8a\u4f4e\u8d8a\u597d\uff09 \u8c03\u6574\u706b\u529b\u4e3a\u4e2d\u706b \u5f00\u59cb\u6405\u62cc \u8981\u4e00\u76f4\u4e00\u76f4\u4e00\u76f4\u6405\u62cc\uff0c\u53d8\u6210\u68d5\u8910\u8272\uff0c\u6b64\u65f6 \u8f6c\u4e3a\u5c0f\u706b \u518d\u53d8\u7a00\uff0c\u53d8\u7ea2\u8336\u8272\uff0c\u518d\u53d8\u6210\u9171\u7ea2\u8272\u540e\u8d77\u5c0f\u6ce1\u6ce1\uff0c\u51c6\u5907\u597d\u6267\u884c\u4e0b\u9762\u7684 \u64cd\u4f5c1 or \u64cd\u4f5c2 \u5c0f\u6ce1\u6ce1\u4f1a\u9010\u6e10\u6d88\u5931\uff0c\u4e4b\u540e\u4f1a\u51fa\u73b0\u5927\u6ce1\u6ce1\uff0c\u5927\u6ce1\u6ce1\u51fa\u73b0\u65f6\u7cd6\u8272\u5b8c\u6210 \u9700\u8981\u5728\u6b64\u65f6\u5feb\u901f\u8fdb\u884c\u4e0b\u4e00\u6b65\u64cd\u4f5c\uff08\u65e0\u8bba\u54ea\u79cd\u64cd\u4f5c\u90fd\u4e00\u5b9a\u8981\u63d0\u524d\u51c6\u5907\u597d\u5e76\u5feb\u901f\uff01\u5426\u5219\u706b\u5019\u8fc7\u5927\u7cd6\u8272\u53d1\u82e6\uff09\uff0c\u6839\u636e\u83dc\u54c1\u6d3e\u522b\u4ee5\u53ca\u4e2a\u4eba\u53e3\u5473\u4f5c\u51fa\u9009\u62e9 \u64cd\u4f5c 1\uff1a\u53ef\u4ee5\u76f4\u63a5\u52a0 400ml \u5f00\u6c34\u964d\u6e29 \u64cd\u4f5c 2\uff1a\u4e5f\u53ef\u4ee5\u52a0\u5165\u8471\u59dc\u849c\u82b1\u6912\u7b49\u8c03\u5473\u54c1\u8fdb\u884c\u7ffb\u7092","title":"\u7cd6\u8272"},{"location":"dishes/condiment/%E7%B3%96%E8%89%B2/#_1","text":"","title":"\u7cd6\u8272\u7684\u505a\u6cd5"},{"location":"dishes/condiment/%E7%B3%96%E8%89%B2/#_2","text":"\u7cd6\uff08\u4efb\u9009\u5176\u4e00\uff09\uff1a \u51b0\u7cd6\uff1a\u7092\u51fa\u6765\u7684 \u7cd6\u8272 \u8272\u6cfd\u6700\u4e3a\u9c9c\u8273\uff0c\u7ea2\u4eae\uff0c\u5fc5\u987b\u6c34\u6cb9\u7092\uff0c\u4e0d\u52a0\u6c34\u878d\u5316\u4f1a\u5f88\u6162 \u767d\u7802\u7cd6\uff1a\u5fc5\u987b\u6c34\u6cb9\u7092\uff0c\u4e0d\u52a0\u6c34\u878d\u5316\u4f1a\u5f88\u6162 \u7ef5\u767d\u7cd6\uff1a\u53ef\u4ee5\u4e0d\u52a0\u6c34 \u7092\u7cd6\u8272\u8fc7\u7a0b\u706b\u4e0d\u8981\u592a\u5927\uff01\uff01\uff01\u7535\u78c1\u7089\u6e29\u5ea6\u4e0d\u591f\uff0c\u706b\u5019\u8fc7\u4e86\u53d1\u82e6\uff0c\u4e0d\u591f\u53d1\u751c","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/condiment/%E7%B3%96%E8%89%B2/#_3","text":"\u6cb9 \uff1a100ml \u5f00\u6c34 \uff1a500ml \u7cd6 \uff08\u8fd9\u91cc\u4ee5\u51b0\u7cd6\u4e3a\u4f8b\uff09","title":"\u8ba1\u91cf"},{"location":"dishes/condiment/%E7%B3%96%E8%89%B2/#_4","text":"\u5f00\u706b\uff0c\u5e76\u5411\u9505\u4e2d\u5012\u5165 100ml \u5f00\u6c34 1 \u518d\u5411\u9505\u4e2d\u5012\u5165 100ml \u6cb9\uff0c\u4e0e\u7b2c\u4e00\u6b65\u95f4\u9694\u8d8a\u77ed\u8d8a\u597d\uff0c\u6b64\u65f6\u9505\u4e3a\u5927\u706b\u4e2d\u706b\u90fd\u53ef\u4ee5\uff0c\u7740\u6025\u7684\u8bdd\u53ef\u4ee5\u5927\u706b \u653e\u5165\u51b0\u7cd6\uff08\u5982\u679c\u51b0\u7cd6\u8fc7\u4e8e\u8026\u5408\uff0c\u53ef\u4ee5\u63d0\u524d\u6572\u788e\uff0c\u505a\u5230\u8026\u5408\u5ea6\u8d8a\u4f4e\u8d8a\u597d\uff09 \u8c03\u6574\u706b\u529b\u4e3a\u4e2d\u706b \u5f00\u59cb\u6405\u62cc \u8981\u4e00\u76f4\u4e00\u76f4\u4e00\u76f4\u6405\u62cc\uff0c\u53d8\u6210\u68d5\u8910\u8272\uff0c\u6b64\u65f6 \u8f6c\u4e3a\u5c0f\u706b \u518d\u53d8\u7a00\uff0c\u53d8\u7ea2\u8336\u8272\uff0c\u518d\u53d8\u6210\u9171\u7ea2\u8272\u540e\u8d77\u5c0f\u6ce1\u6ce1\uff0c\u51c6\u5907\u597d\u6267\u884c\u4e0b\u9762\u7684 \u64cd\u4f5c1 or \u64cd\u4f5c2 \u5c0f\u6ce1\u6ce1\u4f1a\u9010\u6e10\u6d88\u5931\uff0c\u4e4b\u540e\u4f1a\u51fa\u73b0\u5927\u6ce1\u6ce1\uff0c\u5927\u6ce1\u6ce1\u51fa\u73b0\u65f6\u7cd6\u8272\u5b8c\u6210 \u9700\u8981\u5728\u6b64\u65f6\u5feb\u901f\u8fdb\u884c\u4e0b\u4e00\u6b65\u64cd\u4f5c\uff08\u65e0\u8bba\u54ea\u79cd\u64cd\u4f5c\u90fd\u4e00\u5b9a\u8981\u63d0\u524d\u51c6\u5907\u597d\u5e76\u5feb\u901f\uff01\u5426\u5219\u706b\u5019\u8fc7\u5927\u7cd6\u8272\u53d1\u82e6\uff09\uff0c\u6839\u636e\u83dc\u54c1\u6d3e\u522b\u4ee5\u53ca\u4e2a\u4eba\u53e3\u5473\u4f5c\u51fa\u9009\u62e9 \u64cd\u4f5c 1\uff1a\u53ef\u4ee5\u76f4\u63a5\u52a0 400ml \u5f00\u6c34\u964d\u6e29 \u64cd\u4f5c 2\uff1a\u4e5f\u53ef\u4ee5\u52a0\u5165\u8471\u59dc\u849c\u82b1\u6912\u7b49\u8c03\u5473\u54c1\u8fdb\u884c\u7ffb\u7092","title":"\u64cd\u4f5c"},{"location":"dishes/condiment/%E7%B3%96%E9%86%8B%E6%B1%81/","text":"\u7cd6\u918b\u6c41\u7684\u505a\u6cd5 \u7cd6\u918b\u6c41\u901a\u5e38\u60c5\u51b5\u4e0b\u7531\u6e05\u6c34\u3001\u767d\u7cd6\u3001\u767d\u918b\u7b49\u5236\u6210\uff0c\u6709\u4e9b\u4eba\u559c\u6b22\u653e\u4e00\u4e9b\u756a\u8304\u9171\u6765\u589e\u6dfb\u4e0d\u4e00\u6837\u7684\u9178\u751c\u5473\u6216\u653e\u4e00\u4e9b\u6dc0\u7c89\u6765\u589e\u52a0\u83dc\u80b4\u6c64\u6c41\u7684\u7c98\u6027\u548c\u6d53\u5ea6\uff0c\u7cd6\u918b\u6c41\u53ef\u7528\u4e8e\u7cd6\u918b\u9c7c\u3001\u7cd6\u918b\u91cc\u810a\u3001\u7cd6\u918b\u6392\u9aa8\u7b49\u83dc\u54c1\u7684\u5236\u4f5c \u53ef\u4f9d\u636e\u7cd6\u918b\u6c41\u914d\u5236\u7684\u7ecf\u5178\u6bd4\u4f8b 1\uff1a2\uff1a3\uff1a4\uff1a5 \u6765\u8c03\u5236\u7cd6\u918b\u6c41 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u6e05\u6c34 \u767d\u7cd6 \u767d\u918b/\u7c73\u918b \u6599\u9152 \u751f\u62bd \u8ba1\u7b97 \u6e05\u6c34(50ml) \u751f\u62bd(40ml) \u767d\u7cd6(30g) \u767d\u918b(20ml) \u6599\u9152(10ml) \u64cd\u4f5c \u6309\u7167\u6bd4\u4f8b\u5c06\u5404\u8c03\u6599\u5728\u5c0f\u7897\u4e2d\u6405\u62cc\u5747\u5300 \u6309\u4e0d\u540c\u83dc\u80b4\u7684\u65b9\u5f0f\u5904\u7406\u5b8c\u6bd5\u540e\uff0c\u5c06\u914d\u5236\u597d\u7684\u7cd6\u918b\u6c41\u5012\u5165\u9505\u4e2d \u6839\u636e\u5404\u83dc\u80b4\u7684\u4e0d\u540c\uff0c\u70f9\u5236 5-10 \u5206\u949f \u5927\u706b\u6536\u6c41\uff0c\u53ef\u589e\u52a0\u83dc\u7684\u6d53\u5ea6\u3001\u9999\u5473\u548c\u5149\u6cfd \u9644\u52a0\u5185\u5bb9 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u7cd6\u918b\u6c41"},{"location":"dishes/condiment/%E7%B3%96%E9%86%8B%E6%B1%81/#_1","text":"\u7cd6\u918b\u6c41\u901a\u5e38\u60c5\u51b5\u4e0b\u7531\u6e05\u6c34\u3001\u767d\u7cd6\u3001\u767d\u918b\u7b49\u5236\u6210\uff0c\u6709\u4e9b\u4eba\u559c\u6b22\u653e\u4e00\u4e9b\u756a\u8304\u9171\u6765\u589e\u6dfb\u4e0d\u4e00\u6837\u7684\u9178\u751c\u5473\u6216\u653e\u4e00\u4e9b\u6dc0\u7c89\u6765\u589e\u52a0\u83dc\u80b4\u6c64\u6c41\u7684\u7c98\u6027\u548c\u6d53\u5ea6\uff0c\u7cd6\u918b\u6c41\u53ef\u7528\u4e8e\u7cd6\u918b\u9c7c\u3001\u7cd6\u918b\u91cc\u810a\u3001\u7cd6\u918b\u6392\u9aa8\u7b49\u83dc\u54c1\u7684\u5236\u4f5c \u53ef\u4f9d\u636e\u7cd6\u918b\u6c41\u914d\u5236\u7684\u7ecf\u5178\u6bd4\u4f8b 1\uff1a2\uff1a3\uff1a4\uff1a5 \u6765\u8c03\u5236\u7cd6\u918b\u6c41","title":"\u7cd6\u918b\u6c41\u7684\u505a\u6cd5"},{"location":"dishes/condiment/%E7%B3%96%E9%86%8B%E6%B1%81/#_2","text":"\u6e05\u6c34 \u767d\u7cd6 \u767d\u918b/\u7c73\u918b \u6599\u9152 \u751f\u62bd","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/condiment/%E7%B3%96%E9%86%8B%E6%B1%81/#_3","text":"\u6e05\u6c34(50ml) \u751f\u62bd(40ml) \u767d\u7cd6(30g) \u767d\u918b(20ml) \u6599\u9152(10ml)","title":"\u8ba1\u7b97"},{"location":"dishes/condiment/%E7%B3%96%E9%86%8B%E6%B1%81/#_4","text":"\u6309\u7167\u6bd4\u4f8b\u5c06\u5404\u8c03\u6599\u5728\u5c0f\u7897\u4e2d\u6405\u62cc\u5747\u5300 \u6309\u4e0d\u540c\u83dc\u80b4\u7684\u65b9\u5f0f\u5904\u7406\u5b8c\u6bd5\u540e\uff0c\u5c06\u914d\u5236\u597d\u7684\u7cd6\u918b\u6c41\u5012\u5165\u9505\u4e2d \u6839\u636e\u5404\u83dc\u80b4\u7684\u4e0d\u540c\uff0c\u70f9\u5236 5-10 \u5206\u949f \u5927\u706b\u6536\u6c41\uff0c\u53ef\u589e\u52a0\u83dc\u7684\u6d53\u5ea6\u3001\u9999\u5473\u548c\u5149\u6cfd","title":"\u64cd\u4f5c"},{"location":"dishes/condiment/%E7%B3%96%E9%86%8B%E6%B1%81/#_5","text":"\u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/condiment/%E8%92%9C%E9%A6%99%E9%85%B1%E6%B2%B9/","text":"\u849c\u9999\u8c49\u6cb9\u7684\u505a\u6cd5 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u849c\u5934 \u767d\u829d\u9ebb \u82b1\u751f\u6cb9 \u9171\u6cb9 \u8638\u6599\u789f \u8ba1\u7b97 \u849c\u5934 2 \u74e3 \u767d\u829d\u9ebb 5 \u514b \u82b1\u751f\u6cb9 15 \u6beb\u5347 \u9171\u6cb9 30 \u6beb\u5347 \u8638\u6599\u789f 1 \u4e2a \u64cd\u4f5c \u62cd\u788e\u849c\u5934 \u5f80\u8638\u6599\u789f\u4e2d\u52a0\u5165\u9171\u6cb9 \u8d77\u9505\uff0c\u52a0\u5165\u82b1\u751f\u6cb9\uff0c\u7b49\u5230\u6cb9\u6e29\u6eda\u70eb\u540e\u52a0\u5165\u62cd\u597d\u7684\u849c\u5934\uff0c\u70b8\u534a\u5206\u949f \u534a\u5206\u949f\u540e\uff0c\u5173\u706b\uff0c\u628a\u70ed\u6cb9\u5012\u5165\u8638\u6599\u789f\uff0c\u7528\u7b77\u5b50\u6405\u62cc\u5373\u53ef \u9644\u52a0\u5185\u5bb9 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u849c\u9999\u9171\u6cb9"},{"location":"dishes/condiment/%E8%92%9C%E9%A6%99%E9%85%B1%E6%B2%B9/#_1","text":"","title":"\u849c\u9999\u8c49\u6cb9\u7684\u505a\u6cd5"},{"location":"dishes/condiment/%E8%92%9C%E9%A6%99%E9%85%B1%E6%B2%B9/#_2","text":"\u849c\u5934 \u767d\u829d\u9ebb \u82b1\u751f\u6cb9 \u9171\u6cb9 \u8638\u6599\u789f","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/condiment/%E8%92%9C%E9%A6%99%E9%85%B1%E6%B2%B9/#_3","text":"\u849c\u5934 2 \u74e3 \u767d\u829d\u9ebb 5 \u514b \u82b1\u751f\u6cb9 15 \u6beb\u5347 \u9171\u6cb9 30 \u6beb\u5347 \u8638\u6599\u789f 1 \u4e2a","title":"\u8ba1\u7b97"},{"location":"dishes/condiment/%E8%92%9C%E9%A6%99%E9%85%B1%E6%B2%B9/#_4","text":"\u62cd\u788e\u849c\u5934 \u5f80\u8638\u6599\u789f\u4e2d\u52a0\u5165\u9171\u6cb9 \u8d77\u9505\uff0c\u52a0\u5165\u82b1\u751f\u6cb9\uff0c\u7b49\u5230\u6cb9\u6e29\u6eda\u70eb\u540e\u52a0\u5165\u62cd\u597d\u7684\u849c\u5934\uff0c\u70b8\u534a\u5206\u949f \u534a\u5206\u949f\u540e\uff0c\u5173\u706b\uff0c\u628a\u70ed\u6cb9\u5012\u5165\u8638\u6599\u789f\uff0c\u7528\u7b77\u5b50\u6405\u62cc\u5373\u53ef","title":"\u64cd\u4f5c"},{"location":"dishes/condiment/%E8%92%9C%E9%A6%99%E9%85%B1%E6%B2%B9/#_5","text":"\u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/condiment/%E6%B2%B9%E6%B3%BC%E8%BE%A3%E5%AD%90/%E6%B2%B9%E6%B3%BC%E8%BE%A3%E5%AD%90/","text":"\u6cb9\u6cfc\u8fa3\u5b50\u7684\u505a\u6cd5 \u5236\u4f5c\u8017\u65f6 10 \u5206\u949f \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u849c\u5934 1 \u4e2a \u5e72\u8fa3\u6912\u9762 100 \u514b \u76d0 5 \u514b \u719f\u767d\u829d\u9ebb 15 \u514b \u5c0f\u7c73\u6912 1 \u4e2a \u82b1\u751f\u6cb9 150 \u6beb\u5347 \uff08\u53ef\u7528\u83dc\u7c7d\u6cb9\u66ff\u6362\uff09 \u5bb6\u5ead\u5c0f\u9676\u74f7\u7897 1 \u4e2a \u5bb6\u5ead\u5c0f\u94c1\u52fa 1 \u4e2a \u4e94\u9999\u7c89 10 \u514b\uff08\u53ef\u9009\uff09 \u8349\u5bc7 1 \u4e2a\uff08\u53ef\u9009\uff09 \u5c0f\u8471 3-5 \u6839\uff08\u53ef\u9009\uff09 \u5176\u4ed6\u914d\u6599\uff1a\u516b\u89d2(1)\u3001\u82b1\u6912\uff0820-50 \u7c92\u90fd\u53ef\uff0c\u770b\u4e2a\u4eba\u53e3\u5473\uff09\u3001\u9999\u53f6\uff082-3 \u7247\uff09\u3001\u767d\u82b7\uff082-3 \u7247\uff09\u3001\u59dc\u7247\uff08\u5927\u62c7\u6307\u7c97\u7ec6\u7684\u59dc\u5207\u7247\uff09\uff08\u53ef\u9009\uff09 \u7cd6 30 \u514b \u767d\u918b 5 \u514b\uff08\u5927\u6982\u5c31\u662f\u5c0f\u94c1\u52fa\u4e00\u52fa\u7684\u91cf\uff09 \u64cd\u4f5c \u62ff\u51fa\u849c\u5934\u63b0 2 \u4e2a \u5c0f\u849c\u5934 \u53bb\u76ae \u62ff\u51fa\u7827\u677f\u5241\u788e \u5c0f\u849c\u5934 \u3001 \u5c0f\u7c73\u6912 \u62ff\u51fa\u7897\u5012\u5165 \u82b1\u751f\u6cb9 \u6cb9\u70ed\u653e\u5165 \u5176\u4ed6\u914d\u6599 \u548c \u5c0f\u8471 ,\u7b49\u5230\u9999\u6599\u53d8\u7126\uff0c\u635e\u51fa\u6254\u6389 \u62ff\u51fa\u94c1\u9505\u5c06\u7897\u5185\u7684\u6cb9\u653e\u5165\u52a0\u70ed 2 \u5206\u949f\uff08\u83dc\u7c7d\u6cb9\u70e7\u81f3\u5192\u70df\uff09 \u6b64\u65f6\u662f\u7a7a\u7897 \u5f80\u7a7a\u7897\u52a0\u5165 \u5e72\u8fa3\u6912\u9762 \u3001 \u767d\u829d\u9ebb \u3001 \u849c\u672b \u3001 \u5c0f\u7c73\u6912 \u3001 \u76d0 \u3001 \u4e94\u9999\u7c89 \u3001 \u8349\u5bc7 \u4f5c\u4e3a\"\u8c03\u6599\" \u5173\u706b\u5c06\u6cb9\u6e29\u51b7\u5374\u81f3 210 \u6444\u6c0f\u5ea6 \u5c06\u9505\u5185\u70ed\u6cb9\u5012\u5165\u7897\u5185\u5e76\u7528\u52fa\u6405\u62cc\u5373\u53ef\uff08\u53ef\u4ee5\u5728 165 \u6444\u6c0f\u5ea6\u65f6\u52a0\u5165\u540c\u6837\"\u8c03\u6599\"\u7684\u7897\u6700\u540e\u8fdb\u884c\u6df7\u5408\u8fdb\u884c\u589e\u8fa3\uff09 \u5012\u5165\u70ed\u6cb9\u7a0d\u5fae\u6405\u62cc\u540e\u653e\u5165\u767d\u918b\uff0c\u6b64\u65f6\u4f1a\u91cd\u65b0\u6cb8\u817e\u3002\u7ee7\u7eed\u8fdb\u884c\u6405\u62cc\uff0c\u767d\u918b\u589e\u9999\u3002 \u6cb9\u6cfc\u8fa3\u5b50\u51b7\u5374\u5230\u6e29\u70ed\u653e\u767d\u7cd6\u548c\u5473\u7cbe\uff0c\u767d\u7cd6\u53ef\u4ee5\u662f\u8fa3\u5473\u67d4\u548c\uff0c\u4e0d\u4f1a\u90a3\u4e48\u7684\u545b\u53e3 \u9644\u52a0\u5185\u5bb9 \u4e94\u9999\u7c89\u3001\u8349\u5bc7\u4f5c\u4e3a\"\u8c03\u6599\"\u52a0\u5165\uff0c\u53ef\u4ee5\u589e\u52a0\u9999\u5473\uff0c\u4f7f\u6cb9\u6cfc\u8fa3\u5b50\u66f4\u9999 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u6cb9\u6cfc\u8fa3\u5b50"},{"location":"dishes/condiment/%E6%B2%B9%E6%B3%BC%E8%BE%A3%E5%AD%90/%E6%B2%B9%E6%B3%BC%E8%BE%A3%E5%AD%90/#_1","text":"","title":"\u6cb9\u6cfc\u8fa3\u5b50\u7684\u505a\u6cd5"},{"location":"dishes/condiment/%E6%B2%B9%E6%B3%BC%E8%BE%A3%E5%AD%90/%E6%B2%B9%E6%B3%BC%E8%BE%A3%E5%AD%90/#_2","text":"10 \u5206\u949f","title":"\u5236\u4f5c\u8017\u65f6"},{"location":"dishes/condiment/%E6%B2%B9%E6%B3%BC%E8%BE%A3%E5%AD%90/%E6%B2%B9%E6%B3%BC%E8%BE%A3%E5%AD%90/#_3","text":"\u849c\u5934 1 \u4e2a \u5e72\u8fa3\u6912\u9762 100 \u514b \u76d0 5 \u514b \u719f\u767d\u829d\u9ebb 15 \u514b \u5c0f\u7c73\u6912 1 \u4e2a \u82b1\u751f\u6cb9 150 \u6beb\u5347 \uff08\u53ef\u7528\u83dc\u7c7d\u6cb9\u66ff\u6362\uff09 \u5bb6\u5ead\u5c0f\u9676\u74f7\u7897 1 \u4e2a \u5bb6\u5ead\u5c0f\u94c1\u52fa 1 \u4e2a \u4e94\u9999\u7c89 10 \u514b\uff08\u53ef\u9009\uff09 \u8349\u5bc7 1 \u4e2a\uff08\u53ef\u9009\uff09 \u5c0f\u8471 3-5 \u6839\uff08\u53ef\u9009\uff09 \u5176\u4ed6\u914d\u6599\uff1a\u516b\u89d2(1)\u3001\u82b1\u6912\uff0820-50 \u7c92\u90fd\u53ef\uff0c\u770b\u4e2a\u4eba\u53e3\u5473\uff09\u3001\u9999\u53f6\uff082-3 \u7247\uff09\u3001\u767d\u82b7\uff082-3 \u7247\uff09\u3001\u59dc\u7247\uff08\u5927\u62c7\u6307\u7c97\u7ec6\u7684\u59dc\u5207\u7247\uff09\uff08\u53ef\u9009\uff09 \u7cd6 30 \u514b \u767d\u918b 5 \u514b\uff08\u5927\u6982\u5c31\u662f\u5c0f\u94c1\u52fa\u4e00\u52fa\u7684\u91cf\uff09","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/condiment/%E6%B2%B9%E6%B3%BC%E8%BE%A3%E5%AD%90/%E6%B2%B9%E6%B3%BC%E8%BE%A3%E5%AD%90/#_4","text":"\u62ff\u51fa\u849c\u5934\u63b0 2 \u4e2a \u5c0f\u849c\u5934 \u53bb\u76ae \u62ff\u51fa\u7827\u677f\u5241\u788e \u5c0f\u849c\u5934 \u3001 \u5c0f\u7c73\u6912 \u62ff\u51fa\u7897\u5012\u5165 \u82b1\u751f\u6cb9 \u6cb9\u70ed\u653e\u5165 \u5176\u4ed6\u914d\u6599 \u548c \u5c0f\u8471 ,\u7b49\u5230\u9999\u6599\u53d8\u7126\uff0c\u635e\u51fa\u6254\u6389 \u62ff\u51fa\u94c1\u9505\u5c06\u7897\u5185\u7684\u6cb9\u653e\u5165\u52a0\u70ed 2 \u5206\u949f\uff08\u83dc\u7c7d\u6cb9\u70e7\u81f3\u5192\u70df\uff09 \u6b64\u65f6\u662f\u7a7a\u7897 \u5f80\u7a7a\u7897\u52a0\u5165 \u5e72\u8fa3\u6912\u9762 \u3001 \u767d\u829d\u9ebb \u3001 \u849c\u672b \u3001 \u5c0f\u7c73\u6912 \u3001 \u76d0 \u3001 \u4e94\u9999\u7c89 \u3001 \u8349\u5bc7 \u4f5c\u4e3a\"\u8c03\u6599\" \u5173\u706b\u5c06\u6cb9\u6e29\u51b7\u5374\u81f3 210 \u6444\u6c0f\u5ea6 \u5c06\u9505\u5185\u70ed\u6cb9\u5012\u5165\u7897\u5185\u5e76\u7528\u52fa\u6405\u62cc\u5373\u53ef\uff08\u53ef\u4ee5\u5728 165 \u6444\u6c0f\u5ea6\u65f6\u52a0\u5165\u540c\u6837\"\u8c03\u6599\"\u7684\u7897\u6700\u540e\u8fdb\u884c\u6df7\u5408\u8fdb\u884c\u589e\u8fa3\uff09 \u5012\u5165\u70ed\u6cb9\u7a0d\u5fae\u6405\u62cc\u540e\u653e\u5165\u767d\u918b\uff0c\u6b64\u65f6\u4f1a\u91cd\u65b0\u6cb8\u817e\u3002\u7ee7\u7eed\u8fdb\u884c\u6405\u62cc\uff0c\u767d\u918b\u589e\u9999\u3002 \u6cb9\u6cfc\u8fa3\u5b50\u51b7\u5374\u5230\u6e29\u70ed\u653e\u767d\u7cd6\u548c\u5473\u7cbe\uff0c\u767d\u7cd6\u53ef\u4ee5\u662f\u8fa3\u5473\u67d4\u548c\uff0c\u4e0d\u4f1a\u90a3\u4e48\u7684\u545b\u53e3","title":"\u64cd\u4f5c"},{"location":"dishes/condiment/%E6%B2%B9%E6%B3%BC%E8%BE%A3%E5%AD%90/%E6%B2%B9%E6%B3%BC%E8%BE%A3%E5%AD%90/#_5","text":"\u4e94\u9999\u7c89\u3001\u8349\u5bc7\u4f5c\u4e3a\"\u8c03\u6599\"\u52a0\u5165\uff0c\u53ef\u4ee5\u589e\u52a0\u9999\u5473\uff0c\u4f7f\u6cb9\u6cfc\u8fa3\u5b50\u66f4\u9999 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/condiment/%E8%8D%89%E8%8E%93%E9%85%B1/%E8%8D%89%E8%8E%93%E9%85%B1/","text":"\u8349\u8393\u7684\u505a\u6cd5 \u53ef\u4ee5\u4e70\u90a3\u79cd\u4e00\u7b50\u4e00\u7b50\u5356\u7684\u5c0f\u8349\u8393\uff0c\u4e3b\u8981\u662f\u4fbf\u5b9c\u3002\u505a\u6210\u9171\u62b9\u5728\u9762\u5305\u4e0a\u975e\u5e38\u597d\u5403\u3002 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u8349\u8393 \u767d\u7802\u7cd6 \u4fdd\u9c9c\u819c \u8ba1\u7b97 \u6bcf\u4efd\uff1a \u8349\u8393 1200 \u514b \u767d\u7cd6 400 \u514b \uff08\u5982\u9700\u8981\u4f4e\u7cd6\u996e\u98df\uff0c\u53ef\u4ee5\u8003\u8651\u964d\u4f4e\u5230 200g\uff09 \u64cd\u4f5c \u8349\u8393\u6d17\u51c0\u53bb\u53f6 \u5c06\u8349\u8393\u5207\u788e\u653e\u5165\u5408\u9002\u7684\u7897\u4e2d \u5c06\u767d\u7cd6\u5012\u5165\u7897\u4e2d\u4e0e\u8349\u8393\u6405\u62cc\u5747\u5300 \u7897\u7528\u4fdd\u9c9c\u819c\u8986\u76d6\u9759\u7f6e 1 \u5c0f\u65f6 \u5c06\u9759\u7f6e\u7684\u8349\u8393\u548c\u7cd6\u7684\u6df7\u5408\u7269\u5012\u5165\u4e0d\u7c98\u9505\u4e2d\u5f00\u5927\u706b\u70e7\u5f00 \u70e7\u5f00\u540e\u8f6c\u5c0f\u706b\u4e0d\u65ad\u6405\u62cc\u76f4\u81f3\u679c\u9171\u5448\u7c98\u7a20\u72b6\u5173\u706b \u5f85\u8349\u8393\u9171\u51b7\u5374\u540e\u88c5\u5165\u51c6\u5907\u597d\u7684\u5bc6\u5c01\u7f50\u4e2d \u9644\u52a0\u5185\u5bb9 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u8349\u8393\u9171"},{"location":"dishes/condiment/%E8%8D%89%E8%8E%93%E9%85%B1/%E8%8D%89%E8%8E%93%E9%85%B1/#_1","text":"\u53ef\u4ee5\u4e70\u90a3\u79cd\u4e00\u7b50\u4e00\u7b50\u5356\u7684\u5c0f\u8349\u8393\uff0c\u4e3b\u8981\u662f\u4fbf\u5b9c\u3002\u505a\u6210\u9171\u62b9\u5728\u9762\u5305\u4e0a\u975e\u5e38\u597d\u5403\u3002","title":"\u8349\u8393\u7684\u505a\u6cd5"},{"location":"dishes/condiment/%E8%8D%89%E8%8E%93%E9%85%B1/%E8%8D%89%E8%8E%93%E9%85%B1/#_2","text":"\u8349\u8393 \u767d\u7802\u7cd6 \u4fdd\u9c9c\u819c","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/condiment/%E8%8D%89%E8%8E%93%E9%85%B1/%E8%8D%89%E8%8E%93%E9%85%B1/#_3","text":"\u6bcf\u4efd\uff1a \u8349\u8393 1200 \u514b \u767d\u7cd6 400 \u514b \uff08\u5982\u9700\u8981\u4f4e\u7cd6\u996e\u98df\uff0c\u53ef\u4ee5\u8003\u8651\u964d\u4f4e\u5230 200g\uff09","title":"\u8ba1\u7b97"},{"location":"dishes/condiment/%E8%8D%89%E8%8E%93%E9%85%B1/%E8%8D%89%E8%8E%93%E9%85%B1/#_4","text":"\u8349\u8393\u6d17\u51c0\u53bb\u53f6 \u5c06\u8349\u8393\u5207\u788e\u653e\u5165\u5408\u9002\u7684\u7897\u4e2d \u5c06\u767d\u7cd6\u5012\u5165\u7897\u4e2d\u4e0e\u8349\u8393\u6405\u62cc\u5747\u5300 \u7897\u7528\u4fdd\u9c9c\u819c\u8986\u76d6\u9759\u7f6e 1 \u5c0f\u65f6 \u5c06\u9759\u7f6e\u7684\u8349\u8393\u548c\u7cd6\u7684\u6df7\u5408\u7269\u5012\u5165\u4e0d\u7c98\u9505\u4e2d\u5f00\u5927\u706b\u70e7\u5f00 \u70e7\u5f00\u540e\u8f6c\u5c0f\u706b\u4e0d\u65ad\u6405\u62cc\u76f4\u81f3\u679c\u9171\u5448\u7c98\u7a20\u72b6\u5173\u706b \u5f85\u8349\u8393\u9171\u51b7\u5374\u540e\u88c5\u5165\u51c6\u5907\u597d\u7684\u5bc6\u5c01\u7f50\u4e2d","title":"\u64cd\u4f5c"},{"location":"dishes/condiment/%E8%8D%89%E8%8E%93%E9%85%B1/%E8%8D%89%E8%8E%93%E9%85%B1/#_5","text":"\u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/condiment/%E8%94%97%E7%B3%96%E7%B3%96%E6%B5%86/%E8%94%97%E7%B3%96%E7%B3%96%E6%B5%86/","text":"\u8517\u7cd6\u7cd6\u6d46\u7684\u505a\u6cd5 \u5c06\u7cd6\u4e8b\u5148\u6eb6\u89e3\u597d\u4fbf\u4e8e\u5728\u914d\u5236\u996e\u6599\uff08\u7279\u522b\u662f\u51b7\u996e\uff09\u65f6\u7ed9\u996e\u6599\u589e\u751c \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u539f\u6599 \u767d\u7802\u7cd6 \u6c34 \u5de5\u5177 \u53ef\u5bc6\u5c01\u5bb9\u5668\uff08\u5efa\u8bae\u4f7f\u7528\u9ad8\u787c\u7845\u8bd5\u5242\u74f6\uff0c\u4fbf\u5b9c\uff09 \u8ba1\u7b97 \u5efa\u8bae\u6bd4\u4f8b=>\u7cd6 : \u6c34 = 1 : 1\uff0c\u8fd9\u6837\u65b9\u4fbf\u8fdb\u884c\u7cd6\u91cf\u63a7\u5236\uff0c\u6bd4\u5982\u60f3\u8981 15 \u514b\u7cd6\uff0c\u5c31\u91cf\u53d6 30 \u514b\u7684\u7cd6\u6d46 \u6c34 100 \u514b \u767d\u7802\u7cd6 100 \u514b \u64cd\u4f5c \u5c06\u79f0\u597d\u7684\u767d\u7802\u7cd6\u7684\u996e\u7528\u6c34\u4e8e\u5bb9\u5668\u6df7\u5300 \u5bb9\u5668\u5c01\u76d6\u653e\u51b0\u7bb1\u51b7\u85cf \u9644\u52a0\u5185\u5bb9 \u6c34\u65e0\u8bba\u51b7\u70ed\u90fd\u53ef\uff0c\u5982\u679c\u6bd4\u8f83\u6025\u7528\uff0c\u53ef\u7528\u70ed\u6c34\u6eb6\u89e3\u540e\u518d\u51b7\u5374\u7cd6\u6d46\u3002 \u914d\u5236\u597d\u7684\u7cd6\u6d46\u4e0d\u4f1a\u8f7b\u6613\u53d8\u8d28\uff0c\u5728\u51b7\u85cf\u72b6\u6001\u4e0b\u4fdd\u5b58\u4e00\u5468\u901a\u5e38\u662f\u6ca1\u95ee\u9898\u7684\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u8517\u7cd6\u7cd6\u6d46"},{"location":"dishes/condiment/%E8%94%97%E7%B3%96%E7%B3%96%E6%B5%86/%E8%94%97%E7%B3%96%E7%B3%96%E6%B5%86/#_1","text":"\u5c06\u7cd6\u4e8b\u5148\u6eb6\u89e3\u597d\u4fbf\u4e8e\u5728\u914d\u5236\u996e\u6599\uff08\u7279\u522b\u662f\u51b7\u996e\uff09\u65f6\u7ed9\u996e\u6599\u589e\u751c","title":"\u8517\u7cd6\u7cd6\u6d46\u7684\u505a\u6cd5"},{"location":"dishes/condiment/%E8%94%97%E7%B3%96%E7%B3%96%E6%B5%86/%E8%94%97%E7%B3%96%E7%B3%96%E6%B5%86/#_2","text":"\u539f\u6599 \u767d\u7802\u7cd6 \u6c34 \u5de5\u5177 \u53ef\u5bc6\u5c01\u5bb9\u5668\uff08\u5efa\u8bae\u4f7f\u7528\u9ad8\u787c\u7845\u8bd5\u5242\u74f6\uff0c\u4fbf\u5b9c\uff09","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/condiment/%E8%94%97%E7%B3%96%E7%B3%96%E6%B5%86/%E8%94%97%E7%B3%96%E7%B3%96%E6%B5%86/#_3","text":"\u5efa\u8bae\u6bd4\u4f8b=>\u7cd6 : \u6c34 = 1 : 1\uff0c\u8fd9\u6837\u65b9\u4fbf\u8fdb\u884c\u7cd6\u91cf\u63a7\u5236\uff0c\u6bd4\u5982\u60f3\u8981 15 \u514b\u7cd6\uff0c\u5c31\u91cf\u53d6 30 \u514b\u7684\u7cd6\u6d46 \u6c34 100 \u514b \u767d\u7802\u7cd6 100 \u514b","title":"\u8ba1\u7b97"},{"location":"dishes/condiment/%E8%94%97%E7%B3%96%E7%B3%96%E6%B5%86/%E8%94%97%E7%B3%96%E7%B3%96%E6%B5%86/#_4","text":"\u5c06\u79f0\u597d\u7684\u767d\u7802\u7cd6\u7684\u996e\u7528\u6c34\u4e8e\u5bb9\u5668\u6df7\u5300 \u5bb9\u5668\u5c01\u76d6\u653e\u51b0\u7bb1\u51b7\u85cf","title":"\u64cd\u4f5c"},{"location":"dishes/condiment/%E8%94%97%E7%B3%96%E7%B3%96%E6%B5%86/%E8%94%97%E7%B3%96%E7%B3%96%E6%B5%86/#_5","text":"\u6c34\u65e0\u8bba\u51b7\u70ed\u90fd\u53ef\uff0c\u5982\u679c\u6bd4\u8f83\u6025\u7528\uff0c\u53ef\u7528\u70ed\u6c34\u6eb6\u89e3\u540e\u518d\u51b7\u5374\u7cd6\u6d46\u3002 \u914d\u5236\u597d\u7684\u7cd6\u6d46\u4e0d\u4f1a\u8f7b\u6613\u53d8\u8d28\uff0c\u5728\u51b7\u85cf\u72b6\u6001\u4e0b\u4fdd\u5b58\u4e00\u5468\u901a\u5e38\u662f\u6ca1\u95ee\u9898\u7684\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/dessert/%E6%88%9A%E9%A3%8E%E8%9B%8B%E7%B3%95/","text":"\u621a\u98ce\u86cb\u7cd5\u7684\u505a\u6cd5 \u621a\u98ce\u86cb\u7cd5\u662f\u4e00\u9053\u70d8\u7119\u5165\u95e8\u83dc\u54c1\uff0c\u6709\u4e00\u5b9a\u64cd\u4f5c\u96be\u5ea6\u3002\u4f46\u6210\u529f\u5236\u4f5c\u540e\uff0c\u5176\u53e3\u611f\u7ec6\u817b\u7ef5\u8f6f\uff0c\u4ee4\u4eba\u56de\u5473\u3002\u52a0\u4e0a\u70d8\u70e4\u65f6\u95f4\uff0c\u4e00\u822c\u521d\u5b66\u8005\u9700\u8981 1.5 - 2 \u5c0f\u65f6 \u5373\u53ef\u5b8c\u6210\u3002 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u5de5\u5177 \u70e4\u7bb1\uff08\u7535\u996d\u9505\u53ef\u66ff\u4ee3\uff0c\u4f46\u5927\u591a\u60c5\u51b5\u4e0b\u7531\u4e8e\u9505\u80c6\u6750\u8d28\u95ee\u9898\u6613\u5931\u8d25\uff09 \u6253\u86cb\u5668\uff08\u7535\u52a8\u6700\u597d\uff0c\u624b\u52a8\u8d39\u529b\u4e14\u6709\u4e00\u5b9a\u5931\u8d25\u6982\u7387\uff09\u6216\u7b77\u5b50\uff08\u975e\u5e38\u4e0d\u63a8\u8350\uff09 \u94dd\u5408\u91d1\u9633\u6781\u6a21\u5177\uff08\u5343\u4e07\u4e0d\u80fd\u9009\u4e0d\u6cbe\u6a21\u5177\uff0c\u5e38\u7528\u5c3a\u5bf8\u4e3a 6 \u5bf8\u6216 8 \u5bf8\uff09 \u522e\u5200\uff08\u7528\u4e8e\u7ffb\u62cc\u86cb\u7cd5\u7cca\uff09 \u539f\u6599 \u9e21\u86cb \u767d\u7cd6 \u725b\u5976\uff08\u6216\u6c34\uff09 \u98df\u7528\u6cb9\uff08\u6216\u9ec4\u6cb9\uff0c\u4f46\u9700\u52a0\u70ed\u8f6f\u5316\uff09 \u4f4e\u7b4b\u9762\u7c89\uff08\u63a8\u8350\u60e0\u5b9c\uff09 [\u53ef\u9009] \u67e0\u6aac\u6c41\u6216\u767d\u918b \u8ba1\u7b97 \u6bcf\u4efd\uff0812 \u4e2a\u9762\u79ef\u5355\u4f4d\uff09\uff1a 1 \u4e2a\u9e21\u86cb\uff08\u6b63\u5e38\u4e2d\u7b49\u5927\u5c0f\uff0c\u7ea6 50g\uff09 \u767d\u7cd6 16g \u98df\u7528\u6cb9 8g \u725b\u5976 10g \u4f4e\u7b4b\u9762\u7c89 17g \u5177\u4f53\u6765\u8bf4\uff0c\u5bf9\u4e8e\u5e38\u89c1 6 \u5bf8\u53ca 8 \u5bf8\u86cb\u7cd5\uff1a 6 \u5bf8\uff1a\u5927\u5c0f\u4e3a 3 \u4efd\uff08\u5373\u4e09\u4e2a\u9e21\u86cb\uff09\u3002\u9762\u79ef 36 \u4e2a\u5355\u4f4d\u3002 \u9e21\u86cb 3 \u4e2a\uff0c\u767d\u7cd6 50g\uff0c\u98df\u7528\u6cb9 25g\uff0c\u725b\u5976 30g\uff0c\u4f4e\u7b4b\u9762\u7c89 50g 8 \u5bf8\uff1a\u5927\u5c0f\u4e3a 5 \u4efd\uff08\u5373\u4e94\u4e2a\u9e21\u86cb\uff09\u3002\u9762\u79ef 64 \u4e2a\u5355\u4f4d\u3002 \u9e21\u86cb 5 \u4e2a\uff0c\u767d\u7cd6 80g\uff0c\u98df\u7528\u6cb9 40g\uff0c\u725b\u5976 50g\uff0c\u4f4e\u7b4b\u9762\u7c89 90g \u64cd\u4f5c \u524d\u671f\u5206\u79bb\u64cd\u4f5c \u4ece\u51b0\u7bb1\u4e2d\u53d6\u51fa\u65b0\u9c9c\u7684\u9e21\u86cb \u51c6\u5907\u4e24\u4e2a\u5bb9\u5668\u5e76\u64e6\u5e72\uff0c\u5206\u522b\u76db\u653e\u86cb\u6e05\u4e0e\u86cb\u9ec4 \u5bf9\u76db\u653e\u86cb\u6e05\u7684\u5bb9\u5668\uff0c\u53ef\u7a0d\u6709\u6c34\u73e0\uff0c\u4f46 \u4e0d\u80fd\u6709\u4efb\u4f55\u6cb9 \uff1b\u76db\u653e\u86cb\u9ec4\u7684\u5bb9\u5668\u4e0d\u80fd\u6709\u6c34\u73e0 \u6253\u86cb\uff0c\u624b\u5de5\u6216\u5229\u7528\u5206\u86cb\u5668\uff0c\u5c06\u86cb\u6e05\u4e0e\u86cb\u9ec4\u5206\u79bb\u5230\u4e24\u4e2a\u5bb9\u5668\u4e2d\u3002 \u5206\u79bb\u8fc7\u7a0b\u4e2d\u86cb\u9ec4\u4e0d\u80fd\u7834\u788e\uff0c \u86cb\u6e05\u4e2d\u4e0d\u80fd\u6df7\u6709\u4efb\u4f55\u86cb\u9ec4 \uff0c\u5426\u5219\u4f1a\u4e25\u91cd\u5f71\u54cd\u6253\u53d1\u3002\uff08\u767d\u8272\u7cfb\u5e26\u53ef\u8fdb\u5165\u86cb\u6e05\uff0c\u4e0d\u5f71\u54cd\uff09 \uff08\u6ce8\u610f\uff0c\u4e0d\u4f7f\u7528\u53a8\u623f\u673a\u7684\u60c5\u51b5\u4e0b\uff0c\u76db\u653e\u86cb\u6e05\u7684\u5bb9\u5668\u4e5f\u662f\u6253\u86cb\u7684\u5bb9\u5668\uff0c\u4e3a\u907f\u514d\u6ea2\u51fa\uff0c\u52a0\u5165\u5168\u90e8\u86cb\u6e05\u540e\u4e0d\u8981\u8d85\u8fc7\u5bb9\u5668\u7684 1/8 \uff09 \u672c\u6b65\u9aa4\u4e4b\u524d\u7684\u63cf\u8ff0\u5b58\u5728\u4e00\u5b9a\u95ee\u9898\u5e76\u5df2\u4fee\u6539\uff0c\u611f\u8c22 Issues(#593)\u4e2d @ABAEX \u6307\u51fa\uff1a \u86cb\u6e05\u5bb9\u5668\u800c\u8a00\uff0c\u53ef\u6709\u6c34\u73e0\uff0c\u86cb\u9ec4\u5bb9\u5668\u4e0d\u80fd\u6709\u3002 \u539f\u56e0\uff1a\u6cb9\u4f1a\u5f71\u54cd\u86cb\u767d\u7684\u6253\u53d1\uff0c\u86cb\u6e0585%\u662f\u6c34\uff0c\u7a0d\u6709\u6c34\u73e0\u5e76\u4e0d\u5f71\u54cd\u6253\u53d1\u3002 \u7279\u522b\u65b0\u9c9c\u7684\u9e21\u86cb\u86cb\u6e05\u4f1a\u6bd4\u8f83\u786c\uff0c\u5e94\u5bf9\u786c\u86cb\u6e05 5\u4e2a\u9e21\u86cb\u914d\u65b9\u7684\u8bdd\u52a0\u4e00\u52fa\u6c34(15g)\u4f1a\u5e2e\u52a9\u86cb\u6e05\u6253\u53d1\uff081\u4e2a\u9e21\u86cb\u914d\u65b9\u5219\u662f3g\u6c34\uff09 \u800c\u86cb\u6e05\u6253\u53d1\u9014\u4e2d\u52a0\u7684\u7cd6\uff0c\u5b9e\u9645\u4e5f\u662f\u5148\u878d\u4e8e\u86cb\u6e05\u4e2d\u7684\u6c34\u91cc\uff0c\u6210\u4e3a\u7cd6\u6d46\u6eb6\u6db2\u5305\u88f9\u5728\u6c14\u6ce1\u5916\uff0c\u5bf9\u6253\u53d1\u7684\u6c14\u6ce1\u8d77\u4fdd\u62a4\u4f5c\u7528\u3002 \u6e29\u5ea6\u5bf9\u7cd6\u878d\u4e8e\u6c34\u7684\u901f\u7387\u4ee5\u53ca\u6eb6\u89e3\u5ea6\u5f71\u54cd\u8f83\u5927\uff0c\u521a\u4ece\u51b0\u7bb1\u62ff\u51fa\u7684\u86cb\u6e05\u4e0d\u6613\u6253\u53d1\u3002\u4f46\u6e29\u5ea6\u8f83\u4f4e\u7684\u9e21\u86cb\u5bb9\u6613\u5206\u79bb\u86cb\u6e05\u86cb\u9ec4\uff0c\u5efa\u8bae\u5206\u79bb\u540e\u6062\u590d\u5ba4\u6e29\u518d\u8fdb\u884c\u6253\u53d1\u3002 \u6405\u62cc\u86cb\u9ec4\u6db2 \u5411\u86cb\u9ec4\u4e2d\u52a0\u5165\u98df\u7528\u6cb9\u3001\u725b\u5976\u4ee5\u53ca 1/4 \u7684\u767d\u7cd6\uff0c\u7528\u522e\u5200\u6405\u62cc\u5747\u5300 \u51c6\u5907\u597d\u4f4e\u7b4b\u9762\u7c89\uff0c\u4e00\u8fb9\u6162\u6162\u6492\u5165\u5bb9\u5668\u4e00\u8fb9\u7528\u522e\u5200\u201cZ \u5b57\u5f62\u6405\u62cc\u201d\uff08\u4e4b\u5b57\u5f62\u6405\u62cc\uff09\uff0c\u5373\u522e\u5200\u53ea\u80fd\u6cbf\u7740\u5200\u5203\u7684\u65b9\u5411\u5de6\u53f3\u6216\u524d\u540e\u79fb\u52a8\u3002 \u4e0d\u53ef\u65e0\u5e8f\u5730\u9006\u65f6\u9488\u6216\u987a\u65f6\u9488\u6405\u62cc \u7ee7\u7eed\uff0c\u52a0\u5165\u5168\u90e8\u9762\u7c89\uff0c\u4ecd\u4f7f\u7528\u4e0a\u8ff0\u6405\u62cc\u65b9\u5f0f\uff0c\u76f4\u5230\u6df7\u5408\u5747\u5300\u3001\u65e0\u5e72\u7c89\u72b6\u6001\u3002\uff08\u5c11\u8bb8\u56e2\u5757\u662f\u6b63\u5e38\u73b0\u8c61\uff0c\u53ef\u7ee7\u7eed\u6405\u62cc\u4f7f\u5176\u5206\u6563\uff09 \u9759\u7f6e\uff0c\u5907\u7528 \u611f\u8c22 Issues(#593)\u4e2d @ABAEX \u6307\u51fa\uff0c\u672c\u6b65\u9aa4\u6709\u53e6\u4e00\u79cd\u4e0d\u540c\u7684\u987a\u5e8f\uff1a \u53ef\u5148\u52a0\u5165\u6cb9\uff0c\u7136\u540e\u653e\u5165\u4f4e\u7b4b\u9762\u7c89\u6405\u62cc\uff0c\u6cb9\u4f1a\u76f4\u63a5\u963b\u65ad\u9762\u7b4b\u7684\u5f62\u6210\uff0c\u8f83\u4e3a\u7701\u4e8b\u3002 \u4e4b\u540e\u52a0\u5165\u86cb\u9ec4\u548c\u725b\u5976\u7ee7\u7eed\u6405\u62cc\uff0c\u6b64\u65f6\u518d\u52a0\u5165\u542b\u6c34\u7684\u725b\u5976\u4e5f\u4e0d\u4f1a\u8ba9\u9762\u7c89\u5f62\u6210\u9762\u7b4b\u4e86\u3002 \u6253\u53d1\u86cb\u767d \u51c6\u5907\u597d\u5269\u4f59 3/4 \u7684\u767d\u7cd6\u3002\u5206\u4e3a\u4e09\u4efd\uff0c\u6bcf\u4efd\u4e3a\u603b\u91cf\u7684 1/4 [\u53ef\u9009] \u86cb\u6e05\u4e2d\u52a0\u5165\u67e0\u6aac\u6c41\u6216\u767d\u918b \u6253\u86cb\u5668\u4e2d\u901f\uff0c\u6253\u53d1\u86cb\u767d\u81f3\u6709 \u7c97\u5927\u6c14\u6ce1\u7684\u72b6\u6001 \uff0c\u52a0\u5165 \u7b2c\u4e00\u4efd\u767d\u7cd6 \u6253\u86cb\u5668\u9ad8\u901f\uff0c\u6253\u53d1\u86cb\u767d\u81f3 \u6c14\u6ce1\u8f83\u7ec6\u817b\u7684\u72b6\u6001 \uff0c\u52a0\u5165 \u7b2c\u4e8c\u4efd\u767d\u7cd6 \u6253\u86cb\u5668\u9ad8\u901f\uff0c\u6253\u53d1\u86cb\u767d\u81f3 \u201c\u6e7f\u6027\u53d1\u6ce1\u201d \u7684\u72b6\u6001\uff08\u6b64\u65f6\u63d0\u8d77\u6253\u86cb\u5668\u5934\uff0c\u6709\u957f\u957f\u7684\u5f2f\u66f2\u5c16\u89d2\uff09\uff0c\u52a0\u5165 \u7b2c\u4e09\u4efd\u767d\u7cd6 \u6253\u86cb\u5668\u4e2d\u4f4e\u901f\uff0c\u6253\u53d1\u86cb\u767d\u81f3\u201c\u5e72\u6027\u53d1\u6ce1\u201d\u7684\u72b6\u6001\uff08\u63d0\u8d77\u6253\u86cb\u5668\u5934\uff0c\u6709\u77ed\u5c0f\u76f4\u7acb\u7684\u5c16\u89d2\uff1b\u5012\u6263\u5bb9\u5668\uff0c\u86cb\u767d\u53ef\u7c98\u4f4f\u5bb9\u5668\u4e0d\u6389\u4e0b\u6765\uff09 \u6b64\u65f6\u86cb\u767d\u6253\u53d1\u7a0b\u5ea6\u5df2\u7b26\u5408\u8981\u6c42 \uff08ps\uff1a\u5173\u4e8e\u86cb\u767d\u72b6\u6001\u7684\u5224\u65ad\u53ef\u53c2\u8003\u9644\u4ef6\u94fe\u63a5\u4e2d\u7684\u56fe\u7247\u3002\uff09 \uff08ps2\uff1a\u6253\u86cb\u5668\u5e94\u5c3d\u91cf\u8d34\u8fd1\u5bb9\u5668\u5e95\u90e8\uff0c\u9632\u6b62\u51fa\u73b0\u4e0a\u9762\u6d6e\u7740\u7684\u8868\u5c42\u6253\u53d1\uff0c\u5e95\u90e8\u4ecd\u7136\u662f\u6db2\u4f53\u7684\u60c5\u51b5\uff09 \u6df7\u5408\u6405\u62cc \u7b80\u5355\u6405\u62cc\u51e0\u4e0b\u86cb\u9ec4\u6db2 \u7528\u522e\u5200\u53d6 1/3 \u7684\u86cb\u767d\u971c\uff0c\u52a0\u5165\u5230\u86cb\u9ec4\u7cca\u4e2d \u91c7\u7528\u201c\u7ffb\u62cc\u201d\u7684\u624b\u6cd5\uff0c\u6b64\u624b\u6cd5\u662f\u4e3a\u4e86\u907f\u514d\u6d88\u6ce1\u3002\u4ece\u9644\u5f55\u4e2d\u6458\u5f55\u4e00\u6bb5\uff1a \u5177\u4f53\u7684\u7ffb\u62cc\u624b\u6cd5\u662f\u5148\u7528\u53f3\u624b\u62ff\u522e\u5200\u4ece\u6405\u62cc\u76c6\u4e2d\u5fc3\u63d2\u5165\u9762\u7cca\u5e95\u90e8\uff0c\u7136\u540e\u54118\u70b9\u949f\u65b9\u5411\u522e\u53bb\u76f4\u5230\u78b0\u5230\u76c6\u58c1\uff0c\u987a\u52bf\u8200\u8d77\u9762\u7cca\u63d0\u5230\u7a7a\u4e2d\uff0c\u7136\u540e\u518d\u79fb\u56de\u76c6\u4e2d\u5fc3\u5c06\u9762\u7cca\u653e\u5165\u76c6\u5185\uff0c\u5de6\u624b\u63e1\u4f4f\u6405\u62cc\u76c6\u4ece9\u70b9\u949f\u65b9\u5411\u8f6c\u52307\u70b9\u949f\u65b9\u5411\uff0c\u521a\u597d\u65cb\u8f6c\u4e8660\u5ea6\uff0c\u5c31\u5b8c\u6210\u4e86\u4e00\u6b21\u5faa\u73af\uff0c\u901f\u5ea6\u5927\u7ea6\u662f1\u79d2\u949f\u4e24\u4e0b\u3002\u6b64\u65b9\u6cd5\u51fa\u81ea\u300a\u5c0f\u5c9b\u8001\u5e08\u7684\u86cb\u7cd5\u6559\u5ba4\u300b\uff0c\u6211\u4e2a\u4eba\u89c9\u5f97\u975e\u5e38\u597d\u7528\u3002\u7528\u63a5\u5730\u6c14\u7684\u8bdd\u8bf4\u5c31\u662f\uff0c\u50cf\u7092\u83dc\u4e00\u6837\u7ffb\u7092\u3002 \u5c06 1/3 \u7684\u86cb\u767d\u971c\u4e0e\u86cb\u9ec4\u6db2\u7684\u6df7\u5408\u6db2\u5012\u5165\u5269\u4f59 2/3 \u7684\u86cb\u767d\u971c\u4e2d\uff0c\u7ee7\u7eed\u7ffb\u62cc\u5747\u5300 \u5c06\u86cb\u7cd5\u7cca\u5012\u5165\u6a21\u5177\uff0c\u9707\u8361\u51e0\u4e0b\u907f\u514d\u5927\u6c14\u6ce1 \u70d8\u70e4 \u70d8\u70e4\u603b\u65f6\u95f4\uff1a6 \u5bf8\u86cb\u7cd5 30-35 \u5206\u949f\uff0c8 \u5bf8\u86cb\u7cd5 50 \u5206\u949f\u3002\u6839\u636e\u81ea\u5df1\u70e4\u7bb1\u7279\u6027\u7075\u6d3b\u8c03\u6574\uff0c\u4e00\u822c\u4e0d\u8d85\u8fc7 $\\pm 5$ \u5206\u949f\u3002\uff08\u6700\u540e\u51e0\u5206\u949f\u65f6\u53ef\u5728\u70e4\u7bb1\u524d\u89c2\u5bdf\uff09 \u9009\u62e9 \u53d8\u6e29\u70d8\u70e4 \uff0c\u5206\u4e3a\u4e24\u4e2a\u9636\u6bb5\u3002 \u7b2c\u4e00\u9636\u6bb5\u70e4\u7bb1\u8bbe\u5b9a\u6e29\u5ea6\u4e3a\uff1a\u4e0a\u7ba1 150 \u6444\u6c0f\u5ea6\uff0c\u4e0b\u7ba1 160 \u6444\u6c0f\u5ea6\uff1b \u7b2c\u4e8c\u9636\u6bb5\u6e29\u5ea6\u4e3a\uff1a\u4e0a\u7ba1 160 \u6444\u6c0f\u5ea6\uff0c\u4e0b\u7ba1 170 \u6444\u6c0f\u5ea6\uff1b \u4ee5 \u4e0e\u7b2c\u4e00\u9636\u6bb5\u70d8\u70e4\u6e29\u5ea6\u76f8\u540c\u7684\u6e29\u5ea6\u9884\u70ed \uff0c\u7ea6 10 \u5206\u949f\u53ef\u5230\u8fbe\u9884\u5b9a\u6e29\u5ea6\u3002\uff08\u5efa\u8bae\u6709\u7ecf\u9a8c\u540e\uff0c\u5728\u6df7\u5408\u6405\u62cc\u5f00\u59cb\u65f6\u5373\u53ef\u9884\u70ed\uff09 \u9884\u70ed\u5b8c\u6210\u540e\uff0c\u5c06\u6a21\u5177\u653e\u5165\u70e4\u7bb1\u4e0b\u5c42 \u70d8\u70e4\u603b\u65f6\u957f\u7684\u524d 3/5 \u4e3a\u7b2c\u4e00\u9636\u6bb5\u70d8\u70e4\uff0c\u540e 2/5 \u65f6\u957f\u4e3a\u7b2c\u4e8c\u9636\u6bb5\u70d8\u70e4\u3002\u5207\u6362\u65f6\uff0c\u76f4\u63a5\u8c03\u6574\u70e4\u7bb1\u6e29\u5ea6\u5373\u53ef\u3002 \u70e4\u597d\u540e\uff0c\u51fa\u7089 \u51b7\u5374\u4e0e\u8131\u6a21 [\u53ef\u9009] \u5c06\u6a21\u5177\u4ece\u9ad8\u5904\u843d\u4e0b\uff0c\u9707\u51fa\u5176\u4e2d\u7684\u70ed\u6c14 \u6a21\u5177\u5012\u6263\u4f7f\u86cb\u7cd5\u51b7\u5374 \u8131\u6a21\uff0c\u98df\u7528 \u9644\u52a0\u5185\u5bb9 \u53c2\u8003\u4e86\u4ee5\u4e0b\u6559\u7a0b\uff0c\u6587\u4e2d\u8bf4\u660e\u975e\u5e38\u8be6\u7ec6\u4e14\u6709\u6bcf\u4e00\u6b65\u9aa4\u7684\u914d\u56fe\u3002\u540c\u65f6\uff0c\u5bf9\u4e8e\u4e3a\u4ec0\u4e48\u505a\u67d0\u4e00\u4e2a\u64cd\u4f5c\u3001\u80cc\u540e\u7684\u539f\u7406\u4e5f\u6709\u9610\u91ca\uff0c\u4ee5\u53ca\u51fa\u73b0\u67d0\u4e9b\u95ee\u9898\u7684\u5206\u6790\uff1a \u4e3a\u4e86\u505a\u597d\u8fd9\u4e2a\u621a\u98ce\u86cb\u7cd5\uff0c\u6211\u7528\u4e86\u4e00\u6574\u7bb1\u9e21\u86cb\uff0c\u4ece\u6b64\u544a\u522b\u51f9\u5e95\u548c\u584c\u9677 \u5bf9\u621a\u98ce\u86cb\u7cd5\u800c\u8a00\uff0c\u86cb\u6e05\u6253\u53d1\u662f\u6b21\u8981\u95ee\u9898\uff0c\u5173\u952e\u662f \u70e4\u5236\u65f6\u7684\u6e29\u5ea6\u548c\u65f6\u95f4 \u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u621a\u98ce\u86cb\u7cd5"},{"location":"dishes/dessert/%E6%88%9A%E9%A3%8E%E8%9B%8B%E7%B3%95/#_1","text":"\u621a\u98ce\u86cb\u7cd5\u662f\u4e00\u9053\u70d8\u7119\u5165\u95e8\u83dc\u54c1\uff0c\u6709\u4e00\u5b9a\u64cd\u4f5c\u96be\u5ea6\u3002\u4f46\u6210\u529f\u5236\u4f5c\u540e\uff0c\u5176\u53e3\u611f\u7ec6\u817b\u7ef5\u8f6f\uff0c\u4ee4\u4eba\u56de\u5473\u3002\u52a0\u4e0a\u70d8\u70e4\u65f6\u95f4\uff0c\u4e00\u822c\u521d\u5b66\u8005\u9700\u8981 1.5 - 2 \u5c0f\u65f6 \u5373\u53ef\u5b8c\u6210\u3002","title":"\u621a\u98ce\u86cb\u7cd5\u7684\u505a\u6cd5"},{"location":"dishes/dessert/%E6%88%9A%E9%A3%8E%E8%9B%8B%E7%B3%95/#_2","text":"","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/dessert/%E6%88%9A%E9%A3%8E%E8%9B%8B%E7%B3%95/#_3","text":"\u70e4\u7bb1\uff08\u7535\u996d\u9505\u53ef\u66ff\u4ee3\uff0c\u4f46\u5927\u591a\u60c5\u51b5\u4e0b\u7531\u4e8e\u9505\u80c6\u6750\u8d28\u95ee\u9898\u6613\u5931\u8d25\uff09 \u6253\u86cb\u5668\uff08\u7535\u52a8\u6700\u597d\uff0c\u624b\u52a8\u8d39\u529b\u4e14\u6709\u4e00\u5b9a\u5931\u8d25\u6982\u7387\uff09\u6216\u7b77\u5b50\uff08\u975e\u5e38\u4e0d\u63a8\u8350\uff09 \u94dd\u5408\u91d1\u9633\u6781\u6a21\u5177\uff08\u5343\u4e07\u4e0d\u80fd\u9009\u4e0d\u6cbe\u6a21\u5177\uff0c\u5e38\u7528\u5c3a\u5bf8\u4e3a 6 \u5bf8\u6216 8 \u5bf8\uff09 \u522e\u5200\uff08\u7528\u4e8e\u7ffb\u62cc\u86cb\u7cd5\u7cca\uff09","title":"\u5de5\u5177"},{"location":"dishes/dessert/%E6%88%9A%E9%A3%8E%E8%9B%8B%E7%B3%95/#_4","text":"\u9e21\u86cb \u767d\u7cd6 \u725b\u5976\uff08\u6216\u6c34\uff09 \u98df\u7528\u6cb9\uff08\u6216\u9ec4\u6cb9\uff0c\u4f46\u9700\u52a0\u70ed\u8f6f\u5316\uff09 \u4f4e\u7b4b\u9762\u7c89\uff08\u63a8\u8350\u60e0\u5b9c\uff09 [\u53ef\u9009] \u67e0\u6aac\u6c41\u6216\u767d\u918b","title":"\u539f\u6599"},{"location":"dishes/dessert/%E6%88%9A%E9%A3%8E%E8%9B%8B%E7%B3%95/#_5","text":"\u6bcf\u4efd\uff0812 \u4e2a\u9762\u79ef\u5355\u4f4d\uff09\uff1a 1 \u4e2a\u9e21\u86cb\uff08\u6b63\u5e38\u4e2d\u7b49\u5927\u5c0f\uff0c\u7ea6 50g\uff09 \u767d\u7cd6 16g \u98df\u7528\u6cb9 8g \u725b\u5976 10g \u4f4e\u7b4b\u9762\u7c89 17g \u5177\u4f53\u6765\u8bf4\uff0c\u5bf9\u4e8e\u5e38\u89c1 6 \u5bf8\u53ca 8 \u5bf8\u86cb\u7cd5\uff1a 6 \u5bf8\uff1a\u5927\u5c0f\u4e3a 3 \u4efd\uff08\u5373\u4e09\u4e2a\u9e21\u86cb\uff09\u3002\u9762\u79ef 36 \u4e2a\u5355\u4f4d\u3002 \u9e21\u86cb 3 \u4e2a\uff0c\u767d\u7cd6 50g\uff0c\u98df\u7528\u6cb9 25g\uff0c\u725b\u5976 30g\uff0c\u4f4e\u7b4b\u9762\u7c89 50g 8 \u5bf8\uff1a\u5927\u5c0f\u4e3a 5 \u4efd\uff08\u5373\u4e94\u4e2a\u9e21\u86cb\uff09\u3002\u9762\u79ef 64 \u4e2a\u5355\u4f4d\u3002 \u9e21\u86cb 5 \u4e2a\uff0c\u767d\u7cd6 80g\uff0c\u98df\u7528\u6cb9 40g\uff0c\u725b\u5976 50g\uff0c\u4f4e\u7b4b\u9762\u7c89 90g","title":"\u8ba1\u7b97"},{"location":"dishes/dessert/%E6%88%9A%E9%A3%8E%E8%9B%8B%E7%B3%95/#_6","text":"","title":"\u64cd\u4f5c"},{"location":"dishes/dessert/%E6%88%9A%E9%A3%8E%E8%9B%8B%E7%B3%95/#_7","text":"\u4ece\u51b0\u7bb1\u4e2d\u53d6\u51fa\u65b0\u9c9c\u7684\u9e21\u86cb \u51c6\u5907\u4e24\u4e2a\u5bb9\u5668\u5e76\u64e6\u5e72\uff0c\u5206\u522b\u76db\u653e\u86cb\u6e05\u4e0e\u86cb\u9ec4 \u5bf9\u76db\u653e\u86cb\u6e05\u7684\u5bb9\u5668\uff0c\u53ef\u7a0d\u6709\u6c34\u73e0\uff0c\u4f46 \u4e0d\u80fd\u6709\u4efb\u4f55\u6cb9 \uff1b\u76db\u653e\u86cb\u9ec4\u7684\u5bb9\u5668\u4e0d\u80fd\u6709\u6c34\u73e0 \u6253\u86cb\uff0c\u624b\u5de5\u6216\u5229\u7528\u5206\u86cb\u5668\uff0c\u5c06\u86cb\u6e05\u4e0e\u86cb\u9ec4\u5206\u79bb\u5230\u4e24\u4e2a\u5bb9\u5668\u4e2d\u3002 \u5206\u79bb\u8fc7\u7a0b\u4e2d\u86cb\u9ec4\u4e0d\u80fd\u7834\u788e\uff0c \u86cb\u6e05\u4e2d\u4e0d\u80fd\u6df7\u6709\u4efb\u4f55\u86cb\u9ec4 \uff0c\u5426\u5219\u4f1a\u4e25\u91cd\u5f71\u54cd\u6253\u53d1\u3002\uff08\u767d\u8272\u7cfb\u5e26\u53ef\u8fdb\u5165\u86cb\u6e05\uff0c\u4e0d\u5f71\u54cd\uff09 \uff08\u6ce8\u610f\uff0c\u4e0d\u4f7f\u7528\u53a8\u623f\u673a\u7684\u60c5\u51b5\u4e0b\uff0c\u76db\u653e\u86cb\u6e05\u7684\u5bb9\u5668\u4e5f\u662f\u6253\u86cb\u7684\u5bb9\u5668\uff0c\u4e3a\u907f\u514d\u6ea2\u51fa\uff0c\u52a0\u5165\u5168\u90e8\u86cb\u6e05\u540e\u4e0d\u8981\u8d85\u8fc7\u5bb9\u5668\u7684 1/8 \uff09 \u672c\u6b65\u9aa4\u4e4b\u524d\u7684\u63cf\u8ff0\u5b58\u5728\u4e00\u5b9a\u95ee\u9898\u5e76\u5df2\u4fee\u6539\uff0c\u611f\u8c22 Issues(#593)\u4e2d @ABAEX \u6307\u51fa\uff1a \u86cb\u6e05\u5bb9\u5668\u800c\u8a00\uff0c\u53ef\u6709\u6c34\u73e0\uff0c\u86cb\u9ec4\u5bb9\u5668\u4e0d\u80fd\u6709\u3002 \u539f\u56e0\uff1a\u6cb9\u4f1a\u5f71\u54cd\u86cb\u767d\u7684\u6253\u53d1\uff0c\u86cb\u6e0585%\u662f\u6c34\uff0c\u7a0d\u6709\u6c34\u73e0\u5e76\u4e0d\u5f71\u54cd\u6253\u53d1\u3002 \u7279\u522b\u65b0\u9c9c\u7684\u9e21\u86cb\u86cb\u6e05\u4f1a\u6bd4\u8f83\u786c\uff0c\u5e94\u5bf9\u786c\u86cb\u6e05 5\u4e2a\u9e21\u86cb\u914d\u65b9\u7684\u8bdd\u52a0\u4e00\u52fa\u6c34(15g)\u4f1a\u5e2e\u52a9\u86cb\u6e05\u6253\u53d1\uff081\u4e2a\u9e21\u86cb\u914d\u65b9\u5219\u662f3g\u6c34\uff09 \u800c\u86cb\u6e05\u6253\u53d1\u9014\u4e2d\u52a0\u7684\u7cd6\uff0c\u5b9e\u9645\u4e5f\u662f\u5148\u878d\u4e8e\u86cb\u6e05\u4e2d\u7684\u6c34\u91cc\uff0c\u6210\u4e3a\u7cd6\u6d46\u6eb6\u6db2\u5305\u88f9\u5728\u6c14\u6ce1\u5916\uff0c\u5bf9\u6253\u53d1\u7684\u6c14\u6ce1\u8d77\u4fdd\u62a4\u4f5c\u7528\u3002 \u6e29\u5ea6\u5bf9\u7cd6\u878d\u4e8e\u6c34\u7684\u901f\u7387\u4ee5\u53ca\u6eb6\u89e3\u5ea6\u5f71\u54cd\u8f83\u5927\uff0c\u521a\u4ece\u51b0\u7bb1\u62ff\u51fa\u7684\u86cb\u6e05\u4e0d\u6613\u6253\u53d1\u3002\u4f46\u6e29\u5ea6\u8f83\u4f4e\u7684\u9e21\u86cb\u5bb9\u6613\u5206\u79bb\u86cb\u6e05\u86cb\u9ec4\uff0c\u5efa\u8bae\u5206\u79bb\u540e\u6062\u590d\u5ba4\u6e29\u518d\u8fdb\u884c\u6253\u53d1\u3002","title":"\u524d\u671f\u5206\u79bb\u64cd\u4f5c"},{"location":"dishes/dessert/%E6%88%9A%E9%A3%8E%E8%9B%8B%E7%B3%95/#_8","text":"\u5411\u86cb\u9ec4\u4e2d\u52a0\u5165\u98df\u7528\u6cb9\u3001\u725b\u5976\u4ee5\u53ca 1/4 \u7684\u767d\u7cd6\uff0c\u7528\u522e\u5200\u6405\u62cc\u5747\u5300 \u51c6\u5907\u597d\u4f4e\u7b4b\u9762\u7c89\uff0c\u4e00\u8fb9\u6162\u6162\u6492\u5165\u5bb9\u5668\u4e00\u8fb9\u7528\u522e\u5200\u201cZ \u5b57\u5f62\u6405\u62cc\u201d\uff08\u4e4b\u5b57\u5f62\u6405\u62cc\uff09\uff0c\u5373\u522e\u5200\u53ea\u80fd\u6cbf\u7740\u5200\u5203\u7684\u65b9\u5411\u5de6\u53f3\u6216\u524d\u540e\u79fb\u52a8\u3002 \u4e0d\u53ef\u65e0\u5e8f\u5730\u9006\u65f6\u9488\u6216\u987a\u65f6\u9488\u6405\u62cc \u7ee7\u7eed\uff0c\u52a0\u5165\u5168\u90e8\u9762\u7c89\uff0c\u4ecd\u4f7f\u7528\u4e0a\u8ff0\u6405\u62cc\u65b9\u5f0f\uff0c\u76f4\u5230\u6df7\u5408\u5747\u5300\u3001\u65e0\u5e72\u7c89\u72b6\u6001\u3002\uff08\u5c11\u8bb8\u56e2\u5757\u662f\u6b63\u5e38\u73b0\u8c61\uff0c\u53ef\u7ee7\u7eed\u6405\u62cc\u4f7f\u5176\u5206\u6563\uff09 \u9759\u7f6e\uff0c\u5907\u7528 \u611f\u8c22 Issues(#593)\u4e2d @ABAEX \u6307\u51fa\uff0c\u672c\u6b65\u9aa4\u6709\u53e6\u4e00\u79cd\u4e0d\u540c\u7684\u987a\u5e8f\uff1a \u53ef\u5148\u52a0\u5165\u6cb9\uff0c\u7136\u540e\u653e\u5165\u4f4e\u7b4b\u9762\u7c89\u6405\u62cc\uff0c\u6cb9\u4f1a\u76f4\u63a5\u963b\u65ad\u9762\u7b4b\u7684\u5f62\u6210\uff0c\u8f83\u4e3a\u7701\u4e8b\u3002 \u4e4b\u540e\u52a0\u5165\u86cb\u9ec4\u548c\u725b\u5976\u7ee7\u7eed\u6405\u62cc\uff0c\u6b64\u65f6\u518d\u52a0\u5165\u542b\u6c34\u7684\u725b\u5976\u4e5f\u4e0d\u4f1a\u8ba9\u9762\u7c89\u5f62\u6210\u9762\u7b4b\u4e86\u3002","title":"\u6405\u62cc\u86cb\u9ec4\u6db2"},{"location":"dishes/dessert/%E6%88%9A%E9%A3%8E%E8%9B%8B%E7%B3%95/#_9","text":"\u51c6\u5907\u597d\u5269\u4f59 3/4 \u7684\u767d\u7cd6\u3002\u5206\u4e3a\u4e09\u4efd\uff0c\u6bcf\u4efd\u4e3a\u603b\u91cf\u7684 1/4 [\u53ef\u9009] \u86cb\u6e05\u4e2d\u52a0\u5165\u67e0\u6aac\u6c41\u6216\u767d\u918b \u6253\u86cb\u5668\u4e2d\u901f\uff0c\u6253\u53d1\u86cb\u767d\u81f3\u6709 \u7c97\u5927\u6c14\u6ce1\u7684\u72b6\u6001 \uff0c\u52a0\u5165 \u7b2c\u4e00\u4efd\u767d\u7cd6 \u6253\u86cb\u5668\u9ad8\u901f\uff0c\u6253\u53d1\u86cb\u767d\u81f3 \u6c14\u6ce1\u8f83\u7ec6\u817b\u7684\u72b6\u6001 \uff0c\u52a0\u5165 \u7b2c\u4e8c\u4efd\u767d\u7cd6 \u6253\u86cb\u5668\u9ad8\u901f\uff0c\u6253\u53d1\u86cb\u767d\u81f3 \u201c\u6e7f\u6027\u53d1\u6ce1\u201d \u7684\u72b6\u6001\uff08\u6b64\u65f6\u63d0\u8d77\u6253\u86cb\u5668\u5934\uff0c\u6709\u957f\u957f\u7684\u5f2f\u66f2\u5c16\u89d2\uff09\uff0c\u52a0\u5165 \u7b2c\u4e09\u4efd\u767d\u7cd6 \u6253\u86cb\u5668\u4e2d\u4f4e\u901f\uff0c\u6253\u53d1\u86cb\u767d\u81f3\u201c\u5e72\u6027\u53d1\u6ce1\u201d\u7684\u72b6\u6001\uff08\u63d0\u8d77\u6253\u86cb\u5668\u5934\uff0c\u6709\u77ed\u5c0f\u76f4\u7acb\u7684\u5c16\u89d2\uff1b\u5012\u6263\u5bb9\u5668\uff0c\u86cb\u767d\u53ef\u7c98\u4f4f\u5bb9\u5668\u4e0d\u6389\u4e0b\u6765\uff09 \u6b64\u65f6\u86cb\u767d\u6253\u53d1\u7a0b\u5ea6\u5df2\u7b26\u5408\u8981\u6c42 \uff08ps\uff1a\u5173\u4e8e\u86cb\u767d\u72b6\u6001\u7684\u5224\u65ad\u53ef\u53c2\u8003\u9644\u4ef6\u94fe\u63a5\u4e2d\u7684\u56fe\u7247\u3002\uff09 \uff08ps2\uff1a\u6253\u86cb\u5668\u5e94\u5c3d\u91cf\u8d34\u8fd1\u5bb9\u5668\u5e95\u90e8\uff0c\u9632\u6b62\u51fa\u73b0\u4e0a\u9762\u6d6e\u7740\u7684\u8868\u5c42\u6253\u53d1\uff0c\u5e95\u90e8\u4ecd\u7136\u662f\u6db2\u4f53\u7684\u60c5\u51b5\uff09","title":"\u6253\u53d1\u86cb\u767d"},{"location":"dishes/dessert/%E6%88%9A%E9%A3%8E%E8%9B%8B%E7%B3%95/#_10","text":"\u7b80\u5355\u6405\u62cc\u51e0\u4e0b\u86cb\u9ec4\u6db2 \u7528\u522e\u5200\u53d6 1/3 \u7684\u86cb\u767d\u971c\uff0c\u52a0\u5165\u5230\u86cb\u9ec4\u7cca\u4e2d \u91c7\u7528\u201c\u7ffb\u62cc\u201d\u7684\u624b\u6cd5\uff0c\u6b64\u624b\u6cd5\u662f\u4e3a\u4e86\u907f\u514d\u6d88\u6ce1\u3002\u4ece\u9644\u5f55\u4e2d\u6458\u5f55\u4e00\u6bb5\uff1a \u5177\u4f53\u7684\u7ffb\u62cc\u624b\u6cd5\u662f\u5148\u7528\u53f3\u624b\u62ff\u522e\u5200\u4ece\u6405\u62cc\u76c6\u4e2d\u5fc3\u63d2\u5165\u9762\u7cca\u5e95\u90e8\uff0c\u7136\u540e\u54118\u70b9\u949f\u65b9\u5411\u522e\u53bb\u76f4\u5230\u78b0\u5230\u76c6\u58c1\uff0c\u987a\u52bf\u8200\u8d77\u9762\u7cca\u63d0\u5230\u7a7a\u4e2d\uff0c\u7136\u540e\u518d\u79fb\u56de\u76c6\u4e2d\u5fc3\u5c06\u9762\u7cca\u653e\u5165\u76c6\u5185\uff0c\u5de6\u624b\u63e1\u4f4f\u6405\u62cc\u76c6\u4ece9\u70b9\u949f\u65b9\u5411\u8f6c\u52307\u70b9\u949f\u65b9\u5411\uff0c\u521a\u597d\u65cb\u8f6c\u4e8660\u5ea6\uff0c\u5c31\u5b8c\u6210\u4e86\u4e00\u6b21\u5faa\u73af\uff0c\u901f\u5ea6\u5927\u7ea6\u662f1\u79d2\u949f\u4e24\u4e0b\u3002\u6b64\u65b9\u6cd5\u51fa\u81ea\u300a\u5c0f\u5c9b\u8001\u5e08\u7684\u86cb\u7cd5\u6559\u5ba4\u300b\uff0c\u6211\u4e2a\u4eba\u89c9\u5f97\u975e\u5e38\u597d\u7528\u3002\u7528\u63a5\u5730\u6c14\u7684\u8bdd\u8bf4\u5c31\u662f\uff0c\u50cf\u7092\u83dc\u4e00\u6837\u7ffb\u7092\u3002 \u5c06 1/3 \u7684\u86cb\u767d\u971c\u4e0e\u86cb\u9ec4\u6db2\u7684\u6df7\u5408\u6db2\u5012\u5165\u5269\u4f59 2/3 \u7684\u86cb\u767d\u971c\u4e2d\uff0c\u7ee7\u7eed\u7ffb\u62cc\u5747\u5300 \u5c06\u86cb\u7cd5\u7cca\u5012\u5165\u6a21\u5177\uff0c\u9707\u8361\u51e0\u4e0b\u907f\u514d\u5927\u6c14\u6ce1","title":"\u6df7\u5408\u6405\u62cc"},{"location":"dishes/dessert/%E6%88%9A%E9%A3%8E%E8%9B%8B%E7%B3%95/#_11","text":"\u70d8\u70e4\u603b\u65f6\u95f4\uff1a6 \u5bf8\u86cb\u7cd5 30-35 \u5206\u949f\uff0c8 \u5bf8\u86cb\u7cd5 50 \u5206\u949f\u3002\u6839\u636e\u81ea\u5df1\u70e4\u7bb1\u7279\u6027\u7075\u6d3b\u8c03\u6574\uff0c\u4e00\u822c\u4e0d\u8d85\u8fc7 $\\pm 5$ \u5206\u949f\u3002\uff08\u6700\u540e\u51e0\u5206\u949f\u65f6\u53ef\u5728\u70e4\u7bb1\u524d\u89c2\u5bdf\uff09 \u9009\u62e9 \u53d8\u6e29\u70d8\u70e4 \uff0c\u5206\u4e3a\u4e24\u4e2a\u9636\u6bb5\u3002 \u7b2c\u4e00\u9636\u6bb5\u70e4\u7bb1\u8bbe\u5b9a\u6e29\u5ea6\u4e3a\uff1a\u4e0a\u7ba1 150 \u6444\u6c0f\u5ea6\uff0c\u4e0b\u7ba1 160 \u6444\u6c0f\u5ea6\uff1b \u7b2c\u4e8c\u9636\u6bb5\u6e29\u5ea6\u4e3a\uff1a\u4e0a\u7ba1 160 \u6444\u6c0f\u5ea6\uff0c\u4e0b\u7ba1 170 \u6444\u6c0f\u5ea6\uff1b \u4ee5 \u4e0e\u7b2c\u4e00\u9636\u6bb5\u70d8\u70e4\u6e29\u5ea6\u76f8\u540c\u7684\u6e29\u5ea6\u9884\u70ed \uff0c\u7ea6 10 \u5206\u949f\u53ef\u5230\u8fbe\u9884\u5b9a\u6e29\u5ea6\u3002\uff08\u5efa\u8bae\u6709\u7ecf\u9a8c\u540e\uff0c\u5728\u6df7\u5408\u6405\u62cc\u5f00\u59cb\u65f6\u5373\u53ef\u9884\u70ed\uff09 \u9884\u70ed\u5b8c\u6210\u540e\uff0c\u5c06\u6a21\u5177\u653e\u5165\u70e4\u7bb1\u4e0b\u5c42 \u70d8\u70e4\u603b\u65f6\u957f\u7684\u524d 3/5 \u4e3a\u7b2c\u4e00\u9636\u6bb5\u70d8\u70e4\uff0c\u540e 2/5 \u65f6\u957f\u4e3a\u7b2c\u4e8c\u9636\u6bb5\u70d8\u70e4\u3002\u5207\u6362\u65f6\uff0c\u76f4\u63a5\u8c03\u6574\u70e4\u7bb1\u6e29\u5ea6\u5373\u53ef\u3002 \u70e4\u597d\u540e\uff0c\u51fa\u7089","title":"\u70d8\u70e4"},{"location":"dishes/dessert/%E6%88%9A%E9%A3%8E%E8%9B%8B%E7%B3%95/#_12","text":"[\u53ef\u9009] \u5c06\u6a21\u5177\u4ece\u9ad8\u5904\u843d\u4e0b\uff0c\u9707\u51fa\u5176\u4e2d\u7684\u70ed\u6c14 \u6a21\u5177\u5012\u6263\u4f7f\u86cb\u7cd5\u51b7\u5374 \u8131\u6a21\uff0c\u98df\u7528","title":"\u51b7\u5374\u4e0e\u8131\u6a21"},{"location":"dishes/dessert/%E6%88%9A%E9%A3%8E%E8%9B%8B%E7%B3%95/#_13","text":"\u53c2\u8003\u4e86\u4ee5\u4e0b\u6559\u7a0b\uff0c\u6587\u4e2d\u8bf4\u660e\u975e\u5e38\u8be6\u7ec6\u4e14\u6709\u6bcf\u4e00\u6b65\u9aa4\u7684\u914d\u56fe\u3002\u540c\u65f6\uff0c\u5bf9\u4e8e\u4e3a\u4ec0\u4e48\u505a\u67d0\u4e00\u4e2a\u64cd\u4f5c\u3001\u80cc\u540e\u7684\u539f\u7406\u4e5f\u6709\u9610\u91ca\uff0c\u4ee5\u53ca\u51fa\u73b0\u67d0\u4e9b\u95ee\u9898\u7684\u5206\u6790\uff1a \u4e3a\u4e86\u505a\u597d\u8fd9\u4e2a\u621a\u98ce\u86cb\u7cd5\uff0c\u6211\u7528\u4e86\u4e00\u6574\u7bb1\u9e21\u86cb\uff0c\u4ece\u6b64\u544a\u522b\u51f9\u5e95\u548c\u584c\u9677 \u5bf9\u621a\u98ce\u86cb\u7cd5\u800c\u8a00\uff0c\u86cb\u6e05\u6253\u53d1\u662f\u6b21\u8981\u95ee\u9898\uff0c\u5173\u952e\u662f \u70e4\u5236\u65f6\u7684\u6e29\u5ea6\u548c\u65f6\u95f4 \u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/dessert/%E5%A5%A5%E5%88%A9%E5%A5%A5%E5%86%B0%E6%B7%87%E6%B7%8B/%E5%A5%A5%E5%88%A9%E5%A5%A5%E5%86%B0%E6%B7%87%E6%B7%8B/","text":"\u5965\u5229\u5965\u51b0\u6dc7\u6dcb\u7684\u505a\u6cd5 \u5965\u5229\u5965\u51b0\u6dc7\u6dcb\u662f\u7b80\u5355\u4f46\u597d\u5403\u7684\u51b0\u6dc7\u6dcb\uff0c\u7eaf\u52a8\u7269\u5976\u6cb9\u4e0d\u817b\u53e3\uff0c\u9884\u8ba1\u5236\u4f5c\u65f6\u957f\u534a\u5c0f\u65f6\uff08\u4e3b\u8981\u6d88\u8017\u5728\u6405\u6253\u5976\u6cb9\u548c\u53bb\u9664\u5965\u5229\u5965\u5939\u5fc3\u4e0a\uff09\u3002 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u6de1\u5976\u6cb9\uff08\u63a8\u8350\u54c1\u724c \u5b89\u4f73\u52a8\u7269\u6de1\u5976\u6cb9\uff09 \u539f\u5473\u5965\u5229\u5965 \u7535\u52a8\u6253\u86cb\u5668 \u4e00\u4e2a\u5bb9\u91cf\u5728 600 \u6beb\u5347\u4ee5\u4e0a\u4e14\u76f4\u5f84\u5c0f\uff08PS: \u9700\u8981\u6ce8\u610f\u80fd\u653e\u5f97\u4e0b\u7535\u52a8\u6253\u86cb\u4eea\uff09\u6df1\u5ea6\u6df1\u7684\u5bb9\u5668\uff08\u5982\u51c6\u5907\u4e86\u51b0\u6dc7\u6dcb\u6a21\u5177 \u5bb9\u5668\u9700\u8981\u6709\u5c16\u5634\u65b9\u4fbf\u8f6c\u79fb\uff09 \u5c0f\u5200\uff08\u6216\u8005\u53ef\u4ee5\u53bb\u9664\u5939\u5fc3\u7684\u5de5\u5177\uff09 \u51b0\u6dc7\u6dcb\u6a21\u5177\uff08\u53ef\u9009\uff09 \u8ba1\u7b97 \u6bcf\u4efd\uff1a \u5965\u5229\u5965 6 \u5757 \u767d\u7802\u7cd6 18 \u514b \u6de1\u5976\u6cb9 250 \u6beb\u5347 \u64cd\u4f5c \u5c06\u5965\u5229\u5965\u62e7\u5f00\u540e\u53bb\u9664\u5229\u5229\uff08\u5939\u5fc3\uff09\uff0c\u5907\u7528 \u7528\u7b77\u5b50\u5c06\u5965\u5965\u5241\u788e\uff0c\u9700\u8981\u6709\u4e00\u534a\u5965\u5965\u53d8\u6210\u7c89\u72b6\uff0c\u53e6\u4e00\u534a\u7684\u5965\u5965\u6700\u5927\u957f\u5ea6\u5c0f\u4e8e 0.5 \u5398\u7c73\uff0c\u5907\u7528 \u5c06\u5976\u6cb9\u5168\u90e8\u5012\u7f6e\u4e8e\u6df1\u5bb9\u5668\u4e2d\uff0c\u5e76\u52a0\u5165\u51c6\u5907\u597d\u7684\u7cd6 \u5f00\u59cb\u7528\u7535\u52a8\u6253\u86cb\u5668\u9ad8\u901f\u6321 \u6405\u6253\u81f3 \u7535\u52a8\u6253\u86cb\u5668\u63d0\u8d77\u540e\u4e0b\u65b9\u4f1a\u51fa\u73b0 \u60ac\u6302\u4f4f \u7684\u5976\u6cb9\uff08 0.5 \u5398\u7c73 - 1 \u5398\u7c73\uff09\uff0c\u800c\u4e0d\u662f \u5168\u90e8 \u50cf\u6db2\u4f53\u4e00\u6837\u6ef4\u4e0b\uff08\u90e8\u5206\u6ef4\u4e0b\u662f\u6b63\u5e38\u73b0\u8c61\uff09\u3002 \u6405\u6253\u5b8c\u6210\u540e\u5c06\u5965\u5965\u653e\u5165\u5976\u6cb9\u4e2d\uff0c\u6405\u62cc\u5747\u5300\u76f4\u81f3\u5e95\u90e8\u6709\u5965\u5965\u3002 \u53ef\u9009\uff1a\u5c06\u6df7\u5408\u7269\u5012\u5165\u51b0\u6dc7\u6dcb\u6a21\u5177\u4e2d \u653e\u7f6e\u51b0\u7bb1\u51b7\u51bb\u5ba4\uff08 -18 \u5ea6\uff09 4 \u5c0f\u65f6\u4ee5\u4e0a\u53ef\u53d6\u51fa \u9644\u52a0\u5185\u5bb9 \u5241\u788e\u5965\u5229\u5965\u7684\u5bb9\u5668\u6ce8\u610f\u4e0d\u8981\u4f7f\u7528\u6613\u788e\u5bb9\u5668\u3002 \u53bb\u9664\u5965\u5229\u5965\u5939\u5fc3\u65f6\u5207\u5fcc\u6ce8\u610f\u5272\u5230\u624b\u3002 \u53c2\u8003\u8d44\u6599\uff1a 5\u5206\u949f\u641e\u5b9a\u3010\u5965\u5229\u5965\u9ea6\u65cb\u98ce\u3011\u592a\u89e3\u998b\u53ed\uff01 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u5965\u5229\u5965\u51b0\u6dc7\u6dcb"},{"location":"dishes/dessert/%E5%A5%A5%E5%88%A9%E5%A5%A5%E5%86%B0%E6%B7%87%E6%B7%8B/%E5%A5%A5%E5%88%A9%E5%A5%A5%E5%86%B0%E6%B7%87%E6%B7%8B/#_1","text":"\u5965\u5229\u5965\u51b0\u6dc7\u6dcb\u662f\u7b80\u5355\u4f46\u597d\u5403\u7684\u51b0\u6dc7\u6dcb\uff0c\u7eaf\u52a8\u7269\u5976\u6cb9\u4e0d\u817b\u53e3\uff0c\u9884\u8ba1\u5236\u4f5c\u65f6\u957f\u534a\u5c0f\u65f6\uff08\u4e3b\u8981\u6d88\u8017\u5728\u6405\u6253\u5976\u6cb9\u548c\u53bb\u9664\u5965\u5229\u5965\u5939\u5fc3\u4e0a\uff09\u3002","title":"\u5965\u5229\u5965\u51b0\u6dc7\u6dcb\u7684\u505a\u6cd5"},{"location":"dishes/dessert/%E5%A5%A5%E5%88%A9%E5%A5%A5%E5%86%B0%E6%B7%87%E6%B7%8B/%E5%A5%A5%E5%88%A9%E5%A5%A5%E5%86%B0%E6%B7%87%E6%B7%8B/#_2","text":"\u6de1\u5976\u6cb9\uff08\u63a8\u8350\u54c1\u724c \u5b89\u4f73\u52a8\u7269\u6de1\u5976\u6cb9\uff09 \u539f\u5473\u5965\u5229\u5965 \u7535\u52a8\u6253\u86cb\u5668 \u4e00\u4e2a\u5bb9\u91cf\u5728 600 \u6beb\u5347\u4ee5\u4e0a\u4e14\u76f4\u5f84\u5c0f\uff08PS: \u9700\u8981\u6ce8\u610f\u80fd\u653e\u5f97\u4e0b\u7535\u52a8\u6253\u86cb\u4eea\uff09\u6df1\u5ea6\u6df1\u7684\u5bb9\u5668\uff08\u5982\u51c6\u5907\u4e86\u51b0\u6dc7\u6dcb\u6a21\u5177 \u5bb9\u5668\u9700\u8981\u6709\u5c16\u5634\u65b9\u4fbf\u8f6c\u79fb\uff09 \u5c0f\u5200\uff08\u6216\u8005\u53ef\u4ee5\u53bb\u9664\u5939\u5fc3\u7684\u5de5\u5177\uff09 \u51b0\u6dc7\u6dcb\u6a21\u5177\uff08\u53ef\u9009\uff09","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/dessert/%E5%A5%A5%E5%88%A9%E5%A5%A5%E5%86%B0%E6%B7%87%E6%B7%8B/%E5%A5%A5%E5%88%A9%E5%A5%A5%E5%86%B0%E6%B7%87%E6%B7%8B/#_3","text":"\u6bcf\u4efd\uff1a \u5965\u5229\u5965 6 \u5757 \u767d\u7802\u7cd6 18 \u514b \u6de1\u5976\u6cb9 250 \u6beb\u5347","title":"\u8ba1\u7b97"},{"location":"dishes/dessert/%E5%A5%A5%E5%88%A9%E5%A5%A5%E5%86%B0%E6%B7%87%E6%B7%8B/%E5%A5%A5%E5%88%A9%E5%A5%A5%E5%86%B0%E6%B7%87%E6%B7%8B/#_4","text":"\u5c06\u5965\u5229\u5965\u62e7\u5f00\u540e\u53bb\u9664\u5229\u5229\uff08\u5939\u5fc3\uff09\uff0c\u5907\u7528 \u7528\u7b77\u5b50\u5c06\u5965\u5965\u5241\u788e\uff0c\u9700\u8981\u6709\u4e00\u534a\u5965\u5965\u53d8\u6210\u7c89\u72b6\uff0c\u53e6\u4e00\u534a\u7684\u5965\u5965\u6700\u5927\u957f\u5ea6\u5c0f\u4e8e 0.5 \u5398\u7c73\uff0c\u5907\u7528 \u5c06\u5976\u6cb9\u5168\u90e8\u5012\u7f6e\u4e8e\u6df1\u5bb9\u5668\u4e2d\uff0c\u5e76\u52a0\u5165\u51c6\u5907\u597d\u7684\u7cd6 \u5f00\u59cb\u7528\u7535\u52a8\u6253\u86cb\u5668\u9ad8\u901f\u6321 \u6405\u6253\u81f3 \u7535\u52a8\u6253\u86cb\u5668\u63d0\u8d77\u540e\u4e0b\u65b9\u4f1a\u51fa\u73b0 \u60ac\u6302\u4f4f \u7684\u5976\u6cb9\uff08 0.5 \u5398\u7c73 - 1 \u5398\u7c73\uff09\uff0c\u800c\u4e0d\u662f \u5168\u90e8 \u50cf\u6db2\u4f53\u4e00\u6837\u6ef4\u4e0b\uff08\u90e8\u5206\u6ef4\u4e0b\u662f\u6b63\u5e38\u73b0\u8c61\uff09\u3002 \u6405\u6253\u5b8c\u6210\u540e\u5c06\u5965\u5965\u653e\u5165\u5976\u6cb9\u4e2d\uff0c\u6405\u62cc\u5747\u5300\u76f4\u81f3\u5e95\u90e8\u6709\u5965\u5965\u3002 \u53ef\u9009\uff1a\u5c06\u6df7\u5408\u7269\u5012\u5165\u51b0\u6dc7\u6dcb\u6a21\u5177\u4e2d \u653e\u7f6e\u51b0\u7bb1\u51b7\u51bb\u5ba4\uff08 -18 \u5ea6\uff09 4 \u5c0f\u65f6\u4ee5\u4e0a\u53ef\u53d6\u51fa","title":"\u64cd\u4f5c"},{"location":"dishes/dessert/%E5%A5%A5%E5%88%A9%E5%A5%A5%E5%86%B0%E6%B7%87%E6%B7%8B/%E5%A5%A5%E5%88%A9%E5%A5%A5%E5%86%B0%E6%B7%87%E6%B7%8B/#_5","text":"\u5241\u788e\u5965\u5229\u5965\u7684\u5bb9\u5668\u6ce8\u610f\u4e0d\u8981\u4f7f\u7528\u6613\u788e\u5bb9\u5668\u3002 \u53bb\u9664\u5965\u5229\u5965\u5939\u5fc3\u65f6\u5207\u5fcc\u6ce8\u610f\u5272\u5230\u624b\u3002 \u53c2\u8003\u8d44\u6599\uff1a 5\u5206\u949f\u641e\u5b9a\u3010\u5965\u5229\u5965\u9ea6\u65cb\u98ce\u3011\u592a\u89e3\u998b\u53ed\uff01 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/dessert/%E6%8F%90%E6%8B%89%E7%B1%B3%E8%8B%8F/%E6%8F%90%E6%8B%89%E7%B1%B3%E8%8B%8F/","text":"\u63d0\u62c9\u7c73\u82cf\u7684\u505a\u6cd5 \u63d0\u62c9\u7c73\u82cf\uff0c\u662f\u610f\u5927\u5229\u4f20\u7edf\u751c\u54c1\u3002\u65e0\u9700\u70e4\u7bb1\u64cd\u4f5c\u7b80\u4fbf\uff0c\u70d8\u7119\u65b0\u624b\u4e5f\u53ef\u4ee5\u96f6\u5931\u8bef\u83b7\u5f97\u4e00\u4efd\u7f8e\u5473\u7684\u63d0\u62c9\u7c73\u82cf\u3002 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u9a6c\u65af\u5361\u5f6d\u829d\u58eb 450g \u624b\u6307\u997c\u5e72 1 \u5305 \u653e\u51c9\u6d53\u7f29\u5496\u5561 350ml \u65e0\u83cc\u9e21\u86cb 4 \u4e2a \u767d\u7802\u7cd6 50g \u53ef\u53ef\u7c89 \u6717\u59c6\u9152\uff08\u4e0d\u559c\u6b22\u9152\u7684\u670b\u53cb\u53ef\u7701\u7565\uff0c\u53ef\u6309\u7167\u81ea\u5df1\u53e3\u5473\u8c03\u8282\uff09 \u4e00\u4e2a\u88c5\u6210\u54c1\u7684\u5bb9\u5668\uff08\u6211\u7528\u7684\u662f\u73bb\u7483\u4e50\u6263\uff09 \u6253\u86cb\u5668\uff08\u624b\u52b2\u513f\u5927\u7684\u670b\u53cb\u4e5f\u53ef\u4ee5\u953b\u70bc\u81c2\u529b\uff09 \u64cd\u4f5c \u5206\u79bb\u86cb\u9ec4\u86cb\u6e05 \u76db\u6709\u86cb\u767d\u7684\u7897\u4e2d\u52a0 10g \u767d\u7802\u7cd6\u6e7f\u6027\u6253\u53d1 \u76db\u6709\u86cb\u9ec4\u7684\u7897\u4e2d\u5c06 40g \u767d\u7802\u7cd6\u5206\u4e09\u6b21\u52a0\u5165\uff0c\u6405\u62cc\u81f3\u5747\u5300 \u86cb\u9ec4\u4e2d\u5206\u4e09\u6b21\u52a0\u5165\u9a6c\u65af\u5361\u5f6d\u829d\u58eb\uff0c\u6405\u62cc\u81f3\u5747\u5300 \u86cb\u9ec4\u4e2d\u6700\u540e\u52a0\u5165\u6717\u59c6\u9152\uff0c\u6405\u62cc\u5747\u5300 \u5c06\u6253\u53d1\u597d\u7684\u86cb\u767d\u5206\u4e09\u6b21\u52a0\u5165\u86cb\u9ec4\u829d\u58eb\u6db2\u4e2d \u624b\u6307\u997c\u5e72\u4e24\u9762\u6d78\u6e7f\u5496\u5561\u6db2\uff0c\u5e73\u94fa\u5165\u5bb9\u5668 \u4e24\u5c42\u829d\u58eb\u6db2\u4e24\u5c42\u997c\u5e72\u4ea4\u66ff\u653e\u5165\u5bb9\u5668\uff08\u8fd9\u4e00\u6b65\u6309\u7167\u5927\u5bb6\u610f\u613f\u53ca\u5bb9\u5668\u9ad8\u5ea6\u914c\u60c5\u5904\u7406\uff09 \u653e\u5165\u51b0\u7bb1\u51b7\u85cf\u56db\u4e2a\u5c0f\u65f6\uff08\u5fc3\u6025\u7684\u5c0f\u4f19\u4f34\u53ef\u4ee5\u63d0\u65e9\u62ff\u51fa\u6765\uff09 \u53d6\u51fa\u540e\u5728\u8868\u9762\u7b5b\u4e0a\u53ef\u53ef\u7c89\uff0c\u5373\u53ef\u4eab\u7528\u5566 \u9644\u52a0\u5185\u5bb9 \u4e0b\u53a8\u623f\u86cb\u767d\u6253\u53d1\u5177\u4f53\u6559\u7a0b \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u63d0\u62c9\u7c73\u82cf"},{"location":"dishes/dessert/%E6%8F%90%E6%8B%89%E7%B1%B3%E8%8B%8F/%E6%8F%90%E6%8B%89%E7%B1%B3%E8%8B%8F/#_1","text":"\u63d0\u62c9\u7c73\u82cf\uff0c\u662f\u610f\u5927\u5229\u4f20\u7edf\u751c\u54c1\u3002\u65e0\u9700\u70e4\u7bb1\u64cd\u4f5c\u7b80\u4fbf\uff0c\u70d8\u7119\u65b0\u624b\u4e5f\u53ef\u4ee5\u96f6\u5931\u8bef\u83b7\u5f97\u4e00\u4efd\u7f8e\u5473\u7684\u63d0\u62c9\u7c73\u82cf\u3002","title":"\u63d0\u62c9\u7c73\u82cf\u7684\u505a\u6cd5"},{"location":"dishes/dessert/%E6%8F%90%E6%8B%89%E7%B1%B3%E8%8B%8F/%E6%8F%90%E6%8B%89%E7%B1%B3%E8%8B%8F/#_2","text":"\u9a6c\u65af\u5361\u5f6d\u829d\u58eb 450g \u624b\u6307\u997c\u5e72 1 \u5305 \u653e\u51c9\u6d53\u7f29\u5496\u5561 350ml \u65e0\u83cc\u9e21\u86cb 4 \u4e2a \u767d\u7802\u7cd6 50g \u53ef\u53ef\u7c89 \u6717\u59c6\u9152\uff08\u4e0d\u559c\u6b22\u9152\u7684\u670b\u53cb\u53ef\u7701\u7565\uff0c\u53ef\u6309\u7167\u81ea\u5df1\u53e3\u5473\u8c03\u8282\uff09 \u4e00\u4e2a\u88c5\u6210\u54c1\u7684\u5bb9\u5668\uff08\u6211\u7528\u7684\u662f\u73bb\u7483\u4e50\u6263\uff09 \u6253\u86cb\u5668\uff08\u624b\u52b2\u513f\u5927\u7684\u670b\u53cb\u4e5f\u53ef\u4ee5\u953b\u70bc\u81c2\u529b\uff09","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/dessert/%E6%8F%90%E6%8B%89%E7%B1%B3%E8%8B%8F/%E6%8F%90%E6%8B%89%E7%B1%B3%E8%8B%8F/#_3","text":"\u5206\u79bb\u86cb\u9ec4\u86cb\u6e05 \u76db\u6709\u86cb\u767d\u7684\u7897\u4e2d\u52a0 10g \u767d\u7802\u7cd6\u6e7f\u6027\u6253\u53d1 \u76db\u6709\u86cb\u9ec4\u7684\u7897\u4e2d\u5c06 40g \u767d\u7802\u7cd6\u5206\u4e09\u6b21\u52a0\u5165\uff0c\u6405\u62cc\u81f3\u5747\u5300 \u86cb\u9ec4\u4e2d\u5206\u4e09\u6b21\u52a0\u5165\u9a6c\u65af\u5361\u5f6d\u829d\u58eb\uff0c\u6405\u62cc\u81f3\u5747\u5300 \u86cb\u9ec4\u4e2d\u6700\u540e\u52a0\u5165\u6717\u59c6\u9152\uff0c\u6405\u62cc\u5747\u5300 \u5c06\u6253\u53d1\u597d\u7684\u86cb\u767d\u5206\u4e09\u6b21\u52a0\u5165\u86cb\u9ec4\u829d\u58eb\u6db2\u4e2d \u624b\u6307\u997c\u5e72\u4e24\u9762\u6d78\u6e7f\u5496\u5561\u6db2\uff0c\u5e73\u94fa\u5165\u5bb9\u5668 \u4e24\u5c42\u829d\u58eb\u6db2\u4e24\u5c42\u997c\u5e72\u4ea4\u66ff\u653e\u5165\u5bb9\u5668\uff08\u8fd9\u4e00\u6b65\u6309\u7167\u5927\u5bb6\u610f\u613f\u53ca\u5bb9\u5668\u9ad8\u5ea6\u914c\u60c5\u5904\u7406\uff09 \u653e\u5165\u51b0\u7bb1\u51b7\u85cf\u56db\u4e2a\u5c0f\u65f6\uff08\u5fc3\u6025\u7684\u5c0f\u4f19\u4f34\u53ef\u4ee5\u63d0\u65e9\u62ff\u51fa\u6765\uff09 \u53d6\u51fa\u540e\u5728\u8868\u9762\u7b5b\u4e0a\u53ef\u53ef\u7c89\uff0c\u5373\u53ef\u4eab\u7528\u5566","title":"\u64cd\u4f5c"},{"location":"dishes/dessert/%E6%8F%90%E6%8B%89%E7%B1%B3%E8%8B%8F/%E6%8F%90%E6%8B%89%E7%B1%B3%E8%8B%8F/#_4","text":"\u4e0b\u53a8\u623f\u86cb\u767d\u6253\u53d1\u5177\u4f53\u6559\u7a0b \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/dessert/%E7%83%A4%E8%9B%8B%E6%8C%9E/%E7%83%A4%E8%9B%8B%E6%8C%9E/","text":"\u70e4\u86cb\u631e\u7684\u505a\u6cd5 \u70e4\u86cb\u631e\u662f\u4e00\u9053\u7b80\u5355\u6613\u4e8e\u5236\u4f5c\u7684\u751c\u54c1 \u4e14\u534a\u6210\u54c1\u53ef\u7f6e\u4e8e\u51b0\u7bb1\u51b7\u51bb\u957f\u65f6\u95f4\u4fdd\u5b58 \u968f\u5403\u968f\u53d6 \u51fa\u54c1\u65f6\u95f4\u7ea6 1 \u5c0f\u65f6 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u8be5\u914d\u65b9\u4e3a\u6574\u5305\u86cb\u631e\u76ae\u6240\u9700\u91cf \u586b\u5145\u540e\u53ef\u76f4\u63a5\u51b7\u51bb\u4fdd\u5b58 \u86cb\u631e\u76ae \u54c1\u724c\u4e0d\u9650 \u6574\u5305\u86cb\u631e\u76ae\u7ea6\u4e3a 30 \u53ea \u9e21\u86cb 8 \u4e2a \u666e\u901a\u9e21\u86cb\u5373\u53ef \u725b\u5976 200 \u6beb\u5347 \u666e\u901a\u888b\u88c5\u725b\u5976\u5373\u53ef \u6de1\u5976\u6cb9 450 \u6beb\u5347 \u70d8\u7119\u5e97\u6216\u8d85\u5e02\u5373\u6709\u552e \u767d\u7802\u7cd6 80 \u514b \u666e\u901a\u7802\u7cd6\u5373\u53ef \u7ec6\u7802\u7cd6\u66f4\u4f18 \u6613\u4e8e\u878d\u5316 \u70e4\u7bb1 \u5927\u5c0f\u4e0d\u9650 \u514b\u6570\u79f0 \u6405\u62cc\u5668 \u5305\u542b\u4e14\u4e0d\u9650\u4e8e\u7b77\u5b50 \u6253\u86cb\u5668\u7b49\u5de5\u5177 \u7b5b\u7f51 \u7f51\u5b54\u7ea6\u4e3a 1 \u6beb\u7c73 \u64cd\u4f5c \u5c06\u7897\u7f6e\u4e8e\u514b\u6570\u79f0\u4e0a \u79f0\u91cf 450 \u514b \u6de1\u5976\u6cb9\uff08\u6de1\u5976\u6cb9\u5bc6\u5ea6\u5728\u6b64\u5904\u8bb0\u4e3a 1 \uff09 \u52a0\u5165 80 \u514b\u767d\u7802\u7cd6 \uff08\u751c\u5ea6\u4e2d\u7b49 \u53ef\u6309\u4e2a\u4eba\u53e3\u5473\u589e\u51cf \u5efa\u8bae\u8303\u56f4 60-100 \u514b\uff09 \u52a0\u5165 200 \u514b\u725b\u5976 \uff08\u725b\u5976\u5bc6\u5ea6\u5728\u6b64\u5904\u8bb0\u4e3a 1 \uff09 \u53d6 8 \u4e2a\u86cb\u9ec4\u52a0\u5165 \u86cb\u6e05\u53ef\u7559\u4f5c\u4ed6\u7528 \u5747\u5300\u6405\u62cc\u6240\u6709\u6750\u6599\u76f4\u81f3\u767d\u7802\u7cd6\u5168\u90e8\u878d\u5316 \u4f7f\u7528\u7f51\u7b5b\u5bf9\u6405\u62cc\u5b8c\u6210\u7684\u98df\u6750\u8fdb\u884c\u8fc7\u6ee4 \u6ee4\u9664\u9e21\u86cb\u9ecf\u819c \u9e21\u86cb\u58f3 \u672a\u878d\u5316\u7684\u767d\u7802\u7cd6 \u7ed3\u5757\u7684\u6de1\u5976\u6cb9 \u6b64\u65f6\u8bf7\u5c06\u70e4\u7bb1\u8bbe\u7f6e 220 \u6444\u6c0f\u5ea6\u5f00\u59cb\u9884\u70ed\uff08\u7ea6 10 \u5206\u949f\uff09 \u8bb0\u5f97\u62ff\u51fa\u70e4\u76d8 \u5c06\u86cb\u631e\u76ae\u4ee5 0.5 \u5398\u7c73\u7684\u95f4\u9694\u5747\u5300\u653e\u7f6e\u4e8e\u70e4\u76d8\u4e2d \u5c06\u8fc7\u6ee4\u5b8c\u6210\u7684\u98df\u6750\u5012\u5165\u86cb\u631e\u76ae\u4e2d \u6db2\u9762\u8ddd\u79bb\u86cb\u631e\u76ae\u4e0a\u6cbf 0.5 \u5398\u7c73\u5de6\u53f3\u5373\u53ef\u4e0d\u5b9c\u8fc7\u591a \u622a\u6b62\u6b64\u6b65\u9aa4 \u534a\u6210\u54c1\u86cb\u631e\u7684\u5236\u4f5c\u5df2\u7ecf\u5b8c\u6210 \u53ef\u76f4\u63a5\u653e\u5165\u51b0\u7bb1\u901f\u51bb 12 \u5c0f\u65f6\u4ee5\u4e0a\u4fdd\u5b58 \u5c06\u534a\u6210\u54c1\u86cb\u631e\u653e\u5165\u70e4\u7bb1\u4e2d\u8fdb\u884c\u70e4\u5236 \u6e29\u5ea6\u4e3a 200 \u6444\u6c0f\u5ea6 \u65f6\u95f4\u4e3a 25 \u5206\u949f \u70e4\u5236\u7ed3\u675f\u540e\u5373\u53ef\u98df\u7528 \u9644\u52a0\u5185\u5bb9 \u64cd\u4f5c\u65f6 \u8bf7\u52a1\u5fc5\u5c0f\u5fc3\u70e4\u7bb1\u9ad8\u6e29 \u9632\u6b62\u70eb\u4f24 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u70e4\u86cb\u631e"},{"location":"dishes/dessert/%E7%83%A4%E8%9B%8B%E6%8C%9E/%E7%83%A4%E8%9B%8B%E6%8C%9E/#_1","text":"\u70e4\u86cb\u631e\u662f\u4e00\u9053\u7b80\u5355\u6613\u4e8e\u5236\u4f5c\u7684\u751c\u54c1 \u4e14\u534a\u6210\u54c1\u53ef\u7f6e\u4e8e\u51b0\u7bb1\u51b7\u51bb\u957f\u65f6\u95f4\u4fdd\u5b58 \u968f\u5403\u968f\u53d6 \u51fa\u54c1\u65f6\u95f4\u7ea6 1 \u5c0f\u65f6","title":"\u70e4\u86cb\u631e\u7684\u505a\u6cd5"},{"location":"dishes/dessert/%E7%83%A4%E8%9B%8B%E6%8C%9E/%E7%83%A4%E8%9B%8B%E6%8C%9E/#_2","text":"\u8be5\u914d\u65b9\u4e3a\u6574\u5305\u86cb\u631e\u76ae\u6240\u9700\u91cf \u586b\u5145\u540e\u53ef\u76f4\u63a5\u51b7\u51bb\u4fdd\u5b58 \u86cb\u631e\u76ae \u54c1\u724c\u4e0d\u9650 \u6574\u5305\u86cb\u631e\u76ae\u7ea6\u4e3a 30 \u53ea \u9e21\u86cb 8 \u4e2a \u666e\u901a\u9e21\u86cb\u5373\u53ef \u725b\u5976 200 \u6beb\u5347 \u666e\u901a\u888b\u88c5\u725b\u5976\u5373\u53ef \u6de1\u5976\u6cb9 450 \u6beb\u5347 \u70d8\u7119\u5e97\u6216\u8d85\u5e02\u5373\u6709\u552e \u767d\u7802\u7cd6 80 \u514b \u666e\u901a\u7802\u7cd6\u5373\u53ef \u7ec6\u7802\u7cd6\u66f4\u4f18 \u6613\u4e8e\u878d\u5316 \u70e4\u7bb1 \u5927\u5c0f\u4e0d\u9650 \u514b\u6570\u79f0 \u6405\u62cc\u5668 \u5305\u542b\u4e14\u4e0d\u9650\u4e8e\u7b77\u5b50 \u6253\u86cb\u5668\u7b49\u5de5\u5177 \u7b5b\u7f51 \u7f51\u5b54\u7ea6\u4e3a 1 \u6beb\u7c73","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/dessert/%E7%83%A4%E8%9B%8B%E6%8C%9E/%E7%83%A4%E8%9B%8B%E6%8C%9E/#_3","text":"\u5c06\u7897\u7f6e\u4e8e\u514b\u6570\u79f0\u4e0a \u79f0\u91cf 450 \u514b \u6de1\u5976\u6cb9\uff08\u6de1\u5976\u6cb9\u5bc6\u5ea6\u5728\u6b64\u5904\u8bb0\u4e3a 1 \uff09 \u52a0\u5165 80 \u514b\u767d\u7802\u7cd6 \uff08\u751c\u5ea6\u4e2d\u7b49 \u53ef\u6309\u4e2a\u4eba\u53e3\u5473\u589e\u51cf \u5efa\u8bae\u8303\u56f4 60-100 \u514b\uff09 \u52a0\u5165 200 \u514b\u725b\u5976 \uff08\u725b\u5976\u5bc6\u5ea6\u5728\u6b64\u5904\u8bb0\u4e3a 1 \uff09 \u53d6 8 \u4e2a\u86cb\u9ec4\u52a0\u5165 \u86cb\u6e05\u53ef\u7559\u4f5c\u4ed6\u7528 \u5747\u5300\u6405\u62cc\u6240\u6709\u6750\u6599\u76f4\u81f3\u767d\u7802\u7cd6\u5168\u90e8\u878d\u5316 \u4f7f\u7528\u7f51\u7b5b\u5bf9\u6405\u62cc\u5b8c\u6210\u7684\u98df\u6750\u8fdb\u884c\u8fc7\u6ee4 \u6ee4\u9664\u9e21\u86cb\u9ecf\u819c \u9e21\u86cb\u58f3 \u672a\u878d\u5316\u7684\u767d\u7802\u7cd6 \u7ed3\u5757\u7684\u6de1\u5976\u6cb9 \u6b64\u65f6\u8bf7\u5c06\u70e4\u7bb1\u8bbe\u7f6e 220 \u6444\u6c0f\u5ea6\u5f00\u59cb\u9884\u70ed\uff08\u7ea6 10 \u5206\u949f\uff09 \u8bb0\u5f97\u62ff\u51fa\u70e4\u76d8 \u5c06\u86cb\u631e\u76ae\u4ee5 0.5 \u5398\u7c73\u7684\u95f4\u9694\u5747\u5300\u653e\u7f6e\u4e8e\u70e4\u76d8\u4e2d \u5c06\u8fc7\u6ee4\u5b8c\u6210\u7684\u98df\u6750\u5012\u5165\u86cb\u631e\u76ae\u4e2d \u6db2\u9762\u8ddd\u79bb\u86cb\u631e\u76ae\u4e0a\u6cbf 0.5 \u5398\u7c73\u5de6\u53f3\u5373\u53ef\u4e0d\u5b9c\u8fc7\u591a \u622a\u6b62\u6b64\u6b65\u9aa4 \u534a\u6210\u54c1\u86cb\u631e\u7684\u5236\u4f5c\u5df2\u7ecf\u5b8c\u6210 \u53ef\u76f4\u63a5\u653e\u5165\u51b0\u7bb1\u901f\u51bb 12 \u5c0f\u65f6\u4ee5\u4e0a\u4fdd\u5b58 \u5c06\u534a\u6210\u54c1\u86cb\u631e\u653e\u5165\u70e4\u7bb1\u4e2d\u8fdb\u884c\u70e4\u5236 \u6e29\u5ea6\u4e3a 200 \u6444\u6c0f\u5ea6 \u65f6\u95f4\u4e3a 25 \u5206\u949f \u70e4\u5236\u7ed3\u675f\u540e\u5373\u53ef\u98df\u7528","title":"\u64cd\u4f5c"},{"location":"dishes/dessert/%E7%83%A4%E8%9B%8B%E6%8C%9E/%E7%83%A4%E8%9B%8B%E6%8C%9E/#_4","text":"\u64cd\u4f5c\u65f6 \u8bf7\u52a1\u5fc5\u5c0f\u5fc3\u70e4\u7bb1\u9ad8\u6e29 \u9632\u6b62\u70eb\u4f24 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/dessert/%E8%8A%8B%E6%B3%A5%E9%9B%AA%E5%AA%9A%E5%A8%98/%E8%8A%8B%E6%B3%A5%E9%9B%AA%E5%AA%9A%E5%A8%98/","text":"\u828b\u6ce5\u96ea\u5a9a\u5a18\u7684\u505a\u6cd5 \u828b\u6ce5\u96ea\u5a9a\u5a18\u662f\u4e00\u9053\u751c\u54c1\uff0c\u5f88\u9002\u5408\u505a\u7ed9\u5b69\u5b50\u5403\uff0c\u65e0\u9700\u70e4\u7bb1\uff0c\u624b\u6b8b\u515a\u4e5f\u53ef\u4ee5\u505a\u6210\u529f\uff5e\u9884\u8ba1\u5236\u4f5c\u65f6\u95f4 2 \u5c0f\u65f6\u3002 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u8354\u6d66\u828b\u5934\uff08\u7535\u5546\u5e73\u53f0\u8d2d\u4e70\u5373\u53ef\uff0c\u5b9e\u60e0\u65b0\u9c9c\uff09 200g \u7d2b\u85af\u7c89 3g \u725b\u5976 165g \u7cef\u7c73\u7c89 a 50g \u7cef\u7c73\u7c89 b 75g \u7389\u7c73\u6dc0\u7c89 22g \u9ec4\u6cb9 30g \u6de1\u5976\u6cb9\uff08\u63a8\u8350\u5b89\u4f73\uff09 145g \u767d\u7802\u7cd6 26g \u6599\u7406\u6405\u62cc\u673a\uff08\u7535\u52a8\u6253\u86cb\u5668\u4e5f\u53ef\u4ee5\uff09 \u7b5b\u7f51 \u7f51\u5b54\u7ea6\u4e3a 1 \u6beb\u7c73 \u4fdd\u9c9c\u819c \u64cd\u4f5c \u828b\u5934\u5207\u5757\uff0c\u5927\u706b\u716e\u719f\u81f3\u8f6f\uff0840 \u5206\u949f\u5373\u53ef\uff09\uff0c\u5168\u90e8\u653e\u5165\u6599\u7406\u673a \u5411\u5185\u52a0\u5165 30g \u725b\u5976\uff0c25g \u6de1\u5976\u6cb9\uff0c\u5c06\u5176\u6253\u6210\u6ce5\u72b6 \u518d\u5411\u5185\u52a0\u5165 3g \u7d2b\u85af\u7c89\uff0c18g \u767d\u7802\u7cd6\uff0c\u7ee7\u7eed\u6405\u62cc\u6253\u6210\u7ec6\u817b\u828b\u6ce5 \u53d6\u51fa\u53e6\u4e00\u4e2a\u7897\uff0c\u52a0\u5165\u5168\u90e8\u7cef\u7c73\u7c89 b\uff0c22g \u7389\u7c73\u6dc0\u7c89\uff0c135g \u725b\u5976\uff0c50g \u767d\u7802\u7cd6\uff0c\u6df7\u5300\u5e76\u8fc7\u7b5b\u4e00\u904d\uff0c\u4fdd\u9c9c\u819c\u76d6\u4e0a\u5e76\u624e\u5c0f\u6d1e\uff0c\u4e2d\u706b\u84b8\u534a\u4e2a\u5c0f\u65f6 \u5728\u84b8\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5c06\u7cef\u7c73\u7c89 a \u653e\u5165\u5e73\u5e95\u9505\u5c0f\u706b\u7ffb\u7092\u81f3\u5fae\u5fae\u53d1\u9ec4\uff08\u5373\u7092\u719f\uff09\uff0c\u4f5c\u4e3a\u624b\u7c89\u5907\u7528 \u5c06\u4e2d\u706b\u84b8\u5b8c\u534a\u5c0f\u65f6\u7684\u7cef\u7c73\u725b\u5976\u6df7\u5408\u7269\uff08\u679c\u51bb\u72b6\uff09\u8d81\u70ed\u52a0\u5165\u9ec4\u6cb9 30g\uff0c\u5c06\u9ec4\u6cb9\u63c9\u81f3\u9762\u56e2\u5b8c\u5168\u5438\u6536\uff0c\u7136\u540e\u653e\u51b0\u7bb1\u51b7\u85cf\u4e00\u5c0f\u65f6 \u53d6\u51fa\u53e6\u4e00\u53ea\u7897\uff0c\u52a0\u5165 120g \u6de1\u5976\u6cb9\uff0c8g \u767d\u7802\u7cd6\uff0c\u6253\u53d1\u81f3\u6709\u7eb9\u8def\uff0c\u88c5\u8fdb\u88f1\u82b1\u888b\u5907\u7528 \u53d6\u51fa\u51b7\u85cf\u540e\u7684\u9762\u56e2\uff0c\u6413\u63c9 5 \u5206\u949f\uff0c\u5206\u6210 30g \u4e00\u4e2a\uff0c\u5747\u5300\u6492\u4e0a 2g \u624b\u7c89\u9632\u7c98\uff0c\u64c0\u6210\u5706\u5f62\uff0c\u5148\u6324\u4e0a 5g \u88f1\u82b1\u5976\u6cb9\uff0c\u7136\u540e\u653e\u4e0a 30g \u828b\u6ce5\uff0c\u6700\u540e\u5c06\u9762\u997c\u50cf\u5305\u5305\u5b50\u4e00\u6837\u5305\u8d77\u6765\uff08\u53ef\u4ee5\u51cf\u53bb\u591a\u4f59\u7684\u76ae\uff09 \u5305\u597d\u540e\u518d\u5747\u5300\u6492 2g \u624b\u7c89\u9632\u7c98 \u91cd\u590d\u4ee5\u4e0a\u4e24\u6b65\u76f4\u81f3\u539f\u6750\u6599\u7528\u5149 \u9644\u52a0\u5185\u5bb9 \u5236\u4f5c\u65f6\u6700\u597d\u4f69\u6234\u4e0d\u7c98\u624b\u5957 \u5236\u4f5c\u5b8c\u5373\u53ef\u98df\u7528\uff0c\u4e0d\u7528\u518d\u52a0\u70ed \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u828b\u6ce5\u96ea\u5a9a\u5a18"},{"location":"dishes/dessert/%E8%8A%8B%E6%B3%A5%E9%9B%AA%E5%AA%9A%E5%A8%98/%E8%8A%8B%E6%B3%A5%E9%9B%AA%E5%AA%9A%E5%A8%98/#_1","text":"\u828b\u6ce5\u96ea\u5a9a\u5a18\u662f\u4e00\u9053\u751c\u54c1\uff0c\u5f88\u9002\u5408\u505a\u7ed9\u5b69\u5b50\u5403\uff0c\u65e0\u9700\u70e4\u7bb1\uff0c\u624b\u6b8b\u515a\u4e5f\u53ef\u4ee5\u505a\u6210\u529f\uff5e\u9884\u8ba1\u5236\u4f5c\u65f6\u95f4 2 \u5c0f\u65f6\u3002","title":"\u828b\u6ce5\u96ea\u5a9a\u5a18\u7684\u505a\u6cd5"},{"location":"dishes/dessert/%E8%8A%8B%E6%B3%A5%E9%9B%AA%E5%AA%9A%E5%A8%98/%E8%8A%8B%E6%B3%A5%E9%9B%AA%E5%AA%9A%E5%A8%98/#_2","text":"\u8354\u6d66\u828b\u5934\uff08\u7535\u5546\u5e73\u53f0\u8d2d\u4e70\u5373\u53ef\uff0c\u5b9e\u60e0\u65b0\u9c9c\uff09 200g \u7d2b\u85af\u7c89 3g \u725b\u5976 165g \u7cef\u7c73\u7c89 a 50g \u7cef\u7c73\u7c89 b 75g \u7389\u7c73\u6dc0\u7c89 22g \u9ec4\u6cb9 30g \u6de1\u5976\u6cb9\uff08\u63a8\u8350\u5b89\u4f73\uff09 145g \u767d\u7802\u7cd6 26g \u6599\u7406\u6405\u62cc\u673a\uff08\u7535\u52a8\u6253\u86cb\u5668\u4e5f\u53ef\u4ee5\uff09 \u7b5b\u7f51 \u7f51\u5b54\u7ea6\u4e3a 1 \u6beb\u7c73 \u4fdd\u9c9c\u819c","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/dessert/%E8%8A%8B%E6%B3%A5%E9%9B%AA%E5%AA%9A%E5%A8%98/%E8%8A%8B%E6%B3%A5%E9%9B%AA%E5%AA%9A%E5%A8%98/#_3","text":"\u828b\u5934\u5207\u5757\uff0c\u5927\u706b\u716e\u719f\u81f3\u8f6f\uff0840 \u5206\u949f\u5373\u53ef\uff09\uff0c\u5168\u90e8\u653e\u5165\u6599\u7406\u673a \u5411\u5185\u52a0\u5165 30g \u725b\u5976\uff0c25g \u6de1\u5976\u6cb9\uff0c\u5c06\u5176\u6253\u6210\u6ce5\u72b6 \u518d\u5411\u5185\u52a0\u5165 3g \u7d2b\u85af\u7c89\uff0c18g \u767d\u7802\u7cd6\uff0c\u7ee7\u7eed\u6405\u62cc\u6253\u6210\u7ec6\u817b\u828b\u6ce5 \u53d6\u51fa\u53e6\u4e00\u4e2a\u7897\uff0c\u52a0\u5165\u5168\u90e8\u7cef\u7c73\u7c89 b\uff0c22g \u7389\u7c73\u6dc0\u7c89\uff0c135g \u725b\u5976\uff0c50g \u767d\u7802\u7cd6\uff0c\u6df7\u5300\u5e76\u8fc7\u7b5b\u4e00\u904d\uff0c\u4fdd\u9c9c\u819c\u76d6\u4e0a\u5e76\u624e\u5c0f\u6d1e\uff0c\u4e2d\u706b\u84b8\u534a\u4e2a\u5c0f\u65f6 \u5728\u84b8\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5c06\u7cef\u7c73\u7c89 a \u653e\u5165\u5e73\u5e95\u9505\u5c0f\u706b\u7ffb\u7092\u81f3\u5fae\u5fae\u53d1\u9ec4\uff08\u5373\u7092\u719f\uff09\uff0c\u4f5c\u4e3a\u624b\u7c89\u5907\u7528 \u5c06\u4e2d\u706b\u84b8\u5b8c\u534a\u5c0f\u65f6\u7684\u7cef\u7c73\u725b\u5976\u6df7\u5408\u7269\uff08\u679c\u51bb\u72b6\uff09\u8d81\u70ed\u52a0\u5165\u9ec4\u6cb9 30g\uff0c\u5c06\u9ec4\u6cb9\u63c9\u81f3\u9762\u56e2\u5b8c\u5168\u5438\u6536\uff0c\u7136\u540e\u653e\u51b0\u7bb1\u51b7\u85cf\u4e00\u5c0f\u65f6 \u53d6\u51fa\u53e6\u4e00\u53ea\u7897\uff0c\u52a0\u5165 120g \u6de1\u5976\u6cb9\uff0c8g \u767d\u7802\u7cd6\uff0c\u6253\u53d1\u81f3\u6709\u7eb9\u8def\uff0c\u88c5\u8fdb\u88f1\u82b1\u888b\u5907\u7528 \u53d6\u51fa\u51b7\u85cf\u540e\u7684\u9762\u56e2\uff0c\u6413\u63c9 5 \u5206\u949f\uff0c\u5206\u6210 30g \u4e00\u4e2a\uff0c\u5747\u5300\u6492\u4e0a 2g \u624b\u7c89\u9632\u7c98\uff0c\u64c0\u6210\u5706\u5f62\uff0c\u5148\u6324\u4e0a 5g \u88f1\u82b1\u5976\u6cb9\uff0c\u7136\u540e\u653e\u4e0a 30g \u828b\u6ce5\uff0c\u6700\u540e\u5c06\u9762\u997c\u50cf\u5305\u5305\u5b50\u4e00\u6837\u5305\u8d77\u6765\uff08\u53ef\u4ee5\u51cf\u53bb\u591a\u4f59\u7684\u76ae\uff09 \u5305\u597d\u540e\u518d\u5747\u5300\u6492 2g \u624b\u7c89\u9632\u7c98 \u91cd\u590d\u4ee5\u4e0a\u4e24\u6b65\u76f4\u81f3\u539f\u6750\u6599\u7528\u5149","title":"\u64cd\u4f5c"},{"location":"dishes/dessert/%E8%8A%8B%E6%B3%A5%E9%9B%AA%E5%AA%9A%E5%A8%98/%E8%8A%8B%E6%B3%A5%E9%9B%AA%E5%AA%9A%E5%A8%98/#_4","text":"\u5236\u4f5c\u65f6\u6700\u597d\u4f69\u6234\u4e0d\u7c98\u624b\u5957 \u5236\u4f5c\u5b8c\u5373\u53ef\u98df\u7528\uff0c\u4e0d\u7528\u518d\u52a0\u70ed \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/drink/B52%E8%BD%B0%E7%82%B8%E6%9C%BA/","text":"B52\u8f70\u70b8\u673a\u7684\u505a\u6cd5 B-52 \u662f\u9e21\u5c3e\u9152\u4e2d\u559d\u6cd5\u6bd4\u8f83\u72ec\u7279\u7684\u4e00\u79cd\uff0c\u8981\u914d\u4e0a\u77ed\u5438\u7ba1\uff0c\u9910\u5dfe\u7eb8\u548c\u6253\u706b\u673a\u3002 \u628a\u9152\u70b9\u71c3\uff0c\u7528\u5438\u7ba1\u4e00\u53e3\u6c14\u559d\u5b8c\uff0c\u7136\u540e\u4f60\u5c31\u80fd\u4f53\u9a8c\u5230\u5148\u51b7\u540e\u70ed\u90a3\u79cd\u51b0\u706b\u4e24\u91cd\u5929\u7684\u611f\u89c9\u3002\u90a3\u79cd\u611f\u89c9\uff0c\u53ea\u6709\u8bd5\u8fc7\u624d\u77e5\u9053\u3002 \u7528\u5438\u7ba1\u9002\u7528\u4e8e\u5973\u58eb\uff0c\u6700\u523a\u6fc0\u7684\u559d\u6cd5\u662f\u4e00\u53e3\u559d\u4e0b\uff0c\u559d\u7684\u65f6\u5019\u6ce8\u610f\u5c3d\u91cf\u907f\u514d\u78b0\u5230\u676f\u53e3\u5f15\u8d77\u70eb\u4f24\uff0c\u8ba9\u706b\u5728\u5634\u91cc\u706d\u6389\uff0c\u624d\u80fd\u559d\u51fa\u6700\u597d\u7684\u5473\u9053\u3002 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u7518\u9732\u5496\u5561\u9152 \u7231\u5c14\u5170\u767e\u5229\u751c\u9152 \u84dd\u5929\u539f\u4e3a\u4f0f\u7279\u52a0 \u5427\u52fa \u5229\u53e3\u9152\u676f \u6253\u706b\u673a \u8ba1\u7b97 \u6bcf\u4efd\uff1a \u7518\u9732\u5496\u5561\u9152 10ml \u7231\u5c14\u5170\u767e\u5229\u751c\u9152 10ml \u84dd\u5929\u539f\u4e3a\u4f0f\u7279\u52a0 10ml \u64cd\u4f5c \u5728\u5229\u53e3\u9152\u676f\u7684\u6700\u5e95\u5c42\u5012\u5165\u7518\u9732\u5496\u5561\u9152\u5230 1/3 \u5904\u3002(10ml) \u987a\u7740\u5427\u52fa\u7f13\u7f13\u5012\u5165\u7231\u5c14\u5170\u767e\u5229\u751c\u9152\uff0c\u4e5f\u662f 1/3 \u5de6\u53f3(10ml)\u3002\u6ce8\u610f\u8981\u6162\uff0c\u4fdd\u8bc1\u5c42\u6b21\u5206\u660e\u3002\uff08\u592a\u5feb\u751c\u9152\u4f1a\u548c\u5496\u5561\u6df7\u5408\uff09 \u6700\u540e\u5728\u4e0a\u5c42\u5012\u5165\u84dd\u5929\u539f\u5473\u4f0f\u7279\u52a0 \uff0810ml) \u7528\u6253\u706b\u673a\u70ed\u4e00\u4e0b\u676f\u53e3 \u6700\u540e\u4e00\u6b65\u70b9\u706b\uff1a \u770b\u5230\u6de1\u84dd\u8272\u7684\u5c0f\u706b\u82d7\u4e86\u5417\uff1f \u9644\u52a0\u5185\u5bb9 \u559d\u7684\u65f6\u5019\uff0c\u73b0\u5728\u9152\u5427\u5e38\u7528\u7684\u65b9\u6cd5\u662f\u7ed9\u4f60\u4e00\u4e2a\u5438\u7ba1\uff0c\u5728\u706b\u8fd8\u71c3\u70e7\u7684\u65f6\u5019\u63d2\u5165\uff0c\u7136\u540e\u5feb\u901f\u5168\u90e8\u5438\u5165\u3002 \u7531\u4e8e\u5438\u7ba1\u592a\u7ec6\uff0c\u5176\u4e2d\u6c27\u6c14\u4e0d\u8db3\uff0c\u6240\u4ee5\u706b\u82d7\u4f1a\u706d\u6389\uff0c\u4e0d\u5fc5\u62c5\u5fc3\u3002\u8fd9\u65f6\u5019\uff0c\u4f60\u4f1a\u611f\u5230\u4e00\u80a1\u70ed\u8fa3\u987a\u7740\u4f60\u7684\u5589\u5499\u4e00\u76f4\u70c8\u5230\u4f60\u7684\u80c3\uff0c\u4e4b\u540e\u5c31\u662f\u4e45\u4e45\u7684\u5496\u5561\u5976\u6cb9\u56de\u7518\u3002\u975e\u5e38\u523a\u6fc0\u53c8\u597d\u559d\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"B52\u8f70\u70b8\u673a"},{"location":"dishes/drink/B52%E8%BD%B0%E7%82%B8%E6%9C%BA/#b52","text":"B-52 \u662f\u9e21\u5c3e\u9152\u4e2d\u559d\u6cd5\u6bd4\u8f83\u72ec\u7279\u7684\u4e00\u79cd\uff0c\u8981\u914d\u4e0a\u77ed\u5438\u7ba1\uff0c\u9910\u5dfe\u7eb8\u548c\u6253\u706b\u673a\u3002 \u628a\u9152\u70b9\u71c3\uff0c\u7528\u5438\u7ba1\u4e00\u53e3\u6c14\u559d\u5b8c\uff0c\u7136\u540e\u4f60\u5c31\u80fd\u4f53\u9a8c\u5230\u5148\u51b7\u540e\u70ed\u90a3\u79cd\u51b0\u706b\u4e24\u91cd\u5929\u7684\u611f\u89c9\u3002\u90a3\u79cd\u611f\u89c9\uff0c\u53ea\u6709\u8bd5\u8fc7\u624d\u77e5\u9053\u3002 \u7528\u5438\u7ba1\u9002\u7528\u4e8e\u5973\u58eb\uff0c\u6700\u523a\u6fc0\u7684\u559d\u6cd5\u662f\u4e00\u53e3\u559d\u4e0b\uff0c\u559d\u7684\u65f6\u5019\u6ce8\u610f\u5c3d\u91cf\u907f\u514d\u78b0\u5230\u676f\u53e3\u5f15\u8d77\u70eb\u4f24\uff0c\u8ba9\u706b\u5728\u5634\u91cc\u706d\u6389\uff0c\u624d\u80fd\u559d\u51fa\u6700\u597d\u7684\u5473\u9053\u3002","title":"B52\u8f70\u70b8\u673a\u7684\u505a\u6cd5"},{"location":"dishes/drink/B52%E8%BD%B0%E7%82%B8%E6%9C%BA/#_1","text":"\u7518\u9732\u5496\u5561\u9152 \u7231\u5c14\u5170\u767e\u5229\u751c\u9152 \u84dd\u5929\u539f\u4e3a\u4f0f\u7279\u52a0 \u5427\u52fa \u5229\u53e3\u9152\u676f \u6253\u706b\u673a","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/drink/B52%E8%BD%B0%E7%82%B8%E6%9C%BA/#_2","text":"\u6bcf\u4efd\uff1a \u7518\u9732\u5496\u5561\u9152 10ml \u7231\u5c14\u5170\u767e\u5229\u751c\u9152 10ml \u84dd\u5929\u539f\u4e3a\u4f0f\u7279\u52a0 10ml","title":"\u8ba1\u7b97"},{"location":"dishes/drink/B52%E8%BD%B0%E7%82%B8%E6%9C%BA/#_3","text":"\u5728\u5229\u53e3\u9152\u676f\u7684\u6700\u5e95\u5c42\u5012\u5165\u7518\u9732\u5496\u5561\u9152\u5230 1/3 \u5904\u3002(10ml) \u987a\u7740\u5427\u52fa\u7f13\u7f13\u5012\u5165\u7231\u5c14\u5170\u767e\u5229\u751c\u9152\uff0c\u4e5f\u662f 1/3 \u5de6\u53f3(10ml)\u3002\u6ce8\u610f\u8981\u6162\uff0c\u4fdd\u8bc1\u5c42\u6b21\u5206\u660e\u3002\uff08\u592a\u5feb\u751c\u9152\u4f1a\u548c\u5496\u5561\u6df7\u5408\uff09 \u6700\u540e\u5728\u4e0a\u5c42\u5012\u5165\u84dd\u5929\u539f\u5473\u4f0f\u7279\u52a0 \uff0810ml) \u7528\u6253\u706b\u673a\u70ed\u4e00\u4e0b\u676f\u53e3 \u6700\u540e\u4e00\u6b65\u70b9\u706b\uff1a \u770b\u5230\u6de1\u84dd\u8272\u7684\u5c0f\u706b\u82d7\u4e86\u5417\uff1f","title":"\u64cd\u4f5c"},{"location":"dishes/drink/B52%E8%BD%B0%E7%82%B8%E6%9C%BA/#_4","text":"\u559d\u7684\u65f6\u5019\uff0c\u73b0\u5728\u9152\u5427\u5e38\u7528\u7684\u65b9\u6cd5\u662f\u7ed9\u4f60\u4e00\u4e2a\u5438\u7ba1\uff0c\u5728\u706b\u8fd8\u71c3\u70e7\u7684\u65f6\u5019\u63d2\u5165\uff0c\u7136\u540e\u5feb\u901f\u5168\u90e8\u5438\u5165\u3002 \u7531\u4e8e\u5438\u7ba1\u592a\u7ec6\uff0c\u5176\u4e2d\u6c27\u6c14\u4e0d\u8db3\uff0c\u6240\u4ee5\u706b\u82d7\u4f1a\u706d\u6389\uff0c\u4e0d\u5fc5\u62c5\u5fc3\u3002\u8fd9\u65f6\u5019\uff0c\u4f60\u4f1a\u611f\u5230\u4e00\u80a1\u70ed\u8fa3\u987a\u7740\u4f60\u7684\u5589\u5499\u4e00\u76f4\u70c8\u5230\u4f60\u7684\u80c3\uff0c\u4e4b\u540e\u5c31\u662f\u4e45\u4e45\u7684\u5496\u5561\u5976\u6cb9\u56de\u7518\u3002\u975e\u5e38\u523a\u6fc0\u53c8\u597d\u559d\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/drink/%E5%8F%AF%E4%B9%90%E6%A1%B6/","text":"\u53ef\u4e50\u6876\u7684\u505a\u6cd5 \u996e\u9152\u6709\u5bb3\u5065\u5eb7\uff0c\u672a\u6210\u5e74\u4eba\u7981\u6b62\u996e\u9152 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u539f\u6599 \u6ce2\u65c1\u5a01\u58eb\u5fcc \u53ef\u53e3\u53ef\u4e50 \u51b0\u5757 \u67e0\u6aac\uff08\u53ef\u9009\uff0c\u63d0\u5347\u53e3\u611f\u7528\uff09 \u5de5\u5177 \u624b\u52a8\u538b\u6c41\u5668 \u8ba1\u7b97 \u4e00\u676f\u5206\u91cf\uff0c\u7ea6 900 \u6beb\u5347\uff08\u542b\u51b0\uff09 \u5a01\u58eb\u5fcc 100 \u6beb\u5347 \u53ef\u53e3\u53ef\u4e50 500 \u6beb\u5347 \u67e0\u6aac 1 \u4e2a \u51b0\u5757 300 \u514b \u64cd\u4f5c \u67e0\u6aac\u7684\u5904\u7406 \u5c06\u67e0\u6aac\u5bf9\u534a\u5207\uff08 \u5200\u65b9\u5411\u5782\u76f4\u4e8e\u67e0\u6aac\u7684\u5934\u5c3e\u8fde\u7ebf \uff09\uff0c\u5e76\u4ece\u5176\u4e2d\u7684\u4e00\u534a\u4e2d\u5207\u53d6\u4e00\u7247\u67e0\u6aac\u5907\u7528 \u518d\u6b21\u5c06\u67e0\u6aac\u5bf9\u534a\u5207\uff0c\u5c06\u5f97\u5230\u7684 4 \u89d2\u67e0\u6aac\u7528\u538b\u6c41\u5668\u538b\u51fa\u67e0\u6aac\u6c41\u7f6e\u4e8e\u5bb9\u5668\u4e2d\u5907\u7528 \u5c06\u6324\u538b\u8fc7\u7684\u67e0\u6aac\u7f6e\u4e8e\u5bb9\u5668\u4e2d\u5907\u7528 \u6b63\u5f0f\u8c03\u914d \u9009\u62e9\u4e00\u4e2a\u4f60\u6700\u559c\u6b22\u7684\u676f\u5b50\uff0c\u5efa\u8bae\u4f7f\u7528\u5bb9\u91cf\u5728 1 \u5347\u5de6\u53f3\u7684\u5927\u578b\u73bb\u7483\u676f\u6216\u94c1\u76ae\u9152\u6876 \u5c06\u51b0\u5757\u548c\u6324\u538b\u8fc7\u7684\u67e0\u6aac\u5165\u676f\u4e2d\uff08\u53ef\u6839\u636e\u4e2a\u4eba\u559c\u597d\u8bbe\u8ba1\u67e0\u6aac\u4e0e\u51b0\u5757\u7684\u6446\u653e\uff09 \u5012\u5165 15 \u6beb\u5347\u67e0\u6aac\u6c41\uff08\u5982\u679c\u559c\u9178\u53ef\u4ee5\u52a0\u591a\u70b9\u6216\u5168\u52a0\uff09 \u6cbf\u676f\u58c1\u7f13\u6162\u5012\u5165\u53ef\u53e3\u53ef\u4e50\u81f3\u8ddd\u79bb\u676f\u53e3 3/4 \u5904\uff08\u63a7\u5236\u53ef\u4e50\u548c\u5a01\u58eb\u5fcc\u7684\u6bd4\u4f8b\u7ea6\u5728 1:5 \uff09 \u5012\u5165\u5a01\u58eb\u5fcc\u76f4\u81f3\u6ee1\u676f \u9644\u52a0\u5185\u5bb9 \u53ef\u4e50\u6876\u56e0\u51b0\u5757\u548c\u53ef\u4e50\u7684\u53e3\u611f\u63a9\u76d6\u4e86\u5a01\u58eb\u5fcc\u7684\u9152\u5473\uff0c\u56e0\u6b64\u4e0d\u5584\u9152\u529b\u7684\u4eba\u4e5f\u5bb9\u6613\u5728\u4e0d\u77e5\u4e0d\u89c9\u4e2d\u8fc7\u91cf\u996e\u9152\uff0c\u8bf7\u5728\u4fdd\u8bc1\u4e2a\u4eba\u4e0e\u996e\u9152\u8005\u7684\u5b89\u5168\u4e0b\u8c03\u914d\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u53ef\u4e50\u6876"},{"location":"dishes/drink/%E5%8F%AF%E4%B9%90%E6%A1%B6/#_1","text":"\u996e\u9152\u6709\u5bb3\u5065\u5eb7\uff0c\u672a\u6210\u5e74\u4eba\u7981\u6b62\u996e\u9152","title":"\u53ef\u4e50\u6876\u7684\u505a\u6cd5"},{"location":"dishes/drink/%E5%8F%AF%E4%B9%90%E6%A1%B6/#_2","text":"\u539f\u6599 \u6ce2\u65c1\u5a01\u58eb\u5fcc \u53ef\u53e3\u53ef\u4e50 \u51b0\u5757 \u67e0\u6aac\uff08\u53ef\u9009\uff0c\u63d0\u5347\u53e3\u611f\u7528\uff09 \u5de5\u5177 \u624b\u52a8\u538b\u6c41\u5668","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/drink/%E5%8F%AF%E4%B9%90%E6%A1%B6/#_3","text":"\u4e00\u676f\u5206\u91cf\uff0c\u7ea6 900 \u6beb\u5347\uff08\u542b\u51b0\uff09 \u5a01\u58eb\u5fcc 100 \u6beb\u5347 \u53ef\u53e3\u53ef\u4e50 500 \u6beb\u5347 \u67e0\u6aac 1 \u4e2a \u51b0\u5757 300 \u514b","title":"\u8ba1\u7b97"},{"location":"dishes/drink/%E5%8F%AF%E4%B9%90%E6%A1%B6/#_4","text":"\u67e0\u6aac\u7684\u5904\u7406 \u5c06\u67e0\u6aac\u5bf9\u534a\u5207\uff08 \u5200\u65b9\u5411\u5782\u76f4\u4e8e\u67e0\u6aac\u7684\u5934\u5c3e\u8fde\u7ebf \uff09\uff0c\u5e76\u4ece\u5176\u4e2d\u7684\u4e00\u534a\u4e2d\u5207\u53d6\u4e00\u7247\u67e0\u6aac\u5907\u7528 \u518d\u6b21\u5c06\u67e0\u6aac\u5bf9\u534a\u5207\uff0c\u5c06\u5f97\u5230\u7684 4 \u89d2\u67e0\u6aac\u7528\u538b\u6c41\u5668\u538b\u51fa\u67e0\u6aac\u6c41\u7f6e\u4e8e\u5bb9\u5668\u4e2d\u5907\u7528 \u5c06\u6324\u538b\u8fc7\u7684\u67e0\u6aac\u7f6e\u4e8e\u5bb9\u5668\u4e2d\u5907\u7528 \u6b63\u5f0f\u8c03\u914d \u9009\u62e9\u4e00\u4e2a\u4f60\u6700\u559c\u6b22\u7684\u676f\u5b50\uff0c\u5efa\u8bae\u4f7f\u7528\u5bb9\u91cf\u5728 1 \u5347\u5de6\u53f3\u7684\u5927\u578b\u73bb\u7483\u676f\u6216\u94c1\u76ae\u9152\u6876 \u5c06\u51b0\u5757\u548c\u6324\u538b\u8fc7\u7684\u67e0\u6aac\u5165\u676f\u4e2d\uff08\u53ef\u6839\u636e\u4e2a\u4eba\u559c\u597d\u8bbe\u8ba1\u67e0\u6aac\u4e0e\u51b0\u5757\u7684\u6446\u653e\uff09 \u5012\u5165 15 \u6beb\u5347\u67e0\u6aac\u6c41\uff08\u5982\u679c\u559c\u9178\u53ef\u4ee5\u52a0\u591a\u70b9\u6216\u5168\u52a0\uff09 \u6cbf\u676f\u58c1\u7f13\u6162\u5012\u5165\u53ef\u53e3\u53ef\u4e50\u81f3\u8ddd\u79bb\u676f\u53e3 3/4 \u5904\uff08\u63a7\u5236\u53ef\u4e50\u548c\u5a01\u58eb\u5fcc\u7684\u6bd4\u4f8b\u7ea6\u5728 1:5 \uff09 \u5012\u5165\u5a01\u58eb\u5fcc\u76f4\u81f3\u6ee1\u676f","title":"\u64cd\u4f5c"},{"location":"dishes/drink/%E5%8F%AF%E4%B9%90%E6%A1%B6/#_5","text":"\u53ef\u4e50\u6876\u56e0\u51b0\u5757\u548c\u53ef\u4e50\u7684\u53e3\u611f\u63a9\u76d6\u4e86\u5a01\u58eb\u5fcc\u7684\u9152\u5473\uff0c\u56e0\u6b64\u4e0d\u5584\u9152\u529b\u7684\u4eba\u4e5f\u5bb9\u6613\u5728\u4e0d\u77e5\u4e0d\u89c9\u4e2d\u8fc7\u91cf\u996e\u9152\uff0c\u8bf7\u5728\u4fdd\u8bc1\u4e2a\u4eba\u4e0e\u996e\u9152\u8005\u7684\u5b89\u5168\u4e0b\u8c03\u914d\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/drink/%E5%A5%B6%E8%8C%B6/","text":"\u5976\u8336\u7684\u505a\u6cd5 \u5976\u8336\u662f\u4e00\u79cd\u7b80\u5355\u6613\u505a\u7684\u996e\u6599\u3002\u4e00\u822c\u521d\u5b66\u8005\u53ea\u9700\u8981 30 \u5206\u949f\u5373\u53ef\u5b8c\u6210\u3002 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u888b\u6ce1\u7ea2\u8336\uff08\u63a8\u8350\u7acb\u987f\u9ec4\u724c\u7cbe\u9009\u7ea2\u8336\uff09 \u5168\u8102\u5976\u7c89\u6216\u6de1\u5976 \u676f\u5b50\uff0c\u4f8b\u5982\u5e26\u523b\u5ea6\u7684\u676f\u5b50\uff0c\u9676\u74f7\u676f\u6216\u4fdd\u6e29\u676f \u8ba1\u7b97 \u6bcf\u4efd\uff1a \u888b\u6ce1\u7ea2\u8336 2 \u5305\uff08\u7ea6 4g\uff09 \u5976\u7c89 11-12g \u7802\u7cd6 5-7g \u64cd\u4f5c \u53d6\u888b\u6ce1\u7ea2\u8336 2 \u5305\u653e\u5165\u676f\u4e2d\uff0c\u52a0\u5165 180-200mL \u6cb8\u6c34 \u3002 \u7b49\u5f85 20 - 30 \u5206\u949f \u3002 \u79f0\u53d6 11-12g \u5976\u7c89\u548c 5-7g \u7802\u7cd6\uff0c\u5206\u522b\u52a0\u5165\u524d\u4e00\u6b65\u9aa4\u5f97\u5230\u7684\u6db2\u4f53\u4e2d\u3002 \u6405\u62cc\u5747\u5300\u5373\u53ef\u996e\u7528\u3002 \u9644\u52a0\u5185\u5bb9 \u52a0\u5165\u6cb8\u6c34\u540e\uff0c\u5c3d\u91cf\u4fdd\u6301\u676f\u5b50\u5185\u90e8\u6e29\u6696\uff0c\u4f8b\u5982\u4f7f\u7528\u5f00\u53e3\u8f83\u5c0f\u7684\u676f\u5b50\u6216\u76d6\u4e0a\u76d6\u5b50\u3002\u5982\u679c\u6c14\u6e29\u8f83\u4f4e\u65f6\uff0c\u4f7f\u7528\u91cf\u676f\u91cf\u53d6\u53ef\u80fd\u5bfc\u81f4\u6cb8\u6c34\u5728\u51b2\u5165\u7ea2\u8336\u524d\u51b7\u5374\uff0c\u5219\u53ef\u4ee5\u4e0d\u4f7f\u7528\u91cf\u676f\u91cf\u53d6\u800c\u76f4\u63a5\u4f30\u8ba1\u5176\u4f53\u79ef\u3002 \u7b49\u5f85\u65f6\u95f4\u7ed3\u675f\u540e\u53ef\u63d0\u8d77\u6216\u6405\u52a8\u8336\u5305\u4ee5\u4f7f\u51b2\u6ce1\u66f4\u52a0\u5747\u5300\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u5976\u8336"},{"location":"dishes/drink/%E5%A5%B6%E8%8C%B6/#_1","text":"\u5976\u8336\u662f\u4e00\u79cd\u7b80\u5355\u6613\u505a\u7684\u996e\u6599\u3002\u4e00\u822c\u521d\u5b66\u8005\u53ea\u9700\u8981 30 \u5206\u949f\u5373\u53ef\u5b8c\u6210\u3002","title":"\u5976\u8336\u7684\u505a\u6cd5"},{"location":"dishes/drink/%E5%A5%B6%E8%8C%B6/#_2","text":"\u888b\u6ce1\u7ea2\u8336\uff08\u63a8\u8350\u7acb\u987f\u9ec4\u724c\u7cbe\u9009\u7ea2\u8336\uff09 \u5168\u8102\u5976\u7c89\u6216\u6de1\u5976 \u676f\u5b50\uff0c\u4f8b\u5982\u5e26\u523b\u5ea6\u7684\u676f\u5b50\uff0c\u9676\u74f7\u676f\u6216\u4fdd\u6e29\u676f","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/drink/%E5%A5%B6%E8%8C%B6/#_3","text":"\u6bcf\u4efd\uff1a \u888b\u6ce1\u7ea2\u8336 2 \u5305\uff08\u7ea6 4g\uff09 \u5976\u7c89 11-12g \u7802\u7cd6 5-7g","title":"\u8ba1\u7b97"},{"location":"dishes/drink/%E5%A5%B6%E8%8C%B6/#_4","text":"\u53d6\u888b\u6ce1\u7ea2\u8336 2 \u5305\u653e\u5165\u676f\u4e2d\uff0c\u52a0\u5165 180-200mL \u6cb8\u6c34 \u3002 \u7b49\u5f85 20 - 30 \u5206\u949f \u3002 \u79f0\u53d6 11-12g \u5976\u7c89\u548c 5-7g \u7802\u7cd6\uff0c\u5206\u522b\u52a0\u5165\u524d\u4e00\u6b65\u9aa4\u5f97\u5230\u7684\u6db2\u4f53\u4e2d\u3002 \u6405\u62cc\u5747\u5300\u5373\u53ef\u996e\u7528\u3002","title":"\u64cd\u4f5c"},{"location":"dishes/drink/%E5%A5%B6%E8%8C%B6/#_5","text":"\u52a0\u5165\u6cb8\u6c34\u540e\uff0c\u5c3d\u91cf\u4fdd\u6301\u676f\u5b50\u5185\u90e8\u6e29\u6696\uff0c\u4f8b\u5982\u4f7f\u7528\u5f00\u53e3\u8f83\u5c0f\u7684\u676f\u5b50\u6216\u76d6\u4e0a\u76d6\u5b50\u3002\u5982\u679c\u6c14\u6e29\u8f83\u4f4e\u65f6\uff0c\u4f7f\u7528\u91cf\u676f\u91cf\u53d6\u53ef\u80fd\u5bfc\u81f4\u6cb8\u6c34\u5728\u51b2\u5165\u7ea2\u8336\u524d\u51b7\u5374\uff0c\u5219\u53ef\u4ee5\u4e0d\u4f7f\u7528\u91cf\u676f\u91cf\u53d6\u800c\u76f4\u63a5\u4f30\u8ba1\u5176\u4f53\u79ef\u3002 \u7b49\u5f85\u65f6\u95f4\u7ed3\u675f\u540e\u53ef\u63d0\u8d77\u6216\u6405\u52a8\u8336\u5305\u4ee5\u4f7f\u51b2\u6ce1\u66f4\u52a0\u5747\u5300\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/drink/%E6%9D%A8%E6%9E%9D%E7%94%98%E9%9C%B2/","text":"\u6768\u679d\u7518\u9732\u7684\u505a\u6cd5 \u6ca1\u7528\u897f\u8c37\u7c73\u7684\u539f\u56e0\u662f\u5bb6\u91cc\u6ca1\u6709\uff0c\u4f46\u662f\u6709\u5f88\u591a\u7684\u5947\u4e9a\u7c7d\u5c31\u62ff\u6765\u4ee3\u66ff\u3002\u800c\u4e14\u5947\u4e9a\u7c7d\u7528\u6ce1\u4e0d\u7528\u716e\uff0c\u7701\u4e86\u5f88\u591a\u65f6\u95f4! \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u676f \u6c34\u679c\u5200 \u725b\u5976 \u51b0\u5757 \u8c03\u7406\u673a/\u679c\u6c41\u673a \u8ba1\u7b97 \u6bcf\u4efd\uff1a \u5947\u4e9a\u7c7d 24g \u725b\u5976 50ml \u51b0\u5757 2 \u5c0f\u5757 \u8292\u679c 1 \u7c92 \u8461\u8404\u67da 1/2 \u7c92 \u6930\u5976 150ml \u70b9\u7f00: \u5207\u4e1d\u8292\u679c\u5e72 \uff08\u53ef\u9009\uff09 \u5207\u4e1d\u67f3\u6a59\u5e72 \uff08\u53ef\u9009\uff09 \u64cd\u4f5c \u5947\u4e9a\u7c7d\u6ce1\u725b\u5976 10 \u5206\u949f\u3002 \u6ce1\u7c7d\u4e4b\u65f6\uff0c\u628a\u534a\u7c92\u8292\u679c\u3001\u8461\u8404\u67da\u53bb\u76ae\u5207\u4e01\uff0c\u653e\u5165\u676f\u4e2d\u3002 \u534a\u7c92\u8292\u679c\u5207\u5c0f\u5757\u653e\u5165\u8c03\u7406\u673a\u52a0\u51b0\u5757\u3001\u6930\u5976\u6253\u6210\u6ce5\u3002 \u5012\u5165\u676f\u4e2d\uff0c\u653e\u4e0a\u70b9\u7f00\u6750\u6599\uff08\u5982\u6709\uff09\u3002 \u4e00\u8fb9\u4eab\u7528\u4e00\u8fb9\u5199\u4ee3\u7801\uff01\uff01 \u9644\u52a0\u5185\u5bb9 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u6768\u679d\u7518\u9732"},{"location":"dishes/drink/%E6%9D%A8%E6%9E%9D%E7%94%98%E9%9C%B2/#_1","text":"\u6ca1\u7528\u897f\u8c37\u7c73\u7684\u539f\u56e0\u662f\u5bb6\u91cc\u6ca1\u6709\uff0c\u4f46\u662f\u6709\u5f88\u591a\u7684\u5947\u4e9a\u7c7d\u5c31\u62ff\u6765\u4ee3\u66ff\u3002\u800c\u4e14\u5947\u4e9a\u7c7d\u7528\u6ce1\u4e0d\u7528\u716e\uff0c\u7701\u4e86\u5f88\u591a\u65f6\u95f4!","title":"\u6768\u679d\u7518\u9732\u7684\u505a\u6cd5"},{"location":"dishes/drink/%E6%9D%A8%E6%9E%9D%E7%94%98%E9%9C%B2/#_2","text":"\u676f \u6c34\u679c\u5200 \u725b\u5976 \u51b0\u5757 \u8c03\u7406\u673a/\u679c\u6c41\u673a","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/drink/%E6%9D%A8%E6%9E%9D%E7%94%98%E9%9C%B2/#_3","text":"\u6bcf\u4efd\uff1a \u5947\u4e9a\u7c7d 24g \u725b\u5976 50ml \u51b0\u5757 2 \u5c0f\u5757 \u8292\u679c 1 \u7c92 \u8461\u8404\u67da 1/2 \u7c92 \u6930\u5976 150ml \u70b9\u7f00: \u5207\u4e1d\u8292\u679c\u5e72 \uff08\u53ef\u9009\uff09 \u5207\u4e1d\u67f3\u6a59\u5e72 \uff08\u53ef\u9009\uff09","title":"\u8ba1\u7b97"},{"location":"dishes/drink/%E6%9D%A8%E6%9E%9D%E7%94%98%E9%9C%B2/#_4","text":"\u5947\u4e9a\u7c7d\u6ce1\u725b\u5976 10 \u5206\u949f\u3002 \u6ce1\u7c7d\u4e4b\u65f6\uff0c\u628a\u534a\u7c92\u8292\u679c\u3001\u8461\u8404\u67da\u53bb\u76ae\u5207\u4e01\uff0c\u653e\u5165\u676f\u4e2d\u3002 \u534a\u7c92\u8292\u679c\u5207\u5c0f\u5757\u653e\u5165\u8c03\u7406\u673a\u52a0\u51b0\u5757\u3001\u6930\u5976\u6253\u6210\u6ce5\u3002 \u5012\u5165\u676f\u4e2d\uff0c\u653e\u4e0a\u70b9\u7f00\u6750\u6599\uff08\u5982\u6709\uff09\u3002 \u4e00\u8fb9\u4eab\u7528\u4e00\u8fb9\u5199\u4ee3\u7801\uff01\uff01","title":"\u64cd\u4f5c"},{"location":"dishes/drink/%E6%9D%A8%E6%9E%9D%E7%94%98%E9%9C%B2/#_5","text":"\u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/drink/%E9%85%B8%E6%A2%85%E6%B1%A4%EF%BC%88%E5%8D%8A%E6%88%90%E5%93%81%E5%8A%A0%E5%B7%A5%EF%BC%89/","text":"\u9178\u6885\u6c41\u7684\u505a\u6cd5 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u9178\u6885\u6676\u56fa\u4f53\u996e\u6599 \u65b9\u7cd6\uff08\u53ef\u9009\uff09 \u5317\u4eac\u4e8c\u9505\u5934\u9152\uff08\u53ef\u9009\uff09 \u8ba1\u7b97 \u996e\u7528\u6c34 1177 \u514b \u9178\u6885\u6676\u56fa\u4f53\u996e\u6599 120 \u514b \u65b9\u7cd6 9 \u514b \u5317\u4eac\u4e8c\u9505\u5934\u9152 48 \u514b \u4e0a\u8ff0\u6240\u6709\u7528\u91cf\u53ef\u4ee5\u7b49\u6bd4\u4f8b\u589e\u52a0\u6216\u51cf\u5c0f\u3002 \u64cd\u4f5c \u53d6\u996e\u7528\u6c34 1177 \u514b\u3002 \u653e\u5165\u9178\u6885\u6676\u56fa\u4f53\u996e\u6599 60 \u514b\uff0c\u4f7f\u7528\u6c64\u5319\u987a\u65f6\u9488\u6405\u62cc 50 \u5708\u3002 \u518d\u653e\u5165\u5269\u4e0b 60 \u514b\u9178\u6885\u6676\u56fa\u4f53\u996e\u6599\uff0c\u518d\u6b21\u4f7f\u7528\u6c64\u5319\u987a\u65f6\u9488\u6405\u62cc 50 \u5708\u3002 \u653e\u5165 9 \u514b\u7684\u65b9\u7cd6\uff0c\u4f7f\u7528\u6c64\u5319\u987a\u65f6\u9488\u6405\u62cc 100 \u5708\u3002 \u653e\u5165\u5317\u4eac\u4e8c\u9505\u5934\u9152 48 \u514b\uff0c\u7528\u6c64\u5319\u987a\u65f6\u9488\u6405\u62cc 30 \u5708\u3002 \u9644\u52a0\u5185\u5bb9 \u5982\u679c\u6ca1\u6709\u51c6\u5907\u65b9\u7cd6\u6216\u5317\u4eac\u4e8c\u9505\u5934\uff0c\u53ef\u4ee5\u7701\u7565\u64cd\u4f5c\u4e2d\u7684\u7b2c 4 \u6b65\u6216\u7b2c 5 \u6b65\u3002 \u653e\u5165\u51b0\u7bb1\u51b7\u85cf\u540e\u518d\u996e\u7528\u6548\u679c\u66f4\u4f73\u3002 \u996e\u9152\u8bf7\u52ff\u9a7e\u8f66\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9178\u6885\u6c64\uff08\u534a\u6210\u54c1\u52a0\u5de5\uff09"},{"location":"dishes/drink/%E9%85%B8%E6%A2%85%E6%B1%A4%EF%BC%88%E5%8D%8A%E6%88%90%E5%93%81%E5%8A%A0%E5%B7%A5%EF%BC%89/#_1","text":"","title":"\u9178\u6885\u6c41\u7684\u505a\u6cd5"},{"location":"dishes/drink/%E9%85%B8%E6%A2%85%E6%B1%A4%EF%BC%88%E5%8D%8A%E6%88%90%E5%93%81%E5%8A%A0%E5%B7%A5%EF%BC%89/#_2","text":"\u9178\u6885\u6676\u56fa\u4f53\u996e\u6599 \u65b9\u7cd6\uff08\u53ef\u9009\uff09 \u5317\u4eac\u4e8c\u9505\u5934\u9152\uff08\u53ef\u9009\uff09","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/drink/%E9%85%B8%E6%A2%85%E6%B1%A4%EF%BC%88%E5%8D%8A%E6%88%90%E5%93%81%E5%8A%A0%E5%B7%A5%EF%BC%89/#_3","text":"\u996e\u7528\u6c34 1177 \u514b \u9178\u6885\u6676\u56fa\u4f53\u996e\u6599 120 \u514b \u65b9\u7cd6 9 \u514b \u5317\u4eac\u4e8c\u9505\u5934\u9152 48 \u514b \u4e0a\u8ff0\u6240\u6709\u7528\u91cf\u53ef\u4ee5\u7b49\u6bd4\u4f8b\u589e\u52a0\u6216\u51cf\u5c0f\u3002","title":"\u8ba1\u7b97"},{"location":"dishes/drink/%E9%85%B8%E6%A2%85%E6%B1%A4%EF%BC%88%E5%8D%8A%E6%88%90%E5%93%81%E5%8A%A0%E5%B7%A5%EF%BC%89/#_4","text":"\u53d6\u996e\u7528\u6c34 1177 \u514b\u3002 \u653e\u5165\u9178\u6885\u6676\u56fa\u4f53\u996e\u6599 60 \u514b\uff0c\u4f7f\u7528\u6c64\u5319\u987a\u65f6\u9488\u6405\u62cc 50 \u5708\u3002 \u518d\u653e\u5165\u5269\u4e0b 60 \u514b\u9178\u6885\u6676\u56fa\u4f53\u996e\u6599\uff0c\u518d\u6b21\u4f7f\u7528\u6c64\u5319\u987a\u65f6\u9488\u6405\u62cc 50 \u5708\u3002 \u653e\u5165 9 \u514b\u7684\u65b9\u7cd6\uff0c\u4f7f\u7528\u6c64\u5319\u987a\u65f6\u9488\u6405\u62cc 100 \u5708\u3002 \u653e\u5165\u5317\u4eac\u4e8c\u9505\u5934\u9152 48 \u514b\uff0c\u7528\u6c64\u5319\u987a\u65f6\u9488\u6405\u62cc 30 \u5708\u3002","title":"\u64cd\u4f5c"},{"location":"dishes/drink/%E9%85%B8%E6%A2%85%E6%B1%A4%EF%BC%88%E5%8D%8A%E6%88%90%E5%93%81%E5%8A%A0%E5%B7%A5%EF%BC%89/#_5","text":"\u5982\u679c\u6ca1\u6709\u51c6\u5907\u65b9\u7cd6\u6216\u5317\u4eac\u4e8c\u9505\u5934\uff0c\u53ef\u4ee5\u7701\u7565\u64cd\u4f5c\u4e2d\u7684\u7b2c 4 \u6b65\u6216\u7b2c 5 \u6b65\u3002 \u653e\u5165\u51b0\u7bb1\u51b7\u85cf\u540e\u518d\u996e\u7528\u6548\u679c\u66f4\u4f73\u3002 \u996e\u9152\u8bf7\u52ff\u9a7e\u8f66\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/drink/%E5%A5%87%E5%BC%82%E6%9E%9C%E8%8F%A0%E8%8F%9C%E7%89%B9%E8%B0%83/%E5%A5%87%E5%BC%82%E6%9E%9C%E8%8F%A0%E8%8F%9C%E7%89%B9%E8%B0%83/","text":"\u5947\u5f02\u679c\u83e0\u83dc\u7279\u8c03\u7684\u505a\u6cd5 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u539f\u6599: \u5947\u5f02\u679c \u82f9\u679c \u83e0\u83dc\u53f6\u5c11\u8bb8 \u6c34 \u767d\u7802\u7cd6 \u5de5\u5177 \u69a8\u6c41\u673a \u8ba1\u7b97 \u996e\u7528\u6c34 700ml \u5947\u5f02\u679c 2 \u4e2a \u82f9\u679c 1/2 \u4e2a \u83e0\u83dc\u53f6 4 \u53f6 \u767d\u7802\u7cd6 12 \u514b \u64cd\u4f5c \u5c06\u7315\u7334\u6843\u5207\u6210\u4e24\u534a\uff0c\u6bcf\u534a\u518d\u5206\u56db\u4efd\u5c0f\u5757 \u5c06\u82f9\u679c\u5207\u4e01 \u5c06\u83e0\u83dc\u53f6\u53bb\u6897\uff0c\u53ea\u7559\u53f6\u5b50\u90e8\u5206 \u5c06\u83e0\u83dc\u5207\u788e \u4e00\u8d77\u5012\u5165\u69a8\u6c41\u673a\u6405\u62cc\u676f \u6ce8\u6c34 \u52a0\u5165\u767d\u7802\u7cd6 \u542f\u52a8\u6405\u62cc\u673a\uff0c\u6405\u62cc\u7ea6 4 \u4e2a 15 \u79d2\uff08\u6bcf 15 \u79d2\u505c\u4e0b\u770b\u72b6\u6001\uff09 \u9644\u52a0\u5185\u5bb9 \u5173\u4e8e\u767d\u7802\u7cd6\u7684\u91cf\uff1a\u5168\u7cd6\u4e3a 12g\uff0c\u53ef\u6839\u636e\u4e2a\u4eba\u60c5\u51b5\u5728 0-12g \u4e2d\u8c03\u6574 \u672c\u54c1\u662f\u4eff\u7167\u5b9c\u5bb6\u7684\u5947\u5f02\u679c\u83e0\u83dc\u6c41\u81ea\u5df1\u7814\u5236\u7684\uff0c\u6ca1\u6709\u5b9c\u5bb6\u7684\u597d\u559d\uff0c\u4f46\u4e5f\u4e0d\u9519 \u6b22\u8fce\u6539\u8fdb\uff01 \u6210\u54c1 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u5947\u5f02\u679c\u83e0\u83dc\u7279\u8c03"},{"location":"dishes/drink/%E5%A5%87%E5%BC%82%E6%9E%9C%E8%8F%A0%E8%8F%9C%E7%89%B9%E8%B0%83/%E5%A5%87%E5%BC%82%E6%9E%9C%E8%8F%A0%E8%8F%9C%E7%89%B9%E8%B0%83/#_1","text":"","title":"\u5947\u5f02\u679c\u83e0\u83dc\u7279\u8c03\u7684\u505a\u6cd5"},{"location":"dishes/drink/%E5%A5%87%E5%BC%82%E6%9E%9C%E8%8F%A0%E8%8F%9C%E7%89%B9%E8%B0%83/%E5%A5%87%E5%BC%82%E6%9E%9C%E8%8F%A0%E8%8F%9C%E7%89%B9%E8%B0%83/#_2","text":"\u539f\u6599: \u5947\u5f02\u679c \u82f9\u679c \u83e0\u83dc\u53f6\u5c11\u8bb8 \u6c34 \u767d\u7802\u7cd6 \u5de5\u5177 \u69a8\u6c41\u673a","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/drink/%E5%A5%87%E5%BC%82%E6%9E%9C%E8%8F%A0%E8%8F%9C%E7%89%B9%E8%B0%83/%E5%A5%87%E5%BC%82%E6%9E%9C%E8%8F%A0%E8%8F%9C%E7%89%B9%E8%B0%83/#_3","text":"\u996e\u7528\u6c34 700ml \u5947\u5f02\u679c 2 \u4e2a \u82f9\u679c 1/2 \u4e2a \u83e0\u83dc\u53f6 4 \u53f6 \u767d\u7802\u7cd6 12 \u514b","title":"\u8ba1\u7b97"},{"location":"dishes/drink/%E5%A5%87%E5%BC%82%E6%9E%9C%E8%8F%A0%E8%8F%9C%E7%89%B9%E8%B0%83/%E5%A5%87%E5%BC%82%E6%9E%9C%E8%8F%A0%E8%8F%9C%E7%89%B9%E8%B0%83/#_4","text":"\u5c06\u7315\u7334\u6843\u5207\u6210\u4e24\u534a\uff0c\u6bcf\u534a\u518d\u5206\u56db\u4efd\u5c0f\u5757 \u5c06\u82f9\u679c\u5207\u4e01 \u5c06\u83e0\u83dc\u53f6\u53bb\u6897\uff0c\u53ea\u7559\u53f6\u5b50\u90e8\u5206 \u5c06\u83e0\u83dc\u5207\u788e \u4e00\u8d77\u5012\u5165\u69a8\u6c41\u673a\u6405\u62cc\u676f \u6ce8\u6c34 \u52a0\u5165\u767d\u7802\u7cd6 \u542f\u52a8\u6405\u62cc\u673a\uff0c\u6405\u62cc\u7ea6 4 \u4e2a 15 \u79d2\uff08\u6bcf 15 \u79d2\u505c\u4e0b\u770b\u72b6\u6001\uff09","title":"\u64cd\u4f5c"},{"location":"dishes/drink/%E5%A5%87%E5%BC%82%E6%9E%9C%E8%8F%A0%E8%8F%9C%E7%89%B9%E8%B0%83/%E5%A5%87%E5%BC%82%E6%9E%9C%E8%8F%A0%E8%8F%9C%E7%89%B9%E8%B0%83/#_5","text":"\u5173\u4e8e\u767d\u7802\u7cd6\u7684\u91cf\uff1a\u5168\u7cd6\u4e3a 12g\uff0c\u53ef\u6839\u636e\u4e2a\u4eba\u60c5\u51b5\u5728 0-12g \u4e2d\u8c03\u6574 \u672c\u54c1\u662f\u4eff\u7167\u5b9c\u5bb6\u7684\u5947\u5f02\u679c\u83e0\u83dc\u6c41\u81ea\u5df1\u7814\u5236\u7684\uff0c\u6ca1\u6709\u5b9c\u5bb6\u7684\u597d\u559d\uff0c\u4f46\u4e5f\u4e0d\u9519 \u6b22\u8fce\u6539\u8fdb\uff01","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/drink/%E5%A5%87%E5%BC%82%E6%9E%9C%E8%8F%A0%E8%8F%9C%E7%89%B9%E8%B0%83/%E5%A5%87%E5%BC%82%E6%9E%9C%E8%8F%A0%E8%8F%9C%E7%89%B9%E8%B0%83/#_6","text":"\u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u6210\u54c1"},{"location":"dishes/drink/%E7%99%BE%E9%A6%99%E6%9E%9C%E6%A9%99%E5%AD%90%E7%89%B9%E8%B0%83/%E7%99%BE%E9%A6%99%E6%9E%9C%E6%A9%99%E5%AD%90%E7%89%B9%E8%B0%83/","text":"\u767e\u9999\u679c\u6a59\u5b50\u7279\u8c03\u7684\u505a\u6cd5 \u8309\u8389\u7eff\u8336\u7248\u672c \u82cf\u6253\u6c14\u6ce1\u6c34\u7248\u672c \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u539f\u6599: \u767e\u9999\u679c \u6a59\u5b50 \u8309\u8389\u7eff\u8336\u8336\u53f6/\u82cf\u6253\u6c14\u6ce1\u6c34\u4e8c\u9009\u4e00 \u767d\u7802\u7cd6 \u51b0\u5757 \u8702\u871c\uff08\u53ef\u9009\uff09 \u8584\u8377\u53f6\u6216\u5176\u4ed6\u7eff\u53f6\uff08\u53ef\u9009\uff0c\u88c5\u9970\u4f7f\u7528\uff09 \u5de5\u5177 \u624b\u52a8\u538b\u6c41\u5668 \u8ba1\u7b97 \u57fa\u4e8e\u8309\u8389\u7eff\u8336\u7248\u672c\u51c6\u5907\uff0c\u4e00\u676f\u5206\u91cf\uff0c\u7ea6 380 \u6beb\u5347 \u6a59\u5b50 1 \u4e2a\uff08\u7ea6 200 \u514b\uff0c\u62f3\u5934\u5927\u5c0f\uff09 \u8309\u8389\u7eff\u8336\u8336\u53f6 3~6 \u514b \u5f00\u6c34 150 \u6beb\u5347 \u51b0\u5757 160 \u514b\u4ee5\u4e0a \u814c\u5236\u767e\u9999\u679c\u90e8\u5206\uff08\u56e0\u4e3a\u91cf\u5c0f\u4e0d\u597d\u914d\u7f6e\uff0c\u8fd9\u91cc\u662f\u4e24\u6b21\u7684\u5206\u91cf\uff09 \u767e\u9999\u679c 3 \u4e2a \u767d\u7802\u7cd6 30 \u514b \u8702\u871c 10 \u514b\uff08\u5982\u679c\u6ca1\u6709\u53ef\u4ee5\u7528 5 \u514b\u767d\u7802\u7cd6\u4ee3\u66ff\uff09 \u64cd\u4f5c \u767e\u9999\u679c\u814c\u5236\uff08\u56e0\u4e3a\u91cf\u5c0f\u4e0d\u597d\u914d\u7f6e\uff0c\u8fd9\u91cc\u662f\u4e24\u6b21\u7684\u5206\u91cf\uff09 \u5c06\u4e09\u4e2a\u767e\u9999\u679c\u7684\u679c\u8089\u53d6\u51fa\u6765\uff08\u91cc\u9762\u7684\u6c41\u4e5f\u4e0d\u80fd\u653e\u8fc7\uff09\uff0c\u7f6e\u4e8e\u5bb9\u5668\u4e2d \u79f0\u91cf 30 \u514b\u767d\u7802\u7cd6\u653e\u5165 \u79f0\u91cf 10 \u514b\u8702\u871c\u653e\u5165\uff08\u5982\u679c\u6ca1\u6709\u53ef\u4ee5\u7528 5 \u514b\u767d\u7802\u7cd6\u4ee3\u66ff\uff09 \u6405\u62cc\u5747\u5300 \u5bb9\u5668\u4fdd\u9c9c\u819c\u5c01\u53e3\uff0c\u653e\u5165\u51b0\u7bb1\u4e2d\u8fdb\u884c 12~24 \u5c0f\u65f6\u7684\u814c\u5236 \u8309\u8389\u7eff\u8336\u8c03\u914d\uff08\u63a8\u8350\u6bd4\u4f8b=>\u8336 : \u6c34 : \u51b0 = 1~2 : 50 : 30\uff09 \u79f0\u91cf 3~6 \u514b\u8336\u53f6\u7f6e\u4e8e\u5bb9\u5668\uff0c\u52a0\u5165 150 \u6beb\u5347\u5f00\u6c34\uff0c\u6ce1 6 \u5206\u949f \u5f80\u6ce1\u597d\u7684\u7eff\u8336\u4e2d\u653e\u5165 90 \u514b\u51b0\u5757\u51b7\u5374\uff0c\u53ef\u6405\u62cc\u52a0\u901f\u51b7\u5374 \u5f85\u51b0\u5757\u6d88\u5931\u540e\uff0c\u5c06\u8336\u53f6\u8fc7\u6ee4\u5f97\u5230\u8309\u8389\u7eff\u8336\u8336\u6c34\u7ea6 240 \u6beb\u5347 \u6a59\u5b50\u7684\u5904\u7406\uff08\u53ef\u5728\u6ce1\u8336\u671f\u95f4\u5904\u7406\uff09 \u5c06\u6a59\u5b50\u5bf9\u534a\u5207\uff08 \u5200\u65b9\u5411\u5782\u76f4\u4e8e\u6a59\u5b50\u7684\u5934\u5c3e\u8fde\u7ebf \uff09\uff0c\u5e76\u4ece\u5176\u4e2d\u7684\u4e00\u534a\u4e2d\u5207\u53d6\u4e00\u7247\u6a59\u5b50\u5907\u7528 \u518d\u6b21\u5c06\u6a59\u5b50\u5bf9\u534a\u5207\uff0c\u5c06\u5f97\u5230\u7684 4 \u89d2\u6a59\u5b50\u7528\u538b\u6c41\u5668\u538b\u51fa\u6a59\u6c41\u7f6e\u4e8e\u5bb9\u5668\u4e2d\u5907\u7528 \u6b63\u5f0f\u8c03\u914d \u9009\u62e9\u4e00\u4e2a\u4f60\u6700\u559c\u6b22\u7684\u676f\u5b50\uff0c\u5efa\u8bae\u4f7f\u7528\u5bb9\u91cf\u5728 350~400 \u6beb\u5347\u7684\u900f\u660e\u73bb\u7483\u676f \u5c06 70 \u514b\u51b0\u5757\u653e\u7f6e\u5728\u676f\u5e95\uff0c\u5e76\u5c06\u6240\u6709\u6a59\u6c41\u5012\u5165 \u5c06\u4e4b\u524d\u51c6\u5907\u7684\u4e00\u7247\u6a59\u5b50\u8d34\u676f\u5185\u58c1\u653e\u7f6e \u5c06\u4e00\u6b21\u5206\u91cf\u7684\u814c\u5236\u767e\u9999\u679c\u6d47\u5728\u51b0\u4e0a \u7f13\u6162\u6ce8\u5165\u8309\u8389\u7eff\u8336\u76f4\u81f3\u6ee1\u676f\uff0c\u4fbf\u4e8e\u5206\u5c42 \u5728\u6db2\u9762\u653e\u7f6e\u597d\u88c5\u9970\u7528\u7684\u7eff\u53f6\uff08\u53ef\u9009\uff09 \u6405\u62cc\u5747\u5300\u540e\u4eab\u7528 \u9644\u52a0\u5185\u5bb9 \u5982\u679c\u7f3a\u5c11\u6216\u4e0d\u559c\u6b22\u8309\u8389\u7eff\u8336\uff0c\u53ef\u4ee5\u4f7f\u7528\u82cf\u6253\u6c14\u6ce1\u6c34\u4ee3\u66ff\uff0c\u514d\u53bb\u8309\u8389\u7eff\u8336\u7684\u8c03\u914d\u6d41\u7a0b \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u767e\u9999\u679c\u6a59\u5b50\u7279\u8c03"},{"location":"dishes/drink/%E7%99%BE%E9%A6%99%E6%9E%9C%E6%A9%99%E5%AD%90%E7%89%B9%E8%B0%83/%E7%99%BE%E9%A6%99%E6%9E%9C%E6%A9%99%E5%AD%90%E7%89%B9%E8%B0%83/#_1","text":"\u8309\u8389\u7eff\u8336\u7248\u672c \u82cf\u6253\u6c14\u6ce1\u6c34\u7248\u672c","title":"\u767e\u9999\u679c\u6a59\u5b50\u7279\u8c03\u7684\u505a\u6cd5"},{"location":"dishes/drink/%E7%99%BE%E9%A6%99%E6%9E%9C%E6%A9%99%E5%AD%90%E7%89%B9%E8%B0%83/%E7%99%BE%E9%A6%99%E6%9E%9C%E6%A9%99%E5%AD%90%E7%89%B9%E8%B0%83/#_2","text":"\u539f\u6599: \u767e\u9999\u679c \u6a59\u5b50 \u8309\u8389\u7eff\u8336\u8336\u53f6/\u82cf\u6253\u6c14\u6ce1\u6c34\u4e8c\u9009\u4e00 \u767d\u7802\u7cd6 \u51b0\u5757 \u8702\u871c\uff08\u53ef\u9009\uff09 \u8584\u8377\u53f6\u6216\u5176\u4ed6\u7eff\u53f6\uff08\u53ef\u9009\uff0c\u88c5\u9970\u4f7f\u7528\uff09 \u5de5\u5177 \u624b\u52a8\u538b\u6c41\u5668","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/drink/%E7%99%BE%E9%A6%99%E6%9E%9C%E6%A9%99%E5%AD%90%E7%89%B9%E8%B0%83/%E7%99%BE%E9%A6%99%E6%9E%9C%E6%A9%99%E5%AD%90%E7%89%B9%E8%B0%83/#_3","text":"\u57fa\u4e8e\u8309\u8389\u7eff\u8336\u7248\u672c\u51c6\u5907\uff0c\u4e00\u676f\u5206\u91cf\uff0c\u7ea6 380 \u6beb\u5347 \u6a59\u5b50 1 \u4e2a\uff08\u7ea6 200 \u514b\uff0c\u62f3\u5934\u5927\u5c0f\uff09 \u8309\u8389\u7eff\u8336\u8336\u53f6 3~6 \u514b \u5f00\u6c34 150 \u6beb\u5347 \u51b0\u5757 160 \u514b\u4ee5\u4e0a \u814c\u5236\u767e\u9999\u679c\u90e8\u5206\uff08\u56e0\u4e3a\u91cf\u5c0f\u4e0d\u597d\u914d\u7f6e\uff0c\u8fd9\u91cc\u662f\u4e24\u6b21\u7684\u5206\u91cf\uff09 \u767e\u9999\u679c 3 \u4e2a \u767d\u7802\u7cd6 30 \u514b \u8702\u871c 10 \u514b\uff08\u5982\u679c\u6ca1\u6709\u53ef\u4ee5\u7528 5 \u514b\u767d\u7802\u7cd6\u4ee3\u66ff\uff09","title":"\u8ba1\u7b97"},{"location":"dishes/drink/%E7%99%BE%E9%A6%99%E6%9E%9C%E6%A9%99%E5%AD%90%E7%89%B9%E8%B0%83/%E7%99%BE%E9%A6%99%E6%9E%9C%E6%A9%99%E5%AD%90%E7%89%B9%E8%B0%83/#_4","text":"\u767e\u9999\u679c\u814c\u5236\uff08\u56e0\u4e3a\u91cf\u5c0f\u4e0d\u597d\u914d\u7f6e\uff0c\u8fd9\u91cc\u662f\u4e24\u6b21\u7684\u5206\u91cf\uff09 \u5c06\u4e09\u4e2a\u767e\u9999\u679c\u7684\u679c\u8089\u53d6\u51fa\u6765\uff08\u91cc\u9762\u7684\u6c41\u4e5f\u4e0d\u80fd\u653e\u8fc7\uff09\uff0c\u7f6e\u4e8e\u5bb9\u5668\u4e2d \u79f0\u91cf 30 \u514b\u767d\u7802\u7cd6\u653e\u5165 \u79f0\u91cf 10 \u514b\u8702\u871c\u653e\u5165\uff08\u5982\u679c\u6ca1\u6709\u53ef\u4ee5\u7528 5 \u514b\u767d\u7802\u7cd6\u4ee3\u66ff\uff09 \u6405\u62cc\u5747\u5300 \u5bb9\u5668\u4fdd\u9c9c\u819c\u5c01\u53e3\uff0c\u653e\u5165\u51b0\u7bb1\u4e2d\u8fdb\u884c 12~24 \u5c0f\u65f6\u7684\u814c\u5236 \u8309\u8389\u7eff\u8336\u8c03\u914d\uff08\u63a8\u8350\u6bd4\u4f8b=>\u8336 : \u6c34 : \u51b0 = 1~2 : 50 : 30\uff09 \u79f0\u91cf 3~6 \u514b\u8336\u53f6\u7f6e\u4e8e\u5bb9\u5668\uff0c\u52a0\u5165 150 \u6beb\u5347\u5f00\u6c34\uff0c\u6ce1 6 \u5206\u949f \u5f80\u6ce1\u597d\u7684\u7eff\u8336\u4e2d\u653e\u5165 90 \u514b\u51b0\u5757\u51b7\u5374\uff0c\u53ef\u6405\u62cc\u52a0\u901f\u51b7\u5374 \u5f85\u51b0\u5757\u6d88\u5931\u540e\uff0c\u5c06\u8336\u53f6\u8fc7\u6ee4\u5f97\u5230\u8309\u8389\u7eff\u8336\u8336\u6c34\u7ea6 240 \u6beb\u5347 \u6a59\u5b50\u7684\u5904\u7406\uff08\u53ef\u5728\u6ce1\u8336\u671f\u95f4\u5904\u7406\uff09 \u5c06\u6a59\u5b50\u5bf9\u534a\u5207\uff08 \u5200\u65b9\u5411\u5782\u76f4\u4e8e\u6a59\u5b50\u7684\u5934\u5c3e\u8fde\u7ebf \uff09\uff0c\u5e76\u4ece\u5176\u4e2d\u7684\u4e00\u534a\u4e2d\u5207\u53d6\u4e00\u7247\u6a59\u5b50\u5907\u7528 \u518d\u6b21\u5c06\u6a59\u5b50\u5bf9\u534a\u5207\uff0c\u5c06\u5f97\u5230\u7684 4 \u89d2\u6a59\u5b50\u7528\u538b\u6c41\u5668\u538b\u51fa\u6a59\u6c41\u7f6e\u4e8e\u5bb9\u5668\u4e2d\u5907\u7528 \u6b63\u5f0f\u8c03\u914d \u9009\u62e9\u4e00\u4e2a\u4f60\u6700\u559c\u6b22\u7684\u676f\u5b50\uff0c\u5efa\u8bae\u4f7f\u7528\u5bb9\u91cf\u5728 350~400 \u6beb\u5347\u7684\u900f\u660e\u73bb\u7483\u676f \u5c06 70 \u514b\u51b0\u5757\u653e\u7f6e\u5728\u676f\u5e95\uff0c\u5e76\u5c06\u6240\u6709\u6a59\u6c41\u5012\u5165 \u5c06\u4e4b\u524d\u51c6\u5907\u7684\u4e00\u7247\u6a59\u5b50\u8d34\u676f\u5185\u58c1\u653e\u7f6e \u5c06\u4e00\u6b21\u5206\u91cf\u7684\u814c\u5236\u767e\u9999\u679c\u6d47\u5728\u51b0\u4e0a \u7f13\u6162\u6ce8\u5165\u8309\u8389\u7eff\u8336\u76f4\u81f3\u6ee1\u676f\uff0c\u4fbf\u4e8e\u5206\u5c42 \u5728\u6db2\u9762\u653e\u7f6e\u597d\u88c5\u9970\u7528\u7684\u7eff\u53f6\uff08\u53ef\u9009\uff09 \u6405\u62cc\u5747\u5300\u540e\u4eab\u7528","title":"\u64cd\u4f5c"},{"location":"dishes/drink/%E7%99%BE%E9%A6%99%E6%9E%9C%E6%A9%99%E5%AD%90%E7%89%B9%E8%B0%83/%E7%99%BE%E9%A6%99%E6%9E%9C%E6%A9%99%E5%AD%90%E7%89%B9%E8%B0%83/#_5","text":"\u5982\u679c\u7f3a\u5c11\u6216\u4e0d\u559c\u6b22\u8309\u8389\u7eff\u8336\uff0c\u53ef\u4ee5\u4f7f\u7528\u82cf\u6253\u6c14\u6ce1\u6c34\u4ee3\u66ff\uff0c\u514d\u53bb\u8309\u8389\u7eff\u8336\u7684\u8c03\u914d\u6d41\u7a0b \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/drink/%E8%80%99%E8%80%99%E6%9F%91%E8%8C%B6/%E8%80%99%E8%80%99%E6%9F%91%E8%8C%B6/","text":"\u8019\u8019\u67d1\u8336\u7684\u505a\u6cd5 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u539f\u6599: \u8019\u8019\u67d1\uff08\u66ff\u6362\u7269\u8bf7\u770b\u9644\u52a0\u5185\u5bb9\uff09 \u8309\u8389\u7eff\u8336 \u51b0\u5757 \u8517\u7cd6\u7cd6\u6d46 \uff08\u53ef\u9009\uff09 \u5de5\u5177 \u6405\u62cc\u673a \u8ba1\u7b97 \u4e00\u676f\u5206\u91cf\uff0c\u7ea6 300 \u6beb\u5347 \u8019\u8019\u67d1 1~2 \u4e2a\uff08200 \u514b\u4ee5\u4e0a\uff09 \u8309\u8389\u7eff\u8336 2~4 \u514b \u51b0\u5757 60 \u514b 1 : 1 \u8517\u7cd6\u7cd6\u6d46 10 \u514b\uff08\u53ef\u9009\uff09 \u64cd\u4f5c \u8309\u8389\u7eff\u8336\u8c03\u914d\uff08\u63a8\u8350\u6bd4\u4f8b=>\u8336 : \u6c34 : \u51b0 = 1~2 : 50 : 30\uff09 \u79f0\u91cf 2~4 \u514b\u8336\u53f6\u7f6e\u4e8e\u5bb9\u5668\uff0c\u52a0\u5165 100 \u6beb\u5347\u5f00\u6c34\uff0c\u6ce1 6 \u5206\u949f \u5f80\u6ce1\u597d\u7684\u7eff\u8336\u4e2d\u653e\u5165 60 \u514b\u51b0\u5757\u51b7\u5374\uff0c\u53ef\u6405\u62cc\u52a0\u901f\u51b7\u5374 \u5f85\u51b0\u5757\u6d88\u5931\u540e\uff0c\u5c06\u8336\u53f6\u8fc7\u6ee4\u5f97\u5230\u8309\u8389\u7eff\u8336\u8336\u6c34\u7ea6 160 \u6beb\u5347 \u6b63\u5f0f\u8c03\u914d \u9009\u62e9\u4e00\u4e2a\u4f60\u6700\u559c\u6b22\u7684\u676f\u5b50\uff0c\u5efa\u8bae\u4f7f\u7528\u5bb9\u91cf\u5728 300 \u6beb\u5347\u5de6\u53f3\u7684\u900f\u660e\u73bb\u7483\u676f \u53d6\u51fa\u8019\u8019\u67d1\u7684\u8089\u74e3\uff0c\u5e76\u5c06\u5916\u76ae\u5265\u53bb\uff0c\u53d6\u5f97\u679c\u8089 \u53d6 130 \u514b\u679c\u8089\u548c 130 \u6beb\u5347\u8309\u8389\u7eff\u8336\u653e\u5165\u6405\u62cc\u673a\u4e2d \u5012\u5165 10 \u514b\u8517\u7cd6\u7cd6\u6d46\uff08\u53ef\u9009\uff0c\u5982\u679c\u559c\u751c\u53ef\u653e\uff09 \u5c01\u76d6\u542f\u52a8\u6405\u62cc\u673a\uff0c\u6405\u62cc 20 \u79d2\u540e\u5c06\u6405\u62cc\u4ea7\u7269\u5012\u5165\u676f\u4e2d \u53d6\u4e00\u70b9\u679c\u8089\u6495\u788e\u6492\u5728\u6db2\u9762\u4e0a \u5f00\u59cb\u4eab\u53d7 \u9644\u52a0\u5185\u5bb9 \u8019\u8019\u67d1\u53ef\u4ee5\u7528\u5176\u4ed6\u5bb9\u6613\u5206\u79bb\u679c\u8089\u7684\u67d1\u6a58\u66ff\u4ee3\uff0c\u6bd4\u5982\u4e11\u6a58 \u679c\u8089\u548c\u8336\u6c34\u6bd4\u4f8b\u4e3a 1 : 1\uff0c\u5982\u679c\u9700\u8981\u914d\u7f6e\u66f4\u5927\u7684\u5206\u91cf\uff0c\u53ef\u6309\u6bd4\u4f8b\u63d0\u5347\u7528\u91cf \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u8019\u8019\u67d1\u8336"},{"location":"dishes/drink/%E8%80%99%E8%80%99%E6%9F%91%E8%8C%B6/%E8%80%99%E8%80%99%E6%9F%91%E8%8C%B6/#_1","text":"","title":"\u8019\u8019\u67d1\u8336\u7684\u505a\u6cd5"},{"location":"dishes/drink/%E8%80%99%E8%80%99%E6%9F%91%E8%8C%B6/%E8%80%99%E8%80%99%E6%9F%91%E8%8C%B6/#_2","text":"\u539f\u6599: \u8019\u8019\u67d1\uff08\u66ff\u6362\u7269\u8bf7\u770b\u9644\u52a0\u5185\u5bb9\uff09 \u8309\u8389\u7eff\u8336 \u51b0\u5757 \u8517\u7cd6\u7cd6\u6d46 \uff08\u53ef\u9009\uff09 \u5de5\u5177 \u6405\u62cc\u673a","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/drink/%E8%80%99%E8%80%99%E6%9F%91%E8%8C%B6/%E8%80%99%E8%80%99%E6%9F%91%E8%8C%B6/#_3","text":"\u4e00\u676f\u5206\u91cf\uff0c\u7ea6 300 \u6beb\u5347 \u8019\u8019\u67d1 1~2 \u4e2a\uff08200 \u514b\u4ee5\u4e0a\uff09 \u8309\u8389\u7eff\u8336 2~4 \u514b \u51b0\u5757 60 \u514b 1 : 1 \u8517\u7cd6\u7cd6\u6d46 10 \u514b\uff08\u53ef\u9009\uff09","title":"\u8ba1\u7b97"},{"location":"dishes/drink/%E8%80%99%E8%80%99%E6%9F%91%E8%8C%B6/%E8%80%99%E8%80%99%E6%9F%91%E8%8C%B6/#_4","text":"\u8309\u8389\u7eff\u8336\u8c03\u914d\uff08\u63a8\u8350\u6bd4\u4f8b=>\u8336 : \u6c34 : \u51b0 = 1~2 : 50 : 30\uff09 \u79f0\u91cf 2~4 \u514b\u8336\u53f6\u7f6e\u4e8e\u5bb9\u5668\uff0c\u52a0\u5165 100 \u6beb\u5347\u5f00\u6c34\uff0c\u6ce1 6 \u5206\u949f \u5f80\u6ce1\u597d\u7684\u7eff\u8336\u4e2d\u653e\u5165 60 \u514b\u51b0\u5757\u51b7\u5374\uff0c\u53ef\u6405\u62cc\u52a0\u901f\u51b7\u5374 \u5f85\u51b0\u5757\u6d88\u5931\u540e\uff0c\u5c06\u8336\u53f6\u8fc7\u6ee4\u5f97\u5230\u8309\u8389\u7eff\u8336\u8336\u6c34\u7ea6 160 \u6beb\u5347 \u6b63\u5f0f\u8c03\u914d \u9009\u62e9\u4e00\u4e2a\u4f60\u6700\u559c\u6b22\u7684\u676f\u5b50\uff0c\u5efa\u8bae\u4f7f\u7528\u5bb9\u91cf\u5728 300 \u6beb\u5347\u5de6\u53f3\u7684\u900f\u660e\u73bb\u7483\u676f \u53d6\u51fa\u8019\u8019\u67d1\u7684\u8089\u74e3\uff0c\u5e76\u5c06\u5916\u76ae\u5265\u53bb\uff0c\u53d6\u5f97\u679c\u8089 \u53d6 130 \u514b\u679c\u8089\u548c 130 \u6beb\u5347\u8309\u8389\u7eff\u8336\u653e\u5165\u6405\u62cc\u673a\u4e2d \u5012\u5165 10 \u514b\u8517\u7cd6\u7cd6\u6d46\uff08\u53ef\u9009\uff0c\u5982\u679c\u559c\u751c\u53ef\u653e\uff09 \u5c01\u76d6\u542f\u52a8\u6405\u62cc\u673a\uff0c\u6405\u62cc 20 \u79d2\u540e\u5c06\u6405\u62cc\u4ea7\u7269\u5012\u5165\u676f\u4e2d \u53d6\u4e00\u70b9\u679c\u8089\u6495\u788e\u6492\u5728\u6db2\u9762\u4e0a \u5f00\u59cb\u4eab\u53d7","title":"\u64cd\u4f5c"},{"location":"dishes/drink/%E8%80%99%E8%80%99%E6%9F%91%E8%8C%B6/%E8%80%99%E8%80%99%E6%9F%91%E8%8C%B6/#_5","text":"\u8019\u8019\u67d1\u53ef\u4ee5\u7528\u5176\u4ed6\u5bb9\u6613\u5206\u79bb\u679c\u8089\u7684\u67d1\u6a58\u66ff\u4ee3\uff0c\u6bd4\u5982\u4e11\u6a58 \u679c\u8089\u548c\u8336\u6c34\u6bd4\u4f8b\u4e3a 1 : 1\uff0c\u5982\u679c\u9700\u8981\u914d\u7f6e\u66f4\u5927\u7684\u5206\u91cf\uff0c\u53ef\u6309\u6bd4\u4f8b\u63d0\u5347\u7528\u91cf \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/drink/%E9%85%B8%E6%A2%85%E6%B1%A4/%E9%85%B8%E6%A2%85%E6%B1%A4/","text":"\u9178\u6885\u6c64\u7684\u505a\u6cd5 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u6c34 \u4e4c\u67a3 \u4e4c\u6885 \u5c71\u6942 \u9ec4\u51b0\u7cd6 \u5c71\u6942 \u7518\u8349 \u9648\u76ae \u5e72\u6842\u82b1 \u8ba1\u7b97 \u4e24\u5347\u6c34 \u4e4c\u67a3 25 \u514b \u4e4c\u6885 25g \u5c71\u6942 30 \u514b \u9ec4\u51b0\u7cd6 100 \u514b \u5c71\u6942 30 \u514b \u7518\u8349 3 \u514b \u9648\u76ae 4 \u514b \u5e72\u6842\u82b1 3 \u514b \u4e0a\u8ff0\u6240\u6709\u7528\u91cf\u53ef\u4ee5\u7b49\u6bd4\u4f8b\u589e\u52a0\u6216\u51cf\u5c0f\u3002 \u64cd\u4f5c 1.5 \u5347\u6c34\u5e38\u6e29\u6d78\u6ce1\u4e24\u5c0f\u65f6\u4ee5\u4e0a\uff08\u5e72\u6842\u82b1\u548c\u51b0\u7cd6\u9664\u5916\uff09 \u5f00\u4e2d\u5927\u706b\u716e\u6cb8\uff0c\u76d6\u76d6\uff0c\u8f6c\u5c0f\u706b\u716e 40 \u5206\u949f\uff0c\u4e3a\u5934\u714e \u5c06\u51b0\u7cd6\u653e\u5165\u76c6\u5185\uff0c\u518d\u5c06\u6ca5\u597d\u7528\u6750\u7684\u5934\u6c64\u8d81\u70ed\u5012\u5165\uff0c\u6405\u62cc\u81f3\u51b0\u7cd6\u878d\u5316\u3002 \u836f\u6750\u91cd\u65b0\u88c5\u56de\u9505\u5185\u518d 600 \u6beb\u5347\u5de6\u53f3\u7684\u6c34\uff0c\u5f00\u5927\u706b\u716e\u6cb8\uff0c\u76d6\u76d6\uff0c\u8f6c\u4e2d\u706b\uff0c\u518d\u716e 20 \u5206\u949f\u4e3a\u4e8c\u714e \u6700\u540e\u5c06\u4e8c\u714e\u548c\u51b0\u7cd6\u6c34\u8d81\u70ed\u6df7\u5408\u4e3a\u6210\u54c1\u3002\u5728\u6210\u54c1 60-70\u2103\u52a0\u5165\u5e72\u6842\u82b1\uff08\u4e0d\u8981\u8d85\u8fc7 80\u2103\uff09\u52a0\u76d6\u667e\u51c9\u518d\u653e\u5165\u51b0\u7bb1\u51b7\u85cf 3 \u5c0f\u65f6\u4ee5\u4e0a\u3002 \u996e\u7528\u65f6\u8bb0\u5f97\u5c06\u5e72\u6842\u82b1\u6ca5\u51fa\u3002\u5982\u996e\u8336\u822c\u7ec6\u555c\uff0c\u51b0\u51c9\u632f\u9f7f\uff0c\u9178\u9192\u4eba\u3001\u751c\u9002\u5ea6\uff0c\u6ecb\u5473\u4e30\u6ee1\u800c\u60a0\u957f \u9644\u52a0\u5185\u5bb9 \u653e\u5165\u51b0\u7bb1\u51b7\u85cf\u540e\u518d\u996e\u7528\u6548\u679c\u66f4\u4f73\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9178\u6885\u6c64"},{"location":"dishes/drink/%E9%85%B8%E6%A2%85%E6%B1%A4/%E9%85%B8%E6%A2%85%E6%B1%A4/#_1","text":"","title":"\u9178\u6885\u6c64\u7684\u505a\u6cd5"},{"location":"dishes/drink/%E9%85%B8%E6%A2%85%E6%B1%A4/%E9%85%B8%E6%A2%85%E6%B1%A4/#_2","text":"\u6c34 \u4e4c\u67a3 \u4e4c\u6885 \u5c71\u6942 \u9ec4\u51b0\u7cd6 \u5c71\u6942 \u7518\u8349 \u9648\u76ae \u5e72\u6842\u82b1","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/drink/%E9%85%B8%E6%A2%85%E6%B1%A4/%E9%85%B8%E6%A2%85%E6%B1%A4/#_3","text":"\u4e24\u5347\u6c34 \u4e4c\u67a3 25 \u514b \u4e4c\u6885 25g \u5c71\u6942 30 \u514b \u9ec4\u51b0\u7cd6 100 \u514b \u5c71\u6942 30 \u514b \u7518\u8349 3 \u514b \u9648\u76ae 4 \u514b \u5e72\u6842\u82b1 3 \u514b \u4e0a\u8ff0\u6240\u6709\u7528\u91cf\u53ef\u4ee5\u7b49\u6bd4\u4f8b\u589e\u52a0\u6216\u51cf\u5c0f\u3002","title":"\u8ba1\u7b97"},{"location":"dishes/drink/%E9%85%B8%E6%A2%85%E6%B1%A4/%E9%85%B8%E6%A2%85%E6%B1%A4/#_4","text":"1.5 \u5347\u6c34\u5e38\u6e29\u6d78\u6ce1\u4e24\u5c0f\u65f6\u4ee5\u4e0a\uff08\u5e72\u6842\u82b1\u548c\u51b0\u7cd6\u9664\u5916\uff09 \u5f00\u4e2d\u5927\u706b\u716e\u6cb8\uff0c\u76d6\u76d6\uff0c\u8f6c\u5c0f\u706b\u716e 40 \u5206\u949f\uff0c\u4e3a\u5934\u714e \u5c06\u51b0\u7cd6\u653e\u5165\u76c6\u5185\uff0c\u518d\u5c06\u6ca5\u597d\u7528\u6750\u7684\u5934\u6c64\u8d81\u70ed\u5012\u5165\uff0c\u6405\u62cc\u81f3\u51b0\u7cd6\u878d\u5316\u3002 \u836f\u6750\u91cd\u65b0\u88c5\u56de\u9505\u5185\u518d 600 \u6beb\u5347\u5de6\u53f3\u7684\u6c34\uff0c\u5f00\u5927\u706b\u716e\u6cb8\uff0c\u76d6\u76d6\uff0c\u8f6c\u4e2d\u706b\uff0c\u518d\u716e 20 \u5206\u949f\u4e3a\u4e8c\u714e \u6700\u540e\u5c06\u4e8c\u714e\u548c\u51b0\u7cd6\u6c34\u8d81\u70ed\u6df7\u5408\u4e3a\u6210\u54c1\u3002\u5728\u6210\u54c1 60-70\u2103\u52a0\u5165\u5e72\u6842\u82b1\uff08\u4e0d\u8981\u8d85\u8fc7 80\u2103\uff09\u52a0\u76d6\u667e\u51c9\u518d\u653e\u5165\u51b0\u7bb1\u51b7\u85cf 3 \u5c0f\u65f6\u4ee5\u4e0a\u3002 \u996e\u7528\u65f6\u8bb0\u5f97\u5c06\u5e72\u6842\u82b1\u6ca5\u51fa\u3002\u5982\u996e\u8336\u822c\u7ec6\u555c\uff0c\u51b0\u51c9\u632f\u9f7f\uff0c\u9178\u9192\u4eba\u3001\u751c\u9002\u5ea6\uff0c\u6ecb\u5473\u4e30\u6ee1\u800c\u60a0\u957f","title":"\u64cd\u4f5c"},{"location":"dishes/drink/%E9%85%B8%E6%A2%85%E6%B1%A4/%E9%85%B8%E6%A2%85%E6%B1%A4/#_5","text":"\u653e\u5165\u51b0\u7bb1\u51b7\u85cf\u540e\u518d\u996e\u7528\u6548\u679c\u66f4\u4f73\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/drink/%E9%87%91%E6%B1%A4%E5%8A%9B/%E9%87%91%E6%B1%A4%E5%8A%9B/","text":"\u91d1\u6c64\u529b\u7684\u505a\u6cd5 \u996e\u9152\u6709\u5bb3\u5065\u5eb7\uff0c\u672a\u6210\u5e74\u4eba\u7981\u6b62\u996e\u9152 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u539f\u6599 \u91d1\u9152 \u6c64\u529b\u6c34\u6c14\u6ce1\u6c34 \u67e0\u6aac \u51b0\u5757 \u65b0\u9c9c\u7eff\u53f6\uff08\u53ef\u9009\uff0c\u88c5\u9970\u7528\uff09 \u5de5\u5177 \u624b\u52a8\u538b\u6c41\u5668 \u8ba1\u7b97 \u4e00\u676f\u5206\u91cf\uff0c\u7ea6 350 \u6beb\u5347\uff08\u542b\u51b0\uff09 \u91d1\u9152 30~40 \u6beb\u5347 \u6c64\u529b\u6c34\u6c14\u6ce1\u6c34 1 \u7f50 \u67e0\u6aac 1 \u4e2a \u51b0\u5757 100 \u514b \u64cd\u4f5c \u67e0\u6aac\u7684\u5904\u7406 \u5c06\u67e0\u6aac\u5bf9\u534a\u5207\uff08 \u5200\u65b9\u5411\u5782\u76f4\u4e8e\u67e0\u6aac\u7684\u5934\u5c3e\u8fde\u7ebf \uff09\uff0c\u5e76\u4ece\u5176\u4e2d\u7684\u4e00\u534a\u4e2d\u5207\u53d6\u4e00\u7247\u67e0\u6aac\u5907\u7528 \u518d\u6b21\u5c06\u67e0\u6aac\u5bf9\u534a\u5207\uff0c\u5c06\u5f97\u5230\u7684 4 \u89d2\u67e0\u6aac\u7528\u538b\u6c41\u5668\u538b\u51fa\u67e0\u6aac\u6c41\u7f6e\u4e8e\u5bb9\u5668\u4e2d\u5907\u7528 \u6b63\u5f0f\u8c03\u914d \u9009\u62e9\u4e00\u4e2a\u4f60\u6700\u559c\u6b22\u7684\u676f\u5b50\uff0c\u5efa\u8bae\u4f7f\u7528\u5bb9\u91cf\u5728 350~400 \u6beb\u5347\u7684\u900f\u660e\u73bb\u7483\u676f \u5c06 100 \u514b\u51b0\u5757\u653e\u7f6e\u5728\u676f\u5e95 \u5012\u5165 30~40 \u6beb\u5347\u91d1\u9152 \u5012\u5165 15 \u6beb\u5347\u67e0\u6aac\u6c41\uff08\u5982\u679c\u559c\u9178\u53ef\u4ee5\u52a0\u591a\u70b9\u6216\u5168\u52a0\uff09 \u7528\u52fa\u5b50\u6405\u62cc\u5747\u5300 \u5c06\u4e4b\u524d\u51c6\u5907\u7684\u4e00\u7247\u67e0\u6aac\u653e\u7f6e\u597d \u7f13\u6162\u6cbf\u676f\u58c1\u6ce8\u5165\u6c64\u529b\u6c34\u76f4\u81f3\u6ee1\u676f\uff08\u4e0d\u8981\u5012\u5728\u51b0\u4e0a\uff0c\u907f\u514d\u8d77\u6ce1\u6d41\u5931\uff09 \u7528\u52fa\u5b50\u8f7b\u8f7b\u4e0a\u4e0b\u63d0\u62c9\u5c06\u6db2\u4f53\u6405\u62cc\u5747\u5300\uff08\u4e0d\u8981\u65cb\u8f6c\u6405\u62cc\uff0c\u907f\u514d\u8d77\u6ce1\u6d41\u5931\uff09 \u5728\u6db2\u9762\u653e\u7f6e\u597d\u88c5\u9970\u7528\u7684\u7eff\u53f6\uff08\u53ef\u9009\uff09 \u9644\u52a0\u5185\u5bb9 \u6210\u54c1 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u91d1\u6c64\u529b"},{"location":"dishes/drink/%E9%87%91%E6%B1%A4%E5%8A%9B/%E9%87%91%E6%B1%A4%E5%8A%9B/#_1","text":"\u996e\u9152\u6709\u5bb3\u5065\u5eb7\uff0c\u672a\u6210\u5e74\u4eba\u7981\u6b62\u996e\u9152","title":"\u91d1\u6c64\u529b\u7684\u505a\u6cd5"},{"location":"dishes/drink/%E9%87%91%E6%B1%A4%E5%8A%9B/%E9%87%91%E6%B1%A4%E5%8A%9B/#_2","text":"\u539f\u6599 \u91d1\u9152 \u6c64\u529b\u6c34\u6c14\u6ce1\u6c34 \u67e0\u6aac \u51b0\u5757 \u65b0\u9c9c\u7eff\u53f6\uff08\u53ef\u9009\uff0c\u88c5\u9970\u7528\uff09 \u5de5\u5177 \u624b\u52a8\u538b\u6c41\u5668","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/drink/%E9%87%91%E6%B1%A4%E5%8A%9B/%E9%87%91%E6%B1%A4%E5%8A%9B/#_3","text":"\u4e00\u676f\u5206\u91cf\uff0c\u7ea6 350 \u6beb\u5347\uff08\u542b\u51b0\uff09 \u91d1\u9152 30~40 \u6beb\u5347 \u6c64\u529b\u6c34\u6c14\u6ce1\u6c34 1 \u7f50 \u67e0\u6aac 1 \u4e2a \u51b0\u5757 100 \u514b","title":"\u8ba1\u7b97"},{"location":"dishes/drink/%E9%87%91%E6%B1%A4%E5%8A%9B/%E9%87%91%E6%B1%A4%E5%8A%9B/#_4","text":"\u67e0\u6aac\u7684\u5904\u7406 \u5c06\u67e0\u6aac\u5bf9\u534a\u5207\uff08 \u5200\u65b9\u5411\u5782\u76f4\u4e8e\u67e0\u6aac\u7684\u5934\u5c3e\u8fde\u7ebf \uff09\uff0c\u5e76\u4ece\u5176\u4e2d\u7684\u4e00\u534a\u4e2d\u5207\u53d6\u4e00\u7247\u67e0\u6aac\u5907\u7528 \u518d\u6b21\u5c06\u67e0\u6aac\u5bf9\u534a\u5207\uff0c\u5c06\u5f97\u5230\u7684 4 \u89d2\u67e0\u6aac\u7528\u538b\u6c41\u5668\u538b\u51fa\u67e0\u6aac\u6c41\u7f6e\u4e8e\u5bb9\u5668\u4e2d\u5907\u7528 \u6b63\u5f0f\u8c03\u914d \u9009\u62e9\u4e00\u4e2a\u4f60\u6700\u559c\u6b22\u7684\u676f\u5b50\uff0c\u5efa\u8bae\u4f7f\u7528\u5bb9\u91cf\u5728 350~400 \u6beb\u5347\u7684\u900f\u660e\u73bb\u7483\u676f \u5c06 100 \u514b\u51b0\u5757\u653e\u7f6e\u5728\u676f\u5e95 \u5012\u5165 30~40 \u6beb\u5347\u91d1\u9152 \u5012\u5165 15 \u6beb\u5347\u67e0\u6aac\u6c41\uff08\u5982\u679c\u559c\u9178\u53ef\u4ee5\u52a0\u591a\u70b9\u6216\u5168\u52a0\uff09 \u7528\u52fa\u5b50\u6405\u62cc\u5747\u5300 \u5c06\u4e4b\u524d\u51c6\u5907\u7684\u4e00\u7247\u67e0\u6aac\u653e\u7f6e\u597d \u7f13\u6162\u6cbf\u676f\u58c1\u6ce8\u5165\u6c64\u529b\u6c34\u76f4\u81f3\u6ee1\u676f\uff08\u4e0d\u8981\u5012\u5728\u51b0\u4e0a\uff0c\u907f\u514d\u8d77\u6ce1\u6d41\u5931\uff09 \u7528\u52fa\u5b50\u8f7b\u8f7b\u4e0a\u4e0b\u63d0\u62c9\u5c06\u6db2\u4f53\u6405\u62cc\u5747\u5300\uff08\u4e0d\u8981\u65cb\u8f6c\u6405\u62cc\uff0c\u907f\u514d\u8d77\u6ce1\u6d41\u5931\uff09 \u5728\u6db2\u9762\u653e\u7f6e\u597d\u88c5\u9970\u7528\u7684\u7eff\u53f6\uff08\u53ef\u9009\uff09","title":"\u64cd\u4f5c"},{"location":"dishes/drink/%E9%87%91%E6%B1%A4%E5%8A%9B/%E9%87%91%E6%B1%A4%E5%8A%9B/#_5","text":"","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/drink/%E9%87%91%E6%B1%A4%E5%8A%9B/%E9%87%91%E6%B1%A4%E5%8A%9B/#_6","text":"\u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u6210\u54c1"},{"location":"dishes/drink/%E9%87%91%E8%8F%B2%E5%A3%AB/%E9%87%91%E8%8F%B2%E5%A3%AB/","text":"\u91d1\u83f2\u58eb\u7684\u505a\u6cd5 \u996e\u9152\u6709\u5bb3\u5065\u5eb7\uff0c\u672a\u6210\u5e74\u4eba\u7981\u6b62\u996e\u9152 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u539f\u6599 \u91d1\u9152 \u82cf\u6253\u6c14\u6ce1\u6c34 \u67e0\u6aac \u8517\u7cd6\u7cd6\u6d46 \u51b0\u5757 \u65b0\u9c9c\u7eff\u53f6\uff08\u53ef\u9009\uff0c\u88c5\u9970\u7528\uff09 \u5de5\u5177 \u624b\u52a8\u538b\u6c41\u5668 \u96ea\u514b\u74f6\uff08\u53ef\u9009\uff09 \u8ba1\u7b97 \u4e00\u676f\u5206\u91cf\uff0c\u7ea6 350 \u6beb\u5347\uff08\u542b\u51b0\uff09 \u91d1\u9152 30~40 \u6beb\u5347 \u82cf\u6253\u6c14\u6ce1\u6c34 1 \u7f50 \u67e0\u6aac 1 \u4e2a 1 : 1 \u8517\u7cd6\u7cd6\u6d46 30~40 \u514b \u51b0\u5757 100 \u514b \u64cd\u4f5c \u67e0\u6aac\u7684\u5904\u7406 \u5c06\u67e0\u6aac\u5bf9\u534a\u5207\uff08 \u5200\u65b9\u5411\u5782\u76f4\u4e8e\u67e0\u6aac\u7684\u5934\u5c3e\u8fde\u7ebf \uff09\uff0c\u5e76\u4ece\u5176\u4e2d\u7684\u4e00\u534a\u4e2d\u5207\u53d6\u4e00\u7247\u67e0\u6aac\u5907\u7528 \u518d\u6b21\u5c06\u67e0\u6aac\u5bf9\u534a\u5207\uff0c\u5c06\u5f97\u5230\u7684 4 \u89d2\u67e0\u6aac\u7528\u538b\u6c41\u5668\u538b\u51fa\u67e0\u6aac\u6c41\u7f6e\u4e8e\u5bb9\u5668\u4e2d\u5907\u7528 \u6b63\u5f0f\u8c03\u914d\uff08\u65e0\u96ea\u514b\u74f6\uff09 \u9009\u62e9\u4e00\u4e2a\u4f60\u6700\u559c\u6b22\u7684\u676f\u5b50\uff0c\u5efa\u8bae\u4f7f\u7528\u5bb9\u91cf\u5728 350~400 \u6beb\u5347\u7684\u900f\u660e\u73bb\u7483\u676f \u5c06 100 \u514b\u51b0\u5757\u653e\u7f6e\u5728\u676f\u5e95 \u5012\u5165 30~40 \u6beb\u5347\u91d1\u9152 \u5012\u5165 20 \u6beb\u5347\u67e0\u6aac\u6c41\uff08\u5982\u679c\u559c\u9178\u53ef\u4ee5\u52a0\u591a\u70b9\u6216\u5168\u52a0\uff09 \u5012\u5165 30~40 \u514b\u8517\u7cd6\u7cd6\u6d46 \u7528\u52fa\u5b50\u6405\u62cc\u5747\u5300 \u5c06\u4e4b\u524d\u51c6\u5907\u7684\u4e00\u7247\u67e0\u6aac\u653e\u7f6e\u597d \u7f13\u6162\u6cbf\u676f\u58c1\u6ce8\u5165\u82cf\u6253\u6c14\u6ce1\u6c34\u76f4\u81f3\u6ee1\u676f\uff08\u4e0d\u8981\u5012\u5728\u51b0\u4e0a\uff0c\u907f\u514d\u8d77\u6ce1\u6d41\u5931\uff09 \u7528\u52fa\u5b50\u8f7b\u8f7b\u4e0a\u4e0b\u63d0\u62c9\u5c06\u6db2\u4f53\u6405\u62cc\u5747\u5300\uff08\u4e0d\u8981\u65cb\u8f6c\u6405\u62cc\uff0c\u907f\u514d\u8d77\u6ce1\u6d41\u5931\uff09 \u5728\u6db2\u9762\u653e\u7f6e\u597d\u88c5\u9970\u7528\u7684\u7eff\u53f6\uff08\u53ef\u9009\uff09 \u5982\u679c\u4f60\u6709\u96ea\u514b\u74f6\uff0c\u53ef\u4ee5\u5c06\u4ee5\u4e0a\u6b65\u9aa4 2~6 \u66ff\u6362\u4e3a\u4ee5\u4e0b\u6b65\u9aa4 \u5c06\u51b0\u5757\u3001\u91d1\u9152\u3001\u67e0\u6aac\u6c41\u3001\u8517\u7cd6\u7cd6\u6d46\u5012\u5165\u96ea\u514b\u74f6\uff0c\u96ea\u514b\u5747\u5300 \u5c06\u5145\u5206\u96ea\u514b\u7684\u4ea7\u7269\u5012\u5230\u676f\u5b50\u4e2d\uff08\u5982\u679c\u91cc\u9762\u7684\u51b0\u592a\u788e\u4e86\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u8fc7\u6ee4\u5176\u4e2d\u7684\u51b0\uff0c\u91cd\u65b0\u5f80\u676f\u4e2d\u8865\u5145\u51b0\u5757\uff09 \u9644\u52a0\u5185\u5bb9 \u6210\u54c1 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u91d1\u83f2\u58eb"},{"location":"dishes/drink/%E9%87%91%E8%8F%B2%E5%A3%AB/%E9%87%91%E8%8F%B2%E5%A3%AB/#_1","text":"\u996e\u9152\u6709\u5bb3\u5065\u5eb7\uff0c\u672a\u6210\u5e74\u4eba\u7981\u6b62\u996e\u9152","title":"\u91d1\u83f2\u58eb\u7684\u505a\u6cd5"},{"location":"dishes/drink/%E9%87%91%E8%8F%B2%E5%A3%AB/%E9%87%91%E8%8F%B2%E5%A3%AB/#_2","text":"\u539f\u6599 \u91d1\u9152 \u82cf\u6253\u6c14\u6ce1\u6c34 \u67e0\u6aac \u8517\u7cd6\u7cd6\u6d46 \u51b0\u5757 \u65b0\u9c9c\u7eff\u53f6\uff08\u53ef\u9009\uff0c\u88c5\u9970\u7528\uff09 \u5de5\u5177 \u624b\u52a8\u538b\u6c41\u5668 \u96ea\u514b\u74f6\uff08\u53ef\u9009\uff09","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/drink/%E9%87%91%E8%8F%B2%E5%A3%AB/%E9%87%91%E8%8F%B2%E5%A3%AB/#_3","text":"\u4e00\u676f\u5206\u91cf\uff0c\u7ea6 350 \u6beb\u5347\uff08\u542b\u51b0\uff09 \u91d1\u9152 30~40 \u6beb\u5347 \u82cf\u6253\u6c14\u6ce1\u6c34 1 \u7f50 \u67e0\u6aac 1 \u4e2a 1 : 1 \u8517\u7cd6\u7cd6\u6d46 30~40 \u514b \u51b0\u5757 100 \u514b","title":"\u8ba1\u7b97"},{"location":"dishes/drink/%E9%87%91%E8%8F%B2%E5%A3%AB/%E9%87%91%E8%8F%B2%E5%A3%AB/#_4","text":"\u67e0\u6aac\u7684\u5904\u7406 \u5c06\u67e0\u6aac\u5bf9\u534a\u5207\uff08 \u5200\u65b9\u5411\u5782\u76f4\u4e8e\u67e0\u6aac\u7684\u5934\u5c3e\u8fde\u7ebf \uff09\uff0c\u5e76\u4ece\u5176\u4e2d\u7684\u4e00\u534a\u4e2d\u5207\u53d6\u4e00\u7247\u67e0\u6aac\u5907\u7528 \u518d\u6b21\u5c06\u67e0\u6aac\u5bf9\u534a\u5207\uff0c\u5c06\u5f97\u5230\u7684 4 \u89d2\u67e0\u6aac\u7528\u538b\u6c41\u5668\u538b\u51fa\u67e0\u6aac\u6c41\u7f6e\u4e8e\u5bb9\u5668\u4e2d\u5907\u7528 \u6b63\u5f0f\u8c03\u914d\uff08\u65e0\u96ea\u514b\u74f6\uff09 \u9009\u62e9\u4e00\u4e2a\u4f60\u6700\u559c\u6b22\u7684\u676f\u5b50\uff0c\u5efa\u8bae\u4f7f\u7528\u5bb9\u91cf\u5728 350~400 \u6beb\u5347\u7684\u900f\u660e\u73bb\u7483\u676f \u5c06 100 \u514b\u51b0\u5757\u653e\u7f6e\u5728\u676f\u5e95 \u5012\u5165 30~40 \u6beb\u5347\u91d1\u9152 \u5012\u5165 20 \u6beb\u5347\u67e0\u6aac\u6c41\uff08\u5982\u679c\u559c\u9178\u53ef\u4ee5\u52a0\u591a\u70b9\u6216\u5168\u52a0\uff09 \u5012\u5165 30~40 \u514b\u8517\u7cd6\u7cd6\u6d46 \u7528\u52fa\u5b50\u6405\u62cc\u5747\u5300 \u5c06\u4e4b\u524d\u51c6\u5907\u7684\u4e00\u7247\u67e0\u6aac\u653e\u7f6e\u597d \u7f13\u6162\u6cbf\u676f\u58c1\u6ce8\u5165\u82cf\u6253\u6c14\u6ce1\u6c34\u76f4\u81f3\u6ee1\u676f\uff08\u4e0d\u8981\u5012\u5728\u51b0\u4e0a\uff0c\u907f\u514d\u8d77\u6ce1\u6d41\u5931\uff09 \u7528\u52fa\u5b50\u8f7b\u8f7b\u4e0a\u4e0b\u63d0\u62c9\u5c06\u6db2\u4f53\u6405\u62cc\u5747\u5300\uff08\u4e0d\u8981\u65cb\u8f6c\u6405\u62cc\uff0c\u907f\u514d\u8d77\u6ce1\u6d41\u5931\uff09 \u5728\u6db2\u9762\u653e\u7f6e\u597d\u88c5\u9970\u7528\u7684\u7eff\u53f6\uff08\u53ef\u9009\uff09 \u5982\u679c\u4f60\u6709\u96ea\u514b\u74f6\uff0c\u53ef\u4ee5\u5c06\u4ee5\u4e0a\u6b65\u9aa4 2~6 \u66ff\u6362\u4e3a\u4ee5\u4e0b\u6b65\u9aa4 \u5c06\u51b0\u5757\u3001\u91d1\u9152\u3001\u67e0\u6aac\u6c41\u3001\u8517\u7cd6\u7cd6\u6d46\u5012\u5165\u96ea\u514b\u74f6\uff0c\u96ea\u514b\u5747\u5300 \u5c06\u5145\u5206\u96ea\u514b\u7684\u4ea7\u7269\u5012\u5230\u676f\u5b50\u4e2d\uff08\u5982\u679c\u91cc\u9762\u7684\u51b0\u592a\u788e\u4e86\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u8fc7\u6ee4\u5176\u4e2d\u7684\u51b0\uff0c\u91cd\u65b0\u5f80\u676f\u4e2d\u8865\u5145\u51b0\u5757\uff09","title":"\u64cd\u4f5c"},{"location":"dishes/drink/%E9%87%91%E8%8F%B2%E5%A3%AB/%E9%87%91%E8%8F%B2%E5%A3%AB/#_5","text":"","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/drink/%E9%87%91%E8%8F%B2%E5%A3%AB/%E9%87%91%E8%8F%B2%E5%A3%AB/#_6","text":"\u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u6210\u54c1"},{"location":"dishes/meat_dish/%E5%86%B7%E5%90%83%E5%85%94/","text":"\u51b7\u5403\u5154\u7684\u505a\u6cd5 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u5154\u8089 \u76d0 \u5473\u7cbe \u869d\u6cb9 \u6599\u9152 \u849c \u59dc \u5c0f\u8471/\u5927\u8471/\u6d0b\u8471 \u5e72\u8fa3\u6912 \u9752\u82b1\u6912 \u516b\u89d2 \u6842\u76ae \u9999\u53f6 \u5c71\u5948 \u767d\u853b \u5c0f\u8334\u9999 \u767d\u829d\u9ebb \u8ba1\u7b97 \u76d0\u91cf = \u5154\u8089\u65a4\u6570 * 2 \u514b \u5473\u7cbe\u91cf = \u5154\u8089\u65a4\u6570 * 1 \u514b \u869d\u6cb9\u91cf = \u5154\u8089\u65a4\u6570 * 5 \u514b \u6599\u9152\u91cf = \u5154\u8089\u65a4\u6570 * 10 \u514b \u6cb9\u91cf = \u5154\u8089\u65a4\u6570 * 0.9 \uff5e 1 \u5347 \u849c\u91cf = \u5154\u8089\u65a4\u6570 * \u4e8c\u5206\u4e4b\u4e00\u5934\u849c \u59dc\u91cf = \u849c\u91cf \u5c0f\u8471/\u5927\u8471/\u6d0b\u8471\u603b\u91cf = \u5154\u8089\u65a4\u6570 * 15 \u514b \u5e72\u8fa3\u6912\u91cf = \u8fa3\u6912\u6bb5\u7684\u603b\u4f53\u79ef\u7b49\u4e8e\u5154\u8089\u7684\u603b\u4f53\u79ef \u9752\u82b1\u6912\u91cf = 3 \u65a4\u5154\u8089\u5bf9\u5e94\u5403\u996d\u7528\u7684\u5c0f\u7897\uff0c\u4e00\u6574\u7897\u82b1\u6912 \u516b\u89d2\u91cf = \u5154\u8089\u65a4\u6570 * 1 \u7c92 \u6842\u76ae\u91cf = \u5154\u8089\u65a4\u6570 * \u5927\u62c7\u6307\u957f\u77ed\u7684\u4e00\u5757 \u9999\u53f6\u91cf = \u5154\u8089\u65a4\u6570 * 5 \u7247 \u5c71\u5948\u91cf = \u5154\u8089\u65a4\u6570 * \u9ec4\u8c46\u5927\u5c0f\u7684\u4e00\u5757 \u767d\u853b\u91cf = \u5154\u8089\u65a4\u6570 * 2 \u9897 \u5c0f\u8334\u9999\u91cf = \u5154\u8089\u65a4\u6570 * 15 \u514b \u767d\u829d\u9ebb\u91cf = \u5154\u8089\u65a4\u6570 * 25 \u514b \u4f7f\u7528\u4e0a\u8ff0\u6761\u4ef6\uff0c\u8ba1\u7b97\u51fa\u8ba1\u5212\u4f7f\u7528\u7684\u539f\u6750\u6599\u6bd4\u4f8b\u3002 \u64cd\u4f5c \u849c\u3001\u59dc\u6252\u76ae\u5e76\u5241\u788e\u5907\u7528\uff0c\u516b\u89d2\u3001\u6842\u76ae\u3001\u9999\u53f6\u3001\u5c71\u5948\u3001\u767d\u853b\u3001\u5c0f\u8334\u9999\u6d17\u51c0\u5907\u7528\u3002 \u5e72\u8fa3\u6912\u526a\u6210 2 \u5398\u7c73\u5de6\u53f3\u7684\u5c0f\u6bb5\uff0c\u6d17\u51c0\u5907\u7528\u3002 \u5c0f\u8471/\u5927\u8471/\u6d0b\u8471\u6d17\u51c0\uff0c\u6d0b\u8471\u5207\u6210\u5c0f\u5757\u3002 \u5154\u8089\u5241\u6210 2 \u5398\u7c73\u5de6\u53f3\u7684\u5c0f\u5757\uff0c\u52a0\u5165\u76d0\u3001\u6599\u9152\u3001\u5473\u7cbe\u8c03\u5473\uff0c\u814c\u5236 15 \u5206\u949f\u3002 \u9505\u4e2d\u5012\u6cb9\uff0c\u6cb9\u6e29 4 \u6210\u70ed\u4e0b\u5c0f\u8471/\u5927\u8471/\u6d0b\u8471\uff0c\u4e2d\u5c0f\u706b\u7178\u7092\u51fa\u9999\u5473\uff0c\u5f85\u5230\u5c0f\u8471/\u5927\u8471/\u6d0b\u8471\u5fae\u7126\uff0c\u5c06\u5176\u635e\u51fa\u3002 \u5f00\u5927\u706b\u5347\u9ad8\u6cb9\u6e29\uff0c\u6cb9\u6e29 8 \u6210\u70ed\u65f6\u4e0b\u5165\u5154\u8089\uff0c\u70b8\u5236\u8fc7\u7a0b\u8f6c\u4e2d\u5c0f\u706b\uff0c\u70b8\u81f3\u5154\u8089\u5fae\u5fae\u7126\u9ec4\u65f6\u635e\u51fa\u5154\u8089\u3002 \u5347\u9ad8\u6cb9\u6e29\uff0c\u5012\u5165\u5e72\u8fa3\u6912\u3001\u9752\u82b1\u6912\u3001\u516b\u89d2\u3001\u6842\u76ae\u3001\u9999\u53f6\u3001\u5c71\u5948\u3001\u767d\u853b\u3001\u5c0f\u8334\u9999\uff1b\u8f6c\u5c0f\u706b\u5c06\u8fa3\u6912\u6bb5\u70b8\u8106\u3002 \u91cd\u65b0\u5012\u5165\u5154\u8089\uff0c\u52a0\u5165\u869d\u6cb9\u3001\u7ffb\u7092\u51e0\u5206\u949f\u3002 \u5173\u706b\uff0c\u52a0\u5165\u849c\u3001\u59dc\u3001\u767d\u829d\u9ebb\uff0c\u7ffb\u7092\u5747\u5300\u3002 \u653e\u7f6e\u4e00\u591c\u66f4\u52a0\u5165\u5473\u3002 \u9644\u52a0\u5185\u5bb9 \u5728\u64cd\u4f5c\u7684\u7b2c 6 \u6b65\u9aa4\u4e2d\u8981\u6ce8\u610f\uff1a\u6cb9\u91cf\u5e94\u8be5\u6df9\u6ca1\u5154\u8089\uff0c\u82e5\u672a\u6df9\u6ca1\u9700\u8981\u53ca\u65f6\u8865\u5145\u3002 \u5728\u64cd\u4f5c\u7684\u7b2c 7 \u6b65\u9aa4\u4e2d\u8981\u6ce8\u610f\uff1a\u8fa3\u6912\u6781\u5bb9\u6613\u70b8\u7cca\uff0c\u70b8\u7cca\u4f1a\u53d8\u6210\u9ed1\u8272\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u975e\u5e38\u5feb\uff0c\u6240\u4ee5\u4e00\u5b9a\u8981\u5c0f\u706b\uff0c\u57fa\u672c\u7b49\u5230\u6ca1\u592a\u591a\u6c34\u6c14\u84b8\u53d1\u65f6\uff0c\u5c31\u53ef\u4ee5\u4e0b\u5154\u8089\u4e86\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u51b7\u5403\u5154"},{"location":"dishes/meat_dish/%E5%86%B7%E5%90%83%E5%85%94/#_1","text":"","title":"\u51b7\u5403\u5154\u7684\u505a\u6cd5"},{"location":"dishes/meat_dish/%E5%86%B7%E5%90%83%E5%85%94/#_2","text":"\u5154\u8089 \u76d0 \u5473\u7cbe \u869d\u6cb9 \u6599\u9152 \u849c \u59dc \u5c0f\u8471/\u5927\u8471/\u6d0b\u8471 \u5e72\u8fa3\u6912 \u9752\u82b1\u6912 \u516b\u89d2 \u6842\u76ae \u9999\u53f6 \u5c71\u5948 \u767d\u853b \u5c0f\u8334\u9999 \u767d\u829d\u9ebb","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/meat_dish/%E5%86%B7%E5%90%83%E5%85%94/#_3","text":"\u76d0\u91cf = \u5154\u8089\u65a4\u6570 * 2 \u514b \u5473\u7cbe\u91cf = \u5154\u8089\u65a4\u6570 * 1 \u514b \u869d\u6cb9\u91cf = \u5154\u8089\u65a4\u6570 * 5 \u514b \u6599\u9152\u91cf = \u5154\u8089\u65a4\u6570 * 10 \u514b \u6cb9\u91cf = \u5154\u8089\u65a4\u6570 * 0.9 \uff5e 1 \u5347 \u849c\u91cf = \u5154\u8089\u65a4\u6570 * \u4e8c\u5206\u4e4b\u4e00\u5934\u849c \u59dc\u91cf = \u849c\u91cf \u5c0f\u8471/\u5927\u8471/\u6d0b\u8471\u603b\u91cf = \u5154\u8089\u65a4\u6570 * 15 \u514b \u5e72\u8fa3\u6912\u91cf = \u8fa3\u6912\u6bb5\u7684\u603b\u4f53\u79ef\u7b49\u4e8e\u5154\u8089\u7684\u603b\u4f53\u79ef \u9752\u82b1\u6912\u91cf = 3 \u65a4\u5154\u8089\u5bf9\u5e94\u5403\u996d\u7528\u7684\u5c0f\u7897\uff0c\u4e00\u6574\u7897\u82b1\u6912 \u516b\u89d2\u91cf = \u5154\u8089\u65a4\u6570 * 1 \u7c92 \u6842\u76ae\u91cf = \u5154\u8089\u65a4\u6570 * \u5927\u62c7\u6307\u957f\u77ed\u7684\u4e00\u5757 \u9999\u53f6\u91cf = \u5154\u8089\u65a4\u6570 * 5 \u7247 \u5c71\u5948\u91cf = \u5154\u8089\u65a4\u6570 * \u9ec4\u8c46\u5927\u5c0f\u7684\u4e00\u5757 \u767d\u853b\u91cf = \u5154\u8089\u65a4\u6570 * 2 \u9897 \u5c0f\u8334\u9999\u91cf = \u5154\u8089\u65a4\u6570 * 15 \u514b \u767d\u829d\u9ebb\u91cf = \u5154\u8089\u65a4\u6570 * 25 \u514b \u4f7f\u7528\u4e0a\u8ff0\u6761\u4ef6\uff0c\u8ba1\u7b97\u51fa\u8ba1\u5212\u4f7f\u7528\u7684\u539f\u6750\u6599\u6bd4\u4f8b\u3002","title":"\u8ba1\u7b97"},{"location":"dishes/meat_dish/%E5%86%B7%E5%90%83%E5%85%94/#_4","text":"\u849c\u3001\u59dc\u6252\u76ae\u5e76\u5241\u788e\u5907\u7528\uff0c\u516b\u89d2\u3001\u6842\u76ae\u3001\u9999\u53f6\u3001\u5c71\u5948\u3001\u767d\u853b\u3001\u5c0f\u8334\u9999\u6d17\u51c0\u5907\u7528\u3002 \u5e72\u8fa3\u6912\u526a\u6210 2 \u5398\u7c73\u5de6\u53f3\u7684\u5c0f\u6bb5\uff0c\u6d17\u51c0\u5907\u7528\u3002 \u5c0f\u8471/\u5927\u8471/\u6d0b\u8471\u6d17\u51c0\uff0c\u6d0b\u8471\u5207\u6210\u5c0f\u5757\u3002 \u5154\u8089\u5241\u6210 2 \u5398\u7c73\u5de6\u53f3\u7684\u5c0f\u5757\uff0c\u52a0\u5165\u76d0\u3001\u6599\u9152\u3001\u5473\u7cbe\u8c03\u5473\uff0c\u814c\u5236 15 \u5206\u949f\u3002 \u9505\u4e2d\u5012\u6cb9\uff0c\u6cb9\u6e29 4 \u6210\u70ed\u4e0b\u5c0f\u8471/\u5927\u8471/\u6d0b\u8471\uff0c\u4e2d\u5c0f\u706b\u7178\u7092\u51fa\u9999\u5473\uff0c\u5f85\u5230\u5c0f\u8471/\u5927\u8471/\u6d0b\u8471\u5fae\u7126\uff0c\u5c06\u5176\u635e\u51fa\u3002 \u5f00\u5927\u706b\u5347\u9ad8\u6cb9\u6e29\uff0c\u6cb9\u6e29 8 \u6210\u70ed\u65f6\u4e0b\u5165\u5154\u8089\uff0c\u70b8\u5236\u8fc7\u7a0b\u8f6c\u4e2d\u5c0f\u706b\uff0c\u70b8\u81f3\u5154\u8089\u5fae\u5fae\u7126\u9ec4\u65f6\u635e\u51fa\u5154\u8089\u3002 \u5347\u9ad8\u6cb9\u6e29\uff0c\u5012\u5165\u5e72\u8fa3\u6912\u3001\u9752\u82b1\u6912\u3001\u516b\u89d2\u3001\u6842\u76ae\u3001\u9999\u53f6\u3001\u5c71\u5948\u3001\u767d\u853b\u3001\u5c0f\u8334\u9999\uff1b\u8f6c\u5c0f\u706b\u5c06\u8fa3\u6912\u6bb5\u70b8\u8106\u3002 \u91cd\u65b0\u5012\u5165\u5154\u8089\uff0c\u52a0\u5165\u869d\u6cb9\u3001\u7ffb\u7092\u51e0\u5206\u949f\u3002 \u5173\u706b\uff0c\u52a0\u5165\u849c\u3001\u59dc\u3001\u767d\u829d\u9ebb\uff0c\u7ffb\u7092\u5747\u5300\u3002 \u653e\u7f6e\u4e00\u591c\u66f4\u52a0\u5165\u5473\u3002","title":"\u64cd\u4f5c"},{"location":"dishes/meat_dish/%E5%86%B7%E5%90%83%E5%85%94/#_5","text":"\u5728\u64cd\u4f5c\u7684\u7b2c 6 \u6b65\u9aa4\u4e2d\u8981\u6ce8\u610f\uff1a\u6cb9\u91cf\u5e94\u8be5\u6df9\u6ca1\u5154\u8089\uff0c\u82e5\u672a\u6df9\u6ca1\u9700\u8981\u53ca\u65f6\u8865\u5145\u3002 \u5728\u64cd\u4f5c\u7684\u7b2c 7 \u6b65\u9aa4\u4e2d\u8981\u6ce8\u610f\uff1a\u8fa3\u6912\u6781\u5bb9\u6613\u70b8\u7cca\uff0c\u70b8\u7cca\u4f1a\u53d8\u6210\u9ed1\u8272\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u975e\u5e38\u5feb\uff0c\u6240\u4ee5\u4e00\u5b9a\u8981\u5c0f\u706b\uff0c\u57fa\u672c\u7b49\u5230\u6ca1\u592a\u591a\u6c34\u6c14\u84b8\u53d1\u65f6\uff0c\u5c31\u53ef\u4ee5\u4e0b\u5154\u8089\u4e86\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/meat_dish/%E5%8F%AF%E4%B9%90%E9%B8%A1%E7%BF%85/","text":"\u53ef\u4e50\u9e21\u7fc5\u7684\u505a\u6cd5 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u9e21\u7fc5\u4e2d \u53ef\u4e50 \u767d\u7cd6 \u751f\u62bd \u76d0 \u751f\u59dc \u6599\u9152\u6216\u5564\u9152 \u5c0f\u8471 \u8ba1\u7b97 \u6309\u7167 1 \u76d8\u7684\u4efd\u91cf\uff1a \u9e21\u7fc5 10 \uff5e 12 \u53ea \u53ef\u4e50 500ml \u767d\u7cd6 10 \u514b \u751f\u62bd 15 \u514b \u8001\u62bd 3 \u514b \u76d0 2 \u514b \u751f\u59dc 2 \u7247 \u6599\u9152 20 \u6beb\u5347 \u5c0f\u8471\u633d\u6210\u7ed3 \u64cd\u4f5c \u9e21\u7fc5\u5165\u9505\uff0c\u5012\u5165\u51b7\u6c34\u6df9\u6ca1\u3002\u653e\u751f\u59dc 1 \u7247\u548c\u6599\u9152 10 \uff5e 20 \u6beb\u5347\u3002\u5927\u706b\u716e\u5f00\uff08 2 \u5206\u949f\u5de6\u53f3 \uff09\u540e\uff0c\u6487\u53bb\u6d6e\u6cab\uff0c\u6ca5\u51fa\u6c34\u5206\uff08\u63d0\u793a\uff1a\u8fd9\u4e00\u6b65\u9488\u5bf9\u51b0\u9c9c\u9e21\u7fc5\uff0c\u521a\u4e70\u6765\u7684\u9e21\u7fc5\u76f4\u63a5\u6539\u5200\u7528\u751f\u62bd\u8fdb\u884c\u814c\u5236\u5373\u53ef\uff09\u3002 \u635e\u51fa\u9e21\u7fc5\uff0c\u53ef\u7528\u5200\u5c06\u4e24\u8fb9\u5404\u5212\u4e0a\u4e24\u53e3\u6539\u5200\u3002\u751f\u62bd\u7ea6 10 \u514b\u814c\u5236\u9e21\u7fc5 10 \u5206\u949f\uff08\u751f\u62bd\u80fd\u5b8c\u5168\u5305\u88f9\u9e21\u7fc5\u8868\u9762\u5165\u5473\u5c31\u884c\uff09 \u9505\u91cd\u65b0\u5c0f\u706b\u8d77\u6cb9\uff0c\u5148\u5c06\u5269\u4f59\u59dc\u7247\u7206\u9999\uff0c\u7136\u540e\u4e0b\u5165\u814c\u597d\u7684\u9e21\u7fc5\u3002\u5c06\u9e21\u7fc5\u714e\u81f3\u91d1\u9ec4\u7ffb\u9762\uff08\u76f4\u5230\u4e24\u9762\u91d1\u9ec4\uff09\uff0c\u7528\u7092\u52fa\u7ffb\u52a8\u4e00\u4e0b\u9e21\u7fc5\uff0c\u4e0e\u59dc\u7247\u4e00\u8d77\u7ffb\u7092 4\uff5e5 \u4e0b\uff08\u76ee\u7684\u662f\u9632\u6b62\u9e21\u7fc5\u548c\u59dc\u7247\u7c98\u9ecf\uff09\u3002 \u9e21\u7fc5\u91d1\u9ec4\uff0c\u5012\u5165\u53ef\u4e50\u6ca1\u8fc7\u9e21\u7fc5\uff0c\u5f00\u5927\u706b\u5c06\u9505\u4e2d\u53ef\u4e50\u716e\u6cb8\uff0c\u7136\u540e\u6487\u53bb\u6f02\u6d6e\u7684\u9ed1\u8272\u6d6e\u6cab\uff08\u5305\u542b\u8840\u6c34\uff09\u3002\u6b64\u65f6\u52a0\u5165\u8471\u7ed3\u3002 \u8c03\u5473\uff1a\u52a0\u5165\u98df\u7528\u76d0 2 \u514b\uff0c\u767d\u7cd6 10 \u514b\uff0c\u751f\u62bd 3 \u514b\u8c03\u5473\uff08\u53ef\u4ee5\u9002\u5f53\u7528\u8001\u62bd\u8c03\u5e95\u8272\uff0c3 \u514b\uff09\u3002 \u7b49\u5230\u8471\u7ed3\u53d8\u9ec4\uff0c\u548c\u59dc\u7247\u4e00\u8d77\u635e\u51fa\uff0c\u8f6c\u4e2d\u706b\u7ee7\u7eed\u6162\u716e\u53ef\u4e50\u9e21\u7fc5\u3002 \u7b49\u5230\u53ef\u4e50\u5448\u73b0\u6302\u4e1d\u72b6\u6001\uff0c\u5173\u5c0f\u706b\u8ba9\u6c41\u7262\u7262\u6302\u5728\u9e21\u7fc5\u4e0a\u3002\u51fa\u9505\uff0c\u88c5\u76d8\u3002 \u9644\u52a0\u5185\u5bb9 \u52a0\u5165\u751f\u59dc\u7206\u9999\u7684\u540c\u65f6\u80fd\u9632\u6b62\u9e21\u7fc5\u7c98\u9505\u3002 \u6700\u540e\u6536\u6c41\u65f6\u52ff\u5f00\u8fc7\u5927\u706b\uff0c\u9632\u6b62\u5473\u9053\u504f\u82e6\u3002 \u672c\u83dc\u54c1\u504f\u751c\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u53ef\u4e50\u9e21\u7fc5"},{"location":"dishes/meat_dish/%E5%8F%AF%E4%B9%90%E9%B8%A1%E7%BF%85/#_1","text":"","title":"\u53ef\u4e50\u9e21\u7fc5\u7684\u505a\u6cd5"},{"location":"dishes/meat_dish/%E5%8F%AF%E4%B9%90%E9%B8%A1%E7%BF%85/#_2","text":"\u9e21\u7fc5\u4e2d \u53ef\u4e50 \u767d\u7cd6 \u751f\u62bd \u76d0 \u751f\u59dc \u6599\u9152\u6216\u5564\u9152 \u5c0f\u8471","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/meat_dish/%E5%8F%AF%E4%B9%90%E9%B8%A1%E7%BF%85/#_3","text":"\u6309\u7167 1 \u76d8\u7684\u4efd\u91cf\uff1a \u9e21\u7fc5 10 \uff5e 12 \u53ea \u53ef\u4e50 500ml \u767d\u7cd6 10 \u514b \u751f\u62bd 15 \u514b \u8001\u62bd 3 \u514b \u76d0 2 \u514b \u751f\u59dc 2 \u7247 \u6599\u9152 20 \u6beb\u5347 \u5c0f\u8471\u633d\u6210\u7ed3","title":"\u8ba1\u7b97"},{"location":"dishes/meat_dish/%E5%8F%AF%E4%B9%90%E9%B8%A1%E7%BF%85/#_4","text":"\u9e21\u7fc5\u5165\u9505\uff0c\u5012\u5165\u51b7\u6c34\u6df9\u6ca1\u3002\u653e\u751f\u59dc 1 \u7247\u548c\u6599\u9152 10 \uff5e 20 \u6beb\u5347\u3002\u5927\u706b\u716e\u5f00\uff08 2 \u5206\u949f\u5de6\u53f3 \uff09\u540e\uff0c\u6487\u53bb\u6d6e\u6cab\uff0c\u6ca5\u51fa\u6c34\u5206\uff08\u63d0\u793a\uff1a\u8fd9\u4e00\u6b65\u9488\u5bf9\u51b0\u9c9c\u9e21\u7fc5\uff0c\u521a\u4e70\u6765\u7684\u9e21\u7fc5\u76f4\u63a5\u6539\u5200\u7528\u751f\u62bd\u8fdb\u884c\u814c\u5236\u5373\u53ef\uff09\u3002 \u635e\u51fa\u9e21\u7fc5\uff0c\u53ef\u7528\u5200\u5c06\u4e24\u8fb9\u5404\u5212\u4e0a\u4e24\u53e3\u6539\u5200\u3002\u751f\u62bd\u7ea6 10 \u514b\u814c\u5236\u9e21\u7fc5 10 \u5206\u949f\uff08\u751f\u62bd\u80fd\u5b8c\u5168\u5305\u88f9\u9e21\u7fc5\u8868\u9762\u5165\u5473\u5c31\u884c\uff09 \u9505\u91cd\u65b0\u5c0f\u706b\u8d77\u6cb9\uff0c\u5148\u5c06\u5269\u4f59\u59dc\u7247\u7206\u9999\uff0c\u7136\u540e\u4e0b\u5165\u814c\u597d\u7684\u9e21\u7fc5\u3002\u5c06\u9e21\u7fc5\u714e\u81f3\u91d1\u9ec4\u7ffb\u9762\uff08\u76f4\u5230\u4e24\u9762\u91d1\u9ec4\uff09\uff0c\u7528\u7092\u52fa\u7ffb\u52a8\u4e00\u4e0b\u9e21\u7fc5\uff0c\u4e0e\u59dc\u7247\u4e00\u8d77\u7ffb\u7092 4\uff5e5 \u4e0b\uff08\u76ee\u7684\u662f\u9632\u6b62\u9e21\u7fc5\u548c\u59dc\u7247\u7c98\u9ecf\uff09\u3002 \u9e21\u7fc5\u91d1\u9ec4\uff0c\u5012\u5165\u53ef\u4e50\u6ca1\u8fc7\u9e21\u7fc5\uff0c\u5f00\u5927\u706b\u5c06\u9505\u4e2d\u53ef\u4e50\u716e\u6cb8\uff0c\u7136\u540e\u6487\u53bb\u6f02\u6d6e\u7684\u9ed1\u8272\u6d6e\u6cab\uff08\u5305\u542b\u8840\u6c34\uff09\u3002\u6b64\u65f6\u52a0\u5165\u8471\u7ed3\u3002 \u8c03\u5473\uff1a\u52a0\u5165\u98df\u7528\u76d0 2 \u514b\uff0c\u767d\u7cd6 10 \u514b\uff0c\u751f\u62bd 3 \u514b\u8c03\u5473\uff08\u53ef\u4ee5\u9002\u5f53\u7528\u8001\u62bd\u8c03\u5e95\u8272\uff0c3 \u514b\uff09\u3002 \u7b49\u5230\u8471\u7ed3\u53d8\u9ec4\uff0c\u548c\u59dc\u7247\u4e00\u8d77\u635e\u51fa\uff0c\u8f6c\u4e2d\u706b\u7ee7\u7eed\u6162\u716e\u53ef\u4e50\u9e21\u7fc5\u3002 \u7b49\u5230\u53ef\u4e50\u5448\u73b0\u6302\u4e1d\u72b6\u6001\uff0c\u5173\u5c0f\u706b\u8ba9\u6c41\u7262\u7262\u6302\u5728\u9e21\u7fc5\u4e0a\u3002\u51fa\u9505\uff0c\u88c5\u76d8\u3002","title":"\u64cd\u4f5c"},{"location":"dishes/meat_dish/%E5%8F%AF%E4%B9%90%E9%B8%A1%E7%BF%85/#_5","text":"\u52a0\u5165\u751f\u59dc\u7206\u9999\u7684\u540c\u65f6\u80fd\u9632\u6b62\u9e21\u7fc5\u7c98\u9505\u3002 \u6700\u540e\u6536\u6c41\u65f6\u52ff\u5f00\u8fc7\u5927\u706b\uff0c\u9632\u6b62\u5473\u9053\u504f\u82e6\u3002 \u672c\u83dc\u54c1\u504f\u751c\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/meat_dish/%E5%92%95%E5%99%9C%E8%82%89/","text":"\u5495\u565c\u8089\u7684\u505a\u6cd5 \u5495\u565c\u8089\u662f\u975e\u5e38\u4e0b\u996d\u7684\u83dc\u80b4\uff0c\u53ea\u9700\u4e00\u9053\u5c31\u53ef\u4ee5\u5403\u5f97\u6d25\u6d25\u6709\u5473\uff0c\u5927\u4eba\u5c0f\u5b69\u90fd\u7231\u5403\u3002\u800c\u8fd9\u6b21\u505a\u7684\u662f\u7b80\u6613\u7248\u83e0\u841d\u5495\u565c\u8089\uff0c\u5229\u7528\u7b80\u5355\u7684\u6750\u6599\u5c31\u53ef\u4ee5\u5728\u5bb6\u505a\u51fa\u7279\u6709\u98ce\u5473\u7684\u5495\u565c\u8089 \u3002 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u6885\u5934\u732a\u8089 \u9752\u6912 \u7f50\u5934\u83e0\u841d\u7247 \u76d0 \u8304\u6c41 \u767d\u918b \u849c\u84c9 \u751f\u62bd \u751f\u7c89 \u767d\u7802\u7cd6 \u8ba1\u7b97 \u6bcf\u4efd\uff1a 1 \u6c64\u5319 = 15ml 1 \u8336\u5319 = 5ml \u6885\u5934\u732a\u8089 100g \u9752\u6912 25g \u7f50\u5934\u83e0\u841d\u7247 75g \u76d0 1/4 \u8336\u5319 \u8304\u6c41 4 \u6c64\u5319 \u767d\u918b 2 \u8336\u5319 \u849c\u84c9 1 \u6c64\u5319 \u751f\u62bd 1/2 \u8336\u5319 \u751f\u7c89 2 1/2 \u8336\u5319 \u767d\u7802\u7cd6 2 \u6c64\u5319 \u6c34 200 \u6beb\u5347 \u64cd\u4f5c \u5c06\u6885\u5934\u732a\u8089\uff08100 \u514b\uff09\u6d17\u51c0\uff0c\u7136\u540e\u7528\u53a8\u623f\u7eb8\u62b9\u5e72\u6c34\u4efd\uff0c\u5207\u7c92\u3002 \u7528\u76d0\uff081/2 \u8336\u5319\uff09\u814c\u5236\u6885\u5934\u732a\u8089 20 \u5206\u949f\u3002 \u5c06\u83e0\u841d\u7247\uff0875 \u514b\uff09\u5207\u4ef6\u3002 \u5728\u7897\u4e2d\u52a0\u5165\u8304\u6c41\uff084 \u6c64\u5319\uff09\ufe51\u767d\u918b\uff082 \u8336\u5319\uff09\ufe51\u849c\u84c9\uff081 \u6c64\u5319\uff09\ufe51\u751f\u62bd\uff08\u00bd \u8336\u5319\uff09\ufe51\u751f\u7c89\uff082\u00bd \u8336\u5319\uff09\ufe51\u767d\u7802\u7cd6\uff082 \u6c64\u5319\uff09\ufe51\u76d0\uff08\u00bc \u8336\u5319\uff09\u548c\u6c34\uff08200 \u6beb\u5347\uff09\uff0c\u62cc\u5300\u6210\u9171\u6c41\u3002 \u5c06\u6885\u5934\u732a\u8089\u7c92\u6cbe\u4e0a\u751f\u7c89\uff086 \u6c64\u5319\uff09\u3002 \u52a0\u5165\u6cb9\uff08500 \u6beb\u5347\uff09\u4e2d\u706b\u52a0\u70ed\u3002 \u5c06\u6885\u5934\u732a\u8089\u7c92\u653e\u81f3\u9505\u91cc\u4e2d\u706b\u70b8 5 \u5206\u949f\uff0c\u7136\u540e\u76db\u8d77\u3002 \u52a0\u5165\u6885\u5934\u732a\u8089\u7c92\uff0c\u518d\u5927\u706b\u7ffb\u70b8 1 \u5206\u949f\u3002 \u52a0\u5165\u6cb9\uff081 \u8336\u5319\uff09\u548c\u9171\u6c41\uff0c\u4e2d\u706b\u52a0\u70ed 3 \u5206\u949f\u3002 \u52a0\u5165\u9752\u6912\u548c\u83e0\u841d\uff0c\u5927\u706b\u52a0\u70ed 2 \u5206\u949f\u3002 \u5c06\u5df2\u70b8\u597d\u7684\u6885\u5934\u732a\u8089\u7c92\u4e0e\u9171\u6c41\u62cc\u5300\u5373\u53ef\u3002 \u9644\u52a0\u5185\u5bb9 \u60f3\u8ba9\u8089\u66f4\u6709\u5c42\u6b21\u53ef\u4ee5\u5728\u751f\u7c89\u4e2d\u52a0\u9e21\u86cb\uff0c\u70b8\u51fa\u6765\u4f1a\u66f4\u9999\u8106 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u5495\u565c\u8089"},{"location":"dishes/meat_dish/%E5%92%95%E5%99%9C%E8%82%89/#_1","text":"\u5495\u565c\u8089\u662f\u975e\u5e38\u4e0b\u996d\u7684\u83dc\u80b4\uff0c\u53ea\u9700\u4e00\u9053\u5c31\u53ef\u4ee5\u5403\u5f97\u6d25\u6d25\u6709\u5473\uff0c\u5927\u4eba\u5c0f\u5b69\u90fd\u7231\u5403\u3002\u800c\u8fd9\u6b21\u505a\u7684\u662f\u7b80\u6613\u7248\u83e0\u841d\u5495\u565c\u8089\uff0c\u5229\u7528\u7b80\u5355\u7684\u6750\u6599\u5c31\u53ef\u4ee5\u5728\u5bb6\u505a\u51fa\u7279\u6709\u98ce\u5473\u7684\u5495\u565c\u8089 \u3002","title":"\u5495\u565c\u8089\u7684\u505a\u6cd5"},{"location":"dishes/meat_dish/%E5%92%95%E5%99%9C%E8%82%89/#_2","text":"\u6885\u5934\u732a\u8089 \u9752\u6912 \u7f50\u5934\u83e0\u841d\u7247 \u76d0 \u8304\u6c41 \u767d\u918b \u849c\u84c9 \u751f\u62bd \u751f\u7c89 \u767d\u7802\u7cd6","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/meat_dish/%E5%92%95%E5%99%9C%E8%82%89/#_3","text":"\u6bcf\u4efd\uff1a 1 \u6c64\u5319 = 15ml 1 \u8336\u5319 = 5ml \u6885\u5934\u732a\u8089 100g \u9752\u6912 25g \u7f50\u5934\u83e0\u841d\u7247 75g \u76d0 1/4 \u8336\u5319 \u8304\u6c41 4 \u6c64\u5319 \u767d\u918b 2 \u8336\u5319 \u849c\u84c9 1 \u6c64\u5319 \u751f\u62bd 1/2 \u8336\u5319 \u751f\u7c89 2 1/2 \u8336\u5319 \u767d\u7802\u7cd6 2 \u6c64\u5319 \u6c34 200 \u6beb\u5347","title":"\u8ba1\u7b97"},{"location":"dishes/meat_dish/%E5%92%95%E5%99%9C%E8%82%89/#_4","text":"\u5c06\u6885\u5934\u732a\u8089\uff08100 \u514b\uff09\u6d17\u51c0\uff0c\u7136\u540e\u7528\u53a8\u623f\u7eb8\u62b9\u5e72\u6c34\u4efd\uff0c\u5207\u7c92\u3002 \u7528\u76d0\uff081/2 \u8336\u5319\uff09\u814c\u5236\u6885\u5934\u732a\u8089 20 \u5206\u949f\u3002 \u5c06\u83e0\u841d\u7247\uff0875 \u514b\uff09\u5207\u4ef6\u3002 \u5728\u7897\u4e2d\u52a0\u5165\u8304\u6c41\uff084 \u6c64\u5319\uff09\ufe51\u767d\u918b\uff082 \u8336\u5319\uff09\ufe51\u849c\u84c9\uff081 \u6c64\u5319\uff09\ufe51\u751f\u62bd\uff08\u00bd \u8336\u5319\uff09\ufe51\u751f\u7c89\uff082\u00bd \u8336\u5319\uff09\ufe51\u767d\u7802\u7cd6\uff082 \u6c64\u5319\uff09\ufe51\u76d0\uff08\u00bc \u8336\u5319\uff09\u548c\u6c34\uff08200 \u6beb\u5347\uff09\uff0c\u62cc\u5300\u6210\u9171\u6c41\u3002 \u5c06\u6885\u5934\u732a\u8089\u7c92\u6cbe\u4e0a\u751f\u7c89\uff086 \u6c64\u5319\uff09\u3002 \u52a0\u5165\u6cb9\uff08500 \u6beb\u5347\uff09\u4e2d\u706b\u52a0\u70ed\u3002 \u5c06\u6885\u5934\u732a\u8089\u7c92\u653e\u81f3\u9505\u91cc\u4e2d\u706b\u70b8 5 \u5206\u949f\uff0c\u7136\u540e\u76db\u8d77\u3002 \u52a0\u5165\u6885\u5934\u732a\u8089\u7c92\uff0c\u518d\u5927\u706b\u7ffb\u70b8 1 \u5206\u949f\u3002 \u52a0\u5165\u6cb9\uff081 \u8336\u5319\uff09\u548c\u9171\u6c41\uff0c\u4e2d\u706b\u52a0\u70ed 3 \u5206\u949f\u3002 \u52a0\u5165\u9752\u6912\u548c\u83e0\u841d\uff0c\u5927\u706b\u52a0\u70ed 2 \u5206\u949f\u3002 \u5c06\u5df2\u70b8\u597d\u7684\u6885\u5934\u732a\u8089\u7c92\u4e0e\u9171\u6c41\u62cc\u5300\u5373\u53ef\u3002","title":"\u64cd\u4f5c"},{"location":"dishes/meat_dish/%E5%92%95%E5%99%9C%E8%82%89/#_5","text":"\u60f3\u8ba9\u8089\u66f4\u6709\u5c42\u6b21\u53ef\u4ee5\u5728\u751f\u7c89\u4e2d\u52a0\u9e21\u86cb\uff0c\u70b8\u51fa\u6765\u4f1a\u66f4\u9999\u8106 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/meat_dish/%E5%9B%9E%E9%94%85%E8%82%89/","text":"\u56de\u9505\u8089\u7684\u505a\u6cd5 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u4e94\u82b1\u8089 \u5c0f\u8471 \u751f\u59dc \u9752\u7ea2\u6912 \u849c\u82d7 \u6599\u9152 \u8c46\u74e3\u9171 \u751f\u62bd\u9171\u6cb9 \u5473\u7cbe \u8ba1\u7b97 \u4e94\u82b1\u8089\u7684\u7528\u91cf\u4e3a 0.5 \u65a4/\u7537\u4eba 0.3 \u65a4/\u5973\u4eba \uff08\u6b63\u5b97\u56de\u9505\u8089\u4f7f\u7528\u4e8c\u5200\u8089[\u4fd7\u79f0\uff1a\u81c0\u5c16]\u5236\u4f5c\uff0c\u8089\u8d28\u575a\u5b9e\uff0c\u80a5\u7626\u5408\u9002\uff09 \u5c0f\u8471 2 \u68f5 \u751f\u59dc 10-40g \u9752\u7ea2\u6912\u9002\u91cf\uff08\u6839\u636e\u53d7\u8fa3\u7a0b\u5ea6\u9009\u62e9, 0-30g\uff09 \u849c\u82d7 1 \u628a \u6599\u9152 1 \u52fa (5ml) \u8c46\u74e3\u9171 2 \u52fa (10ml) \u5473\u7cbe 1 \u52fa (5ml) \u751f\u62bd 1 \u52fa (5ml) \u64cd\u4f5c \u4e94\u82b1\u8089\u4e00\u6bb5\u5904\u7406 \u9505\u70e7\u70ed\uff0c\u7528\u624b\u5c06\u4e94\u82b1\u8089\u7d27\u7d27\u538b\u5728\u9505\u4e0a\u7099\u76ae\u3002\u8fd9\u4e00\u6b65\u662f\u4e3a\u4e86\u5904\u7406\u732a\u76ae\u4e0a\u7684\u6c57\u817a\uff08\u6216\u8005\u4e70\u8089\u7684\u65f6\u5019\u8ba9\u5e08\u5085\u70e7\u4e00\u4e0b\u76ae\uff0c\u559c\u6b22\u6c57\u817a\u7684\u53ef\u4ee5\u65e0\u89c6\uff09 \u7528\u94a2\u4e1d\u7403\u628a\u76ae\u6d17\u5e72\u51c0\uff0c\u4e0d\u6d17\u5e72\u51c0\u4f1a\u6709\u82e6\u5473 \u5c06\u4e94\u82b1\u8089\u653e\u5165\u9505\u4e2d\uff0c\u653e\u5165\u80fd\u6df9\u6ca1\u4e94\u82b1\u8089\u7684\u6c34\uff0c\u653e\u5165\u751f\u59dc\u7247\uff0c\u6599\u9152\u548c\u5c0f\u8471\uff08\u53d6 2 \u68f5\u5c0f\u8471\u6253\u7ed3\uff09 \u5f00\u5927\u706b\u716e\uff0c\u6c34\u5f00\u540e\u6487\u53bb\u6d6e\u6cab\uff0c\u6c34\u5f00\u540e\u7ee7\u7eed\u716e 15 \u5206\u949f\uff0c\u716e\u81f3\u7626\u8089\u90e8\u5206\u53ef\u4ee5\u7528\u7b77\u5b50\u8f7b\u677e\u523a\u7a7f \u914d\u83dc\u5904\u7406 \u9752\u7ea2\u6912\u5207\u5708 \u849c\u82d7\u5207\u6bb5 \u751f\u59dc\u5207\u5c0f\u8584\u7247 \u5c06\u4e00\u52fa\u8c46\u74e3\uff08\u6b64\u65f6\u8fd8\u5269\u4e00\u52fa\uff09\u548c\u751f\u62bd\u63d0\u524d\u6df7\u5408 \u4e94\u82b1\u8089\u4e8c\u6bb5\u5904\u7406 \u5c06\u716e\u719f\u7684\u4e94\u82b1\u8089\u635e\u51fa\u653e\u5165\u51b7\u6c34\u667e\u51c9 \u64e6\u5e72\u4e94\u82b1\u8089\u7684\u6c34\uff0c\u5207\u6210\u4e0a\u80a5\u4e0b\u7626\u7684 2mm \u5de6\u53f3\u7684\u8584\u7247\uff08\u5207\u539a\u4e86\u53e3\u611f\u4e0d\u597d\uff0c\u800c\u4e14\u5f88\u6cb9\uff09 \u5f00\u59cb\u7092\u8089 \u9505\u70e7\u70ed\uff0c\u653e\u5165\u5c11\u8bb8\uff08\u5c11\u8bb8\uff09\u5e95\u6cb9\u6ed1\u9505 \u653e\u5165\u4e94\u82b1\u8089\u7178\u7092\u81f3\u80a5\u8089\u900f\u660e\uff0c\u8089\u7247\u5fae\u5377\uff08\u6b32\u79f0\u8d77\u706f\u76cf\u7a9d\uff09\uff0c\u4e8c\u5200\u8089\u6548\u679c\u6700\u4f73\u3002 \u5012\u5165\u8c46\u74e3\u751f\u62bd\u6df7\u5408\u7269\uff0c\u4e00\u52fa\u5473\u7cbe\u7ffb\u7092 15 \u79d2 \u653e\u5165\u9752\u7ea2\u6912\u5708\u548c\u5c0f\u59dc\u7247\uff0c\u653e\u5165\u53e6\u4e00\u52fa\u8c46\u74e3\u7ffb\u7092 30 \u79d2 \u653e\u5165\u849c\u82d7\u7ffb\u7092 60 \u79d2 \u51fa\u9505 > \u64cd\u4f5c\u8981\u8fc5\u901f\uff0c\u5c0f\u5fc3\u7cca\u9505 \u9644\u52a0\u5185\u5bb9 \u4e0d\u559c\u6b22\u849c\u82d7\u53ef\u4ee5\u6362\u6210\u6d0b\u8471\u6216\u8005\u5176\u4ed6\u852c\u83dc\uff0c\u4f46\u662f\u8981\u6ce8\u610f\u852c\u83dc\u7684\u6613\u719f\u7a0b\u5ea6\u5c06\u852c\u83dc\u63d0\u524d\u7092\u81f3\uff0c\u4e0d\u7136\u4f1a\u51fa\u73b0\u852c\u83dc\u534a\u751f\u4e0d\u719f\u7684\u60c5\u51b5 \u5982\u679c\u56de\u9505\u8089\u6bd4\u8f83\u5927\u5757\u53ef\u4ee5\u5207\u6210 5 \u5398\u7c73\u89c1\u65b9\u7684\u5757\uff0c\u4e94\u82b1\u8089\u716e\u81f3\u7b77\u5b50\u7a0d\u5fae\u7528\u529b\u5373\u53ef\u63d2\u5165\u732a\u76ae\u5373\u53ef \u56de\u9505\u8089\u8fc7\u51b7\u6c34\u667e\u51c9\u540e\u8089\u8d28\u4f1a\u66f4\u7d27\u81f4 \u56de\u9505\u8089\u64e6\u5e72\u6c34\u662f\u4e3a\u4e86\u907f\u514d\u7092\u81f3\u7684\u65f6\u5019\u7206\u6cb9\u6e85\u4f24 \u56de\u9505\u8089\u5207\u8bb0\u4e0d\u8981\u5207\u539a\u4e86\uff0c\u4e0d\u7136\u5f88\u817b \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u56de\u9505\u8089"},{"location":"dishes/meat_dish/%E5%9B%9E%E9%94%85%E8%82%89/#_1","text":"","title":"\u56de\u9505\u8089\u7684\u505a\u6cd5"},{"location":"dishes/meat_dish/%E5%9B%9E%E9%94%85%E8%82%89/#_2","text":"\u4e94\u82b1\u8089 \u5c0f\u8471 \u751f\u59dc \u9752\u7ea2\u6912 \u849c\u82d7 \u6599\u9152 \u8c46\u74e3\u9171 \u751f\u62bd\u9171\u6cb9 \u5473\u7cbe","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/meat_dish/%E5%9B%9E%E9%94%85%E8%82%89/#_3","text":"\u4e94\u82b1\u8089\u7684\u7528\u91cf\u4e3a 0.5 \u65a4/\u7537\u4eba 0.3 \u65a4/\u5973\u4eba \uff08\u6b63\u5b97\u56de\u9505\u8089\u4f7f\u7528\u4e8c\u5200\u8089[\u4fd7\u79f0\uff1a\u81c0\u5c16]\u5236\u4f5c\uff0c\u8089\u8d28\u575a\u5b9e\uff0c\u80a5\u7626\u5408\u9002\uff09 \u5c0f\u8471 2 \u68f5 \u751f\u59dc 10-40g \u9752\u7ea2\u6912\u9002\u91cf\uff08\u6839\u636e\u53d7\u8fa3\u7a0b\u5ea6\u9009\u62e9, 0-30g\uff09 \u849c\u82d7 1 \u628a \u6599\u9152 1 \u52fa (5ml) \u8c46\u74e3\u9171 2 \u52fa (10ml) \u5473\u7cbe 1 \u52fa (5ml) \u751f\u62bd 1 \u52fa (5ml)","title":"\u8ba1\u7b97"},{"location":"dishes/meat_dish/%E5%9B%9E%E9%94%85%E8%82%89/#_4","text":"","title":"\u64cd\u4f5c"},{"location":"dishes/meat_dish/%E5%9B%9E%E9%94%85%E8%82%89/#_5","text":"\u9505\u70e7\u70ed\uff0c\u7528\u624b\u5c06\u4e94\u82b1\u8089\u7d27\u7d27\u538b\u5728\u9505\u4e0a\u7099\u76ae\u3002\u8fd9\u4e00\u6b65\u662f\u4e3a\u4e86\u5904\u7406\u732a\u76ae\u4e0a\u7684\u6c57\u817a\uff08\u6216\u8005\u4e70\u8089\u7684\u65f6\u5019\u8ba9\u5e08\u5085\u70e7\u4e00\u4e0b\u76ae\uff0c\u559c\u6b22\u6c57\u817a\u7684\u53ef\u4ee5\u65e0\u89c6\uff09 \u7528\u94a2\u4e1d\u7403\u628a\u76ae\u6d17\u5e72\u51c0\uff0c\u4e0d\u6d17\u5e72\u51c0\u4f1a\u6709\u82e6\u5473 \u5c06\u4e94\u82b1\u8089\u653e\u5165\u9505\u4e2d\uff0c\u653e\u5165\u80fd\u6df9\u6ca1\u4e94\u82b1\u8089\u7684\u6c34\uff0c\u653e\u5165\u751f\u59dc\u7247\uff0c\u6599\u9152\u548c\u5c0f\u8471\uff08\u53d6 2 \u68f5\u5c0f\u8471\u6253\u7ed3\uff09 \u5f00\u5927\u706b\u716e\uff0c\u6c34\u5f00\u540e\u6487\u53bb\u6d6e\u6cab\uff0c\u6c34\u5f00\u540e\u7ee7\u7eed\u716e 15 \u5206\u949f\uff0c\u716e\u81f3\u7626\u8089\u90e8\u5206\u53ef\u4ee5\u7528\u7b77\u5b50\u8f7b\u677e\u523a\u7a7f","title":"\u4e94\u82b1\u8089\u4e00\u6bb5\u5904\u7406"},{"location":"dishes/meat_dish/%E5%9B%9E%E9%94%85%E8%82%89/#_6","text":"\u9752\u7ea2\u6912\u5207\u5708 \u849c\u82d7\u5207\u6bb5 \u751f\u59dc\u5207\u5c0f\u8584\u7247 \u5c06\u4e00\u52fa\u8c46\u74e3\uff08\u6b64\u65f6\u8fd8\u5269\u4e00\u52fa\uff09\u548c\u751f\u62bd\u63d0\u524d\u6df7\u5408","title":"\u914d\u83dc\u5904\u7406"},{"location":"dishes/meat_dish/%E5%9B%9E%E9%94%85%E8%82%89/#_7","text":"\u5c06\u716e\u719f\u7684\u4e94\u82b1\u8089\u635e\u51fa\u653e\u5165\u51b7\u6c34\u667e\u51c9 \u64e6\u5e72\u4e94\u82b1\u8089\u7684\u6c34\uff0c\u5207\u6210\u4e0a\u80a5\u4e0b\u7626\u7684 2mm \u5de6\u53f3\u7684\u8584\u7247\uff08\u5207\u539a\u4e86\u53e3\u611f\u4e0d\u597d\uff0c\u800c\u4e14\u5f88\u6cb9\uff09","title":"\u4e94\u82b1\u8089\u4e8c\u6bb5\u5904\u7406"},{"location":"dishes/meat_dish/%E5%9B%9E%E9%94%85%E8%82%89/#_8","text":"\u9505\u70e7\u70ed\uff0c\u653e\u5165\u5c11\u8bb8\uff08\u5c11\u8bb8\uff09\u5e95\u6cb9\u6ed1\u9505 \u653e\u5165\u4e94\u82b1\u8089\u7178\u7092\u81f3\u80a5\u8089\u900f\u660e\uff0c\u8089\u7247\u5fae\u5377\uff08\u6b32\u79f0\u8d77\u706f\u76cf\u7a9d\uff09\uff0c\u4e8c\u5200\u8089\u6548\u679c\u6700\u4f73\u3002 \u5012\u5165\u8c46\u74e3\u751f\u62bd\u6df7\u5408\u7269\uff0c\u4e00\u52fa\u5473\u7cbe\u7ffb\u7092 15 \u79d2 \u653e\u5165\u9752\u7ea2\u6912\u5708\u548c\u5c0f\u59dc\u7247\uff0c\u653e\u5165\u53e6\u4e00\u52fa\u8c46\u74e3\u7ffb\u7092 30 \u79d2 \u653e\u5165\u849c\u82d7\u7ffb\u7092 60 \u79d2 \u51fa\u9505 > \u64cd\u4f5c\u8981\u8fc5\u901f\uff0c\u5c0f\u5fc3\u7cca\u9505","title":"\u5f00\u59cb\u7092\u8089"},{"location":"dishes/meat_dish/%E5%9B%9E%E9%94%85%E8%82%89/#_9","text":"\u4e0d\u559c\u6b22\u849c\u82d7\u53ef\u4ee5\u6362\u6210\u6d0b\u8471\u6216\u8005\u5176\u4ed6\u852c\u83dc\uff0c\u4f46\u662f\u8981\u6ce8\u610f\u852c\u83dc\u7684\u6613\u719f\u7a0b\u5ea6\u5c06\u852c\u83dc\u63d0\u524d\u7092\u81f3\uff0c\u4e0d\u7136\u4f1a\u51fa\u73b0\u852c\u83dc\u534a\u751f\u4e0d\u719f\u7684\u60c5\u51b5 \u5982\u679c\u56de\u9505\u8089\u6bd4\u8f83\u5927\u5757\u53ef\u4ee5\u5207\u6210 5 \u5398\u7c73\u89c1\u65b9\u7684\u5757\uff0c\u4e94\u82b1\u8089\u716e\u81f3\u7b77\u5b50\u7a0d\u5fae\u7528\u529b\u5373\u53ef\u63d2\u5165\u732a\u76ae\u5373\u53ef \u56de\u9505\u8089\u8fc7\u51b7\u6c34\u667e\u51c9\u540e\u8089\u8d28\u4f1a\u66f4\u7d27\u81f4 \u56de\u9505\u8089\u64e6\u5e72\u6c34\u662f\u4e3a\u4e86\u907f\u514d\u7092\u81f3\u7684\u65f6\u5019\u7206\u6cb9\u6e85\u4f24 \u56de\u9505\u8089\u5207\u8bb0\u4e0d\u8981\u5207\u539a\u4e86\uff0c\u4e0d\u7136\u5f88\u817b \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/meat_dish/%E5%AD%9C%E7%84%B6%E7%89%9B%E8%82%89/","text":"\u5b5c\u7136\u725b\u8089\u7684\u505a\u6cd5 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u725b\u67f3\u6216\u725b\u80a9\u8089 \u9752\u6912 \u5b5c\u7136\uff08\u9897\u7c92>\u7c89\uff09 \u5c0f\u7c73\u6912 \u751f\u62bd\u9171\u6cb9 \u6dc0\u7c89 \u6cb9 \u76d0 \u8471 \u6363\u836f\u7f50\uff08\u53ef\u9009\uff09 \u8ba1\u7b97 \u725b\u8089\u7528\u91cf\u4e3a 250 g/\u4eba \u9752\u6912\u7528\u91cf\u4e3a 2 \u9897/\u4eba, \u6bcf\u9897 100g \u5b5c\u7136\u7528\u91cf\u4e3a 20 g/\u4eba \u5c0f\u7c73\u6912\u7528\u91cf\u4e3a 3 \u9897/\u4eba, \u6bcf\u9897 5g \u751f\u62bd\u9171\u6cb9\u7528\u91cf\u4e3a 20 ml/\u4eba \u6dc0\u7c89\u7528\u91cf\u4e3a 10g/\u4eba \u6cb9\u7528\u91cf\u4e3a 15ml/\u4eba \u76d0\u91cf\u7528\u91cf\u4e3a 3 g/\u4eba \u8471\u7528\u91cf\u4e3a 1 \u6839/\u4eba, \u6bcf\u9897 20g \u4f7f\u7528\u4e0a\u8ff0\u6761\u4ef6\uff0c\u8ba1\u7b97\u51fa\u8ba1\u5212\u4f7f\u7528\u7684\u539f\u6750\u6599\u6bd4\u4f8b\uff0c\u4f9d\u53e3\u5473\u8c03\u6574\u3002 \u64cd\u4f5c \u9996\u5148\u5c06\u5c0f\u7c73\u6912\u5207\u788e\uff0c\u548c\u5b5c\u7136\u7c92\u4e00\u8d77\u653e\u5165\u6363\u836f\u7f50\u6363\u788e\u6210\u9897\u7c92\uff0c\u8fd9\u6837\u66f4\u5165\u5473\u3002\u5982\u679c\u65f6\u95f4\u7d27\u5f20\u53ef\u8df3\u8fc7\u6363\u788e\u6b65\u9aa4 \u9752\u6912\u5207\u5934\u53bb\u7c7d\uff08\u559c\u6b22\u8fa3\u7684\u53ef\u4e0d\u53bb\uff09\uff0c\u5207\u6210\u4e1d\u3002\u8471\u5207\u6bb5\u3002 \u725b\u8089\u63d0\u524d\u89e3\u51bb\uff0c\u8fc7\u4e00\u8fb9\u6c34\u6d17\u5e72\u51c0\uff0c\u667e\u5e72\u6216\u7528\u53a8\u7528\u7eb8\u5438\u5e72\uff0c\u5c06\u725b\u8089\u987a\u7740\u7eb9\u7406\u5207\u6210\u7247 \u7136\u540e\u8fdb\u884c\u814c\u8089\uff0c\u52a0\u5165\u751f\u62bd\uff0c\u6dc0\u7c89\uff0c\u6cb9\uff0c\u5747\u5300\u6405\u62cc\uff0c\u9759\u6b62 30 \u5206\u949f\u3002\u814c\u8089\u65b9\u6cd5\u4e5f\u53ef\u53c2\u8003 \u5b66\u4e60\u814c \u70ed\u9505\u4e0b\u6cb9\uff0c\u653e\u5165\u8471\uff0c\u7206\u51fa\u9999\u5473\u540e\u653e\u5165\u814c\u597d\u7684\u725b\u8089\u7178\u7092 \u725b\u8089\u53d8\u8272\u540e\u5747\u5300\u653e\u5165\u5b5c\u7136\u8fa3\u6912\u9897\u7c92\u5e76\u7092\u719f \u7136\u540e\u4e0b\u5165\u9752\u6912\u4e1d\uff0c\u65ad\u751f\u540e\u653e\u76d0 \u5927\ud83d\udd25\u7092 1 \u5206\u949f\u540e\u5173\u706b\u518d\u7ffb\u7092 30 \u79d2\u4fdd\u8bc1\u53d7\u70ed\u5747\u5300\u5373\u53ef\u51fa\u9505 \u9644\u52a0\u5185\u5bb9 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u5b5c\u7136\u725b\u8089"},{"location":"dishes/meat_dish/%E5%AD%9C%E7%84%B6%E7%89%9B%E8%82%89/#_1","text":"","title":"\u5b5c\u7136\u725b\u8089\u7684\u505a\u6cd5"},{"location":"dishes/meat_dish/%E5%AD%9C%E7%84%B6%E7%89%9B%E8%82%89/#_2","text":"\u725b\u67f3\u6216\u725b\u80a9\u8089 \u9752\u6912 \u5b5c\u7136\uff08\u9897\u7c92>\u7c89\uff09 \u5c0f\u7c73\u6912 \u751f\u62bd\u9171\u6cb9 \u6dc0\u7c89 \u6cb9 \u76d0 \u8471 \u6363\u836f\u7f50\uff08\u53ef\u9009\uff09","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/meat_dish/%E5%AD%9C%E7%84%B6%E7%89%9B%E8%82%89/#_3","text":"\u725b\u8089\u7528\u91cf\u4e3a 250 g/\u4eba \u9752\u6912\u7528\u91cf\u4e3a 2 \u9897/\u4eba, \u6bcf\u9897 100g \u5b5c\u7136\u7528\u91cf\u4e3a 20 g/\u4eba \u5c0f\u7c73\u6912\u7528\u91cf\u4e3a 3 \u9897/\u4eba, \u6bcf\u9897 5g \u751f\u62bd\u9171\u6cb9\u7528\u91cf\u4e3a 20 ml/\u4eba \u6dc0\u7c89\u7528\u91cf\u4e3a 10g/\u4eba \u6cb9\u7528\u91cf\u4e3a 15ml/\u4eba \u76d0\u91cf\u7528\u91cf\u4e3a 3 g/\u4eba \u8471\u7528\u91cf\u4e3a 1 \u6839/\u4eba, \u6bcf\u9897 20g \u4f7f\u7528\u4e0a\u8ff0\u6761\u4ef6\uff0c\u8ba1\u7b97\u51fa\u8ba1\u5212\u4f7f\u7528\u7684\u539f\u6750\u6599\u6bd4\u4f8b\uff0c\u4f9d\u53e3\u5473\u8c03\u6574\u3002","title":"\u8ba1\u7b97"},{"location":"dishes/meat_dish/%E5%AD%9C%E7%84%B6%E7%89%9B%E8%82%89/#_4","text":"\u9996\u5148\u5c06\u5c0f\u7c73\u6912\u5207\u788e\uff0c\u548c\u5b5c\u7136\u7c92\u4e00\u8d77\u653e\u5165\u6363\u836f\u7f50\u6363\u788e\u6210\u9897\u7c92\uff0c\u8fd9\u6837\u66f4\u5165\u5473\u3002\u5982\u679c\u65f6\u95f4\u7d27\u5f20\u53ef\u8df3\u8fc7\u6363\u788e\u6b65\u9aa4 \u9752\u6912\u5207\u5934\u53bb\u7c7d\uff08\u559c\u6b22\u8fa3\u7684\u53ef\u4e0d\u53bb\uff09\uff0c\u5207\u6210\u4e1d\u3002\u8471\u5207\u6bb5\u3002 \u725b\u8089\u63d0\u524d\u89e3\u51bb\uff0c\u8fc7\u4e00\u8fb9\u6c34\u6d17\u5e72\u51c0\uff0c\u667e\u5e72\u6216\u7528\u53a8\u7528\u7eb8\u5438\u5e72\uff0c\u5c06\u725b\u8089\u987a\u7740\u7eb9\u7406\u5207\u6210\u7247 \u7136\u540e\u8fdb\u884c\u814c\u8089\uff0c\u52a0\u5165\u751f\u62bd\uff0c\u6dc0\u7c89\uff0c\u6cb9\uff0c\u5747\u5300\u6405\u62cc\uff0c\u9759\u6b62 30 \u5206\u949f\u3002\u814c\u8089\u65b9\u6cd5\u4e5f\u53ef\u53c2\u8003 \u5b66\u4e60\u814c \u70ed\u9505\u4e0b\u6cb9\uff0c\u653e\u5165\u8471\uff0c\u7206\u51fa\u9999\u5473\u540e\u653e\u5165\u814c\u597d\u7684\u725b\u8089\u7178\u7092 \u725b\u8089\u53d8\u8272\u540e\u5747\u5300\u653e\u5165\u5b5c\u7136\u8fa3\u6912\u9897\u7c92\u5e76\u7092\u719f \u7136\u540e\u4e0b\u5165\u9752\u6912\u4e1d\uff0c\u65ad\u751f\u540e\u653e\u76d0 \u5927\ud83d\udd25\u7092 1 \u5206\u949f\u540e\u5173\u706b\u518d\u7ffb\u7092 30 \u79d2\u4fdd\u8bc1\u53d7\u70ed\u5747\u5300\u5373\u53ef\u51fa\u9505","title":"\u64cd\u4f5c"},{"location":"dishes/meat_dish/%E5%AD%9C%E7%84%B6%E7%89%9B%E8%82%89/#_5","text":"\u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/meat_dish/%E5%B0%8F%E7%82%92%E8%82%89/","text":"\u5c0f\u7092\u8089\u7684\u505a\u6cd5 \u5fc5\u5907\u539f\u6599\u5de5\u5177 \u4e94\u82b1\u8089 \u671d\u5929\u6912 \u5c0f\u7c73\u6912 \u8c46\u8c49 \u8c46\u74e3\u9171 \u8001\u62bd \u6dc0\u7c89 \u76d0 \u8471 \u849c \u8ba1\u7b97\u516c\u5f0f \u6bcf\u4efd\uff1a \u4e94\u82b1\u8089 500g \u671d\u5929\u6912 4 \u6761 \u5c0f\u7c73\u6912 4 \u9897 \u8c46\u8c49 10g\uff0c\u6839\u636e\u4e2a\u4eba\u53e3\u5473\u52a0\u51cf \u00b15g \u8c46\u74e3\u9171 10g\uff0c\u6839\u636e\u4e2a\u4eba\u53e3\u5473\u52a0\u51cf \u00b15g \u8001\u62bd 10ml \u6dc0\u7c89 10g \u76d0 1-2g \u8471 0.5-1 \u6839 \u849c 2 \u74e3 \u98df\u7528\u6cb9 15ml \u64cd\u4f5c\u6b65\u9aa4 \u4e94\u82b1\u8089\u5207\u7247 \u628a\u8089\u653e\u5165\u5668\u76bf\u5185\uff0c\u52a0\u5165\u6dc0\u7c89\u3001\u8001\u62bd\u3001\u76d0\u6405\u62cc\u814c\u5236\u534a\u5c0f\u65f6 \u8471\u5207\u6bb5 \u5c0f\u7c73\u6912\u3001\u671d\u5929\u6912\u659c\u5200\u5207\u597d \u70ed\u9505\u3001\u5012\u6cb9 \u6cb9\u70ed\u540e\u52a0\u5165\u4e94\u82b1\u8089\u7178\u7092\u3002\u7092\u81f3\u53d8\u8272\u540e\u76db\u51fa\u6765 \u5411\u9505\u4e2d\u52a0\u849c\uff0c\u7178\u51fa\u9999\u5473\uff0c\u52a0\u5165\u8c46\u8c49\uff0c\u7ffb\u7092\u5747\u5300 \u52a0\u5165\u8c46\u74e3\u9171\u7ffb\u7092\u5747\u5300 \u52a0\u5165\u7092\u597d\u7684\u4e94\u82b1\u8089\u7ee7\u7eed\u7684\u7ffb\u7092\u5747\u5300 \u52a0\u5165\u5c0f\u7c73\u6912\u3001\u671d\u5929\u6912\u3001\u8471\u6bb5\u7ffb\u7092 40 \u79d2 \u51fa\u9505\u3002 \u9644\u52a0\u5185\u5bb9 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u5c0f\u7092\u8089"},{"location":"dishes/meat_dish/%E5%B0%8F%E7%82%92%E8%82%89/#_1","text":"","title":"\u5c0f\u7092\u8089\u7684\u505a\u6cd5"},{"location":"dishes/meat_dish/%E5%B0%8F%E7%82%92%E8%82%89/#_2","text":"\u4e94\u82b1\u8089 \u671d\u5929\u6912 \u5c0f\u7c73\u6912 \u8c46\u8c49 \u8c46\u74e3\u9171 \u8001\u62bd \u6dc0\u7c89 \u76d0 \u8471 \u849c","title":"\u5fc5\u5907\u539f\u6599\u5de5\u5177"},{"location":"dishes/meat_dish/%E5%B0%8F%E7%82%92%E8%82%89/#_3","text":"\u6bcf\u4efd\uff1a \u4e94\u82b1\u8089 500g \u671d\u5929\u6912 4 \u6761 \u5c0f\u7c73\u6912 4 \u9897 \u8c46\u8c49 10g\uff0c\u6839\u636e\u4e2a\u4eba\u53e3\u5473\u52a0\u51cf \u00b15g \u8c46\u74e3\u9171 10g\uff0c\u6839\u636e\u4e2a\u4eba\u53e3\u5473\u52a0\u51cf \u00b15g \u8001\u62bd 10ml \u6dc0\u7c89 10g \u76d0 1-2g \u8471 0.5-1 \u6839 \u849c 2 \u74e3 \u98df\u7528\u6cb9 15ml","title":"\u8ba1\u7b97\u516c\u5f0f"},{"location":"dishes/meat_dish/%E5%B0%8F%E7%82%92%E8%82%89/#_4","text":"\u4e94\u82b1\u8089\u5207\u7247 \u628a\u8089\u653e\u5165\u5668\u76bf\u5185\uff0c\u52a0\u5165\u6dc0\u7c89\u3001\u8001\u62bd\u3001\u76d0\u6405\u62cc\u814c\u5236\u534a\u5c0f\u65f6 \u8471\u5207\u6bb5 \u5c0f\u7c73\u6912\u3001\u671d\u5929\u6912\u659c\u5200\u5207\u597d \u70ed\u9505\u3001\u5012\u6cb9 \u6cb9\u70ed\u540e\u52a0\u5165\u4e94\u82b1\u8089\u7178\u7092\u3002\u7092\u81f3\u53d8\u8272\u540e\u76db\u51fa\u6765 \u5411\u9505\u4e2d\u52a0\u849c\uff0c\u7178\u51fa\u9999\u5473\uff0c\u52a0\u5165\u8c46\u8c49\uff0c\u7ffb\u7092\u5747\u5300 \u52a0\u5165\u8c46\u74e3\u9171\u7ffb\u7092\u5747\u5300 \u52a0\u5165\u7092\u597d\u7684\u4e94\u82b1\u8089\u7ee7\u7eed\u7684\u7ffb\u7092\u5747\u5300 \u52a0\u5165\u5c0f\u7c73\u6912\u3001\u671d\u5929\u6912\u3001\u8471\u6bb5\u7ffb\u7092 40 \u79d2 \u51fa\u9505\u3002","title":"\u64cd\u4f5c\u6b65\u9aa4"},{"location":"dishes/meat_dish/%E5%B0%8F%E7%82%92%E8%82%89/#_5","text":"\u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/meat_dish/%E5%B0%96%E6%A4%92%E7%82%92%E7%89%9B%E8%82%89/","text":"\u5c16\u6912\u7092\u725b\u8089\u7684\u505a\u6cd5 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u725b\u8089 \u8471\u3001\u59dc\u3001\u849c \u5c16\u6912 \u9171\u6cb9 \u76d0 \u7cd6 \u8ba1\u7b97 \u725b\u8089\u7528\u91cf\u4e3a 250 g/\u4eba \u8471\u7684\u7528\u91cf\u4e3a 0.5 \u6839/\u4eba \u59dc\u7684\u7528\u91cf\u4e3a 1 \u4e2a/\u4eba \u76d0\u7684\u7528\u91cf\u4e3a 3 g/\u4eba\uff081 \u52fa\uff09 \u7cd6\u7684\u7528\u91cf\u4e3a 1.5 g/\u4eba\uff080.5 \u52fa\uff09 \u9171\u6cb9\u7684\u7528\u91cf\u4e3a 9 g/\u4eba\uff083 \u52fa\uff09 \u4f7f\u7528\u4e0a\u8ff0\u6761\u4ef6\uff0c\u8ba1\u7b97\u51fa\u8ba1\u5212\u4f7f\u7528\u7684\u539f\u6750\u6599\u6bd4\u4f8b\u3002 \u64cd\u4f5c \u914d\u83dc\u5904\u7406 \u849c\u5241\u6210\u849c\u6ce5 \u8471\u5207\u6bb5 \u59dc\u5207\u6210\u59dc\u7247 \u5c16\u6912\u5207\u6210\u6bb5 \u725b\u8089\u7684\u9884\u5904\u7406 \u725b\u8089\u653e\u5165\u7897\u4e2d \u52a0\u59dc\u3001\u76d0\u3001\u9171\u6cb9\u3001\u7cd6\u8fdb\u884c\u814c\u5236 30-40 \u5206\u949f \u814c\u5236\u5b8c\u59dc\u53ef\u4ee5\u53bb\u6389 \u7092\u719f \u51b7\u6cb9\u4e0b\u9505\uff0c\u5f85\u6cb9\u53d8\u70ed\u81f3\u5076\u6709\u6c14\u6ce1 \u52a0\u5165\u849c\u6ce5 \u849c\u6ce5\u53d8\u91d1\u9ec4\u540e\u52a0\u5165\u5c16\u6912 \u5f85\u5c16\u6912\u8868\u76ae\u5fae\u76b1\uff0c\u52a0\u5165\u814c\u5236\u597d\u7684\u725b\u8089\u7ffb\u7092 \u7ffb\u7092\u53d8\u719f\u4e4b\u524d\u52a0\u5165\u8471\uff0c\u7ee7\u7eed\u7ffb\u7092 \u7ffb\u7092\u81f3\u725b\u8089\u53d8\u719f\uff0c\u5173\u706b\u51fa\u9505 \u9644\u52a0\u5185\u5bb9 \u814c\u5236\u53ef\u4ee5\u52a0\u5165\u5c0f\u82cf\u6253\u4f7f\u725b\u8089\u53d8\u5ae9\uff0c\u725b\u8089\u82cf\u6253\u6bd4\u4f8b\u4e3a 500g\uff1a3g\u3002 \u814c\u5236\u7684\u65f6\u5019\u59dc\u7247\u53ef\u7528\u6599\u9152\u4ee3\u66ff\uff0c\u6599\u9152\u7684\u7528\u91cf\u4e3a 3 g/\u4eba\uff081 \u52fa\uff09 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u5c16\u6912\u7092\u725b\u8089"},{"location":"dishes/meat_dish/%E5%B0%96%E6%A4%92%E7%82%92%E7%89%9B%E8%82%89/#_1","text":"","title":"\u5c16\u6912\u7092\u725b\u8089\u7684\u505a\u6cd5"},{"location":"dishes/meat_dish/%E5%B0%96%E6%A4%92%E7%82%92%E7%89%9B%E8%82%89/#_2","text":"\u725b\u8089 \u8471\u3001\u59dc\u3001\u849c \u5c16\u6912 \u9171\u6cb9 \u76d0 \u7cd6","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/meat_dish/%E5%B0%96%E6%A4%92%E7%82%92%E7%89%9B%E8%82%89/#_3","text":"\u725b\u8089\u7528\u91cf\u4e3a 250 g/\u4eba \u8471\u7684\u7528\u91cf\u4e3a 0.5 \u6839/\u4eba \u59dc\u7684\u7528\u91cf\u4e3a 1 \u4e2a/\u4eba \u76d0\u7684\u7528\u91cf\u4e3a 3 g/\u4eba\uff081 \u52fa\uff09 \u7cd6\u7684\u7528\u91cf\u4e3a 1.5 g/\u4eba\uff080.5 \u52fa\uff09 \u9171\u6cb9\u7684\u7528\u91cf\u4e3a 9 g/\u4eba\uff083 \u52fa\uff09 \u4f7f\u7528\u4e0a\u8ff0\u6761\u4ef6\uff0c\u8ba1\u7b97\u51fa\u8ba1\u5212\u4f7f\u7528\u7684\u539f\u6750\u6599\u6bd4\u4f8b\u3002","title":"\u8ba1\u7b97"},{"location":"dishes/meat_dish/%E5%B0%96%E6%A4%92%E7%82%92%E7%89%9B%E8%82%89/#_4","text":"","title":"\u64cd\u4f5c"},{"location":"dishes/meat_dish/%E5%B0%96%E6%A4%92%E7%82%92%E7%89%9B%E8%82%89/#_5","text":"\u849c\u5241\u6210\u849c\u6ce5 \u8471\u5207\u6bb5 \u59dc\u5207\u6210\u59dc\u7247 \u5c16\u6912\u5207\u6210\u6bb5","title":"\u914d\u83dc\u5904\u7406"},{"location":"dishes/meat_dish/%E5%B0%96%E6%A4%92%E7%82%92%E7%89%9B%E8%82%89/#_6","text":"\u725b\u8089\u653e\u5165\u7897\u4e2d \u52a0\u59dc\u3001\u76d0\u3001\u9171\u6cb9\u3001\u7cd6\u8fdb\u884c\u814c\u5236 30-40 \u5206\u949f \u814c\u5236\u5b8c\u59dc\u53ef\u4ee5\u53bb\u6389","title":"\u725b\u8089\u7684\u9884\u5904\u7406"},{"location":"dishes/meat_dish/%E5%B0%96%E6%A4%92%E7%82%92%E7%89%9B%E8%82%89/#_7","text":"\u51b7\u6cb9\u4e0b\u9505\uff0c\u5f85\u6cb9\u53d8\u70ed\u81f3\u5076\u6709\u6c14\u6ce1 \u52a0\u5165\u849c\u6ce5 \u849c\u6ce5\u53d8\u91d1\u9ec4\u540e\u52a0\u5165\u5c16\u6912 \u5f85\u5c16\u6912\u8868\u76ae\u5fae\u76b1\uff0c\u52a0\u5165\u814c\u5236\u597d\u7684\u725b\u8089\u7ffb\u7092 \u7ffb\u7092\u53d8\u719f\u4e4b\u524d\u52a0\u5165\u8471\uff0c\u7ee7\u7eed\u7ffb\u7092 \u7ffb\u7092\u81f3\u725b\u8089\u53d8\u719f\uff0c\u5173\u706b\u51fa\u9505","title":"\u7092\u719f"},{"location":"dishes/meat_dish/%E5%B0%96%E6%A4%92%E7%82%92%E7%89%9B%E8%82%89/#_8","text":"\u814c\u5236\u53ef\u4ee5\u52a0\u5165\u5c0f\u82cf\u6253\u4f7f\u725b\u8089\u53d8\u5ae9\uff0c\u725b\u8089\u82cf\u6253\u6bd4\u4f8b\u4e3a 500g\uff1a3g\u3002 \u814c\u5236\u7684\u65f6\u5019\u59dc\u7247\u53ef\u7528\u6599\u9152\u4ee3\u66ff\uff0c\u6599\u9152\u7684\u7528\u91cf\u4e3a 3 g/\u4eba\uff081 \u52fa\uff09 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/meat_dish/%E6%B0%B4%E7%85%AE%E8%82%89%E7%89%87/","text":"\u6c34\u716e\u8089\u7247\u7684\u505a\u6cd5 \u6c34\u716e\u8089\u7247\u9ebb\u8fa3\u9c9c\u9999\uff0c\u9002\u5408\u5e72\u996d\uff0c\u4f46\u662f\u505a\u6cd5\u7a0d\u5fae\u6709\u70b9\u9ebb\u70e6\u3002\u96be\u5ea6\u4e3b\u8981\u5728\u8089\u6ed1\u5ae9\uff0c\u521d\u5b66\u8005\u4e00\u822c\u9700\u8981 1 - 2 \u5c0f\u65f6\u5b8c\u6210\u3002\u5e72\u996d\u4eba\uff0c\u4e00\u5207\u90fd\u503c~ \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u732a\u91cc\u810a\u8089 \u98df\u7528\u76d0 \u80e1\u6912\u7c89 \u751f\u62bd\u9171\u6cb9 \u6599\u9152 \u9e21\u86cb\u6e05 \u571f\u8c46\u6dc0\u7c89 \u690d\u7269\u6cb9 \u8c46\u82bd \u51e4\u5c3e \u82b9\u83dc \u849c\u82d7 \u5927\u849c \u751f\u59dc \u7ea2\u6ce1\u6912 \u9752\u82b1\u6912 \u5e72\u8fa3\u6912 \u7ea2\u6cb9\u8c46\u74e3 \u9e21\u7cbe \u767d\u7802\u7cd6 \u5c0f\u8471 \u83dc\u7c7d\u6cb9 \u8ba1\u7b97 \u91cc\u810a\u8089\u7684\u7528\u91cf\u4e3a 300g \u5c0f\u8471 2 \u6839 \u751f\u59dc 10g \u5927\u849c 20g \u7ea2\u6ce1\u6912 20g\uff08\u6839\u636e\u53d7\u8fa3\u7a0b\u5ea6\u9009\u62e9 0-40 g\uff09 \u849c\u82d7 2 \u6839 \u82b9\u83dc 3 \u6839 \u7ea2\u6cb9\u74e3\u9171 1 \u52fa \u9e21\u7cbe 1.5g \u751f\u62bd\u9171\u6cb9 5g \u98df\u7528\u76d0 5g \u80e1\u6912\u7c89 2g \u6599\u9152 3g \u9e21\u86cb\u6e05 1 \u4e2a \u571f\u8c46\u6dc0\u7c89 7g \u690d\u7269\u6cb9 280g\uff08\u6839\u636e\u60c5\u51b5\u9009\u62e9\uff0c\u60f3\u5403\u91cd\u6cb9\u5c31\u591a\u52a0 100g\uff09 \u83dc\u7c7d\u6cb9 200g\uff08\u6839\u636e\u60c5\u51b5\u9009\u62e9\uff0c\u60f3\u5403\u91cd\u6cb9\u5c31\u591a\u52a0 100g\uff09 \u7eff\u8c46\u82bd 100g \u51e4\u5c3e 1 \u6839 \u767d\u7802\u7cd6 1g \u5c0f\u7c73\u8fa3\u5e72\u8fa3\u6912 20g\uff08\u6839\u636e\u53d7\u8fa3\u7a0b\u5ea6\u9009\u62e9 0-40g\uff09 \u9752\u82b1\u6912 5g\uff08\u6839\u636e\u60c5\u51b5\u9009\u62e9\uff0c\u60f3\u5403\u9ebb\u5c31\u591a 5g\uff09 \u64cd\u4f5c \u91cc\u810a\u8089\u6539\u5200\u6210\u5c0f\u5757\uff0c\u518d\u5207\u6210 2 \u6beb\u7c73\u8584\u7247\uff08\u53ef\u6839\u636e\u81ea\u5df1\u7684\u53e3\u611f\u6539\u8fdb\uff09\uff0c\u653e\u5165\u7897\u4e2d\uff0c\u52a0\u5165\u6e05\u6c34\u6e05\u6d17\u4e24\u904d\u6765\u53bb\u9664\u8840\u6c34\u548c\u6742\u8d28\uff0c\u635e\u51fa\u6324\u5e72\u6c34\u5206\u5907\u7528\u3002 \u7897\u4e2d\u52a0\u5165\u98df\u7528\u76d0 1.5g\uff0c\u80e1\u6912\u7c89 1g\uff0c\u751f\u62bd\u9171\u6cb9 5g\uff0c\u6599\u9152 3g\uff0c\u7136\u540e\u671d\u7740\u4e00\u4e2a\u65b9\u5411\u6405\u62cc 2 \u5206\u949f\uff0c\u4f7f\u5176\u5165\u5473\u3002 \u53e6\u5916\u51c6\u5907\u4e00\u4e2a\u7897\uff0c\u52a0\u5165\u4e00\u4e2a\u9e21\u86cb\u6e05\uff0c\u52a0\u5165 7g \u571f\u8c46\u6dc0\u7c89\uff0c\u4e00\u4e2a\u65b9\u5411\u6405\u62cc\u5747\u5300\uff0c\u5012\u5165\u8089\u4e2d \u518d\u6b21\u4e00\u4e2a\u65b9\u5411\u6405\u62cc\u5747\u5300\uff08\u8089\u8868\u9762\u5c31\u5f62\u6210\u4e86\u6da6\u6ed1\u819c\uff0c\u8fd9\u6837\u4f1a\u4f7f\u8089\u66f4\u52a0\u9c9c\u5ae9\uff09 \u6700\u540e\u518d\u52a0\u5165 30g \u690d\u7269\u6cb9\u8f7b\u8f7b\u6405\u62cc\uff08\u9632\u6b62\u8089\u7247\u7c98\u8fde\uff09\u3002 \u7eff\u8c46\u82bd 100g\uff0c\u51e4\u5c3e 1 \u6839\uff08\u6539\u5200\u6210\u5c0f\u6761\uff09\uff0c\u82b9\u83dc 3 \u6839\u5207\u6210\u5c0f\u6bb5\uff0c\u849c\u82d7 2 \u6839\u62cd\u6563\u5207\u6210\u5c0f\u6bb5\u3002 \u5927\u849c 20g \u5241\u788e\uff0c\u751f\u59dc\u5c0f\u5757\u5241\u788e\uff0c\u7ea2\u6ce1\u6912 20g \u5241\u788e\u3002 \u5c0f\u7c73\u8fa3\u5e72\u8fa3\u6912 15g\uff0c\u9752\u82b1\u6912 3g\uff0c\u9505\u5185\u52a0\u5165\u6cb9\u6ed1\u9505\uff0c\u6cb9\u7a0d\u8bb8\u70ed\u4e86\u5c06\u591a\u4f59\u7684\u5012\u51fa\u5907\u7528\u7559 50g \u5e95\u6cb9\uff0c\u4e0b\u5165\u5e72\u8fa3\u6912\u3001\u82b1\u6912\uff0c\u5f00\u5c0f\u706b\u7092\u9999\uff0c\u5207\u8bb0\u4e0d\u8981\u7092\u7cca\uff08\u989c\u8272\u8981\u53d8\u9ed1\u5373\u53ef\uff09\uff0c\u5012\u51fa\u5728\u83dc\u677f\u4e0a\u5241\u7ec6\u3002 \u9505\u70e7\u70ed\uff0c\u653e\u5165 100g \u690d\u7269\u6cb9\u70e7\u81f3 6 \u6210\u70ed\uff0c\u52a0\u5165 2g \u9752\u82b1\u6912\u3001\u5e72\u8fa3\u6912\u7206\u9999\uff0c\u914d\u83dc\u4e0b\u9505\uff0c\u52a0\u5165 1g \u98df\u7528\u76d0\uff0c\u7092\u81f3\u65ad\u751f\uff0c\u76db\u5165\u7897\u4e2d\u57ab\u5e95\u5907\u7528\u3002 \u9505\u6d17\u5e72\u51c0\uff0c\u52a0\u5165 150g \u690d\u7269\u6cb9\u70e7\u81f3 6 \u6210\u70ed\uff0c\u52a0\u5165\u5236\u4f5c\u597d\u7684\u59dc\u849c\u7ea2\u6ce1\u6912\uff0c\u7206\u9999\u540e\u52a0\u5165\u8c46\u74e3 10g\uff0c\u5f00\u5c0f\u706b\u628a\u8c46\u74e3\u7206\u9999\u7092\u51fa\u7ea2\u6cb9\u5373\u53ef\u3002 \u52a0\u5165 800 \u6beb\u5347\u6e05\u6c34\uff08\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u9009\u62e9\uff09\uff0c\u5927\u706b\u70e7\u5f00\uff0c\u8f6c\u5c0f\u706b\u8c03\u5473\uff0c\u52a0\u5165\u98df\u7528\u76d0 2.5g\uff0c\u9e21\u7cbe 1.5g\uff0c1g \u767d\u7802\u7cd6\u63d0\u9c9c\uff0c1g \u80e1\u6912\u7c89\uff0c5g \u6c34\u6dc0\u7c89\uff08\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u9009\u62e9\uff09\u5c06\u6c64\u6c41\u6536\u6d53\u7a20\u4e00\u70b9\u3002 \u6c64\u6c41\u5f00\u540e\uff0c\u5f00\u5c0f\u706b\u5c06\u814c\u5236\u597d\u7684\u8089\u7247\u5206\u5f00\u4f9d\u6b21\u4e0b\u9505\uff0c\u7136\u540e\u5f00\u4e2d\u706b\u5c06\u8089\u7247\u70eb\u719f\uff0c\u7528\u9505\u94f2\u8f7b\u8f7b\u63a8\u52a8\u4e00\u4e0b\u907f\u514d\u7c98\u8fde\uff0c\u5f85\u6c64\u6c41\u70e7\u5f00\uff0c\u8089\u7247\u719f\u540e\u635e\u51fa\u653e\u5165\u7897\u4e2d\u914d\u83dc\u4e0a\uff0c\u518d\u5c06\u539f\u6c64\u5012\u5165\uff08\u4e0d\u8d85\u8fc7\u83dc\u54c1\uff09\u3002 \u7897\u4e2d\u5747\u5300\u6492\u4e0a\u5200\u53e3\u8fa3\u6912\u3001\u849c\u84c9\u548c\u8471\u82b1\u3002 \u9505\u6d17\u5e72\u51c0\uff0c\u52a0\u5165 200g \u83dc\u7c7d\u6cb9\uff0c\u70e7\u81f3 7 \u6210\u70ed\uff0c\u7136\u540e\u4e00\u6b21\u6027\u5747\u5300\u6cfc\u5728\u7897\u4e2d\u8089\u7247\u4e0a\uff08\u6ce8\u610f\u5b89\u5168\uff09\uff0c\u7f8e\u5473\u5b8c\u6210\u3002 \u9644\u52a0\u5185\u5bb9 \u57ab\u5e95\u7684\u852c\u83dc\u6839\u636e\u81ea\u5df1\u53e3\u5473\u9009\u62e9\uff08\u8611\u83c7\u3001\u767d\u83dc\u3001\u6cb9\u9ea6\u83dc\u7b49\uff09\u3002 \u5200\u53e3\u8fa3\u6912\u5236\u4f5c\u5acc\u9ebb\u70e6\u4e5f\u53ef\u4ee5\u76f4\u63a5\u7528\u5e72\u8fa3\u6912\u6bb5\u548c\u9752\u82b1\u6912\u4ee3\u66ff\u3002 \u7279\u522b\u6ce8\u610f\u8089\u7684\u814c\u5236\uff08\u6405\u62cc\u7684\u65f6\u5019\u671d\u7740\u4e00\u4e2a\u65b9\u5411\u3001\u8840\u6c34\u5904\u7406\u5e72\u51c0\uff09\uff0c\u4fdd\u8bc1\u8089\u6ed1\u5ae9\uff08\u9e21\u86cb\u6e05\u3001\u6dc0\u7c89\u6405\u62cc\u5747\u5300\uff09\u3002 \u6c34\u716e\u725b\u8089\u4e5f\u53ef\u4ee5\u6309\u7167\u8fd9\u4e2a\u505a\u6cd5\u3002 \u53c2\u8003\u8d44\u6599 \u7f8e\u98df\u4f5c\u5bb6\u738b\u521aR \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u6c34\u716e\u8089\u7247"},{"location":"dishes/meat_dish/%E6%B0%B4%E7%85%AE%E8%82%89%E7%89%87/#_1","text":"\u6c34\u716e\u8089\u7247\u9ebb\u8fa3\u9c9c\u9999\uff0c\u9002\u5408\u5e72\u996d\uff0c\u4f46\u662f\u505a\u6cd5\u7a0d\u5fae\u6709\u70b9\u9ebb\u70e6\u3002\u96be\u5ea6\u4e3b\u8981\u5728\u8089\u6ed1\u5ae9\uff0c\u521d\u5b66\u8005\u4e00\u822c\u9700\u8981 1 - 2 \u5c0f\u65f6\u5b8c\u6210\u3002\u5e72\u996d\u4eba\uff0c\u4e00\u5207\u90fd\u503c~","title":"\u6c34\u716e\u8089\u7247\u7684\u505a\u6cd5"},{"location":"dishes/meat_dish/%E6%B0%B4%E7%85%AE%E8%82%89%E7%89%87/#_2","text":"\u732a\u91cc\u810a\u8089 \u98df\u7528\u76d0 \u80e1\u6912\u7c89 \u751f\u62bd\u9171\u6cb9 \u6599\u9152 \u9e21\u86cb\u6e05 \u571f\u8c46\u6dc0\u7c89 \u690d\u7269\u6cb9 \u8c46\u82bd \u51e4\u5c3e \u82b9\u83dc \u849c\u82d7 \u5927\u849c \u751f\u59dc \u7ea2\u6ce1\u6912 \u9752\u82b1\u6912 \u5e72\u8fa3\u6912 \u7ea2\u6cb9\u8c46\u74e3 \u9e21\u7cbe \u767d\u7802\u7cd6 \u5c0f\u8471 \u83dc\u7c7d\u6cb9","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/meat_dish/%E6%B0%B4%E7%85%AE%E8%82%89%E7%89%87/#_3","text":"\u91cc\u810a\u8089\u7684\u7528\u91cf\u4e3a 300g \u5c0f\u8471 2 \u6839 \u751f\u59dc 10g \u5927\u849c 20g \u7ea2\u6ce1\u6912 20g\uff08\u6839\u636e\u53d7\u8fa3\u7a0b\u5ea6\u9009\u62e9 0-40 g\uff09 \u849c\u82d7 2 \u6839 \u82b9\u83dc 3 \u6839 \u7ea2\u6cb9\u74e3\u9171 1 \u52fa \u9e21\u7cbe 1.5g \u751f\u62bd\u9171\u6cb9 5g \u98df\u7528\u76d0 5g \u80e1\u6912\u7c89 2g \u6599\u9152 3g \u9e21\u86cb\u6e05 1 \u4e2a \u571f\u8c46\u6dc0\u7c89 7g \u690d\u7269\u6cb9 280g\uff08\u6839\u636e\u60c5\u51b5\u9009\u62e9\uff0c\u60f3\u5403\u91cd\u6cb9\u5c31\u591a\u52a0 100g\uff09 \u83dc\u7c7d\u6cb9 200g\uff08\u6839\u636e\u60c5\u51b5\u9009\u62e9\uff0c\u60f3\u5403\u91cd\u6cb9\u5c31\u591a\u52a0 100g\uff09 \u7eff\u8c46\u82bd 100g \u51e4\u5c3e 1 \u6839 \u767d\u7802\u7cd6 1g \u5c0f\u7c73\u8fa3\u5e72\u8fa3\u6912 20g\uff08\u6839\u636e\u53d7\u8fa3\u7a0b\u5ea6\u9009\u62e9 0-40g\uff09 \u9752\u82b1\u6912 5g\uff08\u6839\u636e\u60c5\u51b5\u9009\u62e9\uff0c\u60f3\u5403\u9ebb\u5c31\u591a 5g\uff09","title":"\u8ba1\u7b97"},{"location":"dishes/meat_dish/%E6%B0%B4%E7%85%AE%E8%82%89%E7%89%87/#_4","text":"\u91cc\u810a\u8089\u6539\u5200\u6210\u5c0f\u5757\uff0c\u518d\u5207\u6210 2 \u6beb\u7c73\u8584\u7247\uff08\u53ef\u6839\u636e\u81ea\u5df1\u7684\u53e3\u611f\u6539\u8fdb\uff09\uff0c\u653e\u5165\u7897\u4e2d\uff0c\u52a0\u5165\u6e05\u6c34\u6e05\u6d17\u4e24\u904d\u6765\u53bb\u9664\u8840\u6c34\u548c\u6742\u8d28\uff0c\u635e\u51fa\u6324\u5e72\u6c34\u5206\u5907\u7528\u3002 \u7897\u4e2d\u52a0\u5165\u98df\u7528\u76d0 1.5g\uff0c\u80e1\u6912\u7c89 1g\uff0c\u751f\u62bd\u9171\u6cb9 5g\uff0c\u6599\u9152 3g\uff0c\u7136\u540e\u671d\u7740\u4e00\u4e2a\u65b9\u5411\u6405\u62cc 2 \u5206\u949f\uff0c\u4f7f\u5176\u5165\u5473\u3002 \u53e6\u5916\u51c6\u5907\u4e00\u4e2a\u7897\uff0c\u52a0\u5165\u4e00\u4e2a\u9e21\u86cb\u6e05\uff0c\u52a0\u5165 7g \u571f\u8c46\u6dc0\u7c89\uff0c\u4e00\u4e2a\u65b9\u5411\u6405\u62cc\u5747\u5300\uff0c\u5012\u5165\u8089\u4e2d \u518d\u6b21\u4e00\u4e2a\u65b9\u5411\u6405\u62cc\u5747\u5300\uff08\u8089\u8868\u9762\u5c31\u5f62\u6210\u4e86\u6da6\u6ed1\u819c\uff0c\u8fd9\u6837\u4f1a\u4f7f\u8089\u66f4\u52a0\u9c9c\u5ae9\uff09 \u6700\u540e\u518d\u52a0\u5165 30g \u690d\u7269\u6cb9\u8f7b\u8f7b\u6405\u62cc\uff08\u9632\u6b62\u8089\u7247\u7c98\u8fde\uff09\u3002 \u7eff\u8c46\u82bd 100g\uff0c\u51e4\u5c3e 1 \u6839\uff08\u6539\u5200\u6210\u5c0f\u6761\uff09\uff0c\u82b9\u83dc 3 \u6839\u5207\u6210\u5c0f\u6bb5\uff0c\u849c\u82d7 2 \u6839\u62cd\u6563\u5207\u6210\u5c0f\u6bb5\u3002 \u5927\u849c 20g \u5241\u788e\uff0c\u751f\u59dc\u5c0f\u5757\u5241\u788e\uff0c\u7ea2\u6ce1\u6912 20g \u5241\u788e\u3002 \u5c0f\u7c73\u8fa3\u5e72\u8fa3\u6912 15g\uff0c\u9752\u82b1\u6912 3g\uff0c\u9505\u5185\u52a0\u5165\u6cb9\u6ed1\u9505\uff0c\u6cb9\u7a0d\u8bb8\u70ed\u4e86\u5c06\u591a\u4f59\u7684\u5012\u51fa\u5907\u7528\u7559 50g \u5e95\u6cb9\uff0c\u4e0b\u5165\u5e72\u8fa3\u6912\u3001\u82b1\u6912\uff0c\u5f00\u5c0f\u706b\u7092\u9999\uff0c\u5207\u8bb0\u4e0d\u8981\u7092\u7cca\uff08\u989c\u8272\u8981\u53d8\u9ed1\u5373\u53ef\uff09\uff0c\u5012\u51fa\u5728\u83dc\u677f\u4e0a\u5241\u7ec6\u3002 \u9505\u70e7\u70ed\uff0c\u653e\u5165 100g \u690d\u7269\u6cb9\u70e7\u81f3 6 \u6210\u70ed\uff0c\u52a0\u5165 2g \u9752\u82b1\u6912\u3001\u5e72\u8fa3\u6912\u7206\u9999\uff0c\u914d\u83dc\u4e0b\u9505\uff0c\u52a0\u5165 1g \u98df\u7528\u76d0\uff0c\u7092\u81f3\u65ad\u751f\uff0c\u76db\u5165\u7897\u4e2d\u57ab\u5e95\u5907\u7528\u3002 \u9505\u6d17\u5e72\u51c0\uff0c\u52a0\u5165 150g \u690d\u7269\u6cb9\u70e7\u81f3 6 \u6210\u70ed\uff0c\u52a0\u5165\u5236\u4f5c\u597d\u7684\u59dc\u849c\u7ea2\u6ce1\u6912\uff0c\u7206\u9999\u540e\u52a0\u5165\u8c46\u74e3 10g\uff0c\u5f00\u5c0f\u706b\u628a\u8c46\u74e3\u7206\u9999\u7092\u51fa\u7ea2\u6cb9\u5373\u53ef\u3002 \u52a0\u5165 800 \u6beb\u5347\u6e05\u6c34\uff08\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u9009\u62e9\uff09\uff0c\u5927\u706b\u70e7\u5f00\uff0c\u8f6c\u5c0f\u706b\u8c03\u5473\uff0c\u52a0\u5165\u98df\u7528\u76d0 2.5g\uff0c\u9e21\u7cbe 1.5g\uff0c1g \u767d\u7802\u7cd6\u63d0\u9c9c\uff0c1g \u80e1\u6912\u7c89\uff0c5g \u6c34\u6dc0\u7c89\uff08\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u9009\u62e9\uff09\u5c06\u6c64\u6c41\u6536\u6d53\u7a20\u4e00\u70b9\u3002 \u6c64\u6c41\u5f00\u540e\uff0c\u5f00\u5c0f\u706b\u5c06\u814c\u5236\u597d\u7684\u8089\u7247\u5206\u5f00\u4f9d\u6b21\u4e0b\u9505\uff0c\u7136\u540e\u5f00\u4e2d\u706b\u5c06\u8089\u7247\u70eb\u719f\uff0c\u7528\u9505\u94f2\u8f7b\u8f7b\u63a8\u52a8\u4e00\u4e0b\u907f\u514d\u7c98\u8fde\uff0c\u5f85\u6c64\u6c41\u70e7\u5f00\uff0c\u8089\u7247\u719f\u540e\u635e\u51fa\u653e\u5165\u7897\u4e2d\u914d\u83dc\u4e0a\uff0c\u518d\u5c06\u539f\u6c64\u5012\u5165\uff08\u4e0d\u8d85\u8fc7\u83dc\u54c1\uff09\u3002 \u7897\u4e2d\u5747\u5300\u6492\u4e0a\u5200\u53e3\u8fa3\u6912\u3001\u849c\u84c9\u548c\u8471\u82b1\u3002 \u9505\u6d17\u5e72\u51c0\uff0c\u52a0\u5165 200g \u83dc\u7c7d\u6cb9\uff0c\u70e7\u81f3 7 \u6210\u70ed\uff0c\u7136\u540e\u4e00\u6b21\u6027\u5747\u5300\u6cfc\u5728\u7897\u4e2d\u8089\u7247\u4e0a\uff08\u6ce8\u610f\u5b89\u5168\uff09\uff0c\u7f8e\u5473\u5b8c\u6210\u3002","title":"\u64cd\u4f5c"},{"location":"dishes/meat_dish/%E6%B0%B4%E7%85%AE%E8%82%89%E7%89%87/#_5","text":"\u57ab\u5e95\u7684\u852c\u83dc\u6839\u636e\u81ea\u5df1\u53e3\u5473\u9009\u62e9\uff08\u8611\u83c7\u3001\u767d\u83dc\u3001\u6cb9\u9ea6\u83dc\u7b49\uff09\u3002 \u5200\u53e3\u8fa3\u6912\u5236\u4f5c\u5acc\u9ebb\u70e6\u4e5f\u53ef\u4ee5\u76f4\u63a5\u7528\u5e72\u8fa3\u6912\u6bb5\u548c\u9752\u82b1\u6912\u4ee3\u66ff\u3002 \u7279\u522b\u6ce8\u610f\u8089\u7684\u814c\u5236\uff08\u6405\u62cc\u7684\u65f6\u5019\u671d\u7740\u4e00\u4e2a\u65b9\u5411\u3001\u8840\u6c34\u5904\u7406\u5e72\u51c0\uff09\uff0c\u4fdd\u8bc1\u8089\u6ed1\u5ae9\uff08\u9e21\u86cb\u6e05\u3001\u6dc0\u7c89\u6405\u62cc\u5747\u5300\uff09\u3002 \u6c34\u716e\u725b\u8089\u4e5f\u53ef\u4ee5\u6309\u7167\u8fd9\u4e2a\u505a\u6cd5\u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/meat_dish/%E6%B0%B4%E7%85%AE%E8%82%89%E7%89%87/#_6","text":"\u7f8e\u98df\u4f5c\u5bb6\u738b\u521aR \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u53c2\u8003\u8d44\u6599"},{"location":"dishes/meat_dish/%E6%B4%8B%E8%91%B1%E7%82%92%E7%8C%AA%E8%82%89/","text":"\u6d0b\u8471\u7092\u732a\u8089\u7684\u505a\u6cd5 \u54b8\u4e2d\u5e26\u751c\uff0c\u7b80\u5355\u4e0a\u624b\uff0c\u4e00\u4e0d\u5c0f\u5fc3\u53ef\u80fd\u8ba9\u4f60\u591a\u5403\u4e00\u7897\u996d\u3002\u4e00\u822c\u53ea\u9700 15 \u5206\u949f\u5373\u53ef\u5b8c\u6210\u3002 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u6d0b\u8471 \u732a\u8089\u7247 \u8543\u8304\u9171 \u9ebb\u6cb9 \u8ba1\u7b97 \u6bcf\u4efd\uff1a \u98df\u6750 \u6d0b\u8471 \u4e00\u9897 \uff08\u662f\u4e3b\u89d2\uff0c\u559c\u6b22\u5403\u6d0b\u8471\u53ef\u4ee5\u591a\u534a\u9897\uff5e\u4e00\u9897\uff09 \u732a\u8089 (250g) \u849c\u5934 \uff083 \u74e3\uff09 \u8c03\u5473\u6599 \u98df\u7528\u6cb9 (15ml) \u9ed1\u80e1\u6912 (1.25g) \u9171\u6cb9 (30ml) \u7cd6 (15g) \u9ebb\u6cb9 (5ml) \u756a\u8304\u9171 (15ml) \u6599\u9152 (15ml) \u5907\u6ce8\uff1a\u53ef\u4ee5\u8003\u8651\u8d2d\u4e70 \u8336\u5319\uff0c\u5927\u5319 \u6765\u7cbe\u51c6\u786e\u5b9a\u7528\u6599\u7684\u91cf\u3002 \u64cd\u4f5c \u6d0b\u8471\u5207\u7247\uff0c\u732a\u8089\uff0c\u849c\u5934\u62cd\u788e\uff0c\u4ee5\u53ca\u6df7\u5408\u4e0a\u8ff0\u8c03\u5473\u6599\u5907\u7528 \u7092\u9505\u5185\u5012\u5165 1 \u5927\u5319\u98df\u7528\u6cb9\uff08\u7b49\u5f85 10 \u79d2\u8ba9\u6cb9\u6e29\u5347\u9ad8\uff09\uff0c\u5012\u5165\u732a\u8089 \u7092\u81f3\u53d8\u8272\u540e\u4e0b\u849c\u5934\u7092\u9999\u76db\u8d77\u5907\u7528 \u539f\u9505\u4e0b\u6d0b\u8471\u7ffb\u7092 3~4 \u5206\u949f\u540e\u52a0\u5165\u8c03\u5473\u6599\u7092\u5300 \u4e0b\u521a\u76db\u8d77\u5907\u7528\u7684\u732a\u8089\u7ffb\u7092\u81f3\u732a\u8089\u719f\u540e \u5f85\u732a\u8089\u719f\u540e\u518d\u7ffb\u7092 1\u30012 \u5206\u949f\u5373\u53ef\u8d77\u9505 \u9644\u52a0\u5185\u5bb9 \u732a\u8089\u53ef\u9009\u732a\u80a9\u8089\u7247\u6216\u662f\u5207\u597d\u7684\u8089\u4e1d\u770b\u4e2a\u4eba\u559c\u597d \u53c2\u8003\u8d44\u6599 \u7231\u6599\u7406 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u6d0b\u8471\u7092\u732a\u8089"},{"location":"dishes/meat_dish/%E6%B4%8B%E8%91%B1%E7%82%92%E7%8C%AA%E8%82%89/#_1","text":"\u54b8\u4e2d\u5e26\u751c\uff0c\u7b80\u5355\u4e0a\u624b\uff0c\u4e00\u4e0d\u5c0f\u5fc3\u53ef\u80fd\u8ba9\u4f60\u591a\u5403\u4e00\u7897\u996d\u3002\u4e00\u822c\u53ea\u9700 15 \u5206\u949f\u5373\u53ef\u5b8c\u6210\u3002","title":"\u6d0b\u8471\u7092\u732a\u8089\u7684\u505a\u6cd5"},{"location":"dishes/meat_dish/%E6%B4%8B%E8%91%B1%E7%82%92%E7%8C%AA%E8%82%89/#_2","text":"\u6d0b\u8471 \u732a\u8089\u7247 \u8543\u8304\u9171 \u9ebb\u6cb9","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/meat_dish/%E6%B4%8B%E8%91%B1%E7%82%92%E7%8C%AA%E8%82%89/#_3","text":"\u6bcf\u4efd\uff1a \u98df\u6750 \u6d0b\u8471 \u4e00\u9897 \uff08\u662f\u4e3b\u89d2\uff0c\u559c\u6b22\u5403\u6d0b\u8471\u53ef\u4ee5\u591a\u534a\u9897\uff5e\u4e00\u9897\uff09 \u732a\u8089 (250g) \u849c\u5934 \uff083 \u74e3\uff09 \u8c03\u5473\u6599 \u98df\u7528\u6cb9 (15ml) \u9ed1\u80e1\u6912 (1.25g) \u9171\u6cb9 (30ml) \u7cd6 (15g) \u9ebb\u6cb9 (5ml) \u756a\u8304\u9171 (15ml) \u6599\u9152 (15ml) \u5907\u6ce8\uff1a\u53ef\u4ee5\u8003\u8651\u8d2d\u4e70 \u8336\u5319\uff0c\u5927\u5319 \u6765\u7cbe\u51c6\u786e\u5b9a\u7528\u6599\u7684\u91cf\u3002","title":"\u8ba1\u7b97"},{"location":"dishes/meat_dish/%E6%B4%8B%E8%91%B1%E7%82%92%E7%8C%AA%E8%82%89/#_4","text":"\u6d0b\u8471\u5207\u7247\uff0c\u732a\u8089\uff0c\u849c\u5934\u62cd\u788e\uff0c\u4ee5\u53ca\u6df7\u5408\u4e0a\u8ff0\u8c03\u5473\u6599\u5907\u7528 \u7092\u9505\u5185\u5012\u5165 1 \u5927\u5319\u98df\u7528\u6cb9\uff08\u7b49\u5f85 10 \u79d2\u8ba9\u6cb9\u6e29\u5347\u9ad8\uff09\uff0c\u5012\u5165\u732a\u8089 \u7092\u81f3\u53d8\u8272\u540e\u4e0b\u849c\u5934\u7092\u9999\u76db\u8d77\u5907\u7528 \u539f\u9505\u4e0b\u6d0b\u8471\u7ffb\u7092 3~4 \u5206\u949f\u540e\u52a0\u5165\u8c03\u5473\u6599\u7092\u5300 \u4e0b\u521a\u76db\u8d77\u5907\u7528\u7684\u732a\u8089\u7ffb\u7092\u81f3\u732a\u8089\u719f\u540e \u5f85\u732a\u8089\u719f\u540e\u518d\u7ffb\u7092 1\u30012 \u5206\u949f\u5373\u53ef\u8d77\u9505","title":"\u64cd\u4f5c"},{"location":"dishes/meat_dish/%E6%B4%8B%E8%91%B1%E7%82%92%E7%8C%AA%E8%82%89/#_5","text":"\u732a\u8089\u53ef\u9009\u732a\u80a9\u8089\u7247\u6216\u662f\u5207\u597d\u7684\u8089\u4e1d\u770b\u4e2a\u4eba\u559c\u597d","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/meat_dish/%E6%B4%8B%E8%91%B1%E7%82%92%E7%8C%AA%E8%82%89/#_6","text":"\u7231\u6599\u7406 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u53c2\u8003\u8d44\u6599"},{"location":"dishes/meat_dish/%E7%99%BD%E8%8F%9C%E7%8C%AA%E8%82%89%E7%82%96%E7%B2%89%E6%9D%A1/","text":"\u767d\u83dc\u732a\u8089\u7096\u7c89\u6761\u7684\u505a\u6cd5 \u767d\u83dc\u732a\u8089\u7096\u7c89\u6761\u662f\u4e00\u9053\u7b80\u5355\u6613\u505a\u7684\u83dc\u3002\u8fd9\u662f\u4e00\u9053\u4f20\u7edf\u7684\u4e1c\u5317\u5bb6\u5e38\u83dc\uff0c\u4ee5\u505a\u6cd5\u7b80\u5355\u3001\u5473\u9053\u4e0a\u4e58\u7684\u7279\u70b9\uff0c\u5728\u5e7f\u5927\u4e1c\u5317\u4eba\u6c11\u7fa4\u4f17\u4e2d\u5907\u53d7\u559c\u7231\u3002 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u4e94\u82b1\u8089 \u767d\u83dc \u571f\u8c46\u5e72\u7c89\u6761 \u5341\u4e09\u9999 \u9e21\u7cbe \u98df\u7528\u76d0 \u8001\u62bd \u751f\u62bd \u8ba1\u7b97 \u6bcf\u4efd\uff1a \u4e94\u82b1\u8089 300g \u5927\u767d\u83dc 500g \u571f\u8c46\u5e72\u7c89\u6761 50g \u5341\u4e09\u9999 10g \u9e21\u7cbe 5g \u98df\u7528\u76d0 15g \u8001\u62bd 5ml \u751f\u62bd 5ml \u64cd\u4f5c \u9505\u5185\u70e7\u6c34\uff0c\u6c34\u5f00\u540e\u653e\u5165\u5e72\u7c89\u6761\uff0c\u716e 5 \u5206\u949f\u540e\u540c\u6c34\u4e00\u8d77\u5012\u51fa\u5bb9\u5668\u4e2d\uff0c\u76d6\u4e0a\u76d6\u5b50\u7ee7\u7eed\u6d78\u6ce1\u6ce1 \u5907\u7528\uff08\u7b2c\u4e00\u6b65\u5148\u505a\u8fd9\u4e2a\uff0c\u671f\u95f4\u53ef\u4ee5\u8fdb\u884c\u4ee5\u4e0b\u6b65\u9aa4\uff09 \u4e94\u82b1\u8089\u5207 3mm \u7684\u8089\u7247\uff0c\u5907\u7528 \u5927\u767d\u83dc\u5ae9\u53f6\u4e0e\u767d\u83dc\u5e2e\u5b50\u5206\u5f00\u5207\u6210 2 \u4efd\u83dc\u7247\uff0c\u5907\u7528 \u70ed\u9505\uff0c\u9505\u5185\u653e\u5165 10ml - 15ml \u98df\u7528\u6cb9\u3002\u7b49\u5f85 10 \u79d2\u8ba9\u6cb9\u6e29\u5347\u9ad8 \u653e\u5165\u4e94\u82b1\u8089\uff0c\u4fdd\u6301\u7ffb\u7092\u81f3\u8089\u53d8\u8272 \u52a0\u5165\u8001\u62bd\uff0c\u7092 1 \u5206\u949f \uff0c\u7ed9\u8089\u4e0a\u8272 \u52a0\u5165\u767d\u83dc\u5e2e\u5b50\uff0c\u52a0\u5165\u98df\u7528\u76d0\u3001\u751f\u62bd\uff0c\u7092\u4e00\u5206\u949f\uff08\u5982\u679c\u7c98\u9505\uff0c\u70f9\u5165 10ml \u6c34\uff09 \u52a0\u6c34\u6ca1\u8fc7\u6240\u6709\u98df\u6750\uff0c\u52a0\u5165\u9e21\u7cbe \uff0c\u6cb8\u817e\u540e\uff0c\u5c06\u706b\u8c03\u5c0f\u7136\u540e \u7b49\u5f85 20 \u5206\u949f \u7c89\u6761\u6ee4\u6c34\u5207\u6210\u5c0f\u6bb5\u653e\u5165\u7897\u4e2d \u5907\u7528 \u52a0\u5165\u767d\u83dc\u5ae9\u53f6\uff0c\u7092\u5300\u540e\u5c06\u7c89\u6761\u653e\u5728\u83dc\u4e0a\u65b9\uff0c\u52a0\u76d6\u518d\u716e 5 \u5206\u949f \u5c1d\u5473\u3001\u5173\u706b\uff0c\u6536\u6c41 \u9644\u52a0\u5185\u5bb9 \u571f\u8c46\u5e72\u7c89\u6761\u716e\u5236\u65f6\u95f4\u957f\uff0c\u53ef\u4ee5\u653e\u5728\u7b2c\u4e00\u6b65\uff0c\u671f\u95f4\u8fdb\u884c\u5176\u4ed6\u6b65\u9aa4 \u6700\u540e\u4e00\u6b65\u5c1d\u5473\uff0c\u5982\u679c\u53d1\u73b0\u6709\u5473\u9053\u6de1\u3001\u672a\u719f\uff0c\u7ee7\u7eed\u52a0\u76d6\u716e\u4e00\u6bb5\u65f6\u95f4 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u767d\u83dc\u732a\u8089\u7096\u7c89\u6761"},{"location":"dishes/meat_dish/%E7%99%BD%E8%8F%9C%E7%8C%AA%E8%82%89%E7%82%96%E7%B2%89%E6%9D%A1/#_1","text":"\u767d\u83dc\u732a\u8089\u7096\u7c89\u6761\u662f\u4e00\u9053\u7b80\u5355\u6613\u505a\u7684\u83dc\u3002\u8fd9\u662f\u4e00\u9053\u4f20\u7edf\u7684\u4e1c\u5317\u5bb6\u5e38\u83dc\uff0c\u4ee5\u505a\u6cd5\u7b80\u5355\u3001\u5473\u9053\u4e0a\u4e58\u7684\u7279\u70b9\uff0c\u5728\u5e7f\u5927\u4e1c\u5317\u4eba\u6c11\u7fa4\u4f17\u4e2d\u5907\u53d7\u559c\u7231\u3002","title":"\u767d\u83dc\u732a\u8089\u7096\u7c89\u6761\u7684\u505a\u6cd5"},{"location":"dishes/meat_dish/%E7%99%BD%E8%8F%9C%E7%8C%AA%E8%82%89%E7%82%96%E7%B2%89%E6%9D%A1/#_2","text":"\u4e94\u82b1\u8089 \u767d\u83dc \u571f\u8c46\u5e72\u7c89\u6761 \u5341\u4e09\u9999 \u9e21\u7cbe \u98df\u7528\u76d0 \u8001\u62bd \u751f\u62bd","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/meat_dish/%E7%99%BD%E8%8F%9C%E7%8C%AA%E8%82%89%E7%82%96%E7%B2%89%E6%9D%A1/#_3","text":"\u6bcf\u4efd\uff1a \u4e94\u82b1\u8089 300g \u5927\u767d\u83dc 500g \u571f\u8c46\u5e72\u7c89\u6761 50g \u5341\u4e09\u9999 10g \u9e21\u7cbe 5g \u98df\u7528\u76d0 15g \u8001\u62bd 5ml \u751f\u62bd 5ml","title":"\u8ba1\u7b97"},{"location":"dishes/meat_dish/%E7%99%BD%E8%8F%9C%E7%8C%AA%E8%82%89%E7%82%96%E7%B2%89%E6%9D%A1/#_4","text":"\u9505\u5185\u70e7\u6c34\uff0c\u6c34\u5f00\u540e\u653e\u5165\u5e72\u7c89\u6761\uff0c\u716e 5 \u5206\u949f\u540e\u540c\u6c34\u4e00\u8d77\u5012\u51fa\u5bb9\u5668\u4e2d\uff0c\u76d6\u4e0a\u76d6\u5b50\u7ee7\u7eed\u6d78\u6ce1\u6ce1 \u5907\u7528\uff08\u7b2c\u4e00\u6b65\u5148\u505a\u8fd9\u4e2a\uff0c\u671f\u95f4\u53ef\u4ee5\u8fdb\u884c\u4ee5\u4e0b\u6b65\u9aa4\uff09 \u4e94\u82b1\u8089\u5207 3mm \u7684\u8089\u7247\uff0c\u5907\u7528 \u5927\u767d\u83dc\u5ae9\u53f6\u4e0e\u767d\u83dc\u5e2e\u5b50\u5206\u5f00\u5207\u6210 2 \u4efd\u83dc\u7247\uff0c\u5907\u7528 \u70ed\u9505\uff0c\u9505\u5185\u653e\u5165 10ml - 15ml \u98df\u7528\u6cb9\u3002\u7b49\u5f85 10 \u79d2\u8ba9\u6cb9\u6e29\u5347\u9ad8 \u653e\u5165\u4e94\u82b1\u8089\uff0c\u4fdd\u6301\u7ffb\u7092\u81f3\u8089\u53d8\u8272 \u52a0\u5165\u8001\u62bd\uff0c\u7092 1 \u5206\u949f \uff0c\u7ed9\u8089\u4e0a\u8272 \u52a0\u5165\u767d\u83dc\u5e2e\u5b50\uff0c\u52a0\u5165\u98df\u7528\u76d0\u3001\u751f\u62bd\uff0c\u7092\u4e00\u5206\u949f\uff08\u5982\u679c\u7c98\u9505\uff0c\u70f9\u5165 10ml \u6c34\uff09 \u52a0\u6c34\u6ca1\u8fc7\u6240\u6709\u98df\u6750\uff0c\u52a0\u5165\u9e21\u7cbe \uff0c\u6cb8\u817e\u540e\uff0c\u5c06\u706b\u8c03\u5c0f\u7136\u540e \u7b49\u5f85 20 \u5206\u949f \u7c89\u6761\u6ee4\u6c34\u5207\u6210\u5c0f\u6bb5\u653e\u5165\u7897\u4e2d \u5907\u7528 \u52a0\u5165\u767d\u83dc\u5ae9\u53f6\uff0c\u7092\u5300\u540e\u5c06\u7c89\u6761\u653e\u5728\u83dc\u4e0a\u65b9\uff0c\u52a0\u76d6\u518d\u716e 5 \u5206\u949f \u5c1d\u5473\u3001\u5173\u706b\uff0c\u6536\u6c41","title":"\u64cd\u4f5c"},{"location":"dishes/meat_dish/%E7%99%BD%E8%8F%9C%E7%8C%AA%E8%82%89%E7%82%96%E7%B2%89%E6%9D%A1/#_5","text":"\u571f\u8c46\u5e72\u7c89\u6761\u716e\u5236\u65f6\u95f4\u957f\uff0c\u53ef\u4ee5\u653e\u5728\u7b2c\u4e00\u6b65\uff0c\u671f\u95f4\u8fdb\u884c\u5176\u4ed6\u6b65\u9aa4 \u6700\u540e\u4e00\u6b65\u5c1d\u5473\uff0c\u5982\u679c\u53d1\u73b0\u6709\u5473\u9053\u6de1\u3001\u672a\u719f\uff0c\u7ee7\u7eed\u52a0\u76d6\u716e\u4e00\u6bb5\u65f6\u95f4 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/meat_dish/%E7%B3%96%E9%86%8B%E9%87%8C%E8%84%8A/","text":"\u7cd6\u918b\u91cc\u810a\u7684\u505a\u6cd5 \u7cd6\u918b\u91cc\u810a\u662f\u4e2d\u56fd\u7ecf\u5178\u4f20\u7edf\u540d\u83dc\u4e4b\u4e00\uff0c\u8be5\u83dc\u54c1\u4ee5\u732a\u91cc\u810a\u8089\u4e3a\u4e3b\u6750\uff0c\u914d\u4ee5\u9762\u7c89\u3001\u6dc0\u7c89\u3001\u918b\u7b49\u4f50\u6599\uff0c\u9178\u751c\u53ef\u53e3\uff0c\u8ba9\u4eba\u98df\u6b32\u5927\u5f00\uff1b\u8be5\u83dc\u54c1\u5728\u9655\u83dc\u3001\u8c6b\u83dc\u3001\u6d59\u83dc\u3001\u9c81\u83dc\u3001\u5ddd\u83dc\u3001\u6dee\u626c\u83dc\u3001\u7ca4\u83dc\u3001\u95fd\u83dc\u91cc\u5747\u6709\u6b64\u83dc\u3002 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u91cc\u810a\u8089 \u918b \u767d\u7cd6 \u6dc0\u7c89 \u9e21\u86cb \u751f\u62bd \u6599\u9152 \u869d\u6cb9 \u756a\u8304\u9171 \u767d\u80e1\u6912\u7c89 \u76d0 \u8ba1\u7b97 \u6bcf\u4efd\uff1a \u91cc\u810a\u8089 500g \u918b 10g \u767d\u7cd6 30g \u6dc0\u7c89 50g \u9e21\u86cb 50g \u751f\u62bd 10ml \u6599\u9152 20g \u869d\u6cb9 10g \u756a\u8304\u9171 30ml \u767d\u80e1\u6912\u7c89 5g \u98df\u76d0 10g \u64cd\u4f5c \u814c\u8089\uff1a\u5c06\u732a\u91cc\u810a\u8089\u5148\u5207\u539a\u7247\uff0c\u7528\u5200\u80cc\u62cd\u4e00\u62cd\uff0c\u628a\u8089\u62cd\u677e\u4e00\u70b9\u3002\u5207\u6210\u4e00\u4e2a\u624b\u6307\u5934\u7c97\u7684\u6761\uff0c\u52a0\u6599\u9152\uff0c\u751f\u62bd\uff0c\u869d\u6cb9\uff0c\u98df\u76d0\uff0c\u767d\u80e1\u6912\u7c89\uff0c\u4e00\u4e2a\u9e21\u86cb\uff0c\u5c06\u8089\u7528\u624b\u6293\u5300\uff0c\u814c\u5236 20 \u5206\u949f\u4ee5\u4e0a\u3002 \u8c03\u9171\uff1a\u756a\u8304\u9171+10g \u918b+30g \u767d\u7cd6+150ml \u6e05\u6c34\uff0c\u6405\u62cc\u81f3\u7cd6\u878d\u5316\uff0c\u5907\u7528\u3002 \u88f9\u7c89\uff1a\u5148\u628a\u7c89\u5168\u90e8\u88f9\u597d\u518d\u6765\u70b8\uff0c\u8fd9\u6837\u5728\u70b8\u7684\u65f6\u5019\u5c31\u4e0d\u4f1a\u624b\u5fd9\u811a\u4e71\u3002\u51c6\u5907\u4e00\u4e2a\u5927\u7897\uff0c\u91cc\u9762\u653e\u6dc0\u7c89\uff0c\u628a\u6bcf\u4e00\u6839\u8089\u6761\u90fd\u6ee1\u6ee1\u88f9\u4e0a\u6dc0\u7c89\u3002 \u70b8\u5236\uff1a\u6cb9\u6e29 160 \u6444\u6c0f\u5ea6\u5de6\u53f3\u4e0b\u91cc\u810a\uff0c\u53ef\u4ee5\u62ff\u4e00\u4e2a\u5e72\u7b77\u5b50\u653e\u5728\u6cb9\u91cc\u9762\u8bd5\u4e00\u4e0b\uff0c\u5468\u56f4\u5192\u5c0f\u6ce1\u5c31\u53ef\u4ee5\u4e0b\u9505\u3002 \u70b8\u5230\u8868\u9762\u5fae\u9ec4\u53ef\u4ee5\u635e\u51fa\uff0c\u5168\u7a0b\u4e2d\u706b\u3002\u7136\u540e\u7b49\u6cb9\u6e29\u5347\u9ad8\u5230 200 \u6444\u6c0f\u5ea6\u5de6\u53f3\uff0c\u628a\u91cc\u810a\u5012\u8fdb\u53bb\u91cd\u65b0\u70b8\u4e00\u6b21\uff0c\u53ea\u9700 40 \u79d2\uff0c\u8868\u76ae\u5c31\u4f1a\u5f88\u8106\uff0c\u9a6c\u4e0a\u635e\u51fa\u3002 \u88f9\u9171\uff1a\u53e6\u5916\u62ff\u4e00\u4e2a\u9505\uff0c\u9505\u91cc\u653e\u5e95\u6cb9\uff0c\u628a\u8c03\u597d\u7684\u9171\u6c41\u5012\u8fdb\u53bb\uff0c\u716e\u5230\u5192\u6ce1\uff0c\u628a\u70b8\u597d\u7684\u91cc\u810a\u653e\u8fdb\u53bb\uff0c\u7ffb\u7092\uff0c\u8ba9\u6bcf\u4e00\u6839\u90fd\u88f9\u4e0a\u9171\u6c41\u3002 \u4e0b\u70b8\u597d\u7684\u91cc\u810a\u8089\u7ffb\u7092\uff0c\u5173\u706b\u76db\u51fa\u3002 \u9644\u52a0\u5185\u5bb9 \u91cc\u810a\u8981\u591a\u70b8\u51e0\u904d\uff0c\u6ce8\u610f\u706b\u5019\uff0c\u5426\u5219\u8fbe\u4e0d\u5230\u5916\u7126\u91cc\u5ae9\u7684\u6548\u679c\uff01 \u4e0b\u53a8\u623f \u767e\u5ea6\u767e\u79d1 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u7cd6\u918b\u91cc\u810a"},{"location":"dishes/meat_dish/%E7%B3%96%E9%86%8B%E9%87%8C%E8%84%8A/#_1","text":"\u7cd6\u918b\u91cc\u810a\u662f\u4e2d\u56fd\u7ecf\u5178\u4f20\u7edf\u540d\u83dc\u4e4b\u4e00\uff0c\u8be5\u83dc\u54c1\u4ee5\u732a\u91cc\u810a\u8089\u4e3a\u4e3b\u6750\uff0c\u914d\u4ee5\u9762\u7c89\u3001\u6dc0\u7c89\u3001\u918b\u7b49\u4f50\u6599\uff0c\u9178\u751c\u53ef\u53e3\uff0c\u8ba9\u4eba\u98df\u6b32\u5927\u5f00\uff1b\u8be5\u83dc\u54c1\u5728\u9655\u83dc\u3001\u8c6b\u83dc\u3001\u6d59\u83dc\u3001\u9c81\u83dc\u3001\u5ddd\u83dc\u3001\u6dee\u626c\u83dc\u3001\u7ca4\u83dc\u3001\u95fd\u83dc\u91cc\u5747\u6709\u6b64\u83dc\u3002","title":"\u7cd6\u918b\u91cc\u810a\u7684\u505a\u6cd5"},{"location":"dishes/meat_dish/%E7%B3%96%E9%86%8B%E9%87%8C%E8%84%8A/#_2","text":"\u91cc\u810a\u8089 \u918b \u767d\u7cd6 \u6dc0\u7c89 \u9e21\u86cb \u751f\u62bd \u6599\u9152 \u869d\u6cb9 \u756a\u8304\u9171 \u767d\u80e1\u6912\u7c89 \u76d0","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/meat_dish/%E7%B3%96%E9%86%8B%E9%87%8C%E8%84%8A/#_3","text":"\u6bcf\u4efd\uff1a \u91cc\u810a\u8089 500g \u918b 10g \u767d\u7cd6 30g \u6dc0\u7c89 50g \u9e21\u86cb 50g \u751f\u62bd 10ml \u6599\u9152 20g \u869d\u6cb9 10g \u756a\u8304\u9171 30ml \u767d\u80e1\u6912\u7c89 5g \u98df\u76d0 10g","title":"\u8ba1\u7b97"},{"location":"dishes/meat_dish/%E7%B3%96%E9%86%8B%E9%87%8C%E8%84%8A/#_4","text":"\u814c\u8089\uff1a\u5c06\u732a\u91cc\u810a\u8089\u5148\u5207\u539a\u7247\uff0c\u7528\u5200\u80cc\u62cd\u4e00\u62cd\uff0c\u628a\u8089\u62cd\u677e\u4e00\u70b9\u3002\u5207\u6210\u4e00\u4e2a\u624b\u6307\u5934\u7c97\u7684\u6761\uff0c\u52a0\u6599\u9152\uff0c\u751f\u62bd\uff0c\u869d\u6cb9\uff0c\u98df\u76d0\uff0c\u767d\u80e1\u6912\u7c89\uff0c\u4e00\u4e2a\u9e21\u86cb\uff0c\u5c06\u8089\u7528\u624b\u6293\u5300\uff0c\u814c\u5236 20 \u5206\u949f\u4ee5\u4e0a\u3002 \u8c03\u9171\uff1a\u756a\u8304\u9171+10g \u918b+30g \u767d\u7cd6+150ml \u6e05\u6c34\uff0c\u6405\u62cc\u81f3\u7cd6\u878d\u5316\uff0c\u5907\u7528\u3002 \u88f9\u7c89\uff1a\u5148\u628a\u7c89\u5168\u90e8\u88f9\u597d\u518d\u6765\u70b8\uff0c\u8fd9\u6837\u5728\u70b8\u7684\u65f6\u5019\u5c31\u4e0d\u4f1a\u624b\u5fd9\u811a\u4e71\u3002\u51c6\u5907\u4e00\u4e2a\u5927\u7897\uff0c\u91cc\u9762\u653e\u6dc0\u7c89\uff0c\u628a\u6bcf\u4e00\u6839\u8089\u6761\u90fd\u6ee1\u6ee1\u88f9\u4e0a\u6dc0\u7c89\u3002 \u70b8\u5236\uff1a\u6cb9\u6e29 160 \u6444\u6c0f\u5ea6\u5de6\u53f3\u4e0b\u91cc\u810a\uff0c\u53ef\u4ee5\u62ff\u4e00\u4e2a\u5e72\u7b77\u5b50\u653e\u5728\u6cb9\u91cc\u9762\u8bd5\u4e00\u4e0b\uff0c\u5468\u56f4\u5192\u5c0f\u6ce1\u5c31\u53ef\u4ee5\u4e0b\u9505\u3002 \u70b8\u5230\u8868\u9762\u5fae\u9ec4\u53ef\u4ee5\u635e\u51fa\uff0c\u5168\u7a0b\u4e2d\u706b\u3002\u7136\u540e\u7b49\u6cb9\u6e29\u5347\u9ad8\u5230 200 \u6444\u6c0f\u5ea6\u5de6\u53f3\uff0c\u628a\u91cc\u810a\u5012\u8fdb\u53bb\u91cd\u65b0\u70b8\u4e00\u6b21\uff0c\u53ea\u9700 40 \u79d2\uff0c\u8868\u76ae\u5c31\u4f1a\u5f88\u8106\uff0c\u9a6c\u4e0a\u635e\u51fa\u3002 \u88f9\u9171\uff1a\u53e6\u5916\u62ff\u4e00\u4e2a\u9505\uff0c\u9505\u91cc\u653e\u5e95\u6cb9\uff0c\u628a\u8c03\u597d\u7684\u9171\u6c41\u5012\u8fdb\u53bb\uff0c\u716e\u5230\u5192\u6ce1\uff0c\u628a\u70b8\u597d\u7684\u91cc\u810a\u653e\u8fdb\u53bb\uff0c\u7ffb\u7092\uff0c\u8ba9\u6bcf\u4e00\u6839\u90fd\u88f9\u4e0a\u9171\u6c41\u3002 \u4e0b\u70b8\u597d\u7684\u91cc\u810a\u8089\u7ffb\u7092\uff0c\u5173\u706b\u76db\u51fa\u3002","title":"\u64cd\u4f5c"},{"location":"dishes/meat_dish/%E7%B3%96%E9%86%8B%E9%87%8C%E8%84%8A/#_5","text":"\u91cc\u810a\u8981\u591a\u70b8\u51e0\u904d\uff0c\u6ce8\u610f\u706b\u5019\uff0c\u5426\u5219\u8fbe\u4e0d\u5230\u5916\u7126\u91cc\u5ae9\u7684\u6548\u679c\uff01 \u4e0b\u53a8\u623f \u767e\u5ea6\u767e\u79d1 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/meat_dish/%E8%90%9D%E5%8D%9C%E7%82%96%E7%BE%8A%E6%8E%92/","text":"\u841d\u535c\u7096\u7f8a\u6392\u7684\u505a\u6cd5 \u841d\u535c\u7096\u7f8a\u6392\u662f\u4e00\u9053\u5e38\u89c1\u5bb6\u5e38\u83dc\uff0c\u8001\u5c11\u7686\u5b9c\u3002\u4e00\u822c\u521d\u5b66\u8005\u53ea\u9700\u8981\u6700\u591a 2 \u5c0f\u65f6\u5373\u53ef\u5b8c\u6210\u3002 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u7f8a\u6392 \u767d\u841d\u535c \u5927\u8471 \u82b1\u6912 \u767d\u82b7\uff08\u53ef\u9009\uff09 \u59dc \u6599\u9152\u6216\u8005\u9ec4\u9152 \u98df\u7528\u76d0 \u51b0\u7cd6 \u6c34 \u8ba1\u7b97 \u6bcf\u4efd\uff1a \u7f8a\u6392 400g \u5de6\u53f3 \u767d\u841d\u535c\u4e00\u6839 \u5927\u8471\u4e00\u6839 \u82b1\u6912 10 \u7c92\u5de6\u53f3 \u59dc 10g \u5de6\u53f3\uff0c\u4e00\u822c\u4e70\u4e00\u5934\u59dc\uff0c\u4ece\u4e2d\u5207\u5927\u7ea6 4 \u7247\u5de6\u53f3\u5373\u53ef \u6599\u9152\u6216\u8005\u9ec4\u9152 30ml-40ml \u98df\u7528\u76d0 10g \u5de6\u53f3\uff0c\u5927\u7ea6\u5c0f\u52fa 3 \u52fa \u51b0\u7cd6 2-4 \u7c92 \u6c34\uff1a\u6ca1\u8fc7\u98df\u6750\u7684\u91cf\uff0c\u9700\u8981 1000ml \u64cd\u4f5c \u841d\u535c\u53bb\u76ae\u3001\u6eda\u5200\u5207\u6210 3-5cm \u5de6\u53f3\u7684\u5927\u5757\uff0c\u5907\u7528 \u7f8a\u6392\u5728\u8d2d\u4e70\u65f6\u53ef\u4ee5\u8ba9\u5356\u5bb6\u5207\u597d\uff0c\u56e0\u4e3a\u5bb6\u7528\u5200\u4e00\u822c\u96be\u4ee5\u5207\u52a8\uff0c\u5907\u7528 \u7f8a\u8089\u51b7\u6c34\u4e0b\u9505\uff0c\u52a0\u5165\u4e00\u534a\u7684\u6599\u9152\uff0c\u4e00\u534a\u7684\u8471\u59dc\uff0c\u716e 10 \u5206\u949f\u5de6\u53f3\u53bb\u6389\u8840\u8165\uff0c\uff08\u53ef\u9009\uff09\u628a\u712f\u7684\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u7684\u8840\u6cab\u5b50\u53ef\u4ee5\u7528\u52fa\u76db\u51fa\u6765 \u53e6\u8d77\u4e00\u9505\u51b7\u6c34\uff0c\u653e\u5165\u5207\u597d\u7684\u767d\u841d\u535c\uff0c\u653e\u5165\u4e00\u534a\u7684\u51b0\u7cd6\uff0c\u7b49\u6c34\u5f00\u540e\u716e 5 \u5206\u949f\u5de6\u53f3\u53bb\u6389\u767d\u841d\u535c\u7684\u8fa3\u5473 \u76db\u51fa\u6765\u712f\u597d\u7684\u7f8a\u6392\uff0c\u653e\u5165\u9ad8\u538b\u9505\u4e2d\uff0c\u52a0\u6c34\u6ca1\u8fc7\u6240\u6709\u98df\u6750\u540e\u518d\u589e\u52a0\u5927\u7ea6 300ml \u7684\u6c34 \u5c06\u5269\u4f59\u7684\u8471\u59dc\u6599\u9152\uff0c\u82b1\u6912\uff0c\u51b0\u7cd6\uff0c\u767d\u82b7\uff08\u53ef\u9009\uff09\uff0c\u76d0\u653e\u5165\u9505\u4e2d\uff0c\u76d6\u9505\u7b49\u5f85\u4e0a\u6c7d\u540e\u8ba1\u65f6\uff0c\u4e2d\u706b\u7096\u5927\u7ea6 15 \u5206\u949f\u5de6\u53f3\u3002 \u5982\u6ca1\u6709\u9ad8\u538b\u9505\uff0c\u5219\u653e\u5165\u666e\u901a\u9505\u4e2d\uff0c\u7096\u5927\u7ea6 40 \u5206\u949f\u5230 1 \u5c0f\u65f6\u3002 \u5173\u706b\uff0c\u7b49\u5f85\u9ad8\u538b\u9505\u653e\u6c14\u5b8c\u6bd5\uff0c\u5f00\u76d6\uff0c\u52a0\u5165\u4e4b\u524d\u712f\u597d\u7684\u841d\u535c\uff0c\u8c03\u5473\uff0c\u52a0\u5165 3-10g \u7684\u98df\u76d0\u6216\u8005\u6c34\uff0c\u54c1\u5c1d\u6c64\u7684\u54b8\u6de1\uff0c \u518d\u5f00\u706b\uff0c\u4e2d\u706b\uff0c\u9ad8\u538b\u9505\u4e0a\u6c7d\u518d\u7096 10 \u5206\u949f\u5de6\u53f3\uff0c\u666e\u901a\u9505\u76d6\u76d6\u518d\u7096 20 \u5206\u949f\u5de6\u53f3 \u5173\u706b\uff0c\u76db\u76d8 \u9644\u52a0\u5185\u5bb9 \u64cd\u4f5c\u65f6\uff0c\u9700\u8981\u6ce8\u610f\u89c2\u5bdf\u6cb8\u817e\u7684\u6c34\u4f4d\u7ebf\uff0c\u5982\u53d1\u73b0\u4f4e\u4e8e 2/3 \u7684\u98df\u6750\u5e94\u52a0\u70ed\u6c34\u81f3\u6ca1\u8fc7\u98df\u6750\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u841d\u535c\u7096\u7f8a\u6392"},{"location":"dishes/meat_dish/%E8%90%9D%E5%8D%9C%E7%82%96%E7%BE%8A%E6%8E%92/#_1","text":"\u841d\u535c\u7096\u7f8a\u6392\u662f\u4e00\u9053\u5e38\u89c1\u5bb6\u5e38\u83dc\uff0c\u8001\u5c11\u7686\u5b9c\u3002\u4e00\u822c\u521d\u5b66\u8005\u53ea\u9700\u8981\u6700\u591a 2 \u5c0f\u65f6\u5373\u53ef\u5b8c\u6210\u3002","title":"\u841d\u535c\u7096\u7f8a\u6392\u7684\u505a\u6cd5"},{"location":"dishes/meat_dish/%E8%90%9D%E5%8D%9C%E7%82%96%E7%BE%8A%E6%8E%92/#_2","text":"\u7f8a\u6392 \u767d\u841d\u535c \u5927\u8471 \u82b1\u6912 \u767d\u82b7\uff08\u53ef\u9009\uff09 \u59dc \u6599\u9152\u6216\u8005\u9ec4\u9152 \u98df\u7528\u76d0 \u51b0\u7cd6 \u6c34","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/meat_dish/%E8%90%9D%E5%8D%9C%E7%82%96%E7%BE%8A%E6%8E%92/#_3","text":"\u6bcf\u4efd\uff1a \u7f8a\u6392 400g \u5de6\u53f3 \u767d\u841d\u535c\u4e00\u6839 \u5927\u8471\u4e00\u6839 \u82b1\u6912 10 \u7c92\u5de6\u53f3 \u59dc 10g \u5de6\u53f3\uff0c\u4e00\u822c\u4e70\u4e00\u5934\u59dc\uff0c\u4ece\u4e2d\u5207\u5927\u7ea6 4 \u7247\u5de6\u53f3\u5373\u53ef \u6599\u9152\u6216\u8005\u9ec4\u9152 30ml-40ml \u98df\u7528\u76d0 10g \u5de6\u53f3\uff0c\u5927\u7ea6\u5c0f\u52fa 3 \u52fa \u51b0\u7cd6 2-4 \u7c92 \u6c34\uff1a\u6ca1\u8fc7\u98df\u6750\u7684\u91cf\uff0c\u9700\u8981 1000ml","title":"\u8ba1\u7b97"},{"location":"dishes/meat_dish/%E8%90%9D%E5%8D%9C%E7%82%96%E7%BE%8A%E6%8E%92/#_4","text":"\u841d\u535c\u53bb\u76ae\u3001\u6eda\u5200\u5207\u6210 3-5cm \u5de6\u53f3\u7684\u5927\u5757\uff0c\u5907\u7528 \u7f8a\u6392\u5728\u8d2d\u4e70\u65f6\u53ef\u4ee5\u8ba9\u5356\u5bb6\u5207\u597d\uff0c\u56e0\u4e3a\u5bb6\u7528\u5200\u4e00\u822c\u96be\u4ee5\u5207\u52a8\uff0c\u5907\u7528 \u7f8a\u8089\u51b7\u6c34\u4e0b\u9505\uff0c\u52a0\u5165\u4e00\u534a\u7684\u6599\u9152\uff0c\u4e00\u534a\u7684\u8471\u59dc\uff0c\u716e 10 \u5206\u949f\u5de6\u53f3\u53bb\u6389\u8840\u8165\uff0c\uff08\u53ef\u9009\uff09\u628a\u712f\u7684\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u7684\u8840\u6cab\u5b50\u53ef\u4ee5\u7528\u52fa\u76db\u51fa\u6765 \u53e6\u8d77\u4e00\u9505\u51b7\u6c34\uff0c\u653e\u5165\u5207\u597d\u7684\u767d\u841d\u535c\uff0c\u653e\u5165\u4e00\u534a\u7684\u51b0\u7cd6\uff0c\u7b49\u6c34\u5f00\u540e\u716e 5 \u5206\u949f\u5de6\u53f3\u53bb\u6389\u767d\u841d\u535c\u7684\u8fa3\u5473 \u76db\u51fa\u6765\u712f\u597d\u7684\u7f8a\u6392\uff0c\u653e\u5165\u9ad8\u538b\u9505\u4e2d\uff0c\u52a0\u6c34\u6ca1\u8fc7\u6240\u6709\u98df\u6750\u540e\u518d\u589e\u52a0\u5927\u7ea6 300ml \u7684\u6c34 \u5c06\u5269\u4f59\u7684\u8471\u59dc\u6599\u9152\uff0c\u82b1\u6912\uff0c\u51b0\u7cd6\uff0c\u767d\u82b7\uff08\u53ef\u9009\uff09\uff0c\u76d0\u653e\u5165\u9505\u4e2d\uff0c\u76d6\u9505\u7b49\u5f85\u4e0a\u6c7d\u540e\u8ba1\u65f6\uff0c\u4e2d\u706b\u7096\u5927\u7ea6 15 \u5206\u949f\u5de6\u53f3\u3002 \u5982\u6ca1\u6709\u9ad8\u538b\u9505\uff0c\u5219\u653e\u5165\u666e\u901a\u9505\u4e2d\uff0c\u7096\u5927\u7ea6 40 \u5206\u949f\u5230 1 \u5c0f\u65f6\u3002 \u5173\u706b\uff0c\u7b49\u5f85\u9ad8\u538b\u9505\u653e\u6c14\u5b8c\u6bd5\uff0c\u5f00\u76d6\uff0c\u52a0\u5165\u4e4b\u524d\u712f\u597d\u7684\u841d\u535c\uff0c\u8c03\u5473\uff0c\u52a0\u5165 3-10g \u7684\u98df\u76d0\u6216\u8005\u6c34\uff0c\u54c1\u5c1d\u6c64\u7684\u54b8\u6de1\uff0c \u518d\u5f00\u706b\uff0c\u4e2d\u706b\uff0c\u9ad8\u538b\u9505\u4e0a\u6c7d\u518d\u7096 10 \u5206\u949f\u5de6\u53f3\uff0c\u666e\u901a\u9505\u76d6\u76d6\u518d\u7096 20 \u5206\u949f\u5de6\u53f3 \u5173\u706b\uff0c\u76db\u76d8","title":"\u64cd\u4f5c"},{"location":"dishes/meat_dish/%E8%90%9D%E5%8D%9C%E7%82%96%E7%BE%8A%E6%8E%92/#_5","text":"\u64cd\u4f5c\u65f6\uff0c\u9700\u8981\u6ce8\u610f\u89c2\u5bdf\u6cb8\u817e\u7684\u6c34\u4f4d\u7ebf\uff0c\u5982\u53d1\u73b0\u4f4e\u4e8e 2/3 \u7684\u98df\u6750\u5e94\u52a0\u70ed\u6c34\u81f3\u6ca1\u8fc7\u98df\u6750\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/meat_dish/%E8%92%9C%E8%8B%94%E7%82%92%E8%82%89%E6%9C%AB/","text":"\u849c\u82d4\u7092\u8089\u672b\u7684\u505a\u6cd5 \u849c\u82d4\u7092\u8089\u672b\u662f\u4e00\u9053\u7b80\u5355\u6613\u505a\u7684\u83dc\u3002\u8fd9\u662f\u4e00\u9053\u5317\u65b9\u5bb6\u5e38\u83dc\uff0c\u4ee5\u505a\u6cd5\u7b80\u5355\u3001\u5473\u9053\u4e0a\u4e58\u7684\u7279\u70b9\uff0c\u5728\u5e7f\u5927\u5317\u65b9\u4eba\u6c11\u7fa4\u4f17\u4e2d\u5907\u53d7\u559c\u7231\u3002 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u4e94\u82b1\u8089\u8584\u7247 \u849c\u82d4 \u98df\u7528\u76d0 \u751f\u62bd \u98df\u7528\u6cb9 \u849c\u74e3 \u8ba1\u7b97 1 \u4eba\u98df\u7528\u7248\u672c \u849c\u82d4 1 \u624e\uff08\u6bcf\u624e\u849c\u82d4\u7ea6 190g\uff09 \u4e94\u82b1\u8089\u8584\u7247 4 \u7247\uff08\u7ea6 20g\uff09 \u98df\u7528\u6cb9 10ml \u849c\u74e3 2 \u74e3 \u751f\u62bd 15ml \u98df\u76d0 2g \u64cd\u4f5c \u849c\u82d4\u5207\u6210 5cm \u5c0f\u6bb5\uff0c\u5907\u7528 \u4e94\u82b1\u8089\u5207\u6210 5mm * 5cm \u4e1d\u72b6\uff0c\u5907\u7528 \u849c\u74e3\u62cd\u788e\u5207\u6210\u672b\uff0c\u5907\u7528 \u70ed\u9505\uff0c\u9505\u5185\u653e\u5165 10ml \u98df\u7528\u6cb9\u3002\u7b49\u5f85 10 \u79d2\u8ba9\u6cb9\u6e29\u5347\u9ad8 \u653e\u5165\u849c\u672b\uff0c\u4e2d\u706b\u7ffb\u7092 10 \u79d2 \u5c06\u849c\u672b\u7092\u51fa\u9999\u5473 \u653e\u5165\u4e94\u82b1\u8089\u548c 5ml \u751f\u62bd\uff0c\u4e2d\u706b\u7ffb\u7092 30 \u79d2 \u5c06\u8089\u7092\u719f\u5e76\u4e0a\u8272 \u5c06\u849c\u82d4\u653e\u5165\u9505\u5185\u5e76\u52a0\u5165 10ml \u751f\u62bd\uff0c\u7ffb\u7092 30 \u79d2 \u9505\u5185\u52a0\u5165 20g \u6c34\uff0c\u4e2d\u706b\u7ffb\u7092 5 \u5206\u949f \u5c06\u849c\u82d4\u7092\u81f3\u7a0d\u7a0d\u53d8\u8f6f \u6700\u540e\u52a0\u5165 2g \u98df\u76d0\uff0c\u4e2d\u706b\u7ffb\u7092 30 \u79d2 \uff0c\u5373\u53ef\u51fa\u9505\u88c5\u76d8 \u9644\u52a0\u5185\u5bb9 \u52a0\u5165\u98df\u76d0\u524d\u53ef\u5c1d\u4e00\u4e0b\u54b8\u6de1\uff0c\u81ea\u884c\u51b3\u5b9a\u662f\u5426\u589e\u51cf\u76d0\u91cf \u9009\u7528\u4e94\u82b1\u8089\u8584\u7247\u662f\u56e0\u4e3a\u5207\u8089\u7b80\u5355\u4e14\u4e0d\u7528\u814c\u5236\u5373\u53ef\u5165\u5473 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u849c\u82d4\u7092\u8089\u672b"},{"location":"dishes/meat_dish/%E8%92%9C%E8%8B%94%E7%82%92%E8%82%89%E6%9C%AB/#_1","text":"\u849c\u82d4\u7092\u8089\u672b\u662f\u4e00\u9053\u7b80\u5355\u6613\u505a\u7684\u83dc\u3002\u8fd9\u662f\u4e00\u9053\u5317\u65b9\u5bb6\u5e38\u83dc\uff0c\u4ee5\u505a\u6cd5\u7b80\u5355\u3001\u5473\u9053\u4e0a\u4e58\u7684\u7279\u70b9\uff0c\u5728\u5e7f\u5927\u5317\u65b9\u4eba\u6c11\u7fa4\u4f17\u4e2d\u5907\u53d7\u559c\u7231\u3002","title":"\u849c\u82d4\u7092\u8089\u672b\u7684\u505a\u6cd5"},{"location":"dishes/meat_dish/%E8%92%9C%E8%8B%94%E7%82%92%E8%82%89%E6%9C%AB/#_2","text":"\u4e94\u82b1\u8089\u8584\u7247 \u849c\u82d4 \u98df\u7528\u76d0 \u751f\u62bd \u98df\u7528\u6cb9 \u849c\u74e3","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/meat_dish/%E8%92%9C%E8%8B%94%E7%82%92%E8%82%89%E6%9C%AB/#_3","text":"1 \u4eba\u98df\u7528\u7248\u672c \u849c\u82d4 1 \u624e\uff08\u6bcf\u624e\u849c\u82d4\u7ea6 190g\uff09 \u4e94\u82b1\u8089\u8584\u7247 4 \u7247\uff08\u7ea6 20g\uff09 \u98df\u7528\u6cb9 10ml \u849c\u74e3 2 \u74e3 \u751f\u62bd 15ml \u98df\u76d0 2g","title":"\u8ba1\u7b97"},{"location":"dishes/meat_dish/%E8%92%9C%E8%8B%94%E7%82%92%E8%82%89%E6%9C%AB/#_4","text":"\u849c\u82d4\u5207\u6210 5cm \u5c0f\u6bb5\uff0c\u5907\u7528 \u4e94\u82b1\u8089\u5207\u6210 5mm * 5cm \u4e1d\u72b6\uff0c\u5907\u7528 \u849c\u74e3\u62cd\u788e\u5207\u6210\u672b\uff0c\u5907\u7528 \u70ed\u9505\uff0c\u9505\u5185\u653e\u5165 10ml \u98df\u7528\u6cb9\u3002\u7b49\u5f85 10 \u79d2\u8ba9\u6cb9\u6e29\u5347\u9ad8 \u653e\u5165\u849c\u672b\uff0c\u4e2d\u706b\u7ffb\u7092 10 \u79d2 \u5c06\u849c\u672b\u7092\u51fa\u9999\u5473 \u653e\u5165\u4e94\u82b1\u8089\u548c 5ml \u751f\u62bd\uff0c\u4e2d\u706b\u7ffb\u7092 30 \u79d2 \u5c06\u8089\u7092\u719f\u5e76\u4e0a\u8272 \u5c06\u849c\u82d4\u653e\u5165\u9505\u5185\u5e76\u52a0\u5165 10ml \u751f\u62bd\uff0c\u7ffb\u7092 30 \u79d2 \u9505\u5185\u52a0\u5165 20g \u6c34\uff0c\u4e2d\u706b\u7ffb\u7092 5 \u5206\u949f \u5c06\u849c\u82d4\u7092\u81f3\u7a0d\u7a0d\u53d8\u8f6f \u6700\u540e\u52a0\u5165 2g \u98df\u76d0\uff0c\u4e2d\u706b\u7ffb\u7092 30 \u79d2 \uff0c\u5373\u53ef\u51fa\u9505\u88c5\u76d8","title":"\u64cd\u4f5c"},{"location":"dishes/meat_dish/%E8%92%9C%E8%8B%94%E7%82%92%E8%82%89%E6%9C%AB/#_5","text":"\u52a0\u5165\u98df\u76d0\u524d\u53ef\u5c1d\u4e00\u4e0b\u54b8\u6de1\uff0c\u81ea\u884c\u51b3\u5b9a\u662f\u5426\u589e\u51cf\u76d0\u91cf \u9009\u7528\u4e94\u82b1\u8089\u8584\u7247\u662f\u56e0\u4e3a\u5207\u8089\u7b80\u5355\u4e14\u4e0d\u7528\u814c\u5236\u5373\u53ef\u5165\u5473 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/meat_dish/%E8%BE%A3%E6%A4%92%E7%82%92%E8%82%89/","text":"\u8fa3\u6912\u7092\u8089\u7684\u505a\u6cd5 \u26a0\ufe0f\u6ce8\u610f\uff1a\u672c\u9053\u83dc\u9700\u8981\u4e00\u5b9a\u6599\u7406\u57fa\u7840\uff0c\u4e0d\u63a8\u8350\u65b0\u624b\u5c1d\u8bd5\u3002 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u9752\u6912\uff08\u5403\u8fa3\u7684\u8bdd\u63a8\u8350\u7528\u676d\u6912\uff0c\u87ba\u4e1d\u6912\uff0c\u4e0d\u5403\u8fa3\u7684\u7528\u5c16\u6912\uff0c\u751c\u6912\uff09 \u732a\u7626\u8089 \u76d0 \u751f\u62bd \u869d\u6cb9 \u5927\u849c \u59dc \u9171\u6cb9\uff08\u53ef\u9009\uff09 \u8c46\u8c49\uff08\u53ef\u9009\uff09 \u8ba1\u7b97 \u6ce8\u610f\uff0c\u8fd9\u9053\u83dc\u4e0d\u63d0\u4f9b\u4e00\u4eba\u7248\u672c\u3002\u5982\u679c\u786e\u5b9a\u53ea\u6709\u4e00\u4e2a\u4eba\u98df\u7528\uff0c\u8bf7\u5728\u4eba\u6570\u4e2d\u4ee3\u5165 2\u3002 \u9752\u6912\u7684\u6570\u91cf = \u4eba\u6570 * 3 \u4e2a\u3002 \u8089\u91cf = \u4eba\u6570 * 200g\u3002 \u76d0\u91cf = \u4eba\u6570 * 3g\u3002 \u751f\u62bd = \u4eba\u6570 * 3ml\u3002 \u869d\u6cb9 = \u4eba\u6570 * 3ml\u3002 \u5927\u849c = \u4eba\u6570 * 5g\u3002 \u751f\u59dc = \u4eba\u6570 * 5g\u3002 \u9171\u6cb9 = \u4eba\u6570 * 2ml\u3002 \u8c46\u8c49 = \u4eba\u6570 * 3g\u3002 \u4f7f\u7528\u4e0a\u8ff0\u6761\u4ef6\uff0c\u8ba1\u7b97\u51fa\u8ba1\u5212\u4f7f\u7528\u7684\u539f\u6750\u6599\u6bd4\u4f8b\u3002 \u64cd\u4f5c \u5c06 \u9752\u6912 \u6d17\u51c0\uff0c\u53bb\u9664 \u9752\u6912\u628a \u4ee5\u53ca \u9752\u6912\u7c7d \uff0c\u518d\u7528 \u6eda\u5200\u624b\u6cd5 \u5207\u597d\u5907\u7528\u3002 \u5927\u849c \u7528\u5200\u62cd\u4e00\u4e0b\uff0c\u518d\u6a2a\u5207\u6210 \u849c\u74e3 \uff0c \u751f\u59dc \u5207\u788e\u6210 \u59dc\u672b \u3002 \u5c06 \u732a\u7626\u8089 \u5207\u6210 \u8089\u7247 \uff08\u987a\u7740\u732a\u8089\u7684\u7eb9\u7406\u5207\uff0c\u5373\u5200\u548c\u8089\u7684\u7eb9\u7406\u5448\u6c34\u5e73\u7ebf\uff0c\u51fa\u6765\u7684\u8089\u7247\uff0c\u7eb9\u8def\u5448\u201c\u5ddd\u201d\u5b57\uff09\u3002 \u5c06\u5207\u597d\u7684 \u732a\u8089 \u6d17\u51c0\uff0c\u653e\u5165\u7a7a\u7897\uff0c\u518d\u52a0\u5165\u8ba1\u7b97\u597d\u7684 \u751f\u62bd \u3001 \u869d\u6cb9 \u3001 \u76d0 \u6405\u62cc\u5747\u5300\uff0c\u814c\u5236 10 \u5206\u949f\u3002 \u70ed\u9505\uff0c\u4e0d\u7528\u5012\u6cb9\uff0c\u628a \u5207\u597d\u7684\u9752\u6912 \u653e\u5165\u9505\u4e2d\uff0c\u5927\u706b\u5e72\u7178\u81f3\u864e\u76ae\u72b6\u540e\uff0c\u518d\u52a0 2g \u76d0 \u7ee7\u7eed\u7ffb\u7092 1min \u540e\u635e\u8d77\u3002 \u4e0d\u7528\u6d17\u9505\uff0c\u5927\u706b\u70ed\u9505\uff0c\u52a0\u5165\u4eba\u6570 * 8ml \u6cb9 \uff0c\u7b49\u5f85 30s\uff0c\u52a0\u5165 \u849c\u74e3 \u3001 \u59dc\u672b \u7ffb\u7092 15s\u3002 \u52a0\u5165\u814c\u5236\u597d\u7684 \u732a\u8089 \u5012\u5165\u9505\u5185\u7ffb\u7092 2min\uff0c\u518d\u52a0\u5165\u5e72\u7178\u8fc7\u7684 \u9752\u6912 \u7ffb\u7092 1min\u3002 \u6839\u636e\u4e2a\u4eba\u53e3\u5473\u559c\u597d\u52a0\u5165 \u8c46\u8c49 \uff0c\u6700\u540e\u52a0\u5165 \u9171\u6cb9 \uff0c\u7ee7\u7eed\u7ffb\u7092 30s\u3002 \u51fa\u9505\uff0c\u76db\u76d8\u3002 \u9644\u52a0\u5185\u5bb9 \u8fa3\u6912\u53ea\u80fd\u9009\u62e9\u9752\u6912\uff0c\u87ba\u4e1d\u6912\u4e3a\u6700\u4f18\u89e3\uff0c\u5207\u52ff\u9009\u62e9\u5176\u4ed6\u54c1\u79cd\u8fa3\u6912\uff01 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u8fa3\u6912\u7092\u8089"},{"location":"dishes/meat_dish/%E8%BE%A3%E6%A4%92%E7%82%92%E8%82%89/#_1","text":"\u26a0\ufe0f\u6ce8\u610f\uff1a\u672c\u9053\u83dc\u9700\u8981\u4e00\u5b9a\u6599\u7406\u57fa\u7840\uff0c\u4e0d\u63a8\u8350\u65b0\u624b\u5c1d\u8bd5\u3002","title":"\u8fa3\u6912\u7092\u8089\u7684\u505a\u6cd5"},{"location":"dishes/meat_dish/%E8%BE%A3%E6%A4%92%E7%82%92%E8%82%89/#_2","text":"\u9752\u6912\uff08\u5403\u8fa3\u7684\u8bdd\u63a8\u8350\u7528\u676d\u6912\uff0c\u87ba\u4e1d\u6912\uff0c\u4e0d\u5403\u8fa3\u7684\u7528\u5c16\u6912\uff0c\u751c\u6912\uff09 \u732a\u7626\u8089 \u76d0 \u751f\u62bd \u869d\u6cb9 \u5927\u849c \u59dc \u9171\u6cb9\uff08\u53ef\u9009\uff09 \u8c46\u8c49\uff08\u53ef\u9009\uff09","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/meat_dish/%E8%BE%A3%E6%A4%92%E7%82%92%E8%82%89/#_3","text":"\u6ce8\u610f\uff0c\u8fd9\u9053\u83dc\u4e0d\u63d0\u4f9b\u4e00\u4eba\u7248\u672c\u3002\u5982\u679c\u786e\u5b9a\u53ea\u6709\u4e00\u4e2a\u4eba\u98df\u7528\uff0c\u8bf7\u5728\u4eba\u6570\u4e2d\u4ee3\u5165 2\u3002 \u9752\u6912\u7684\u6570\u91cf = \u4eba\u6570 * 3 \u4e2a\u3002 \u8089\u91cf = \u4eba\u6570 * 200g\u3002 \u76d0\u91cf = \u4eba\u6570 * 3g\u3002 \u751f\u62bd = \u4eba\u6570 * 3ml\u3002 \u869d\u6cb9 = \u4eba\u6570 * 3ml\u3002 \u5927\u849c = \u4eba\u6570 * 5g\u3002 \u751f\u59dc = \u4eba\u6570 * 5g\u3002 \u9171\u6cb9 = \u4eba\u6570 * 2ml\u3002 \u8c46\u8c49 = \u4eba\u6570 * 3g\u3002 \u4f7f\u7528\u4e0a\u8ff0\u6761\u4ef6\uff0c\u8ba1\u7b97\u51fa\u8ba1\u5212\u4f7f\u7528\u7684\u539f\u6750\u6599\u6bd4\u4f8b\u3002","title":"\u8ba1\u7b97"},{"location":"dishes/meat_dish/%E8%BE%A3%E6%A4%92%E7%82%92%E8%82%89/#_4","text":"\u5c06 \u9752\u6912 \u6d17\u51c0\uff0c\u53bb\u9664 \u9752\u6912\u628a \u4ee5\u53ca \u9752\u6912\u7c7d \uff0c\u518d\u7528 \u6eda\u5200\u624b\u6cd5 \u5207\u597d\u5907\u7528\u3002 \u5927\u849c \u7528\u5200\u62cd\u4e00\u4e0b\uff0c\u518d\u6a2a\u5207\u6210 \u849c\u74e3 \uff0c \u751f\u59dc \u5207\u788e\u6210 \u59dc\u672b \u3002 \u5c06 \u732a\u7626\u8089 \u5207\u6210 \u8089\u7247 \uff08\u987a\u7740\u732a\u8089\u7684\u7eb9\u7406\u5207\uff0c\u5373\u5200\u548c\u8089\u7684\u7eb9\u7406\u5448\u6c34\u5e73\u7ebf\uff0c\u51fa\u6765\u7684\u8089\u7247\uff0c\u7eb9\u8def\u5448\u201c\u5ddd\u201d\u5b57\uff09\u3002 \u5c06\u5207\u597d\u7684 \u732a\u8089 \u6d17\u51c0\uff0c\u653e\u5165\u7a7a\u7897\uff0c\u518d\u52a0\u5165\u8ba1\u7b97\u597d\u7684 \u751f\u62bd \u3001 \u869d\u6cb9 \u3001 \u76d0 \u6405\u62cc\u5747\u5300\uff0c\u814c\u5236 10 \u5206\u949f\u3002 \u70ed\u9505\uff0c\u4e0d\u7528\u5012\u6cb9\uff0c\u628a \u5207\u597d\u7684\u9752\u6912 \u653e\u5165\u9505\u4e2d\uff0c\u5927\u706b\u5e72\u7178\u81f3\u864e\u76ae\u72b6\u540e\uff0c\u518d\u52a0 2g \u76d0 \u7ee7\u7eed\u7ffb\u7092 1min \u540e\u635e\u8d77\u3002 \u4e0d\u7528\u6d17\u9505\uff0c\u5927\u706b\u70ed\u9505\uff0c\u52a0\u5165\u4eba\u6570 * 8ml \u6cb9 \uff0c\u7b49\u5f85 30s\uff0c\u52a0\u5165 \u849c\u74e3 \u3001 \u59dc\u672b \u7ffb\u7092 15s\u3002 \u52a0\u5165\u814c\u5236\u597d\u7684 \u732a\u8089 \u5012\u5165\u9505\u5185\u7ffb\u7092 2min\uff0c\u518d\u52a0\u5165\u5e72\u7178\u8fc7\u7684 \u9752\u6912 \u7ffb\u7092 1min\u3002 \u6839\u636e\u4e2a\u4eba\u53e3\u5473\u559c\u597d\u52a0\u5165 \u8c46\u8c49 \uff0c\u6700\u540e\u52a0\u5165 \u9171\u6cb9 \uff0c\u7ee7\u7eed\u7ffb\u7092 30s\u3002 \u51fa\u9505\uff0c\u76db\u76d8\u3002","title":"\u64cd\u4f5c"},{"location":"dishes/meat_dish/%E8%BE%A3%E6%A4%92%E7%82%92%E8%82%89/#_5","text":"\u8fa3\u6912\u53ea\u80fd\u9009\u62e9\u9752\u6912\uff0c\u87ba\u4e1d\u6912\u4e3a\u6700\u4f18\u89e3\uff0c\u5207\u52ff\u9009\u62e9\u5176\u4ed6\u54c1\u79cd\u8fa3\u6912\uff01 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/meat_dish/%E9%A6%99%E5%B9%B2%E8%82%89%E4%B8%9D/","text":"\u9999\u5e72\u8089\u4e1d\u7684\u505a\u6cd5 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u732a\u91cc\u810a\uff08\u53ef\u4ee5\u4e70\u8d85\u5e02\u5207\u597d\u4e14\u79f0\u91cd\u597d\u7684\u8089\u4e1d\uff09 \u9999\u5e72 \u76d0 \u751f\u62bd \u6dc0\u7c89 \u5927\u849c \u9752\u6912 \u9e21\u7cbe \u8ba1\u7b97 \u6ce8\u610f\uff0c\u8fd9\u9053\u83dc\u63d0\u4f9b\u7684\u662f\u4e00\u4eba\u7248\u672c\u3002\u5982\u679c\u786e\u5b9a\u6709\u591a\u4e2a\u4eba\u98df\u7528\uff0c\u8bf7\u5728\u4eba\u6570\u4e2d\u4ee3\u5165\u76f8\u5e94\u7684\u7cfb\u6570\u3002 \u9999\u5e72 = \u4eba\u6570 * 75g \u9752\u6912\u7684\u6570\u91cf = \u4eba\u6570 * 5 \u4e2a \u8089\u91cf = \u4eba\u6570 * 100g \u76d0\u91cf = \u4eba\u6570 * 3g \u751f\u62bd = \u4eba\u6570 * 5ml \u6dc0\u7c89 = \u4eba\u6570 * 5g \u5927\u849c = \u4eba\u6570 * 5g\uff08\u5927\u7ea6 3 \u4e2a\u849c\u74e3\uff09 \u9e21\u7cbe = 2g \u4f7f\u7528\u4e0a\u8ff0\u6761\u4ef6\uff0c\u8ba1\u7b97\u51fa\u8ba1\u5212\u4f7f\u7528\u7684\u539f\u6750\u6599\u6bd4\u4f8b\u3002 \u64cd\u4f5c \u51c6\u5907\u5de5\u4f5c \u8089\u4e1d \uff08\u6ca1\u6709\u8089\u4e1d\uff0c\u81ea\u5df1\u5207\uff09\u7528\u751f\u62bd(3ml)\uff0c\u751f\u7c89\u6df7\u5408\u5747\u5300\u5f85\u7528\u3002 \u5c06 \u9752\u6912 \u6d17\u51c0\uff0c\u518d\u7528 \u6eda\u5200\u624b\u6cd5 \u5207\u597d\u5907\u7528\u3002 \u5927\u849c \u6a2a\u5207\u6210\u7247\uff0c \u9999\u5e72 \u5207\u4e1d\u3002 \u6dc0\u7c89 \u4e0e\u6c34(10ml)\u6df7\u5408\uff0c\u6405\u62cc\u5747\u5300\u3002 \u8d77\u9505 \u5e72\u51c0\u9505\u9002\u91cf\u6cb9\uff0c\u4e0d\u7528\u7b49\u6cb9\u70ed\u5c31\u5012\u5165\u8089\u4e1d\u6162\u6162\u5212\u6563\uff0c\u8089\u4e1d\u719f\u4e86\uff0c\u7acb\u9a6c\u635e\u51fa\uff0c\u7559\u6cb9\u5230\u9505\u91cc\u3002 \u5c06\u849c\u7247\u548c\u9999\u5e72\u653e\u5165\u9505\u4e2d\uff0c\u52a0\u5165 2ml \u751f\u62bd\uff0c\u7ffb\u7092\u5747\u5300\u3002 2-3 \u5206\u949f\uff0c\u770b\u706b\u5927\u5c0f\uff0c\u5c06\u9752\u6912\u4e1d\u653e\u5165\u9505\u4e2d\u6df7\u5408\uff0c\u7ffb\u7092\u3002 1 \u5206\u949f\u540e\uff0c\u653e\u5165\u8089\u4e1d\u6df7\u5408\u3002 \u5012\u5165\u6dc0\u7c89\u4e0e\u6c34\u7684\u6df7\u5408\u7269\u52fe\u82a1\uff0c\u52a0\u5165\u76d0 3g\uff0c\u9e21\u7cbe 2g\uff0c\u7ffb\u7092 2-3 \u5206\u949f\u51fa\u9505\u3002 \u6210\u54c1\u3002 \u6ce8\u610f\uff0c\u4e0d\u540c\u7684\u9505\u5177\u6216\u8005\u7076\u53f0\uff0c\u4f1a\u5f71\u54cd\u7ffb\u7092\u7684\u65f6\u95f4\uff0c\u5efa\u8bae\uff0c\u4e0d\u786e\u5b9a\u662f\u5426\u719f\u4e86\uff0c\u53ef\u4ee5\u8bd5\u5403\u4e0b\u3002 \u9644\u52a0\u5185\u5bb9 \u8fa3\u6912\u9009\u62e9\u9752\u6912\uff0c\u87ba\u4e1d\u6912\u4e3a\u6700\u4f18\u89e3\uff0c\u559c\u6b22\u8fa3\u7684\u53ef\u4ee5\u52a0\u5165\u5c0f\u7c73\u6912\u5207\u7ec6\u788e\uff0c\u540c\u9752\u6912\u4e00\u8d77\u52a0\u5165\uff01 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9999\u5e72\u8089\u4e1d"},{"location":"dishes/meat_dish/%E9%A6%99%E5%B9%B2%E8%82%89%E4%B8%9D/#_1","text":"","title":"\u9999\u5e72\u8089\u4e1d\u7684\u505a\u6cd5"},{"location":"dishes/meat_dish/%E9%A6%99%E5%B9%B2%E8%82%89%E4%B8%9D/#_2","text":"\u732a\u91cc\u810a\uff08\u53ef\u4ee5\u4e70\u8d85\u5e02\u5207\u597d\u4e14\u79f0\u91cd\u597d\u7684\u8089\u4e1d\uff09 \u9999\u5e72 \u76d0 \u751f\u62bd \u6dc0\u7c89 \u5927\u849c \u9752\u6912 \u9e21\u7cbe","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/meat_dish/%E9%A6%99%E5%B9%B2%E8%82%89%E4%B8%9D/#_3","text":"\u6ce8\u610f\uff0c\u8fd9\u9053\u83dc\u63d0\u4f9b\u7684\u662f\u4e00\u4eba\u7248\u672c\u3002\u5982\u679c\u786e\u5b9a\u6709\u591a\u4e2a\u4eba\u98df\u7528\uff0c\u8bf7\u5728\u4eba\u6570\u4e2d\u4ee3\u5165\u76f8\u5e94\u7684\u7cfb\u6570\u3002 \u9999\u5e72 = \u4eba\u6570 * 75g \u9752\u6912\u7684\u6570\u91cf = \u4eba\u6570 * 5 \u4e2a \u8089\u91cf = \u4eba\u6570 * 100g \u76d0\u91cf = \u4eba\u6570 * 3g \u751f\u62bd = \u4eba\u6570 * 5ml \u6dc0\u7c89 = \u4eba\u6570 * 5g \u5927\u849c = \u4eba\u6570 * 5g\uff08\u5927\u7ea6 3 \u4e2a\u849c\u74e3\uff09 \u9e21\u7cbe = 2g \u4f7f\u7528\u4e0a\u8ff0\u6761\u4ef6\uff0c\u8ba1\u7b97\u51fa\u8ba1\u5212\u4f7f\u7528\u7684\u539f\u6750\u6599\u6bd4\u4f8b\u3002","title":"\u8ba1\u7b97"},{"location":"dishes/meat_dish/%E9%A6%99%E5%B9%B2%E8%82%89%E4%B8%9D/#_4","text":"","title":"\u64cd\u4f5c"},{"location":"dishes/meat_dish/%E9%A6%99%E5%B9%B2%E8%82%89%E4%B8%9D/#_5","text":"\u8089\u4e1d \uff08\u6ca1\u6709\u8089\u4e1d\uff0c\u81ea\u5df1\u5207\uff09\u7528\u751f\u62bd(3ml)\uff0c\u751f\u7c89\u6df7\u5408\u5747\u5300\u5f85\u7528\u3002 \u5c06 \u9752\u6912 \u6d17\u51c0\uff0c\u518d\u7528 \u6eda\u5200\u624b\u6cd5 \u5207\u597d\u5907\u7528\u3002 \u5927\u849c \u6a2a\u5207\u6210\u7247\uff0c \u9999\u5e72 \u5207\u4e1d\u3002 \u6dc0\u7c89 \u4e0e\u6c34(10ml)\u6df7\u5408\uff0c\u6405\u62cc\u5747\u5300\u3002","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"dishes/meat_dish/%E9%A6%99%E5%B9%B2%E8%82%89%E4%B8%9D/#_6","text":"\u5e72\u51c0\u9505\u9002\u91cf\u6cb9\uff0c\u4e0d\u7528\u7b49\u6cb9\u70ed\u5c31\u5012\u5165\u8089\u4e1d\u6162\u6162\u5212\u6563\uff0c\u8089\u4e1d\u719f\u4e86\uff0c\u7acb\u9a6c\u635e\u51fa\uff0c\u7559\u6cb9\u5230\u9505\u91cc\u3002 \u5c06\u849c\u7247\u548c\u9999\u5e72\u653e\u5165\u9505\u4e2d\uff0c\u52a0\u5165 2ml \u751f\u62bd\uff0c\u7ffb\u7092\u5747\u5300\u3002 2-3 \u5206\u949f\uff0c\u770b\u706b\u5927\u5c0f\uff0c\u5c06\u9752\u6912\u4e1d\u653e\u5165\u9505\u4e2d\u6df7\u5408\uff0c\u7ffb\u7092\u3002 1 \u5206\u949f\u540e\uff0c\u653e\u5165\u8089\u4e1d\u6df7\u5408\u3002 \u5012\u5165\u6dc0\u7c89\u4e0e\u6c34\u7684\u6df7\u5408\u7269\u52fe\u82a1\uff0c\u52a0\u5165\u76d0 3g\uff0c\u9e21\u7cbe 2g\uff0c\u7ffb\u7092 2-3 \u5206\u949f\u51fa\u9505\u3002 \u6210\u54c1\u3002 \u6ce8\u610f\uff0c\u4e0d\u540c\u7684\u9505\u5177\u6216\u8005\u7076\u53f0\uff0c\u4f1a\u5f71\u54cd\u7ffb\u7092\u7684\u65f6\u95f4\uff0c\u5efa\u8bae\uff0c\u4e0d\u786e\u5b9a\u662f\u5426\u719f\u4e86\uff0c\u53ef\u4ee5\u8bd5\u5403\u4e0b\u3002","title":"\u8d77\u9505"},{"location":"dishes/meat_dish/%E9%A6%99%E5%B9%B2%E8%82%89%E4%B8%9D/#_7","text":"\u8fa3\u6912\u9009\u62e9\u9752\u6912\uff0c\u87ba\u4e1d\u6912\u4e3a\u6700\u4f18\u89e3\uff0c\u559c\u6b22\u8fa3\u7684\u53ef\u4ee5\u52a0\u5165\u5c0f\u7c73\u6912\u5207\u7ec6\u788e\uff0c\u540c\u9752\u6912\u4e00\u8d77\u52a0\u5165\uff01 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/meat_dish/%E9%B1%BC%E9%A6%99%E8%82%89%E4%B8%9D/","text":"\u9c7c\u9999\u8089\u4e1d\u7684\u505a\u6cd5 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u91cc\u810a\u8089 200g \u80e1\u841d\u535c 100g \u9752\u6912 100g \u6728\u8033\uff08\u5e72\uff09 5g \u751f\u62bd 10ml \u6599\u9152 5ml \u86cb\u6e05 1 \u4e2a \u6dc0\u7c89 10g \u918b 15ml \u767d\u7cd6 10g \u76d0 5g \u59dc 20g \u8471 20g \u849c 2 \u74e3 \u8c46\u74e3\u9171 15g \u8ba1\u7b97 \u6ce8\u610f\uff0c\u8fd9\u9053\u83dc\u4ec5\u6709\u8db3\u591f 1-2 \u4eba\u98df\u7528\u7684\u7248\u672c\u3002 \u64cd\u4f5c \u5236\u4f5c\u814c\u6599\u548c\u9999\u7897\u6c41 \u5236\u4f5c \u814c\u6599 \uff1a\u5c06\u4e0b\u5217\u539f\u6599\u6df7\u5408\uff1a \u751f\u62bd 5ml \u6599\u9152 5ml \u6dc0\u7c89 5g \u6c34 20ml \u86cb\u6e05 1 \u4e2a \u5236\u4f5c \u9999\u6c41 \uff1a\u5c06\u4e0b\u5217\u539f\u6599\u6df7\u5408\uff1a \u751f\u62bd 5ml \u918b 15ml \u767d\u7cd6 10 \u514b \u76d0 1 \u514b \u6dc0\u7c89 5g \u6c34 20ml \u5904\u7406\u539f\u6599 \u7528 \u814c\u6599 \u814c\u5236\u91cc\u810a\u8089 15-30min\u3002\u6ce8\u610f\u5c06\u8089\u6293\u5300\u3002 \u5e72\u6728\u8033\u6ce1\u4e00\u4e2a\u665a\u4e0a\uff0c\u6d17\u51c0\uff0c\u5207\u6210\u5c0f\u5757\u3002 \u9752\u6912\u6d17\u51c0\uff0c\u53bb\u8482\uff0c\u5207\u6210\u4e1d\u3002 \u80e1\u841d\u535c\u6d17\u51c0\uff0c\u5207\u6210\u4e1d\uff0c\u5c06\u80e1\u841d\u535c\u4e1d \u712f\u6c34 \u3002 \u59dc\u3001\u849c\u5207\u6cab\u3002 \u8471\u5207\u6210 5mm \u7684\u5c0f\u6bb5\u3002 \u7092\u719f\u5404\u79cd\u6750\u6599 \u5c06\u9505\u70e7\u70ed\uff0c\u52a0\u5165 15ml \u6cb9\u3002 \u5411\u9505\u5185\u5012\u5165\u51c6\u5907\u597d\u7684\u814c\u8089\uff0c\u5feb\u901f\u6ed1\u6563\u81f3\u53d8\u767d\uff0c\u76db\u51fa\u5907\u7528\u3002 \u5c06\u9505\u70e7\u70ed\uff0c\u52a0\u5165 5ml \u6cb9\u3002 \u5012\u5165\u5168\u90e8 \u8471 \u3001 \u59dc \u3001 \u849c \u3001 \u8c46\u74e3\u9171 \u3002 \u5012\u5165\u5168\u90e8 \u80e1\u841d\u535c \uff0c\u7ffb\u7092 20s \u540e\uff0c\u653e\u5165\u9752\u6912\u548c\u6728\u8033\uff0c\u7ffb\u7092 2min\u3002 \u5012\u5165 \u7092\u8fc7\u7684\u8089 \u3002\u5feb\u901f\u7ffb\u7092\u5747\u5300\u3002\u6ce8\u610f\u4e0d\u8981\u7092\u8d85\u8fc7 20 \u79d2\u3002 \u5012\u5165 \u9999\u6c41 \u3002\u5feb\u901f\u7ffb\u7092\u5747\u5300\u3002\u6ce8\u610f\u4e0d\u8981\u7092\u8d85\u8fc7 15 \u79d2\u3002 \u5173\u706b\uff0c\u76db\u76d8\u3002 \u9644\u52a0\u5185\u5bb9 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9c7c\u9999\u8089\u4e1d"},{"location":"dishes/meat_dish/%E9%B1%BC%E9%A6%99%E8%82%89%E4%B8%9D/#_1","text":"","title":"\u9c7c\u9999\u8089\u4e1d\u7684\u505a\u6cd5"},{"location":"dishes/meat_dish/%E9%B1%BC%E9%A6%99%E8%82%89%E4%B8%9D/#_2","text":"\u91cc\u810a\u8089 200g \u80e1\u841d\u535c 100g \u9752\u6912 100g \u6728\u8033\uff08\u5e72\uff09 5g \u751f\u62bd 10ml \u6599\u9152 5ml \u86cb\u6e05 1 \u4e2a \u6dc0\u7c89 10g \u918b 15ml \u767d\u7cd6 10g \u76d0 5g \u59dc 20g \u8471 20g \u849c 2 \u74e3 \u8c46\u74e3\u9171 15g","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/meat_dish/%E9%B1%BC%E9%A6%99%E8%82%89%E4%B8%9D/#_3","text":"\u6ce8\u610f\uff0c\u8fd9\u9053\u83dc\u4ec5\u6709\u8db3\u591f 1-2 \u4eba\u98df\u7528\u7684\u7248\u672c\u3002","title":"\u8ba1\u7b97"},{"location":"dishes/meat_dish/%E9%B1%BC%E9%A6%99%E8%82%89%E4%B8%9D/#_4","text":"","title":"\u64cd\u4f5c"},{"location":"dishes/meat_dish/%E9%B1%BC%E9%A6%99%E8%82%89%E4%B8%9D/#_5","text":"\u5236\u4f5c \u814c\u6599 \uff1a\u5c06\u4e0b\u5217\u539f\u6599\u6df7\u5408\uff1a \u751f\u62bd 5ml \u6599\u9152 5ml \u6dc0\u7c89 5g \u6c34 20ml \u86cb\u6e05 1 \u4e2a \u5236\u4f5c \u9999\u6c41 \uff1a\u5c06\u4e0b\u5217\u539f\u6599\u6df7\u5408\uff1a \u751f\u62bd 5ml \u918b 15ml \u767d\u7cd6 10 \u514b \u76d0 1 \u514b \u6dc0\u7c89 5g \u6c34 20ml","title":"\u5236\u4f5c\u814c\u6599\u548c\u9999\u7897\u6c41"},{"location":"dishes/meat_dish/%E9%B1%BC%E9%A6%99%E8%82%89%E4%B8%9D/#_6","text":"\u7528 \u814c\u6599 \u814c\u5236\u91cc\u810a\u8089 15-30min\u3002\u6ce8\u610f\u5c06\u8089\u6293\u5300\u3002 \u5e72\u6728\u8033\u6ce1\u4e00\u4e2a\u665a\u4e0a\uff0c\u6d17\u51c0\uff0c\u5207\u6210\u5c0f\u5757\u3002 \u9752\u6912\u6d17\u51c0\uff0c\u53bb\u8482\uff0c\u5207\u6210\u4e1d\u3002 \u80e1\u841d\u535c\u6d17\u51c0\uff0c\u5207\u6210\u4e1d\uff0c\u5c06\u80e1\u841d\u535c\u4e1d \u712f\u6c34 \u3002 \u59dc\u3001\u849c\u5207\u6cab\u3002 \u8471\u5207\u6210 5mm \u7684\u5c0f\u6bb5\u3002","title":"\u5904\u7406\u539f\u6599"},{"location":"dishes/meat_dish/%E9%B1%BC%E9%A6%99%E8%82%89%E4%B8%9D/#_7","text":"\u5c06\u9505\u70e7\u70ed\uff0c\u52a0\u5165 15ml \u6cb9\u3002 \u5411\u9505\u5185\u5012\u5165\u51c6\u5907\u597d\u7684\u814c\u8089\uff0c\u5feb\u901f\u6ed1\u6563\u81f3\u53d8\u767d\uff0c\u76db\u51fa\u5907\u7528\u3002 \u5c06\u9505\u70e7\u70ed\uff0c\u52a0\u5165 5ml \u6cb9\u3002 \u5012\u5165\u5168\u90e8 \u8471 \u3001 \u59dc \u3001 \u849c \u3001 \u8c46\u74e3\u9171 \u3002 \u5012\u5165\u5168\u90e8 \u80e1\u841d\u535c \uff0c\u7ffb\u7092 20s \u540e\uff0c\u653e\u5165\u9752\u6912\u548c\u6728\u8033\uff0c\u7ffb\u7092 2min\u3002 \u5012\u5165 \u7092\u8fc7\u7684\u8089 \u3002\u5feb\u901f\u7ffb\u7092\u5747\u5300\u3002\u6ce8\u610f\u4e0d\u8981\u7092\u8d85\u8fc7 20 \u79d2\u3002 \u5012\u5165 \u9999\u6c41 \u3002\u5feb\u901f\u7ffb\u7092\u5747\u5300\u3002\u6ce8\u610f\u4e0d\u8981\u7092\u8d85\u8fc7 15 \u79d2\u3002 \u5173\u706b\uff0c\u76db\u76d8\u3002","title":"\u7092\u719f\u5404\u79cd\u6750\u6599"},{"location":"dishes/meat_dish/%E9%B1%BC%E9%A6%99%E8%82%89%E4%B8%9D/#_8","text":"\u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/meat_dish/%E9%BA%BB%E8%BE%A3%E9%A6%99%E9%94%85/","text":"\u9ebb\u8fa3\u9999\u9505\u7684\u505a\u6cd5 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u9752\u83dc\uff08\u6cb9\u83dc\u3001\u6cb9\u9ea6\u83dc\u3001\u83e0\u83dc\uff09 \u65e0\u9aa8\u8089\uff08\u732a\u8089\u3001\u725b\u8089\u3001\u9e21\u8089\u3001\u9c7c\u4e38\u3001\u706b\u817f\u80a0\uff09 \u5e72\u8c46\u8150 \u5317\u4eac\u9ebb\u8fa3\u65b9\u4fbf\u9762 \u5e72\u8fa3\u6912 \u9ebb\u8fa3\u9999\u9505\u8c03\u6599\uff08 \u793a\u4f8b\u56fe\u72471 \u3001 \u793a\u4f8b\u56fe\u72472 \uff09 \u8ba1\u7b97 \u6b64\u6570\u503c\u5927\u7ea6\u662f 3 \u4e2a\u4eba\u7684\u91cf\u3002 \u9752\u83dc\u5171\u9700 455 \u514b\uff0c\u5176\u4e2d\u6cb9\u83dc\u3001\u6cb9\u9ea6\u83dc\u3001\u83e0\u83dc\u7684\u6bd4\u4f8b\u6309\u81ea\u5df1\u559c\u597d\u5206\u914d\u5373\u53ef \u65e0\u9aa8\u8089\u5171\u9700 430 \u514b\uff0c\u5176\u4e2d\u732a\u8089\u3001\u725b\u8089\u3001\u9e21\u8089\u3001\u9c7c\u4e38\u3001\u706b\u817f\u80a0\u7684\u6bd4\u4f8b\u6309\u81ea\u5df1\u559c\u597d\u5206\u914d\u5373\u53ef \u5e72\u8c46\u8150 152 \u514b \u5317\u4eac\u9ebb\u8fa3\u65b9\u4fbf\u9762 1 \u888b \u5e72\u8fa3\u6912 5 \u514b \u9ebb\u8fa3\u9999\u9505\u8c03\u6599 110 \u514b \u4ee5\u4e0a\u5185\u5bb9\u4e2d\uff0c\u9752\u83dc\u3001\u65e0\u9aa8\u8089\u3001\u5e72\u8c46\u8150\u3001\u5317\u4eac\u9ebb\u8fa3\u65b9\u4fbf\u9762\u7684\u914d\u6bd4\u4e3a\u63a8\u8350\u914d\u6bd4\uff0c\u5982\u679c\u4f60\u6709\u81ea\u5df1\u559c\u6b22\u7684\u98df\u6750\uff0c\u53ef\u4ee5\u6309\u559c\u597d\u91cd\u65b0\u5206\u914d\u6bd4\u4f8b\u3002 \u64cd\u4f5c \u70e7\u5f00\u4e00\u9505\u6c34\uff08\u6c34\u91cf\u80fd\u6ca1\u8fc7\u7b2c 2-4 \u6b65\u4e2d\u7684\u98df\u6750\u5373\u53ef\uff09\u3002 \u5728\u5f00\u6c34\u4e2d\u653e\u5165\u9752\u83dc\uff0c\u712f 5 \u5206\u949f\u5de6\u53f3\u540e\u76db\u51fa\u5907\u7528\u3002 \u5728\u5f00\u6c34\u4e2d\u653e\u5165\u65e0\u9aa8\u8089\uff0c\u712f 4 \u5206\u949f\u5de6\u53f3\u540e\u76db\u51fa\u5907\u7528\u3002 \u5728\u5f00\u6c34\u4e2d\u653e\u5165\u5317\u4eac\u9ebb\u8fa3\u65b9\u4fbf\u9762\uff0c\u716e 2 \u5206\u949f\u540e\u76db\u51fa\u5907\u7528\u3002 \u5012\u51fa\u5f00\u6c34\uff0c\u64e6\u5e72\u9505\u5177\uff0c\u653e\u5165 105 \u514b\u98df\u7528\u6cb9\uff0c\u5927\u706b\u52a0\u70ed 30 \u79d2\u3002 \u653e\u5165\u9ebb\u8fa3\u9999\u9505\u8c03\u6599\uff0c\u7ffb\u7092 20 \u79d2\u3002 \u653e\u5165\u5e72\u8fa3\u6912\uff0c\u7ffb\u7092 10 \u79d2\u3002 \u653e\u5165\u712f\u8fc7\u7684\u9752\u83dc\uff0c\u6539\u4e2d\u706b\uff0c\u7ffb\u7092 3 \u5206\u949f\u3002 \u653e\u5165\u712f\u8fc7\u7684\u65e0\u9aa8\u8089\uff0c\u7ffb\u7092 3 \u5206\u949f\u3002 \u653e\u5165\u716e\u8fc7\u7684\u5317\u4eac\u9ebb\u8fa3\u65b9\u4fbf\u9762\uff0c\u7528\u7b77\u5b50\u7ffb\u52a8 1 \u5206\u949f\u3002 \u5173\u706b\uff0c\u51fa\u9505\u3002 \u9644\u52a0\u5185\u5bb9 \u5173\u4e8e\u706b\u5019\u7684\u8bf4\u660e\uff1a \u5927\u706b\u901a\u5e38\u6e29\u5ea6\u5728 240 \u6444\u6c0f\u5ea6\u5de6\u53f3\uff0c\u4ee5\u7535\u78c1\u7089\u4e3a\u4f8b\uff0c\u8f93\u5165\u529f\u7387\u5927\u7ea6 2 \u5343\u74e6\u5de6\u53f3\u3002 \u4e2d\u706b\u901a\u5e38\u6e29\u5ea6\u5728 120 \u6444\u6c0f\u5ea6\u5de6\u53f3\uff0c\u4ee5\u7535\u78c1\u7089\u4e3a\u4f8b\uff0c\u8f93\u5165\u529f\u7387\u5927\u7ea6 1.4 \u5343\u74e6\u5de6\u53f3\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9ebb\u8fa3\u9999\u9505"},{"location":"dishes/meat_dish/%E9%BA%BB%E8%BE%A3%E9%A6%99%E9%94%85/#_1","text":"","title":"\u9ebb\u8fa3\u9999\u9505\u7684\u505a\u6cd5"},{"location":"dishes/meat_dish/%E9%BA%BB%E8%BE%A3%E9%A6%99%E9%94%85/#_2","text":"\u9752\u83dc\uff08\u6cb9\u83dc\u3001\u6cb9\u9ea6\u83dc\u3001\u83e0\u83dc\uff09 \u65e0\u9aa8\u8089\uff08\u732a\u8089\u3001\u725b\u8089\u3001\u9e21\u8089\u3001\u9c7c\u4e38\u3001\u706b\u817f\u80a0\uff09 \u5e72\u8c46\u8150 \u5317\u4eac\u9ebb\u8fa3\u65b9\u4fbf\u9762 \u5e72\u8fa3\u6912 \u9ebb\u8fa3\u9999\u9505\u8c03\u6599\uff08 \u793a\u4f8b\u56fe\u72471 \u3001 \u793a\u4f8b\u56fe\u72472 \uff09","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/meat_dish/%E9%BA%BB%E8%BE%A3%E9%A6%99%E9%94%85/#_3","text":"\u6b64\u6570\u503c\u5927\u7ea6\u662f 3 \u4e2a\u4eba\u7684\u91cf\u3002 \u9752\u83dc\u5171\u9700 455 \u514b\uff0c\u5176\u4e2d\u6cb9\u83dc\u3001\u6cb9\u9ea6\u83dc\u3001\u83e0\u83dc\u7684\u6bd4\u4f8b\u6309\u81ea\u5df1\u559c\u597d\u5206\u914d\u5373\u53ef \u65e0\u9aa8\u8089\u5171\u9700 430 \u514b\uff0c\u5176\u4e2d\u732a\u8089\u3001\u725b\u8089\u3001\u9e21\u8089\u3001\u9c7c\u4e38\u3001\u706b\u817f\u80a0\u7684\u6bd4\u4f8b\u6309\u81ea\u5df1\u559c\u597d\u5206\u914d\u5373\u53ef \u5e72\u8c46\u8150 152 \u514b \u5317\u4eac\u9ebb\u8fa3\u65b9\u4fbf\u9762 1 \u888b \u5e72\u8fa3\u6912 5 \u514b \u9ebb\u8fa3\u9999\u9505\u8c03\u6599 110 \u514b \u4ee5\u4e0a\u5185\u5bb9\u4e2d\uff0c\u9752\u83dc\u3001\u65e0\u9aa8\u8089\u3001\u5e72\u8c46\u8150\u3001\u5317\u4eac\u9ebb\u8fa3\u65b9\u4fbf\u9762\u7684\u914d\u6bd4\u4e3a\u63a8\u8350\u914d\u6bd4\uff0c\u5982\u679c\u4f60\u6709\u81ea\u5df1\u559c\u6b22\u7684\u98df\u6750\uff0c\u53ef\u4ee5\u6309\u559c\u597d\u91cd\u65b0\u5206\u914d\u6bd4\u4f8b\u3002","title":"\u8ba1\u7b97"},{"location":"dishes/meat_dish/%E9%BA%BB%E8%BE%A3%E9%A6%99%E9%94%85/#_4","text":"\u70e7\u5f00\u4e00\u9505\u6c34\uff08\u6c34\u91cf\u80fd\u6ca1\u8fc7\u7b2c 2-4 \u6b65\u4e2d\u7684\u98df\u6750\u5373\u53ef\uff09\u3002 \u5728\u5f00\u6c34\u4e2d\u653e\u5165\u9752\u83dc\uff0c\u712f 5 \u5206\u949f\u5de6\u53f3\u540e\u76db\u51fa\u5907\u7528\u3002 \u5728\u5f00\u6c34\u4e2d\u653e\u5165\u65e0\u9aa8\u8089\uff0c\u712f 4 \u5206\u949f\u5de6\u53f3\u540e\u76db\u51fa\u5907\u7528\u3002 \u5728\u5f00\u6c34\u4e2d\u653e\u5165\u5317\u4eac\u9ebb\u8fa3\u65b9\u4fbf\u9762\uff0c\u716e 2 \u5206\u949f\u540e\u76db\u51fa\u5907\u7528\u3002 \u5012\u51fa\u5f00\u6c34\uff0c\u64e6\u5e72\u9505\u5177\uff0c\u653e\u5165 105 \u514b\u98df\u7528\u6cb9\uff0c\u5927\u706b\u52a0\u70ed 30 \u79d2\u3002 \u653e\u5165\u9ebb\u8fa3\u9999\u9505\u8c03\u6599\uff0c\u7ffb\u7092 20 \u79d2\u3002 \u653e\u5165\u5e72\u8fa3\u6912\uff0c\u7ffb\u7092 10 \u79d2\u3002 \u653e\u5165\u712f\u8fc7\u7684\u9752\u83dc\uff0c\u6539\u4e2d\u706b\uff0c\u7ffb\u7092 3 \u5206\u949f\u3002 \u653e\u5165\u712f\u8fc7\u7684\u65e0\u9aa8\u8089\uff0c\u7ffb\u7092 3 \u5206\u949f\u3002 \u653e\u5165\u716e\u8fc7\u7684\u5317\u4eac\u9ebb\u8fa3\u65b9\u4fbf\u9762\uff0c\u7528\u7b77\u5b50\u7ffb\u52a8 1 \u5206\u949f\u3002 \u5173\u706b\uff0c\u51fa\u9505\u3002","title":"\u64cd\u4f5c"},{"location":"dishes/meat_dish/%E9%BA%BB%E8%BE%A3%E9%A6%99%E9%94%85/#_5","text":"\u5173\u4e8e\u706b\u5019\u7684\u8bf4\u660e\uff1a \u5927\u706b\u901a\u5e38\u6e29\u5ea6\u5728 240 \u6444\u6c0f\u5ea6\u5de6\u53f3\uff0c\u4ee5\u7535\u78c1\u7089\u4e3a\u4f8b\uff0c\u8f93\u5165\u529f\u7387\u5927\u7ea6 2 \u5343\u74e6\u5de6\u53f3\u3002 \u4e2d\u706b\u901a\u5e38\u6e29\u5ea6\u5728 120 \u6444\u6c0f\u5ea6\u5de6\u53f3\uff0c\u4ee5\u7535\u78c1\u7089\u4e3a\u4f8b\uff0c\u8f93\u5165\u529f\u7387\u5927\u7ea6 1.4 \u5343\u74e6\u5de6\u53f3\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/meat_dish/%E9%BB%84%E7%93%9C%E7%82%92%E8%82%89/","text":"\u9ec4\u74dc\u7092\u8089\u7684\u505a\u6cd5 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u9ec4\u74dc \u732a\u7626\u8089 \u98df\u7528\u6cb9 \u751f\u62bd \u76d0 \u849c \u5c0f\u7c73\u8fa3 \u8ba1\u7b97 \u9ec4\u74dc = 100 \u514b * \u4eba\u6570 \u732a\u8089 = 50 \u514b * \u4eba\u6570 \u6cb9\u91cf = 50 \u514b * \u4eba\u6570 \u76d0\u91cf = 10 \u514b * \u4eba\u6570 \u9171\u6cb9 = 5 \u514b * \u4eba\u6570 \u849c\u74e3 = 2 \u74e3 * \u4eba\u6570 \u5c0f\u7c73\u8fa3 = 1 \u6839 * \u4eba\u6570 \u64cd\u4f5c \u5c06\u732a\u7626\u8089\u5207\u7247\uff0c\u653e\u5165\u7897\u4e2d\uff0c\u5012\u5165\u98df\u7528\u6cb9 10 \u514b\uff0c\u751f\u62bd\uff0c\u6405\u62cc\u5747\u5300\uff0c\u814c\u5236 10 \u5206\u949f \u5c06\u9ec4\u74dc\u5207\u53bb 5 \u5398\u7c73\u7684\u5934\u5c3e\uff0c\u5269\u4f59\u90e8\u5206\u659c\u7740\u5207\u6210 0.5 \u5398\u7c73\u7684\u8584\u7247 \u5c06\u9ec4\u74dc\u5012\u5165\u7897\u4e2d\uff0c\u6492\u4e0a\u76d0 8 \u514b\uff0c\u6405\u62cc\u5747\u5300\uff0c\u814c\u5236 5 \u5206\u949f \u5c06\u849c\u74e3\u53bb\u76ae\uff0c\u538b\u6241\uff0c\u5207\u6210\u849c\u672b\u5907\u7528 \u5c06\u5c0f\u7c73\u8fa3\u53bb\u4e01\u5207\u5206\u6210\u5747\u5300 0.5 \u5398\u7c73\u7684\u6bb5\u72b6 \u70ed\u9505\uff0c\u5012\u6cb9 40 \u514b\uff0c\u7b49\u6cb9\u6e29\u5230\u5192\u70df\uff0c\u653e\u5165\u849c\u84c9\u5c0f\u7c73\u8fa3\u7ffb\u7092 5 \u6b21 \u653e\u5165\u814c\u5236\u597d\u7684\u732a\u7626\u8089\uff0c\u7ffb\u7092\u81f3\u8089\u719f\u53d8\u8272 \u653e\u5165\u9ec4\u74dc\uff0c\u52a0\u5165\u76d0 2 \u514b\uff0c\u7ffb\u7092\u5747\u5300\u534a\u5206\u949f\uff0c\u51fa\u9505 \u9644\u52a0\u5185\u5bb9 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9ec4\u74dc\u7092\u8089"},{"location":"dishes/meat_dish/%E9%BB%84%E7%93%9C%E7%82%92%E8%82%89/#_1","text":"","title":"\u9ec4\u74dc\u7092\u8089\u7684\u505a\u6cd5"},{"location":"dishes/meat_dish/%E9%BB%84%E7%93%9C%E7%82%92%E8%82%89/#_2","text":"\u9ec4\u74dc \u732a\u7626\u8089 \u98df\u7528\u6cb9 \u751f\u62bd \u76d0 \u849c \u5c0f\u7c73\u8fa3","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/meat_dish/%E9%BB%84%E7%93%9C%E7%82%92%E8%82%89/#_3","text":"\u9ec4\u74dc = 100 \u514b * \u4eba\u6570 \u732a\u8089 = 50 \u514b * \u4eba\u6570 \u6cb9\u91cf = 50 \u514b * \u4eba\u6570 \u76d0\u91cf = 10 \u514b * \u4eba\u6570 \u9171\u6cb9 = 5 \u514b * \u4eba\u6570 \u849c\u74e3 = 2 \u74e3 * \u4eba\u6570 \u5c0f\u7c73\u8fa3 = 1 \u6839 * \u4eba\u6570","title":"\u8ba1\u7b97"},{"location":"dishes/meat_dish/%E9%BB%84%E7%93%9C%E7%82%92%E8%82%89/#_4","text":"\u5c06\u732a\u7626\u8089\u5207\u7247\uff0c\u653e\u5165\u7897\u4e2d\uff0c\u5012\u5165\u98df\u7528\u6cb9 10 \u514b\uff0c\u751f\u62bd\uff0c\u6405\u62cc\u5747\u5300\uff0c\u814c\u5236 10 \u5206\u949f \u5c06\u9ec4\u74dc\u5207\u53bb 5 \u5398\u7c73\u7684\u5934\u5c3e\uff0c\u5269\u4f59\u90e8\u5206\u659c\u7740\u5207\u6210 0.5 \u5398\u7c73\u7684\u8584\u7247 \u5c06\u9ec4\u74dc\u5012\u5165\u7897\u4e2d\uff0c\u6492\u4e0a\u76d0 8 \u514b\uff0c\u6405\u62cc\u5747\u5300\uff0c\u814c\u5236 5 \u5206\u949f \u5c06\u849c\u74e3\u53bb\u76ae\uff0c\u538b\u6241\uff0c\u5207\u6210\u849c\u672b\u5907\u7528 \u5c06\u5c0f\u7c73\u8fa3\u53bb\u4e01\u5207\u5206\u6210\u5747\u5300 0.5 \u5398\u7c73\u7684\u6bb5\u72b6 \u70ed\u9505\uff0c\u5012\u6cb9 40 \u514b\uff0c\u7b49\u6cb9\u6e29\u5230\u5192\u70df\uff0c\u653e\u5165\u849c\u84c9\u5c0f\u7c73\u8fa3\u7ffb\u7092 5 \u6b21 \u653e\u5165\u814c\u5236\u597d\u7684\u732a\u7626\u8089\uff0c\u7ffb\u7092\u81f3\u8089\u719f\u53d8\u8272 \u653e\u5165\u9ec4\u74dc\uff0c\u52a0\u5165\u76d0 2 \u514b\uff0c\u7ffb\u7092\u5747\u5300\u534a\u5206\u949f\uff0c\u51fa\u9505","title":"\u64cd\u4f5c"},{"location":"dishes/meat_dish/%E9%BB%84%E7%93%9C%E7%82%92%E8%82%89/#_5","text":"\u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/meat_dish/%E5%87%89%E6%8B%8C%E9%B8%A1%E4%B8%9D/%E5%87%89%E6%8B%8C%E9%B8%A1%E4%B8%9D/","text":"\u51c9\u62cc\u9e21\u4e1d\u7684\u505a\u6cd5 \u9694\u79bb\u671f\u95f4\u7684\u4e00\u9053\u5feb\u624b\u83dc\uff0c\u5c11\u6cb9\u4f4e\u5361\uff0c\u5236\u4f5c\u7b80\u5355\uff0c\u9884\u8ba1\u5236\u4f5c\u65f6\u95f4 30 \u5206\u949f \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u9e21\u80f8\u8089\uff08\u5e38\u6e29\u51b7\u51bb\u5747\u53ef\uff09 \u9ebb\u6cb9\uff08\u82b1\u6912\u6cb9\uff09 \u751f\u62bd \u9999\u918b \u767d\u7cd6 \u76d0 \u6599\u9152 \u59dc \u51c9\u767d\u5f00\u6c34 \u8ba1\u7b97 \u6bcf\u4efd\uff1a \u9e21\u80f8\u8089 200 \u514b \u9ebb\u6cb9 5 \u6beb\u5347 \u751f\u62bd 4 \u6beb\u5347 \u9999\u918b 4 \u6beb\u5347 \u767d\u7cd6 3 \u514b \u76d0 2 \u514b \u59dc 20 \u514b \u64cd\u4f5c \u59dc\u5207\u7247\uff0c\u5907\u7528 \u9505\u4e2d\u5012\u5165 4 \u5347\u6c34 \u52a0\u5165\u9e21\u80f8\u8089\u3001\u59dc\u7247 \u5012\u5165 20 \u6beb\u5347\u6599\u9152 \u5f00\u5927\u706b\u4e0d\u76d6\u76d6\u5c06\u6c34\u70e7\u5f00 \u6c34\u5f00\u540e\u8f6c\u4e2d\u706b\uff0c\u7528\u52fa\u5b50\u5c06\u6d6e\u6cab\u635e\u51fa \u7ee7\u7eed\u716e 5-7 \u5206\u949f\uff0c\u5982\u679c\u662f\u975e\u51b7\u51bb\u8089\u716e 5 \u5206\u949f\uff0c\u51b7\u51bb\u8089\u716e 7 \u5206\u949f \u9e21\u80f8\u8089\u5927\u5c0f\u4f1a\u5f71\u54cd\u6210\u719f\u65f6\u95f4\uff0c\u7528\u7b77\u5b50\u63d2\u5165\u9e21\u80f8\u8089\uff0c\u5982\u679c\u80fd\u8f7b\u677e\u63d2\u5165\uff0c\u4ee3\u8868\u9e21\u8089\u719f\u4e86\u3002\u5982\u679c\u4e0d\u719f\u9700\u5ef6\u957f\u716e\u5236\u65f6\u95f4 \u7528\u51c9\u767d\u5f00\u6c34\u51b2\u6ce1\u9e21\u80f8\u8089\uff0c\u4f7f\u9e21\u80f8\u8089\u964d\u81f3\u5ba4\u6e29 \u987a\u7740\u9e21\u80f8\u8089\u7eb9\u7406\u5c06\u9e21\u80f8\u8089\u6495\u6210\u7ec6\u4e1d \u51c6\u5907\u4e00\u4e2a\u7897 \u7897\u4e2d\u52a0\u5165\u51c6\u5907\u597d\u7684\u9ebb\u6cb9\u3001\u751f\u62bd\u3001\u9999\u918b\u3001\u767d\u7cd6\u3001\u76d0 \u6405\u62cc\u6599\u6c41\uff0c\u4f7f\u7cd6\u548c\u76d0\u5c3d\u91cf\u6eb6\u5316 \u5c06\u6599\u6c41\u5012\u5165\u9e21\u4e1d\u4e2d\uff0c\u6405\u62cc\u5747\u5300 \u9644\u52a0\u5185\u5bb9 \u8fd9\u9053\u83dc\u662f\u9694\u79bb\u671f\u95f4\u7528\u73b0\u6709\u6750\u6599\u505a\u7684\uff0c\u6709\u6761\u4ef6\u53ef\u4ee5\u52a0\u5165\u9999\u83dc\u3001\u5c0f\u8471\u7b49\u8fdb\u884c\u8c03\u5473\uff0c\u559c\u6b22\u5403\u8fa3\u7684\u53ef\u4ee5\u52a0\u5165\u8fa3\u6912\u6cb9 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u51c9\u62cc\u9e21\u4e1d"},{"location":"dishes/meat_dish/%E5%87%89%E6%8B%8C%E9%B8%A1%E4%B8%9D/%E5%87%89%E6%8B%8C%E9%B8%A1%E4%B8%9D/#_1","text":"\u9694\u79bb\u671f\u95f4\u7684\u4e00\u9053\u5feb\u624b\u83dc\uff0c\u5c11\u6cb9\u4f4e\u5361\uff0c\u5236\u4f5c\u7b80\u5355\uff0c\u9884\u8ba1\u5236\u4f5c\u65f6\u95f4 30 \u5206\u949f","title":"\u51c9\u62cc\u9e21\u4e1d\u7684\u505a\u6cd5"},{"location":"dishes/meat_dish/%E5%87%89%E6%8B%8C%E9%B8%A1%E4%B8%9D/%E5%87%89%E6%8B%8C%E9%B8%A1%E4%B8%9D/#_2","text":"\u9e21\u80f8\u8089\uff08\u5e38\u6e29\u51b7\u51bb\u5747\u53ef\uff09 \u9ebb\u6cb9\uff08\u82b1\u6912\u6cb9\uff09 \u751f\u62bd \u9999\u918b \u767d\u7cd6 \u76d0 \u6599\u9152 \u59dc \u51c9\u767d\u5f00\u6c34","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/meat_dish/%E5%87%89%E6%8B%8C%E9%B8%A1%E4%B8%9D/%E5%87%89%E6%8B%8C%E9%B8%A1%E4%B8%9D/#_3","text":"\u6bcf\u4efd\uff1a \u9e21\u80f8\u8089 200 \u514b \u9ebb\u6cb9 5 \u6beb\u5347 \u751f\u62bd 4 \u6beb\u5347 \u9999\u918b 4 \u6beb\u5347 \u767d\u7cd6 3 \u514b \u76d0 2 \u514b \u59dc 20 \u514b","title":"\u8ba1\u7b97"},{"location":"dishes/meat_dish/%E5%87%89%E6%8B%8C%E9%B8%A1%E4%B8%9D/%E5%87%89%E6%8B%8C%E9%B8%A1%E4%B8%9D/#_4","text":"\u59dc\u5207\u7247\uff0c\u5907\u7528 \u9505\u4e2d\u5012\u5165 4 \u5347\u6c34 \u52a0\u5165\u9e21\u80f8\u8089\u3001\u59dc\u7247 \u5012\u5165 20 \u6beb\u5347\u6599\u9152 \u5f00\u5927\u706b\u4e0d\u76d6\u76d6\u5c06\u6c34\u70e7\u5f00 \u6c34\u5f00\u540e\u8f6c\u4e2d\u706b\uff0c\u7528\u52fa\u5b50\u5c06\u6d6e\u6cab\u635e\u51fa \u7ee7\u7eed\u716e 5-7 \u5206\u949f\uff0c\u5982\u679c\u662f\u975e\u51b7\u51bb\u8089\u716e 5 \u5206\u949f\uff0c\u51b7\u51bb\u8089\u716e 7 \u5206\u949f \u9e21\u80f8\u8089\u5927\u5c0f\u4f1a\u5f71\u54cd\u6210\u719f\u65f6\u95f4\uff0c\u7528\u7b77\u5b50\u63d2\u5165\u9e21\u80f8\u8089\uff0c\u5982\u679c\u80fd\u8f7b\u677e\u63d2\u5165\uff0c\u4ee3\u8868\u9e21\u8089\u719f\u4e86\u3002\u5982\u679c\u4e0d\u719f\u9700\u5ef6\u957f\u716e\u5236\u65f6\u95f4 \u7528\u51c9\u767d\u5f00\u6c34\u51b2\u6ce1\u9e21\u80f8\u8089\uff0c\u4f7f\u9e21\u80f8\u8089\u964d\u81f3\u5ba4\u6e29 \u987a\u7740\u9e21\u80f8\u8089\u7eb9\u7406\u5c06\u9e21\u80f8\u8089\u6495\u6210\u7ec6\u4e1d \u51c6\u5907\u4e00\u4e2a\u7897 \u7897\u4e2d\u52a0\u5165\u51c6\u5907\u597d\u7684\u9ebb\u6cb9\u3001\u751f\u62bd\u3001\u9999\u918b\u3001\u767d\u7cd6\u3001\u76d0 \u6405\u62cc\u6599\u6c41\uff0c\u4f7f\u7cd6\u548c\u76d0\u5c3d\u91cf\u6eb6\u5316 \u5c06\u6599\u6c41\u5012\u5165\u9e21\u4e1d\u4e2d\uff0c\u6405\u62cc\u5747\u5300","title":"\u64cd\u4f5c"},{"location":"dishes/meat_dish/%E5%87%89%E6%8B%8C%E9%B8%A1%E4%B8%9D/%E5%87%89%E6%8B%8C%E9%B8%A1%E4%B8%9D/#_5","text":"\u8fd9\u9053\u83dc\u662f\u9694\u79bb\u671f\u95f4\u7528\u73b0\u6709\u6750\u6599\u505a\u7684\uff0c\u6709\u6761\u4ef6\u53ef\u4ee5\u52a0\u5165\u9999\u83dc\u3001\u5c0f\u8471\u7b49\u8fdb\u884c\u8c03\u5473\uff0c\u559c\u6b22\u5403\u8fa3\u7684\u53ef\u4ee5\u52a0\u5165\u8fa3\u6912\u6cb9 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/meat_dish/%E5%8F%A3%E6%B0%B4%E9%B8%A1/%E5%8F%A3%E6%B0%B4%E9%B8%A1/","text":"\u53e3\u6c34\u9e21\u7684\u505a\u6cd5 \u53e3\u6c34\u9e21\uff08\u51c9\u83dc\uff09\uff0c\u708e\u708e\u590f\u65e5\u91cc\uff0c\u70ed\u83dc\u96be\u4ee5\u5165\u53e3\uff0c\u4f46\u53c8\u55dc\u8089\u5982\u547d\uff0c \u9664\u4e86\u53e3\u6c34\u9e21\uff0c\u5b9e\u5728\u60f3\u4e0d\u51fa\u66f4\u597d\u7684\u9002\u5408\u5728\u590f\u5929\u5403\u7684\u8089\u83dc\u4e86\u3002 \u88ab\u7ea2\u6cb9\u5305\u88f9\u7684\u9e21\u8089\uff0c\u7ea2\u8273\u9c9c\u4eae\uff0c\u51b0\u723d Q \u5f39\uff0c\u9c9c\u7f8e\u800c\u4e0d\u817b\u3002\u590f\u65e5\u7c73\u996d\u6740\u624b\u5f53\u4e4b\u65e0\u6127! \uff08\u6ce8\uff1a\u53e3\u6c34\u9e21\u505a\u6cd5\u591a\u6837\uff0c\u6b22\u8fce\u8865\u5145\uff09 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u534a\u53ea\u9e21 \u8fa3\u6912\u7c89 \u82b1\u6912 \u82b1\u751f \u8471\u59dc\u849c \u82b1\u6912 \u767d\u7cd6 \u751f\u62bd \u918b \u5473\u7cbe \u8ba1\u7b97 \u6bcf\u4efd\uff1a \u98df\u7528\u6cb9 20ml \u9e21 \u534a\u53ea(500g) \u8fa3\u6912\u7c89 20g \u82b1\u6912 30 \u9897(20g) \u82b1\u751f 10 \u9897(30g) \u5c0f\u8471 2 \u9897(50g) \u59dc 1 \u5c0f\u5757(20g) \u849c 2 \u4e2a (10g) \u767d\u7cd6 5g \u751f\u62bd 5ml \u918b 5ml \u5473\u7cbe 5g \u82b1\u6912\u7c89 5g \u9999\u83dc 5g \u64cd\u4f5c \u59dc\u5207\u7247\uff0c1 \u9897\u5c0f\u8471\uff0c15 \u9897\u82b1\u6912\u5907\u7528 \u9e21\u8089\u6d17\u5e72\u51c0\uff0c\u653e\u5165\u9505\u4e2d\uff0c\u6e05\u6c34\u6ca1\u8fc7\u9e21\u8089\uff0c\u653e\u5165\u59dc\u7247\u3001\u5c0f\u8471\u548c\u82b1\u6912\uff0c\u5f00\u5927\u706b\u70e7\u5f00\u3002 \u5927\u706b\u70e7\u5f00\u540e\uff0c\u8f6c\u4e2d\u5c0f\u706b 20 \u5206\u949f\u5173\u706b \u53d6\u51fa\u9e21\u8089\uff0c\u653e\u5165\u51b0\u6c34\u4e2d\uff0c\u76f4\u81f3\u51b0\u51c9 \u53d6\u51fa\u9e21\u8089\uff0c\u5207\u5757\u6446\u76d8\u5b50\u4e2d\uff0c\u5907\u7528 \u5c0f\u706b\u628a\u9505\u70e7\u70ed\uff0c\u5bfc\u5165\u82b1\u751f\uff0c\u70d8\u70e4\u81f3\u8868\u76ae\u7206\u88c2\u3002\uff08\u6ce8\u610f\u968f\u65f6\u7ffb\u52a8\uff0c\u4e0d\u8981\u7cca\u4e86\uff09 \u4e00\u9897\u8471\u5207\u6210\u6bb5\uff0c\u849c\u62cd\u6210\u672b\uff0c\u82b1\u6912 15 \u9897\uff0c\u82b1\u751f\u53bb\u76ae\u5207\u788e\u3002 \u9505\u5185\u5bfc\u5165\u6cb9\u70e7\u70ed\u540e\uff0c\u653e\u5165\u8471\u6bb5\uff0c\u82b1\u6912\u548c\u4e00\u534a\u849c\u672b\uff0c\u7092\u9999 \u7092\u81f3\u6cb9\u6e29 8 \u6210\u70ed\uff0c\u5173\u706b\uff0c\u6ee4\u51fa\u70ed\u6cb9 \u5c06\u70ed\u6cb9\u5012\u5165\u653e\u8fa3\u6912\u7c89\u7684\u7897\u4e2d\uff0c\u6405\u62cc\uff0c\u5e76\u6ee4\u51fa\u7ea2\u6cb9 \u7ea2\u6cb9\u4e2d\u653e\u5165\u5269\u4f59\u849c\u672b\u3001\u751f\u62bd\u3001\u918b\u3001\u76d0\u3001\u5473\u7cbe\u3001\u7cd6\u3001\u9999\u6cb9\u3001\u82b1\u6912\u7c89\u3002\u62cc\u5300\u653e\u51c9 \u5728\u9e21\u8089\u4e0a\u6492\u4e0a\u82b1\u751f\u788e\uff0c\u628a\u7ea2\u6cb9\u6dcb\u5230\u5207\u597d\u7684\u9e21\u8089\u4e0a\uff0c\u6492\u4e0a\u9999\u83dc\u3002\u6210\u76d8 \u9644\u52a0\u5185\u5bb9 \u53e3\u6c34\u9e21\u7b2c\u4e8c\u79cd\u505a\u6cd5\u5f85\u66f4 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u53e3\u6c34\u9e21"},{"location":"dishes/meat_dish/%E5%8F%A3%E6%B0%B4%E9%B8%A1/%E5%8F%A3%E6%B0%B4%E9%B8%A1/#_1","text":"\u53e3\u6c34\u9e21\uff08\u51c9\u83dc\uff09\uff0c\u708e\u708e\u590f\u65e5\u91cc\uff0c\u70ed\u83dc\u96be\u4ee5\u5165\u53e3\uff0c\u4f46\u53c8\u55dc\u8089\u5982\u547d\uff0c \u9664\u4e86\u53e3\u6c34\u9e21\uff0c\u5b9e\u5728\u60f3\u4e0d\u51fa\u66f4\u597d\u7684\u9002\u5408\u5728\u590f\u5929\u5403\u7684\u8089\u83dc\u4e86\u3002 \u88ab\u7ea2\u6cb9\u5305\u88f9\u7684\u9e21\u8089\uff0c\u7ea2\u8273\u9c9c\u4eae\uff0c\u51b0\u723d Q \u5f39\uff0c\u9c9c\u7f8e\u800c\u4e0d\u817b\u3002\u590f\u65e5\u7c73\u996d\u6740\u624b\u5f53\u4e4b\u65e0\u6127! \uff08\u6ce8\uff1a\u53e3\u6c34\u9e21\u505a\u6cd5\u591a\u6837\uff0c\u6b22\u8fce\u8865\u5145\uff09","title":"\u53e3\u6c34\u9e21\u7684\u505a\u6cd5"},{"location":"dishes/meat_dish/%E5%8F%A3%E6%B0%B4%E9%B8%A1/%E5%8F%A3%E6%B0%B4%E9%B8%A1/#_2","text":"\u534a\u53ea\u9e21 \u8fa3\u6912\u7c89 \u82b1\u6912 \u82b1\u751f \u8471\u59dc\u849c \u82b1\u6912 \u767d\u7cd6 \u751f\u62bd \u918b \u5473\u7cbe","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/meat_dish/%E5%8F%A3%E6%B0%B4%E9%B8%A1/%E5%8F%A3%E6%B0%B4%E9%B8%A1/#_3","text":"\u6bcf\u4efd\uff1a \u98df\u7528\u6cb9 20ml \u9e21 \u534a\u53ea(500g) \u8fa3\u6912\u7c89 20g \u82b1\u6912 30 \u9897(20g) \u82b1\u751f 10 \u9897(30g) \u5c0f\u8471 2 \u9897(50g) \u59dc 1 \u5c0f\u5757(20g) \u849c 2 \u4e2a (10g) \u767d\u7cd6 5g \u751f\u62bd 5ml \u918b 5ml \u5473\u7cbe 5g \u82b1\u6912\u7c89 5g \u9999\u83dc 5g","title":"\u8ba1\u7b97"},{"location":"dishes/meat_dish/%E5%8F%A3%E6%B0%B4%E9%B8%A1/%E5%8F%A3%E6%B0%B4%E9%B8%A1/#_4","text":"\u59dc\u5207\u7247\uff0c1 \u9897\u5c0f\u8471\uff0c15 \u9897\u82b1\u6912\u5907\u7528 \u9e21\u8089\u6d17\u5e72\u51c0\uff0c\u653e\u5165\u9505\u4e2d\uff0c\u6e05\u6c34\u6ca1\u8fc7\u9e21\u8089\uff0c\u653e\u5165\u59dc\u7247\u3001\u5c0f\u8471\u548c\u82b1\u6912\uff0c\u5f00\u5927\u706b\u70e7\u5f00\u3002 \u5927\u706b\u70e7\u5f00\u540e\uff0c\u8f6c\u4e2d\u5c0f\u706b 20 \u5206\u949f\u5173\u706b \u53d6\u51fa\u9e21\u8089\uff0c\u653e\u5165\u51b0\u6c34\u4e2d\uff0c\u76f4\u81f3\u51b0\u51c9 \u53d6\u51fa\u9e21\u8089\uff0c\u5207\u5757\u6446\u76d8\u5b50\u4e2d\uff0c\u5907\u7528 \u5c0f\u706b\u628a\u9505\u70e7\u70ed\uff0c\u5bfc\u5165\u82b1\u751f\uff0c\u70d8\u70e4\u81f3\u8868\u76ae\u7206\u88c2\u3002\uff08\u6ce8\u610f\u968f\u65f6\u7ffb\u52a8\uff0c\u4e0d\u8981\u7cca\u4e86\uff09 \u4e00\u9897\u8471\u5207\u6210\u6bb5\uff0c\u849c\u62cd\u6210\u672b\uff0c\u82b1\u6912 15 \u9897\uff0c\u82b1\u751f\u53bb\u76ae\u5207\u788e\u3002 \u9505\u5185\u5bfc\u5165\u6cb9\u70e7\u70ed\u540e\uff0c\u653e\u5165\u8471\u6bb5\uff0c\u82b1\u6912\u548c\u4e00\u534a\u849c\u672b\uff0c\u7092\u9999 \u7092\u81f3\u6cb9\u6e29 8 \u6210\u70ed\uff0c\u5173\u706b\uff0c\u6ee4\u51fa\u70ed\u6cb9 \u5c06\u70ed\u6cb9\u5012\u5165\u653e\u8fa3\u6912\u7c89\u7684\u7897\u4e2d\uff0c\u6405\u62cc\uff0c\u5e76\u6ee4\u51fa\u7ea2\u6cb9 \u7ea2\u6cb9\u4e2d\u653e\u5165\u5269\u4f59\u849c\u672b\u3001\u751f\u62bd\u3001\u918b\u3001\u76d0\u3001\u5473\u7cbe\u3001\u7cd6\u3001\u9999\u6cb9\u3001\u82b1\u6912\u7c89\u3002\u62cc\u5300\u653e\u51c9 \u5728\u9e21\u8089\u4e0a\u6492\u4e0a\u82b1\u751f\u788e\uff0c\u628a\u7ea2\u6cb9\u6dcb\u5230\u5207\u597d\u7684\u9e21\u8089\u4e0a\uff0c\u6492\u4e0a\u9999\u83dc\u3002\u6210\u76d8","title":"\u64cd\u4f5c"},{"location":"dishes/meat_dish/%E5%8F%A3%E6%B0%B4%E9%B8%A1/%E5%8F%A3%E6%B0%B4%E9%B8%A1/#_5","text":"\u53e3\u6c34\u9e21\u7b2c\u4e8c\u79cd\u505a\u6cd5\u5f85\u66f4 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/meat_dish/%E5%9C%9F%E8%B1%86%E7%82%96%E6%8E%92%E9%AA%A8/%E5%9C%9F%E8%B1%86%E7%82%96%E6%8E%92%E9%AA%A8/","text":"\u571f\u8c46\u7096\u6392\u9aa8\u7684\u505a\u6cd5 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u808b\u6392 \u571f\u8c46 \u59dc \u5c0f\u8471 \u6599\u9152 \u767d\u7cd6 \u5e72\u8fa3\u6912 \u516b\u89d2 \u82b1\u6912 \u6842\u76ae \u751f\u62bd \u8001\u62bd \u8017\u6cb9 \u9ec4\u8c46\u9171 \u8ba1\u7b97 \u808b\u6392 = 750g \u571f\u8c46 = 300g \u59dc = 30g \u5c0f\u8471 = 25g \u6599\u9152 = 25g \u767d\u7cd6 = 10g \u5e72\u8fa3\u6912 = 5g \u516b\u89d2 = 5g \u82b1\u6912 = 5g \u6842\u76ae = 5g \u751f\u62bd = 10g \u8001\u62bd = 5g \u8017\u6cb9 = 5g \u9ec4\u8c46\u9171 = 5g \u64cd\u4f5c \u571f\u8c46\u4e24\u4e2a\u6eda\u5200\u5207\u7247\uff0c\u59dc\u7247\u5207\u7247 \u6392\u9aa8 750g \u51b7\u6c34\u4e0b\u9505\uff0c\u52a0\u5165\u59dc\u7247\u3001\u8471\u6bb5\u3001\u6599\u9152\u712f\u6c34\u4e24\u5206\u949f\u5de6\u53f3\uff0c\u712f\u5e72\u6c34\u540e\u635e\u51fa\u6e05\u6d17\u5e72\u51c0\uff08\u4e00\u5b9a\u8981\u7528\u70ed\u6c34\uff0c\u4e0d\u80fd\u7528\u51b7\u6c34\uff09 \u70ed\u9505\u51c9\u6cb9\uff0c\u5c06\u767d\u7cd6\u5012\u5165\u9505\u4e2d\uff0c\u7ffb\u7092\u81f3\u878d\u5316\u4e3a\u7126\u7cd6\u8272 \u52a0\u5165\u6392\u9aa8\u714e\u81f3\u4e24\u9762\u91d1\u9ec4\uff0c\u8ba9\u6392\u9aa8\u88f9\u6ee1\u7126\u7cd6 \u52a0\u5165\u5e72\u8fa3\u6912\u3001\u516b\u89d2\u3001\u82b1\u6912\u3001\u6842\u76ae\u3001\u59dc\u7247\uff08\u5efa\u8bae\u4e70\u8d85\u5e02\u7684\u9999\u6599\u5305\uff09\u3001\u4e24\u52fa\u751f\u62bd\u3001\u4e00\u52fa\u8001\u62bd\u3001\u4e00\u52fa\u6599\u9152\u3001\u4e00\u52fa\u8017\u6cb9\u3001\u4e00\u52fa\u9ec4\u8c46\u9171 \u5927\u706b\u7ffb\u7092\u5747\u5300\u540e\u52a0\u5165 700ml \u5f00\u6c34\uff0c\u5927\u706b\u70e7\u5f00\u540e\u8f6c\u5c0f\u706b\u7116\u716e\u4e00\u5c0f\u65f6\u5de6\u53f3 \u6700\u540e\u52a0\u5165\u571f\u8c46\u716e 10 \u5206\u949f\u5c31\u53ef\u4ee5\u51fa\u9505\u5566\uff08\u559c\u6b22\u5403\u9752\u7ea2\u6912\u7684\u4e5f\u53ef\u4ee5\u6309\u81ea\u5df1\u559c\u597d\u52a0\u5165\uff09 \u9644\u52a0\u5185\u5bb9 \u8fd9\u9053\u83dc\u96be\u5ea6\u7cfb\u6570\u7b80\u5355\uff0c\u5bf9\u65b0\u624b\u53cb\u597d\uff0c\u8d85\u7ea7\u4e0b\u996d \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u571f\u8c46\u7096\u6392\u9aa8"},{"location":"dishes/meat_dish/%E5%9C%9F%E8%B1%86%E7%82%96%E6%8E%92%E9%AA%A8/%E5%9C%9F%E8%B1%86%E7%82%96%E6%8E%92%E9%AA%A8/#_1","text":"","title":"\u571f\u8c46\u7096\u6392\u9aa8\u7684\u505a\u6cd5"},{"location":"dishes/meat_dish/%E5%9C%9F%E8%B1%86%E7%82%96%E6%8E%92%E9%AA%A8/%E5%9C%9F%E8%B1%86%E7%82%96%E6%8E%92%E9%AA%A8/#_2","text":"\u808b\u6392 \u571f\u8c46 \u59dc \u5c0f\u8471 \u6599\u9152 \u767d\u7cd6 \u5e72\u8fa3\u6912 \u516b\u89d2 \u82b1\u6912 \u6842\u76ae \u751f\u62bd \u8001\u62bd \u8017\u6cb9 \u9ec4\u8c46\u9171","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/meat_dish/%E5%9C%9F%E8%B1%86%E7%82%96%E6%8E%92%E9%AA%A8/%E5%9C%9F%E8%B1%86%E7%82%96%E6%8E%92%E9%AA%A8/#_3","text":"\u808b\u6392 = 750g \u571f\u8c46 = 300g \u59dc = 30g \u5c0f\u8471 = 25g \u6599\u9152 = 25g \u767d\u7cd6 = 10g \u5e72\u8fa3\u6912 = 5g \u516b\u89d2 = 5g \u82b1\u6912 = 5g \u6842\u76ae = 5g \u751f\u62bd = 10g \u8001\u62bd = 5g \u8017\u6cb9 = 5g \u9ec4\u8c46\u9171 = 5g","title":"\u8ba1\u7b97"},{"location":"dishes/meat_dish/%E5%9C%9F%E8%B1%86%E7%82%96%E6%8E%92%E9%AA%A8/%E5%9C%9F%E8%B1%86%E7%82%96%E6%8E%92%E9%AA%A8/#_4","text":"\u571f\u8c46\u4e24\u4e2a\u6eda\u5200\u5207\u7247\uff0c\u59dc\u7247\u5207\u7247 \u6392\u9aa8 750g \u51b7\u6c34\u4e0b\u9505\uff0c\u52a0\u5165\u59dc\u7247\u3001\u8471\u6bb5\u3001\u6599\u9152\u712f\u6c34\u4e24\u5206\u949f\u5de6\u53f3\uff0c\u712f\u5e72\u6c34\u540e\u635e\u51fa\u6e05\u6d17\u5e72\u51c0\uff08\u4e00\u5b9a\u8981\u7528\u70ed\u6c34\uff0c\u4e0d\u80fd\u7528\u51b7\u6c34\uff09 \u70ed\u9505\u51c9\u6cb9\uff0c\u5c06\u767d\u7cd6\u5012\u5165\u9505\u4e2d\uff0c\u7ffb\u7092\u81f3\u878d\u5316\u4e3a\u7126\u7cd6\u8272 \u52a0\u5165\u6392\u9aa8\u714e\u81f3\u4e24\u9762\u91d1\u9ec4\uff0c\u8ba9\u6392\u9aa8\u88f9\u6ee1\u7126\u7cd6 \u52a0\u5165\u5e72\u8fa3\u6912\u3001\u516b\u89d2\u3001\u82b1\u6912\u3001\u6842\u76ae\u3001\u59dc\u7247\uff08\u5efa\u8bae\u4e70\u8d85\u5e02\u7684\u9999\u6599\u5305\uff09\u3001\u4e24\u52fa\u751f\u62bd\u3001\u4e00\u52fa\u8001\u62bd\u3001\u4e00\u52fa\u6599\u9152\u3001\u4e00\u52fa\u8017\u6cb9\u3001\u4e00\u52fa\u9ec4\u8c46\u9171 \u5927\u706b\u7ffb\u7092\u5747\u5300\u540e\u52a0\u5165 700ml \u5f00\u6c34\uff0c\u5927\u706b\u70e7\u5f00\u540e\u8f6c\u5c0f\u706b\u7116\u716e\u4e00\u5c0f\u65f6\u5de6\u53f3 \u6700\u540e\u52a0\u5165\u571f\u8c46\u716e 10 \u5206\u949f\u5c31\u53ef\u4ee5\u51fa\u9505\u5566\uff08\u559c\u6b22\u5403\u9752\u7ea2\u6912\u7684\u4e5f\u53ef\u4ee5\u6309\u81ea\u5df1\u559c\u597d\u52a0\u5165\uff09","title":"\u64cd\u4f5c"},{"location":"dishes/meat_dish/%E5%9C%9F%E8%B1%86%E7%82%96%E6%8E%92%E9%AA%A8/%E5%9C%9F%E8%B1%86%E7%82%96%E6%8E%92%E9%AA%A8/#_5","text":"\u8fd9\u9053\u83dc\u96be\u5ea6\u7cfb\u6570\u7b80\u5355\uff0c\u5bf9\u65b0\u624b\u53cb\u597d\uff0c\u8d85\u7ea7\u4e0b\u996d \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/meat_dish/%E5%A7%9C%E7%82%92%E9%B8%A1/%E5%A7%9C%E7%82%92%E9%B8%A1/","text":"\u59dc\u7092\u9e21\u7684\u505a\u6cd5 \u59dc\u7092\u9e21\u662f\u4e00\u9053\u6e56\u5357\u53e3\u5473\u83dc\uff0c\u4e0b\u996d\u4e94\u9897\u661f\uff0c\u98df\u6750\u5e73\u5e73\u65e0\u5947\u53c8\u5341\u5206\u5bb9\u6613\u70f9\u5236\uff0c\u5305\u4f60\u4e00\u5b66\u5c31\u4f1a\u3002 \u5fc5\u5907\u539f\u6599\u548c\u8ba1\u7b97 \u9e21 = \u534a\u53ea\uff08\u571f\u9e21\u6700\u597d\uff0c\u9884\u8ba1 650g\uff09 \u98df\u7528\u6cb9 = 50ml\uff08\u8336\u6cb9\u6700\u597d\uff0c\u6ca1\u6709\u5c31\u7528\u83dc\u7c7d\u6cb9\uff09 \u751f\u59dc = \u534a\u65a4 (250g) \u5564\u9152 = \u534a\u74f6 250ml \u751f\u62bd = 20ml \u8001\u62bd = 10ml \u76d0 = 3g \u5c0f\u7c73\u6912 = 0-5 \u4e2a (0-50g)\uff08\u6839\u636e\u8fa3\u53e3\u5473\u8c03\u6574\uff09 \u7f8e\u4eba\u8fa3 = 0-5 \u4e2a (0-50g)\uff08\u6ca1\u6709\u53ef\u4ee5\u7528\u5c0f\u7c73\u6912\u4ee3\u66ff\uff09 \u6ce1\u6912 = 5 \u4e2a (50g) \u5927\u849c = 3 \u5934 (50g) \u64cd\u4f5c \u9e21\u5c3d\u91cf\u5241\u6210 1cm \u7684\u5c0f\u5757\uff0c\u6d17\u51c0\u540e\u6ee4\u5e72\uff0c\u518d\u653e\u751f\u62bd\u814c\u548c\u6599\u9152\u814c\u5236 30 \u5206\u949f \u5927\u5148\u70ed\u9505\u5230\u5fae\u5fae\u5192\u70df\uff0c\u653e\u5165\u98df\u7528\u6cb9\uff0c\u7b49 5 \u79d2 \u4e0b\u5165\u59dc\u7247\u540e\u8f6c\u4e2d\u706b\u7092 30 \u79d2\uff0c \u4e0b\u5165\u9e21\u5757\u7ffb\u7092 3 \u5206\u949f\uff0c\u7092\u5e72\u6c34\u5206\uff0c\u7092\u51fa\u9e21\u6cb9 \u653e\u5165\u5404\u79cd\u5241\u788e\u7684\u8fa3\u6912\u548c\u5927\u849c\u5b50\uff0c\u52a0\u76d0\u548c\u8001\u62bd\u7ee7\u7eed\u7ffb\u7092 30 \u79d2 \u5012\u5165\u5564\u9152\uff0c\u4e2d\u5c0f\u706b\u7116 2 \u5206\u949f \u5927\u706b\u6536\u6c41\u76db\u76d8 \u9644\u52a0\u5185\u5bb9 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u59dc\u7092\u9e21"},{"location":"dishes/meat_dish/%E5%A7%9C%E7%82%92%E9%B8%A1/%E5%A7%9C%E7%82%92%E9%B8%A1/#_1","text":"\u59dc\u7092\u9e21\u662f\u4e00\u9053\u6e56\u5357\u53e3\u5473\u83dc\uff0c\u4e0b\u996d\u4e94\u9897\u661f\uff0c\u98df\u6750\u5e73\u5e73\u65e0\u5947\u53c8\u5341\u5206\u5bb9\u6613\u70f9\u5236\uff0c\u5305\u4f60\u4e00\u5b66\u5c31\u4f1a\u3002","title":"\u59dc\u7092\u9e21\u7684\u505a\u6cd5"},{"location":"dishes/meat_dish/%E5%A7%9C%E7%82%92%E9%B8%A1/%E5%A7%9C%E7%82%92%E9%B8%A1/#_2","text":"\u9e21 = \u534a\u53ea\uff08\u571f\u9e21\u6700\u597d\uff0c\u9884\u8ba1 650g\uff09 \u98df\u7528\u6cb9 = 50ml\uff08\u8336\u6cb9\u6700\u597d\uff0c\u6ca1\u6709\u5c31\u7528\u83dc\u7c7d\u6cb9\uff09 \u751f\u59dc = \u534a\u65a4 (250g) \u5564\u9152 = \u534a\u74f6 250ml \u751f\u62bd = 20ml \u8001\u62bd = 10ml \u76d0 = 3g \u5c0f\u7c73\u6912 = 0-5 \u4e2a (0-50g)\uff08\u6839\u636e\u8fa3\u53e3\u5473\u8c03\u6574\uff09 \u7f8e\u4eba\u8fa3 = 0-5 \u4e2a (0-50g)\uff08\u6ca1\u6709\u53ef\u4ee5\u7528\u5c0f\u7c73\u6912\u4ee3\u66ff\uff09 \u6ce1\u6912 = 5 \u4e2a (50g) \u5927\u849c = 3 \u5934 (50g)","title":"\u5fc5\u5907\u539f\u6599\u548c\u8ba1\u7b97"},{"location":"dishes/meat_dish/%E5%A7%9C%E7%82%92%E9%B8%A1/%E5%A7%9C%E7%82%92%E9%B8%A1/#_3","text":"\u9e21\u5c3d\u91cf\u5241\u6210 1cm \u7684\u5c0f\u5757\uff0c\u6d17\u51c0\u540e\u6ee4\u5e72\uff0c\u518d\u653e\u751f\u62bd\u814c\u548c\u6599\u9152\u814c\u5236 30 \u5206\u949f \u5927\u5148\u70ed\u9505\u5230\u5fae\u5fae\u5192\u70df\uff0c\u653e\u5165\u98df\u7528\u6cb9\uff0c\u7b49 5 \u79d2 \u4e0b\u5165\u59dc\u7247\u540e\u8f6c\u4e2d\u706b\u7092 30 \u79d2\uff0c \u4e0b\u5165\u9e21\u5757\u7ffb\u7092 3 \u5206\u949f\uff0c\u7092\u5e72\u6c34\u5206\uff0c\u7092\u51fa\u9e21\u6cb9 \u653e\u5165\u5404\u79cd\u5241\u788e\u7684\u8fa3\u6912\u548c\u5927\u849c\u5b50\uff0c\u52a0\u76d0\u548c\u8001\u62bd\u7ee7\u7eed\u7ffb\u7092 30 \u79d2 \u5012\u5165\u5564\u9152\uff0c\u4e2d\u5c0f\u706b\u7116 2 \u5206\u949f \u5927\u706b\u6536\u6c41\u76db\u76d8","title":"\u64cd\u4f5c"},{"location":"dishes/meat_dish/%E5%A7%9C%E7%82%92%E9%B8%A1/%E5%A7%9C%E7%82%92%E9%B8%A1/#_4","text":"\u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/meat_dish/%E5%AE%AB%E4%BF%9D%E9%B8%A1%E4%B8%81/%E5%AE%AB%E4%BF%9D%E9%B8%A1%E4%B8%81/","text":"\u5bab\u4fdd\u9e21\u4e01\u7684\u505a\u6cd5 \u8001\u6d3e\u5ddd\u83dc\u7684\u7b80\u5355\u505a\u6cd5\u5206\u4eab \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u624b\u67aa\u817f\uff08\u6216\u8005\u9e21\u80f8\u812f\u8089\uff09 \u5927\u8471 \u5e72\u8fa3\u6912\uff08\u6216\u8005\u4e8c\u8346\u6761\uff09 \u719f\u82b1\u751f \u751f\u62bd\u9171\u6cb9 \u9999\u918b \u767d\u7cd6 \u6599\u9152 \u76d0 \u9e21\u7cbe \u6dc0\u7c89 \u690d\u7269\u6cb9 \u829d\u9ebb\u6cb9 \u53ef\u9009\u539f\u6599 \u6cb9\u6cfc\u8fa3\u5b50 \u83b4\u7b0b \u751f\u82b1\u751f \u8c46\u74e3\u9171 \u8ba1\u7b97 \u6ce8\u610f\uff0c\u8fd9\u9053\u83dc\u9ed8\u8ba4\u4e00\u4eba\u7248\u672c\uff0c\u4e24\u4eba\u4e5f\u591f\u5403\uff0c\u7406\u8bba\u4e0a\u591a\u4eba\u53ea\u9700\u7b80\u5355\u52a0\u500d\u5373\u53ef\u3002 \u5fc5\u987b\u914d\u6599 \u624b\u67aa\u817f\uff08\u6216\u8005\u9e21\u80f8\u812f\u8089\uff09 = 1 \u652f\uff08\u7ea6 350g\uff09 \u5927\u8471 = 1 \u6839\uff08\u7ea6 180g\uff09 \u719f\u82b1\u751f = 150g \u59dc\u7247 = 10g \u5e72\u8fa3\u6912\uff08\u6216\u8005\u4e8c\u8346\u6761\uff09 = 10g\uff08\u82e5\u9009\u62e9\u4e8c\u8346\u6761\uff0c\u5219\u9700\u8981\u5927\u7ea6 4 \u652f\uff09 \u751f\u62bd\u9171\u6cb9 = 10g \u767d\u7cd6 = 2g \u76d0 = 2g \u690d\u7269\u6cb9 = 20g \u6dc0\u7c89 = 15g \u6599\u9152 = 15g \u8fdb\u9636\u914d\u6599 \u8001\u62bd\u9171\u6cb9 = 5g \u82b1\u6912 = 5g \u9999\u918b = 5g \u9e21\u7cbe = 2g \u829d\u9ebb\u6cb9 = 10g \u6dc0\u7c89\uff08\u7528\u4ee5\u52fe\u82a1\uff09 = 10g \u8c46\u74e3\u9171 = 10g \u53ef\u9009\u914d\u6599 \u83b4\u7b0b = \u7ea6 250g \u6cb9\u6cfc\u8fa3\u5b50 = 5g \u4f7f\u7528\u4e0a\u8ff0\u6761\u4ef6\uff0c\u8ba1\u7b97\u51fa\u8ba1\u5212\u4f7f\u7528\u7684\u539f\u6750\u6599\u6bd4\u4f8b\uff0c\u4f9d\u53e3\u5473\u8c03\u6574\u3002 \u64cd\u4f5c \u7b80\u6613\u7248\u672c \u624b\u67aa\u817f\u7528\u526a\u5200\u53bb\u9aa8\uff0c\u9e21\u8089\u9762\u7528\u5200\u80cc\u62cd\u6253\u4e00\u904d\uff0c\u5207\u6761\u540e\u5207\u81f3 1.5cm \u89c1\u65b9\u8089\u4e01\uff1b\u6ce1\u4e8e\u6e05\u6c34 10min\uff0c\u635e\u51fa\u63a7\u5e72\u5907\u7528\uff08\u82e5\u662f\u9e21\u80f8\u812f\u8089\uff0c\u5219\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u5207\u4e01\u4ee5\u53ca\u4e4b\u540e\u7684\u52a8\u4f5c\uff09 \u53d6\u5927\u8471\u8471\u7eff\u4e0e\u59dc\u7247 5g \u4e8e\u7897\u4e2d\uff0c\u5012\u5165 50g \u5f00\u6c34\u5907\u7528\uff1b\u8471\u767d\u5207 1.5cm \u5706\u7c92\u5907\u7528\uff1b\u53d6\u82b1\u751f\u653e\u5165\u5fae\u6ce2\u7089\u9ad8\u706b 5 \u5206\u949f\u7119\u5e72\u5907\u7528 \u9e21\u4e01\u4e2d\u52a0\u5165\u76d0 2g\uff0c\u8001\u62bd\u9171\u6cb9 5g\uff0c\u6599\u9152 15g\uff0c\u6dc0\u7c89 15g \u6405\u62cc\u5747\u5300\uff0c\u81f3\u5fae\u5fae\u53d1\u5e72\uff1b\u7f13\u6162\u52a0\u5165\u90e8\u5206\u8471\u59dc\u6c34\uff0c\u6405\u62cc\u9e21\u4e01\u81f3\u7c98\u624b\uff1b\u4fdd\u9c9c\u819c\u5bc6\u5c01\uff0c\u653e\u5165\u51b0\u7bb1\u814c\u5236 1 \u5c0f\u65f6 \u5e72\u8fa3\u6912\u5207\u6bb5\uff1b\u8d77\u9505\uff0c\u5927\u706b\u70e7\u70ed\u8f6c\u5c0f\u706b\uff1b\u653e\u5165\u5e72\u8fa3\u6912\u7119\u5e72\u81f3\u5fae\u5fae\u53d1\u7cca\uff0c\u635e\u8d77\u5907\u7528\uff1b\u82b1\u6912\u7119\u5e72\u81f3\u6709\u9999\u5473\uff0c\u635e\u8d77\u5907\u7528 \u8f6c\u5927\u706b\uff0c\u5012\u5165 20g \u690d\u7269\u6cb9\uff0c7 \u6210\u70ed\uff08\u7af9\u7b77\u5b50\u8d77\u6ce1\uff09\u4e0b\u5165\u9e21\u4e01\uff0c\u714e\u81f3\u4e0a\u9762\u5f00\u59cb\u53d1\u767d\uff0c\u7528\u9505\u94f2\u7ffb\u9762\uff0c\u714e 30s \u540e\u7ffb\u7092\u5747\u5300 \u4e0b\u5165\u8471\u7c92\u7ffb\u7092\uff0c\u52a0\u5165\u4f59\u4e0b\u8471\u59dc\u6c34\u4e0d\u591f 100g \u518d\u52a0\u4e00\u70b9\u6e05\u6c34\uff08\u52a1\u5fc5\u662f\u70ed\u6c34\uff09\uff1b\u76d6\u4e0a\u9505\u76d6\uff0c\u8f6c\u4e2d\u5c0f\u706b\u7116 2min\uff1b \u8f6c\u5927\u706b\uff0c\u4e0b\u5165\u719f\u82b1\u751f\uff0c\u5e72\u8fa3\u6912\u548c\u82b1\u6912\uff1b\u52a0\u5165\u9e21\u7cbe 2g\uff0c\u9999\u918b 5g\uff0c\u767d\u7cd6 2g\uff0c\u7ffb\u7092\u5747\u5300\uff1b \u6dc0\u7c89 10g \u52a0 50g \u6e05\u6c34\u8c03\u6210\u6c34\u6dc0\u7c89\uff0c\u52a0\u5165\u9505\u4e2d\uff0c\u7ffb\u7092\u5747\u5300\uff0c\u6536\u6c41\u5230\u81ea\u5df1\u60f3\u8981\u7684\u6d53\u5ea6 \u5173\u706b\uff0c\u6dcb\u5165\u829d\u9ebb\u6cb9 10g\uff0c\u5373\u53ef\u51fa\u9505 \u7a0d\u52a0\u590d\u6742\u4f46\u662f\u66f4\u52a0\u4ee4\u4eba\u5782\u6d8e\u6b32\u6ef4\u7684\u7248\u672c \u76f8\u8f83\u4e8e\u7b80\u5355\u7248\u672c\uff0c\u8fd9\u91cc\u66f4\u52a0\u63a8\u8350\u4f7f\u7528\u4e8c\u8346\u6761\u4e0e\u751f\u82b1\u751f\u3002\u5e76\u4e14\u52a0\u5165\u4e86\u83b4\u7b0b\u966a\u886c\u82b1\u751f\u7684\u9999\u8106\u4e0e\u9e21\u8089\u7684\u677e\u8f6f \u83b4\u7b0b\u53bb\u76ae\u5207\u81f3 1cm \u89c1\u65b9\u7684\u5c0f\u5757\uff0c\u5907\u7528\uff1b \u4e8c\u8346\u6761\u5207\u6210 1cm \u957f\u6bb5\uff1b \u624b\u67aa\u817f\u7528\u526a\u5200\u53bb\u9aa8\uff0c\u9e21\u8089\u9762\u7528\u5200\u80cc\u62cd\u6253\u4e00\u904d\uff0c\u5207\u6761\u540e\u5207\u81f3 1.5cm \u89c1\u65b9\u8089\u4e01\uff1b\u6ce1\u4e8e\u6e05\u6c34 10min\uff0c\u635e\u51fa\u63a7\u5e72\u5907\u7528\uff08\u82e5\u662f\u9e21\u80f8\u812f\u8089\uff0c\u5219\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u5207\u4e01\u4ee5\u53ca\u4e4b\u540e\u7684\u52a8\u4f5c\uff09\uff1b \u53d6\u5927\u8471\u8471\u7eff\u4e0e\u59dc\u7247 5g \u4e8e\u7897\u4e2d\uff0c\u5012\u5165 50g \u5f00\u6c34\u5907\u7528\uff1b\u8471\u767d\u5207 1.5cm \u5706\u7c92\u5907\u7528 \u9e21\u4e01\u4e2d\u52a0\u5165\u76d0 2g\uff0c\u8001\u62bd\u9171\u6cb9 5g\uff0c\u6599\u9152 15g\uff0c\u6dc0\u7c89 15g \u6405\u62cc\u5747\u5300\uff0c\u81f3\u5fae\u5fae\u53d1\u5e72\uff1b\u7f13\u6162\u52a0\u5165\u90e8\u5206\u8471\u59dc\u6c34\uff0c\u6405\u62cc\u9e21\u4e01\u81f3\u7c98\u624b\uff1b\u4fdd\u9c9c\u819c\u5bc6\u5c01\uff0c\u653e\u5165\u51b0\u7bb1\u814c\u5236 1 \u5c0f\u65f6 \u8f6c\u4e2d\u706b\uff0c\u5012\u5165 20g \u690d\u7269\u6cb9\uff0c\u653e\u5165\u751f\u82b1\u751f\u7ffb\u7092\u81f3\u5176\u8868\u9762\u5fae\u5fae\u7126\u7cca\uff0c\u635e\u8d77\u82b1\u751f\u4f46\u662f\u6cb9\u7559\u5728\u9505\u5185\uff1b \u7ee7\u7eed\u52a0\u70ed\uff0c7 \u6210\u70ed\uff08\u7af9\u7b77\u5b50\u8d77\u6ce1\uff09\u4e0b\u5165\u9e21\u4e01\uff0c\u653e\u5165\u8c46\u74e3\u9171\uff0c\u7ffb\u7092\u5927\u6982 1min\uff1b \u52a0\u5165\u5907\u597d\u7684\u83b4\u7b0b\u4e01\uff0c\u7ee7\u7eed\u7ffb\u7092 1min\uff1b \u4e0b\u5165\u8471\u7c92\u7ffb\u7092\uff0c\u52a0\u5165\u4f59\u4e0b\u8471\u59dc\u6c34\u4e0d\u591f 100g \u518d\u52a0\u4e00\u70b9\u6e05\u6c34\uff08\u52a1\u5fc5\u662f\u70ed\u6c34\uff09\uff1b\u52a0\u5165\u4e8c\u8346\u6761\u6bb5\uff1b\u76d6\u4e0a\u9505\u76d6\uff0c\u8f6c\u4e2d\u5c0f\u706b\u7116 2min\uff1b \u8f6c\u5927\u706b\uff0c\u4e0b\u5165\u5148\u524d\u635e\u8d77\u6765\u5907\u7528\u7684\u82b1\u751f\uff0c\u82b1\u6912\uff1b\u52a0\u5165\u9e21\u7cbe 2g\uff0c\u9999\u918b 5g\uff0c\u767d\u7cd6 2g\uff0c\u7ffb\u7092\u5747\u5300\uff1b \u6dc0\u7c89 10g \u52a0 50g \u6e05\u6c34\u8c03\u6210\u6c34\u6dc0\u7c89\uff0c\u52a0\u5165\u9505\u4e2d\uff0c\u7ffb\u7092\u5747\u5300\uff0c\u6536\u6c41\u5230\u81ea\u5df1\u60f3\u8981\u7684\u6d53\u5ea6 \u5173\u706b\uff0c\u6dcb\u5165\u829d\u9ebb\u6cb9 10g \u4e0e\u6cb9\u6cfc\u8fa3\u5b50 5g \u518d\u7ffb\u7092 10s\uff0c\u5373\u53ef\u51fa\u9505 \u9644\u52a0\u5185\u5bb9 \u8fa3\u6912\u4f9d\u636e\u4e2a\u4eba\u53e3\u5473\u914c\u91cf\u6dfb\u52a0\uff0c\u6015\u8fa3\u53ef\u53bb\u7c7d\uff1b \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u5bab\u4fdd\u9e21\u4e01"},{"location":"dishes/meat_dish/%E5%AE%AB%E4%BF%9D%E9%B8%A1%E4%B8%81/%E5%AE%AB%E4%BF%9D%E9%B8%A1%E4%B8%81/#_1","text":"\u8001\u6d3e\u5ddd\u83dc\u7684\u7b80\u5355\u505a\u6cd5\u5206\u4eab","title":"\u5bab\u4fdd\u9e21\u4e01\u7684\u505a\u6cd5"},{"location":"dishes/meat_dish/%E5%AE%AB%E4%BF%9D%E9%B8%A1%E4%B8%81/%E5%AE%AB%E4%BF%9D%E9%B8%A1%E4%B8%81/#_2","text":"\u624b\u67aa\u817f\uff08\u6216\u8005\u9e21\u80f8\u812f\u8089\uff09 \u5927\u8471 \u5e72\u8fa3\u6912\uff08\u6216\u8005\u4e8c\u8346\u6761\uff09 \u719f\u82b1\u751f \u751f\u62bd\u9171\u6cb9 \u9999\u918b \u767d\u7cd6 \u6599\u9152 \u76d0 \u9e21\u7cbe \u6dc0\u7c89 \u690d\u7269\u6cb9 \u829d\u9ebb\u6cb9","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/meat_dish/%E5%AE%AB%E4%BF%9D%E9%B8%A1%E4%B8%81/%E5%AE%AB%E4%BF%9D%E9%B8%A1%E4%B8%81/#_3","text":"\u6cb9\u6cfc\u8fa3\u5b50 \u83b4\u7b0b \u751f\u82b1\u751f \u8c46\u74e3\u9171","title":"\u53ef\u9009\u539f\u6599"},{"location":"dishes/meat_dish/%E5%AE%AB%E4%BF%9D%E9%B8%A1%E4%B8%81/%E5%AE%AB%E4%BF%9D%E9%B8%A1%E4%B8%81/#_4","text":"\u6ce8\u610f\uff0c\u8fd9\u9053\u83dc\u9ed8\u8ba4\u4e00\u4eba\u7248\u672c\uff0c\u4e24\u4eba\u4e5f\u591f\u5403\uff0c\u7406\u8bba\u4e0a\u591a\u4eba\u53ea\u9700\u7b80\u5355\u52a0\u500d\u5373\u53ef\u3002 \u5fc5\u987b\u914d\u6599 \u624b\u67aa\u817f\uff08\u6216\u8005\u9e21\u80f8\u812f\u8089\uff09 = 1 \u652f\uff08\u7ea6 350g\uff09 \u5927\u8471 = 1 \u6839\uff08\u7ea6 180g\uff09 \u719f\u82b1\u751f = 150g \u59dc\u7247 = 10g \u5e72\u8fa3\u6912\uff08\u6216\u8005\u4e8c\u8346\u6761\uff09 = 10g\uff08\u82e5\u9009\u62e9\u4e8c\u8346\u6761\uff0c\u5219\u9700\u8981\u5927\u7ea6 4 \u652f\uff09 \u751f\u62bd\u9171\u6cb9 = 10g \u767d\u7cd6 = 2g \u76d0 = 2g \u690d\u7269\u6cb9 = 20g \u6dc0\u7c89 = 15g \u6599\u9152 = 15g \u8fdb\u9636\u914d\u6599 \u8001\u62bd\u9171\u6cb9 = 5g \u82b1\u6912 = 5g \u9999\u918b = 5g \u9e21\u7cbe = 2g \u829d\u9ebb\u6cb9 = 10g \u6dc0\u7c89\uff08\u7528\u4ee5\u52fe\u82a1\uff09 = 10g \u8c46\u74e3\u9171 = 10g \u53ef\u9009\u914d\u6599 \u83b4\u7b0b = \u7ea6 250g \u6cb9\u6cfc\u8fa3\u5b50 = 5g \u4f7f\u7528\u4e0a\u8ff0\u6761\u4ef6\uff0c\u8ba1\u7b97\u51fa\u8ba1\u5212\u4f7f\u7528\u7684\u539f\u6750\u6599\u6bd4\u4f8b\uff0c\u4f9d\u53e3\u5473\u8c03\u6574\u3002","title":"\u8ba1\u7b97"},{"location":"dishes/meat_dish/%E5%AE%AB%E4%BF%9D%E9%B8%A1%E4%B8%81/%E5%AE%AB%E4%BF%9D%E9%B8%A1%E4%B8%81/#_5","text":"","title":"\u64cd\u4f5c"},{"location":"dishes/meat_dish/%E5%AE%AB%E4%BF%9D%E9%B8%A1%E4%B8%81/%E5%AE%AB%E4%BF%9D%E9%B8%A1%E4%B8%81/#_6","text":"\u624b\u67aa\u817f\u7528\u526a\u5200\u53bb\u9aa8\uff0c\u9e21\u8089\u9762\u7528\u5200\u80cc\u62cd\u6253\u4e00\u904d\uff0c\u5207\u6761\u540e\u5207\u81f3 1.5cm \u89c1\u65b9\u8089\u4e01\uff1b\u6ce1\u4e8e\u6e05\u6c34 10min\uff0c\u635e\u51fa\u63a7\u5e72\u5907\u7528\uff08\u82e5\u662f\u9e21\u80f8\u812f\u8089\uff0c\u5219\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u5207\u4e01\u4ee5\u53ca\u4e4b\u540e\u7684\u52a8\u4f5c\uff09 \u53d6\u5927\u8471\u8471\u7eff\u4e0e\u59dc\u7247 5g \u4e8e\u7897\u4e2d\uff0c\u5012\u5165 50g \u5f00\u6c34\u5907\u7528\uff1b\u8471\u767d\u5207 1.5cm \u5706\u7c92\u5907\u7528\uff1b\u53d6\u82b1\u751f\u653e\u5165\u5fae\u6ce2\u7089\u9ad8\u706b 5 \u5206\u949f\u7119\u5e72\u5907\u7528 \u9e21\u4e01\u4e2d\u52a0\u5165\u76d0 2g\uff0c\u8001\u62bd\u9171\u6cb9 5g\uff0c\u6599\u9152 15g\uff0c\u6dc0\u7c89 15g \u6405\u62cc\u5747\u5300\uff0c\u81f3\u5fae\u5fae\u53d1\u5e72\uff1b\u7f13\u6162\u52a0\u5165\u90e8\u5206\u8471\u59dc\u6c34\uff0c\u6405\u62cc\u9e21\u4e01\u81f3\u7c98\u624b\uff1b\u4fdd\u9c9c\u819c\u5bc6\u5c01\uff0c\u653e\u5165\u51b0\u7bb1\u814c\u5236 1 \u5c0f\u65f6 \u5e72\u8fa3\u6912\u5207\u6bb5\uff1b\u8d77\u9505\uff0c\u5927\u706b\u70e7\u70ed\u8f6c\u5c0f\u706b\uff1b\u653e\u5165\u5e72\u8fa3\u6912\u7119\u5e72\u81f3\u5fae\u5fae\u53d1\u7cca\uff0c\u635e\u8d77\u5907\u7528\uff1b\u82b1\u6912\u7119\u5e72\u81f3\u6709\u9999\u5473\uff0c\u635e\u8d77\u5907\u7528 \u8f6c\u5927\u706b\uff0c\u5012\u5165 20g \u690d\u7269\u6cb9\uff0c7 \u6210\u70ed\uff08\u7af9\u7b77\u5b50\u8d77\u6ce1\uff09\u4e0b\u5165\u9e21\u4e01\uff0c\u714e\u81f3\u4e0a\u9762\u5f00\u59cb\u53d1\u767d\uff0c\u7528\u9505\u94f2\u7ffb\u9762\uff0c\u714e 30s \u540e\u7ffb\u7092\u5747\u5300 \u4e0b\u5165\u8471\u7c92\u7ffb\u7092\uff0c\u52a0\u5165\u4f59\u4e0b\u8471\u59dc\u6c34\u4e0d\u591f 100g \u518d\u52a0\u4e00\u70b9\u6e05\u6c34\uff08\u52a1\u5fc5\u662f\u70ed\u6c34\uff09\uff1b\u76d6\u4e0a\u9505\u76d6\uff0c\u8f6c\u4e2d\u5c0f\u706b\u7116 2min\uff1b \u8f6c\u5927\u706b\uff0c\u4e0b\u5165\u719f\u82b1\u751f\uff0c\u5e72\u8fa3\u6912\u548c\u82b1\u6912\uff1b\u52a0\u5165\u9e21\u7cbe 2g\uff0c\u9999\u918b 5g\uff0c\u767d\u7cd6 2g\uff0c\u7ffb\u7092\u5747\u5300\uff1b \u6dc0\u7c89 10g \u52a0 50g \u6e05\u6c34\u8c03\u6210\u6c34\u6dc0\u7c89\uff0c\u52a0\u5165\u9505\u4e2d\uff0c\u7ffb\u7092\u5747\u5300\uff0c\u6536\u6c41\u5230\u81ea\u5df1\u60f3\u8981\u7684\u6d53\u5ea6 \u5173\u706b\uff0c\u6dcb\u5165\u829d\u9ebb\u6cb9 10g\uff0c\u5373\u53ef\u51fa\u9505","title":"\u7b80\u6613\u7248\u672c"},{"location":"dishes/meat_dish/%E5%AE%AB%E4%BF%9D%E9%B8%A1%E4%B8%81/%E5%AE%AB%E4%BF%9D%E9%B8%A1%E4%B8%81/#_7","text":"\u76f8\u8f83\u4e8e\u7b80\u5355\u7248\u672c\uff0c\u8fd9\u91cc\u66f4\u52a0\u63a8\u8350\u4f7f\u7528\u4e8c\u8346\u6761\u4e0e\u751f\u82b1\u751f\u3002\u5e76\u4e14\u52a0\u5165\u4e86\u83b4\u7b0b\u966a\u886c\u82b1\u751f\u7684\u9999\u8106\u4e0e\u9e21\u8089\u7684\u677e\u8f6f \u83b4\u7b0b\u53bb\u76ae\u5207\u81f3 1cm \u89c1\u65b9\u7684\u5c0f\u5757\uff0c\u5907\u7528\uff1b \u4e8c\u8346\u6761\u5207\u6210 1cm \u957f\u6bb5\uff1b \u624b\u67aa\u817f\u7528\u526a\u5200\u53bb\u9aa8\uff0c\u9e21\u8089\u9762\u7528\u5200\u80cc\u62cd\u6253\u4e00\u904d\uff0c\u5207\u6761\u540e\u5207\u81f3 1.5cm \u89c1\u65b9\u8089\u4e01\uff1b\u6ce1\u4e8e\u6e05\u6c34 10min\uff0c\u635e\u51fa\u63a7\u5e72\u5907\u7528\uff08\u82e5\u662f\u9e21\u80f8\u812f\u8089\uff0c\u5219\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u5207\u4e01\u4ee5\u53ca\u4e4b\u540e\u7684\u52a8\u4f5c\uff09\uff1b \u53d6\u5927\u8471\u8471\u7eff\u4e0e\u59dc\u7247 5g \u4e8e\u7897\u4e2d\uff0c\u5012\u5165 50g \u5f00\u6c34\u5907\u7528\uff1b\u8471\u767d\u5207 1.5cm \u5706\u7c92\u5907\u7528 \u9e21\u4e01\u4e2d\u52a0\u5165\u76d0 2g\uff0c\u8001\u62bd\u9171\u6cb9 5g\uff0c\u6599\u9152 15g\uff0c\u6dc0\u7c89 15g \u6405\u62cc\u5747\u5300\uff0c\u81f3\u5fae\u5fae\u53d1\u5e72\uff1b\u7f13\u6162\u52a0\u5165\u90e8\u5206\u8471\u59dc\u6c34\uff0c\u6405\u62cc\u9e21\u4e01\u81f3\u7c98\u624b\uff1b\u4fdd\u9c9c\u819c\u5bc6\u5c01\uff0c\u653e\u5165\u51b0\u7bb1\u814c\u5236 1 \u5c0f\u65f6 \u8f6c\u4e2d\u706b\uff0c\u5012\u5165 20g \u690d\u7269\u6cb9\uff0c\u653e\u5165\u751f\u82b1\u751f\u7ffb\u7092\u81f3\u5176\u8868\u9762\u5fae\u5fae\u7126\u7cca\uff0c\u635e\u8d77\u82b1\u751f\u4f46\u662f\u6cb9\u7559\u5728\u9505\u5185\uff1b \u7ee7\u7eed\u52a0\u70ed\uff0c7 \u6210\u70ed\uff08\u7af9\u7b77\u5b50\u8d77\u6ce1\uff09\u4e0b\u5165\u9e21\u4e01\uff0c\u653e\u5165\u8c46\u74e3\u9171\uff0c\u7ffb\u7092\u5927\u6982 1min\uff1b \u52a0\u5165\u5907\u597d\u7684\u83b4\u7b0b\u4e01\uff0c\u7ee7\u7eed\u7ffb\u7092 1min\uff1b \u4e0b\u5165\u8471\u7c92\u7ffb\u7092\uff0c\u52a0\u5165\u4f59\u4e0b\u8471\u59dc\u6c34\u4e0d\u591f 100g \u518d\u52a0\u4e00\u70b9\u6e05\u6c34\uff08\u52a1\u5fc5\u662f\u70ed\u6c34\uff09\uff1b\u52a0\u5165\u4e8c\u8346\u6761\u6bb5\uff1b\u76d6\u4e0a\u9505\u76d6\uff0c\u8f6c\u4e2d\u5c0f\u706b\u7116 2min\uff1b \u8f6c\u5927\u706b\uff0c\u4e0b\u5165\u5148\u524d\u635e\u8d77\u6765\u5907\u7528\u7684\u82b1\u751f\uff0c\u82b1\u6912\uff1b\u52a0\u5165\u9e21\u7cbe 2g\uff0c\u9999\u918b 5g\uff0c\u767d\u7cd6 2g\uff0c\u7ffb\u7092\u5747\u5300\uff1b \u6dc0\u7c89 10g \u52a0 50g \u6e05\u6c34\u8c03\u6210\u6c34\u6dc0\u7c89\uff0c\u52a0\u5165\u9505\u4e2d\uff0c\u7ffb\u7092\u5747\u5300\uff0c\u6536\u6c41\u5230\u81ea\u5df1\u60f3\u8981\u7684\u6d53\u5ea6 \u5173\u706b\uff0c\u6dcb\u5165\u829d\u9ebb\u6cb9 10g \u4e0e\u6cb9\u6cfc\u8fa3\u5b50 5g \u518d\u7ffb\u7092 10s\uff0c\u5373\u53ef\u51fa\u9505","title":"\u7a0d\u52a0\u590d\u6742\u4f46\u662f\u66f4\u52a0\u4ee4\u4eba\u5782\u6d8e\u6b32\u6ef4\u7684\u7248\u672c"},{"location":"dishes/meat_dish/%E5%AE%AB%E4%BF%9D%E9%B8%A1%E4%B8%81/%E5%AE%AB%E4%BF%9D%E9%B8%A1%E4%B8%81/#_8","text":"\u8fa3\u6912\u4f9d\u636e\u4e2a\u4eba\u53e3\u5473\u914c\u91cf\u6dfb\u52a0\uff0c\u6015\u8fa3\u53ef\u53bb\u7c7d\uff1b \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/meat_dish/%E5%B0%8F%E7%82%92%E9%BB%84%E7%89%9B%E8%82%89/%E5%B0%8F%E7%82%92%E9%BB%84%E7%89%9B%E8%82%89/","text":"\u5c0f\u7092\u9ec4\u725b\u8089\u7684\u505a\u6cd5 \u5c0f\u7092\u9ec4\u725b\u8089\u662f\u4e00\u9053\u7b80\u5355\u6613\u505a\u7684\u6e58\u83dc\u3002\u53e3\u5473\u5341\u5206\u52b2\u7206\u723d\u53e3\u3002\u4e00\u822c\u521d\u5b66\u8005\u53ea\u9700\u8981 1 \u5c0f\u65f6\u5373\u53ef\u5b8c\u6210 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u725b\u91cc\u810a \u82b9\u83dc \u5c0f\u7c73\u6912 \u91ce\u5c71\u6912 \u9999\u83dc \u8ba1\u7b97 \u6bcf\u4efd\uff1a \u725b\u91cc\u810a 400g \u82b9\u83dc 200g \u5c0f\u7c73\u6912 30g \u91ce\u5c71\u6912 30g \u9999\u83dc 30g \u98df\u7528\u6cb9 15ml \u9171\u6cb9 6ml \u64cd\u4f5c \u725b\u91cc\u810a\u5207\u6210\u4e0d\u8d85\u8fc7 3cm \u5bbd\uff0c3mm \u539a\u7684\u8584\u7247\uff0c\u5012\u5165 6ml \u9171\u6cb9\uff0c\u7528\u624b\u6293\u5300\u5907\u7528 \u82b9\u83dc\u5207\u6210\u4e0d\u8d85\u8fc7 5cm \u7684\u5c0f\u6bb5\uff0c\u5907\u7528 \u5c0f\u7c73\u6912\u5207\u6210\u4e1d\u72b6\uff0c\u5907\u7528 \u91ce\u5c71\u6912\u5207\u6210\u9897\u7c92\uff0c\u5907\u7528 \u9999\u83dc\u5207\u6210\u6210\u4e0d\u8d85\u8fc7 3cm \u7684\u5c0f\u6bb5\uff0c\u5907\u7528 \u70ed\u9505\uff0c\u9505\u5185\u653e\u5165 15ml \u98df\u7528\u6cb9\uff0c\u5927\u706b\u7b49\u5f85 30 \u79d2\u8ba9\u6cb9\u6e29\u5347\u9ad8 \u653e\u5165\u5c0f\u7c73\u6912\u548c\u91ce\u5c71\u6912\u7206\u9999 \u653e\u5165\u725b\u91cc\u810a\u548c\u82b9\u83dc\uff0c\u7136\u540e \u5927\u706b\u7ffb\u7092 1 \u5206\u949f \u5173\u706b\uff0c\u6492\u4e0a\u9999\u83dc\uff0c\u76db\u76d8 \u9644\u52a0\u5185\u5bb9 \u64cd\u4f5c\u65f6\uff0c\u5168\u7a0b\u9700\u8981\u5f00\u5927\u706b \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u5c0f\u7092\u9ec4\u725b\u8089"},{"location":"dishes/meat_dish/%E5%B0%8F%E7%82%92%E9%BB%84%E7%89%9B%E8%82%89/%E5%B0%8F%E7%82%92%E9%BB%84%E7%89%9B%E8%82%89/#_1","text":"\u5c0f\u7092\u9ec4\u725b\u8089\u662f\u4e00\u9053\u7b80\u5355\u6613\u505a\u7684\u6e58\u83dc\u3002\u53e3\u5473\u5341\u5206\u52b2\u7206\u723d\u53e3\u3002\u4e00\u822c\u521d\u5b66\u8005\u53ea\u9700\u8981 1 \u5c0f\u65f6\u5373\u53ef\u5b8c\u6210","title":"\u5c0f\u7092\u9ec4\u725b\u8089\u7684\u505a\u6cd5"},{"location":"dishes/meat_dish/%E5%B0%8F%E7%82%92%E9%BB%84%E7%89%9B%E8%82%89/%E5%B0%8F%E7%82%92%E9%BB%84%E7%89%9B%E8%82%89/#_2","text":"\u725b\u91cc\u810a \u82b9\u83dc \u5c0f\u7c73\u6912 \u91ce\u5c71\u6912 \u9999\u83dc","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/meat_dish/%E5%B0%8F%E7%82%92%E9%BB%84%E7%89%9B%E8%82%89/%E5%B0%8F%E7%82%92%E9%BB%84%E7%89%9B%E8%82%89/#_3","text":"\u6bcf\u4efd\uff1a \u725b\u91cc\u810a 400g \u82b9\u83dc 200g \u5c0f\u7c73\u6912 30g \u91ce\u5c71\u6912 30g \u9999\u83dc 30g \u98df\u7528\u6cb9 15ml \u9171\u6cb9 6ml","title":"\u8ba1\u7b97"},{"location":"dishes/meat_dish/%E5%B0%8F%E7%82%92%E9%BB%84%E7%89%9B%E8%82%89/%E5%B0%8F%E7%82%92%E9%BB%84%E7%89%9B%E8%82%89/#_4","text":"\u725b\u91cc\u810a\u5207\u6210\u4e0d\u8d85\u8fc7 3cm \u5bbd\uff0c3mm \u539a\u7684\u8584\u7247\uff0c\u5012\u5165 6ml \u9171\u6cb9\uff0c\u7528\u624b\u6293\u5300\u5907\u7528 \u82b9\u83dc\u5207\u6210\u4e0d\u8d85\u8fc7 5cm \u7684\u5c0f\u6bb5\uff0c\u5907\u7528 \u5c0f\u7c73\u6912\u5207\u6210\u4e1d\u72b6\uff0c\u5907\u7528 \u91ce\u5c71\u6912\u5207\u6210\u9897\u7c92\uff0c\u5907\u7528 \u9999\u83dc\u5207\u6210\u6210\u4e0d\u8d85\u8fc7 3cm \u7684\u5c0f\u6bb5\uff0c\u5907\u7528 \u70ed\u9505\uff0c\u9505\u5185\u653e\u5165 15ml \u98df\u7528\u6cb9\uff0c\u5927\u706b\u7b49\u5f85 30 \u79d2\u8ba9\u6cb9\u6e29\u5347\u9ad8 \u653e\u5165\u5c0f\u7c73\u6912\u548c\u91ce\u5c71\u6912\u7206\u9999 \u653e\u5165\u725b\u91cc\u810a\u548c\u82b9\u83dc\uff0c\u7136\u540e \u5927\u706b\u7ffb\u7092 1 \u5206\u949f \u5173\u706b\uff0c\u6492\u4e0a\u9999\u83dc\uff0c\u76db\u76d8","title":"\u64cd\u4f5c"},{"location":"dishes/meat_dish/%E5%B0%8F%E7%82%92%E9%BB%84%E7%89%9B%E8%82%89/%E5%B0%8F%E7%82%92%E9%BB%84%E7%89%9B%E8%82%89/#_5","text":"\u64cd\u4f5c\u65f6\uff0c\u5168\u7a0b\u9700\u8981\u5f00\u5927\u706b \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/meat_dish/%E6%96%B0%E7%96%86%E5%A4%A7%E7%9B%98%E9%B8%A1/%E6%96%B0%E7%96%86%E5%A4%A7%E7%9B%98%E9%B8%A1/","text":"\u65b0\u7586\u5927\u76d8\u9e21 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u82b1\u6912\uff0c\u9999\u53f6\uff0c\u9999\u679c\uff0c\u5e72\u7ebf\u6912\uff0c\u5927\u849c\uff0c\u5927\u8471 \u6cb9\uff0c\u76d0\uff0c\u751f\u62bd\uff0c\u8017\u6cb9\uff0c\u6599\u9152\uff08\u53ef\u62ff\u5564\u9152\uff09\uff0c\u767d\u7cd6 \u9e21\u8089\uff08\u9e21\u817f\u8089\u6700\u597d\uff09\uff0c\u571f\u8c46\uff0c\u83dc\u6912\u548c\u751c\u6912\uff08\u53ef\u4ee5\u4e0d\u7528\uff0c\u52a0\u4e0a\u914d\u8272\u597d\u770b\uff09 \u8ba1\u7b97 2 \u4eba\u98df\u7528 \u9e21\u8089 1kg \u5de6\u53f3\uff08\u4e24\u4e2a\u706b\u67aa\u817f\uff09 \u571f\u8c46 2 \u4e2a\u9002\u4e2d\u5927\u5c0f\uff1a750g \u5927\u8471 100g \u83dc\u6912\u751c\u6912\u5404\u4e00\u4e2a\uff0c\u5404 50g \u767d\u7cd6 20g \u5e72\u7ebf\u6912 5 \u4e2a \u5927\u849c 4 \u74e3 \u6cb9 50g \u64cd\u4f5c \u8089\u5148\u5241\u597d\uff0c\u5757\u72b6\uff0c\u7528\u6e05\u6c34+\u76d0\u6d78\u6ce1\u5c11\u8bb8\u65f6\u95f4\uff0c\u53bb\u9664\u8840\u6c34\uff0c\u53bb\u8165\uff0c\u7136\u540e\u7a7a\u5e72\u6c34 \u8471\u849c\u8fa3\u6912\u571f\u8c46\u7b49\u6d17\u5e72\u51c0\uff0c\u571f\u8c46\u524a\u76ae \u8471\u767d\u5207\u957f\u6bb5\uff0c\u957f\u5ea6 4cm \u4e00\u6bb5\uff0c\u83dc\u6912\u548c\u7ebf\u6912\u5207\u5757\u72b6 \u571f\u8c46\u5207\u6210\u6eda\u5200\u571f\u8c46\uff0c\u5373\u5207\u4e00\u5200\u52a8\u6eda\u52a8\u4e00\u4e0b\uff0c\u4e00\u5757\u571f\u8c46\u5927\u6982\u6709 4cm*4cm \u5927\u5c0f\u5373\u53ef \u7092\u7cd6\u8272\uff1a\u5148\u5c06\u6cb9\u52a0\u5165\u9505\u4e2d\uff0c\u7136\u540e\u5c06\u767d\u7802\u7cd6\u653e\u5165\uff0c\u7528\u9505\u94f2\u6765\u56de\u6405\u62cc\uff0c\u5c06\u7cd6\u7092\u5316\uff0c\u7136\u540e\u7092\u51fa\u7126\u9ec4\u8272\uff0c\u6b64\u65f6\u5c06\u7a7a\u5e72\u6c34\u7684\u9e21\u8089\u5012\u5165\u9505\u4e2d\u7ffb\u7092\uff0c\u8fdb\u884c\u4e0a\u8272 \u653e\u5165\u82b1\u6912\uff0c\u9999\u53f6\uff0c\u9999\u679c\uff0c\u5e72\u7ebf\u6912\u7b49\u8fdb\u884c\u7ffb\u7092 \u653e\u5165\u4e00\u52fa\u76d0\uff0c\u751f\u62bd\u7092\u83dc\u52fa\u534a\u52fa\uff0c\u8017\u6cb9 10g \u5de6\u53f3\uff0c\u6599\u9152 100g\uff0c\u5012\u5165 1 \u5347\u6e05\u6c34\uff0c\u6599\u9152\u53ef\u4ee5\u7528\u5564\u9152\u4ee3\u66ff \u8c03\u81f3\u4e2d\u706b\uff0c\u5c06\u6c34\u70e7\u5f00\uff0c\u8c03\u5236\u4e2d\u5c0f\u706b\u6162\u7096\u5165\u5473 \u5f53\u6c34\u6536\u81f3\u9e21\u8089\u5373\u5c06\u9732\u51fa\u65f6\uff0c\u5c06\u571f\u8c46\u653e\u5728\u9505\u8868\u9762\uff1a\u6ce8\u610f\u4e0d\u8981\u7ffb\u52a8\u571f\u8c46\uff0c\u5c31\u76d6\u5728\u8868\u9762\uff0c\u4e0d\u7136\u7ffb\u5230\u4e0b\u9762\u5bb9\u6613\u7c98\u9505\uff0c\u7ee7\u7eed\u76d6\u9505\u76d6\u7096\uff0c\u7096\u4e00\u4f1a\u540e\u5c06\u5927\u8471\uff0c\u83dc\u6912\u548c\u751c\u6912\u653e\u5165\uff0c\u7ee7\u7eed\u7096\u3002 \u7096\u5230\u6c41\u6536\u7684\u5dee\u4e0d\u591a\u65f6\u53ef\u4ee5\u8fdb\u884c\u7ffb\u9762\uff0c\u5c06\u571f\u8c46\u4e0e\u6c64\u6c41\u76f8\u5438\uff0c\u6700\u540e\u5173\u706b\u76db\u51fa\u3002 \u53e6\uff1a\u6b64\u505a\u6cd5\u53ef\u4ee5\u5403\u9762\uff0c\u4e70\u7c97\u9762\u5242\u5b50\uff0c\u5c06\u7c97\u9762\u5242\u5b50\u538b\u6241\uff0c\u7136\u540e\u7528\u624b\u62c9\u6210\u5bbd\u9762\uff0c\u4e00\u5b9a\u8981\u662f\u5bbd\u9762\uff0c\u4e0b\u597d\u540e\u53ef\u4ee5\u653e\u5165\u5230\u5927\u76d8\u9e21\u4e2d\uff0c\u4e0e\u6c64\u6c41\u6405\u62cc\u5473\u9053\u6781\u4f73\uff01 \u9644\u52a0\u5185\u5bb9 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u65b0\u7586\u5927\u76d8\u9e21"},{"location":"dishes/meat_dish/%E6%96%B0%E7%96%86%E5%A4%A7%E7%9B%98%E9%B8%A1/%E6%96%B0%E7%96%86%E5%A4%A7%E7%9B%98%E9%B8%A1/#_1","text":"","title":"\u65b0\u7586\u5927\u76d8\u9e21"},{"location":"dishes/meat_dish/%E6%96%B0%E7%96%86%E5%A4%A7%E7%9B%98%E9%B8%A1/%E6%96%B0%E7%96%86%E5%A4%A7%E7%9B%98%E9%B8%A1/#_2","text":"\u82b1\u6912\uff0c\u9999\u53f6\uff0c\u9999\u679c\uff0c\u5e72\u7ebf\u6912\uff0c\u5927\u849c\uff0c\u5927\u8471 \u6cb9\uff0c\u76d0\uff0c\u751f\u62bd\uff0c\u8017\u6cb9\uff0c\u6599\u9152\uff08\u53ef\u62ff\u5564\u9152\uff09\uff0c\u767d\u7cd6 \u9e21\u8089\uff08\u9e21\u817f\u8089\u6700\u597d\uff09\uff0c\u571f\u8c46\uff0c\u83dc\u6912\u548c\u751c\u6912\uff08\u53ef\u4ee5\u4e0d\u7528\uff0c\u52a0\u4e0a\u914d\u8272\u597d\u770b\uff09","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/meat_dish/%E6%96%B0%E7%96%86%E5%A4%A7%E7%9B%98%E9%B8%A1/%E6%96%B0%E7%96%86%E5%A4%A7%E7%9B%98%E9%B8%A1/#_3","text":"2 \u4eba\u98df\u7528 \u9e21\u8089 1kg \u5de6\u53f3\uff08\u4e24\u4e2a\u706b\u67aa\u817f\uff09 \u571f\u8c46 2 \u4e2a\u9002\u4e2d\u5927\u5c0f\uff1a750g \u5927\u8471 100g \u83dc\u6912\u751c\u6912\u5404\u4e00\u4e2a\uff0c\u5404 50g \u767d\u7cd6 20g \u5e72\u7ebf\u6912 5 \u4e2a \u5927\u849c 4 \u74e3 \u6cb9 50g","title":"\u8ba1\u7b97"},{"location":"dishes/meat_dish/%E6%96%B0%E7%96%86%E5%A4%A7%E7%9B%98%E9%B8%A1/%E6%96%B0%E7%96%86%E5%A4%A7%E7%9B%98%E9%B8%A1/#_4","text":"\u8089\u5148\u5241\u597d\uff0c\u5757\u72b6\uff0c\u7528\u6e05\u6c34+\u76d0\u6d78\u6ce1\u5c11\u8bb8\u65f6\u95f4\uff0c\u53bb\u9664\u8840\u6c34\uff0c\u53bb\u8165\uff0c\u7136\u540e\u7a7a\u5e72\u6c34 \u8471\u849c\u8fa3\u6912\u571f\u8c46\u7b49\u6d17\u5e72\u51c0\uff0c\u571f\u8c46\u524a\u76ae \u8471\u767d\u5207\u957f\u6bb5\uff0c\u957f\u5ea6 4cm \u4e00\u6bb5\uff0c\u83dc\u6912\u548c\u7ebf\u6912\u5207\u5757\u72b6 \u571f\u8c46\u5207\u6210\u6eda\u5200\u571f\u8c46\uff0c\u5373\u5207\u4e00\u5200\u52a8\u6eda\u52a8\u4e00\u4e0b\uff0c\u4e00\u5757\u571f\u8c46\u5927\u6982\u6709 4cm*4cm \u5927\u5c0f\u5373\u53ef \u7092\u7cd6\u8272\uff1a\u5148\u5c06\u6cb9\u52a0\u5165\u9505\u4e2d\uff0c\u7136\u540e\u5c06\u767d\u7802\u7cd6\u653e\u5165\uff0c\u7528\u9505\u94f2\u6765\u56de\u6405\u62cc\uff0c\u5c06\u7cd6\u7092\u5316\uff0c\u7136\u540e\u7092\u51fa\u7126\u9ec4\u8272\uff0c\u6b64\u65f6\u5c06\u7a7a\u5e72\u6c34\u7684\u9e21\u8089\u5012\u5165\u9505\u4e2d\u7ffb\u7092\uff0c\u8fdb\u884c\u4e0a\u8272 \u653e\u5165\u82b1\u6912\uff0c\u9999\u53f6\uff0c\u9999\u679c\uff0c\u5e72\u7ebf\u6912\u7b49\u8fdb\u884c\u7ffb\u7092 \u653e\u5165\u4e00\u52fa\u76d0\uff0c\u751f\u62bd\u7092\u83dc\u52fa\u534a\u52fa\uff0c\u8017\u6cb9 10g \u5de6\u53f3\uff0c\u6599\u9152 100g\uff0c\u5012\u5165 1 \u5347\u6e05\u6c34\uff0c\u6599\u9152\u53ef\u4ee5\u7528\u5564\u9152\u4ee3\u66ff \u8c03\u81f3\u4e2d\u706b\uff0c\u5c06\u6c34\u70e7\u5f00\uff0c\u8c03\u5236\u4e2d\u5c0f\u706b\u6162\u7096\u5165\u5473 \u5f53\u6c34\u6536\u81f3\u9e21\u8089\u5373\u5c06\u9732\u51fa\u65f6\uff0c\u5c06\u571f\u8c46\u653e\u5728\u9505\u8868\u9762\uff1a\u6ce8\u610f\u4e0d\u8981\u7ffb\u52a8\u571f\u8c46\uff0c\u5c31\u76d6\u5728\u8868\u9762\uff0c\u4e0d\u7136\u7ffb\u5230\u4e0b\u9762\u5bb9\u6613\u7c98\u9505\uff0c\u7ee7\u7eed\u76d6\u9505\u76d6\u7096\uff0c\u7096\u4e00\u4f1a\u540e\u5c06\u5927\u8471\uff0c\u83dc\u6912\u548c\u751c\u6912\u653e\u5165\uff0c\u7ee7\u7eed\u7096\u3002 \u7096\u5230\u6c41\u6536\u7684\u5dee\u4e0d\u591a\u65f6\u53ef\u4ee5\u8fdb\u884c\u7ffb\u9762\uff0c\u5c06\u571f\u8c46\u4e0e\u6c64\u6c41\u76f8\u5438\uff0c\u6700\u540e\u5173\u706b\u76db\u51fa\u3002 \u53e6\uff1a\u6b64\u505a\u6cd5\u53ef\u4ee5\u5403\u9762\uff0c\u4e70\u7c97\u9762\u5242\u5b50\uff0c\u5c06\u7c97\u9762\u5242\u5b50\u538b\u6241\uff0c\u7136\u540e\u7528\u624b\u62c9\u6210\u5bbd\u9762\uff0c\u4e00\u5b9a\u8981\u662f\u5bbd\u9762\uff0c\u4e0b\u597d\u540e\u53ef\u4ee5\u653e\u5165\u5230\u5927\u76d8\u9e21\u4e2d\uff0c\u4e0e\u6c64\u6c41\u6405\u62cc\u5473\u9053\u6781\u4f73\uff01","title":"\u64cd\u4f5c"},{"location":"dishes/meat_dish/%E6%96%B0%E7%96%86%E5%A4%A7%E7%9B%98%E9%B8%A1/%E6%96%B0%E7%96%86%E5%A4%A7%E7%9B%98%E9%B8%A1/#_5","text":"\u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/meat_dish/%E6%B0%B4%E7%85%AE%E7%89%9B%E8%82%89/%E6%B0%B4%E7%85%AE%E7%89%9B%E8%82%89/","text":"\u6c34\u716e\u725b\u8089\u7684\u505a\u6cd5 \u9ebb\u8fa3\u9c9c\u9999 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u725b\u8089 \u8c46\u82bd \u9e21\u86cb \u9999\u83dc \u8c46\u74e3\u9171 \u6599\u9152 \u6dc0\u7c89 \u5e72\u8fa3\u6912\u7c89 \u59dc \u849c \u7ea2\u8fa3\u6912 \u8017\u6cb9 \u8ba1\u7b97 \u4e0b\u8ff0\u6750\u6599\u4e3a\u4e24\u4eba\u4efd\uff0c\u591a\u4eba\u53ef\u6839\u636e\u4eba\u6570\u6309\u6bd4\u4f8b\u589e\u52a0\u914d\u6599\u7684\u91cf\u3002 \u725b\u8089 300g \u8c46\u82bd 100g \u9e21\u86cb 1 \u4e2a \u9999\u83dc 5 \u6839 \u8c46\u74e3\u9171 10g \u6599\u9152 10ml \u6dc0\u7c89 15g \u5e72\u8fa3\u6912\u7c89 5g \u59dc 20g \u849c 3 \u74e3 \u7ea2\u8fa3\u6912 1 \u6839 \u8017\u6cb9 8g \u64cd\u4f5c \u725b\u8089\u6d17\u5e72\u51c0\u5207\u7247\u3002 \u52a0\u5165 15g \u59dc\u4e1d\uff0c1 \u4e2a\u9e21\u86cb\uff0c15g \u6dc0\u7c89\uff0c8g \u869d\u6cb9\uff0c10ml \u6599\u9152\u6405\u62cc\u5747\u5300\uff0c\u814c\u5236 15 \u5206\u949f\u3002 \u9999\u83dc\u6d17\u5e72\u51c0\u5207\u597d\u3002 \u9505\u91cc\u5012\u6cb9\uff0c\u52a0\u5165\u8c46\u74e3\u9171\uff0c5g \u59dc\u4e1d\uff0c\u849c\u7247\u3002 \u5012\u5165\u5f00\u6c34\uff0c\u716e\u6210\u7ea2\u6c64\u3002 \u8c46\u82bd\u6d17\u5e72\u51c0\u53bb\u6389\u5c3e\u987b\uff0c\u653e\u8fdb\u5f00\u6c34\u91cc\u712f\u719f\u3002 \u5c06\u8c46\u82bd\u94fa\u5165\u7897\u5e95\u3002 \u5c06\u725b\u8089\u7247\u4e00\u7247\u4e00\u7247\u7684\u653e\u8fdb\u7ea2\u6c64\u4e2d\uff0c\u716e\u719f\u4ee5\u540e\u635e\u51fa\u3002 \u5c06\u725b\u8089\u94fa\u5728\u8c46\u82bd\u4e0a\uff0c\u6492\u4e0a\u9999\u83dc\u6897\u3002 \u6492\u4e0a\u9999\u83dc\u53f6\uff0c\u8fa3\u6912\u7c89\uff0c\u8fa3\u6912\u5708\u3002 \u53e6\u8d77\u9505\u70e7\u70ed\u6cb9\uff0c\u5c06\u70ed\u6cb9\u6dcb\u5728\u83dc\u4e0a\u9762\uff0c\u5c31\u5b8c\u6210\u4e86\u3002 \u9644\u52a0\u5185\u5bb9 \u53c2\u8003: \u6c34\u716e\u725b\u8089\u7684\u8be6\u7ec6\u6b65\u9aa4 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u6c34\u716e\u725b\u8089"},{"location":"dishes/meat_dish/%E6%B0%B4%E7%85%AE%E7%89%9B%E8%82%89/%E6%B0%B4%E7%85%AE%E7%89%9B%E8%82%89/#_1","text":"\u9ebb\u8fa3\u9c9c\u9999","title":"\u6c34\u716e\u725b\u8089\u7684\u505a\u6cd5"},{"location":"dishes/meat_dish/%E6%B0%B4%E7%85%AE%E7%89%9B%E8%82%89/%E6%B0%B4%E7%85%AE%E7%89%9B%E8%82%89/#_2","text":"\u725b\u8089 \u8c46\u82bd \u9e21\u86cb \u9999\u83dc \u8c46\u74e3\u9171 \u6599\u9152 \u6dc0\u7c89 \u5e72\u8fa3\u6912\u7c89 \u59dc \u849c \u7ea2\u8fa3\u6912 \u8017\u6cb9","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/meat_dish/%E6%B0%B4%E7%85%AE%E7%89%9B%E8%82%89/%E6%B0%B4%E7%85%AE%E7%89%9B%E8%82%89/#_3","text":"\u4e0b\u8ff0\u6750\u6599\u4e3a\u4e24\u4eba\u4efd\uff0c\u591a\u4eba\u53ef\u6839\u636e\u4eba\u6570\u6309\u6bd4\u4f8b\u589e\u52a0\u914d\u6599\u7684\u91cf\u3002 \u725b\u8089 300g \u8c46\u82bd 100g \u9e21\u86cb 1 \u4e2a \u9999\u83dc 5 \u6839 \u8c46\u74e3\u9171 10g \u6599\u9152 10ml \u6dc0\u7c89 15g \u5e72\u8fa3\u6912\u7c89 5g \u59dc 20g \u849c 3 \u74e3 \u7ea2\u8fa3\u6912 1 \u6839 \u8017\u6cb9 8g","title":"\u8ba1\u7b97"},{"location":"dishes/meat_dish/%E6%B0%B4%E7%85%AE%E7%89%9B%E8%82%89/%E6%B0%B4%E7%85%AE%E7%89%9B%E8%82%89/#_4","text":"\u725b\u8089\u6d17\u5e72\u51c0\u5207\u7247\u3002 \u52a0\u5165 15g \u59dc\u4e1d\uff0c1 \u4e2a\u9e21\u86cb\uff0c15g \u6dc0\u7c89\uff0c8g \u869d\u6cb9\uff0c10ml \u6599\u9152\u6405\u62cc\u5747\u5300\uff0c\u814c\u5236 15 \u5206\u949f\u3002 \u9999\u83dc\u6d17\u5e72\u51c0\u5207\u597d\u3002 \u9505\u91cc\u5012\u6cb9\uff0c\u52a0\u5165\u8c46\u74e3\u9171\uff0c5g \u59dc\u4e1d\uff0c\u849c\u7247\u3002 \u5012\u5165\u5f00\u6c34\uff0c\u716e\u6210\u7ea2\u6c64\u3002 \u8c46\u82bd\u6d17\u5e72\u51c0\u53bb\u6389\u5c3e\u987b\uff0c\u653e\u8fdb\u5f00\u6c34\u91cc\u712f\u719f\u3002 \u5c06\u8c46\u82bd\u94fa\u5165\u7897\u5e95\u3002 \u5c06\u725b\u8089\u7247\u4e00\u7247\u4e00\u7247\u7684\u653e\u8fdb\u7ea2\u6c64\u4e2d\uff0c\u716e\u719f\u4ee5\u540e\u635e\u51fa\u3002 \u5c06\u725b\u8089\u94fa\u5728\u8c46\u82bd\u4e0a\uff0c\u6492\u4e0a\u9999\u83dc\u6897\u3002 \u6492\u4e0a\u9999\u83dc\u53f6\uff0c\u8fa3\u6912\u7c89\uff0c\u8fa3\u6912\u5708\u3002 \u53e6\u8d77\u9505\u70e7\u70ed\u6cb9\uff0c\u5c06\u70ed\u6cb9\u6dcb\u5728\u83dc\u4e0a\u9762\uff0c\u5c31\u5b8c\u6210\u4e86\u3002","title":"\u64cd\u4f5c"},{"location":"dishes/meat_dish/%E6%B0%B4%E7%85%AE%E7%89%9B%E8%82%89/%E6%B0%B4%E7%85%AE%E7%89%9B%E8%82%89/#_5","text":"\u53c2\u8003: \u6c34\u716e\u725b\u8089\u7684\u8be6\u7ec6\u6b65\u9aa4 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/meat_dish/%E7%BA%A2%E7%83%A7%E7%8C%AA%E8%B9%84/%E7%BA%A2%E7%83%A7%E7%8C%AA%E8%B9%84/","text":"\u7ea2\u70e7\u732a\u8e44\u7684\u505a\u6cd5 \u7ea2\u70e7\u732a\u8e44\u8425\u517b\u4e30\u5bcc\uff0c\u5473\u9053\u9999\uff0c\u6c64\u6c41\u6d53\u90c1\u3001\u4e0b\u996d\u5f3a\u3002 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u732a\u8e44 \u9999\u53f6 \u59dc \u8471 \u8001\u62bd \u6842\u76ae \u51b0\u7cd6 \u6599\u9152 \u751f\u62bd \u76d0 \u516b\u89d2 \u98df\u7528\u6cb9 \u8ba1\u7b97 \u98df\u7528\u4eba\u6570\uff1a3~4 \u4eba \u732a\u8e44\uff1a2~3 \u6839 \u98df\u7528\u6cb9\uff1a30ml \u9999\u53f6 2 \u7247 \u59dc 5 \u7247 \u8471\u534a\u6839 \u6842\u76ae 1 \u5757 \u51b0\u7cd6 7-8 \u7c92 \u6599\u9152 30 ml \u751f\u62bd 20 ml \u8001\u62bd 20 ml \u76d0 8 \u514b \u516b\u89d2 4 \u4e2a \u64cd\u4f5c \u5f00\u59cb\u5236\u4f5c \u51b7\u6c34\u9505\u4e2d\u653e\u5165\u70ed\u5fc3\u644a\u4e3b\u5241\u597d\u7684\u732a\u8e44\uff0c\u52a0\u5165 20 ml \u6599\u9152\u4e0e\u8471\u59dc\uff0c\u716e 15 \u5206\u949f\u5de6\u53f3\u53bb\u6389\u8840\u8165 \u70ed\u9505\u51b7\u6cb9\uff0c\u5012\u5165 30ml \u98df\u7528\u6cb9\uff0c\u653e\u5165 7-8 \u7c92\u51b0\u7cd6\uff0c\u5f00\u5c0f\u706b\uff0c\u71ac\u6210\u7cd6\u8272\uff0c\u671f\u95f4\u7528\u9505\u94f2\u628a\u51b0\u7cd6\u538b\u788e\uff0c\u5927\u6982\u71ac 2 \u5206\u949f\u5de6\u53f3 \u71ac\u6210\u7cd6\u8272\u540e\uff0c\u653e\u5165\u712f\u8fc7\u6c34\u7684\u732a\u8e44\uff0c\u7ee7\u7eed\u5c0f\u706b\uff0c\u7ffb\u7092\u732a\u8e44\uff0c\u76f4\u81f3\u6240\u6709\u732a\u8e44\u4e24\u9762\u5fae\u9ec4 \u52a0\u5165\u9999\u53f6 2 \u7247\u3001\u6842\u76ae 1 \u5757\u3001\u516b\u89d2 4 \u4e2a\u3001\u751f\u62bd 20 ml\u3001\u8001\u62bd 20 ml\u3001\u6599\u9152 10 ml\u3001\u59dc 3 \u7247\u3001\u76d0 8 \u514b\uff0c\u8f6c\u4e2d\u706b\u3001\u7ee7\u7eed\u7ffb\u7092 1 \u5206\u949f \u52a0\u5165\u5f00\u6c34\u6216\u8005\u51b7\u6c34\uff0c\u6c34\u9700\u8981\u6ca1\u8fc7\u732a\u8e44\uff0c\u76d6\u4e0a\u9505\u76d6\uff0c\u5927\u706b\u70e7\u5f00\uff0c\u70e7\u5f00\u4e4b\u540e\u5173\u706b \u628a\u9505\u5185\u7684\u98df\u6750\u5168\u90e8\u5012\u5165\u9ad8\u538b\u9505\u4e2d\uff0c\u9ad8\u538b\u9505\u4e2d\u9700\u8981 15 \u5206\u949f\u5de6\u53f3\uff08\u5982\u679c\u540c\u5b66\u6ca1\u6709\u9ad8\u538b\u9505\uff0c\u53ef\u653e\u5728\u9505\u4e2d\u5927\u706b\u8f6c\u5c0f\u706b\u71ac\u5236\u5373\u53ef\uff09 15 \u5206\u949f\u4e4b\u540e\uff0c\u628a\u9ad8\u538b\u9505\u7684\u98df\u6750\u5012\u5165\u7092\u9505\u4e2d\uff0c\u5f00\u5927\u706b\u6536\u6c41\uff0c\u6b64\u65f6\u53ef\u7528\u7b77\u5b50\u5c1d\u4e0b\u5473\u9053\u3001\u6de1\u7684\u8bdd\u53ef\u4ee5\u52a0 2~3g \u76d0 \u5927\u706b\u6536\u6c41\u65f6\u957f\u6839\u636e\u9505\u4e2d\u7684\u6c34\u6765\u7b97\uff0c\u4e00\u822c 30 \u79d2\u5de6\u53f3\u5373\u53ef\uff0c\u591a\u7559\u70b9\u4e5f\u65e0\u788d\u3001\u7ea2\u70e7\u732a\u8e44\u6c64\u4e5f\u662f\u5f88\u4e0b\u996d\u7684 \u9644\u52a0\u5185\u5bb9 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u7ea2\u70e7\u732a\u8e44"},{"location":"dishes/meat_dish/%E7%BA%A2%E7%83%A7%E7%8C%AA%E8%B9%84/%E7%BA%A2%E7%83%A7%E7%8C%AA%E8%B9%84/#_1","text":"\u7ea2\u70e7\u732a\u8e44\u8425\u517b\u4e30\u5bcc\uff0c\u5473\u9053\u9999\uff0c\u6c64\u6c41\u6d53\u90c1\u3001\u4e0b\u996d\u5f3a\u3002","title":"\u7ea2\u70e7\u732a\u8e44\u7684\u505a\u6cd5"},{"location":"dishes/meat_dish/%E7%BA%A2%E7%83%A7%E7%8C%AA%E8%B9%84/%E7%BA%A2%E7%83%A7%E7%8C%AA%E8%B9%84/#_2","text":"\u732a\u8e44 \u9999\u53f6 \u59dc \u8471 \u8001\u62bd \u6842\u76ae \u51b0\u7cd6 \u6599\u9152 \u751f\u62bd \u76d0 \u516b\u89d2 \u98df\u7528\u6cb9","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/meat_dish/%E7%BA%A2%E7%83%A7%E7%8C%AA%E8%B9%84/%E7%BA%A2%E7%83%A7%E7%8C%AA%E8%B9%84/#_3","text":"\u98df\u7528\u4eba\u6570\uff1a3~4 \u4eba \u732a\u8e44\uff1a2~3 \u6839 \u98df\u7528\u6cb9\uff1a30ml \u9999\u53f6 2 \u7247 \u59dc 5 \u7247 \u8471\u534a\u6839 \u6842\u76ae 1 \u5757 \u51b0\u7cd6 7-8 \u7c92 \u6599\u9152 30 ml \u751f\u62bd 20 ml \u8001\u62bd 20 ml \u76d0 8 \u514b \u516b\u89d2 4 \u4e2a","title":"\u8ba1\u7b97"},{"location":"dishes/meat_dish/%E7%BA%A2%E7%83%A7%E7%8C%AA%E8%B9%84/%E7%BA%A2%E7%83%A7%E7%8C%AA%E8%B9%84/#_4","text":"","title":"\u64cd\u4f5c"},{"location":"dishes/meat_dish/%E7%BA%A2%E7%83%A7%E7%8C%AA%E8%B9%84/%E7%BA%A2%E7%83%A7%E7%8C%AA%E8%B9%84/#_5","text":"\u51b7\u6c34\u9505\u4e2d\u653e\u5165\u70ed\u5fc3\u644a\u4e3b\u5241\u597d\u7684\u732a\u8e44\uff0c\u52a0\u5165 20 ml \u6599\u9152\u4e0e\u8471\u59dc\uff0c\u716e 15 \u5206\u949f\u5de6\u53f3\u53bb\u6389\u8840\u8165 \u70ed\u9505\u51b7\u6cb9\uff0c\u5012\u5165 30ml \u98df\u7528\u6cb9\uff0c\u653e\u5165 7-8 \u7c92\u51b0\u7cd6\uff0c\u5f00\u5c0f\u706b\uff0c\u71ac\u6210\u7cd6\u8272\uff0c\u671f\u95f4\u7528\u9505\u94f2\u628a\u51b0\u7cd6\u538b\u788e\uff0c\u5927\u6982\u71ac 2 \u5206\u949f\u5de6\u53f3 \u71ac\u6210\u7cd6\u8272\u540e\uff0c\u653e\u5165\u712f\u8fc7\u6c34\u7684\u732a\u8e44\uff0c\u7ee7\u7eed\u5c0f\u706b\uff0c\u7ffb\u7092\u732a\u8e44\uff0c\u76f4\u81f3\u6240\u6709\u732a\u8e44\u4e24\u9762\u5fae\u9ec4 \u52a0\u5165\u9999\u53f6 2 \u7247\u3001\u6842\u76ae 1 \u5757\u3001\u516b\u89d2 4 \u4e2a\u3001\u751f\u62bd 20 ml\u3001\u8001\u62bd 20 ml\u3001\u6599\u9152 10 ml\u3001\u59dc 3 \u7247\u3001\u76d0 8 \u514b\uff0c\u8f6c\u4e2d\u706b\u3001\u7ee7\u7eed\u7ffb\u7092 1 \u5206\u949f \u52a0\u5165\u5f00\u6c34\u6216\u8005\u51b7\u6c34\uff0c\u6c34\u9700\u8981\u6ca1\u8fc7\u732a\u8e44\uff0c\u76d6\u4e0a\u9505\u76d6\uff0c\u5927\u706b\u70e7\u5f00\uff0c\u70e7\u5f00\u4e4b\u540e\u5173\u706b \u628a\u9505\u5185\u7684\u98df\u6750\u5168\u90e8\u5012\u5165\u9ad8\u538b\u9505\u4e2d\uff0c\u9ad8\u538b\u9505\u4e2d\u9700\u8981 15 \u5206\u949f\u5de6\u53f3\uff08\u5982\u679c\u540c\u5b66\u6ca1\u6709\u9ad8\u538b\u9505\uff0c\u53ef\u653e\u5728\u9505\u4e2d\u5927\u706b\u8f6c\u5c0f\u706b\u71ac\u5236\u5373\u53ef\uff09 15 \u5206\u949f\u4e4b\u540e\uff0c\u628a\u9ad8\u538b\u9505\u7684\u98df\u6750\u5012\u5165\u7092\u9505\u4e2d\uff0c\u5f00\u5927\u706b\u6536\u6c41\uff0c\u6b64\u65f6\u53ef\u7528\u7b77\u5b50\u5c1d\u4e0b\u5473\u9053\u3001\u6de1\u7684\u8bdd\u53ef\u4ee5\u52a0 2~3g \u76d0 \u5927\u706b\u6536\u6c41\u65f6\u957f\u6839\u636e\u9505\u4e2d\u7684\u6c34\u6765\u7b97\uff0c\u4e00\u822c 30 \u79d2\u5de6\u53f3\u5373\u53ef\uff0c\u591a\u7559\u70b9\u4e5f\u65e0\u788d\u3001\u7ea2\u70e7\u732a\u8e44\u6c64\u4e5f\u662f\u5f88\u4e0b\u996d\u7684","title":"\u5f00\u59cb\u5236\u4f5c"},{"location":"dishes/meat_dish/%E7%BA%A2%E7%83%A7%E7%8C%AA%E8%B9%84/%E7%BA%A2%E7%83%A7%E7%8C%AA%E8%B9%84/#_6","text":"\u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/meat_dish/%E7%BA%A2%E7%83%A7%E8%82%89/%E5%8D%97%E6%B4%BE%E7%BA%A2%E7%83%A7%E8%82%89/","text":"\u5357\u7cfb\u7ea2\u70e7\u8089\u7684\u505a\u6cd5 \u8fd9\u4efd\u7ea2\u70e7\u8089\u6559\u7a0b\u662f\u4e00\u9053\u65b0\u624b\u4e0d\u8d25\u7684\u83dc\u8c31\u3002\u914d\u7740\u7c73\u996d\u597d\u5403\u7684\u505c\u4e0d\u4e0b\u6765\uff0c\u9999\u7cef\u65e0\u654c\u68d2\u8272\u6cfd\u8bf1\u4eba\u80a5\u800c\u4e0d\u817b \u5fc5\u5907\u539f\u6599\u4e0e\u5de5\u5177 \u6ce8\uff1a\u5982\u679c\u6709\u53ef\u80fd\uff0c\u8bf7\u5c3d\u91cf\u628a\u5200\u78e8\u7684\u950b\u5229\u4e00\u4e9b\u3002 \u5de5\u5177\uff1a \u9505 \uff08\u7802\u9505\u4e3a\u5b9c\uff0c\u94dd\u9505\u5176\u6b21\uff0c\u9ad8\u538b\u9505\u4e5f\u53ef\u4ee5\uff0c\u6700\u597d\u4e0d\u8981\u94c1\u9505\u3001\u94dc\u9505\uff09\u3001 \u52fa \u3001 \u7897 \u4e3b\u6599\uff1a \u4e94\u82b1\u8089 \u8f85\u6599\uff1a \u6cb9 \u3001 \u51b0\u7cd6 \u3001 \u8001\u62bd \u3001 \u6599\u9152 \u3001 \u9999\u53f6 \u3001 \u516b\u89d2 \u3001 \u751f\u59dc \u3001 \u76d0 \u3001 \u8471 \u3001 \u5f00\u6c34 \u3001 \u51c9\u6c34 \u3001 \u849c \u3001 \u82b1\u6912 \u8ba1\u7b97 \u98df\u7528\u4eba\u6570\uff1a1~3 \u4eba \u732a\u4e94\u82b1\u8089\uff1a\u7ea6 2 \u65a4 \u6cb9\uff1a100-150ml\uff0c\u8272\u62c9\u6cb9\u3001\u732a\u6cb9\u3001\u82b1\u751f\u6cb9\u90fd\u53ef\u4ee5 \u59dc\uff1a 6 \u7247 \u51b0\u7cd6\uff1a\u7ea6 15 \u5757 \u767d\u7802\u7cd6\uff1a30g \u8001\u62bd\uff1a3 \u52fa \u6599\u9152\uff1a4 \u52fa \u51c9\u6c34\uff1a\u6ca1\u8fc7\u98df\u6750\u7684\u91cf\u5373\u53ef\uff0c\u770b\u9505\u5927\u5c0f\u51c6\u5907 \u5f00\u6c34\uff1a\u6ca1\u8fc7\u98df\u6750\u7684\u91cf\u5373\u53ef\uff0c\u770b\u9505\u5927\u5c0f\u51c6\u5907 \u9999\u53f6\uff1a4 \u7247 \u516b\u89d2\uff1a3 \u4e2a \u76d0\uff1a2-3g \u82b1\u6912\uff1a10g \u64cd\u4f5c \u5efa\u8bae\u5728\u6b64\u4e4b\u524d\u67e5\u770b\u7092 \u7cd6\u8272 \u6559\u7a0b \u732a\u4e94\u82b1\u8089 \u5207\u5927\u5757\uff08\u7ea6 4.5cm \u5de6\u53f3\uff09 \u751f\u59dc \u5207\u7247\uff08\u6bcf\u7247\u539a\u5ea6\u7ea6 3mm \u5de6\u53f3\uff09 \u5f00\u6c34 \u70e7\u5f00 \u51c9\u6c34 \u81ea\u6765\u6c34\u5373\u53ef \u5c0f\u8471 \u5c0f\u8471\u767d\u8272\u7684\u90e8\u5206 \u8471\u767d \u5207\u6210\u5c0f\u6bb5\uff08\u5c0f\u8471\u6700\u4f73\uff0c\u5927\u8471\u4e5f\u53ef\u4ee5\uff09 \u849c \u4e2d\u95f4\u5207\u5f00\uff0c\u4e0d\u8981\u62cd\u6241\uff0c\u5426\u5219\u96be\u4ee5\u635e\u51fa\u4ee5\u81f3\u6700\u540e \u6536\u6c41 \u65f6\u5f71\u54cd\u5473\u9053 \u5efa\u8bae\u5148\u62ff\u51fa\u6765\u4e00\u534a\u8471\u59dc\uff0c\u518d\u5c06\u5269\u4e0b\u7684 \u751f\u59dc\u3001\u8471\u767d\u3001\u849c\u3001\u82b1\u6912\u3001\u516b\u89d2\u3001\u9999\u53f6 \u63d0\u524d\u653e\u5165\u4e00\u4e2a\u7897\u4e2d\u5907\u7528 \u51c9\u6c34\u9505\u4e2d\u653e\u5165\u5207\u597d\u7684\u7ea2\u70e7\u8089\uff0c\u52a0\u5165\u6599\u9152\u4e0e 2/5 \u8471\u59dc\uff0c\u716e 15 \u5206\u949f\u5de6\u53f3\u53bb\u6389\u8840\u8165\uff0c\u635e\u51fa\u6765\u540e\u6d17\u5e72\u51c0\uff1b \u7092 \u7cd6\u8272 \uff0c\u6ce8\u610f\u91c7\u7528\u5176\u4e2d\u63d0\u5230\u7684\u64cd\u4f5c 2 \u6765\u5236\u4f5c\u7cd6\u8272\u3002 \u5c06\u51c6\u5907\u597d\u7684 \u751f\u59dc\u3001\u8471\u767d\u3001\u849c\u3001\u82b1\u6912\u3001\u516b\u89d2\u3001\u9999\u53f6 \u8fd8\u6709 \u4e94\u82b1\u8089 \u5012\u5165\u9505\u4e2d \u5927\u706b \u7ffb\u7092\uff0c\u671f\u95f4\u52a0\u5165\u81f3\u95fb\u5230\u9999\u5473\uff0c\u5012\u5165\u5f00\u6c34\u81f3\u6ca1\u8fc7\u5168\u90e8\u8089\u7096\u716e 50 \u5206\u949f-60 \u5206\u949f \u9ad8\u538b\u9505\u7684\u8bdd 40 \u5206\u949f\uff1b \u52a0\u5165 2 \u52fa\u6599\u9152\uff1b \u76d6\u4e0a\u9505\u76d6\u716e\u81f3\u6cb8\u817e\u540e\uff0c\u6bcf\u9694 25 \u5206\u949f\u6253\u5f00\u76d6\u5b50\u5c06\u6d6e\u5728\u8868\u9762\u7684\u6cb9\u548c\u6cab\u635e\u51fa\uff1b \u5f53\u6c34\u7684\u9ad8\u5ea6\u51cf\u81f3\u8089\u6700\u9ad8\u7684\u9ad8\u5ea6\u4e0e\u9505\u5e95\u9ad8\u5ea6\u7684 3/5 \u65f6\uff0c\u8f6c\u4e2d\u706b\uff0c\u5e76\u635e\u51fa\u9664\u8089\u548c\u6c34\u4ee5\u5916\u7684\u6240\u6709\u8f85\u6599\uff0c\u5f00\u59cb\u6536\u6c41\uff1b \u6253\u5f00\u9505\u76d6\uff0c\u5f85\u6c64\u6c41\u5feb\u6ca1\u6709\u7684\u65f6\u7c98\u7a20\u72b6\u51fa\u9505\uff08\u5207\u8bb0\u4e0d\u53ef\u6536\u5e72\uff09\uff1b \u9644\u52a0\u5185\u5bb9 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u5357\u6d3e\u7ea2\u70e7\u8089"},{"location":"dishes/meat_dish/%E7%BA%A2%E7%83%A7%E8%82%89/%E5%8D%97%E6%B4%BE%E7%BA%A2%E7%83%A7%E8%82%89/#_1","text":"\u8fd9\u4efd\u7ea2\u70e7\u8089\u6559\u7a0b\u662f\u4e00\u9053\u65b0\u624b\u4e0d\u8d25\u7684\u83dc\u8c31\u3002\u914d\u7740\u7c73\u996d\u597d\u5403\u7684\u505c\u4e0d\u4e0b\u6765\uff0c\u9999\u7cef\u65e0\u654c\u68d2\u8272\u6cfd\u8bf1\u4eba\u80a5\u800c\u4e0d\u817b","title":"\u5357\u7cfb\u7ea2\u70e7\u8089\u7684\u505a\u6cd5"},{"location":"dishes/meat_dish/%E7%BA%A2%E7%83%A7%E8%82%89/%E5%8D%97%E6%B4%BE%E7%BA%A2%E7%83%A7%E8%82%89/#_2","text":"\u6ce8\uff1a\u5982\u679c\u6709\u53ef\u80fd\uff0c\u8bf7\u5c3d\u91cf\u628a\u5200\u78e8\u7684\u950b\u5229\u4e00\u4e9b\u3002 \u5de5\u5177\uff1a \u9505 \uff08\u7802\u9505\u4e3a\u5b9c\uff0c\u94dd\u9505\u5176\u6b21\uff0c\u9ad8\u538b\u9505\u4e5f\u53ef\u4ee5\uff0c\u6700\u597d\u4e0d\u8981\u94c1\u9505\u3001\u94dc\u9505\uff09\u3001 \u52fa \u3001 \u7897 \u4e3b\u6599\uff1a \u4e94\u82b1\u8089 \u8f85\u6599\uff1a \u6cb9 \u3001 \u51b0\u7cd6 \u3001 \u8001\u62bd \u3001 \u6599\u9152 \u3001 \u9999\u53f6 \u3001 \u516b\u89d2 \u3001 \u751f\u59dc \u3001 \u76d0 \u3001 \u8471 \u3001 \u5f00\u6c34 \u3001 \u51c9\u6c34 \u3001 \u849c \u3001 \u82b1\u6912","title":"\u5fc5\u5907\u539f\u6599\u4e0e\u5de5\u5177"},{"location":"dishes/meat_dish/%E7%BA%A2%E7%83%A7%E8%82%89/%E5%8D%97%E6%B4%BE%E7%BA%A2%E7%83%A7%E8%82%89/#_3","text":"\u98df\u7528\u4eba\u6570\uff1a1~3 \u4eba \u732a\u4e94\u82b1\u8089\uff1a\u7ea6 2 \u65a4 \u6cb9\uff1a100-150ml\uff0c\u8272\u62c9\u6cb9\u3001\u732a\u6cb9\u3001\u82b1\u751f\u6cb9\u90fd\u53ef\u4ee5 \u59dc\uff1a 6 \u7247 \u51b0\u7cd6\uff1a\u7ea6 15 \u5757 \u767d\u7802\u7cd6\uff1a30g \u8001\u62bd\uff1a3 \u52fa \u6599\u9152\uff1a4 \u52fa \u51c9\u6c34\uff1a\u6ca1\u8fc7\u98df\u6750\u7684\u91cf\u5373\u53ef\uff0c\u770b\u9505\u5927\u5c0f\u51c6\u5907 \u5f00\u6c34\uff1a\u6ca1\u8fc7\u98df\u6750\u7684\u91cf\u5373\u53ef\uff0c\u770b\u9505\u5927\u5c0f\u51c6\u5907 \u9999\u53f6\uff1a4 \u7247 \u516b\u89d2\uff1a3 \u4e2a \u76d0\uff1a2-3g \u82b1\u6912\uff1a10g","title":"\u8ba1\u7b97"},{"location":"dishes/meat_dish/%E7%BA%A2%E7%83%A7%E8%82%89/%E5%8D%97%E6%B4%BE%E7%BA%A2%E7%83%A7%E8%82%89/#_4","text":"\u5efa\u8bae\u5728\u6b64\u4e4b\u524d\u67e5\u770b\u7092 \u7cd6\u8272 \u6559\u7a0b \u732a\u4e94\u82b1\u8089 \u5207\u5927\u5757\uff08\u7ea6 4.5cm \u5de6\u53f3\uff09 \u751f\u59dc \u5207\u7247\uff08\u6bcf\u7247\u539a\u5ea6\u7ea6 3mm \u5de6\u53f3\uff09 \u5f00\u6c34 \u70e7\u5f00 \u51c9\u6c34 \u81ea\u6765\u6c34\u5373\u53ef \u5c0f\u8471 \u5c0f\u8471\u767d\u8272\u7684\u90e8\u5206 \u8471\u767d \u5207\u6210\u5c0f\u6bb5\uff08\u5c0f\u8471\u6700\u4f73\uff0c\u5927\u8471\u4e5f\u53ef\u4ee5\uff09 \u849c \u4e2d\u95f4\u5207\u5f00\uff0c\u4e0d\u8981\u62cd\u6241\uff0c\u5426\u5219\u96be\u4ee5\u635e\u51fa\u4ee5\u81f3\u6700\u540e \u6536\u6c41 \u65f6\u5f71\u54cd\u5473\u9053 \u5efa\u8bae\u5148\u62ff\u51fa\u6765\u4e00\u534a\u8471\u59dc\uff0c\u518d\u5c06\u5269\u4e0b\u7684 \u751f\u59dc\u3001\u8471\u767d\u3001\u849c\u3001\u82b1\u6912\u3001\u516b\u89d2\u3001\u9999\u53f6 \u63d0\u524d\u653e\u5165\u4e00\u4e2a\u7897\u4e2d\u5907\u7528 \u51c9\u6c34\u9505\u4e2d\u653e\u5165\u5207\u597d\u7684\u7ea2\u70e7\u8089\uff0c\u52a0\u5165\u6599\u9152\u4e0e 2/5 \u8471\u59dc\uff0c\u716e 15 \u5206\u949f\u5de6\u53f3\u53bb\u6389\u8840\u8165\uff0c\u635e\u51fa\u6765\u540e\u6d17\u5e72\u51c0\uff1b \u7092 \u7cd6\u8272 \uff0c\u6ce8\u610f\u91c7\u7528\u5176\u4e2d\u63d0\u5230\u7684\u64cd\u4f5c 2 \u6765\u5236\u4f5c\u7cd6\u8272\u3002 \u5c06\u51c6\u5907\u597d\u7684 \u751f\u59dc\u3001\u8471\u767d\u3001\u849c\u3001\u82b1\u6912\u3001\u516b\u89d2\u3001\u9999\u53f6 \u8fd8\u6709 \u4e94\u82b1\u8089 \u5012\u5165\u9505\u4e2d \u5927\u706b \u7ffb\u7092\uff0c\u671f\u95f4\u52a0\u5165\u81f3\u95fb\u5230\u9999\u5473\uff0c\u5012\u5165\u5f00\u6c34\u81f3\u6ca1\u8fc7\u5168\u90e8\u8089\u7096\u716e 50 \u5206\u949f-60 \u5206\u949f \u9ad8\u538b\u9505\u7684\u8bdd 40 \u5206\u949f\uff1b \u52a0\u5165 2 \u52fa\u6599\u9152\uff1b \u76d6\u4e0a\u9505\u76d6\u716e\u81f3\u6cb8\u817e\u540e\uff0c\u6bcf\u9694 25 \u5206\u949f\u6253\u5f00\u76d6\u5b50\u5c06\u6d6e\u5728\u8868\u9762\u7684\u6cb9\u548c\u6cab\u635e\u51fa\uff1b \u5f53\u6c34\u7684\u9ad8\u5ea6\u51cf\u81f3\u8089\u6700\u9ad8\u7684\u9ad8\u5ea6\u4e0e\u9505\u5e95\u9ad8\u5ea6\u7684 3/5 \u65f6\uff0c\u8f6c\u4e2d\u706b\uff0c\u5e76\u635e\u51fa\u9664\u8089\u548c\u6c34\u4ee5\u5916\u7684\u6240\u6709\u8f85\u6599\uff0c\u5f00\u59cb\u6536\u6c41\uff1b \u6253\u5f00\u9505\u76d6\uff0c\u5f85\u6c64\u6c41\u5feb\u6ca1\u6709\u7684\u65f6\u7c98\u7a20\u72b6\u51fa\u9505\uff08\u5207\u8bb0\u4e0d\u53ef\u6536\u5e72\uff09\uff1b","title":"\u64cd\u4f5c"},{"location":"dishes/meat_dish/%E7%BA%A2%E7%83%A7%E8%82%89/%E5%8D%97%E6%B4%BE%E7%BA%A2%E7%83%A7%E8%82%89/#_5","text":"\u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/meat_dish/%E7%BA%A2%E7%83%A7%E8%82%89/%E7%AE%80%E6%98%93%E7%BA%A2%E7%83%A7%E8%82%89/","text":"\u7ea2\u70e7\u8089\u7684\u505a\u6cd5 \u8fd9\u4efd\u7ea2\u70e7\u8089\u6559\u7a0b\u662f\u4e00\u9053\u65b0\u624b\u4e0d\u8d25\u7684\u83dc\u8c31\u3002\u914d\u7740\u7c73\u996d\u597d\u5403\u7684\u505c\u4e0d\u4e0b\u6765\uff0c\u9999\u7cef\u65e0\u654c\u68d2\u8272\u6cfd\u8bf1\u4eba\u80a5\u800c\u4e0d\u817b \u5fc5\u5907\u539f\u6599\u4e0e\u5de5\u5177 \u6ce8\uff1a\u5982\u679c\u6709\u53ef\u80fd\uff0c\u8bf7\u5c3d\u91cf\u628a\u5200\u78e8\u7684\u950b\u5229\u4e00\u4e9b\u3002 \u4e3b\u6599\uff1a \u5927\u8089 \u3001 \u9e21\u86cb \uff08\u53ef\u9009\uff09\u3001 \u8c46\u76ae \uff08\u53ef\u9009\uff09 \u8f85\u6599\uff1a \u751f\u59dc \u3001 \u51b0\u7cd6 \u3001 \u751f\u62bd \u3001 \u8001\u62bd \u3001 \u6599\u9152 \u3001 \u9999\u53f6 \u3001 \u516b\u89d2 \u3001 \u76d0 \u3001 \u6c34 \u3001 \u8471 \uff08\u8bb0\u5f97\u8981\u5f00\u6c34\uff09 \u8ba1\u7b97 \u98df\u7528\u4eba\u6570\uff1a2~3 \u4eba \u732a\u4e94\u82b1\u8089\uff1a\u7ea6 3~4 \u65a4 \u59dc\uff1a 6 \u7247 \u51b0\u7cd6\uff1a15 \u514b\uff08\u7ea6 7 \u5757\uff09 \u751f\u62bd\uff1a2 \u52fa \u8001\u62bd\uff1a3 \u52fa \u6599\u9152\uff1a1 \u52fa \u5f00\u6c34\uff1a\u6ca1\u8fc7\u98df\u6750\u7684\u91cf\uff0c\u9700\u8981 600ml-900ml \u9999\u53f6\uff1a3 \u7247 \u516b\u89d2\uff1a2 \u4e2a \u9e21\u86cb\uff08\u53ef\u9009\uff09\uff1a0-2 \u4e2a \u8c46\u76ae\uff08\u53ef\u9009\uff09\uff1a0-80g \u76d0\uff1a2-3g \u64cd\u4f5c \u539f\u6750\u6599\u51c6\u5907 \u732a\u4e94\u82b1\u8089 \u5207\u5927\u5757\uff08\u7ea6 4.5cm \u5de6\u53f3\uff0c\u51b7\u51bb\u534a\u5c0f\u65f6\u81f3\u4e00\u5c0f\u65f6\u66f4\u597d\u5207\uff09 \u8c46\u76ae \u5207 2cm \u7684\u5bbd\u5ea6 \u751f\u59dc \u5207\u7247\uff08\u6bcf\u7247\u539a\u5ea6\u7ea6 3mm \u5de6\u53f3\uff09 \u6c34 \u70e7\u5f00 \u9e21\u86cb \u716e\u719f\u5e76\u7528 \u53c9\u5b50 / \u7259\u7b7e \u624e\u5b54\uff08\u5c3d\u91cf\u591a\u4e9b\u597d\u5165\u5473\uff09 \u5927\u8471 \u5927\u8471\u767d\u8272\u7684\u90e8\u5206 \u8471\u767d \u5f00\u59cb\u5236\u4f5c \u51b7\u6c34\u9505\u4e2d\u653e\u5165\u5207\u597d\u7684\u7ea2\u70e7\u8089\uff0c\u52a0\u5165\u6599\u9152\u4e0e\u8471\u59dc\uff0c\u716e 15 \u5206\u949f\u5de6\u53f3\u53bb\u6389\u8840\u8165 \u9505\u4e2d\u653e\u5165\u4e24\u7247 \u751f\u59dc \u63d0\u5473 \u5f00\u4e2d\u5c0f\u706b\u540e\u76f4\u63a5\u52a0\u5165 \u4e94\u82b1\u8089 \uff0c\u4e0d\u9700\u8981\u653e\u5165\u98df\u7528\u6cb9\uff0c\u6bcf\u5757 \u4e94\u82b1\u8089 \u516d\u4e2a\u9762\u90fd\u714e\u4e00\u4e0b\uff0c\u714e\u81f3\u51fa\u6cb9\u5373\u53ef \u5c06\u714e\u51fa\u7684\u6cb9\u5012\u51fa\u5907\u7528\uff0c\u5e76\u5c06 \u4e94\u82b1\u8089 \u63a8\u81f3\u4e00\u8fb9\uff0c\u52a0\u5165 15g \u51b0\u7cd6 \uff0c\u7ffb\u7092\u81f3 \u51b0\u7cd6 \u878d\u5316\uff1b \u878d\u5316\u540e\u5c06\u4e94\u82b1\u8089\u4e0e\u51b0\u7cd6\u7092\u81f3\u878d\u5408\u4e0a\u8272\uff0c\u52a0\u5165 \u751f\u62bd 2 \u52fa \u8001\u62bd 3 \u52fa \u6599\u9152 1 \u52fa \u7ffb\u7092\u81f3\u4e0a\u8272\uff1b \u52a0\u5165 \u70e7\u597d\u7684\u5f00\u6c34 \u7096\u716e 40 \u5206\u949f\uff08\u5200\u5de5\u5dee\u7684\u540c\u5b66\u5207\u7684\u8fc7\u5927\u8bf7\u81ea\u89c9\u5ef6\u957f\u7096\u716e\u65f6\u95f4\uff09\uff0c\u5e76\u653e\u5165 \u751f\u59dc 2 \u7247 \u9999\u53f6 3 \u7247 \u516b\u89d2 2 \u4e2a \u76d6\u4e0a\u9505\u76d6\u716e\u81f3\u6cb8\u817e\u540e\uff0c\u52a0\u5165\u716e\u597d\u624e\u597d\u5b54\u7684 \u9e21\u86cb \u548c \u8c46\u76ae \uff0c\u5f00\u4e2d\u5c0f\u706b\uff0c\u7b49\u5f85 40 \u5206\u949f\u3002\uff08\u4e2d\u9014\u53ef\u9002\u5f53\u7ffb\u6405\u9632\u6b62\u7c98\u9505\uff09\uff1b \u6253\u5f00\u9505\u76d6\uff0c\u5f85\u6c64\u6c41\u5feb\u6ca1\u6709\u7684\u65f6\u5019\u5f00\u5927\u706b\u6536\u6c41\uff08\u5207\u8bb0\u4e0d\u53ef\u6536\u5e72\uff09\uff1b \u52a0\u5165 2-3g \u76d0 \uff0c\u7ffb\u7092\u4e00\u4e0b\uff0c\u5c31\u53ef\u4ee5\u51fa\u9505\u4e86\u3002 \u9644\u52a0\u5185\u5bb9 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u7b80\u6613\u7ea2\u70e7\u8089"},{"location":"dishes/meat_dish/%E7%BA%A2%E7%83%A7%E8%82%89/%E7%AE%80%E6%98%93%E7%BA%A2%E7%83%A7%E8%82%89/#_1","text":"\u8fd9\u4efd\u7ea2\u70e7\u8089\u6559\u7a0b\u662f\u4e00\u9053\u65b0\u624b\u4e0d\u8d25\u7684\u83dc\u8c31\u3002\u914d\u7740\u7c73\u996d\u597d\u5403\u7684\u505c\u4e0d\u4e0b\u6765\uff0c\u9999\u7cef\u65e0\u654c\u68d2\u8272\u6cfd\u8bf1\u4eba\u80a5\u800c\u4e0d\u817b","title":"\u7ea2\u70e7\u8089\u7684\u505a\u6cd5"},{"location":"dishes/meat_dish/%E7%BA%A2%E7%83%A7%E8%82%89/%E7%AE%80%E6%98%93%E7%BA%A2%E7%83%A7%E8%82%89/#_2","text":"\u6ce8\uff1a\u5982\u679c\u6709\u53ef\u80fd\uff0c\u8bf7\u5c3d\u91cf\u628a\u5200\u78e8\u7684\u950b\u5229\u4e00\u4e9b\u3002 \u4e3b\u6599\uff1a \u5927\u8089 \u3001 \u9e21\u86cb \uff08\u53ef\u9009\uff09\u3001 \u8c46\u76ae \uff08\u53ef\u9009\uff09 \u8f85\u6599\uff1a \u751f\u59dc \u3001 \u51b0\u7cd6 \u3001 \u751f\u62bd \u3001 \u8001\u62bd \u3001 \u6599\u9152 \u3001 \u9999\u53f6 \u3001 \u516b\u89d2 \u3001 \u76d0 \u3001 \u6c34 \u3001 \u8471 \uff08\u8bb0\u5f97\u8981\u5f00\u6c34\uff09","title":"\u5fc5\u5907\u539f\u6599\u4e0e\u5de5\u5177"},{"location":"dishes/meat_dish/%E7%BA%A2%E7%83%A7%E8%82%89/%E7%AE%80%E6%98%93%E7%BA%A2%E7%83%A7%E8%82%89/#_3","text":"\u98df\u7528\u4eba\u6570\uff1a2~3 \u4eba \u732a\u4e94\u82b1\u8089\uff1a\u7ea6 3~4 \u65a4 \u59dc\uff1a 6 \u7247 \u51b0\u7cd6\uff1a15 \u514b\uff08\u7ea6 7 \u5757\uff09 \u751f\u62bd\uff1a2 \u52fa \u8001\u62bd\uff1a3 \u52fa \u6599\u9152\uff1a1 \u52fa \u5f00\u6c34\uff1a\u6ca1\u8fc7\u98df\u6750\u7684\u91cf\uff0c\u9700\u8981 600ml-900ml \u9999\u53f6\uff1a3 \u7247 \u516b\u89d2\uff1a2 \u4e2a \u9e21\u86cb\uff08\u53ef\u9009\uff09\uff1a0-2 \u4e2a \u8c46\u76ae\uff08\u53ef\u9009\uff09\uff1a0-80g \u76d0\uff1a2-3g","title":"\u8ba1\u7b97"},{"location":"dishes/meat_dish/%E7%BA%A2%E7%83%A7%E8%82%89/%E7%AE%80%E6%98%93%E7%BA%A2%E7%83%A7%E8%82%89/#_4","text":"","title":"\u64cd\u4f5c"},{"location":"dishes/meat_dish/%E7%BA%A2%E7%83%A7%E8%82%89/%E7%AE%80%E6%98%93%E7%BA%A2%E7%83%A7%E8%82%89/#_5","text":"\u732a\u4e94\u82b1\u8089 \u5207\u5927\u5757\uff08\u7ea6 4.5cm \u5de6\u53f3\uff0c\u51b7\u51bb\u534a\u5c0f\u65f6\u81f3\u4e00\u5c0f\u65f6\u66f4\u597d\u5207\uff09 \u8c46\u76ae \u5207 2cm \u7684\u5bbd\u5ea6 \u751f\u59dc \u5207\u7247\uff08\u6bcf\u7247\u539a\u5ea6\u7ea6 3mm \u5de6\u53f3\uff09 \u6c34 \u70e7\u5f00 \u9e21\u86cb \u716e\u719f\u5e76\u7528 \u53c9\u5b50 / \u7259\u7b7e \u624e\u5b54\uff08\u5c3d\u91cf\u591a\u4e9b\u597d\u5165\u5473\uff09 \u5927\u8471 \u5927\u8471\u767d\u8272\u7684\u90e8\u5206 \u8471\u767d","title":"\u539f\u6750\u6599\u51c6\u5907"},{"location":"dishes/meat_dish/%E7%BA%A2%E7%83%A7%E8%82%89/%E7%AE%80%E6%98%93%E7%BA%A2%E7%83%A7%E8%82%89/#_6","text":"\u51b7\u6c34\u9505\u4e2d\u653e\u5165\u5207\u597d\u7684\u7ea2\u70e7\u8089\uff0c\u52a0\u5165\u6599\u9152\u4e0e\u8471\u59dc\uff0c\u716e 15 \u5206\u949f\u5de6\u53f3\u53bb\u6389\u8840\u8165 \u9505\u4e2d\u653e\u5165\u4e24\u7247 \u751f\u59dc \u63d0\u5473 \u5f00\u4e2d\u5c0f\u706b\u540e\u76f4\u63a5\u52a0\u5165 \u4e94\u82b1\u8089 \uff0c\u4e0d\u9700\u8981\u653e\u5165\u98df\u7528\u6cb9\uff0c\u6bcf\u5757 \u4e94\u82b1\u8089 \u516d\u4e2a\u9762\u90fd\u714e\u4e00\u4e0b\uff0c\u714e\u81f3\u51fa\u6cb9\u5373\u53ef \u5c06\u714e\u51fa\u7684\u6cb9\u5012\u51fa\u5907\u7528\uff0c\u5e76\u5c06 \u4e94\u82b1\u8089 \u63a8\u81f3\u4e00\u8fb9\uff0c\u52a0\u5165 15g \u51b0\u7cd6 \uff0c\u7ffb\u7092\u81f3 \u51b0\u7cd6 \u878d\u5316\uff1b \u878d\u5316\u540e\u5c06\u4e94\u82b1\u8089\u4e0e\u51b0\u7cd6\u7092\u81f3\u878d\u5408\u4e0a\u8272\uff0c\u52a0\u5165 \u751f\u62bd 2 \u52fa \u8001\u62bd 3 \u52fa \u6599\u9152 1 \u52fa \u7ffb\u7092\u81f3\u4e0a\u8272\uff1b \u52a0\u5165 \u70e7\u597d\u7684\u5f00\u6c34 \u7096\u716e 40 \u5206\u949f\uff08\u5200\u5de5\u5dee\u7684\u540c\u5b66\u5207\u7684\u8fc7\u5927\u8bf7\u81ea\u89c9\u5ef6\u957f\u7096\u716e\u65f6\u95f4\uff09\uff0c\u5e76\u653e\u5165 \u751f\u59dc 2 \u7247 \u9999\u53f6 3 \u7247 \u516b\u89d2 2 \u4e2a \u76d6\u4e0a\u9505\u76d6\u716e\u81f3\u6cb8\u817e\u540e\uff0c\u52a0\u5165\u716e\u597d\u624e\u597d\u5b54\u7684 \u9e21\u86cb \u548c \u8c46\u76ae \uff0c\u5f00\u4e2d\u5c0f\u706b\uff0c\u7b49\u5f85 40 \u5206\u949f\u3002\uff08\u4e2d\u9014\u53ef\u9002\u5f53\u7ffb\u6405\u9632\u6b62\u7c98\u9505\uff09\uff1b \u6253\u5f00\u9505\u76d6\uff0c\u5f85\u6c64\u6c41\u5feb\u6ca1\u6709\u7684\u65f6\u5019\u5f00\u5927\u706b\u6536\u6c41\uff08\u5207\u8bb0\u4e0d\u53ef\u6536\u5e72\uff09\uff1b \u52a0\u5165 2-3g \u76d0 \uff0c\u7ffb\u7092\u4e00\u4e0b\uff0c\u5c31\u53ef\u4ee5\u51fa\u9505\u4e86\u3002","title":"\u5f00\u59cb\u5236\u4f5c"},{"location":"dishes/meat_dish/%E7%BA%A2%E7%83%A7%E8%82%89/%E7%AE%80%E6%98%93%E7%BA%A2%E7%83%A7%E8%82%89/#_7","text":"\u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/meat_dish/%E8%80%81%E5%BC%8F%E9%94%85%E5%8C%85%E8%82%89/%E8%80%81%E5%BC%8F%E9%94%85%E5%8C%85%E8%82%89/","text":"\u8001\u5f0f\u9505\u5305\u8089\u7684\u505a\u6cd5 \u9505\u5305\u8089\u662f\u4e1c\u5317\u540d\u83dc\uff0c\u5149\u7eea\u5e74\u95f4\u59cb\u521b\u81ea\u54c8\u5c14\u6ee8\u9053\u53f0\u5e9c\u5e9c\u5c39\u675c\u5b66\u8d62\u53a8\u5e08\u90d1\u5174\u6587\u4e4b\u624b\uff0c\u53bb\u4e1c\u5317\u9910\u9986\uff0c\u5e08\u5085\u90fd\u4f1a\u95ee\u4f60\u9505\u5305\u8089\u8981\u8001\u5f0f\u7684\u8fd8\u662f\u65b0\u5f0f\u7684\uff0c\u533a\u522b\u5728\u4e8e\u9178\u5473\u6765\u6e90\u4e0d\u540c\uff0c\u8001\u5f0f\u7684\u5c31\u662f\u767d\u918b\u6c41\uff0c\u65b0\u5f0f\u7684\u52a0\u4e86\u756a\u8304\u9171\u3002 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u91cc\u810a\u8089 \u5927\u8471 \u59dc \u80e1\u841d\u535c \u9999\u83dc \u767d\u918b \u767d\u7cd6 \u6599\u9152 \u9999\u6cb9 \u9171\u6cb9 \u76d0 \u6c34\u6dc0\u7c89 \u571f\u8c46\u6dc0\u7c89 \u8ba1\u7b97 \u6bcf\u4efd\uff1a \u91cc\u810a\u8089 400g \u5927\u8471 50g \u59dc 30g \u80e1\u841d\u535c 200g \u9999\u83dc 100g \u767d\u918b 40g \u767d\u7cd6 40g \u6599\u9152 5ml \u9999\u6cb9 2ml \u9171\u6cb9 2g \u76d0 2g \u6c34\u6dc0\u7c89 10ml \u571f\u8c46\u6dc0\u7c89 100g \u64cd\u4f5c \u5207\u8089\uff1a\u732a\u91cc\u810a\u5207\u7247\uff0c\u8584\u539a\u8981\u5747\u5300\u3002 \u814c\u8089\uff1a\u7528\u76d0\u5c11\u8bb8\uff0c\u4e00\u52fa\u6599\u9152\u5916\u52a0\u6c34\u6dc0\u7c89\u6293\u62cc\u5747\u5300\uff0c\u814c\u5236 15 \u5206\u949f\u3002 \u88f9\u7c89\uff1a\u732a\u91cc\u810a\u8089\u4e24\u9762\u5747\u5300\u7684\u8638\u4e0a\u4e00\u5c42\u571f\u8c46\u6dc0\u7c89\u3002 \u8c03\u6c41\uff1a\u767d\u7cd6 40g\uff0c\u767d\u918b 40g\uff0c\u9171\u6cb9 2g\uff0c\u9999\u6cb9 2ml\uff0c\u76d0 2g\uff0c\u6c34\u6dc0\u7c89 10ml\uff0c\u5012\u5728\u4e00\u8d77\u8fdb\u884c\u6df7\u5408\u3002 \u70ed\u6cb9\uff1a\u52a0\u70ed\u5230\u4e03\u6210\u719f\u3002 \u70b8\u5236\uff1a\u628a\u8089\u7247\u70b8\u5236\u91d1\u9ec4\uff0c\u70b8\u4e24\u904d\u4fdd\u6301\u9165\u8106\u3002 \u914d\u83dc\uff1a\u59dc\uff0c\u5927\u8471\uff0c\u80e1\u841d\u535c\u5207\u6210\u4e1d\uff0c\u9999\u83dc\u5207\u6bb5\u3002 \u8c03\u6c41\uff1a\u9505\u91cc\u7559\u5c11\u8bb8\u5e95\u6cb9\uff0c\u4e0b\u8471\u4e1d\u59dc\u4e1d\u7178\u7092\u51fa\u9999\u5473\uff0c\u5012\u5165\u7cd6\u918b\u6c41\uff0c\u716e\u6cb8\u5192\u6ce1\u3002 \u51fa\u83dc\uff1a\u5feb\u901f\u4e0b\u5165\u70b8\u5236\u597d\u7684\u8089\u7247\uff0c\u4ee5\u53ca\u80e1\u841d\u535c\u4e1d\u9999\u83dc\u6bb5,\u5feb\u901f\u7ffb\u7092\u5747\u5300,\u5173\u706b\u5373\u53ef\u76db\u76d8. \u9644\u52a0\u5185\u5bb9 \u8089\u7247\u8981\u70b8\u4e24\u904d\uff0c\u5426\u5219\u8fbe\u4e0d\u5230\u5916\u7126\u91cc\u5ae9\u7684\u6548\u679c\uff01 \u53c2\u8003\u8d44\u6599 \u767e\u5ea6\u767e\u79d1 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u8001\u5f0f\u9505\u5305\u8089"},{"location":"dishes/meat_dish/%E8%80%81%E5%BC%8F%E9%94%85%E5%8C%85%E8%82%89/%E8%80%81%E5%BC%8F%E9%94%85%E5%8C%85%E8%82%89/#_1","text":"\u9505\u5305\u8089\u662f\u4e1c\u5317\u540d\u83dc\uff0c\u5149\u7eea\u5e74\u95f4\u59cb\u521b\u81ea\u54c8\u5c14\u6ee8\u9053\u53f0\u5e9c\u5e9c\u5c39\u675c\u5b66\u8d62\u53a8\u5e08\u90d1\u5174\u6587\u4e4b\u624b\uff0c\u53bb\u4e1c\u5317\u9910\u9986\uff0c\u5e08\u5085\u90fd\u4f1a\u95ee\u4f60\u9505\u5305\u8089\u8981\u8001\u5f0f\u7684\u8fd8\u662f\u65b0\u5f0f\u7684\uff0c\u533a\u522b\u5728\u4e8e\u9178\u5473\u6765\u6e90\u4e0d\u540c\uff0c\u8001\u5f0f\u7684\u5c31\u662f\u767d\u918b\u6c41\uff0c\u65b0\u5f0f\u7684\u52a0\u4e86\u756a\u8304\u9171\u3002","title":"\u8001\u5f0f\u9505\u5305\u8089\u7684\u505a\u6cd5"},{"location":"dishes/meat_dish/%E8%80%81%E5%BC%8F%E9%94%85%E5%8C%85%E8%82%89/%E8%80%81%E5%BC%8F%E9%94%85%E5%8C%85%E8%82%89/#_2","text":"\u91cc\u810a\u8089 \u5927\u8471 \u59dc \u80e1\u841d\u535c \u9999\u83dc \u767d\u918b \u767d\u7cd6 \u6599\u9152 \u9999\u6cb9 \u9171\u6cb9 \u76d0 \u6c34\u6dc0\u7c89 \u571f\u8c46\u6dc0\u7c89","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/meat_dish/%E8%80%81%E5%BC%8F%E9%94%85%E5%8C%85%E8%82%89/%E8%80%81%E5%BC%8F%E9%94%85%E5%8C%85%E8%82%89/#_3","text":"\u6bcf\u4efd\uff1a \u91cc\u810a\u8089 400g \u5927\u8471 50g \u59dc 30g \u80e1\u841d\u535c 200g \u9999\u83dc 100g \u767d\u918b 40g \u767d\u7cd6 40g \u6599\u9152 5ml \u9999\u6cb9 2ml \u9171\u6cb9 2g \u76d0 2g \u6c34\u6dc0\u7c89 10ml \u571f\u8c46\u6dc0\u7c89 100g","title":"\u8ba1\u7b97"},{"location":"dishes/meat_dish/%E8%80%81%E5%BC%8F%E9%94%85%E5%8C%85%E8%82%89/%E8%80%81%E5%BC%8F%E9%94%85%E5%8C%85%E8%82%89/#_4","text":"\u5207\u8089\uff1a\u732a\u91cc\u810a\u5207\u7247\uff0c\u8584\u539a\u8981\u5747\u5300\u3002 \u814c\u8089\uff1a\u7528\u76d0\u5c11\u8bb8\uff0c\u4e00\u52fa\u6599\u9152\u5916\u52a0\u6c34\u6dc0\u7c89\u6293\u62cc\u5747\u5300\uff0c\u814c\u5236 15 \u5206\u949f\u3002 \u88f9\u7c89\uff1a\u732a\u91cc\u810a\u8089\u4e24\u9762\u5747\u5300\u7684\u8638\u4e0a\u4e00\u5c42\u571f\u8c46\u6dc0\u7c89\u3002 \u8c03\u6c41\uff1a\u767d\u7cd6 40g\uff0c\u767d\u918b 40g\uff0c\u9171\u6cb9 2g\uff0c\u9999\u6cb9 2ml\uff0c\u76d0 2g\uff0c\u6c34\u6dc0\u7c89 10ml\uff0c\u5012\u5728\u4e00\u8d77\u8fdb\u884c\u6df7\u5408\u3002 \u70ed\u6cb9\uff1a\u52a0\u70ed\u5230\u4e03\u6210\u719f\u3002 \u70b8\u5236\uff1a\u628a\u8089\u7247\u70b8\u5236\u91d1\u9ec4\uff0c\u70b8\u4e24\u904d\u4fdd\u6301\u9165\u8106\u3002 \u914d\u83dc\uff1a\u59dc\uff0c\u5927\u8471\uff0c\u80e1\u841d\u535c\u5207\u6210\u4e1d\uff0c\u9999\u83dc\u5207\u6bb5\u3002 \u8c03\u6c41\uff1a\u9505\u91cc\u7559\u5c11\u8bb8\u5e95\u6cb9\uff0c\u4e0b\u8471\u4e1d\u59dc\u4e1d\u7178\u7092\u51fa\u9999\u5473\uff0c\u5012\u5165\u7cd6\u918b\u6c41\uff0c\u716e\u6cb8\u5192\u6ce1\u3002 \u51fa\u83dc\uff1a\u5feb\u901f\u4e0b\u5165\u70b8\u5236\u597d\u7684\u8089\u7247\uff0c\u4ee5\u53ca\u80e1\u841d\u535c\u4e1d\u9999\u83dc\u6bb5,\u5feb\u901f\u7ffb\u7092\u5747\u5300,\u5173\u706b\u5373\u53ef\u76db\u76d8.","title":"\u64cd\u4f5c"},{"location":"dishes/meat_dish/%E8%80%81%E5%BC%8F%E9%94%85%E5%8C%85%E8%82%89/%E8%80%81%E5%BC%8F%E9%94%85%E5%8C%85%E8%82%89/#_5","text":"\u8089\u7247\u8981\u70b8\u4e24\u904d\uff0c\u5426\u5219\u8fbe\u4e0d\u5230\u5916\u7126\u91cc\u5ae9\u7684\u6548\u679c\uff01","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/meat_dish/%E8%80%81%E5%BC%8F%E9%94%85%E5%8C%85%E8%82%89/%E8%80%81%E5%BC%8F%E9%94%85%E5%8C%85%E8%82%89/#_6","text":"\u767e\u5ea6\u767e\u79d1 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u53c2\u8003\u8d44\u6599"},{"location":"dishes/meat_dish/%E8%A1%80%E6%B5%86%E9%B8%AD/%E8%A1%80%E6%B5%86%E9%B8%AD/","text":"\u5bb6\u5e38\u8840\u6d46\u9e2d\u7684\u505a\u6cd5 \u8840\u6d46\u9e2d\u662f\u6e56\u5357\u6b66\u5188\u7279\u8272\u4f20\u7edf\u540d\u83dc\uff0c\u9999\u3001\u8106\u53ef\u53e3\uff0c\u7531\u4e8e\u918b\u8840\u7684\u4f5c\u7528\uff0c\u4e0d\u4ec5\u9e2d\u9aa8\u9165\u800c\u8106\uff0c\u5c31\u662f\u59dc\u548c\u8fa3\u6912\u4e5f\u53d8\u5f97\u4e0d\u8fa3\u800c\u751c\u51c0\u3002\u4e00\u822c\u521d\u5b66\u8005\u53ea\u9700\u8981 2 \u5c0f\u65f6\u5c31\u53ef\u4ee5\u5b8c\u6210\u3002 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u9c9c\u4ed4\u9e2d\u8089 \u9c9c\u9e2d\u8840\uff08\u5bb0\u6740\u9e2d\u5b50\u65f6\u52a0\u918b\u63a5\u9e2d\u8840\uff0c\u7528\u7b77\u5b50\u987a\u65f6\u9488\u6405\u62cc\u9632\u51dd\u56fa\uff09 \u59dc \u849c\u4ed4 \u8471 \u8fa3\u6912 \u9152\uff08\u6216\u8005\u767d\u9152\u3001\u5564\u9152\u3001\u7c73\u9152\u7686\u53ef\uff09 \u751f\u62bd \u6599\u9152 \u76d0 \u9e21\u7cbe \u8ba1\u7b97 \u6bcf\u4efd\uff08\u5efa\u8bae 2-4 \u4eba\u4efd\uff09\uff1a \u9c9c\u4ed4\u9e2d\u8089 2000g \u9c9c\u9e2d\u8840 250ml \u59dc 6 \u7247 \uff08\u6839\u636e\u4e2a\u4eba\u5403\u8fa3\u559c\u597d\u7a0b\u5ea6\u53ef\u591a\u653e 1-3 \u7247\u59dc\uff09 \u849c\u4ed4 6 \u74e3 \u9999\u8471 2 \u6839\uff0c\u5207\u597d\u5907\u7528 \u8fa3\u6912 1000g\uff08\u6839\u636e\u4e2a\u4eba\u5403\u8fa3\u559c\u597d\u7a0b\u5ea6\u53ef\u9009\u9752\u6912\uff0c\u7ebf\u6912\uff0c\u7f8e\u4eba\u6912\u7b49\uff0c\u559c\u6b22\u5403\u8fa3\u53ef\u589e\u52a0 5-8 \u4e2a\u5c0f\u7c73\u8fa3\u6216\u671d\u5929\u6912\uff0c\u5207\u597d\u5907\u7528\uff09 \u9152\uff08\u4efb\u9009\u5176\u4e00\uff09\uff1a \u9ad8\u5ea6\u767d\u9152 50ml + \u6c34 150ml \u5564\u9152 200ml \u7c73\u9152 200ml \u751f\u62bd 10ml \u6599\u9152 30ml \u76d0 8g \u9e21\u7cbe 5g \u64cd\u4f5c \u9c9c\u4ed4\u9e2d\u8089\u5207\u6210\u7ea6 3cm \u5c0f\u5757\uff0c\u52a0\u6599\u9152\u3001\u59dc\u7247\uff0c\u53bb\u9664\u8840\u6c34\u3002 \u7092\u9505\u70e7\u70ed\uff0c\u653e\u5165\u7ea6 100ml \u98df\u7528\u6cb9\uff0c\u5927\u706b\u5f85\u6cb9\u70e7\u5f00\uff0c\u653e\u5165\u814c\u5236\u597d\u7684\u9c9c\u9e2d\u8089\uff0c\u4e0d\u65ad\u7ffb\u7092\u3002 \u5f85\u9e2d\u8089\u5b8c\u5168\u53d8\u8272\uff08\u8089\u773c\u53ef\u89c1\u6cdb\u767d\uff09\uff0c\u653e\u5165\u9152\uff0c\u518d\u52a0\u5165 200ml \u5f00\u6c34\uff0c\u521a\u597d\u6df9\u6ca1\u9e2d\u8089\u5373\u53ef\uff0c\u76d6\u4e0a\u9505\u76d6\u4e2d\u706b\u716e 15 \u5206\u949f\u3002 \u6c34\u5f00\u4e4b\u540e\uff0c\u6253\u5f00\u9505\u76d6\u653e\u5165\u59dc\u849c\uff0c\u7ffb\u7092\u4e00\u904d\uff0c\u76d6\u4e0a\u9505\u76d6\u6301\u7eed\u52a0\u70ed 10 \u5206\u949f\u3002 \u6253\u5f00\u9505\u76d6\u653e\u5165\u8fa3\u6912\uff0c\u4e0d\u65ad\u7ffb\u7092\uff0c\u5f85\u81f3\u8089\u773c\u53ef\u89c1\u8fa3\u6912\u7092\u8f6f\uff0c\u653e\u5165\u9c9c\u9e2d\u8840\uff0c\u6b64\u65f6\u9700\u8981\u4e0d\u65ad\u7ffb\u7092\uff0c\u786e\u4fdd\u6bcf\u5757\u9e2d\u8089\u548c\u6bcf\u7247\u8fa3\u6912\u90fd\u6709\u9e2d\u8840\u7684\u6d78\u6da6\uff08\u6b64\u4e43\u8840\u6d46\u9e2d\u7684\u7cbe\u9ad3\uff09\u3002 \u7ffb\u7092\u81f3\u8089\u773c\u53ef\u89c1\u9e2d\u8840\u5747\u4e3a\u9ed1\u8272\uff0c\u52a0\u5165\u76d0\uff0c\u9e21\u7cbe\uff0c\u9999\u8471\uff0c\uff08\u559c\u6b22\u98df\u7528\u5c71\u80e1\u6912\u6cb9\u7684\u670b\u53cb\u4e5f\u53ef\u4ee5\u5728\u6b64\u65f6\u653e\u5165 3-6 \u6ef4\u5c71\u80e1\u6912\u6cb9\uff09\u518d\u6b21\u7ffb\u7092\u4e00\u5230\u4e8c\u6b21\u5373\u53ef\u3002 \u51fa\u9505\u76db\u76d8\uff0c\u4e0a\u684c\u98df\u7528\u3002 \u9644\u52a0\u5185\u5bb9 \u64cd\u4f5c\u65f6\uff0c\u9700\u8981\u6ce8\u610f\u89c2\u5bdf\u6c34\u4f4d\u7ebf\uff0c\u8c03\u6574\u7089\u706b\u5927\u5c0f\uff0c\u4ee5\u9632\u6c34\u70e7\u5e72\u7c98\u9505\u3002 \u653e\u5165\u9c9c\u9e2d\u8840\u65f6\uff0c\u9700\u8981\u4e0d\u65ad\u7ffb\u7092\u6405\u62cc\uff0c\u9632\u6b62\u9e2d\u8840\u62b1\u56e2\u51dd\u56fa\u6210\u5757\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u8840\u6d46\u9e2d"},{"location":"dishes/meat_dish/%E8%A1%80%E6%B5%86%E9%B8%AD/%E8%A1%80%E6%B5%86%E9%B8%AD/#_1","text":"\u8840\u6d46\u9e2d\u662f\u6e56\u5357\u6b66\u5188\u7279\u8272\u4f20\u7edf\u540d\u83dc\uff0c\u9999\u3001\u8106\u53ef\u53e3\uff0c\u7531\u4e8e\u918b\u8840\u7684\u4f5c\u7528\uff0c\u4e0d\u4ec5\u9e2d\u9aa8\u9165\u800c\u8106\uff0c\u5c31\u662f\u59dc\u548c\u8fa3\u6912\u4e5f\u53d8\u5f97\u4e0d\u8fa3\u800c\u751c\u51c0\u3002\u4e00\u822c\u521d\u5b66\u8005\u53ea\u9700\u8981 2 \u5c0f\u65f6\u5c31\u53ef\u4ee5\u5b8c\u6210\u3002","title":"\u5bb6\u5e38\u8840\u6d46\u9e2d\u7684\u505a\u6cd5"},{"location":"dishes/meat_dish/%E8%A1%80%E6%B5%86%E9%B8%AD/%E8%A1%80%E6%B5%86%E9%B8%AD/#_2","text":"\u9c9c\u4ed4\u9e2d\u8089 \u9c9c\u9e2d\u8840\uff08\u5bb0\u6740\u9e2d\u5b50\u65f6\u52a0\u918b\u63a5\u9e2d\u8840\uff0c\u7528\u7b77\u5b50\u987a\u65f6\u9488\u6405\u62cc\u9632\u51dd\u56fa\uff09 \u59dc \u849c\u4ed4 \u8471 \u8fa3\u6912 \u9152\uff08\u6216\u8005\u767d\u9152\u3001\u5564\u9152\u3001\u7c73\u9152\u7686\u53ef\uff09 \u751f\u62bd \u6599\u9152 \u76d0 \u9e21\u7cbe","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/meat_dish/%E8%A1%80%E6%B5%86%E9%B8%AD/%E8%A1%80%E6%B5%86%E9%B8%AD/#_3","text":"\u6bcf\u4efd\uff08\u5efa\u8bae 2-4 \u4eba\u4efd\uff09\uff1a \u9c9c\u4ed4\u9e2d\u8089 2000g \u9c9c\u9e2d\u8840 250ml \u59dc 6 \u7247 \uff08\u6839\u636e\u4e2a\u4eba\u5403\u8fa3\u559c\u597d\u7a0b\u5ea6\u53ef\u591a\u653e 1-3 \u7247\u59dc\uff09 \u849c\u4ed4 6 \u74e3 \u9999\u8471 2 \u6839\uff0c\u5207\u597d\u5907\u7528 \u8fa3\u6912 1000g\uff08\u6839\u636e\u4e2a\u4eba\u5403\u8fa3\u559c\u597d\u7a0b\u5ea6\u53ef\u9009\u9752\u6912\uff0c\u7ebf\u6912\uff0c\u7f8e\u4eba\u6912\u7b49\uff0c\u559c\u6b22\u5403\u8fa3\u53ef\u589e\u52a0 5-8 \u4e2a\u5c0f\u7c73\u8fa3\u6216\u671d\u5929\u6912\uff0c\u5207\u597d\u5907\u7528\uff09 \u9152\uff08\u4efb\u9009\u5176\u4e00\uff09\uff1a \u9ad8\u5ea6\u767d\u9152 50ml + \u6c34 150ml \u5564\u9152 200ml \u7c73\u9152 200ml \u751f\u62bd 10ml \u6599\u9152 30ml \u76d0 8g \u9e21\u7cbe 5g","title":"\u8ba1\u7b97"},{"location":"dishes/meat_dish/%E8%A1%80%E6%B5%86%E9%B8%AD/%E8%A1%80%E6%B5%86%E9%B8%AD/#_4","text":"\u9c9c\u4ed4\u9e2d\u8089\u5207\u6210\u7ea6 3cm \u5c0f\u5757\uff0c\u52a0\u6599\u9152\u3001\u59dc\u7247\uff0c\u53bb\u9664\u8840\u6c34\u3002 \u7092\u9505\u70e7\u70ed\uff0c\u653e\u5165\u7ea6 100ml \u98df\u7528\u6cb9\uff0c\u5927\u706b\u5f85\u6cb9\u70e7\u5f00\uff0c\u653e\u5165\u814c\u5236\u597d\u7684\u9c9c\u9e2d\u8089\uff0c\u4e0d\u65ad\u7ffb\u7092\u3002 \u5f85\u9e2d\u8089\u5b8c\u5168\u53d8\u8272\uff08\u8089\u773c\u53ef\u89c1\u6cdb\u767d\uff09\uff0c\u653e\u5165\u9152\uff0c\u518d\u52a0\u5165 200ml \u5f00\u6c34\uff0c\u521a\u597d\u6df9\u6ca1\u9e2d\u8089\u5373\u53ef\uff0c\u76d6\u4e0a\u9505\u76d6\u4e2d\u706b\u716e 15 \u5206\u949f\u3002 \u6c34\u5f00\u4e4b\u540e\uff0c\u6253\u5f00\u9505\u76d6\u653e\u5165\u59dc\u849c\uff0c\u7ffb\u7092\u4e00\u904d\uff0c\u76d6\u4e0a\u9505\u76d6\u6301\u7eed\u52a0\u70ed 10 \u5206\u949f\u3002 \u6253\u5f00\u9505\u76d6\u653e\u5165\u8fa3\u6912\uff0c\u4e0d\u65ad\u7ffb\u7092\uff0c\u5f85\u81f3\u8089\u773c\u53ef\u89c1\u8fa3\u6912\u7092\u8f6f\uff0c\u653e\u5165\u9c9c\u9e2d\u8840\uff0c\u6b64\u65f6\u9700\u8981\u4e0d\u65ad\u7ffb\u7092\uff0c\u786e\u4fdd\u6bcf\u5757\u9e2d\u8089\u548c\u6bcf\u7247\u8fa3\u6912\u90fd\u6709\u9e2d\u8840\u7684\u6d78\u6da6\uff08\u6b64\u4e43\u8840\u6d46\u9e2d\u7684\u7cbe\u9ad3\uff09\u3002 \u7ffb\u7092\u81f3\u8089\u773c\u53ef\u89c1\u9e2d\u8840\u5747\u4e3a\u9ed1\u8272\uff0c\u52a0\u5165\u76d0\uff0c\u9e21\u7cbe\uff0c\u9999\u8471\uff0c\uff08\u559c\u6b22\u98df\u7528\u5c71\u80e1\u6912\u6cb9\u7684\u670b\u53cb\u4e5f\u53ef\u4ee5\u5728\u6b64\u65f6\u653e\u5165 3-6 \u6ef4\u5c71\u80e1\u6912\u6cb9\uff09\u518d\u6b21\u7ffb\u7092\u4e00\u5230\u4e8c\u6b21\u5373\u53ef\u3002 \u51fa\u9505\u76db\u76d8\uff0c\u4e0a\u684c\u98df\u7528\u3002","title":"\u64cd\u4f5c"},{"location":"dishes/meat_dish/%E8%A1%80%E6%B5%86%E9%B8%AD/%E8%A1%80%E6%B5%86%E9%B8%AD/#_5","text":"\u64cd\u4f5c\u65f6\uff0c\u9700\u8981\u6ce8\u610f\u89c2\u5bdf\u6c34\u4f4d\u7ebf\uff0c\u8c03\u6574\u7089\u706b\u5927\u5c0f\uff0c\u4ee5\u9632\u6c34\u70e7\u5e72\u7c98\u9505\u3002 \u653e\u5165\u9c9c\u9e2d\u8840\u65f6\uff0c\u9700\u8981\u4e0d\u65ad\u7ffb\u7092\u6405\u62cc\uff0c\u9632\u6b62\u9e2d\u8840\u62b1\u56e2\u51dd\u56fa\u6210\u5757\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/meat_dish/%E8%A5%BF%E7%BA%A2%E6%9F%BF%E5%9C%9F%E8%B1%86%E7%82%96%E7%89%9B%E8%82%89/%E8%A5%BF%E7%BA%A2%E6%9F%BF%E5%9C%9F%E8%B1%86%E7%82%96%E7%89%9B%E8%82%89/","text":"\u897f\u7ea2\u67ff\u571f\u8c46\u7096\u725b\u8089\uff08\u8169\uff09\u7684\u505a\u6cd5 \u7279\u70b9\u5c31\u662f\u8fd8\u633a\u597d\u5403\uff0c\u725b\u8089\u662f\u4f18\u8d28\u86cb\u767d\uff0c\u6362\u6210\u725b\u8169\u66f4\u597d\u5403\u3002 \u96be\u5ea6\u57fa\u672c\u6ca1\u6709\uff0c90 \u5c81\u8001\u5976\u5976\u62c4\u62d0\u6756\u90fd\u80fd\u505a\u3002 \u9884\u8ba1\u5236\u4f5c\u603b\u65f6\u5e38 1\uff5e1.5h\u3002\u7096\u7684\u65f6\u95f4:\u505a\u7684\u65f6\u95f4\u22483:1 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u725b\u8089\u4e00\u65a4\u591a\u4e00\u70b9\uff08\u770b\u4f60\u559c\u597d\uff09 \u5c0f\u6599 \u8471\u4e00\u6839\uff0c\u59dc\u56db\u7247\uff0c\u6599\u9152 \u82b1\u6912 3g \u516b\u89d2\u4e00\u4e2a\uff08\u534a\uff09 \u9999\u53f6\u4e24\u7247 \u6cb9 15ml \u5de6\u53f3\uff08\u82e5\u7528\u725b\u8169\u53ef\u9002\u91cf\u51cf\u5c11\u4e3a 10ml \u5de6\u53f3\uff0c\u770b\u81ea\u5df1\u559c\u597d\uff09 \u8c03\u5473\u54c1 \u767d\u7cd6 or \u51b0\u7cd6 \u9171\u6cb9\uff08\u5343\u79be\u917f\u9020\u751f\u62bd\u65e0\u6dfb\u52a0\uff09\uff0c\u8001\u62bd \u9ed1\u80e1\u6912\u7c89\uff08\u767d\u7684\u4e5f\u884c\uff092g \u571f\u8c46\u4e24\u4e09\u4e2a\uff08\u770b\u559c\u597d\uff0c\u9505\u80fd\u76db\u4e86\u4e3a\u51c6\uff09 \u897f\u7ea2\u67ff\u62f3\u5934\u5927\u5c0f\u4e2d\u7b49\u4e2a\u5934\u4e24\u4e09\u4e2a \u6bd4\u62f3\u5934\u5927\u4e00\u70b9\u7684\u6d0b\u8471\u4e00\u4e2a \u64cd\u4f5c \u5907\u83dc: \u571f\u8c46\u53bb\u76ae\u3001\u5207\u6210 5cm \u5de6\u53f3\u5927\u5757\uff0c\u5907\u7528 \u897f\u7ea2\u67ff\u5207\u5341\u5b57\u82b1\u5200\uff0c\u5f00\u6c34\u70eb\u540e\u53bb\u76ae\uff0c\u628a\u4e2d\u95f4\u7684\u82af\u53bb\u6389\uff0c\u5207 3cm \u5c0f\u5757\u5907\u7528 \u8471\u5207 4g \u5de6\u53f3\u7684\u8471\u82b1\u51fa\u6765\uff0c\u5269\u4e0b\u7684\u63b0\u6210 5-8cm \u5927\u6bb5 \u725b\u8089\u6ce1\u51c9\u6c34\u534a\u5c0f\u65f6\u53bb\u8840\u6c34\uff0c\u6216\u51c9\u6c34\u4e0b\u9505\u716e\u81f3\u8868\u9762\u53d8\u767d\u635e\u51fa\uff0c\u671f\u95f4\u6487\u53bb\u6d6e\u672b \u6d0b\u8471\u5207 0.5-1cm \u5c0f\u7c92 \u5236\u4f5c \u5168\u7a0b\u4e2d\u706b \u51c9\u6c34\u6ca1\u8fc7\u725b\u8089\uff0c\u653e\u5165\u9ad8\u538b\u9505\uff0c\u653e\u5165\u8471\u6bb5\uff0c\u59dc\u7247\uff0c\u653e\u5165 20g \u5de6\u53f3\u6599\u9152\uff0c\u4e0a\u6c7d\u538b 20min \u53d6\u51fa\u725b\u8089\u540e\uff0c\u5207 5cm \u5927\u5757\uff08\u591a\u5927\u770b\u4f60\u5fc3\u60c5\uff09\uff0c\u6311\u51fa\u59dc\uff0c\u6c64\u76db\u5230\u4e00\u4e2a\u5927\u7897\u91cc\u4e00\u4f1a\u7096\u716e\u7528 \u5012\u6cb9\uff0c\u6cb9\u56db\u5230\u4e94\u6210\u70ed\u4ee5\u540e\u4e0b\u82b1\u6912\u516b\u89d2\u9999\u53f6\uff0c\u51fa\u9999\u5473\u4e4b\u540e\u7cca\u4e4b\u524d\u6311\u51fa\u4e0d\u7528 \u4e0b\u5165\u725b\u8089\uff0c\u8471\u59dc\uff0c\u7092\u9999\uff0c\u7092\u591a\u4e45\u90fd\u65e0\u6240\u8c13\uff0c\u770b\u7740\u6709\u70b9\u8981\u7cca\u53ef\u4ee5\u8200\u534a\u7092\u52fa\u6c64\uff0c\u6b64\u4e0b\u540c\u7406 \u7092\u9999\u540e\u52a0\u5165\u751f\u62bd 15ml\uff0c\u6599\u9152 15ml\uff0c\u80e1\u6912\u7c89\uff0c5-10g \u756a\u8304\u818f\u756a\u8304\u9171\u6216\u4e00\u4e2a\u756a\u8304\u7f50\u5934\uff0c\u52a0\u5165\u6d0b\u8471\u7092\u81f3\u900f\u660e \uff08\u53ef\u9009\uff09\u53ef\u4ee5\u52a0\u4e00\u70b9\u70b9\u76d0\u4f7f\u6d0b\u8471\u51fa\u6c34\u4e0d\u5bb9\u6613\u7cca\uff0c\u4e0d\u8981\u52a0\u592a\u591a\uff0c\u540e\u9762\u518d\u8c03\u5473 \u52a0\u5165\u897f\u7ea2\u67ff\u7092\u81f3\u897f\u7ea2\u67ff\u5316\u5f00\u8f6f\u70c2\uff0c\u5012\u5165\u5269\u4e0b\u7684\u6c64 \u7096\u716e \u4e2d\u706b\u5f00\u9505\u540e\uff0c\u5168\u7a0b\u5c0f\u706b \u51fa\u9505\u524d 20-15min \u52a0\u571f\u8c46\u5e76\u8c03\u5473 \u4f9d\u636e\u4e2a\u4eba\u53e3\u5473\u8fb9\u5c1d\u8fb9\u52a0\u7cd6\u76d0\uff0c\u5408\u9002\u4e3a\u6b62 \u7b77\u5b50\u6233\u725b\u8089\u8f6f\u70c2\u540e\u51fa\u9505\uff01 \u9644\u52a0\u5185\u5bb9 \u7096\u716e\u65f6\u4fdd\u8bc1\u6c64\u52a0\u5165\u7684\u65f6\u5019\u662f\u6e29\u70ed\u7684 \u7096\u716e\u65f6\u4e0d\u8981\u6263\u76d6\u5426\u5219\u571f\u8c46\u4f1a\u70c2 \u7096\u716e\u65f6\u65f6\u4e0d\u65f6\u7ffb\u52a8\u907f\u514d\u7cca\u5e95 \u7802\u9505\u7096\u716e\u4f1a\u66f4\u597d\u5403\uff0c\u53ef\u4ee5\u5728\u7092\u9505\u91cc\u7092\u5b8c\u5012\u5230\u716e\u9505\u91cc\u7096\uff0c\u5982\u679c\u7528\u7802\u9505\u5f00\u9505\u4e4b\u524d\u4e0d\u8981\u7528\u5927\u706b\u907f\u514d\u88c2\u5f00 \u9171\u6cb9\u603b\u91cf\u4e0d\u8981\u592a\u591a\uff0c\u6c64\u6c41\u6d53\u7f29\u7684\u65f6\u5019\u4f1a\u53d8\u54b8\uff0c\u7a00\u7684\u65f6\u5019\u7a0d\u5fae\u6de1\u70b9\u6ca1\u4e8b\uff0c\u7096\u716e\u65f6\u5019\u89c9\u5f97\u4e0d\u591f\u4e5f\u53ef\u4ee5\u518d\u52a0\u9171\u6cb9 \u4e0d\u8981\u7528\u9e21\u7cbe\u5473\u7cbe\uff0c\u4f1a\u62a2\u593a\u725b\u8089\u7684\u9c9c\u5473 \ud83e\udd24\ud83e\udd24\ud83e\udd24 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u897f\u7ea2\u67ff\u571f\u8c46\u7096\u725b\u8089"},{"location":"dishes/meat_dish/%E8%A5%BF%E7%BA%A2%E6%9F%BF%E5%9C%9F%E8%B1%86%E7%82%96%E7%89%9B%E8%82%89/%E8%A5%BF%E7%BA%A2%E6%9F%BF%E5%9C%9F%E8%B1%86%E7%82%96%E7%89%9B%E8%82%89/#_1","text":"\u7279\u70b9\u5c31\u662f\u8fd8\u633a\u597d\u5403\uff0c\u725b\u8089\u662f\u4f18\u8d28\u86cb\u767d\uff0c\u6362\u6210\u725b\u8169\u66f4\u597d\u5403\u3002 \u96be\u5ea6\u57fa\u672c\u6ca1\u6709\uff0c90 \u5c81\u8001\u5976\u5976\u62c4\u62d0\u6756\u90fd\u80fd\u505a\u3002 \u9884\u8ba1\u5236\u4f5c\u603b\u65f6\u5e38 1\uff5e1.5h\u3002\u7096\u7684\u65f6\u95f4:\u505a\u7684\u65f6\u95f4\u22483:1","title":"\u897f\u7ea2\u67ff\u571f\u8c46\u7096\u725b\u8089\uff08\u8169\uff09\u7684\u505a\u6cd5"},{"location":"dishes/meat_dish/%E8%A5%BF%E7%BA%A2%E6%9F%BF%E5%9C%9F%E8%B1%86%E7%82%96%E7%89%9B%E8%82%89/%E8%A5%BF%E7%BA%A2%E6%9F%BF%E5%9C%9F%E8%B1%86%E7%82%96%E7%89%9B%E8%82%89/#_2","text":"\u725b\u8089\u4e00\u65a4\u591a\u4e00\u70b9\uff08\u770b\u4f60\u559c\u597d\uff09 \u5c0f\u6599 \u8471\u4e00\u6839\uff0c\u59dc\u56db\u7247\uff0c\u6599\u9152 \u82b1\u6912 3g \u516b\u89d2\u4e00\u4e2a\uff08\u534a\uff09 \u9999\u53f6\u4e24\u7247 \u6cb9 15ml \u5de6\u53f3\uff08\u82e5\u7528\u725b\u8169\u53ef\u9002\u91cf\u51cf\u5c11\u4e3a 10ml \u5de6\u53f3\uff0c\u770b\u81ea\u5df1\u559c\u597d\uff09 \u8c03\u5473\u54c1 \u767d\u7cd6 or \u51b0\u7cd6 \u9171\u6cb9\uff08\u5343\u79be\u917f\u9020\u751f\u62bd\u65e0\u6dfb\u52a0\uff09\uff0c\u8001\u62bd \u9ed1\u80e1\u6912\u7c89\uff08\u767d\u7684\u4e5f\u884c\uff092g \u571f\u8c46\u4e24\u4e09\u4e2a\uff08\u770b\u559c\u597d\uff0c\u9505\u80fd\u76db\u4e86\u4e3a\u51c6\uff09 \u897f\u7ea2\u67ff\u62f3\u5934\u5927\u5c0f\u4e2d\u7b49\u4e2a\u5934\u4e24\u4e09\u4e2a \u6bd4\u62f3\u5934\u5927\u4e00\u70b9\u7684\u6d0b\u8471\u4e00\u4e2a","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/meat_dish/%E8%A5%BF%E7%BA%A2%E6%9F%BF%E5%9C%9F%E8%B1%86%E7%82%96%E7%89%9B%E8%82%89/%E8%A5%BF%E7%BA%A2%E6%9F%BF%E5%9C%9F%E8%B1%86%E7%82%96%E7%89%9B%E8%82%89/#_3","text":"\u5907\u83dc: \u571f\u8c46\u53bb\u76ae\u3001\u5207\u6210 5cm \u5de6\u53f3\u5927\u5757\uff0c\u5907\u7528 \u897f\u7ea2\u67ff\u5207\u5341\u5b57\u82b1\u5200\uff0c\u5f00\u6c34\u70eb\u540e\u53bb\u76ae\uff0c\u628a\u4e2d\u95f4\u7684\u82af\u53bb\u6389\uff0c\u5207 3cm \u5c0f\u5757\u5907\u7528 \u8471\u5207 4g \u5de6\u53f3\u7684\u8471\u82b1\u51fa\u6765\uff0c\u5269\u4e0b\u7684\u63b0\u6210 5-8cm \u5927\u6bb5 \u725b\u8089\u6ce1\u51c9\u6c34\u534a\u5c0f\u65f6\u53bb\u8840\u6c34\uff0c\u6216\u51c9\u6c34\u4e0b\u9505\u716e\u81f3\u8868\u9762\u53d8\u767d\u635e\u51fa\uff0c\u671f\u95f4\u6487\u53bb\u6d6e\u672b \u6d0b\u8471\u5207 0.5-1cm \u5c0f\u7c92 \u5236\u4f5c \u5168\u7a0b\u4e2d\u706b \u51c9\u6c34\u6ca1\u8fc7\u725b\u8089\uff0c\u653e\u5165\u9ad8\u538b\u9505\uff0c\u653e\u5165\u8471\u6bb5\uff0c\u59dc\u7247\uff0c\u653e\u5165 20g \u5de6\u53f3\u6599\u9152\uff0c\u4e0a\u6c7d\u538b 20min \u53d6\u51fa\u725b\u8089\u540e\uff0c\u5207 5cm \u5927\u5757\uff08\u591a\u5927\u770b\u4f60\u5fc3\u60c5\uff09\uff0c\u6311\u51fa\u59dc\uff0c\u6c64\u76db\u5230\u4e00\u4e2a\u5927\u7897\u91cc\u4e00\u4f1a\u7096\u716e\u7528 \u5012\u6cb9\uff0c\u6cb9\u56db\u5230\u4e94\u6210\u70ed\u4ee5\u540e\u4e0b\u82b1\u6912\u516b\u89d2\u9999\u53f6\uff0c\u51fa\u9999\u5473\u4e4b\u540e\u7cca\u4e4b\u524d\u6311\u51fa\u4e0d\u7528 \u4e0b\u5165\u725b\u8089\uff0c\u8471\u59dc\uff0c\u7092\u9999\uff0c\u7092\u591a\u4e45\u90fd\u65e0\u6240\u8c13\uff0c\u770b\u7740\u6709\u70b9\u8981\u7cca\u53ef\u4ee5\u8200\u534a\u7092\u52fa\u6c64\uff0c\u6b64\u4e0b\u540c\u7406 \u7092\u9999\u540e\u52a0\u5165\u751f\u62bd 15ml\uff0c\u6599\u9152 15ml\uff0c\u80e1\u6912\u7c89\uff0c5-10g \u756a\u8304\u818f\u756a\u8304\u9171\u6216\u4e00\u4e2a\u756a\u8304\u7f50\u5934\uff0c\u52a0\u5165\u6d0b\u8471\u7092\u81f3\u900f\u660e \uff08\u53ef\u9009\uff09\u53ef\u4ee5\u52a0\u4e00\u70b9\u70b9\u76d0\u4f7f\u6d0b\u8471\u51fa\u6c34\u4e0d\u5bb9\u6613\u7cca\uff0c\u4e0d\u8981\u52a0\u592a\u591a\uff0c\u540e\u9762\u518d\u8c03\u5473 \u52a0\u5165\u897f\u7ea2\u67ff\u7092\u81f3\u897f\u7ea2\u67ff\u5316\u5f00\u8f6f\u70c2\uff0c\u5012\u5165\u5269\u4e0b\u7684\u6c64 \u7096\u716e \u4e2d\u706b\u5f00\u9505\u540e\uff0c\u5168\u7a0b\u5c0f\u706b \u51fa\u9505\u524d 20-15min \u52a0\u571f\u8c46\u5e76\u8c03\u5473 \u4f9d\u636e\u4e2a\u4eba\u53e3\u5473\u8fb9\u5c1d\u8fb9\u52a0\u7cd6\u76d0\uff0c\u5408\u9002\u4e3a\u6b62 \u7b77\u5b50\u6233\u725b\u8089\u8f6f\u70c2\u540e\u51fa\u9505\uff01","title":"\u64cd\u4f5c"},{"location":"dishes/meat_dish/%E8%A5%BF%E7%BA%A2%E6%9F%BF%E5%9C%9F%E8%B1%86%E7%82%96%E7%89%9B%E8%82%89/%E8%A5%BF%E7%BA%A2%E6%9F%BF%E5%9C%9F%E8%B1%86%E7%82%96%E7%89%9B%E8%82%89/#_4","text":"\u7096\u716e\u65f6\u4fdd\u8bc1\u6c64\u52a0\u5165\u7684\u65f6\u5019\u662f\u6e29\u70ed\u7684 \u7096\u716e\u65f6\u4e0d\u8981\u6263\u76d6\u5426\u5219\u571f\u8c46\u4f1a\u70c2 \u7096\u716e\u65f6\u65f6\u4e0d\u65f6\u7ffb\u52a8\u907f\u514d\u7cca\u5e95 \u7802\u9505\u7096\u716e\u4f1a\u66f4\u597d\u5403\uff0c\u53ef\u4ee5\u5728\u7092\u9505\u91cc\u7092\u5b8c\u5012\u5230\u716e\u9505\u91cc\u7096\uff0c\u5982\u679c\u7528\u7802\u9505\u5f00\u9505\u4e4b\u524d\u4e0d\u8981\u7528\u5927\u706b\u907f\u514d\u88c2\u5f00 \u9171\u6cb9\u603b\u91cf\u4e0d\u8981\u592a\u591a\uff0c\u6c64\u6c41\u6d53\u7f29\u7684\u65f6\u5019\u4f1a\u53d8\u54b8\uff0c\u7a00\u7684\u65f6\u5019\u7a0d\u5fae\u6de1\u70b9\u6ca1\u4e8b\uff0c\u7096\u716e\u65f6\u5019\u89c9\u5f97\u4e0d\u591f\u4e5f\u53ef\u4ee5\u518d\u52a0\u9171\u6cb9 \u4e0d\u8981\u7528\u9e21\u7cbe\u5473\u7cbe\uff0c\u4f1a\u62a2\u593a\u725b\u8089\u7684\u9c9c\u5473 \ud83e\udd24\ud83e\udd24\ud83e\udd24 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/meat_dish/%E8%A5%BF%E7%BA%A2%E6%9F%BF%E7%89%9B%E8%85%A9/%E8%A5%BF%E7%BA%A2%E6%9F%BF%E7%89%9B%E8%85%A9/","text":"\u897f\u7ea2\u67ff\u725b\u8169\u7684\u505a\u6cd5 \u897f\u7ea2\u67ff\u725b\u8169\u6c64\u6c41\u6d53\u539a\u9178\u751c\u53ef\u53e3\uff0c\u725b\u8089\u8f6f\u7ef5\u9187\u9999\uff0c\u642d\u914d\u7c73\u996d\u7edd\u914d\uff0c\u5988\u5988\u518d\u4e5f\u4e0d\u62c5\u5fc3\u6211\u5403\u996d\u4e86\u3002\u4e00\u822c\u521d\u5b66\u8005\u9700\u8981 90 \u5206\u949f\u5b8c\u6210\u3002 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u897f\u7ea2\u67ff \u725b\u8169 \u71c3\u6c14\u7076\uff08\u897f\u7ea2\u67ff\u53bb\u76ae\u7528\uff09 \u9ad8\u538b\u9505/\u7802\u9505/\u666e\u901a\u94dd\u9505\uff08\u94c1\u9505\uff09 2cm \u4e24\u6bb5\u8471\u6bb5\u3001\u4e24\u7247\u59dc\u7247\uff0c\u8471\u82b1\u3001\u59dc\u5404 10g \u751f\u62bd\u3001\u767d\u80e1\u6912\u7c89\uff0c\u767d\u7cd6\uff0c\u6599/\u9ec4\u9152\uff0c\u516b\u89d2\u4e09\u5c0f\u7247 \u725b\u8169\uff08\u6311\u9009\u80a5\u7626\u76f8\u95f4\u7684\u53e3\u611f\u6bd4\u8f83\u597d\uff09 \u8ba1\u7b97 \u6bcf\u4efd\uff1a \u897f\u7ea2\u67ff 3-4 \u4e2a\uff08\u6bcf\u4e2a\u7ea6 200g\uff09 \u725b\u8169 500g \u98df\u7528\u6cb9 20-30ml \u64cd\u4f5c \u725b\u8169\u5207\u6761\u3001\u5207\u5757\u6210\u957f\u5bbd\u9ad8\u5747 2cm \u5de6\u53f3\uff0c\u51b7\u6c34\u4e0b\u9505\uff0c\u5f00\u9505\u716e\u5236 2 \u5206\u949f\u53bb\u9664\u8840\u6c34\uff0c\u635e\u51fa\u51b2\u6d17\u5e72\u51c0 \u53e6\u8d77\u9505 2L \u6c34\u70e7\u5f00\uff0c\u52a0\u5165 2cm \u4e24\u6bb5\u8471\u6bb5\u3001\u4e24\u7247\u59dc\u7247\u3001\u516b\u89d2\u3001\u6599/\u9ec4\u9152 5-10ml\uff0c\u653e\u5165\u712f\u597d\u7684\u725b\u8089\uff0c\u76d6\u76d6\u7096\u5236\uff08\u7802\u9505 1 \u5c0f\u65f6\u5de6\u53f3\uff0c\u9ad8\u538b\u9505\u7096\u8089\u6a21\u5f0f 45 \u5206\u949f\u5de6\u53f3\uff09\uff0c\u7b77\u5b50\u80fd\u8f7b\u677e\u63d2\u900f\u5c31\u8bc1\u660e\u7096\u597d\u4e86 \u897f\u7ea2\u67ff\u53bb\u76ae\uff1a\u897f\u7ea2\u67ff\u5934\u90e8\u6ed1\u5341\u5b57\u81f3\u8170\u7ebf\uff0c\u7b77\u5b50/\u5200\u53c9\u4ece\u679c\u8482\u6345\u5165\uff0c\u7164\u6c14\u7076\u5c0f\u706b\uff0c\u4e00\u8fb9\u8f6c\u52a8\u4e00\u8fb9\u70e4\uff0c\u53ca\u65f6\u62ff\u4e0b\u6765\u67e5\u770b\uff0c\u8d77\u76ae\u540e\u6495\u4e0b\u6765\uff0c\u5207\u5757\u3002\u8d8a\u5c0f\u8d8a\u597d \uff08 \u6495\u76ae\u5c0f\u5fc3\u70eb\uff0c\u53bb\u76ae\u540e\u7684\u897f\u7ea2\u67ff\u7279\u522b\u6ed1\uff0c\u6162\u5207\u6ce8\u610f\u5b89\u5168 \uff09 \u8d77\u9505\u70e7\u6cb9\uff0c\u6cb9\u6e29 7 \u6210\u70ed\uff0c\u653e\u5165\u8471\u82b1\u3001\u59dc\u5404 10g\uff0c\u756a\u8304\u4e0b\u9505\uff0c\u7092\u900f\u7092\u51fa\u756a\u8304\u7ea2\u8272\uff0c\u52a0\u5165\u716e\u597d\u7684\u725b\u8169\u548c\u539f\u6c64\uff0c\u539f\u6c64\u521a\u521a\u6ca1\u8fc7\u725b\u8089\u5373\u53ef \u6839\u636e\u4e2a\u4eba\u53e3\u5473\u653e\u5165\u76d0\u3001\u7cd6\u3001\u751f\u62bd\u8c03\u5473\u76d6\u76d6 \u5f00\u9505\u540e\u5927\u706b\u7ee7\u7eed\u7092\u5236 3-5 \u5206\u949f \u5f85\u756a\u8304\u6c41\u5448\u4e2d\u7b49\u7c98\u7a20\u7a0b\u5ea6\u540e\u5173\u706b\uff0c\u76db\u76d8 \u9644\u52a0\u5185\u5bb9 \u7528\u706b\u6ce8\u610f\u5b89\u5168\u3001\u7528\u706b\u6ce8\u610f\u5b89\u5168\u3001\u7528\u706b\u6ce8\u610f\u5b89\u5168 \u7528\u7802\u9505/\u94dd\u9505\u7096\u8089\u65f6\uff0c\u6c34\u5f00\u540e\u8f6c\u4e2d\u5c0f\u706b/\u5c0f\u706b\uff0c\u4f7f\u7528\u9ad8\u538b\u9505\u89c1 \u5b66\u4e60\u4f7f\u7528\u538b\u529b\u9505 \u6559\u7a0b\u4e2d\u7684\u756a\u8304\u53bb\u76ae\u65b9\u5f0f\u662f\u76ee\u524d\u4e3a\u6b62\u672c\u4eba\u5b9e\u8df5\u6700\u5feb\u7684\u65b9\u5f0f \u7edd\u5bf9\u4e0d\u7528\u756a\u8304\u9171\u548c\u5c11\u52a0\u4f50\u6599\uff0c\u5c3d\u53ef\u80fd\u8fd8\u539f\u98df\u6750\u7684\u539f\u5473 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u897f\u7ea2\u67ff\u725b\u8169"},{"location":"dishes/meat_dish/%E8%A5%BF%E7%BA%A2%E6%9F%BF%E7%89%9B%E8%85%A9/%E8%A5%BF%E7%BA%A2%E6%9F%BF%E7%89%9B%E8%85%A9/#_1","text":"\u897f\u7ea2\u67ff\u725b\u8169\u6c64\u6c41\u6d53\u539a\u9178\u751c\u53ef\u53e3\uff0c\u725b\u8089\u8f6f\u7ef5\u9187\u9999\uff0c\u642d\u914d\u7c73\u996d\u7edd\u914d\uff0c\u5988\u5988\u518d\u4e5f\u4e0d\u62c5\u5fc3\u6211\u5403\u996d\u4e86\u3002\u4e00\u822c\u521d\u5b66\u8005\u9700\u8981 90 \u5206\u949f\u5b8c\u6210\u3002","title":"\u897f\u7ea2\u67ff\u725b\u8169\u7684\u505a\u6cd5"},{"location":"dishes/meat_dish/%E8%A5%BF%E7%BA%A2%E6%9F%BF%E7%89%9B%E8%85%A9/%E8%A5%BF%E7%BA%A2%E6%9F%BF%E7%89%9B%E8%85%A9/#_2","text":"\u897f\u7ea2\u67ff \u725b\u8169 \u71c3\u6c14\u7076\uff08\u897f\u7ea2\u67ff\u53bb\u76ae\u7528\uff09 \u9ad8\u538b\u9505/\u7802\u9505/\u666e\u901a\u94dd\u9505\uff08\u94c1\u9505\uff09 2cm \u4e24\u6bb5\u8471\u6bb5\u3001\u4e24\u7247\u59dc\u7247\uff0c\u8471\u82b1\u3001\u59dc\u5404 10g \u751f\u62bd\u3001\u767d\u80e1\u6912\u7c89\uff0c\u767d\u7cd6\uff0c\u6599/\u9ec4\u9152\uff0c\u516b\u89d2\u4e09\u5c0f\u7247 \u725b\u8169\uff08\u6311\u9009\u80a5\u7626\u76f8\u95f4\u7684\u53e3\u611f\u6bd4\u8f83\u597d\uff09","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/meat_dish/%E8%A5%BF%E7%BA%A2%E6%9F%BF%E7%89%9B%E8%85%A9/%E8%A5%BF%E7%BA%A2%E6%9F%BF%E7%89%9B%E8%85%A9/#_3","text":"\u6bcf\u4efd\uff1a \u897f\u7ea2\u67ff 3-4 \u4e2a\uff08\u6bcf\u4e2a\u7ea6 200g\uff09 \u725b\u8169 500g \u98df\u7528\u6cb9 20-30ml","title":"\u8ba1\u7b97"},{"location":"dishes/meat_dish/%E8%A5%BF%E7%BA%A2%E6%9F%BF%E7%89%9B%E8%85%A9/%E8%A5%BF%E7%BA%A2%E6%9F%BF%E7%89%9B%E8%85%A9/#_4","text":"\u725b\u8169\u5207\u6761\u3001\u5207\u5757\u6210\u957f\u5bbd\u9ad8\u5747 2cm \u5de6\u53f3\uff0c\u51b7\u6c34\u4e0b\u9505\uff0c\u5f00\u9505\u716e\u5236 2 \u5206\u949f\u53bb\u9664\u8840\u6c34\uff0c\u635e\u51fa\u51b2\u6d17\u5e72\u51c0 \u53e6\u8d77\u9505 2L \u6c34\u70e7\u5f00\uff0c\u52a0\u5165 2cm \u4e24\u6bb5\u8471\u6bb5\u3001\u4e24\u7247\u59dc\u7247\u3001\u516b\u89d2\u3001\u6599/\u9ec4\u9152 5-10ml\uff0c\u653e\u5165\u712f\u597d\u7684\u725b\u8089\uff0c\u76d6\u76d6\u7096\u5236\uff08\u7802\u9505 1 \u5c0f\u65f6\u5de6\u53f3\uff0c\u9ad8\u538b\u9505\u7096\u8089\u6a21\u5f0f 45 \u5206\u949f\u5de6\u53f3\uff09\uff0c\u7b77\u5b50\u80fd\u8f7b\u677e\u63d2\u900f\u5c31\u8bc1\u660e\u7096\u597d\u4e86 \u897f\u7ea2\u67ff\u53bb\u76ae\uff1a\u897f\u7ea2\u67ff\u5934\u90e8\u6ed1\u5341\u5b57\u81f3\u8170\u7ebf\uff0c\u7b77\u5b50/\u5200\u53c9\u4ece\u679c\u8482\u6345\u5165\uff0c\u7164\u6c14\u7076\u5c0f\u706b\uff0c\u4e00\u8fb9\u8f6c\u52a8\u4e00\u8fb9\u70e4\uff0c\u53ca\u65f6\u62ff\u4e0b\u6765\u67e5\u770b\uff0c\u8d77\u76ae\u540e\u6495\u4e0b\u6765\uff0c\u5207\u5757\u3002\u8d8a\u5c0f\u8d8a\u597d \uff08 \u6495\u76ae\u5c0f\u5fc3\u70eb\uff0c\u53bb\u76ae\u540e\u7684\u897f\u7ea2\u67ff\u7279\u522b\u6ed1\uff0c\u6162\u5207\u6ce8\u610f\u5b89\u5168 \uff09 \u8d77\u9505\u70e7\u6cb9\uff0c\u6cb9\u6e29 7 \u6210\u70ed\uff0c\u653e\u5165\u8471\u82b1\u3001\u59dc\u5404 10g\uff0c\u756a\u8304\u4e0b\u9505\uff0c\u7092\u900f\u7092\u51fa\u756a\u8304\u7ea2\u8272\uff0c\u52a0\u5165\u716e\u597d\u7684\u725b\u8169\u548c\u539f\u6c64\uff0c\u539f\u6c64\u521a\u521a\u6ca1\u8fc7\u725b\u8089\u5373\u53ef \u6839\u636e\u4e2a\u4eba\u53e3\u5473\u653e\u5165\u76d0\u3001\u7cd6\u3001\u751f\u62bd\u8c03\u5473\u76d6\u76d6 \u5f00\u9505\u540e\u5927\u706b\u7ee7\u7eed\u7092\u5236 3-5 \u5206\u949f \u5f85\u756a\u8304\u6c41\u5448\u4e2d\u7b49\u7c98\u7a20\u7a0b\u5ea6\u540e\u5173\u706b\uff0c\u76db\u76d8","title":"\u64cd\u4f5c"},{"location":"dishes/meat_dish/%E8%A5%BF%E7%BA%A2%E6%9F%BF%E7%89%9B%E8%85%A9/%E8%A5%BF%E7%BA%A2%E6%9F%BF%E7%89%9B%E8%85%A9/#_5","text":"\u7528\u706b\u6ce8\u610f\u5b89\u5168\u3001\u7528\u706b\u6ce8\u610f\u5b89\u5168\u3001\u7528\u706b\u6ce8\u610f\u5b89\u5168 \u7528\u7802\u9505/\u94dd\u9505\u7096\u8089\u65f6\uff0c\u6c34\u5f00\u540e\u8f6c\u4e2d\u5c0f\u706b/\u5c0f\u706b\uff0c\u4f7f\u7528\u9ad8\u538b\u9505\u89c1 \u5b66\u4e60\u4f7f\u7528\u538b\u529b\u9505 \u6559\u7a0b\u4e2d\u7684\u756a\u8304\u53bb\u76ae\u65b9\u5f0f\u662f\u76ee\u524d\u4e3a\u6b62\u672c\u4eba\u5b9e\u8df5\u6700\u5feb\u7684\u65b9\u5f0f \u7edd\u5bf9\u4e0d\u7528\u756a\u8304\u9171\u548c\u5c11\u52a0\u4f50\u6599\uff0c\u5c3d\u53ef\u80fd\u8fd8\u539f\u98df\u6750\u7684\u539f\u5473 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/meat_dish/%E9%85%B1%E7%89%9B%E8%82%89/%E9%85%B1%E7%89%9B%E8%82%89/","text":"\u5bb6\u5e38\u9171\u725b\u8089\u7684\u505a\u6cd5 \u9171\u725b\u8089\u8425\u517b\u4e30\u5bcc\uff0c\u5473\u9053\u9999\uff0c\u4e0d\u8bba\u662f\u5f53\u4f5c\u4e3b\u98df\u8fd8\u662f\u4f50\u9910\u90fd\u5f88\u68d2\u3002\u4e00\u822c\u521d\u5b66\u8005\u53ea\u9700\u8981 3 \u5c0f\u65f6\u5373\u53ef\u5b8c\u6210\u3002 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u725b\u8089 \u9999\u53f6 \u59dc \u8471 \u8001\u62bd \u6842\u76ae \u51b0\u7cd6 \u82b1\u6912 \u6599\u9152 \u751f\u62bd \u76d0 \u516b\u89d2 \u9ec4\u8c46\u9171 \u8ba1\u7b97 \u6bcf\u4efd\uff1a \u725b\u8089 2000 \u514b \u9999\u53f6 1 \u7247 \u59dc 3 \u7247 \u8471\u534a\u6839 \u8001\u62bd 3 \u52fa \u6842\u76ae 1 \u5757 \u51b0\u7cd6 7-8 \u7c92 \u82b1\u6912 15 \u7c92 \u6599\u9152 6 \u52fa \u751f\u62bd 3 \u52fa \u76d0 8 \u514b \u516b\u89d2 4 \u4e2a \u9ec4\u8c46\u9171 3 \u52fa \u64cd\u4f5c \u725b\u8089\u6d78\u6ce1 4-6 \u5c0f\u65f6\uff0c\u52a0\u6599\u9152\u3001\u59dc\u7247\uff0c\u53bb\u9664\u8840\u6c34 \u725b\u8089\u5207\u6210 8cm\uff0c\u4e0d\u8d85\u8fc7 10cm \u7684\u8089\u5757 \u725b\u8089\u653e\u5165\u9505\u4e2d\uff0c\u52a0\u5165\u51b7\u6c34\u81f3\u6c34\u9762\u6ca1\u8fc7\u725b\u8089\uff0c\u5f00\u9505\u81f3\u6c34\u6cb8\u817e\u5f00\u59cb\u8ba1\u65f6\uff0c3 \u5206\u949f\u540e\u505c\u706b\uff0c\u635e\u51fa\u725b\u8089\uff0c\u7528\u6e29\u6c34\u6d17\u51c0 \u5c06\u6d17\u51c0\u540e\u7684\u725b\u8089\u653e\u5165\u7802\u9505\u6216\u7096\u9505\uff0c\u52a0\u6c34\u6ca1\u8fc7\u725b\u8089\uff0c\u5f00\u5927\u706b\uff0c\u653e\u5165\u9664\u76d0\u4e4b\u5916\u7684\u5176\u4ed6\u914d\u6599\u3002 \u6c34\u5f00\u4e4b\u540e\uff0c\u5927\u706b\u8f6c\u4e3a\u5c0f\u706b\uff0c\u6301\u7eed\u52a0\u70ed 90 \u5206\u949f\uff0c\u52a0\u76d0 \u52a0\u76d0\u540e\uff0c\u7ee7\u7eed\u5c0f\u706b 90 \u5206\u949f\uff08\u6ce8\uff1a\u6bcf 30 \u5206\u949f\u786e\u8ba4\u6c34\u4f4d\u7ebf\uff0c\u8981\u6c42\u81f3\u5c11\u8fbe\u5230\u725b\u8089\u9762\u9ad8\u5ea6\u7684 80%\uff09 \u52a0\u70ed 180 \u5206\u949f\u540e\uff0c\u635e\u51fa\u725b\u8089\uff0c\u81ea\u7136\u51b7\u5374\uff0c\u5207\u7247 \u4e0a\u684c\u98df\u7528\uff0c\u5176\u4ed6\u725b\u8089\u5efa\u8bae\u4e0d\u5207\u7247\u51b7\u85cf\u3002 \u9644\u52a0\u5185\u5bb9 \u64cd\u4f5c\u65f6\uff0c\u9700\u8981\u6ce8\u610f\u89c2\u5bdf\u6cb8\u817e\u7684\u6c34\u4f4d\u7ebf\uff0c\u5982\u53d1\u73b0\u4f4e\u4e8e 2/3 \u7684\u98df\u6750\u5e94\u52a0\u70ed\u6c34\u81f3\u6ca1\u8fc7\u98df\u6750\uff08\u7ea6\u6bcf 30 \u5206\uff09\u3002 \u53c2\u8003\u8d44\u6599 \u4e0b\u53a8\u623fapp\u4e2d\u6211\u7684\u98df\u8c31 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9171\u725b\u8089"},{"location":"dishes/meat_dish/%E9%85%B1%E7%89%9B%E8%82%89/%E9%85%B1%E7%89%9B%E8%82%89/#_1","text":"\u9171\u725b\u8089\u8425\u517b\u4e30\u5bcc\uff0c\u5473\u9053\u9999\uff0c\u4e0d\u8bba\u662f\u5f53\u4f5c\u4e3b\u98df\u8fd8\u662f\u4f50\u9910\u90fd\u5f88\u68d2\u3002\u4e00\u822c\u521d\u5b66\u8005\u53ea\u9700\u8981 3 \u5c0f\u65f6\u5373\u53ef\u5b8c\u6210\u3002","title":"\u5bb6\u5e38\u9171\u725b\u8089\u7684\u505a\u6cd5"},{"location":"dishes/meat_dish/%E9%85%B1%E7%89%9B%E8%82%89/%E9%85%B1%E7%89%9B%E8%82%89/#_2","text":"\u725b\u8089 \u9999\u53f6 \u59dc \u8471 \u8001\u62bd \u6842\u76ae \u51b0\u7cd6 \u82b1\u6912 \u6599\u9152 \u751f\u62bd \u76d0 \u516b\u89d2 \u9ec4\u8c46\u9171","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/meat_dish/%E9%85%B1%E7%89%9B%E8%82%89/%E9%85%B1%E7%89%9B%E8%82%89/#_3","text":"\u6bcf\u4efd\uff1a \u725b\u8089 2000 \u514b \u9999\u53f6 1 \u7247 \u59dc 3 \u7247 \u8471\u534a\u6839 \u8001\u62bd 3 \u52fa \u6842\u76ae 1 \u5757 \u51b0\u7cd6 7-8 \u7c92 \u82b1\u6912 15 \u7c92 \u6599\u9152 6 \u52fa \u751f\u62bd 3 \u52fa \u76d0 8 \u514b \u516b\u89d2 4 \u4e2a \u9ec4\u8c46\u9171 3 \u52fa","title":"\u8ba1\u7b97"},{"location":"dishes/meat_dish/%E9%85%B1%E7%89%9B%E8%82%89/%E9%85%B1%E7%89%9B%E8%82%89/#_4","text":"\u725b\u8089\u6d78\u6ce1 4-6 \u5c0f\u65f6\uff0c\u52a0\u6599\u9152\u3001\u59dc\u7247\uff0c\u53bb\u9664\u8840\u6c34 \u725b\u8089\u5207\u6210 8cm\uff0c\u4e0d\u8d85\u8fc7 10cm \u7684\u8089\u5757 \u725b\u8089\u653e\u5165\u9505\u4e2d\uff0c\u52a0\u5165\u51b7\u6c34\u81f3\u6c34\u9762\u6ca1\u8fc7\u725b\u8089\uff0c\u5f00\u9505\u81f3\u6c34\u6cb8\u817e\u5f00\u59cb\u8ba1\u65f6\uff0c3 \u5206\u949f\u540e\u505c\u706b\uff0c\u635e\u51fa\u725b\u8089\uff0c\u7528\u6e29\u6c34\u6d17\u51c0 \u5c06\u6d17\u51c0\u540e\u7684\u725b\u8089\u653e\u5165\u7802\u9505\u6216\u7096\u9505\uff0c\u52a0\u6c34\u6ca1\u8fc7\u725b\u8089\uff0c\u5f00\u5927\u706b\uff0c\u653e\u5165\u9664\u76d0\u4e4b\u5916\u7684\u5176\u4ed6\u914d\u6599\u3002 \u6c34\u5f00\u4e4b\u540e\uff0c\u5927\u706b\u8f6c\u4e3a\u5c0f\u706b\uff0c\u6301\u7eed\u52a0\u70ed 90 \u5206\u949f\uff0c\u52a0\u76d0 \u52a0\u76d0\u540e\uff0c\u7ee7\u7eed\u5c0f\u706b 90 \u5206\u949f\uff08\u6ce8\uff1a\u6bcf 30 \u5206\u949f\u786e\u8ba4\u6c34\u4f4d\u7ebf\uff0c\u8981\u6c42\u81f3\u5c11\u8fbe\u5230\u725b\u8089\u9762\u9ad8\u5ea6\u7684 80%\uff09 \u52a0\u70ed 180 \u5206\u949f\u540e\uff0c\u635e\u51fa\u725b\u8089\uff0c\u81ea\u7136\u51b7\u5374\uff0c\u5207\u7247 \u4e0a\u684c\u98df\u7528\uff0c\u5176\u4ed6\u725b\u8089\u5efa\u8bae\u4e0d\u5207\u7247\u51b7\u85cf\u3002","title":"\u64cd\u4f5c"},{"location":"dishes/meat_dish/%E9%85%B1%E7%89%9B%E8%82%89/%E9%85%B1%E7%89%9B%E8%82%89/#_5","text":"\u64cd\u4f5c\u65f6\uff0c\u9700\u8981\u6ce8\u610f\u89c2\u5bdf\u6cb8\u817e\u7684\u6c34\u4f4d\u7ebf\uff0c\u5982\u53d1\u73b0\u4f4e\u4e8e 2/3 \u7684\u98df\u6750\u5e94\u52a0\u70ed\u6c34\u81f3\u6ca1\u8fc7\u98df\u6750\uff08\u7ea6\u6bcf 30 \u5206\uff09\u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/meat_dish/%E9%85%B1%E7%89%9B%E8%82%89/%E9%85%B1%E7%89%9B%E8%82%89/#_6","text":"\u4e0b\u53a8\u623fapp\u4e2d\u6211\u7684\u98df\u8c31 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u53c2\u8003\u8d44\u6599"},{"location":"dishes/meat_dish/%E9%A6%99%E5%B9%B2%E8%8A%B9%E8%8F%9C%E7%82%92%E8%82%89/%E9%A6%99%E5%B9%B2%E8%8A%B9%E8%8F%9C%E7%82%92%E8%82%89/","text":"\u9999\u5e72\u82b9\u83dc\u7092\u8089\u7684\u505a\u6cd5 \u9999\u5e72\u82b9\u83dc\u7092\u8089\u662f\u4e00\u9053\u975e\u5e38\u7b80\u5355\u7684\u5bb6\u5e38\u83dc\u5c0f\u7092\uff0c\u636e\u8bf4\u591a\u5403\u82b9\u83dc\u5bf9\u4e8e\u9ad8\u8840\u538b\u6709\u5f88\u597d\u7684\u7f13\u89e3\u4f5c\u7528\uff0c\u52a0\u4e0a\u9999\u5e72\u548c\u732a\u8089\u4e00\u8d77\u7ffb\u7092\uff0c\u8fd8\u662f\u5f88\u7f8e\u5473\u7684\u3002\u4e00\u822c\u521d\u5b66\u8005\u53ea\u9700\u8981 30 \u5206\u949f\uff08\u542b\u914d\u83dc\u65f6\u95f4\uff09\u5373\u53ef\u5b8c\u6210\u3002 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u8c46\u5e72 \u9999\u82b9/\u82b9\u83dc \u732a\u8089 \u5927\u849c \u8fa3\u6912\uff1a\u9752\u6912\u6216\u8005\u7ea2\u6912\u90fd\u53ef\u4ee5 \u82b1\u6912\uff1a\u53ef\u9009 \u76d0 \u9e21\u7cbe\uff1a\u53ef\u9009 \u8001\u62bd \u869d\u6cb9 \u98df\u7528\u6cb9 \u8ba1\u7b97 \u6ce8\u610f\uff0c\u6b64\u6570\u503c\u5927\u7ea6\u662f 2 \u4e2a\u4eba\u7684\u91cf\u3002 \u6bcf\u4efd\uff1a \u8c46\u5e72\uff1a150g \u9999\u82b9\uff1a4 \u6839 \u732a\u8089\uff1a200g \u849c\u5934\uff1a2 \u74e3 \u8fa3\u6912\uff1a4 \u4e2a \u82b1\u6912\uff1a6 \u7c92\uff08\u4e0d\u559c\u6b22\u53ef\u4ee5\u4e0d\u653e\uff0c\u6216\u8005\u653e\u82b1\u6912\u6c34\uff09 \u76d0\uff1a5g \u9e21\u7cbe\uff1a3g \u8001\u62bd\uff1a8ml \u869d\u6cb9\uff1a5ml \u98df\u7528\u6cb9\uff1a10-15ml \u64cd\u4f5c \u82b9\u83dc\u53bb\u53f6\u5207\u6bb5\u3001\u5207\u6210\u4e0d\u8d85\u8fc7 4cm \u7684\u6761\u72b6\uff0c\u5907\u7528 \u9999\u5e72\u5207\u6761\uff0c\u5bbd\u7ea6\u5c0f\u62c7\u6307\uff0c\u5907\u7528 \u849c\u5934\u5207\u7247\u6216\u8005\u5241\u6210\u849c\u6ce5\u90fd\u884c\uff0c\u5907\u7528 \u8fa3\u6912\u5207\u5708\u6216\u8005\u659c\u5207\u6210\u6761\u90fd\u884c\uff0c\u5907\u7528 \u70ed\u9505\uff0c\u9505\u5185\u653e\u5165 10ml - 15ml \u98df\u7528\u6cb9\u3002\u7b49\u5f85 10 \u79d2\u8ba9\u6cb9\u6e29\u5347\u9ad8 \u653e\u5165\u82b1\u6912\u3001\u5927\u849c\u7206\u9999\uff08\u53ef\u4ee5\u5403\u59dc\u7684\u4e5f\u53ef\u4ee5\u989d\u5916\u653e\u5165\u4e00\u4e9b\u59dc\u7247/\u59dc\u4e1d\uff09 \u52a0\u5165\u732a\u8089\u7092\u81f3\u53d8\u8272\uff0c\u518d\u52a0\u5165 8ml \u8001\u62bd\u4e0a\u8272\u7ffb\u7092\u5747\u5300\uff08\u6709\u8c46\u74e3\u9171\u7684\uff0c\u53ef\u4ee5\u653e\u5165 3ml \u8c46\u74e3\u9171\u4e00\u8d77\u7ffb\u7092\uff09 \u52a0\u5165\u9999\u5e72\u7ffb\u7092\u5747\u5300\uff082 \u5206\u949f\u5de6\u53f3\uff09 \u52a0\u5165\u8fa3\u6912\u7ffb\u7092\u5747\u5300\uff081-2 \u5206\u949f\u5de6\u53f3\uff09 \u52a0\u5165\u82b9\u83dc\uff0c\u653e\u5165 5g \u76d0\u7ffb\u7092 1 \u5206\u949f \u52a0\u5165 3g \u9e21\u7cbe\u30015ml \u869d\u6cb9\u7ffb\u7092\u5747\u5300\uff0c\u5373\u53ef\u51fa\u9505 \u9644\u52a0\u5185\u5bb9 \u5982\u679c\u6ca1\u6709\u4e70\u5230\u9999\u82b9\uff0c\u6216\u8005\u7528\u7684\u82b9\u83dc\u6bd4\u8f83\u7c97\uff0c\u53ef\u4ee5\u8003\u8651\u712f\u6c34\uff0c\u653e\u5165\u6eda\u6c34\u4e2d 1 \u5206\u949f\u635e\u51fa\uff0c\u51b7\u6c34\u51b2\u6d17\uff08\u4fdd\u6301\u723d\u8106\uff09 \u5982\u679c\u4e70\u5230\u7684\u8c46\u5e72\u6bd4\u8f83\u786c\u3001\u7d27\u5b9e\uff0c\u4e5f\u53ef\u4ee5\u5207\u6761\u540e\u518d\u712f\u6c34 \u9999\u5e72\u82b9\u83dc\u7092\u8089\u6559\u7a0b \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9999\u5e72\u82b9\u83dc\u7092\u8089"},{"location":"dishes/meat_dish/%E9%A6%99%E5%B9%B2%E8%8A%B9%E8%8F%9C%E7%82%92%E8%82%89/%E9%A6%99%E5%B9%B2%E8%8A%B9%E8%8F%9C%E7%82%92%E8%82%89/#_1","text":"\u9999\u5e72\u82b9\u83dc\u7092\u8089\u662f\u4e00\u9053\u975e\u5e38\u7b80\u5355\u7684\u5bb6\u5e38\u83dc\u5c0f\u7092\uff0c\u636e\u8bf4\u591a\u5403\u82b9\u83dc\u5bf9\u4e8e\u9ad8\u8840\u538b\u6709\u5f88\u597d\u7684\u7f13\u89e3\u4f5c\u7528\uff0c\u52a0\u4e0a\u9999\u5e72\u548c\u732a\u8089\u4e00\u8d77\u7ffb\u7092\uff0c\u8fd8\u662f\u5f88\u7f8e\u5473\u7684\u3002\u4e00\u822c\u521d\u5b66\u8005\u53ea\u9700\u8981 30 \u5206\u949f\uff08\u542b\u914d\u83dc\u65f6\u95f4\uff09\u5373\u53ef\u5b8c\u6210\u3002","title":"\u9999\u5e72\u82b9\u83dc\u7092\u8089\u7684\u505a\u6cd5"},{"location":"dishes/meat_dish/%E9%A6%99%E5%B9%B2%E8%8A%B9%E8%8F%9C%E7%82%92%E8%82%89/%E9%A6%99%E5%B9%B2%E8%8A%B9%E8%8F%9C%E7%82%92%E8%82%89/#_2","text":"\u8c46\u5e72 \u9999\u82b9/\u82b9\u83dc \u732a\u8089 \u5927\u849c \u8fa3\u6912\uff1a\u9752\u6912\u6216\u8005\u7ea2\u6912\u90fd\u53ef\u4ee5 \u82b1\u6912\uff1a\u53ef\u9009 \u76d0 \u9e21\u7cbe\uff1a\u53ef\u9009 \u8001\u62bd \u869d\u6cb9 \u98df\u7528\u6cb9","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/meat_dish/%E9%A6%99%E5%B9%B2%E8%8A%B9%E8%8F%9C%E7%82%92%E8%82%89/%E9%A6%99%E5%B9%B2%E8%8A%B9%E8%8F%9C%E7%82%92%E8%82%89/#_3","text":"\u6ce8\u610f\uff0c\u6b64\u6570\u503c\u5927\u7ea6\u662f 2 \u4e2a\u4eba\u7684\u91cf\u3002 \u6bcf\u4efd\uff1a \u8c46\u5e72\uff1a150g \u9999\u82b9\uff1a4 \u6839 \u732a\u8089\uff1a200g \u849c\u5934\uff1a2 \u74e3 \u8fa3\u6912\uff1a4 \u4e2a \u82b1\u6912\uff1a6 \u7c92\uff08\u4e0d\u559c\u6b22\u53ef\u4ee5\u4e0d\u653e\uff0c\u6216\u8005\u653e\u82b1\u6912\u6c34\uff09 \u76d0\uff1a5g \u9e21\u7cbe\uff1a3g \u8001\u62bd\uff1a8ml \u869d\u6cb9\uff1a5ml \u98df\u7528\u6cb9\uff1a10-15ml","title":"\u8ba1\u7b97"},{"location":"dishes/meat_dish/%E9%A6%99%E5%B9%B2%E8%8A%B9%E8%8F%9C%E7%82%92%E8%82%89/%E9%A6%99%E5%B9%B2%E8%8A%B9%E8%8F%9C%E7%82%92%E8%82%89/#_4","text":"\u82b9\u83dc\u53bb\u53f6\u5207\u6bb5\u3001\u5207\u6210\u4e0d\u8d85\u8fc7 4cm \u7684\u6761\u72b6\uff0c\u5907\u7528 \u9999\u5e72\u5207\u6761\uff0c\u5bbd\u7ea6\u5c0f\u62c7\u6307\uff0c\u5907\u7528 \u849c\u5934\u5207\u7247\u6216\u8005\u5241\u6210\u849c\u6ce5\u90fd\u884c\uff0c\u5907\u7528 \u8fa3\u6912\u5207\u5708\u6216\u8005\u659c\u5207\u6210\u6761\u90fd\u884c\uff0c\u5907\u7528 \u70ed\u9505\uff0c\u9505\u5185\u653e\u5165 10ml - 15ml \u98df\u7528\u6cb9\u3002\u7b49\u5f85 10 \u79d2\u8ba9\u6cb9\u6e29\u5347\u9ad8 \u653e\u5165\u82b1\u6912\u3001\u5927\u849c\u7206\u9999\uff08\u53ef\u4ee5\u5403\u59dc\u7684\u4e5f\u53ef\u4ee5\u989d\u5916\u653e\u5165\u4e00\u4e9b\u59dc\u7247/\u59dc\u4e1d\uff09 \u52a0\u5165\u732a\u8089\u7092\u81f3\u53d8\u8272\uff0c\u518d\u52a0\u5165 8ml \u8001\u62bd\u4e0a\u8272\u7ffb\u7092\u5747\u5300\uff08\u6709\u8c46\u74e3\u9171\u7684\uff0c\u53ef\u4ee5\u653e\u5165 3ml \u8c46\u74e3\u9171\u4e00\u8d77\u7ffb\u7092\uff09 \u52a0\u5165\u9999\u5e72\u7ffb\u7092\u5747\u5300\uff082 \u5206\u949f\u5de6\u53f3\uff09 \u52a0\u5165\u8fa3\u6912\u7ffb\u7092\u5747\u5300\uff081-2 \u5206\u949f\u5de6\u53f3\uff09 \u52a0\u5165\u82b9\u83dc\uff0c\u653e\u5165 5g \u76d0\u7ffb\u7092 1 \u5206\u949f \u52a0\u5165 3g \u9e21\u7cbe\u30015ml \u869d\u6cb9\u7ffb\u7092\u5747\u5300\uff0c\u5373\u53ef\u51fa\u9505","title":"\u64cd\u4f5c"},{"location":"dishes/meat_dish/%E9%A6%99%E5%B9%B2%E8%8A%B9%E8%8F%9C%E7%82%92%E8%82%89/%E9%A6%99%E5%B9%B2%E8%8A%B9%E8%8F%9C%E7%82%92%E8%82%89/#_5","text":"\u5982\u679c\u6ca1\u6709\u4e70\u5230\u9999\u82b9\uff0c\u6216\u8005\u7528\u7684\u82b9\u83dc\u6bd4\u8f83\u7c97\uff0c\u53ef\u4ee5\u8003\u8651\u712f\u6c34\uff0c\u653e\u5165\u6eda\u6c34\u4e2d 1 \u5206\u949f\u635e\u51fa\uff0c\u51b7\u6c34\u51b2\u6d17\uff08\u4fdd\u6301\u723d\u8106\uff09 \u5982\u679c\u4e70\u5230\u7684\u8c46\u5e72\u6bd4\u8f83\u786c\u3001\u7d27\u5b9e\uff0c\u4e5f\u53ef\u4ee5\u5207\u6761\u540e\u518d\u712f\u6c34 \u9999\u5e72\u82b9\u83dc\u7092\u8089\u6559\u7a0b \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/meat_dish/%E9%A6%99%E8%8F%87%E6%BB%91%E9%B8%A1/%E9%A6%99%E8%8F%87%E6%BB%91%E9%B8%A1/","text":"\u9999\u83c7\u6ed1\u9e21\u7684\u505a\u6cd5 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u5927\u9e21\u817f \u5e72\u9999\u83c7 \u59dc \u8471 \u849c \u8ba1\u7b97 \u6bcf\u4efd\uff1a \u5927\u9e21\u817f 2 \u4e2a \u5e72\u9999\u83c7 5 \u7c92 \u59dc 2 \u7247 \u8471 2 \u9897 \u849c 2 \u74e3 \u6e29\u6c34(30-40 \u2103) 1/2 \u7897 \u6599\u9152 15ml \u751f\u62bd 30ml \u76d0 1.5g \u8001\u62bd 15ml \u7cd6 15ml \u9999\u6cb9 5ml \u64cd\u4f5c \u6e29\u6c34\u6ce1\u53d1\u5e72\u9999\u83c7 \u59dc\u5207\u5c0f\u5757\uff0c\u8471\u5207\u6bb5\uff0c\u849c\u5bf9\u534a\u5207\u5c0f\u7c92 \u9e21\u817f\u53bb\u9aa8\uff08\u4e0d\u53bb\u9aa8\u4e5f\u53ef\uff0c\u53ea\u662f\u7565\u5f71\u54cd\u7a0b\u5e8f\u5458\u5403\u996d\u7684\u6548\u7387\u800c\u5df2\uff09\uff0c\u5207\u6210\u5c0f\u5757 \u6ce1\u53d1\u7684\u9999\u83c7\u4e00\u5206\u4e3a\u56db\uff0c\u9999\u83c7\u6c34\u7559\u7740\u5907\u7528 \u9e21\u817f\u8089\u712f\u6c34 1 \u5206\u949f\uff0c\u53bb\u9664\u8840\u6cab\u548c\u6742\u8d28 \u9e21\u817f\u8089\u4e2d\u52a0\u6599\u9152 15ml\u3001\u751f\u62bd 15ml\u3001\u76d0 1.5g\u3001\u8001\u62bd 15ml\uff0c\u6293\u5300 \u6cb9\u6e29 3 \u6210\uff0c\u4e0b\u5165\u9e21\u817f\u8089\u7178\u7092\uff0c\u7b49\u9e21\u817f\u8089\u91d1\u9ec4\u540e\u76db\u51fa\u5907\u7528 \u9505\u7559\u5e95\u6cb9\uff0c\u4e0b\u5165\u8471\u3001\u59dc\u3001\u849c\u7092\u9999\uff0c\u9999\u83c7\u5165\u9505\uff0c\u5927\u706b\u7ffb\u5300 \u7b49\u5f85 20 \u79d2\u4f1a\u6709\u9999\u83c7\u9999\u5473\u4ece\u9505\u4e2d\u98d8\u51fa\uff0c\u6b64\u65f6\u4e0b\u5165\u7178\u7092\u8fc7\u7684\u9e21\u817f\u8089\uff0c\u4e0b\u5165\u9999\u83c7\u6c34\uff08\u5168\u90e8\uff0c \u672c\u7a0b\u5e8f\u5458\u8ba4\u4e3a\u7684\u7075\u9b42\u64cd\u4f5c \uff09\u3001\u7cd6 15ml\u3001\u751f\u62bd 30ml \u8f6c\u4e2d\u706b\u4e0d\u76d6\u76d6\uff0c\u5495\u561f 2 \u5206\u949f\u6536\u6d53\u6c64\u6c41\uff0c\u6dcb\u5165\u9999\u6cb9 5ml\uff0c\u6492\u4e0a\u8471\u82b1\u540e\u5373\u53ef\u5173\u706b\u3001\u88c5\u76d8 \u9644\u52a0\u5185\u5bb9 \u9e21\u817f\u53bb\u9aa8\u64cd\u4f5c\u8f83\u590d\u6742\uff0c\u672c\u4eba\u7ecf\u9a8c\u53ef\u4f9b\u53c2\u8003\uff1a \u9e21\u817f\u4e8e\u6848\u677f\u6446\u6b63\uff0c \u9aa8\u5934\u6b63\u5bf9\u7a0b\u5e8f\u5458 \uff0c\u4ece\u5934\u90e8\u5212\u4e00\u5200\u81f3\u6700\u5e95\u90e8\uff0c\u5200\u53e3\u8981\u6df1\uff0c\u786e\u4fdd\u6709\u78b0\u5230\u9aa8\u5934 \u7528\u624b\u6252\u62c9\u8089\u5230\u4e24\u8fb9 \u7528\u5200\u5c16\u9694\u5f00\u9aa8\u5934\u4e0a\u6cbe\u7740\u7684\u8089 \u9e21\u817f\u7ffb\u9762\uff0c\u5200\u7d27\u8d34\u9aa8\u5934\u63d2\u5165\uff0c\u6311\u65ad\u9aa8\u5934\u4e0e\u8089\u7684\u8fde\u63a5\u70b9 \u7528\u5200\u5c16\u5207\u65ad\u6700\u540e\u7684\u7c98\u8fde\u5373\u53ef \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9999\u83c7\u6ed1\u9e21"},{"location":"dishes/meat_dish/%E9%A6%99%E8%8F%87%E6%BB%91%E9%B8%A1/%E9%A6%99%E8%8F%87%E6%BB%91%E9%B8%A1/#_1","text":"","title":"\u9999\u83c7\u6ed1\u9e21\u7684\u505a\u6cd5"},{"location":"dishes/meat_dish/%E9%A6%99%E8%8F%87%E6%BB%91%E9%B8%A1/%E9%A6%99%E8%8F%87%E6%BB%91%E9%B8%A1/#_2","text":"\u5927\u9e21\u817f \u5e72\u9999\u83c7 \u59dc \u8471 \u849c","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/meat_dish/%E9%A6%99%E8%8F%87%E6%BB%91%E9%B8%A1/%E9%A6%99%E8%8F%87%E6%BB%91%E9%B8%A1/#_3","text":"\u6bcf\u4efd\uff1a \u5927\u9e21\u817f 2 \u4e2a \u5e72\u9999\u83c7 5 \u7c92 \u59dc 2 \u7247 \u8471 2 \u9897 \u849c 2 \u74e3 \u6e29\u6c34(30-40 \u2103) 1/2 \u7897 \u6599\u9152 15ml \u751f\u62bd 30ml \u76d0 1.5g \u8001\u62bd 15ml \u7cd6 15ml \u9999\u6cb9 5ml","title":"\u8ba1\u7b97"},{"location":"dishes/meat_dish/%E9%A6%99%E8%8F%87%E6%BB%91%E9%B8%A1/%E9%A6%99%E8%8F%87%E6%BB%91%E9%B8%A1/#_4","text":"\u6e29\u6c34\u6ce1\u53d1\u5e72\u9999\u83c7 \u59dc\u5207\u5c0f\u5757\uff0c\u8471\u5207\u6bb5\uff0c\u849c\u5bf9\u534a\u5207\u5c0f\u7c92 \u9e21\u817f\u53bb\u9aa8\uff08\u4e0d\u53bb\u9aa8\u4e5f\u53ef\uff0c\u53ea\u662f\u7565\u5f71\u54cd\u7a0b\u5e8f\u5458\u5403\u996d\u7684\u6548\u7387\u800c\u5df2\uff09\uff0c\u5207\u6210\u5c0f\u5757 \u6ce1\u53d1\u7684\u9999\u83c7\u4e00\u5206\u4e3a\u56db\uff0c\u9999\u83c7\u6c34\u7559\u7740\u5907\u7528 \u9e21\u817f\u8089\u712f\u6c34 1 \u5206\u949f\uff0c\u53bb\u9664\u8840\u6cab\u548c\u6742\u8d28 \u9e21\u817f\u8089\u4e2d\u52a0\u6599\u9152 15ml\u3001\u751f\u62bd 15ml\u3001\u76d0 1.5g\u3001\u8001\u62bd 15ml\uff0c\u6293\u5300 \u6cb9\u6e29 3 \u6210\uff0c\u4e0b\u5165\u9e21\u817f\u8089\u7178\u7092\uff0c\u7b49\u9e21\u817f\u8089\u91d1\u9ec4\u540e\u76db\u51fa\u5907\u7528 \u9505\u7559\u5e95\u6cb9\uff0c\u4e0b\u5165\u8471\u3001\u59dc\u3001\u849c\u7092\u9999\uff0c\u9999\u83c7\u5165\u9505\uff0c\u5927\u706b\u7ffb\u5300 \u7b49\u5f85 20 \u79d2\u4f1a\u6709\u9999\u83c7\u9999\u5473\u4ece\u9505\u4e2d\u98d8\u51fa\uff0c\u6b64\u65f6\u4e0b\u5165\u7178\u7092\u8fc7\u7684\u9e21\u817f\u8089\uff0c\u4e0b\u5165\u9999\u83c7\u6c34\uff08\u5168\u90e8\uff0c \u672c\u7a0b\u5e8f\u5458\u8ba4\u4e3a\u7684\u7075\u9b42\u64cd\u4f5c \uff09\u3001\u7cd6 15ml\u3001\u751f\u62bd 30ml \u8f6c\u4e2d\u706b\u4e0d\u76d6\u76d6\uff0c\u5495\u561f 2 \u5206\u949f\u6536\u6d53\u6c64\u6c41\uff0c\u6dcb\u5165\u9999\u6cb9 5ml\uff0c\u6492\u4e0a\u8471\u82b1\u540e\u5373\u53ef\u5173\u706b\u3001\u88c5\u76d8","title":"\u64cd\u4f5c"},{"location":"dishes/meat_dish/%E9%A6%99%E8%8F%87%E6%BB%91%E9%B8%A1/%E9%A6%99%E8%8F%87%E6%BB%91%E9%B8%A1/#_5","text":"\u9e21\u817f\u53bb\u9aa8\u64cd\u4f5c\u8f83\u590d\u6742\uff0c\u672c\u4eba\u7ecf\u9a8c\u53ef\u4f9b\u53c2\u8003\uff1a \u9e21\u817f\u4e8e\u6848\u677f\u6446\u6b63\uff0c \u9aa8\u5934\u6b63\u5bf9\u7a0b\u5e8f\u5458 \uff0c\u4ece\u5934\u90e8\u5212\u4e00\u5200\u81f3\u6700\u5e95\u90e8\uff0c\u5200\u53e3\u8981\u6df1\uff0c\u786e\u4fdd\u6709\u78b0\u5230\u9aa8\u5934 \u7528\u624b\u6252\u62c9\u8089\u5230\u4e24\u8fb9 \u7528\u5200\u5c16\u9694\u5f00\u9aa8\u5934\u4e0a\u6cbe\u7740\u7684\u8089 \u9e21\u817f\u7ffb\u9762\uff0c\u5200\u7d27\u8d34\u9aa8\u5934\u63d2\u5165\uff0c\u6311\u65ad\u9aa8\u5934\u4e0e\u8089\u7684\u8fde\u63a5\u70b9 \u7528\u5200\u5c16\u5207\u65ad\u6700\u540e\u7684\u7c98\u8fde\u5373\u53ef \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/meat_dish/%E9%B1%BC%E9%A6%99%E8%8C%84%E5%AD%90/%E9%B1%BC%E9%A6%99%E8%8C%84%E5%AD%90/","text":"\u9c7c\u9999\u8304\u5b50\u7684\u505a\u6cd5 \u8fd9\u4e2a\u83dc\u771f\u7684\u8d85\u7ea7\u4e0b\u996d\uff0c\u5f53\u4e2a\u5e72\u996d\u738b\u5427\u3002 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u8304\u5b50 \u8089\u672b \u76d0 \u7cd6 \u5473\u7cbe \u751f\u62bd \u8001\u62bd \u918b \u6c34\u6dc0\u7c89 \u8c46\u74e3\u9171 \u8ba1\u7b97 \u4e0b\u8ff0\u6750\u6599\u4e3a\u4e00\u4eba\u4efd\uff0c\u591a\u4eba\u53ef\u6839\u636e\u4eba\u6570\u6309\u6bd4\u4f8b\u589e\u52a0\u914d\u6599\u7684\u91cf\u3002 \u8304\u5b50 2 \u6839 \u8089\u672b 20g \u76d0 3-5g \u7cd6 5-10g \u5473\u7cbe 5g \u751f\u62bd 10ml \u8001\u62bd 5ml \u918b 10ml \u6c34\u6dc0\u7c89 100ml \u8c46\u74e3\u9171 20-30g \u5c0f\u8471\u3001\u59dc\u3001\u849c\u3001\u5c0f\u7c73\u8fa3 \uff08\u6839\u636e\u81ea\u5df1\u53e3\u5473\uff09 \u64cd\u4f5c \u5c06\u8304\u5b50\u5207\u6210\u6761\u3002 \u5c06\u8089\u5207\u6210\u8089\u6cab\uff0c\u8471\u59dc\u849c\u5207\u788e\u3001\u5c0f\u7c73\u6912\u5207\u4e01\u3002 \u8c03\u9c7c\u9999\u6c41\uff1a\u7897\u4e2d\u653e\u5165\u76d0\u3001\u5473\u7cbe\u3001\u7cd6\u3001\u751f\u62bd\u3001\u8001\u62bd\u3001\u918b\u3001\u6c34\u6dc0\u7c89\u6405\u62cc\u5747\u5300\u3002 \u9505\u4e2d\u5012\u5165 300ml \u6cb9\uff0c\u5f00\u5c0f\u706b\uff08\u5c0f\u706b\u5bb9\u6613\u638c\u63a7\uff09\uff0c\u7b49\u6cb9\u6e29\u4e03\u6210\u70ed\uff08\u5c0f\u706b\u5927\u7ea6 40 \u79d2\uff0c\u6709\u70df\u5192\u51fa\uff09\u653e\u5165\u8304\u5b50\u70b8\u4e24\u5206\u949f\uff0c\u5f53\u8304\u5b50\u8fb9\u7f18\u5fae\u9ec4\u5c31\u635e\u51fa\u3002\u591a\u51fa\u7684\u6cb9\u53ef\u4ee5\u76db\u51fa\u4ee5\u540e\u7092\u83dc\u7528\u3002 \u9505\u4e2d\u7559 15-30ml \u6cb9\uff0c\u5012\u5165\u8089\u6cab\u7092\u81f3\u989c\u8272\u53d8\u767d\u5c31\u76db\u51fa\u6765\u3002 \u9505\u4e2d\u5012\u5165 15-30ml \u6cb9\uff0c\u653e\u5165\u8c46\u74e3\u9171\u3001\u8471\u767d\u3001\u59dc\u3001\u849c\u7092\u9999\uff0c\u7136\u540e\u5012\u5165\u8089\u6cab\u7ffb\u7092\u5747\u5300\u3002 \u52a0\u5165\u9002\u91cf\u6e05\u6c34\uff08\u4e0d\u6ca1\u8fc7\u8304\u5b50\uff09\uff0c\u5012\u5165\u8304\u5b50\u3001\u5012\u5165\u6599\u6c41\uff0c\u7206\u7092\u5165\u5473\u6536\u6c41\u3002\u6700\u540e\u653e\u5165\u8471\u7ffb\u7092\u5747\u5300\uff0c\u5c31\u53ef\u4ee5\u8d77\u9505\u4e86\u3002 \u9644\u52a0\u5185\u5bb9 \u8304\u5b50\u770b\u4e2a\u4eba\u559c\u597d\uff0c\u53ef\u4ee5\u53bb\u76ae\uff0c\u8089\u6cab\u4e5f\u53ef\u4ee5\u591a\u653e\u4e00\u70b9\u3002 \u53c2\u8003: \u9c7c\u9999\u8304\u5b50\u8be6\u7ec6\u6b65\u9aa4 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9c7c\u9999\u8304\u5b50"},{"location":"dishes/meat_dish/%E9%B1%BC%E9%A6%99%E8%8C%84%E5%AD%90/%E9%B1%BC%E9%A6%99%E8%8C%84%E5%AD%90/#_1","text":"\u8fd9\u4e2a\u83dc\u771f\u7684\u8d85\u7ea7\u4e0b\u996d\uff0c\u5f53\u4e2a\u5e72\u996d\u738b\u5427\u3002","title":"\u9c7c\u9999\u8304\u5b50\u7684\u505a\u6cd5"},{"location":"dishes/meat_dish/%E9%B1%BC%E9%A6%99%E8%8C%84%E5%AD%90/%E9%B1%BC%E9%A6%99%E8%8C%84%E5%AD%90/#_2","text":"\u8304\u5b50 \u8089\u672b \u76d0 \u7cd6 \u5473\u7cbe \u751f\u62bd \u8001\u62bd \u918b \u6c34\u6dc0\u7c89 \u8c46\u74e3\u9171","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/meat_dish/%E9%B1%BC%E9%A6%99%E8%8C%84%E5%AD%90/%E9%B1%BC%E9%A6%99%E8%8C%84%E5%AD%90/#_3","text":"\u4e0b\u8ff0\u6750\u6599\u4e3a\u4e00\u4eba\u4efd\uff0c\u591a\u4eba\u53ef\u6839\u636e\u4eba\u6570\u6309\u6bd4\u4f8b\u589e\u52a0\u914d\u6599\u7684\u91cf\u3002 \u8304\u5b50 2 \u6839 \u8089\u672b 20g \u76d0 3-5g \u7cd6 5-10g \u5473\u7cbe 5g \u751f\u62bd 10ml \u8001\u62bd 5ml \u918b 10ml \u6c34\u6dc0\u7c89 100ml \u8c46\u74e3\u9171 20-30g \u5c0f\u8471\u3001\u59dc\u3001\u849c\u3001\u5c0f\u7c73\u8fa3 \uff08\u6839\u636e\u81ea\u5df1\u53e3\u5473\uff09","title":"\u8ba1\u7b97"},{"location":"dishes/meat_dish/%E9%B1%BC%E9%A6%99%E8%8C%84%E5%AD%90/%E9%B1%BC%E9%A6%99%E8%8C%84%E5%AD%90/#_4","text":"\u5c06\u8304\u5b50\u5207\u6210\u6761\u3002 \u5c06\u8089\u5207\u6210\u8089\u6cab\uff0c\u8471\u59dc\u849c\u5207\u788e\u3001\u5c0f\u7c73\u6912\u5207\u4e01\u3002 \u8c03\u9c7c\u9999\u6c41\uff1a\u7897\u4e2d\u653e\u5165\u76d0\u3001\u5473\u7cbe\u3001\u7cd6\u3001\u751f\u62bd\u3001\u8001\u62bd\u3001\u918b\u3001\u6c34\u6dc0\u7c89\u6405\u62cc\u5747\u5300\u3002 \u9505\u4e2d\u5012\u5165 300ml \u6cb9\uff0c\u5f00\u5c0f\u706b\uff08\u5c0f\u706b\u5bb9\u6613\u638c\u63a7\uff09\uff0c\u7b49\u6cb9\u6e29\u4e03\u6210\u70ed\uff08\u5c0f\u706b\u5927\u7ea6 40 \u79d2\uff0c\u6709\u70df\u5192\u51fa\uff09\u653e\u5165\u8304\u5b50\u70b8\u4e24\u5206\u949f\uff0c\u5f53\u8304\u5b50\u8fb9\u7f18\u5fae\u9ec4\u5c31\u635e\u51fa\u3002\u591a\u51fa\u7684\u6cb9\u53ef\u4ee5\u76db\u51fa\u4ee5\u540e\u7092\u83dc\u7528\u3002 \u9505\u4e2d\u7559 15-30ml \u6cb9\uff0c\u5012\u5165\u8089\u6cab\u7092\u81f3\u989c\u8272\u53d8\u767d\u5c31\u76db\u51fa\u6765\u3002 \u9505\u4e2d\u5012\u5165 15-30ml \u6cb9\uff0c\u653e\u5165\u8c46\u74e3\u9171\u3001\u8471\u767d\u3001\u59dc\u3001\u849c\u7092\u9999\uff0c\u7136\u540e\u5012\u5165\u8089\u6cab\u7ffb\u7092\u5747\u5300\u3002 \u52a0\u5165\u9002\u91cf\u6e05\u6c34\uff08\u4e0d\u6ca1\u8fc7\u8304\u5b50\uff09\uff0c\u5012\u5165\u8304\u5b50\u3001\u5012\u5165\u6599\u6c41\uff0c\u7206\u7092\u5165\u5473\u6536\u6c41\u3002\u6700\u540e\u653e\u5165\u8471\u7ffb\u7092\u5747\u5300\uff0c\u5c31\u53ef\u4ee5\u8d77\u9505\u4e86\u3002","title":"\u64cd\u4f5c"},{"location":"dishes/meat_dish/%E9%B1%BC%E9%A6%99%E8%8C%84%E5%AD%90/%E9%B1%BC%E9%A6%99%E8%8C%84%E5%AD%90/#_5","text":"\u8304\u5b50\u770b\u4e2a\u4eba\u559c\u597d\uff0c\u53ef\u4ee5\u53bb\u76ae\uff0c\u8089\u6cab\u4e5f\u53ef\u4ee5\u591a\u653e\u4e00\u70b9\u3002 \u53c2\u8003: \u9c7c\u9999\u8304\u5b50\u8be6\u7ec6\u6b65\u9aa4 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/meat_dish/%E9%BB%91%E6%A4%92%E7%89%9B%E6%9F%B3/%E9%BB%91%E6%A4%92%E7%89%9B%E6%9F%B3/","text":"\u9ed1\u6912\u725b\u67f3\u7684\u505a\u6cd5 \u9ed1\u6912\u725b\u67f3\u662f\u4e00\u9053\u7b80\u5355\u6613\u505a\u7684\u83dc\u3002\u852c\u83dc\u4e0e\u8089\u7c7b\u5747\u8861\uff0c\u5bcc\u542b\u86cb\u767d\u8d28\uff0c\u53e3\u5473\u9002\u5408\u5927\u591a\u6570\u4eba\u3002\u4e00\u822c\u521d\u5b66\u8005\u53ea\u9700\u8981 1 \u5c0f\u65f6\u4ee5\u5185\u5373\u53ef\u5b8c\u6210\u3002 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u725b\u8089\uff08\u53ef\u4ee5\u7528\u725b\u91cc\u810a\u8089\u6216\u8005\u725b\u6392\u8089\uff09 \u6d0b\u8471 \u83dc\u6912\uff08\u7ea2/\u9ec4\u6912\uff09 \u6dc0\u7c89 \u9ed1\u80e1\u6912\uff08\u7c89\uff09 \u9ed1\u6912\uff08\u814c\u6599\uff09 \u76d0 \u82b1\u751f\u6cb9 \u6ce8\uff1a\u7c89\u4e0e\u814c\u6599\u53ef\u76f8\u4e92\u66ff\u4ee3\uff0c\u5177\u4f53\u7528\u91cf\u8bf7\u53c2\u7167\u60a8\u8d2d\u4e70\u7684\u98df\u54c1\u5305\u88c5\u4e0a\u7684\u8bf4\u660e\u3002 \u5efa\u8bae\u4f7f\u7528\u4e0d\u7c98\u9505\u3002 \u8ba1\u7b97 \u4e2a\u4eba\u8ba4\u4e3a\uff0c\u5f53\u4eba\u6570\u4e3a 3-5 \u4eba\u65f6\uff0c\u5473\u9053\u6700\u4f73\u3002 \u725b\u8089\u91cf = \u4eba\u6570 * 100 \u514b \uff08\u89c6\u5c31\u9910\u8005\u80c3\u5bb9\u91cf\u548c\u9505\u5bb9\u91cf\u914c\u60c5\u589e\u51cf\uff09 \u6d0b\u8471\u91cf = \u4eba\u6570 * 1/12 \u4e2a\uff08\u5373 3 \u4eba\u65f6\u7ea6\u5207 1/4 \uff09 \u83dc\u6912\u91cf = \u4eba\u6570 * 1/12 \u4e2a\uff08\u5373 3 \u4eba\u65f6\u7ea6\u5207 1/4 \uff09 \u76d0\u91cf = \u4eba\u6570 * 1 \u514b \u6dc0\u7c89 = \u4eba\u6570 * 3 \u514b \u9ed1\u6912\u814c\u6599 = \u53c2\u7167\u6240\u8d2d\u5546\u54c1\u7684\u8bf4\u660e\u6309\u6bd4\u4f8b\u814c\u5236 \u9ed1\u80e1\u6912\u7c89 = \u4eba\u6570 * 1 \u514b\uff08\u5b9e\u9645\u4e0a\u662f\u968f\u4fbf\u6492\uff09 \u82b1\u751f\u6cb9 = \u4eba\u6570 * 10ml \uff08\u5b9e\u9645\u4e0a\u6cb9\u91cf\u662f\u4f9d\u636e\u83dc\u91cf\u53d8\u52a8\u7684\uff0c\u5982\u5bf9\u725b\u8089\u7684\u91cf\u6709\u589e\u51cf\u8bf7\u6309\u5bf9\u5e94\u6bd4\u4f8b\u53d8\u52a8\uff09 \u4f7f\u7528\u4e0a\u8ff0\u6761\u4ef6\uff0c\u8ba1\u7b97\u51fa\u8ba1\u5212\u4f7f\u7528\u7684\u539f\u6750\u6599\u6bd4\u4f8b\u3002 \u64cd\u4f5c \u5c06\u725b\u8089\u5207\u6761\uff0c\u957f\u5ea6\u6700\u597d\u63a7\u5236\u5728 8 \u5398\u7c73\u4ee5\u4e0b\uff0c\u539a\u5ea6\u7ea6 5-10 \u6beb\u7c73\uff0c\u5bbd\u5ea6\u7ea6 1 \u5398\u7c73\uff08\u8981\u6c42\u4e0d\u4e25\u683c\uff09 \u5229\u7528\u814c\u6599\u814c\u5236\u725b\u8089\uff0c\u6df7\u5408\u5747\u5300\u540e\u9759\u7f6e\uff0c\u7528\u91cf\u4e0e\u65f6\u95f4\u8bf7\u53c2\u7167\u5546\u54c1\u8bf4\u660e\uff0c\u53ef\u4ee5\u5ef6\u957f\u4e0d\u80fd\u7f29\u77ed\u3002 \u5982\u679c\u4f7f\u7528\u6db2\u6001\u814c\u6599\uff0c\u53ef\u4ee5\u5728\u814c\u5236\u7ed3\u675f\u524d\u4e09\u5206\u949f\u6492\u4e00\u5c42\u9ed1\u80e1\u6912\u7c89\uff0c\u7136\u540e\u518d\u52a0\u5165\u6dc0\u7c89\uff0c\u518d\u6b21\u6df7\u5408\u5747\u5300\u540e\u9759\u7f6e 20 \u5206\u949f\u3002 \u5f00\u706b\uff0c\u70ed\u9505\uff0c\u52a0\u5165\u82b1\u751f\u6cb9\u3002 \u5f53\u80fd\u770b\u5230\u9505\u91cc\u7684\u6cb9\u5192\u51fa\u4e00\u4e1d\u70df\u65f6\uff0c\u653e\u5165\u725b\u8089\uff0c\u7ffb\u7092\u3002 \u5f00\u4e2d\u706b\u504f\u5927\uff0c\u7ffb\u7092 2 \u5206\u949f\u81f3\u725b\u8089\u5916\u8868\u53d8\u8272\uff08\u5373\u4e0d\u51fa\u73b0\u660e\u663e\u8840\u8272\uff0c\u6709\u8840\u8272\u90e8\u5206\u8bf4\u660e\u7ffb\u7092\u4e0d\u5230\u4f4d\uff09\uff08\u6b64\u5904\u5e94\u5c0f\u5fc3\u6cb9\u6ef4\u6e85\u5c04\uff09\u3002 \u653e\u5165\u6d0b\u8471\u548c\u83dc\u6912\uff0c\u7ffb\u7092 2 \u5206\u949f\u3002 \u52a0\u5165\u76d0\uff0c\u518d\u6b21\u6492\u4e00\u4efd\u9ed1\u80e1\u6912\u7c89\uff0c\u7ffb\u7092 30 \u79d2\uff0c\u6405\u62cc\u5747\u5300\u3002 \u89c2\u5bdf\u6d0b\u8471\u5df2\u7ecf\u53d8\u8f6f\u5373\u53ef\u5173\u706b\uff0c\u51fa\u9505\uff0c\u76db\u76d8\u3002 \u9644\u52a0\u5185\u5bb9 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9ed1\u6912\u725b\u67f3"},{"location":"dishes/meat_dish/%E9%BB%91%E6%A4%92%E7%89%9B%E6%9F%B3/%E9%BB%91%E6%A4%92%E7%89%9B%E6%9F%B3/#_1","text":"\u9ed1\u6912\u725b\u67f3\u662f\u4e00\u9053\u7b80\u5355\u6613\u505a\u7684\u83dc\u3002\u852c\u83dc\u4e0e\u8089\u7c7b\u5747\u8861\uff0c\u5bcc\u542b\u86cb\u767d\u8d28\uff0c\u53e3\u5473\u9002\u5408\u5927\u591a\u6570\u4eba\u3002\u4e00\u822c\u521d\u5b66\u8005\u53ea\u9700\u8981 1 \u5c0f\u65f6\u4ee5\u5185\u5373\u53ef\u5b8c\u6210\u3002","title":"\u9ed1\u6912\u725b\u67f3\u7684\u505a\u6cd5"},{"location":"dishes/meat_dish/%E9%BB%91%E6%A4%92%E7%89%9B%E6%9F%B3/%E9%BB%91%E6%A4%92%E7%89%9B%E6%9F%B3/#_2","text":"\u725b\u8089\uff08\u53ef\u4ee5\u7528\u725b\u91cc\u810a\u8089\u6216\u8005\u725b\u6392\u8089\uff09 \u6d0b\u8471 \u83dc\u6912\uff08\u7ea2/\u9ec4\u6912\uff09 \u6dc0\u7c89 \u9ed1\u80e1\u6912\uff08\u7c89\uff09 \u9ed1\u6912\uff08\u814c\u6599\uff09 \u76d0 \u82b1\u751f\u6cb9 \u6ce8\uff1a\u7c89\u4e0e\u814c\u6599\u53ef\u76f8\u4e92\u66ff\u4ee3\uff0c\u5177\u4f53\u7528\u91cf\u8bf7\u53c2\u7167\u60a8\u8d2d\u4e70\u7684\u98df\u54c1\u5305\u88c5\u4e0a\u7684\u8bf4\u660e\u3002 \u5efa\u8bae\u4f7f\u7528\u4e0d\u7c98\u9505\u3002","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/meat_dish/%E9%BB%91%E6%A4%92%E7%89%9B%E6%9F%B3/%E9%BB%91%E6%A4%92%E7%89%9B%E6%9F%B3/#_3","text":"\u4e2a\u4eba\u8ba4\u4e3a\uff0c\u5f53\u4eba\u6570\u4e3a 3-5 \u4eba\u65f6\uff0c\u5473\u9053\u6700\u4f73\u3002 \u725b\u8089\u91cf = \u4eba\u6570 * 100 \u514b \uff08\u89c6\u5c31\u9910\u8005\u80c3\u5bb9\u91cf\u548c\u9505\u5bb9\u91cf\u914c\u60c5\u589e\u51cf\uff09 \u6d0b\u8471\u91cf = \u4eba\u6570 * 1/12 \u4e2a\uff08\u5373 3 \u4eba\u65f6\u7ea6\u5207 1/4 \uff09 \u83dc\u6912\u91cf = \u4eba\u6570 * 1/12 \u4e2a\uff08\u5373 3 \u4eba\u65f6\u7ea6\u5207 1/4 \uff09 \u76d0\u91cf = \u4eba\u6570 * 1 \u514b \u6dc0\u7c89 = \u4eba\u6570 * 3 \u514b \u9ed1\u6912\u814c\u6599 = \u53c2\u7167\u6240\u8d2d\u5546\u54c1\u7684\u8bf4\u660e\u6309\u6bd4\u4f8b\u814c\u5236 \u9ed1\u80e1\u6912\u7c89 = \u4eba\u6570 * 1 \u514b\uff08\u5b9e\u9645\u4e0a\u662f\u968f\u4fbf\u6492\uff09 \u82b1\u751f\u6cb9 = \u4eba\u6570 * 10ml \uff08\u5b9e\u9645\u4e0a\u6cb9\u91cf\u662f\u4f9d\u636e\u83dc\u91cf\u53d8\u52a8\u7684\uff0c\u5982\u5bf9\u725b\u8089\u7684\u91cf\u6709\u589e\u51cf\u8bf7\u6309\u5bf9\u5e94\u6bd4\u4f8b\u53d8\u52a8\uff09 \u4f7f\u7528\u4e0a\u8ff0\u6761\u4ef6\uff0c\u8ba1\u7b97\u51fa\u8ba1\u5212\u4f7f\u7528\u7684\u539f\u6750\u6599\u6bd4\u4f8b\u3002","title":"\u8ba1\u7b97"},{"location":"dishes/meat_dish/%E9%BB%91%E6%A4%92%E7%89%9B%E6%9F%B3/%E9%BB%91%E6%A4%92%E7%89%9B%E6%9F%B3/#_4","text":"\u5c06\u725b\u8089\u5207\u6761\uff0c\u957f\u5ea6\u6700\u597d\u63a7\u5236\u5728 8 \u5398\u7c73\u4ee5\u4e0b\uff0c\u539a\u5ea6\u7ea6 5-10 \u6beb\u7c73\uff0c\u5bbd\u5ea6\u7ea6 1 \u5398\u7c73\uff08\u8981\u6c42\u4e0d\u4e25\u683c\uff09 \u5229\u7528\u814c\u6599\u814c\u5236\u725b\u8089\uff0c\u6df7\u5408\u5747\u5300\u540e\u9759\u7f6e\uff0c\u7528\u91cf\u4e0e\u65f6\u95f4\u8bf7\u53c2\u7167\u5546\u54c1\u8bf4\u660e\uff0c\u53ef\u4ee5\u5ef6\u957f\u4e0d\u80fd\u7f29\u77ed\u3002 \u5982\u679c\u4f7f\u7528\u6db2\u6001\u814c\u6599\uff0c\u53ef\u4ee5\u5728\u814c\u5236\u7ed3\u675f\u524d\u4e09\u5206\u949f\u6492\u4e00\u5c42\u9ed1\u80e1\u6912\u7c89\uff0c\u7136\u540e\u518d\u52a0\u5165\u6dc0\u7c89\uff0c\u518d\u6b21\u6df7\u5408\u5747\u5300\u540e\u9759\u7f6e 20 \u5206\u949f\u3002 \u5f00\u706b\uff0c\u70ed\u9505\uff0c\u52a0\u5165\u82b1\u751f\u6cb9\u3002 \u5f53\u80fd\u770b\u5230\u9505\u91cc\u7684\u6cb9\u5192\u51fa\u4e00\u4e1d\u70df\u65f6\uff0c\u653e\u5165\u725b\u8089\uff0c\u7ffb\u7092\u3002 \u5f00\u4e2d\u706b\u504f\u5927\uff0c\u7ffb\u7092 2 \u5206\u949f\u81f3\u725b\u8089\u5916\u8868\u53d8\u8272\uff08\u5373\u4e0d\u51fa\u73b0\u660e\u663e\u8840\u8272\uff0c\u6709\u8840\u8272\u90e8\u5206\u8bf4\u660e\u7ffb\u7092\u4e0d\u5230\u4f4d\uff09\uff08\u6b64\u5904\u5e94\u5c0f\u5fc3\u6cb9\u6ef4\u6e85\u5c04\uff09\u3002 \u653e\u5165\u6d0b\u8471\u548c\u83dc\u6912\uff0c\u7ffb\u7092 2 \u5206\u949f\u3002 \u52a0\u5165\u76d0\uff0c\u518d\u6b21\u6492\u4e00\u4efd\u9ed1\u80e1\u6912\u7c89\uff0c\u7ffb\u7092 30 \u79d2\uff0c\u6405\u62cc\u5747\u5300\u3002 \u89c2\u5bdf\u6d0b\u8471\u5df2\u7ecf\u53d8\u8f6f\u5373\u53ef\u5173\u706b\uff0c\u51fa\u9505\uff0c\u76db\u76d8\u3002","title":"\u64cd\u4f5c"},{"location":"dishes/meat_dish/%E9%BB%91%E6%A4%92%E7%89%9B%E6%9F%B3/%E9%BB%91%E6%A4%92%E7%89%9B%E6%9F%B3/#_5","text":"\u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/semi-finished/%E5%87%89%E7%9A%AE/","text":"\u51c9\u76ae\u7684\u505a\u6cd5 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u51c9\u76ae\u3001\u9762\u7b4b \u76d0\u3001\u9e21\u7cbe\u3001\u869d\u6cb9\u3001\u751f\u62bd\u3001\u8001\u62bd\u3001\u9999\u6cb9\u3001\u9999\u918b\u3001\u829d\u9ebb\u9171\uff08\u539f\u5473\u829d\u9ebb\u9171\u6700\u4f73\uff09 \u9ec4\u74dc\u3001\u5927\u849c\u3001\u7eff\u8c46\u82bd \u76c6\u3001\u7897\u3001\u76d8\u5b50\u3001\u849c\u81fc \u8ba1\u7b97 \u51c9\u76ae\u7528\u91cf\u4e3a 300 g/\u4eba \u5411\u4e0b\u53d6\u6574\u3002 \u829d\u9ebb\u9171\u7684\u7528\u91cf\u4e3a 30 g/\u4eba \u5411\u4e0b\u53d6\u6574\u3002 \u9ec4\u74dc 100g/\u4eba\u3001\u7eff\u8c46\u82bd 50g/\u4eba\u3002 \u64cd\u4f5c \u51c6\u5907\u5de5\u4f5c \u9505\u4e2d\u52a0\u5165 500ml \u6c34\u3002\u716e\u6cb8\u3002 \u5c06\u7eff\u8c46\u82bd\u653e\u5165\u9505\u4e2d\uff0c\u5927\u706b\u716e 60 \u79d2\u3002\u8c46\u82bd\u635e\u51fa\uff0c\u8fc7\u51c9\u6c34\uff0c\u653e\u5165\u76d8\u4e2d\u5907\u7528\u3002 \u9ec4\u74dc\u5207\u4e1d\u653e\u5165\u76d8\u4e2d\u5907\u7528 \u5c06 10g \u849c\u74e3\u5265\u76ae\u3001\u653e\u5165\u849c\u81fc\u4e2d\u52a0\u5165 1g \u76d0\u3002\u9524\u6210\u849c\u6ce5\uff0c\u52a0\u5165 10g \u81ea\u6765\u6c34\u3002\u653e\u7f6e\u5907\u7528\u3002 \u6ce8\uff1a\u8d85\u5e02\u8d2d\u4e70\u6765\u7684\u51c9\u76ae\u8868\u9762\u4e00\u822c\u4f1a\u6709\u98df\u7528\u6cb9\uff0c\u5982\u679c\u8fd9\u8ba9\u5e72\u51c0\u7684\u4f60\u5bf9\u8d85\u5e02\u4e0d\u4fe1\u4efb\uff0c\u53ef\u4ee5\u4f7f\u7528\u81ea\u6765\u6c34\u6e05\u6d17\u3002\u9762\u7b4b\u540c\u6837\u3002 \u6ce8\uff1a\u6e05\u6d17\u9762\u7b4b\u4e4b\u540e\uff0c\u8bf7\u7528\u624b\u5c06\u9762\u7b4b\u4e2d\u7684\u5927\u91cf\u6c34\u5206\u6324\u51fa\uff08\u4e0d\u9700\u8fc7\u4e8e\u7528\u529b\uff09\u3002 \u76d0\u6c34\u8c03\u914d \u51c6\u5907\u5c0f\u7897\uff0c\u52a0\u5165 3g \u76d0\u30012g \u9e21\u7cbe\u30015g \u751f\u62bd\u30011g \u8001\u62bd\u30011g \u9999\u6cb9\u30012g \u869d\u6cb9\u3001\u9999\u918b 5g\u3001\uff08\u76d0\u3001\u9999\u918b\u5747\u53ef\u6839\u636e\u4e2a\u4eba\u53e3\u5473\u914c\u91cf\u6dfb\u52a0\uff0c\u4ee5\u4e0a\u6570\u636e\u53ea\u662f\u5927\u4f17\u53e3\u5473\uff09\u3002 \u4ee5\u4e0a\u8c03\u6599\u52a0\u5165 25-35g \u6e29\u6c34\uff08\u636e\u4e2a\u4eba\u54b8\u6de1\u7a0b\u5ea6\uff09\uff0c\u4f7f\u7528\u7b77\u5b50\u5c06\u5176\u62cc\u5300\u3001\u6eb6\u89e3\u3002\u9759\u7f6e\u4e00\u65c1\u51b7\u5374\u3002 \u829d\u9ebb\u9171\u8c03\u914d \u6ce8\uff1a\u4ee5\u4e0b\u8ba1\u91cf\u5747\u4e3a\u4e00\u4eba\u4efd\uff0c\u5982\u679c\u6709 n \u4eba\uff0c\u8bf7\u81ea\u89c9\u5c06\u8ba1\u91cf\u4e58\u4ee5 n \u62ff\u51fa\u5c0f\u7897\uff0c\u5c06\u51c6\u5907\u597d\u7684\u829d\u9ebb\u9171\u653e\u5165\u5176\u4e2d\u3002 \u52a0\u5165 4g \u76d0\u30013g \u9e21\u7cbe\u30015g \u751f\u62bd\u30011g \u8001\u62bd\u30013g \u869d\u6cb9\u3002 \u4f7f\u7528\u7b77\u5b50\u5c06\u5176\u8c03\u6599\u4e0e\u829d\u9ebb\u9171\u62cc\u5300\u3002 \u52a0\u5165 10g \u6e05\u6c34\u5c06\u5176\u62cc\u5300\u3002 \u4e0a\u4e00\u6b65\u9aa4\u91cd\u590d 2\u30013 \u6b21\uff08\u6b21\u6570\u6839\u636e\u4e2a\u4eba\u5bf9\u829d\u9ebb\u9171\u7684\u6d53\u7a20\u7a0b\u5ea6\u800c\u5b9a\uff09\u3002 \u6700\u7ec8\u6b65\u9aa4 \u62ff\u51fa\u6211\u4eec\u7684\u5c0f\u76c6\uff0c\u52a0\u5165\u6211\u4eec\u51c6\u5907\u597d\u7684\u51c9\u76ae\u3002 \u5012\u5165\u76d0\u6c34\uff0c\u4f7f\u7528\u7b77\u5b50\u5c06\u5176\u62cc\u5300\u3002\u968f\u4e4b\u76db\u5165\u5c0f\u7897\uff08\u76d0\u6c34\u4e00\u5e76\u5012\u5165\u7897\u4e2d\uff09\u3002 \u8c46\u82bd\u653e\u7f6e\u51c9\u76ae\u4e0a\u3001\u9762\u7b4b\u968f\u540e\u653e\u4e0a\u3002 \u5c06\u8c03\u914d\u597d\u7684\u829d\u9ebb\u9171\u4ece\u9762\u7b4b\u4e0a\u65b9\u5012\u4e0b\u3002 \u6492\u4e0a\u9ec4\u74dc\u4e1d\u3002 \u5982\u6709\u559c\u7231\u53ef\u4ee5\u9002\u91cf\u52a0\u5165\u8fa3\u6912\u6cb9\u3002 \u606d\u559c\u4f60\u8272\u9999\u5473\u4ff1\u5168\u7684\u5bb6\u5e38\u51c9\u76ae\u51fa\u7089\uff01 \u9644\u52a0\u5185\u5bb9 \u4e2a\u4eba\u53e3\u5473\u6839\u636e\u5730\u533a\u3001\u5929\u6c14\u3001\u65f6\u95f4\u5747\u6709\u4e0d\u540c\uff0c\u8c03\u6599\u7684\u5177\u4f53\u4f7f\u7528\u91cf\u8bf7\u636e\u4e2a\u4eba\u60c5\u51b5\u800c\u5b9a\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u51c9\u76ae"},{"location":"dishes/semi-finished/%E5%87%89%E7%9A%AE/#_1","text":"","title":"\u51c9\u76ae\u7684\u505a\u6cd5"},{"location":"dishes/semi-finished/%E5%87%89%E7%9A%AE/#_2","text":"\u51c9\u76ae\u3001\u9762\u7b4b \u76d0\u3001\u9e21\u7cbe\u3001\u869d\u6cb9\u3001\u751f\u62bd\u3001\u8001\u62bd\u3001\u9999\u6cb9\u3001\u9999\u918b\u3001\u829d\u9ebb\u9171\uff08\u539f\u5473\u829d\u9ebb\u9171\u6700\u4f73\uff09 \u9ec4\u74dc\u3001\u5927\u849c\u3001\u7eff\u8c46\u82bd \u76c6\u3001\u7897\u3001\u76d8\u5b50\u3001\u849c\u81fc","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/semi-finished/%E5%87%89%E7%9A%AE/#_3","text":"\u51c9\u76ae\u7528\u91cf\u4e3a 300 g/\u4eba \u5411\u4e0b\u53d6\u6574\u3002 \u829d\u9ebb\u9171\u7684\u7528\u91cf\u4e3a 30 g/\u4eba \u5411\u4e0b\u53d6\u6574\u3002 \u9ec4\u74dc 100g/\u4eba\u3001\u7eff\u8c46\u82bd 50g/\u4eba\u3002","title":"\u8ba1\u7b97"},{"location":"dishes/semi-finished/%E5%87%89%E7%9A%AE/#_4","text":"","title":"\u64cd\u4f5c"},{"location":"dishes/semi-finished/%E5%87%89%E7%9A%AE/#_5","text":"\u9505\u4e2d\u52a0\u5165 500ml \u6c34\u3002\u716e\u6cb8\u3002 \u5c06\u7eff\u8c46\u82bd\u653e\u5165\u9505\u4e2d\uff0c\u5927\u706b\u716e 60 \u79d2\u3002\u8c46\u82bd\u635e\u51fa\uff0c\u8fc7\u51c9\u6c34\uff0c\u653e\u5165\u76d8\u4e2d\u5907\u7528\u3002 \u9ec4\u74dc\u5207\u4e1d\u653e\u5165\u76d8\u4e2d\u5907\u7528 \u5c06 10g \u849c\u74e3\u5265\u76ae\u3001\u653e\u5165\u849c\u81fc\u4e2d\u52a0\u5165 1g \u76d0\u3002\u9524\u6210\u849c\u6ce5\uff0c\u52a0\u5165 10g \u81ea\u6765\u6c34\u3002\u653e\u7f6e\u5907\u7528\u3002 \u6ce8\uff1a\u8d85\u5e02\u8d2d\u4e70\u6765\u7684\u51c9\u76ae\u8868\u9762\u4e00\u822c\u4f1a\u6709\u98df\u7528\u6cb9\uff0c\u5982\u679c\u8fd9\u8ba9\u5e72\u51c0\u7684\u4f60\u5bf9\u8d85\u5e02\u4e0d\u4fe1\u4efb\uff0c\u53ef\u4ee5\u4f7f\u7528\u81ea\u6765\u6c34\u6e05\u6d17\u3002\u9762\u7b4b\u540c\u6837\u3002 \u6ce8\uff1a\u6e05\u6d17\u9762\u7b4b\u4e4b\u540e\uff0c\u8bf7\u7528\u624b\u5c06\u9762\u7b4b\u4e2d\u7684\u5927\u91cf\u6c34\u5206\u6324\u51fa\uff08\u4e0d\u9700\u8fc7\u4e8e\u7528\u529b\uff09\u3002","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"dishes/semi-finished/%E5%87%89%E7%9A%AE/#_6","text":"\u51c6\u5907\u5c0f\u7897\uff0c\u52a0\u5165 3g \u76d0\u30012g \u9e21\u7cbe\u30015g \u751f\u62bd\u30011g \u8001\u62bd\u30011g \u9999\u6cb9\u30012g \u869d\u6cb9\u3001\u9999\u918b 5g\u3001\uff08\u76d0\u3001\u9999\u918b\u5747\u53ef\u6839\u636e\u4e2a\u4eba\u53e3\u5473\u914c\u91cf\u6dfb\u52a0\uff0c\u4ee5\u4e0a\u6570\u636e\u53ea\u662f\u5927\u4f17\u53e3\u5473\uff09\u3002 \u4ee5\u4e0a\u8c03\u6599\u52a0\u5165 25-35g \u6e29\u6c34\uff08\u636e\u4e2a\u4eba\u54b8\u6de1\u7a0b\u5ea6\uff09\uff0c\u4f7f\u7528\u7b77\u5b50\u5c06\u5176\u62cc\u5300\u3001\u6eb6\u89e3\u3002\u9759\u7f6e\u4e00\u65c1\u51b7\u5374\u3002","title":"\u76d0\u6c34\u8c03\u914d"},{"location":"dishes/semi-finished/%E5%87%89%E7%9A%AE/#_7","text":"\u6ce8\uff1a\u4ee5\u4e0b\u8ba1\u91cf\u5747\u4e3a\u4e00\u4eba\u4efd\uff0c\u5982\u679c\u6709 n \u4eba\uff0c\u8bf7\u81ea\u89c9\u5c06\u8ba1\u91cf\u4e58\u4ee5 n \u62ff\u51fa\u5c0f\u7897\uff0c\u5c06\u51c6\u5907\u597d\u7684\u829d\u9ebb\u9171\u653e\u5165\u5176\u4e2d\u3002 \u52a0\u5165 4g \u76d0\u30013g \u9e21\u7cbe\u30015g \u751f\u62bd\u30011g \u8001\u62bd\u30013g \u869d\u6cb9\u3002 \u4f7f\u7528\u7b77\u5b50\u5c06\u5176\u8c03\u6599\u4e0e\u829d\u9ebb\u9171\u62cc\u5300\u3002 \u52a0\u5165 10g \u6e05\u6c34\u5c06\u5176\u62cc\u5300\u3002 \u4e0a\u4e00\u6b65\u9aa4\u91cd\u590d 2\u30013 \u6b21\uff08\u6b21\u6570\u6839\u636e\u4e2a\u4eba\u5bf9\u829d\u9ebb\u9171\u7684\u6d53\u7a20\u7a0b\u5ea6\u800c\u5b9a\uff09\u3002","title":"\u829d\u9ebb\u9171\u8c03\u914d"},{"location":"dishes/semi-finished/%E5%87%89%E7%9A%AE/#_8","text":"\u62ff\u51fa\u6211\u4eec\u7684\u5c0f\u76c6\uff0c\u52a0\u5165\u6211\u4eec\u51c6\u5907\u597d\u7684\u51c9\u76ae\u3002 \u5012\u5165\u76d0\u6c34\uff0c\u4f7f\u7528\u7b77\u5b50\u5c06\u5176\u62cc\u5300\u3002\u968f\u4e4b\u76db\u5165\u5c0f\u7897\uff08\u76d0\u6c34\u4e00\u5e76\u5012\u5165\u7897\u4e2d\uff09\u3002 \u8c46\u82bd\u653e\u7f6e\u51c9\u76ae\u4e0a\u3001\u9762\u7b4b\u968f\u540e\u653e\u4e0a\u3002 \u5c06\u8c03\u914d\u597d\u7684\u829d\u9ebb\u9171\u4ece\u9762\u7b4b\u4e0a\u65b9\u5012\u4e0b\u3002 \u6492\u4e0a\u9ec4\u74dc\u4e1d\u3002 \u5982\u6709\u559c\u7231\u53ef\u4ee5\u9002\u91cf\u52a0\u5165\u8fa3\u6912\u6cb9\u3002 \u606d\u559c\u4f60\u8272\u9999\u5473\u4ff1\u5168\u7684\u5bb6\u5e38\u51c9\u76ae\u51fa\u7089\uff01","title":"\u6700\u7ec8\u6b65\u9aa4"},{"location":"dishes/semi-finished/%E5%87%89%E7%9A%AE/#_9","text":"\u4e2a\u4eba\u53e3\u5473\u6839\u636e\u5730\u533a\u3001\u5929\u6c14\u3001\u65f6\u95f4\u5747\u6709\u4e0d\u540c\uff0c\u8c03\u6599\u7684\u5177\u4f53\u4f7f\u7528\u91cf\u8bf7\u636e\u4e2a\u4eba\u60c5\u51b5\u800c\u5b9a\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/semi-finished/%E8%96%AF%E6%9D%A1/","text":"\u70b8\u85af\u6761\ud83c\udf5f\u7684\u505a\u6cd5 \u85af\u6761\ud83c\udf5f\u662f\u4e00\u79cd\u571f\u8c46\ud83e\udd54||\u9a6c\u94c3\u85af\ud83e\udd54||\u6d0b\u828b\ud83e\udd54\u5207\u6210\u6761\u72b6\u4e4b\u540e\u518d\u6cb9\u70b8\u800c\u6210\u7684\u5feb\u9910\u98df\u7269\uff08\u5728\u6709\u7684\u56fd\u5bb6\u53ef\u80fd\u4e0d\u7b97\u5feb\u9910\uff09\uff0c\u975e\u5e38\u9002\u5408\u3002\u76f8\u8f83\u4e8e\u6cb9\u70b8\uff0c\u7a7a\u6c14\u70b8\u9505\u53ef\u80fd\u4f1a\u66f4\u52a0\u6613\u4e8e\u907f\u514d\u5d29\u6e83\u548c\u5b9e\u73b0\u5f02\u6b65\u975e\u963b\u585e\u3002\u76f8\u8f83\u4e8e\u81ea\u5df1\u52a8\u624b\u5207\u571f\u8c46\u518d\u6d17\u53bb\u6dc0\u7c89\u5e76\u55b7\u4e0a\u9002\u91cf\u7684\u6cb9\uff0c\u4f7f\u7528\u534a\u6210\u54c1\u85af\u6761\u53ef\u80fd\u4f1a\u663e\u8457\u51cf\u5c11\u70ed\u91cf\u6444\u5165\u524d\u7684\u70ed\u91cf\u6d88\u8017\uff0c\u56db\u820d\u4e94\u5165\u5c31\u662f\u4f1a\u663e\u8457\u51cf\u5c11\u70ed\u91cf\u6444\u5165~~\u524d\u7684\u70ed\u91cf\u6d88\u8017~~\u3002 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 1 \u888b\u534a\u6210\u54c1\u85af\u6761\uff08\u63a8\u8350\u54c1\u724c\u9ea6\u80af\uff09 1 \u4e2a\u7a7a\u6c14\u70b8\u9505\uff08\u559c\u6b22\u8106\u7684\u5207\u5fcc\u5c0f\u724c\u5b50\uff09 \u6ce8\u610f\uff0c\u4f7f\u7528\u7684\u70f9\u996a\u5de5\u5177\u4e0d\u540c\u70b8\u85af\u6761\u53ef\u80fd\u6709\u4e0d\u540c\u7684\u505a\u6cd5\uff0c\u8fd9\u91cc\u4ec5\u4ecb\u7ecd\u4f7f\u7528\u300c\u7a7a\u6c14\u70b8\u9505\u300d\u7684\u505a\u6cd5\u3002 \u8ba1\u7b97 \u4f5c\u4e3a\u4e3b\u98df\uff0c1 \u4eba 1 \u987f 400g\uff08\u4ee5\u534a\u6210\u54c1\u4e3a\u51c6\uff09 \u4f5c\u4e3a\u5c0f\u98df\uff0c1 \u4eba 1 \u987f 1/4 \u4e3b\u98df\u8d28\u91cf+-50g \u4f7f\u7528\u4e0a\u8ff0\u6761\u4ef6\uff0c\u6309\u98df\u7528\u4eba\u6570\u548c\u5b9e\u9645\u60c5\u51b5\uff08\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u65e5\u5e38\u98df\u91cf\u3001\u5fc3\u60c5\u548c\u996d\u524d\u8fd0\u52a8\u60c5\u51b5\uff09\u8ba1\u7b97\u6750\u6599\u7528\u91cf\u3002 \u64cd\u4f5c \u5f00\u5c01\u85af\u6761 \u5f00\u5c01\u5927\u5206\u91cf\u534a\u6210\u54c1\u85af\u6761\u6ce8\u610f\u5f00\u53e3\u8981\u5c0f\uff0c\u53ef\u4ee5\u6709\u6548\u51cf\u5c11\u957f\u4e45\u50a8\u85cf\u4e0b\u85af\u6761\u8868\u9762\u7ed3\u971c\u3002 \u9884\u70ed\u7a7a\u6c14\u70b8\u9505 \u63d2\u7535\uff0c200\u2103\u9884\u70ed 5 \u5206\u949f\u3002 \u9884\u70ed\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u3002 \u6ce8\u610f\uff0c\u9884\u70ed\u5b8c\u518d\u62ff\u51fa\u85af\u6761\uff0c\u4e0d\u5e94\u7b49\u85af\u6761\u8f6f\u5316\u540e\u518d\u70b8\u5236\u3002 \u70b8\u85af\u6761 \u53d6\u51fa\u85af\u6761\u653e\u5165\u7a7a\u6c14\u70b8\u9505\uff0c200\u210320 \u5206\u949f\u3002 \u53d6\u51fa\u85af\u6761\u7684\u65f6\u5019\u6ce8\u610f\u534a\u6210\u54c1\u85af\u6761\u5df2\u7ecf\u6709\u6cb9\uff0c\u6240\u4ee5\u8981\u5f02\u6b65\u53bb\u505a\u5ba2\u6237\u7aef\u5185\u5200\u65af\u6797\u7684\u8bdd\u9700\u8981\u4f7f\u7528\u5939\u6301\u5de5\u5177\u3002 5~10 \u5206\u949f\u65f6\u53ef\u4ee5\u62ff\u51fa\u9505\u4f53\u6643\u52a8\u4f7f\u85af\u6761\u53d7\u70ed\u5747\u5300\u4e5f\u9632\u6b62\u7c98\u8fde\u3002 \u8106\u5316\uff08\u53ef\u9009\u9879\uff09 10 \u5206\u949f~15 \u5206\u949f\u65f6\uff0c\u62ff\u51fa\u9505\u4f53\uff0c\u5f80\u5df2\u7ecf\u5e72\u4e86\u7684\u85af\u6761\u8868\u9762\u55b7 1 \u5c42\u9762\u79ef\u4e3a\u85af\u6761\u8868\u9762\u79ef 2/3 \u7684\u6cb9\u3002 \u53d6\u51fa&\u88c5\u76d8 \u559c\u6b22\u8106\u85af\u6761\u7684\uff0c\u53d6\u51fa\u540e\u62ff\u7740\u9505\u4f53\u8df3\u821e\u8ba9\u7a7a\u6c14\u7ecf\u8fc7\u85af\u6761\u8868\u9762\u540e\u88c5\u76d8\uff1b\u559c\u6b22\u8f6f\u85af\u6761\u7684\u76f4\u63a5\u88c5\u76d8\u3002\u914d\u5408\u8638\u9171\u6216\u6d47\u4e0a\u9171\u6c41\u66f4\u4f73\u3002 \u9644\u52a0\u5185\u5bb9 \u756a\u8304\u9171\u3001\u86cb\u9ec4\u9171\u3001\u8702\u871c\u82a5\u672b\u9171\u3001 \u849c\u9999\u9171\u6cb9 \u2026\u2026\u70b8\u85af\u6761\u7684\u664b\u7ea7\u4e4b\u8def\u5728\u4e8e\u5bf9\u9171\u6599\u53ca\u9171\u6599\u7ec4\u5408\u7684\u63a2\u7a76\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u85af\u6761"},{"location":"dishes/semi-finished/%E8%96%AF%E6%9D%A1/#_1","text":"\u85af\u6761\ud83c\udf5f\u662f\u4e00\u79cd\u571f\u8c46\ud83e\udd54||\u9a6c\u94c3\u85af\ud83e\udd54||\u6d0b\u828b\ud83e\udd54\u5207\u6210\u6761\u72b6\u4e4b\u540e\u518d\u6cb9\u70b8\u800c\u6210\u7684\u5feb\u9910\u98df\u7269\uff08\u5728\u6709\u7684\u56fd\u5bb6\u53ef\u80fd\u4e0d\u7b97\u5feb\u9910\uff09\uff0c\u975e\u5e38\u9002\u5408\u3002\u76f8\u8f83\u4e8e\u6cb9\u70b8\uff0c\u7a7a\u6c14\u70b8\u9505\u53ef\u80fd\u4f1a\u66f4\u52a0\u6613\u4e8e\u907f\u514d\u5d29\u6e83\u548c\u5b9e\u73b0\u5f02\u6b65\u975e\u963b\u585e\u3002\u76f8\u8f83\u4e8e\u81ea\u5df1\u52a8\u624b\u5207\u571f\u8c46\u518d\u6d17\u53bb\u6dc0\u7c89\u5e76\u55b7\u4e0a\u9002\u91cf\u7684\u6cb9\uff0c\u4f7f\u7528\u534a\u6210\u54c1\u85af\u6761\u53ef\u80fd\u4f1a\u663e\u8457\u51cf\u5c11\u70ed\u91cf\u6444\u5165\u524d\u7684\u70ed\u91cf\u6d88\u8017\uff0c\u56db\u820d\u4e94\u5165\u5c31\u662f\u4f1a\u663e\u8457\u51cf\u5c11\u70ed\u91cf\u6444\u5165~~\u524d\u7684\u70ed\u91cf\u6d88\u8017~~\u3002","title":"\u70b8\u85af\u6761\ud83c\udf5f\u7684\u505a\u6cd5"},{"location":"dishes/semi-finished/%E8%96%AF%E6%9D%A1/#_2","text":"1 \u888b\u534a\u6210\u54c1\u85af\u6761\uff08\u63a8\u8350\u54c1\u724c\u9ea6\u80af\uff09 1 \u4e2a\u7a7a\u6c14\u70b8\u9505\uff08\u559c\u6b22\u8106\u7684\u5207\u5fcc\u5c0f\u724c\u5b50\uff09 \u6ce8\u610f\uff0c\u4f7f\u7528\u7684\u70f9\u996a\u5de5\u5177\u4e0d\u540c\u70b8\u85af\u6761\u53ef\u80fd\u6709\u4e0d\u540c\u7684\u505a\u6cd5\uff0c\u8fd9\u91cc\u4ec5\u4ecb\u7ecd\u4f7f\u7528\u300c\u7a7a\u6c14\u70b8\u9505\u300d\u7684\u505a\u6cd5\u3002","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/semi-finished/%E8%96%AF%E6%9D%A1/#_3","text":"\u4f5c\u4e3a\u4e3b\u98df\uff0c1 \u4eba 1 \u987f 400g\uff08\u4ee5\u534a\u6210\u54c1\u4e3a\u51c6\uff09 \u4f5c\u4e3a\u5c0f\u98df\uff0c1 \u4eba 1 \u987f 1/4 \u4e3b\u98df\u8d28\u91cf+-50g \u4f7f\u7528\u4e0a\u8ff0\u6761\u4ef6\uff0c\u6309\u98df\u7528\u4eba\u6570\u548c\u5b9e\u9645\u60c5\u51b5\uff08\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u65e5\u5e38\u98df\u91cf\u3001\u5fc3\u60c5\u548c\u996d\u524d\u8fd0\u52a8\u60c5\u51b5\uff09\u8ba1\u7b97\u6750\u6599\u7528\u91cf\u3002","title":"\u8ba1\u7b97"},{"location":"dishes/semi-finished/%E8%96%AF%E6%9D%A1/#_4","text":"","title":"\u64cd\u4f5c"},{"location":"dishes/semi-finished/%E8%96%AF%E6%9D%A1/#_5","text":"\u5f00\u5c01\u5927\u5206\u91cf\u534a\u6210\u54c1\u85af\u6761\u6ce8\u610f\u5f00\u53e3\u8981\u5c0f\uff0c\u53ef\u4ee5\u6709\u6548\u51cf\u5c11\u957f\u4e45\u50a8\u85cf\u4e0b\u85af\u6761\u8868\u9762\u7ed3\u971c\u3002","title":"\u5f00\u5c01\u85af\u6761"},{"location":"dishes/semi-finished/%E8%96%AF%E6%9D%A1/#_6","text":"\u63d2\u7535\uff0c200\u2103\u9884\u70ed 5 \u5206\u949f\u3002 \u9884\u70ed\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u3002 \u6ce8\u610f\uff0c\u9884\u70ed\u5b8c\u518d\u62ff\u51fa\u85af\u6761\uff0c\u4e0d\u5e94\u7b49\u85af\u6761\u8f6f\u5316\u540e\u518d\u70b8\u5236\u3002","title":"\u9884\u70ed\u7a7a\u6c14\u70b8\u9505"},{"location":"dishes/semi-finished/%E8%96%AF%E6%9D%A1/#_7","text":"\u53d6\u51fa\u85af\u6761\u653e\u5165\u7a7a\u6c14\u70b8\u9505\uff0c200\u210320 \u5206\u949f\u3002 \u53d6\u51fa\u85af\u6761\u7684\u65f6\u5019\u6ce8\u610f\u534a\u6210\u54c1\u85af\u6761\u5df2\u7ecf\u6709\u6cb9\uff0c\u6240\u4ee5\u8981\u5f02\u6b65\u53bb\u505a\u5ba2\u6237\u7aef\u5185\u5200\u65af\u6797\u7684\u8bdd\u9700\u8981\u4f7f\u7528\u5939\u6301\u5de5\u5177\u3002 5~10 \u5206\u949f\u65f6\u53ef\u4ee5\u62ff\u51fa\u9505\u4f53\u6643\u52a8\u4f7f\u85af\u6761\u53d7\u70ed\u5747\u5300\u4e5f\u9632\u6b62\u7c98\u8fde\u3002","title":"\u70b8\u85af\u6761"},{"location":"dishes/semi-finished/%E8%96%AF%E6%9D%A1/#_8","text":"10 \u5206\u949f~15 \u5206\u949f\u65f6\uff0c\u62ff\u51fa\u9505\u4f53\uff0c\u5f80\u5df2\u7ecf\u5e72\u4e86\u7684\u85af\u6761\u8868\u9762\u55b7 1 \u5c42\u9762\u79ef\u4e3a\u85af\u6761\u8868\u9762\u79ef 2/3 \u7684\u6cb9\u3002","title":"\u8106\u5316\uff08\u53ef\u9009\u9879\uff09"},{"location":"dishes/semi-finished/%E8%96%AF%E6%9D%A1/#_9","text":"\u559c\u6b22\u8106\u85af\u6761\u7684\uff0c\u53d6\u51fa\u540e\u62ff\u7740\u9505\u4f53\u8df3\u821e\u8ba9\u7a7a\u6c14\u7ecf\u8fc7\u85af\u6761\u8868\u9762\u540e\u88c5\u76d8\uff1b\u559c\u6b22\u8f6f\u85af\u6761\u7684\u76f4\u63a5\u88c5\u76d8\u3002\u914d\u5408\u8638\u9171\u6216\u6d47\u4e0a\u9171\u6c41\u66f4\u4f73\u3002","title":"\u53d6\u51fa&amp;\u88c5\u76d8"},{"location":"dishes/semi-finished/%E8%96%AF%E6%9D%A1/#_10","text":"\u756a\u8304\u9171\u3001\u86cb\u9ec4\u9171\u3001\u8702\u871c\u82a5\u672b\u9171\u3001 \u849c\u9999\u9171\u6cb9 \u2026\u2026\u70b8\u85af\u6761\u7684\u664b\u7ea7\u4e4b\u8def\u5728\u4e8e\u5bf9\u9171\u6599\u53ca\u9171\u6599\u7ec4\u5408\u7684\u63a2\u7a76\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/semi-finished/%E9%80%9F%E5%86%BB%E6%B0%B4%E9%A5%BA/","text":"\u901f\u51bb\u6c34\u997a\u7684\u505a\u6cd5 \u997a\u5b50\u662f\u4e00\u79cd\u6e90\u81ea\u4e2d\u56fd\u7684\u4e00\u79cd\u4ee5\u9762\u76ae\u5305\u9985\u3001\u5f62\u5982\u534a\u6708\u6216\u5143\u5b9d\u5f62\u7684\u98df\u7269\u3002\u997a\u5b50\u662f\u5728\u519c\u5386\u65b0\u5e74\u548c\u51ac\u81f3\u7b49\u8282\u65e5\u7684\u91cd\u8981\u98df\u54c1\u3002\u901a\u5e38\u7531\u788e\u8089\u548c\u852c\u83dc\u9985\u6599\u5305\u88f9\u6210\u4e00\u7247\u8584\u751f\u9762\u56e2\u540e\u5305\u597d\u5bc6\u5c01\u3002\u800c\u997a\u5b50\u7684\u7f3a\u70b9\u5728\u4e8e\u96be\u4ee5\u5236\u4f5c\u3002\u4e0d\u59a8\u9009\u62e9\u8d2d\u4e70\u901f\u51bb\u6c34\u997a\u6765\u5feb\u901f\u5728\u5bb6\u91cc\u5403\u4e0a\u70ed\u6c14\u817e\u817e\u7684\u997a\u5b50\u3002 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u672a\u8fc7\u671f\u7684\u4e00\u888b\u901f\u51bb\u6c34\u997a \u8ba1\u7b97 \u6bcf\u4eba\u53ef\u4ee5\u98df\u7528 7\uff5e10 \u4e2a\u6c34\u997a \u4e00\u4e2a\u6c34\u997a\u7ea6\u9700\u8981\u672c\u8eab\u4f53\u79ef\u4e24\u500d\u7684\u6c34\uff08\u997a\u5b50\u5012\u5165\u9505\u5185\u65f6\uff0c\u6c34\u7684\u9ad8\u5ea6\u5e94\u4e00\u81f3\u4e24\u500d\u4e8e\u997a\u5b50\u7684\u9ad8\u5ea6\uff0c\u5373\u997a\u5b50\u9ad8\u5ea6\u4e3a 1\uff0c\u6c34\u9ad8\u5ea6\u5219\u4e3a 1~2\uff09 \u4f7f\u7528\u4e0a\u8ff0\u6761\u4ef6\uff0c\u8ba1\u7b97\u51fa\u8ba1\u5212\u4f7f\u7528\u7684\u539f\u6750\u6599\u6bd4\u4f8b\u3002 \u64cd\u4f5c \u4e2d\u706b\uff0c\u5c06\u6c34\u5012\u5165\u9505\u4e2d\uff0c\u9759\u5019\u6c34\u716e\u6cb8\u3002 \u5c06\u997a\u5b50\u5012\u5165\u9505\u4e2d\u3002 \u5012\u5165\u9505\u524d\u53ef\u4ee5\u9002\u5f53\u7528\u6c34\u8fc7\u4e00\u4e0b\u3002 \u5012\u5165\u997a\u5b50\u540e\uff0c\u53ef\u4ee5\u7528\u7092\u83dc\u52fa\u5b50\u6216\u94f2\u5b50\u6405\u6c34\uff0c\u4f46\u8981\u6ce8\u610f\u4e0d\u8981\u94f2\u5230\u997a\u5b50\u4e0a\uff0c\u4ee5\u907f\u514d\u7c98\u9505\u4e0a\u6495\u7834\u76ae\u6216\u4e92\u76f8\u7c98\u8fde\u9020\u6210\u7c98\u8fde\u5904\u5939\u751f\u3002 \u9891\u7387\u4e0d\u9700\u8981\u592a\u9ad8\uff0c\u5e73\u5747\u6bcf 30 \u79d2\u6447 3 \u79d2\uff0c\u997a\u5b50\u6d6e\u8d77\u540e\u4e0d\u9700\u8981\u518d\u505a\u6b64\u6b65\u3002 \u997a\u5b50\u6d6e\u8d77\u53ca\u6c34\u518d\u6b21\u716e\u6cb8\u540e\uff0c\u7528\u7092\u83dc\u52fa\u5b50\u76db\u8d77\u4e00\u4e2a\u997a\u5b50\u89c2\u5bdf\uff0c\u5982\u679c\u9762\u76ae\u6709\u5939\u751f\u53ef\u7528\u7092\u83dc\u52fa\u5b50\u8200\u5165\u4e00\u81f3\u4e24\u52fa\u51c9\u6c34\uff08\u7ea6 100g\uff09\uff0c\u5c06\u6c34\u964d\u6e29\uff0c\u7136\u540e\u7ee7\u7eed\u716e\u81f3\u6cb8\u817e\uff0c\u6b64\u95f4\u91cd\u590d\u6b64\u89c2\u5bdf\u3001\u6405\u62cc\u64cd\u4f5c\uff0c\u6700\u591a\u52a0\u4e24\u6b21\u6c34\u5c31\u80fd\u5168\u719f\u3002 \u6240\u6709\u997a\u5b50\u6d6e\u8d77\u540e\uff08\u4e0b\u997a\u5b50\u540e\u7ea6 8 \u5206\u949f\uff09\u7528\u94f2\u5b50\u6216\u6f0f\u52fa\u628a\u997a\u5b50\u94f2\u5165\u76d8\u6216\u7897\u4e2d\uff0c\u88c5\u76d8\u540e\u5373\u53ef\u98df\u7528\u3002 \u5403\u5b8c\u997a\u5b50\u540e\uff0c\u7b49\u9505\u5185\u6c34\u6e29\u964d\u4f4e\uff0c\u5c06\u6c34\u5012\u6389\u5e76\u7528\u6d17\u6d01\u7cbe\u53ca\u65f6\u5237\u9505\uff0c\u4e0d\u7136\u8fc7\u6bb5\u65f6\u95f4\u9505\u5185\u716e\u8fc7\u7684\u9762\u7c89\u4f1a\u5728\u9505\u58c1\u5f62\u6210\u9ecf\u7cca\u7cca\u7684\u7269\u8d28\u3002 \u9644\u52a0\u5185\u5bb9 \u8fd9\u9053\u83dc\u5b58\u5728\u4e00\u4e9b\u8865\u5145\u505a\u6cd5\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\uff1a \u989d\u5916\u6dfb\u52a0\u4e0b\u5217\u6750\u6599\uff1a \u9ed1\u918b 10ml \u59dc \u4e00\u5c0f\u5757 50 \u514b \u9999\u6cb9 2 \u6ef4 \u5927\u849c/\u849c\u6ce5 3 \u74e3/\u4eba \u8003\u8651\u642d\u914d\u9ed1\u918b\u98df\u7528\u3002\u5efa\u8bae\u7528\u91cf\uff1a10-20ml\u3002 \u8003\u8651\u59dc\u5207\u4e1d\uff0c\u5728\u5c0f\u7897\u52a0\u5165 20ml \u7684\u9ed1\u918b\u4e0e\u59dc\u4e1d\u6405\u62cc\u5f53\u8638\u6599\uff0c\u5473\u9053\u66f4\u4e30\u5bcc\u3002 \u8003\u8651\u642d\u914d\u9ed1\u918b\u65f6\u52a0\u5165 1~3 \u6ef4\u9999\u6cb9\uff0c\u6405\u62cc\u5f53\u8638\u6599\u3002 \u8003\u8651\u642d\u914d\u9ed1\u918b\u65f6\u52a0\u5165\u7838\u597d\u7684\u849c\u6ce5\uff0c\u6405\u62cc\u5f53\u8638\u6599\u3002\uff08\u53e3\u8154\u5185\u4f1a\u6b8b\u7559\u849c\u5473\uff0c\u82e5\u996d\u540e\u9700\u8981\u4e0e\u4ed6\u4eba\u9762\u5bf9\u9762\u8c08\u8bdd\u5efa\u8bae\u653e\u5f03\u6216\u6e05\u6d01\u53e3\u8154\uff09 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u901f\u51bb\u6c34\u997a"},{"location":"dishes/semi-finished/%E9%80%9F%E5%86%BB%E6%B0%B4%E9%A5%BA/#_1","text":"\u997a\u5b50\u662f\u4e00\u79cd\u6e90\u81ea\u4e2d\u56fd\u7684\u4e00\u79cd\u4ee5\u9762\u76ae\u5305\u9985\u3001\u5f62\u5982\u534a\u6708\u6216\u5143\u5b9d\u5f62\u7684\u98df\u7269\u3002\u997a\u5b50\u662f\u5728\u519c\u5386\u65b0\u5e74\u548c\u51ac\u81f3\u7b49\u8282\u65e5\u7684\u91cd\u8981\u98df\u54c1\u3002\u901a\u5e38\u7531\u788e\u8089\u548c\u852c\u83dc\u9985\u6599\u5305\u88f9\u6210\u4e00\u7247\u8584\u751f\u9762\u56e2\u540e\u5305\u597d\u5bc6\u5c01\u3002\u800c\u997a\u5b50\u7684\u7f3a\u70b9\u5728\u4e8e\u96be\u4ee5\u5236\u4f5c\u3002\u4e0d\u59a8\u9009\u62e9\u8d2d\u4e70\u901f\u51bb\u6c34\u997a\u6765\u5feb\u901f\u5728\u5bb6\u91cc\u5403\u4e0a\u70ed\u6c14\u817e\u817e\u7684\u997a\u5b50\u3002","title":"\u901f\u51bb\u6c34\u997a\u7684\u505a\u6cd5"},{"location":"dishes/semi-finished/%E9%80%9F%E5%86%BB%E6%B0%B4%E9%A5%BA/#_2","text":"\u672a\u8fc7\u671f\u7684\u4e00\u888b\u901f\u51bb\u6c34\u997a","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/semi-finished/%E9%80%9F%E5%86%BB%E6%B0%B4%E9%A5%BA/#_3","text":"\u6bcf\u4eba\u53ef\u4ee5\u98df\u7528 7\uff5e10 \u4e2a\u6c34\u997a \u4e00\u4e2a\u6c34\u997a\u7ea6\u9700\u8981\u672c\u8eab\u4f53\u79ef\u4e24\u500d\u7684\u6c34\uff08\u997a\u5b50\u5012\u5165\u9505\u5185\u65f6\uff0c\u6c34\u7684\u9ad8\u5ea6\u5e94\u4e00\u81f3\u4e24\u500d\u4e8e\u997a\u5b50\u7684\u9ad8\u5ea6\uff0c\u5373\u997a\u5b50\u9ad8\u5ea6\u4e3a 1\uff0c\u6c34\u9ad8\u5ea6\u5219\u4e3a 1~2\uff09 \u4f7f\u7528\u4e0a\u8ff0\u6761\u4ef6\uff0c\u8ba1\u7b97\u51fa\u8ba1\u5212\u4f7f\u7528\u7684\u539f\u6750\u6599\u6bd4\u4f8b\u3002","title":"\u8ba1\u7b97"},{"location":"dishes/semi-finished/%E9%80%9F%E5%86%BB%E6%B0%B4%E9%A5%BA/#_4","text":"\u4e2d\u706b\uff0c\u5c06\u6c34\u5012\u5165\u9505\u4e2d\uff0c\u9759\u5019\u6c34\u716e\u6cb8\u3002 \u5c06\u997a\u5b50\u5012\u5165\u9505\u4e2d\u3002 \u5012\u5165\u9505\u524d\u53ef\u4ee5\u9002\u5f53\u7528\u6c34\u8fc7\u4e00\u4e0b\u3002 \u5012\u5165\u997a\u5b50\u540e\uff0c\u53ef\u4ee5\u7528\u7092\u83dc\u52fa\u5b50\u6216\u94f2\u5b50\u6405\u6c34\uff0c\u4f46\u8981\u6ce8\u610f\u4e0d\u8981\u94f2\u5230\u997a\u5b50\u4e0a\uff0c\u4ee5\u907f\u514d\u7c98\u9505\u4e0a\u6495\u7834\u76ae\u6216\u4e92\u76f8\u7c98\u8fde\u9020\u6210\u7c98\u8fde\u5904\u5939\u751f\u3002 \u9891\u7387\u4e0d\u9700\u8981\u592a\u9ad8\uff0c\u5e73\u5747\u6bcf 30 \u79d2\u6447 3 \u79d2\uff0c\u997a\u5b50\u6d6e\u8d77\u540e\u4e0d\u9700\u8981\u518d\u505a\u6b64\u6b65\u3002 \u997a\u5b50\u6d6e\u8d77\u53ca\u6c34\u518d\u6b21\u716e\u6cb8\u540e\uff0c\u7528\u7092\u83dc\u52fa\u5b50\u76db\u8d77\u4e00\u4e2a\u997a\u5b50\u89c2\u5bdf\uff0c\u5982\u679c\u9762\u76ae\u6709\u5939\u751f\u53ef\u7528\u7092\u83dc\u52fa\u5b50\u8200\u5165\u4e00\u81f3\u4e24\u52fa\u51c9\u6c34\uff08\u7ea6 100g\uff09\uff0c\u5c06\u6c34\u964d\u6e29\uff0c\u7136\u540e\u7ee7\u7eed\u716e\u81f3\u6cb8\u817e\uff0c\u6b64\u95f4\u91cd\u590d\u6b64\u89c2\u5bdf\u3001\u6405\u62cc\u64cd\u4f5c\uff0c\u6700\u591a\u52a0\u4e24\u6b21\u6c34\u5c31\u80fd\u5168\u719f\u3002 \u6240\u6709\u997a\u5b50\u6d6e\u8d77\u540e\uff08\u4e0b\u997a\u5b50\u540e\u7ea6 8 \u5206\u949f\uff09\u7528\u94f2\u5b50\u6216\u6f0f\u52fa\u628a\u997a\u5b50\u94f2\u5165\u76d8\u6216\u7897\u4e2d\uff0c\u88c5\u76d8\u540e\u5373\u53ef\u98df\u7528\u3002 \u5403\u5b8c\u997a\u5b50\u540e\uff0c\u7b49\u9505\u5185\u6c34\u6e29\u964d\u4f4e\uff0c\u5c06\u6c34\u5012\u6389\u5e76\u7528\u6d17\u6d01\u7cbe\u53ca\u65f6\u5237\u9505\uff0c\u4e0d\u7136\u8fc7\u6bb5\u65f6\u95f4\u9505\u5185\u716e\u8fc7\u7684\u9762\u7c89\u4f1a\u5728\u9505\u58c1\u5f62\u6210\u9ecf\u7cca\u7cca\u7684\u7269\u8d28\u3002","title":"\u64cd\u4f5c"},{"location":"dishes/semi-finished/%E9%80%9F%E5%86%BB%E6%B0%B4%E9%A5%BA/#_5","text":"\u8fd9\u9053\u83dc\u5b58\u5728\u4e00\u4e9b\u8865\u5145\u505a\u6cd5\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\uff1a \u989d\u5916\u6dfb\u52a0\u4e0b\u5217\u6750\u6599\uff1a \u9ed1\u918b 10ml \u59dc \u4e00\u5c0f\u5757 50 \u514b \u9999\u6cb9 2 \u6ef4 \u5927\u849c/\u849c\u6ce5 3 \u74e3/\u4eba \u8003\u8651\u642d\u914d\u9ed1\u918b\u98df\u7528\u3002\u5efa\u8bae\u7528\u91cf\uff1a10-20ml\u3002 \u8003\u8651\u59dc\u5207\u4e1d\uff0c\u5728\u5c0f\u7897\u52a0\u5165 20ml \u7684\u9ed1\u918b\u4e0e\u59dc\u4e1d\u6405\u62cc\u5f53\u8638\u6599\uff0c\u5473\u9053\u66f4\u4e30\u5bcc\u3002 \u8003\u8651\u642d\u914d\u9ed1\u918b\u65f6\u52a0\u5165 1~3 \u6ef4\u9999\u6cb9\uff0c\u6405\u62cc\u5f53\u8638\u6599\u3002 \u8003\u8651\u642d\u914d\u9ed1\u918b\u65f6\u52a0\u5165\u7838\u597d\u7684\u849c\u6ce5\uff0c\u6405\u62cc\u5f53\u8638\u6599\u3002\uff08\u53e3\u8154\u5185\u4f1a\u6b8b\u7559\u849c\u5473\uff0c\u82e5\u996d\u540e\u9700\u8981\u4e0e\u4ed6\u4eba\u9762\u5bf9\u9762\u8c08\u8bdd\u5efa\u8bae\u653e\u5f03\u6216\u6e05\u6d01\u53e3\u8154\uff09 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/semi-finished/%E9%80%9F%E5%86%BB%E9%A6%84%E9%A5%A8/","text":"\u901f\u51bb\u9984\u9968\u7684\u505a\u6cd5 \u9984\u9968\u662f\u4e00\u79cd\u8d77\u6e90\u4e8e\u4e2d\u56fd\u7684\u4e00\u79cd\u6c11\u95f4\u4f20\u7edf\u9762\u98df\uff0c \u997a\u5b50 \u7531\u5176\u5206\u5316\u800c\u51fa\uff0c\u6709\u76ae\u8584\u9985\u5ae9\u3001\u6c64\u6e05\u5473\u9c9c\u7684\u7279\u70b9\u3002 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u672a\u8fc7\u671f\u7684\u4e00\u888b\u901f\u51bb\u9984\u9968\uff08\u81ea\u5e26\u8c03\u5473\u6599\u5305\u66f4\u4f73\uff09 \u7535\u996d\u7172\uff08\u63a8\u8350\u54c1\u724c\u5c0f\u7c73\u667a\u80fd\u7535\u996d\u7172\uff09 \u76d0\uff08\u901f\u51bb\u9984\u9968\u65e0\u8c03\u5473\u6599\u5305\u65f6\uff09 \u9e21\u7cbe\uff08\u901f\u51bb\u9984\u9968\u65e0\u8c03\u5473\u6599\u5305\u65f6\uff09 \u80e1\u6912\u7c89\uff08\u901f\u51bb\u9984\u9968\u65e0\u8c03\u5473\u6599\u5305\u65f6\uff09 \u9999\u6cb9\uff08\u901f\u51bb\u9984\u9968\u65e0\u8c03\u5473\u6599\u5305\u65f6\uff09 \u9999\u83dc 1 \u6839\uff08\u53ef\u9009\uff09 \u6ce8\u610f\uff0c\u4f7f\u7528\u7684\u70f9\u996a\u5de5\u5177\u4e0d\u540c\u901f\u51bb\u9984\u9968\u53ef\u80fd\u6709\u4e0d\u540c\u7684\u505a\u6cd5\uff0c\u8fd9\u91cc\u4ec5\u4ecb\u7ecd\u4f7f\u7528\u300c\u7535\u996d\u7172\u300d\u7684\u505a\u6cd5\u3002 \u8ba1\u7b97 \u6bcf\u4eba\u4e00\u987f\u53ef\u4ee5\u98df\u7528 12\uff5e20 \u4e2a\u9984\u9968 \u5f53\u6240\u6709\u9984\u9968\u653e\u5165\u7535\u996d\u7172\u4e2d\u65f6\uff0c\u80fd\u521a\u597d\u6ca1\u8fc7\u6240\u6709\u9984\u9968\u7684\u6c34\u4e58\u4ee5 2~3 \u500d\u7684\u6c34\u91cf\uff08\u4e00\u4eba\u98df\u7528\u7684\u9984\u9968\u7ea6\u9700\u8981 600ml \u6c34\u91cf\uff09 \u4f7f\u7528\u4e0a\u8ff0\u6761\u4ef6\uff0c\u6309\u98df\u7528\u4eba\u6570\u8ba1\u7b97\u6750\u6599\u7528\u91cf\u3002 \u64cd\u4f5c \u70e7\u5f00\u6c34 \u5c06\u6c34\u5012\u5165\u7535\u996d\u7172\u4e2d\uff0c\u6309\u7096\u6216\u716e\u7684\u6a21\u5f0f\u8fd0\u884c 35 \u5206\u949f\u5de6\u53f3\uff0c\u6b64\u65f6\u63ed\u5f00\u7535\u996d\u7172\u5e94\u770b\u5230\u6c34\u4e3a\u6cb8\u817e\u72b6\u6001\u3002 \u4e0b\u9984\u9968 \u5c06\u901f\u51bb\u9984\u9968\u5c0f\u5fc3\u653e\u5165\u6c34\u4e2d\uff0c\u6ce8\u610f\u4e0d\u8981\u70eb\u4f24\u3002 \u653e\u5165\u7535\u996d\u7172\u524d\u53ef\u4ee5\u9002\u5f53\u7528\u6c34\u8fc7\u4e00\u4e0b\u3002 \u5982\u679c\u9984\u9968\u6709\u8c03\u6599\u5305\uff0c\u6b64\u65f6\u53ef\u4e00\u5e76\u52a0\u5165\u6c34\u4e2d\u3002 \u716e\u9984\u9968 \u76d6\u4e0a\u7535\u996d\u7172\uff0c\u6309\u540c\u6837\u7096\u6216\u716e\u7684\u6a21\u5f0f\u8fd0\u884c 20 \u5206\u949f\u5de6\u53f3\u3002 \u76db\u9984\u9968 \u5c06\u6240\u6709\u9984\u9968\u8fde\u540c\u80fd\u6ca1\u8fc7\u6240\u6709\u9984\u9968\u7684\u6c34\u4e00\u540c\u76db\u5165\u7897\u4e2d\u3002 \u5982\u679c\u6b64\u524d\u6ca1\u6709\u52a0\u5165\u8c03\u6599\u5305\uff0c\u6b64\u65f6\u53ef\u6309\u81ea\u8eab\u53e3\u5473\u8f7b\u91cd\u52a0\u5165\u76d0\u3001\u9e21\u7cbe\u3001\u80e1\u6912\u7c89\u3001\u9999\u6cb9\u8c03\u5473\u3002 \u4e5f\u53ef\u6492\u4e0a 5~8 \u7247\u9999\u83dc\u53f6\u4f50\u5473\uff08\u4ec5\u9002\u7528\u4e8e\u5bf9\u9999\u83dc\u5473\u9053\u4e0d\u654f\u611f\u7684\u4eba\uff09\u3002 \u9644\u52a0\u5185\u5bb9 \u51fa\u9505\u540e\u4e5f\u53ef\u4ee5\u52a0\u5165\u6c34\u716e\u8377\u5305\u86cb\uff08 \u592a\u9633\u86cb \uff09\u4e00\u8d77\u98df\u7528\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u901f\u51bb\u9984\u9968"},{"location":"dishes/semi-finished/%E9%80%9F%E5%86%BB%E9%A6%84%E9%A5%A8/#_1","text":"\u9984\u9968\u662f\u4e00\u79cd\u8d77\u6e90\u4e8e\u4e2d\u56fd\u7684\u4e00\u79cd\u6c11\u95f4\u4f20\u7edf\u9762\u98df\uff0c \u997a\u5b50 \u7531\u5176\u5206\u5316\u800c\u51fa\uff0c\u6709\u76ae\u8584\u9985\u5ae9\u3001\u6c64\u6e05\u5473\u9c9c\u7684\u7279\u70b9\u3002","title":"\u901f\u51bb\u9984\u9968\u7684\u505a\u6cd5"},{"location":"dishes/semi-finished/%E9%80%9F%E5%86%BB%E9%A6%84%E9%A5%A8/#_2","text":"\u672a\u8fc7\u671f\u7684\u4e00\u888b\u901f\u51bb\u9984\u9968\uff08\u81ea\u5e26\u8c03\u5473\u6599\u5305\u66f4\u4f73\uff09 \u7535\u996d\u7172\uff08\u63a8\u8350\u54c1\u724c\u5c0f\u7c73\u667a\u80fd\u7535\u996d\u7172\uff09 \u76d0\uff08\u901f\u51bb\u9984\u9968\u65e0\u8c03\u5473\u6599\u5305\u65f6\uff09 \u9e21\u7cbe\uff08\u901f\u51bb\u9984\u9968\u65e0\u8c03\u5473\u6599\u5305\u65f6\uff09 \u80e1\u6912\u7c89\uff08\u901f\u51bb\u9984\u9968\u65e0\u8c03\u5473\u6599\u5305\u65f6\uff09 \u9999\u6cb9\uff08\u901f\u51bb\u9984\u9968\u65e0\u8c03\u5473\u6599\u5305\u65f6\uff09 \u9999\u83dc 1 \u6839\uff08\u53ef\u9009\uff09 \u6ce8\u610f\uff0c\u4f7f\u7528\u7684\u70f9\u996a\u5de5\u5177\u4e0d\u540c\u901f\u51bb\u9984\u9968\u53ef\u80fd\u6709\u4e0d\u540c\u7684\u505a\u6cd5\uff0c\u8fd9\u91cc\u4ec5\u4ecb\u7ecd\u4f7f\u7528\u300c\u7535\u996d\u7172\u300d\u7684\u505a\u6cd5\u3002","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/semi-finished/%E9%80%9F%E5%86%BB%E9%A6%84%E9%A5%A8/#_3","text":"\u6bcf\u4eba\u4e00\u987f\u53ef\u4ee5\u98df\u7528 12\uff5e20 \u4e2a\u9984\u9968 \u5f53\u6240\u6709\u9984\u9968\u653e\u5165\u7535\u996d\u7172\u4e2d\u65f6\uff0c\u80fd\u521a\u597d\u6ca1\u8fc7\u6240\u6709\u9984\u9968\u7684\u6c34\u4e58\u4ee5 2~3 \u500d\u7684\u6c34\u91cf\uff08\u4e00\u4eba\u98df\u7528\u7684\u9984\u9968\u7ea6\u9700\u8981 600ml \u6c34\u91cf\uff09 \u4f7f\u7528\u4e0a\u8ff0\u6761\u4ef6\uff0c\u6309\u98df\u7528\u4eba\u6570\u8ba1\u7b97\u6750\u6599\u7528\u91cf\u3002","title":"\u8ba1\u7b97"},{"location":"dishes/semi-finished/%E9%80%9F%E5%86%BB%E9%A6%84%E9%A5%A8/#_4","text":"","title":"\u64cd\u4f5c"},{"location":"dishes/semi-finished/%E9%80%9F%E5%86%BB%E9%A6%84%E9%A5%A8/#_5","text":"\u5c06\u6c34\u5012\u5165\u7535\u996d\u7172\u4e2d\uff0c\u6309\u7096\u6216\u716e\u7684\u6a21\u5f0f\u8fd0\u884c 35 \u5206\u949f\u5de6\u53f3\uff0c\u6b64\u65f6\u63ed\u5f00\u7535\u996d\u7172\u5e94\u770b\u5230\u6c34\u4e3a\u6cb8\u817e\u72b6\u6001\u3002","title":"\u70e7\u5f00\u6c34"},{"location":"dishes/semi-finished/%E9%80%9F%E5%86%BB%E9%A6%84%E9%A5%A8/#_6","text":"\u5c06\u901f\u51bb\u9984\u9968\u5c0f\u5fc3\u653e\u5165\u6c34\u4e2d\uff0c\u6ce8\u610f\u4e0d\u8981\u70eb\u4f24\u3002 \u653e\u5165\u7535\u996d\u7172\u524d\u53ef\u4ee5\u9002\u5f53\u7528\u6c34\u8fc7\u4e00\u4e0b\u3002 \u5982\u679c\u9984\u9968\u6709\u8c03\u6599\u5305\uff0c\u6b64\u65f6\u53ef\u4e00\u5e76\u52a0\u5165\u6c34\u4e2d\u3002","title":"\u4e0b\u9984\u9968"},{"location":"dishes/semi-finished/%E9%80%9F%E5%86%BB%E9%A6%84%E9%A5%A8/#_7","text":"\u76d6\u4e0a\u7535\u996d\u7172\uff0c\u6309\u540c\u6837\u7096\u6216\u716e\u7684\u6a21\u5f0f\u8fd0\u884c 20 \u5206\u949f\u5de6\u53f3\u3002","title":"\u716e\u9984\u9968"},{"location":"dishes/semi-finished/%E9%80%9F%E5%86%BB%E9%A6%84%E9%A5%A8/#_8","text":"\u5c06\u6240\u6709\u9984\u9968\u8fde\u540c\u80fd\u6ca1\u8fc7\u6240\u6709\u9984\u9968\u7684\u6c34\u4e00\u540c\u76db\u5165\u7897\u4e2d\u3002 \u5982\u679c\u6b64\u524d\u6ca1\u6709\u52a0\u5165\u8c03\u6599\u5305\uff0c\u6b64\u65f6\u53ef\u6309\u81ea\u8eab\u53e3\u5473\u8f7b\u91cd\u52a0\u5165\u76d0\u3001\u9e21\u7cbe\u3001\u80e1\u6912\u7c89\u3001\u9999\u6cb9\u8c03\u5473\u3002 \u4e5f\u53ef\u6492\u4e0a 5~8 \u7247\u9999\u83dc\u53f6\u4f50\u5473\uff08\u4ec5\u9002\u7528\u4e8e\u5bf9\u9999\u83dc\u5473\u9053\u4e0d\u654f\u611f\u7684\u4eba\uff09\u3002","title":"\u76db\u9984\u9968"},{"location":"dishes/semi-finished/%E9%80%9F%E5%86%BB%E9%A6%84%E9%A5%A8/#_9","text":"\u51fa\u9505\u540e\u4e5f\u53ef\u4ee5\u52a0\u5165\u6c34\u716e\u8377\u5305\u86cb\uff08 \u592a\u9633\u86cb \uff09\u4e00\u8d77\u98df\u7528\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/semi-finished/%E6%87%92%E4%BA%BA%E8%9B%8B%E6%8C%9E/%E6%87%92%E4%BA%BA%E8%9B%8B%E6%8C%9E/","text":"\u61d2\u4eba\u86cb\u631e\u7684\u505a\u6cd5 \u86cb\u631e\u662f\u4e00\u9053\u5e38\u89c1\u7684\u53ef\u53e3\u751c\u54c1\uff0c\u901a\u5e38\u800c\u8a00\u5236\u4f5c\u86cb\u631e\u662f\u9700\u8981\u8c03\u548c\u86cb\u631e\u6db2\u548c\u5236\u4f5c\u86cb\u631e\u76ae\u7684\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u6bd4\u8f83\u590d\u6742\u548c\u8017\u65f6\uff0c\u4f46\u662f\u7f51\u8d2d\u534a\u6210\u54c1\u6070\u6070\u89e3\u51b3\u89e3\u51b3\u4ee5\u4e0a\u7684\u96be\u9898\uff0c\u521d\u5b66\u8005\u53ea\u9700 40 \u5206\u5de6\u53f3\u5c31\u53ef\u4ee5\u5b8c\u6210\u3002\u4ece\u4eca\u5f80\u540e\u53ea\u8981\u5bb6\u91cc\u6709\u70e4\u7bb1\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5316\u8eab\u70d8\u7119\u8fbe\u4eba\uff0c\u5e2e\u5bb6\u4eba\u70e4\u86cb\u631e\uff01 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u9700\u8981\u70e4\u7bb1 1 \u4e2a\uff08\u6709\u4e0a\u4e0b\u706b\u529f\u80fd\u7684\u6700\u4f73\uff0c\u4e5f\u53ef\u4ee5\u6ca1\u6709\uff09 \u9694\u70ed\u624b\u5957 1 \u53cc \u7f51\u8d2d\u86cb\u631e\u6db2 1 \u76d2\uff0c\u86cb\u631e\u76ae 1 \u76d2\uff08\u9644\u8fd1\u7684\u5927\u8d85\u5e02\u4e5f\u53ef\u4ee5\uff0c\u6bd4\u5982\u5bb6\u4e50\u798f\u3001\u6c83\u5c14\u739b\u7b49\u7b49\uff09 \u8ba1\u7b97 \u6bcf\u4efd\uff1a \u86cb\u631e\u76ae 1 \u4e2a \u86cb\u631e\u6db2\u7ea6 10ml\uff0c\u5230\u8fbe\u631e\u76ae\u7684 4/5 \u5de6\u53f3\u6700\u4f73 \u64cd\u4f5c \u70e4\u7bb1 200 \u5ea6\uff0c\u9884\u70ed 10 \u5206\u949f \u5728\u70e4\u76d8\u4e0a\u653e\u4e0a\u86cb\u631e\u76ae\uff0c\u86cb\u631e\u76ae\u4e2d\u5012\u5165\u86cb\u631e\u6db2\u7ea6 10ml\uff0c\u5177\u4f53\u5206\u91cf\u9700\u8981\u770b\u86cb\u631e\u76ae\u5927\u5c0f\uff0c\u901a\u5e38\u5012\u5165 4/5 \u5373\u53ef \u5c06\u70e4\u76d8\u653e\u5165\u70e4\u7bb1\u5185\uff0c\u4e0a\u4e0b\u706b 190 \u5ea6\uff0c\u70e4 20 - 35 \u5206\u3002\u5982\u679c\u60f3\u5feb\u901f\u70e4\u51fa\u86cb\u631e\u6db2\u4e0a\u7684\u7126\u8910\u6591\u70b9\uff0c\u9700\u8981\u4e0a\u706b\u66f4\u9ad8\u4e00\u4e9b\uff0c\u901a\u5e38\u662f 200 - 210 \u5ea6 \u86cb\u631e\u6db2\u70e4\u51fa\u7126\u8910\u6591\u70b9\uff0c\u86cb\u631e\u76ae\u5b8c\u5168\u84ec\u677e\u5192\u6cb9\u5373\u53ef \u9644\u52a0\u5185\u5bb9 \u64cd\u4f5c\u65f6\uff0c\u53ef\u4ee5\u6839\u636e\u7126\u8910\u6591\u5927\u5c0f\u9002\u5f53\u8c03\u6574\u65f6\u95f4\uff0c\u5982\u679c\u9700\u8981 \u53ef\u4ee5\u5728\u86cb\u631e\u4e2d\u52a0 10g \u5de6\u53f3\u788e\u829d\u58eb\uff0c\u5c31\u662f\u4e00\u9053\u829d\u58eb\u86cb\u631e\u5566~ \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u61d2\u4eba\u86cb\u631e"},{"location":"dishes/semi-finished/%E6%87%92%E4%BA%BA%E8%9B%8B%E6%8C%9E/%E6%87%92%E4%BA%BA%E8%9B%8B%E6%8C%9E/#_1","text":"\u86cb\u631e\u662f\u4e00\u9053\u5e38\u89c1\u7684\u53ef\u53e3\u751c\u54c1\uff0c\u901a\u5e38\u800c\u8a00\u5236\u4f5c\u86cb\u631e\u662f\u9700\u8981\u8c03\u548c\u86cb\u631e\u6db2\u548c\u5236\u4f5c\u86cb\u631e\u76ae\u7684\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u6bd4\u8f83\u590d\u6742\u548c\u8017\u65f6\uff0c\u4f46\u662f\u7f51\u8d2d\u534a\u6210\u54c1\u6070\u6070\u89e3\u51b3\u89e3\u51b3\u4ee5\u4e0a\u7684\u96be\u9898\uff0c\u521d\u5b66\u8005\u53ea\u9700 40 \u5206\u5de6\u53f3\u5c31\u53ef\u4ee5\u5b8c\u6210\u3002\u4ece\u4eca\u5f80\u540e\u53ea\u8981\u5bb6\u91cc\u6709\u70e4\u7bb1\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5316\u8eab\u70d8\u7119\u8fbe\u4eba\uff0c\u5e2e\u5bb6\u4eba\u70e4\u86cb\u631e\uff01","title":"\u61d2\u4eba\u86cb\u631e\u7684\u505a\u6cd5"},{"location":"dishes/semi-finished/%E6%87%92%E4%BA%BA%E8%9B%8B%E6%8C%9E/%E6%87%92%E4%BA%BA%E8%9B%8B%E6%8C%9E/#_2","text":"\u9700\u8981\u70e4\u7bb1 1 \u4e2a\uff08\u6709\u4e0a\u4e0b\u706b\u529f\u80fd\u7684\u6700\u4f73\uff0c\u4e5f\u53ef\u4ee5\u6ca1\u6709\uff09 \u9694\u70ed\u624b\u5957 1 \u53cc \u7f51\u8d2d\u86cb\u631e\u6db2 1 \u76d2\uff0c\u86cb\u631e\u76ae 1 \u76d2\uff08\u9644\u8fd1\u7684\u5927\u8d85\u5e02\u4e5f\u53ef\u4ee5\uff0c\u6bd4\u5982\u5bb6\u4e50\u798f\u3001\u6c83\u5c14\u739b\u7b49\u7b49\uff09","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/semi-finished/%E6%87%92%E4%BA%BA%E8%9B%8B%E6%8C%9E/%E6%87%92%E4%BA%BA%E8%9B%8B%E6%8C%9E/#_3","text":"\u6bcf\u4efd\uff1a \u86cb\u631e\u76ae 1 \u4e2a \u86cb\u631e\u6db2\u7ea6 10ml\uff0c\u5230\u8fbe\u631e\u76ae\u7684 4/5 \u5de6\u53f3\u6700\u4f73","title":"\u8ba1\u7b97"},{"location":"dishes/semi-finished/%E6%87%92%E4%BA%BA%E8%9B%8B%E6%8C%9E/%E6%87%92%E4%BA%BA%E8%9B%8B%E6%8C%9E/#_4","text":"\u70e4\u7bb1 200 \u5ea6\uff0c\u9884\u70ed 10 \u5206\u949f \u5728\u70e4\u76d8\u4e0a\u653e\u4e0a\u86cb\u631e\u76ae\uff0c\u86cb\u631e\u76ae\u4e2d\u5012\u5165\u86cb\u631e\u6db2\u7ea6 10ml\uff0c\u5177\u4f53\u5206\u91cf\u9700\u8981\u770b\u86cb\u631e\u76ae\u5927\u5c0f\uff0c\u901a\u5e38\u5012\u5165 4/5 \u5373\u53ef \u5c06\u70e4\u76d8\u653e\u5165\u70e4\u7bb1\u5185\uff0c\u4e0a\u4e0b\u706b 190 \u5ea6\uff0c\u70e4 20 - 35 \u5206\u3002\u5982\u679c\u60f3\u5feb\u901f\u70e4\u51fa\u86cb\u631e\u6db2\u4e0a\u7684\u7126\u8910\u6591\u70b9\uff0c\u9700\u8981\u4e0a\u706b\u66f4\u9ad8\u4e00\u4e9b\uff0c\u901a\u5e38\u662f 200 - 210 \u5ea6 \u86cb\u631e\u6db2\u70e4\u51fa\u7126\u8910\u6591\u70b9\uff0c\u86cb\u631e\u76ae\u5b8c\u5168\u84ec\u677e\u5192\u6cb9\u5373\u53ef","title":"\u64cd\u4f5c"},{"location":"dishes/semi-finished/%E6%87%92%E4%BA%BA%E8%9B%8B%E6%8C%9E/%E6%87%92%E4%BA%BA%E8%9B%8B%E6%8C%9E/#_5","text":"\u64cd\u4f5c\u65f6\uff0c\u53ef\u4ee5\u6839\u636e\u7126\u8910\u6591\u5927\u5c0f\u9002\u5f53\u8c03\u6574\u65f6\u95f4\uff0c\u5982\u679c\u9700\u8981 \u53ef\u4ee5\u5728\u86cb\u631e\u4e2d\u52a0 10g \u5de6\u53f3\u788e\u829d\u58eb\uff0c\u5c31\u662f\u4e00\u9053\u829d\u58eb\u86cb\u631e\u5566~ \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/semi-finished/%E9%80%9F%E5%86%BB%E6%B1%A4%E5%9C%86/%E9%80%9F%E5%86%BB%E6%B1%A4%E5%9C%86/","text":"\u901f\u51bb\u6c64\u5706\u7684\u505a\u6cd5 \u901f\u51bb\u6c64\u5706\u662f\u4e00\u9053\u7b80\u5355\u6613\u505a\u7684\u83dc\u3002\u4e00\u822c\u521d\u5b66\u8005\u53ea\u9700\u8981 6 \u5206\u949f\u5373\u53ef\u5b8c\u6210\u3002 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u901f\u51bb\u6c64\u5706 \u5fae\u6ce2\u7089 \u8ba1\u7b97 \u6bcf\u4efd\uff1a \u901f\u51bb\u6c64\u5706\uff1a11 \u4e2a\u3002\u6570\u91cf\u53d6\u51b3\u4e8e\u7897\u7684\u5927\u5c0f\u3002\u4fdd\u8bc1\u653e\u5165\u7684\u6c64\u5706\u6700\u9ad8\u4e0d\u8d85\u8fc7\u7897\u9ad8\u5ea6 - 5mm\u3002 \u64cd\u4f5c \u53d6\u51fa\u901f\u51bb\u6c64\u5706\uff0c\u653e\u5165\u7897\u4e2d\u3002 \u5012\u5165\u5f00\u6c34\uff0c\u76f4\u81f3\u6d78\u6ca1\u6c64\u5706\u3002 \u5fae\u6ce2\u7089\u9ad8\u706b 4 \u5206\u949f\u3002 \u5047\u5982\u6c64\u5706\u5747\u5df2\u5438\u6c34\u81a8\u80c0\uff0c\u5219\u5df2\u719f\u3002 \u5982\u679c\u6ca1\u719f\uff0c\u518d\u52a0\u70ed 1 \u5206\u949f\u3002 \u9644\u52a0\u5185\u5bb9 \u6ce8\u610f\u5148\u52a0\u6c64\u5706\u518d\u52a0\u70ed\u6c34\uff0c\u4e0d\u8981\u98a0\u5012\uff0c\u4e0d\u7136\u6c64\u5706\u5012\u5165\u70ed\u6c34\u53ef\u80fd\u4f1a\u6e85\u51fa\u70eb\u4f24\u3002\u4ee5\u53ca\u65e0\u6cd5\u63a7\u5236\u6c34\u9762\u9ad8\u5ea6\u53ef\u80fd\u6ea2\u51fa\u3002 \u5047\u5982\u5fae\u6ce2\u7089\u91cc\u7897\u592a\u70eb\u65e0\u6cd5\u53d6\u51fa\uff0c\u53ef\u4ee5\u7528\u6bdb\u5dfe\uff0c\u6216\u8005\u67d0\u4e9b\u5fae\u6ce2\u7089\u53ef\u4ee5\u8fde\u6258\u76d8\u4e00\u8d77\u53d6\u51fa\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u901f\u51bb\u6c64\u5706"},{"location":"dishes/semi-finished/%E9%80%9F%E5%86%BB%E6%B1%A4%E5%9C%86/%E9%80%9F%E5%86%BB%E6%B1%A4%E5%9C%86/#_1","text":"\u901f\u51bb\u6c64\u5706\u662f\u4e00\u9053\u7b80\u5355\u6613\u505a\u7684\u83dc\u3002\u4e00\u822c\u521d\u5b66\u8005\u53ea\u9700\u8981 6 \u5206\u949f\u5373\u53ef\u5b8c\u6210\u3002","title":"\u901f\u51bb\u6c64\u5706\u7684\u505a\u6cd5"},{"location":"dishes/semi-finished/%E9%80%9F%E5%86%BB%E6%B1%A4%E5%9C%86/%E9%80%9F%E5%86%BB%E6%B1%A4%E5%9C%86/#_2","text":"\u901f\u51bb\u6c64\u5706 \u5fae\u6ce2\u7089","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/semi-finished/%E9%80%9F%E5%86%BB%E6%B1%A4%E5%9C%86/%E9%80%9F%E5%86%BB%E6%B1%A4%E5%9C%86/#_3","text":"\u6bcf\u4efd\uff1a \u901f\u51bb\u6c64\u5706\uff1a11 \u4e2a\u3002\u6570\u91cf\u53d6\u51b3\u4e8e\u7897\u7684\u5927\u5c0f\u3002\u4fdd\u8bc1\u653e\u5165\u7684\u6c64\u5706\u6700\u9ad8\u4e0d\u8d85\u8fc7\u7897\u9ad8\u5ea6 - 5mm\u3002","title":"\u8ba1\u7b97"},{"location":"dishes/semi-finished/%E9%80%9F%E5%86%BB%E6%B1%A4%E5%9C%86/%E9%80%9F%E5%86%BB%E6%B1%A4%E5%9C%86/#_4","text":"\u53d6\u51fa\u901f\u51bb\u6c64\u5706\uff0c\u653e\u5165\u7897\u4e2d\u3002 \u5012\u5165\u5f00\u6c34\uff0c\u76f4\u81f3\u6d78\u6ca1\u6c64\u5706\u3002 \u5fae\u6ce2\u7089\u9ad8\u706b 4 \u5206\u949f\u3002 \u5047\u5982\u6c64\u5706\u5747\u5df2\u5438\u6c34\u81a8\u80c0\uff0c\u5219\u5df2\u719f\u3002 \u5982\u679c\u6ca1\u719f\uff0c\u518d\u52a0\u70ed 1 \u5206\u949f\u3002","title":"\u64cd\u4f5c"},{"location":"dishes/semi-finished/%E9%80%9F%E5%86%BB%E6%B1%A4%E5%9C%86/%E9%80%9F%E5%86%BB%E6%B1%A4%E5%9C%86/#_5","text":"\u6ce8\u610f\u5148\u52a0\u6c64\u5706\u518d\u52a0\u70ed\u6c34\uff0c\u4e0d\u8981\u98a0\u5012\uff0c\u4e0d\u7136\u6c64\u5706\u5012\u5165\u70ed\u6c34\u53ef\u80fd\u4f1a\u6e85\u51fa\u70eb\u4f24\u3002\u4ee5\u53ca\u65e0\u6cd5\u63a7\u5236\u6c34\u9762\u9ad8\u5ea6\u53ef\u80fd\u6ea2\u51fa\u3002 \u5047\u5982\u5fae\u6ce2\u7089\u91cc\u7897\u592a\u70eb\u65e0\u6cd5\u53d6\u51fa\uff0c\u53ef\u4ee5\u7528\u6bdb\u5dfe\uff0c\u6216\u8005\u67d0\u4e9b\u5fae\u6ce2\u7089\u53ef\u4ee5\u8fde\u6258\u76d8\u4e00\u8d77\u53d6\u51fa\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/soup/%E5%B0%8F%E7%B1%B3%E7%B2%A5/","text":"\u5c0f\u7c73\u7ca5\u7684\u505a\u6cd5 \u5c0f\u7c73\u542b\u6709\u591a\u79cd\u7ef4\u751f\u7d20\u3001\u6c28\u57fa\u9178\u3001\u8102\u80aa\u548c\u78b3\u6c34\u5316\u5408\u7269\uff0c\u8425\u517b\u4ef7\u503c\u8f83\u9ad8\uff0c\u6bcf 100 \u514b\u5c0f\u7c73\u542b\u86cb\u767d\u8d28 9.7 \u514b\u3001\u8102\u80aa 3.5 \u514b\uff0c\u90fd\u4e0d\u4f4e\u4e8e\u7a3b\u3001\u9ea6\u3002 \u4e00\u822c\u7cae\u98df\u4e2d\u4e0d\u542b\u6709\u7684\u80e1\u841d\u535c\u7d20\uff0c\u800c\u5c0f\u7c73\u6bcf 100 \u514b\u542b\u91cf 0.12 \u6beb\u514b\uff0c\u7ef4\u751f\u7d20 B1 \u7684\u542b\u91cf\u4f4d\u5c45\u6240\u6709\u7cae\u98df\u4e4b\u9996\u3002 \u5c0f\u7c73\u542b\u7cd6\u4e5f\u5f88\u9ad8\uff0c\u6bcf 100 \u514b\u542b\u7cd6 72.8 \u514b\uff0c\u4ea7\u70ed\u91cf\u6bd4\u5927\u7c73\u9ad8\u8bb8\u591a\u3002\u53e6\u5916\uff0c\u5c0f\u7c73\u4e5f\u5bcc\u542b\u7ef4\u751f\u7d20 B1,B2 \u7b49 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u5c0f\u7c73 \u6c34\uff08\u5c71\u6cc9\u6c34\u6700\u4f73\uff09 \u8ba1\u7b97 \u5c0f\u7c73 100 \u514b \u6c34\uff08\u5c71\u6cc9\u6c34\u6700\u4f73\uff09 2000 \u514b \u4f7f\u7528\u4e0a\u8ff0\u6761\u4ef6\uff0c\u8ba1\u7b97\u51fa\u8ba1\u5212\u4f7f\u7528\u7684\u539f\u6750\u6599\u6bd4\u4f8b\u3002 \u64cd\u4f5c \u5c0f\u7c73 100 \u514b\uff0c\u653e\u5165\u7897\u4e2d\uff0c\u7528\u6c34\u8f7b\u6dd8\u4e00\u904d\uff08\u7528\u624b\u6405\u62cc\u4e00\u4e0b\uff0c\u5c06\u6c34\u5012\u6389\uff0c\u53ea\u662f\u53bb\u6389\u5916\u9762\u7684\u6d6e\u7070\uff0c\u4e0d\u53ef\u6413\u6d17\uff01\uff01\uff01\uff09 \u6c34\u70e7\u5f00\uff0c\u52a1\u5fc5\u70e7\u5f00\uff01\uff01\uff01 \u6c34\u70e7\u5f00\u6cb8\u817e\u65f6\uff0c\u5c06\u5c0f\u7c73\u5012\u5165\u9505\u5185\u3002\uff08\u5f88\u5bb9\u6613\u88ab\u5ffd\u89c6\u7684\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u73af\u8282\uff09 \u7528\u52fa\u5b50\u6405\u62cc\uff08\u8ba9\u5c0f\u7c73\u4e0d\u4f1a\u7c98\u8fde\u9505\u5e95\uff09,\u7ee7\u7eed\u7528\u5927\u706b\u71ac 6-10 \u5206\u949f\uff0c\u6ce8\u610f\u7528\u52fa\u5b50\u9002\u5f53\u6405\u62cc\u51e0\u6b21\u3002 \u6539\u4e2d\u706b\u3001\u6587\u706b\u71ac 15-20 \u5206\u949f\uff0c\u9505\u76d6\u8981\u9519\u5f00\u4e00\u6761\u7f1d\uff0c\u5343\u4e07\u4e0d\u80fd\u8ba9\u5c0f\u7c73\u6cb9\u6e9c\u6389\u54df\uff0c\u4e2d\u95f4\u53ef\u4ee5\u7528\u52fa\u5b50\u6405\u62cc\u51e0\u6b21\uff0c\u4e0d\u8981\u7cca\u9505\u5e95 \u9644\u52a0\u5185\u5bb9 \u8fd9\u662f\u666e\u901a\u9505\u71ac\u5236\uff08\u53ea\u9700 30-35 \u5206\u949f\u5373\u53ef\u51fa\u9505\uff09,\u5473\u9053\u6700\u4f73\u3002\u9ad8\u538b\u9505\u548c\u7535\u996d\u9505\u7701\u4e8b\uff0c\u4e0d\u8fc7\u6548\u679c\u4e0b\u964d\uff0c\u6c34\u91cf\u8981\u9002\u5f53\u51cf\u5c11\uff0c\u4e00\u822c 100 \u514b\u5c0f\u7c73+1800 \u514b\u6c34 \u5c0f\u7c73\u53ea\u9700\u7528\u6c34\u53bb\u9664\u6d6e\u7070\uff0c\u5343\u4e07\u4e0d\u53ef\u8fc7\u5206\u6dd8\uff0c\u4f1a\u635f\u5931\u6389\u5c0f\u7c73\u6cb9\u7684 \u5343\u4e07\u8bb0\u4f4f\u5c0f\u7c73\u9700\u8981\u5728\u6c34\u5f00\u7684\u65f6\u5019\u4e0b\u9505 \u4e0d\u559c\u6b22\u653e\u78b1\uff0c\u66f4\u559c\u6b22\u539f\u6c41\u539f\u5473\u7684\u5c0f\u7c73\u9999 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u5c0f\u7c73\u7ca5"},{"location":"dishes/soup/%E5%B0%8F%E7%B1%B3%E7%B2%A5/#_1","text":"\u5c0f\u7c73\u542b\u6709\u591a\u79cd\u7ef4\u751f\u7d20\u3001\u6c28\u57fa\u9178\u3001\u8102\u80aa\u548c\u78b3\u6c34\u5316\u5408\u7269\uff0c\u8425\u517b\u4ef7\u503c\u8f83\u9ad8\uff0c\u6bcf 100 \u514b\u5c0f\u7c73\u542b\u86cb\u767d\u8d28 9.7 \u514b\u3001\u8102\u80aa 3.5 \u514b\uff0c\u90fd\u4e0d\u4f4e\u4e8e\u7a3b\u3001\u9ea6\u3002 \u4e00\u822c\u7cae\u98df\u4e2d\u4e0d\u542b\u6709\u7684\u80e1\u841d\u535c\u7d20\uff0c\u800c\u5c0f\u7c73\u6bcf 100 \u514b\u542b\u91cf 0.12 \u6beb\u514b\uff0c\u7ef4\u751f\u7d20 B1 \u7684\u542b\u91cf\u4f4d\u5c45\u6240\u6709\u7cae\u98df\u4e4b\u9996\u3002 \u5c0f\u7c73\u542b\u7cd6\u4e5f\u5f88\u9ad8\uff0c\u6bcf 100 \u514b\u542b\u7cd6 72.8 \u514b\uff0c\u4ea7\u70ed\u91cf\u6bd4\u5927\u7c73\u9ad8\u8bb8\u591a\u3002\u53e6\u5916\uff0c\u5c0f\u7c73\u4e5f\u5bcc\u542b\u7ef4\u751f\u7d20 B1,B2 \u7b49","title":"\u5c0f\u7c73\u7ca5\u7684\u505a\u6cd5"},{"location":"dishes/soup/%E5%B0%8F%E7%B1%B3%E7%B2%A5/#_2","text":"\u5c0f\u7c73 \u6c34\uff08\u5c71\u6cc9\u6c34\u6700\u4f73\uff09","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/soup/%E5%B0%8F%E7%B1%B3%E7%B2%A5/#_3","text":"\u5c0f\u7c73 100 \u514b \u6c34\uff08\u5c71\u6cc9\u6c34\u6700\u4f73\uff09 2000 \u514b \u4f7f\u7528\u4e0a\u8ff0\u6761\u4ef6\uff0c\u8ba1\u7b97\u51fa\u8ba1\u5212\u4f7f\u7528\u7684\u539f\u6750\u6599\u6bd4\u4f8b\u3002","title":"\u8ba1\u7b97"},{"location":"dishes/soup/%E5%B0%8F%E7%B1%B3%E7%B2%A5/#_4","text":"\u5c0f\u7c73 100 \u514b\uff0c\u653e\u5165\u7897\u4e2d\uff0c\u7528\u6c34\u8f7b\u6dd8\u4e00\u904d\uff08\u7528\u624b\u6405\u62cc\u4e00\u4e0b\uff0c\u5c06\u6c34\u5012\u6389\uff0c\u53ea\u662f\u53bb\u6389\u5916\u9762\u7684\u6d6e\u7070\uff0c\u4e0d\u53ef\u6413\u6d17\uff01\uff01\uff01\uff09 \u6c34\u70e7\u5f00\uff0c\u52a1\u5fc5\u70e7\u5f00\uff01\uff01\uff01 \u6c34\u70e7\u5f00\u6cb8\u817e\u65f6\uff0c\u5c06\u5c0f\u7c73\u5012\u5165\u9505\u5185\u3002\uff08\u5f88\u5bb9\u6613\u88ab\u5ffd\u89c6\u7684\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u73af\u8282\uff09 \u7528\u52fa\u5b50\u6405\u62cc\uff08\u8ba9\u5c0f\u7c73\u4e0d\u4f1a\u7c98\u8fde\u9505\u5e95\uff09,\u7ee7\u7eed\u7528\u5927\u706b\u71ac 6-10 \u5206\u949f\uff0c\u6ce8\u610f\u7528\u52fa\u5b50\u9002\u5f53\u6405\u62cc\u51e0\u6b21\u3002 \u6539\u4e2d\u706b\u3001\u6587\u706b\u71ac 15-20 \u5206\u949f\uff0c\u9505\u76d6\u8981\u9519\u5f00\u4e00\u6761\u7f1d\uff0c\u5343\u4e07\u4e0d\u80fd\u8ba9\u5c0f\u7c73\u6cb9\u6e9c\u6389\u54df\uff0c\u4e2d\u95f4\u53ef\u4ee5\u7528\u52fa\u5b50\u6405\u62cc\u51e0\u6b21\uff0c\u4e0d\u8981\u7cca\u9505\u5e95","title":"\u64cd\u4f5c"},{"location":"dishes/soup/%E5%B0%8F%E7%B1%B3%E7%B2%A5/#_5","text":"\u8fd9\u662f\u666e\u901a\u9505\u71ac\u5236\uff08\u53ea\u9700 30-35 \u5206\u949f\u5373\u53ef\u51fa\u9505\uff09,\u5473\u9053\u6700\u4f73\u3002\u9ad8\u538b\u9505\u548c\u7535\u996d\u9505\u7701\u4e8b\uff0c\u4e0d\u8fc7\u6548\u679c\u4e0b\u964d\uff0c\u6c34\u91cf\u8981\u9002\u5f53\u51cf\u5c11\uff0c\u4e00\u822c 100 \u514b\u5c0f\u7c73+1800 \u514b\u6c34 \u5c0f\u7c73\u53ea\u9700\u7528\u6c34\u53bb\u9664\u6d6e\u7070\uff0c\u5343\u4e07\u4e0d\u53ef\u8fc7\u5206\u6dd8\uff0c\u4f1a\u635f\u5931\u6389\u5c0f\u7c73\u6cb9\u7684 \u5343\u4e07\u8bb0\u4f4f\u5c0f\u7c73\u9700\u8981\u5728\u6c34\u5f00\u7684\u65f6\u5019\u4e0b\u9505 \u4e0d\u559c\u6b22\u653e\u78b1\uff0c\u66f4\u559c\u6b22\u539f\u6c41\u539f\u5473\u7684\u5c0f\u7c73\u9999 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/soup/%E7%94%9F%E6%B1%86%E4%B8%B8%E5%AD%90%E6%B1%A4/","text":"\u751f\u6c46\u4e38\u5b50\u6c64\u7684\u505a\u6cd5 \u751f\u6c46\u4e38\u5b50\u6c64\uff0c\u5403\u7684\u5c31\u662f\u4e00\u4e2a\u9c9c\u3001\u5ae9\u3001\u5f39\u3002 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u4e38\u5b50\u8089\u914d\u6599 \u524d\u817f\u8089 \u76d0 \u80e1\u6912\u7c89 \u8471\u59dc\u82b1\u6912\u6c34 \u4e00\u4e2a\u9e21\u86cb\u7684\u9e21\u86cb\u6e05 \u571f\u8c46\u6dc0\u7c89 \u719f\u8c46\u6cb9 \u4e38\u5b50\u6c64\u914d\u6599 \u6728\u8033 \u9ec4\u82b1 \u5c0f\u9999\u8471 \u6ce1\u597d\u7684\u7c89\u4e1d\uff08\u653e\u7897\u5e95\uff09 \u76d0 \u9e21\u7c89 \u80e1\u6912\u7c89 \u9999\u6cb9 \u9999\u83dc \u8ba1\u7b97 \u6bcf\u4efd\uff1a \u76d0\u91cf = \u732a\u8089\u65a4\u6570 * 6 \u514b \u80e1\u6912\u7c89\u91cf = \u732a\u8089\u65a4\u6570 * 2 \u514b \u571f\u8c46\u6dc0\u7c89 = \u591a\u5c11\u4eba\u7684\u7528\u91cf * 40 \u514b\uff0c\u672c\u6559\u7a0b\u4ee5\u4e00\u4eba\u7528\u91cf\u7b97 \u64cd\u4f5c \u5241\u8089 \u8089\u6539\u5200\u5207\u5f00\uff0c\u80a5\u7626\u4e09\u4e03\u5206 \u4e0a\u5200\u5241\u4e00\u5241\uff0c\u7528\u5200\u80cc\u7838\u4e00\u7838\uff0c\u628a\u8089\u7b4b\u6253\u5f00\u6253\u677e\u758f \u5241\u4e00\u5241\uff0c\u7838\u4e00\u7838\uff0c\u5241\u6210\u8089\u672b\uff0c\u8981\u60f3\u597d\u5403\u5f97\u81ea\u5df1\u5241\uff0c\u673a\u5668\u6253\u7684\u592a\u9ecf\u7cca\u4e86 \u8c03\u5473 \u6bcf\u65a4\u8089\uff0c6 \u514b\u76d0\uff0c1 \u514b\u80e1\u6912\u7c89 \u4e0a\u624b\u6293\u5300 \u8471\u59dc\u82b1\u6912\u6c34\u5206\u6b21\u52a0\uff0c\u8fb9\u52a0\u8fb9\u6405\uff0c\u7528\u624b\u63c9\u5300\uff0c\u8ba9\u8089\u5438\u9971\u6c34\u3002\u6bcf\u65a4\u8089\u672b 80 \u514b\u8471\u59dc\u82b1\u6912\u6c34 \u653e\u5165\u9e21\u86cb\u6e05\uff0c\u7ee7\u7eed\u987a\u7740\u4e00\u4e2a\u65b9\u5411\u6405 \u52a0\u5165 40 \u514b\u571f\u8c46\u6dc0\u7c89\uff0c\u6405\u5300 \u52a0\u5165\u719f\u8c46\u6cb9\uff0c\u8fd9\u662f\u4e3a\u4e86\u4fdd\u6301\u5176\u5ae9\u6ed1\u5f39\u7684\u72b6\u6001 \u6c46\u4e38\u5b50 \u8d77\u9505\u70e7\u6c34\uff0c\u70e7\u5f00\uff0c\u6539\u5c0f\u706b\uff0c\u4f3c\u5f00\u975e\u5f00\u7684\u6837\u5b50 \u4e0a\u624b\uff0c\u6324\u4e38\u5b50\uff0c \u5168\u90e8\u6f02\u8d77\u6765\uff0c\u7528\u5c0f\u706b\u716e 1 \u5206\u949f\u5de6\u53f3 \u5236\u4f5c\u4e38\u5b50\u6c64 \u7c89\u4e1d\u653e\u7897\u5e95 \u52a0\u6728\u8033\uff0c\u9ec4\u82b1\uff0c\u5c0f\u9999\u8471\u5e76\u7528\u76d0\u3001\u80e1\u6912\u7c89\u3001\u9e21\u7c89\u6253\u5e95\u8c03\u5473 \u8fde\u6c64\u5e26\u4e38\u5b50\u51b2\u5982\u7897\u4e2d \u6dcb 3-5 \u6ef4\u9999\u6cb9 \u52a0\u4e00\u5c0f\u9897\u9999\u83dc \u9644\u52a0\u5185\u5bb9 \u53c2\u8003\u6765\u81ea\uff1a \u751f\u6c46\u4e38\u5b50\u6c64\uff0c\u5403\u7684\u5c31\u662f\u4e00\u4e2a\u9c9c\u3001\u5ae9\u3001\u5f39\uff0c\u5b66\u4f1a\u6253\u4e38\u5b50\u7684\u8fd9\u4e9b\u6280\u5de7\uff0c\u8fd9\u7897\u6c64\u624d\u5730\u9053 \u8fa3\u6912\u6cb9\u53ef\u4ee5\u6839\u636e\u53e3\u5473\u653e \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u751f\u6c46\u4e38\u5b50\u6c64"},{"location":"dishes/soup/%E7%94%9F%E6%B1%86%E4%B8%B8%E5%AD%90%E6%B1%A4/#_1","text":"\u751f\u6c46\u4e38\u5b50\u6c64\uff0c\u5403\u7684\u5c31\u662f\u4e00\u4e2a\u9c9c\u3001\u5ae9\u3001\u5f39\u3002","title":"\u751f\u6c46\u4e38\u5b50\u6c64\u7684\u505a\u6cd5"},{"location":"dishes/soup/%E7%94%9F%E6%B1%86%E4%B8%B8%E5%AD%90%E6%B1%A4/#_2","text":"","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/soup/%E7%94%9F%E6%B1%86%E4%B8%B8%E5%AD%90%E6%B1%A4/#_3","text":"\u524d\u817f\u8089 \u76d0 \u80e1\u6912\u7c89 \u8471\u59dc\u82b1\u6912\u6c34 \u4e00\u4e2a\u9e21\u86cb\u7684\u9e21\u86cb\u6e05 \u571f\u8c46\u6dc0\u7c89 \u719f\u8c46\u6cb9","title":"\u4e38\u5b50\u8089\u914d\u6599"},{"location":"dishes/soup/%E7%94%9F%E6%B1%86%E4%B8%B8%E5%AD%90%E6%B1%A4/#_4","text":"\u6728\u8033 \u9ec4\u82b1 \u5c0f\u9999\u8471 \u6ce1\u597d\u7684\u7c89\u4e1d\uff08\u653e\u7897\u5e95\uff09 \u76d0 \u9e21\u7c89 \u80e1\u6912\u7c89 \u9999\u6cb9 \u9999\u83dc","title":"\u4e38\u5b50\u6c64\u914d\u6599"},{"location":"dishes/soup/%E7%94%9F%E6%B1%86%E4%B8%B8%E5%AD%90%E6%B1%A4/#_5","text":"\u6bcf\u4efd\uff1a \u76d0\u91cf = \u732a\u8089\u65a4\u6570 * 6 \u514b \u80e1\u6912\u7c89\u91cf = \u732a\u8089\u65a4\u6570 * 2 \u514b \u571f\u8c46\u6dc0\u7c89 = \u591a\u5c11\u4eba\u7684\u7528\u91cf * 40 \u514b\uff0c\u672c\u6559\u7a0b\u4ee5\u4e00\u4eba\u7528\u91cf\u7b97","title":"\u8ba1\u7b97"},{"location":"dishes/soup/%E7%94%9F%E6%B1%86%E4%B8%B8%E5%AD%90%E6%B1%A4/#_6","text":"","title":"\u64cd\u4f5c"},{"location":"dishes/soup/%E7%94%9F%E6%B1%86%E4%B8%B8%E5%AD%90%E6%B1%A4/#_7","text":"\u8089\u6539\u5200\u5207\u5f00\uff0c\u80a5\u7626\u4e09\u4e03\u5206 \u4e0a\u5200\u5241\u4e00\u5241\uff0c\u7528\u5200\u80cc\u7838\u4e00\u7838\uff0c\u628a\u8089\u7b4b\u6253\u5f00\u6253\u677e\u758f \u5241\u4e00\u5241\uff0c\u7838\u4e00\u7838\uff0c\u5241\u6210\u8089\u672b\uff0c\u8981\u60f3\u597d\u5403\u5f97\u81ea\u5df1\u5241\uff0c\u673a\u5668\u6253\u7684\u592a\u9ecf\u7cca\u4e86","title":"\u5241\u8089"},{"location":"dishes/soup/%E7%94%9F%E6%B1%86%E4%B8%B8%E5%AD%90%E6%B1%A4/#_8","text":"\u6bcf\u65a4\u8089\uff0c6 \u514b\u76d0\uff0c1 \u514b\u80e1\u6912\u7c89 \u4e0a\u624b\u6293\u5300 \u8471\u59dc\u82b1\u6912\u6c34\u5206\u6b21\u52a0\uff0c\u8fb9\u52a0\u8fb9\u6405\uff0c\u7528\u624b\u63c9\u5300\uff0c\u8ba9\u8089\u5438\u9971\u6c34\u3002\u6bcf\u65a4\u8089\u672b 80 \u514b\u8471\u59dc\u82b1\u6912\u6c34 \u653e\u5165\u9e21\u86cb\u6e05\uff0c\u7ee7\u7eed\u987a\u7740\u4e00\u4e2a\u65b9\u5411\u6405 \u52a0\u5165 40 \u514b\u571f\u8c46\u6dc0\u7c89\uff0c\u6405\u5300 \u52a0\u5165\u719f\u8c46\u6cb9\uff0c\u8fd9\u662f\u4e3a\u4e86\u4fdd\u6301\u5176\u5ae9\u6ed1\u5f39\u7684\u72b6\u6001","title":"\u8c03\u5473"},{"location":"dishes/soup/%E7%94%9F%E6%B1%86%E4%B8%B8%E5%AD%90%E6%B1%A4/#_9","text":"\u8d77\u9505\u70e7\u6c34\uff0c\u70e7\u5f00\uff0c\u6539\u5c0f\u706b\uff0c\u4f3c\u5f00\u975e\u5f00\u7684\u6837\u5b50 \u4e0a\u624b\uff0c\u6324\u4e38\u5b50\uff0c \u5168\u90e8\u6f02\u8d77\u6765\uff0c\u7528\u5c0f\u706b\u716e 1 \u5206\u949f\u5de6\u53f3","title":"\u6c46\u4e38\u5b50"},{"location":"dishes/soup/%E7%94%9F%E6%B1%86%E4%B8%B8%E5%AD%90%E6%B1%A4/#_10","text":"\u7c89\u4e1d\u653e\u7897\u5e95 \u52a0\u6728\u8033\uff0c\u9ec4\u82b1\uff0c\u5c0f\u9999\u8471\u5e76\u7528\u76d0\u3001\u80e1\u6912\u7c89\u3001\u9e21\u7c89\u6253\u5e95\u8c03\u5473 \u8fde\u6c64\u5e26\u4e38\u5b50\u51b2\u5982\u7897\u4e2d \u6dcb 3-5 \u6ef4\u9999\u6cb9 \u52a0\u4e00\u5c0f\u9897\u9999\u83dc","title":"\u5236\u4f5c\u4e38\u5b50\u6c64"},{"location":"dishes/soup/%E7%94%9F%E6%B1%86%E4%B8%B8%E5%AD%90%E6%B1%A4/#_11","text":"\u53c2\u8003\u6765\u81ea\uff1a \u751f\u6c46\u4e38\u5b50\u6c64\uff0c\u5403\u7684\u5c31\u662f\u4e00\u4e2a\u9c9c\u3001\u5ae9\u3001\u5f39\uff0c\u5b66\u4f1a\u6253\u4e38\u5b50\u7684\u8fd9\u4e9b\u6280\u5de7\uff0c\u8fd9\u7897\u6c64\u624d\u5730\u9053 \u8fa3\u6912\u6cb9\u53ef\u4ee5\u6839\u636e\u53e3\u5473\u653e \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/soup/%E7%9A%AE%E8%9B%8B%E7%98%A6%E8%82%89%E7%B2%A5/","text":"\u76ae\u86cb\u7626\u8089\u7ca5\u7684\u505a\u6cd5 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u996e\u7528\u6c34 \u76ae\u86cb\uff08\u677e\u82b1\u86cb\uff09 \u7626\u8089 \u5927\u7c73 \u5c0f\u8471 \u9999\u83dc \u751f\u83dc \u751f\u59dc \u9171\u6cb9 \u869d\u6cb9 \u76d0 \u80e1\u6912\u7c89 \u98df\u7528\u6cb9 \u7535\u996d\u9505 \u5c0f\u7897\u82e5\u5e72 \u8ba1\u7b97 \u6240\u6709\u6750\u6599\u6309\u4e2a\u4eba\u7231\u597d\u4e0e\u98df\u91cf\u9002\u91cf\u589e\u51cf\uff0c\u5904\u7406\u98df\u6750\u65f6\u6709\u6761\u4ef6\u5e26\u4e0a\u4e00\u6b21\u6027\u624b\u5957\uff0c\u4f7f\u7528\u4e4b\u524d\u751f\u852c\u98df\u6750\u5efa\u8bae\u63d0\u524d\u6d17\u51c0\u653e\u7f6e\u4e00\u65c1\u4fdd\u6301\u536b\u751f \u996e\u7528\u6c34 1 \u5347 \u76ae\u86cb 2 \u9897 \u7626\u8089 100g \u5927\u7c73 0.5 \u676f \u5c0f\u8471 1 \u68f5 \u9999\u83dc 1 \u68f5 \u751f\u83dc 4 \u53f6 \u751f\u59dc 1 \u62c7\u6307\u5757 \u9171\u6cb9 1 \u52fa \u869d\u6cb9 1 \u52fa \u76d0 0.2 \u52fa \u80e1\u6912\u7c89 0.1 \u52fa \u98df\u7528\u6cb9 2 \u52fa \u64cd\u4f5c \u4e3b\u6599 \u5927\u7c73 - \u6d17\u51c0 - \u653e\u5165\u7535\u996d\u9505\u5185\u80c6 - \u52a0\u5165 1 \u5347 \u996e\u7528\u6c34 \u7626\u8089 - \u6d17\u51c0 - \u7b80\u6613\u667e\u53bb\u6c34\u5206 - \u52a0\u5165 2 \u52fa \u98df\u7528\u6cb9 - \u63c9\u6413\u5747\u5300 - \u653e\u5165\u7535\u996d\u9505\u5185\u80c6 \u76ae\u86cb - \u53bb\u58f3 - \u6d17\u51c0 - \u5bf9\u534a\u5207\u5f00 - \u5206\u79bb\u86cb\u767d\u86cb\u9ec4 - \u86cb\u767d\u7b80\u5355\u5207\u788e\u5757 - \u86cb\u9ec4\u63c9\u788e - \u653e\u5165\u7535\u996d\u9505\u5185\u80c6 \u751f\u59dc - \u6d17\u51c0 - \u524a\u76ae - \u53bb\u9664\u67af\u9ec4\u67af\u9ed1\u65e0\u6cd5\u98df\u7528\u90e8\u5206 - \u5207\u4e1d - \u653e\u5165\u7535\u996d\u9505\u5185\u80c6 \u914d\u6599 \u5c0f\u8471 - \u6d17\u51c0 - \u53bb\u9664\u6839\u90e8 - \u53bb\u9664\u67af\u9ec4\u67af\u9ed1\u65e0\u6cd5\u98df\u7528\u90e8\u5206 - \u5207\u788e - \u653e\u5165\u5c0f\u7897\u5907\u7528 \u9999\u83dc - \u6d17\u51c0 - \u53bb\u9664\u6839\u90e8 - \u53bb\u9664\u67af\u9ec4\u67af\u9ed1\u65e0\u6cd5\u98df\u7528\u90e8\u5206 - \u5207\u788e - \u653e\u5165\u5c0f\u7897\u5907\u7528 \u751f\u83dc - \u6d17\u51c0 - \u53bb\u9664\u6839\u90e8 - \u53bb\u9664\u67af\u9ec4\u67af\u9ed1\u65e0\u6cd5\u98df\u7528\u90e8\u5206 - \u5207\u788e - \u653e\u5165\u5c0f\u7897\u5907\u7528 \u9171\u6599 \u9171\u6cb9 + \u869d\u6cb9 + \u76d0 + \u80e1\u6912\u7c89 - \u6405\u62cc\u5747\u5300 - \u653e\u5165\u5c0f\u7897\u5907\u7528 \u70f9\u996a\u8fc7\u7a0b \u4e3b\u6599 - \u4f7f\u7528\u7535\u996d\u9505\u716e\u7ca5\u6a21\u5f0f\u716e\u719f \u914d\u6599 - \u5f85\u4e3b\u6599\u716e\u719f\u540e\uff0c\u751f\u83dc\u5355\u72ec\u8fc7\u4e00\u6b21\u70ed\u6c34\uff0c\u5e76\u4e0e\u5176\u4f59\u914d\u6599\u4e00\u540c\u5f00\u76d6\u52a0\u5165\u4e3b\u6599\u4e2d\u6405\u62cc\u5747\u5300 \u9171\u6599 - \u5f85\u4e3b\u6599\u716e\u719f\u540e\uff0c\u4e0e\u5176\u4f59\u914d\u6599\u4e00\u540c\u5f00\u76d6\u52a0\u5165\u4e3b\u6599\u4e2d\u6405\u62cc\u5747\u5300 \u9644\u52a0\u5185\u5bb9 \u52fa\u5b50\u4e3a\u65e5\u5e38\u4f7f\u7528\u7684\u74f7\u8d28\u52fa\u5b50 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002 \u4f5c\u4e3a\u65e9\u9910\u65f6\u53ef\u63d0\u524d\u4e00\u591c\u51c6\u5907\u597d\u4e3b\u6599\uff0c\u4fdd\u6e29\u6a21\u5f0f\u5230\u7b2c\u4e8c\u5929\u65e9\u9910\uff0c\u518d\u6dfb\u52a0\u914d\u6599\u548c\u9171\u6599","title":"\u76ae\u86cb\u7626\u8089\u7ca5"},{"location":"dishes/soup/%E7%9A%AE%E8%9B%8B%E7%98%A6%E8%82%89%E7%B2%A5/#_1","text":"","title":"\u76ae\u86cb\u7626\u8089\u7ca5\u7684\u505a\u6cd5"},{"location":"dishes/soup/%E7%9A%AE%E8%9B%8B%E7%98%A6%E8%82%89%E7%B2%A5/#_2","text":"\u996e\u7528\u6c34 \u76ae\u86cb\uff08\u677e\u82b1\u86cb\uff09 \u7626\u8089 \u5927\u7c73 \u5c0f\u8471 \u9999\u83dc \u751f\u83dc \u751f\u59dc \u9171\u6cb9 \u869d\u6cb9 \u76d0 \u80e1\u6912\u7c89 \u98df\u7528\u6cb9 \u7535\u996d\u9505 \u5c0f\u7897\u82e5\u5e72","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/soup/%E7%9A%AE%E8%9B%8B%E7%98%A6%E8%82%89%E7%B2%A5/#_3","text":"","title":"\u8ba1\u7b97"},{"location":"dishes/soup/%E7%9A%AE%E8%9B%8B%E7%98%A6%E8%82%89%E7%B2%A5/#_4","text":"\u996e\u7528\u6c34 1 \u5347 \u76ae\u86cb 2 \u9897 \u7626\u8089 100g \u5927\u7c73 0.5 \u676f \u5c0f\u8471 1 \u68f5 \u9999\u83dc 1 \u68f5 \u751f\u83dc 4 \u53f6 \u751f\u59dc 1 \u62c7\u6307\u5757 \u9171\u6cb9 1 \u52fa \u869d\u6cb9 1 \u52fa \u76d0 0.2 \u52fa \u80e1\u6912\u7c89 0.1 \u52fa \u98df\u7528\u6cb9 2 \u52fa","title":"\u6240\u6709\u6750\u6599\u6309\u4e2a\u4eba\u7231\u597d\u4e0e\u98df\u91cf\u9002\u91cf\u589e\u51cf\uff0c\u5904\u7406\u98df\u6750\u65f6\u6709\u6761\u4ef6\u5e26\u4e0a\u4e00\u6b21\u6027\u624b\u5957\uff0c\u4f7f\u7528\u4e4b\u524d\u751f\u852c\u98df\u6750\u5efa\u8bae\u63d0\u524d\u6d17\u51c0\u653e\u7f6e\u4e00\u65c1\u4fdd\u6301\u536b\u751f"},{"location":"dishes/soup/%E7%9A%AE%E8%9B%8B%E7%98%A6%E8%82%89%E7%B2%A5/#_5","text":"","title":"\u64cd\u4f5c"},{"location":"dishes/soup/%E7%9A%AE%E8%9B%8B%E7%98%A6%E8%82%89%E7%B2%A5/#_6","text":"\u5927\u7c73 - \u6d17\u51c0 - \u653e\u5165\u7535\u996d\u9505\u5185\u80c6 - \u52a0\u5165 1 \u5347 \u996e\u7528\u6c34 \u7626\u8089 - \u6d17\u51c0 - \u7b80\u6613\u667e\u53bb\u6c34\u5206 - \u52a0\u5165 2 \u52fa \u98df\u7528\u6cb9 - \u63c9\u6413\u5747\u5300 - \u653e\u5165\u7535\u996d\u9505\u5185\u80c6 \u76ae\u86cb - \u53bb\u58f3 - \u6d17\u51c0 - \u5bf9\u534a\u5207\u5f00 - \u5206\u79bb\u86cb\u767d\u86cb\u9ec4 - \u86cb\u767d\u7b80\u5355\u5207\u788e\u5757 - \u86cb\u9ec4\u63c9\u788e - \u653e\u5165\u7535\u996d\u9505\u5185\u80c6 \u751f\u59dc - \u6d17\u51c0 - \u524a\u76ae - \u53bb\u9664\u67af\u9ec4\u67af\u9ed1\u65e0\u6cd5\u98df\u7528\u90e8\u5206 - \u5207\u4e1d - \u653e\u5165\u7535\u996d\u9505\u5185\u80c6","title":"\u4e3b\u6599"},{"location":"dishes/soup/%E7%9A%AE%E8%9B%8B%E7%98%A6%E8%82%89%E7%B2%A5/#_7","text":"\u5c0f\u8471 - \u6d17\u51c0 - \u53bb\u9664\u6839\u90e8 - \u53bb\u9664\u67af\u9ec4\u67af\u9ed1\u65e0\u6cd5\u98df\u7528\u90e8\u5206 - \u5207\u788e - \u653e\u5165\u5c0f\u7897\u5907\u7528 \u9999\u83dc - \u6d17\u51c0 - \u53bb\u9664\u6839\u90e8 - \u53bb\u9664\u67af\u9ec4\u67af\u9ed1\u65e0\u6cd5\u98df\u7528\u90e8\u5206 - \u5207\u788e - \u653e\u5165\u5c0f\u7897\u5907\u7528 \u751f\u83dc - \u6d17\u51c0 - \u53bb\u9664\u6839\u90e8 - \u53bb\u9664\u67af\u9ec4\u67af\u9ed1\u65e0\u6cd5\u98df\u7528\u90e8\u5206 - \u5207\u788e - \u653e\u5165\u5c0f\u7897\u5907\u7528","title":"\u914d\u6599"},{"location":"dishes/soup/%E7%9A%AE%E8%9B%8B%E7%98%A6%E8%82%89%E7%B2%A5/#_8","text":"\u9171\u6cb9 + \u869d\u6cb9 + \u76d0 + \u80e1\u6912\u7c89 - \u6405\u62cc\u5747\u5300 - \u653e\u5165\u5c0f\u7897\u5907\u7528","title":"\u9171\u6599"},{"location":"dishes/soup/%E7%9A%AE%E8%9B%8B%E7%98%A6%E8%82%89%E7%B2%A5/#_9","text":"\u4e3b\u6599 - \u4f7f\u7528\u7535\u996d\u9505\u716e\u7ca5\u6a21\u5f0f\u716e\u719f \u914d\u6599 - \u5f85\u4e3b\u6599\u716e\u719f\u540e\uff0c\u751f\u83dc\u5355\u72ec\u8fc7\u4e00\u6b21\u70ed\u6c34\uff0c\u5e76\u4e0e\u5176\u4f59\u914d\u6599\u4e00\u540c\u5f00\u76d6\u52a0\u5165\u4e3b\u6599\u4e2d\u6405\u62cc\u5747\u5300 \u9171\u6599 - \u5f85\u4e3b\u6599\u716e\u719f\u540e\uff0c\u4e0e\u5176\u4f59\u914d\u6599\u4e00\u540c\u5f00\u76d6\u52a0\u5165\u4e3b\u6599\u4e2d\u6405\u62cc\u5747\u5300","title":"\u70f9\u996a\u8fc7\u7a0b"},{"location":"dishes/soup/%E7%9A%AE%E8%9B%8B%E7%98%A6%E8%82%89%E7%B2%A5/#_10","text":"\u52fa\u5b50\u4e3a\u65e5\u5e38\u4f7f\u7528\u7684\u74f7\u8d28\u52fa\u5b50 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002 \u4f5c\u4e3a\u65e9\u9910\u65f6\u53ef\u63d0\u524d\u4e00\u591c\u51c6\u5907\u597d\u4e3b\u6599\uff0c\u4fdd\u6e29\u6a21\u5f0f\u5230\u7b2c\u4e8c\u5929\u65e9\u9910\uff0c\u518d\u6dfb\u52a0\u914d\u6599\u548c\u9171\u6599","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/soup/%E7%B1%B3%E7%B2%A5/","text":"\u7c73\u7ca5\u7684\u505a\u6cd5 \u5927\u7c73\u7ca5\u662f\u4e00\u9053\u4ee5\u5927\u7c73\u548c\u6c34\u4f5c\u70ba\u4e3b\u8981\u539f\u6599\u7d93\u5927\u706b\u716e\u6cb8\u71ac\u88fd\u800c\u6210\u7684\u7f8e\u98df\uff0c\u8001\u5c11\u7686\u5b9c\uff0c\u7c73\u7ca5\u5177\u6709\u88dc\u813e\u3001\u548c\u80c3\u3001\u6e05\u80ba\u529f\u6548\u3002 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u7c73 \u6c34 \u690d\u7269\u6cb9\uff08\u53ef\u9009\uff09 \u8ba1\u7b97 \u6bcf\u4eba\u53ef\u4ee5\u98df\u7528 60ml-110ml \u7684\u7c73\u3002 \u6c34\u7684\u4f53\u79ef\u662f\u7c73\u996d\u7684\u4f53\u79ef\u7684 9-12 \u500d\u3002 \u4e00\u7897\u5bb9\u91cf\u662f 500ml\u3002 \u4e2d\u65ad\u5927\u706b\u52a0\u70ed\u7684\u6700\u665a\u65f6\u95f4 T1\uff1a1.5 min/500ml * \u6c34\u4f53\u79ef \u7c73\u7ca5\u80fd\u591f\u98df\u7528\u7684\u6700\u65e9\u65f6\u95f4 Tr\uff1a10 min/500ml * \u6c34\u4f53\u79ef \u6cb9\u7684\u8d28\u91cf Mo\uff1a\u751f\u7c73\u4f53\u79ef / 10 \u51b7\u85cf\u65f6\u95f4 Tc = \u751f\u7c73\u4f53\u79ef /10 ml/\u5206\u949f\u3002 \u4f7f\u7528\u4e0a\u8ff0\u6761\u4ef6\uff0c\u8ba1\u7b97\u51fa\u8ba1\u5212\u4f7f\u7528\u7684\u539f\u6750\u6599\u6bd4\u4f8b\u3002 \u64cd\u4f5c \uff08\u53ef\u9009\uff09\u5c06 Mo ml \u7684\u6cb9\u4e0e\u6d17\u51c0\u7684\u7c73\u6df7\u5408\uff0c \u5c3d\u91cf\u786e\u4fdd\u5b8c\u5168\u6df7\u5408\uff0c\u5373\u6bcf\u7c92\u7c73\u4e0a\u81f3\u5c11\u90fd\u6cbe\u4e0a\u5c11\u91cf\u6cb9 \uff08\u53ef\u9009\uff09\u5c06 \u7c73-\u6cb9\u6df7\u5408\u7269\u54c1\u51b7\u85cf\u4fdd\u5b58\uff0c\u51b7\u85cf\u65f6\u95f4 Tc\u3002 \u5c06\u7c73\u548c\u6c34\u52a0\u5165\u9505\u4e2d\u3002 \u5f00\u5927\u706b\uff0c\u52a0\u70ed\u5230 T1\u3002 \u5728 T1 \u4e4b\u524d\u5c06\u706b\u5173\u5c0f\u3002 \u5982\u679c\u5fd8\u8bb0\u6b64\u6b65\u9aa4\uff0c\u6c34\u53ef\u80fd\u4f1a\u6f2b\u51fa\u800c\u7184\u706d\u706b\u7130\u3002\u975e\u5e38\u5371\u9669\uff01 \u52a0\u70ed\u5230 Tr\u3002\u5728 Tr \u65f6\u5173\u95ed\u706b\u6e90\u3002 \u9644\u52a0\u5185\u5bb9 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u7c73\u7ca5"},{"location":"dishes/soup/%E7%B1%B3%E7%B2%A5/#_1","text":"\u5927\u7c73\u7ca5\u662f\u4e00\u9053\u4ee5\u5927\u7c73\u548c\u6c34\u4f5c\u70ba\u4e3b\u8981\u539f\u6599\u7d93\u5927\u706b\u716e\u6cb8\u71ac\u88fd\u800c\u6210\u7684\u7f8e\u98df\uff0c\u8001\u5c11\u7686\u5b9c\uff0c\u7c73\u7ca5\u5177\u6709\u88dc\u813e\u3001\u548c\u80c3\u3001\u6e05\u80ba\u529f\u6548\u3002","title":"\u7c73\u7ca5\u7684\u505a\u6cd5"},{"location":"dishes/soup/%E7%B1%B3%E7%B2%A5/#_2","text":"\u7c73 \u6c34 \u690d\u7269\u6cb9\uff08\u53ef\u9009\uff09","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/soup/%E7%B1%B3%E7%B2%A5/#_3","text":"\u6bcf\u4eba\u53ef\u4ee5\u98df\u7528 60ml-110ml \u7684\u7c73\u3002 \u6c34\u7684\u4f53\u79ef\u662f\u7c73\u996d\u7684\u4f53\u79ef\u7684 9-12 \u500d\u3002 \u4e00\u7897\u5bb9\u91cf\u662f 500ml\u3002 \u4e2d\u65ad\u5927\u706b\u52a0\u70ed\u7684\u6700\u665a\u65f6\u95f4 T1\uff1a1.5 min/500ml * \u6c34\u4f53\u79ef \u7c73\u7ca5\u80fd\u591f\u98df\u7528\u7684\u6700\u65e9\u65f6\u95f4 Tr\uff1a10 min/500ml * \u6c34\u4f53\u79ef \u6cb9\u7684\u8d28\u91cf Mo\uff1a\u751f\u7c73\u4f53\u79ef / 10 \u51b7\u85cf\u65f6\u95f4 Tc = \u751f\u7c73\u4f53\u79ef /10 ml/\u5206\u949f\u3002 \u4f7f\u7528\u4e0a\u8ff0\u6761\u4ef6\uff0c\u8ba1\u7b97\u51fa\u8ba1\u5212\u4f7f\u7528\u7684\u539f\u6750\u6599\u6bd4\u4f8b\u3002","title":"\u8ba1\u7b97"},{"location":"dishes/soup/%E7%B1%B3%E7%B2%A5/#_4","text":"\uff08\u53ef\u9009\uff09\u5c06 Mo ml \u7684\u6cb9\u4e0e\u6d17\u51c0\u7684\u7c73\u6df7\u5408\uff0c \u5c3d\u91cf\u786e\u4fdd\u5b8c\u5168\u6df7\u5408\uff0c\u5373\u6bcf\u7c92\u7c73\u4e0a\u81f3\u5c11\u90fd\u6cbe\u4e0a\u5c11\u91cf\u6cb9 \uff08\u53ef\u9009\uff09\u5c06 \u7c73-\u6cb9\u6df7\u5408\u7269\u54c1\u51b7\u85cf\u4fdd\u5b58\uff0c\u51b7\u85cf\u65f6\u95f4 Tc\u3002 \u5c06\u7c73\u548c\u6c34\u52a0\u5165\u9505\u4e2d\u3002 \u5f00\u5927\u706b\uff0c\u52a0\u70ed\u5230 T1\u3002 \u5728 T1 \u4e4b\u524d\u5c06\u706b\u5173\u5c0f\u3002 \u5982\u679c\u5fd8\u8bb0\u6b64\u6b65\u9aa4\uff0c\u6c34\u53ef\u80fd\u4f1a\u6f2b\u51fa\u800c\u7184\u706d\u706b\u7130\u3002\u975e\u5e38\u5371\u9669\uff01 \u52a0\u70ed\u5230 Tr\u3002\u5728 Tr \u65f6\u5173\u95ed\u706b\u6e90\u3002","title":"\u64cd\u4f5c"},{"location":"dishes/soup/%E7%B1%B3%E7%B2%A5/#_5","text":"\u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/soup/%E7%B4%AB%E8%8F%9C%E8%9B%8B%E8%8A%B1%E6%B1%A4/","text":"\u7d2b\u83dc\u86cb\u82b1\u6c64\u7684\u505a\u6cd5 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u9e21\u86cb \u7d2b\u83dc \u8471\u82b1 \u6c34 \u76d0 \u6cb9 \u867e\u4ec1\uff08\u4e2a\u4eba\u53e3\u5473\uff0c\u53ef\u52a0\u53ef\u4e0d\u52a0\uff09 \u8ba1\u7b97 \u6309\u7167 1 \u4eba\u4efd\u7684\u4efd\u91cf\uff1a 10g \u7684\u5e72\u7d2b\u83dc\uff08\u559c\u6b22\u7d2b\u83dc\u7684\u53ef\u4ee5\u591a\u653e\u4e9b\uff09 \u4e24\u4e2a\u9e21\u86cb \u76d0 2 \u514b \u64cd\u4f5c \u5e72\u7d2b\u83dc\u7528\u6e05\u6c34\u6ce1 15 \u5206\u949f\uff0c\u635e\u8d77\u6ca5\u5e72\u6c34\u4efd\u5907\u7528\u3002 \u70ed\u9505\uff0c\u5012\u5165 1.5 \u5347\u6e05\u6c34\u3001\u534a\u52fa\u6cb9\u3001\u534a\u52fa\u76d0\u3002\u5f85\u6c34\u5f00\u540e\u653e\u5165\u7d2b\u83dc\u3002 \u7d2b\u83dc\u70e7\u5f00\u540e 3 \u5206\u949f\uff0c\u5c06\u6253\u597d\u7684\u86cb\u6db2\u5f90\u5f90\u5012\u5165\u9505\u5185\uff0c30 \u79d2\u65e2\u53ef\u8d77\u9505\u3002 \u6492\u4e0a\u8471\u82b1\uff0c\u8f6c\u5c0f\u706b 20 \u79d2\u3002 \u5173\u706b\uff0c\u51fa\u9505\u524d\u653e\u5165\u51e0\u6ef4\u9999\u6cb9\uff0c\u4e5f\u6709\u7684\u4f1a\u653e\u5165\u4e00\u70b9\u867e\u76ae\uff0c\u5473\u9053\u4e5f\u4e0d\u9519\u3002 \u9644\u52a0\u5185\u5bb9 \u6c34\u5f00\u540e\uff0c\u5c06\u706b\u5173\u5c0f\uff0c\u5c06\u6253\u597d\u7684\u86cb\u6db2\u56f4\u7ed5\u4e2d\u95f4\u6cb8\u817e\u7684\u6c34\u5012\u5165\u3002\u4e3a\u4e86\u4f7f\u86cb\u82b1\u6bd4\u8f83\u5ae9\uff0c\u9505\u76d6\u76d6\u4e0a\u7184\u706d\u706b\u7b49\u534a\u5206\u949f\u540e\u518d\u6253\u5f00. \u5982\u679c\u559c\u6b22\u6d53\u7a20\u53e3\u611f\uff0c\u53ef\u52a0\u5165 2g \u6dc0\u7c89. \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u7d2b\u83dc\u86cb\u82b1\u6c64"},{"location":"dishes/soup/%E7%B4%AB%E8%8F%9C%E8%9B%8B%E8%8A%B1%E6%B1%A4/#_1","text":"","title":"\u7d2b\u83dc\u86cb\u82b1\u6c64\u7684\u505a\u6cd5"},{"location":"dishes/soup/%E7%B4%AB%E8%8F%9C%E8%9B%8B%E8%8A%B1%E6%B1%A4/#_2","text":"\u9e21\u86cb \u7d2b\u83dc \u8471\u82b1 \u6c34 \u76d0 \u6cb9 \u867e\u4ec1\uff08\u4e2a\u4eba\u53e3\u5473\uff0c\u53ef\u52a0\u53ef\u4e0d\u52a0\uff09","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/soup/%E7%B4%AB%E8%8F%9C%E8%9B%8B%E8%8A%B1%E6%B1%A4/#_3","text":"\u6309\u7167 1 \u4eba\u4efd\u7684\u4efd\u91cf\uff1a 10g \u7684\u5e72\u7d2b\u83dc\uff08\u559c\u6b22\u7d2b\u83dc\u7684\u53ef\u4ee5\u591a\u653e\u4e9b\uff09 \u4e24\u4e2a\u9e21\u86cb \u76d0 2 \u514b","title":"\u8ba1\u7b97"},{"location":"dishes/soup/%E7%B4%AB%E8%8F%9C%E8%9B%8B%E8%8A%B1%E6%B1%A4/#_4","text":"\u5e72\u7d2b\u83dc\u7528\u6e05\u6c34\u6ce1 15 \u5206\u949f\uff0c\u635e\u8d77\u6ca5\u5e72\u6c34\u4efd\u5907\u7528\u3002 \u70ed\u9505\uff0c\u5012\u5165 1.5 \u5347\u6e05\u6c34\u3001\u534a\u52fa\u6cb9\u3001\u534a\u52fa\u76d0\u3002\u5f85\u6c34\u5f00\u540e\u653e\u5165\u7d2b\u83dc\u3002 \u7d2b\u83dc\u70e7\u5f00\u540e 3 \u5206\u949f\uff0c\u5c06\u6253\u597d\u7684\u86cb\u6db2\u5f90\u5f90\u5012\u5165\u9505\u5185\uff0c30 \u79d2\u65e2\u53ef\u8d77\u9505\u3002 \u6492\u4e0a\u8471\u82b1\uff0c\u8f6c\u5c0f\u706b 20 \u79d2\u3002 \u5173\u706b\uff0c\u51fa\u9505\u524d\u653e\u5165\u51e0\u6ef4\u9999\u6cb9\uff0c\u4e5f\u6709\u7684\u4f1a\u653e\u5165\u4e00\u70b9\u867e\u76ae\uff0c\u5473\u9053\u4e5f\u4e0d\u9519\u3002","title":"\u64cd\u4f5c"},{"location":"dishes/soup/%E7%B4%AB%E8%8F%9C%E8%9B%8B%E8%8A%B1%E6%B1%A4/#_5","text":"\u6c34\u5f00\u540e\uff0c\u5c06\u706b\u5173\u5c0f\uff0c\u5c06\u6253\u597d\u7684\u86cb\u6db2\u56f4\u7ed5\u4e2d\u95f4\u6cb8\u817e\u7684\u6c34\u5012\u5165\u3002\u4e3a\u4e86\u4f7f\u86cb\u82b1\u6bd4\u8f83\u5ae9\uff0c\u9505\u76d6\u76d6\u4e0a\u7184\u706d\u706b\u7b49\u534a\u5206\u949f\u540e\u518d\u6253\u5f00. \u5982\u679c\u559c\u6b22\u6d53\u7a20\u53e3\u611f\uff0c\u53ef\u52a0\u5165 2g \u6dc0\u7c89. \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/soup/%E7%BD%97%E5%AE%8B%E6%B1%A4/","text":"\u7f57\u5b8b\u6c64\u7684\u505a\u6cd5 \u7f57\u5b8b\u6c64\u662f\u4e00\u9053\u6e90\u81ea\u4fc4\u7f57\u65af\u751c\u83dc\u6c64\u7684\u6c64\u54c1\uff0c\u5728\u4f20\u5165\u4e0a\u6d77\u540e\u6709\u4e86\u672c\u571f\u5316\u7684\u505a\u6cd5\u3002\u5176\u5236\u4f5c\u8f83\u4e3a\u7b80\u5355\uff0c\u521d\u5b66\u8005\u53ea\u9700\u8981 2-3 \u5c0f\u65f6\u5373\u53ef\u5b8c\u6210\u3002 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u852c\u83dc\u9ad8\u6c64\uff08\u6b27\u82b9\u3001\u80e1\u841d\u535c\u3001\u6d0b\u8471\u4e09\u4ef6\u5957\uff09 \u725b\u8089\u9ad8\u6c64\uff08\u53ef\u7528\u3007\u6c64\u5b9d\u4ee3\u66ff\uff09 \u725b\u8089\uff08\u53ef\u9009\u725b\u8169\u8089\u6216\u725b\u5c3e\u8089\uff09 \u756a\u8304\uff08\u756a\u8304\u818f\u3001\u756a\u8304\u7f50\u5934\uff09 \u8ba1\u7b97 \u6bcf\u4efd\uff1a \u725b\u8089\u9ad8\u6c64 500 mL \u725b\u8089 250 g \uff08\u53ef\u9009\u7528\u725b\u8169\u8089\u6216\u725b\u5c3e\u8089\uff09 \u756a\u8304\u7f50\u5934 2 \u7f50 \uff08\u53ef\u7528\u756a\u8304\u66ff\u4ee3\u3001\u4f46\u98ce\u5473\u6b20\u4f73\uff09 \u756a\u8304\u818f 5 g \uff08\u589e\u52a0\u756a\u8304\u98ce\u5473\uff09 \u9a6c\u94c3\u85af 400 g \u6d0b\u8471 100 g \u80e1\u841d\u535c 100 g \u6b27\u82b9 100 g \u5305\u83dc 200 g \u7ea2\u80a0 100 - 200 g \u6a44\u6984\u6cb9 5 mL \uff08\u6a44\u6984\u6cb9\u7528\u4e8e\u852c\u83dc\u7684\u70f9\u5236\uff0c\u53ef\u4ee5\u7528\u690d\u7269\u6cb9\u4ee3\u66ff\uff09 \u690d\u7269\u6cb9 5 mL \uff08\u690d\u7269\u6cb9\u7528\u4e8e\u725b\u8089\u7684\u70f9\u5236\uff0c\u4e0d\u80fd\u7528\u6a44\u6984\u6cb9\u4ee3\u66ff\uff09 \u76d0 3 g \u9ed1\u80e1\u6912 18 g \u64cd\u4f5c \u5207\u914d\u51c6\u5907 \u6d0b\u8471\u3001\u80e1\u841d\u535c\u3001\u6b27\u82b9\u5207 1cm \u89c1\u65b9\u5c0f\u4e01 \u7ea2\u80a0\u3001\u9a6c\u94c3\u85af\u5207 2cm \u5757 \u5305\u83dc\u53bb\u6897\u540e\uff0c\u624b\u6495\u81f3 2cm \u7247 \u725b\u8089\u6492\u76d0 3 g \u3001\u9ed1\u80e1\u6912 3 g \u814c\u5236 5 \u5206\u949f \u714e\u5236\u8fc7\u7a0b \u5e73\u5e95\u9505\u70e7\u70ed\uff0c\u52a0\u5165\u690d\u7269\u6cb9 \u714e\u5236\u725b\u8089\uff0c\u76f4\u81f3\u8868\u9762 \u7126\u9ec4\u8272 \uff08\u53ef\u4ee5\u5e26\u751f\uff0c\u5343\u4e07\u522b\u7cca\u4e86\uff09\uff0c\u53d6\u51fa\u5907\u7528\u3002 \u70f9\u5236\u8fc7\u7a0b1\uff08\u524d\u4e00\u5c0f\u65f6\uff09 \u6c64\u9505\u70e7\u70ed\uff0c\u52a0\u5165\u6a44\u6984\u6cb9\u3001\u6d0b\u8471\u4e01\u3001\u80e1\u841d\u535c\u4e01\u3001\u6b27\u82b9\u4e01 \u7092\u81f3 \u6d0b\u8471\u900f\u660e \uff0c\u52a0\u5165\u756a\u8304\u818f\u3001\u756a\u8304\u7f50\u5934 \u52a0\u5165\u725b\u8089\u3001\u9a6c\u94c3\u85af\u4e01\uff0c\u7ffb\u7092\u5747\u5300 \u52a0\u6c34\u6ca1\u8fc7\u98df\u6750\uff0c\u4e2d\u706b\u70f9\u5236 1 \u5c0f\u65f6 \u70f9\u5236\u8fc7\u7a0b2\uff08\u540e\u534a\u5c0f\u65f6\uff09 \u5f00\u9505\u52a0\u5165\u5305\u83dc\u4e01\u3001\u7ea2\u80a0\u4e01\uff0c\u6405\u62cc\u5747\u5300 \u4e2d\u706b\u70f9\u5236\u534a\u5c0f\u65f6 \u5f00\u76d6\u52a0\u5165\u5269\u4f59 15 g \u76d0\uff0c\u6df7\u5408\u5747\u5300\u540e\u76db\u76d8 \u9644\u52a0\u5185\u5bb9 \u756a\u8304\u5c3d\u91cf\u4e0d\u7528\u65b0\u9c9c\u756a\u8304\u4ee3\u66ff\uff0c\u756a\u8304\u7f50\u5934+\u756a\u8304\u818f\u7684\u7ec4\u5408\u98ce\u5473\u66f4\u8db3 \u9664\u4e86\u80e1\u841d\u535c\u3001\u6d0b\u8471\u3001\u6b27\u82b9\u3001\u725b\u8089\u662f\u5fc5\u5907\u98df\u6750\u5916\uff0c\u5176\u4f59\u53ef\u81ea\u7531\u642d\u914d \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u7f57\u5b8b\u6c64"},{"location":"dishes/soup/%E7%BD%97%E5%AE%8B%E6%B1%A4/#_1","text":"\u7f57\u5b8b\u6c64\u662f\u4e00\u9053\u6e90\u81ea\u4fc4\u7f57\u65af\u751c\u83dc\u6c64\u7684\u6c64\u54c1\uff0c\u5728\u4f20\u5165\u4e0a\u6d77\u540e\u6709\u4e86\u672c\u571f\u5316\u7684\u505a\u6cd5\u3002\u5176\u5236\u4f5c\u8f83\u4e3a\u7b80\u5355\uff0c\u521d\u5b66\u8005\u53ea\u9700\u8981 2-3 \u5c0f\u65f6\u5373\u53ef\u5b8c\u6210\u3002","title":"\u7f57\u5b8b\u6c64\u7684\u505a\u6cd5"},{"location":"dishes/soup/%E7%BD%97%E5%AE%8B%E6%B1%A4/#_2","text":"\u852c\u83dc\u9ad8\u6c64\uff08\u6b27\u82b9\u3001\u80e1\u841d\u535c\u3001\u6d0b\u8471\u4e09\u4ef6\u5957\uff09 \u725b\u8089\u9ad8\u6c64\uff08\u53ef\u7528\u3007\u6c64\u5b9d\u4ee3\u66ff\uff09 \u725b\u8089\uff08\u53ef\u9009\u725b\u8169\u8089\u6216\u725b\u5c3e\u8089\uff09 \u756a\u8304\uff08\u756a\u8304\u818f\u3001\u756a\u8304\u7f50\u5934\uff09","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/soup/%E7%BD%97%E5%AE%8B%E6%B1%A4/#_3","text":"\u6bcf\u4efd\uff1a \u725b\u8089\u9ad8\u6c64 500 mL \u725b\u8089 250 g \uff08\u53ef\u9009\u7528\u725b\u8169\u8089\u6216\u725b\u5c3e\u8089\uff09 \u756a\u8304\u7f50\u5934 2 \u7f50 \uff08\u53ef\u7528\u756a\u8304\u66ff\u4ee3\u3001\u4f46\u98ce\u5473\u6b20\u4f73\uff09 \u756a\u8304\u818f 5 g \uff08\u589e\u52a0\u756a\u8304\u98ce\u5473\uff09 \u9a6c\u94c3\u85af 400 g \u6d0b\u8471 100 g \u80e1\u841d\u535c 100 g \u6b27\u82b9 100 g \u5305\u83dc 200 g \u7ea2\u80a0 100 - 200 g \u6a44\u6984\u6cb9 5 mL \uff08\u6a44\u6984\u6cb9\u7528\u4e8e\u852c\u83dc\u7684\u70f9\u5236\uff0c\u53ef\u4ee5\u7528\u690d\u7269\u6cb9\u4ee3\u66ff\uff09 \u690d\u7269\u6cb9 5 mL \uff08\u690d\u7269\u6cb9\u7528\u4e8e\u725b\u8089\u7684\u70f9\u5236\uff0c\u4e0d\u80fd\u7528\u6a44\u6984\u6cb9\u4ee3\u66ff\uff09 \u76d0 3 g \u9ed1\u80e1\u6912 18 g","title":"\u8ba1\u7b97"},{"location":"dishes/soup/%E7%BD%97%E5%AE%8B%E6%B1%A4/#_4","text":"","title":"\u64cd\u4f5c"},{"location":"dishes/soup/%E7%BD%97%E5%AE%8B%E6%B1%A4/#_5","text":"\u6d0b\u8471\u3001\u80e1\u841d\u535c\u3001\u6b27\u82b9\u5207 1cm \u89c1\u65b9\u5c0f\u4e01 \u7ea2\u80a0\u3001\u9a6c\u94c3\u85af\u5207 2cm \u5757 \u5305\u83dc\u53bb\u6897\u540e\uff0c\u624b\u6495\u81f3 2cm \u7247 \u725b\u8089\u6492\u76d0 3 g \u3001\u9ed1\u80e1\u6912 3 g \u814c\u5236 5 \u5206\u949f","title":"\u5207\u914d\u51c6\u5907"},{"location":"dishes/soup/%E7%BD%97%E5%AE%8B%E6%B1%A4/#_6","text":"\u5e73\u5e95\u9505\u70e7\u70ed\uff0c\u52a0\u5165\u690d\u7269\u6cb9 \u714e\u5236\u725b\u8089\uff0c\u76f4\u81f3\u8868\u9762 \u7126\u9ec4\u8272 \uff08\u53ef\u4ee5\u5e26\u751f\uff0c\u5343\u4e07\u522b\u7cca\u4e86\uff09\uff0c\u53d6\u51fa\u5907\u7528\u3002","title":"\u714e\u5236\u8fc7\u7a0b"},{"location":"dishes/soup/%E7%BD%97%E5%AE%8B%E6%B1%A4/#1","text":"\u6c64\u9505\u70e7\u70ed\uff0c\u52a0\u5165\u6a44\u6984\u6cb9\u3001\u6d0b\u8471\u4e01\u3001\u80e1\u841d\u535c\u4e01\u3001\u6b27\u82b9\u4e01 \u7092\u81f3 \u6d0b\u8471\u900f\u660e \uff0c\u52a0\u5165\u756a\u8304\u818f\u3001\u756a\u8304\u7f50\u5934 \u52a0\u5165\u725b\u8089\u3001\u9a6c\u94c3\u85af\u4e01\uff0c\u7ffb\u7092\u5747\u5300 \u52a0\u6c34\u6ca1\u8fc7\u98df\u6750\uff0c\u4e2d\u706b\u70f9\u5236 1 \u5c0f\u65f6","title":"\u70f9\u5236\u8fc7\u7a0b1\uff08\u524d\u4e00\u5c0f\u65f6\uff09"},{"location":"dishes/soup/%E7%BD%97%E5%AE%8B%E6%B1%A4/#2","text":"\u5f00\u9505\u52a0\u5165\u5305\u83dc\u4e01\u3001\u7ea2\u80a0\u4e01\uff0c\u6405\u62cc\u5747\u5300 \u4e2d\u706b\u70f9\u5236\u534a\u5c0f\u65f6 \u5f00\u76d6\u52a0\u5165\u5269\u4f59 15 g \u76d0\uff0c\u6df7\u5408\u5747\u5300\u540e\u76db\u76d8","title":"\u70f9\u5236\u8fc7\u7a0b2\uff08\u540e\u534a\u5c0f\u65f6\uff09"},{"location":"dishes/soup/%E7%BD%97%E5%AE%8B%E6%B1%A4/#_7","text":"\u756a\u8304\u5c3d\u91cf\u4e0d\u7528\u65b0\u9c9c\u756a\u8304\u4ee3\u66ff\uff0c\u756a\u8304\u7f50\u5934+\u756a\u8304\u818f\u7684\u7ec4\u5408\u98ce\u5473\u66f4\u8db3 \u9664\u4e86\u80e1\u841d\u535c\u3001\u6d0b\u8471\u3001\u6b27\u82b9\u3001\u725b\u8089\u662f\u5fc5\u5907\u98df\u6750\u5916\uff0c\u5176\u4f59\u53ef\u81ea\u7531\u642d\u914d \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/soup/%E8%A5%BF%E7%BA%A2%E6%9F%BF%E9%B8%A1%E8%9B%8B%E6%B1%A4/","text":"\u897f\u7ea2\u67ff\u9e21\u86cb\u6c64 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u897f\u7ea2\u67ff \u9e21\u86cb \u9999\u6cb9 \u5473\u7d20 \u76d0 \u8471\u3001\u59dc\u3001\u849c \u8ba1\u7b97 \u897f\u7ea2\u67ff 1 \u4e2a \u9e21\u86cb 1-2 \u4e2a\uff08\u4f9d\u7167\u81ea\u5df1\u7684\u53e3\u5473\u800c\u5b9a\uff0c\u559c\u6b22\u5403\u9e21\u86cb\u5c31\u653e 2 \u4e2a\uff0c\u4e00\u822c\u5c31\u653e 1 \u4e2a\uff09 \u9999\u6cb9 2 \u6ef4 \u5473\u7d20 5 \u514b\uff08\u53ef\u9009\uff09 \u76d0 15 \u514b \u8471\u3001\u59dc\u3001\u849c\u5171 15 \u514b \u64cd\u4f5c \u5c06\u897f\u7ea2\u67ff\u6d17\u51c0\uff0c\u5207\u5757\u3002 \u8471\u59dc\u849c\u5207\u788e\u3002 \u9e21\u86cb\u6253\u5230\u7897\u4e2d\uff0c\u7528\u7b77\u5b50\uff08\u6216\u6253\u86cb\u5668\uff09\u6405\u62cc\u5747\u5300\u3002 \u70ed\u9505\uff0c\u5e76\u653e\u5165 15 \u6beb\u5347\u7684\u6cb9\uff0c\u5f85\u80fd\u4ece\u6cb9\u4e2d\u770b\u5230\u5192\u51fa\u4e00\u4e1d\u70df\u65f6\uff0c\u653e\u5165\u8471\u59dc\u849c\u7ffb\u7092 30 \u79d2\u3002 \u653e\u5165\u897f\u7ea2\u67ff\u7ffb\u7092 1 \u5206\u949f\u3002 \u5012\u5165\u6c34\uff0c\u6c34\u7684\u9ad8\u5ea6\u5927\u7ea6\u4e3a\u9505\u5185\u83dc\u54c1\u9ad8\u5ea6\u7684 1.2 \u500d\uff0c\u5e76\u653e\u5165\u76d0\u3002 \u5f85\u5f00\u9505\u540e\uff0c\u5c06\u9e21\u86cb\u6db2\u653e\u5165\uff0c\u5e76\u7528\u7b77\u5b50\u5c06\u9e21\u86cb\u6253\u6563\uff0c\u653e\u5165\u5473\u7d20\u548c\u9999\u6cb9\u3002 \u7b49\u5f85 30 \u79d2\uff0c\u5173\u706b\u51fa\u9505\u3002 \u9644\u52a0\u5185\u5bb9 \u5473\u7d20\u53ef\u52a0\u53ef\u4e0d\u52a0\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u897f\u7ea2\u67ff\u9e21\u86cb\u6c64"},{"location":"dishes/soup/%E8%A5%BF%E7%BA%A2%E6%9F%BF%E9%B8%A1%E8%9B%8B%E6%B1%A4/#_1","text":"","title":"\u897f\u7ea2\u67ff\u9e21\u86cb\u6c64"},{"location":"dishes/soup/%E8%A5%BF%E7%BA%A2%E6%9F%BF%E9%B8%A1%E8%9B%8B%E6%B1%A4/#_2","text":"\u897f\u7ea2\u67ff \u9e21\u86cb \u9999\u6cb9 \u5473\u7d20 \u76d0 \u8471\u3001\u59dc\u3001\u849c","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/soup/%E8%A5%BF%E7%BA%A2%E6%9F%BF%E9%B8%A1%E8%9B%8B%E6%B1%A4/#_3","text":"\u897f\u7ea2\u67ff 1 \u4e2a \u9e21\u86cb 1-2 \u4e2a\uff08\u4f9d\u7167\u81ea\u5df1\u7684\u53e3\u5473\u800c\u5b9a\uff0c\u559c\u6b22\u5403\u9e21\u86cb\u5c31\u653e 2 \u4e2a\uff0c\u4e00\u822c\u5c31\u653e 1 \u4e2a\uff09 \u9999\u6cb9 2 \u6ef4 \u5473\u7d20 5 \u514b\uff08\u53ef\u9009\uff09 \u76d0 15 \u514b \u8471\u3001\u59dc\u3001\u849c\u5171 15 \u514b","title":"\u8ba1\u7b97"},{"location":"dishes/soup/%E8%A5%BF%E7%BA%A2%E6%9F%BF%E9%B8%A1%E8%9B%8B%E6%B1%A4/#_4","text":"\u5c06\u897f\u7ea2\u67ff\u6d17\u51c0\uff0c\u5207\u5757\u3002 \u8471\u59dc\u849c\u5207\u788e\u3002 \u9e21\u86cb\u6253\u5230\u7897\u4e2d\uff0c\u7528\u7b77\u5b50\uff08\u6216\u6253\u86cb\u5668\uff09\u6405\u62cc\u5747\u5300\u3002 \u70ed\u9505\uff0c\u5e76\u653e\u5165 15 \u6beb\u5347\u7684\u6cb9\uff0c\u5f85\u80fd\u4ece\u6cb9\u4e2d\u770b\u5230\u5192\u51fa\u4e00\u4e1d\u70df\u65f6\uff0c\u653e\u5165\u8471\u59dc\u849c\u7ffb\u7092 30 \u79d2\u3002 \u653e\u5165\u897f\u7ea2\u67ff\u7ffb\u7092 1 \u5206\u949f\u3002 \u5012\u5165\u6c34\uff0c\u6c34\u7684\u9ad8\u5ea6\u5927\u7ea6\u4e3a\u9505\u5185\u83dc\u54c1\u9ad8\u5ea6\u7684 1.2 \u500d\uff0c\u5e76\u653e\u5165\u76d0\u3002 \u5f85\u5f00\u9505\u540e\uff0c\u5c06\u9e21\u86cb\u6db2\u653e\u5165\uff0c\u5e76\u7528\u7b77\u5b50\u5c06\u9e21\u86cb\u6253\u6563\uff0c\u653e\u5165\u5473\u7d20\u548c\u9999\u6cb9\u3002 \u7b49\u5f85 30 \u79d2\uff0c\u5173\u706b\u51fa\u9505\u3002","title":"\u64cd\u4f5c"},{"location":"dishes/soup/%E8%A5%BF%E7%BA%A2%E6%9F%BF%E9%B8%A1%E8%9B%8B%E6%B1%A4/#_5","text":"\u5473\u7d20\u53ef\u52a0\u53ef\u4e0d\u52a0\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/soup/%E9%87%91%E9%92%88%E8%8F%87%E6%B1%A4/","text":"\u91d1\u9488\u83c7\u6c64\u7684\u505a\u6cd5 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u91d1\u9488\u83c7 \u9e21\u86cb\uff08\u5982\u9700\u8981\uff09 \u8ba1\u7b97 \u6bcf\u4efd\uff1a \u91d1\u9488\u83c7 400-500 \u514b \uff08\u5e02\u573a\u91cc\u9762\u552e\u5356\u7684\u4e00\u888b\u5373\u53ef\uff09 \u98df\u76d0 15 \u514b \u5473\u7cbe 5 \u514b \u64cd\u4f5c \u91d1\u9488\u83c7\u5f92\u624b\u63b0\u6563\uff0c\u8d8a\u6563\u8d8a\u597d \u4e0d\u7136\u5bb9\u6613\u85cf\u7259 \uff0c\u6d17\u51c0\u5907\u7528\u3002 \u7528\u83dc\u5200\u6216\u8005\u6c34\u679c\u5200\u5c06\u4e0a\u8ff0\u91d1\u9488\u83c7\u6bb5\u6bb5\u5207\uff0c\u53ef\u4f9d\u636e\u4e2a\u4eba\u559c\u597d\uff0c\u4f46\u957f\u5ea6\u4e0d\u5b9c\u8d85\u8fc7 5 cm\u3002 \u5c06\u91d1\u9488\u83c7\u653e\u5165\u9505\u4e2d\uff0c\u52a0\u6c34\u6ca1\u8fc7\u7ea6\u98df\u6750\u603b\u9ad8\u5ea6 1.1 \u500d\uff0c\u6cb8\u817e\u540e \u7b49\u5f85 3 \u5206\u949f \u3002 \u52a0\u5165\u5473\u7cbe\u548c\u98df\u76d0\u5e76\u6405\u62cc\u3002 \u7ee7\u7eed\u52a0\u70ed\u7ea6 30 \u79d2\uff0c\u5173\u706b\u88c5\u76d8\u3002 \u9644\u52a0\u5185\u5bb9 \u5982\u679c\u559c\u6b22\u5728\u6c64\u91cc\u52a0\u5165\u9e21\u86cb\uff0c\u53ef\u5728\u6b65\u9aa4 3 \u4e2d\u6c34\u6cb8\u817e\u4e4b\u540e\u5c06\u6253\u6563\u7684\u9e21\u86cb\u6db2\u5012\u5165\u9505\u4e2d\u3002 \u51fa\u9505\u540e\u53ef\u52a0\u5165 3-4 \u6ef4\u9999\u6cb9\uff08\u6216\u8005\u9ebb\u6cb9\uff09\u589e\u9999\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u91d1\u9488\u83c7\u6c64"},{"location":"dishes/soup/%E9%87%91%E9%92%88%E8%8F%87%E6%B1%A4/#_1","text":"","title":"\u91d1\u9488\u83c7\u6c64\u7684\u505a\u6cd5"},{"location":"dishes/soup/%E9%87%91%E9%92%88%E8%8F%87%E6%B1%A4/#_2","text":"\u91d1\u9488\u83c7 \u9e21\u86cb\uff08\u5982\u9700\u8981\uff09","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/soup/%E9%87%91%E9%92%88%E8%8F%87%E6%B1%A4/#_3","text":"\u6bcf\u4efd\uff1a \u91d1\u9488\u83c7 400-500 \u514b \uff08\u5e02\u573a\u91cc\u9762\u552e\u5356\u7684\u4e00\u888b\u5373\u53ef\uff09 \u98df\u76d0 15 \u514b \u5473\u7cbe 5 \u514b","title":"\u8ba1\u7b97"},{"location":"dishes/soup/%E9%87%91%E9%92%88%E8%8F%87%E6%B1%A4/#_4","text":"\u91d1\u9488\u83c7\u5f92\u624b\u63b0\u6563\uff0c\u8d8a\u6563\u8d8a\u597d \u4e0d\u7136\u5bb9\u6613\u85cf\u7259 \uff0c\u6d17\u51c0\u5907\u7528\u3002 \u7528\u83dc\u5200\u6216\u8005\u6c34\u679c\u5200\u5c06\u4e0a\u8ff0\u91d1\u9488\u83c7\u6bb5\u6bb5\u5207\uff0c\u53ef\u4f9d\u636e\u4e2a\u4eba\u559c\u597d\uff0c\u4f46\u957f\u5ea6\u4e0d\u5b9c\u8d85\u8fc7 5 cm\u3002 \u5c06\u91d1\u9488\u83c7\u653e\u5165\u9505\u4e2d\uff0c\u52a0\u6c34\u6ca1\u8fc7\u7ea6\u98df\u6750\u603b\u9ad8\u5ea6 1.1 \u500d\uff0c\u6cb8\u817e\u540e \u7b49\u5f85 3 \u5206\u949f \u3002 \u52a0\u5165\u5473\u7cbe\u548c\u98df\u76d0\u5e76\u6405\u62cc\u3002 \u7ee7\u7eed\u52a0\u70ed\u7ea6 30 \u79d2\uff0c\u5173\u706b\u88c5\u76d8\u3002","title":"\u64cd\u4f5c"},{"location":"dishes/soup/%E9%87%91%E9%92%88%E8%8F%87%E6%B1%A4/#_5","text":"\u5982\u679c\u559c\u6b22\u5728\u6c64\u91cc\u52a0\u5165\u9e21\u86cb\uff0c\u53ef\u5728\u6b65\u9aa4 3 \u4e2d\u6c34\u6cb8\u817e\u4e4b\u540e\u5c06\u6253\u6563\u7684\u9e21\u86cb\u6db2\u5012\u5165\u9505\u4e2d\u3002 \u51fa\u9505\u540e\u53ef\u52a0\u5165 3-4 \u6ef4\u9999\u6cb9\uff08\u6216\u8005\u9ebb\u6cb9\uff09\u589e\u9999\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/soup/%E6%98%82%E5%88%BA%E9%B1%BC%E8%B1%86%E8%85%90%E6%B1%A4/%E6%98%82%E5%88%BA%E9%B1%BC%E8%B1%86%E8%85%90%E6%B1%A4/","text":"\u6602\u523a\u9c7c\u8c46\u8150\u6c64\u7684\u505a\u6cd5 \u6602\u523a\u9c7c/\u6c99\u5149\u9c7c \u8c46\u8150\u6c64 \u523a\u5c11 \u8089\u5ae9 \u8425\u517b\u4e30\u76db\u3001\u9002\u5408\u4efb\u4f55\u5e74\u9f84\u7684\u5c0f\u4f19\u4f34 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u6602\u523a\u9c7c\u6216\u8005\u6c99\u5149\u9c7c \u8c46\u8150 \u9999\u8471 \u59dc \u98df\u7528\u6cb9 \u6599\u9152 \u98df\u7528\u76d0 \u80e1\u6912\u7c89 \u8ba1\u7b97 \u6bcf\u4efd\uff1a \u6602\u523a\u9c7c\u6216\u8005\u6c99\u5149\u9c7c \u4e00\u6761 \u8c46\u8150 100 g \u9999\u8471 \u4e00\u6839 \u59dc \u4e00\u5757 \u80e1\u6912\u7c89 3-5 g \u98df\u7528\u6cb9 15 ml \u98df\u7528\u76d0 10-15 g \u5f00\u6c34 1L \u64cd\u4f5c \u9c7c\u5904\u7406\u597d\u540e\u6d17\u51c0\uff0c\uff08\u7279\u522b\u6ce8\u610f\u809a\u5185\u7684\u8840\u4e1d\u3001\u4e0d\u6d17\u5e72\u51c0\u4f1a\u6709\u8165\u5473\uff09\uff0c\u653e\u5165\u5927\u7897\u4e2d\uff0c\u5012\u5165\u6599\u9152\u300110g \u59dc\u7247\u30015g \u76d0\uff0c\u814c\u5236 15 \u5206\u949f \u8c46\u8150\u5207\u5757\uff0c\u653e\u5165\u51c9\u6c34\u6d78\u6ce1 5 \u5206\u949f\uff0c\u635e\u51fa\u5907\u7528 \u714e\u9c7c\u524d\uff0c\u5148\u7528\u751f\u59dc\u7247\u64e6\u4e00\u4e0b\u9505\u9632\u6b62\u7c98\u9505\uff0c\u5012\u5165\u6cb9\uff08\u6cb9\u91cf\u4e3a 15ml * \u9c7c\u7684\u6761\u6570 \uff09\uff0c\u70e7\u70ed\u540e\u653e\u5165\u9c7c\u714e 2~3 \u5206\u949f\uff0c\u671f\u95f4\u9700\u8981\u6643\u52a8\u4e00\u4e0b\u9c7c\uff0c\u9632\u6b62\u7c98\u5e95\uff0c\u4e14\u9700\u8981\u7ffb\u4e00\u6b21\u8eab \u5f85\u9c7c\u5168\u90e8\u714e\u597d\u4e4b\u540e\uff0c\u5012\u5165\u5f00\u6c34\u3001\u5c11\u8bb8\u6599\u9152\u3001\u59dc\u7247\uff0c\u5c0f\u706b\u8f6c\u81f3\u5927\u706b\uff0c\u76d6\u4e0a\u9505\u76d6\u3001\u5927\u706b\u716e 10 \u5206\u949f\u5de6\u53f3\uff08\u6c34\u8981\u7a0d\u5fae\u591a\u4e00\u4e9b\uff0c\u540e\u9762\u4f1a\u84b8\u53d1\u6389\u4e00\u4e9b\uff09 \u89c1\u6c64\u53d8\u767d\u540e\u5012\u5165\u51c6\u5907\u597d\u7684\u8c46\u8150\uff0c\u8c03\u4e2d\u706b\u518d\u716e 5 \u5206\u949f\uff0c\u52a0\u5165 10g \u76d0\u30013g \u80e1\u6912\u7c89\u8c03\u5473\uff0c\u6700\u540e\u6492\u4e0a\u8471\u82b1\u51fa\u9505 \u9644\u52a0\u5185\u5bb9 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u6602\u523a\u9c7c\u8c46\u8150\u6c64"},{"location":"dishes/soup/%E6%98%82%E5%88%BA%E9%B1%BC%E8%B1%86%E8%85%90%E6%B1%A4/%E6%98%82%E5%88%BA%E9%B1%BC%E8%B1%86%E8%85%90%E6%B1%A4/#_1","text":"\u6602\u523a\u9c7c/\u6c99\u5149\u9c7c \u8c46\u8150\u6c64 \u523a\u5c11 \u8089\u5ae9 \u8425\u517b\u4e30\u76db\u3001\u9002\u5408\u4efb\u4f55\u5e74\u9f84\u7684\u5c0f\u4f19\u4f34","title":"\u6602\u523a\u9c7c\u8c46\u8150\u6c64\u7684\u505a\u6cd5"},{"location":"dishes/soup/%E6%98%82%E5%88%BA%E9%B1%BC%E8%B1%86%E8%85%90%E6%B1%A4/%E6%98%82%E5%88%BA%E9%B1%BC%E8%B1%86%E8%85%90%E6%B1%A4/#_2","text":"\u6602\u523a\u9c7c\u6216\u8005\u6c99\u5149\u9c7c \u8c46\u8150 \u9999\u8471 \u59dc \u98df\u7528\u6cb9 \u6599\u9152 \u98df\u7528\u76d0 \u80e1\u6912\u7c89","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/soup/%E6%98%82%E5%88%BA%E9%B1%BC%E8%B1%86%E8%85%90%E6%B1%A4/%E6%98%82%E5%88%BA%E9%B1%BC%E8%B1%86%E8%85%90%E6%B1%A4/#_3","text":"\u6bcf\u4efd\uff1a \u6602\u523a\u9c7c\u6216\u8005\u6c99\u5149\u9c7c \u4e00\u6761 \u8c46\u8150 100 g \u9999\u8471 \u4e00\u6839 \u59dc \u4e00\u5757 \u80e1\u6912\u7c89 3-5 g \u98df\u7528\u6cb9 15 ml \u98df\u7528\u76d0 10-15 g \u5f00\u6c34 1L","title":"\u8ba1\u7b97"},{"location":"dishes/soup/%E6%98%82%E5%88%BA%E9%B1%BC%E8%B1%86%E8%85%90%E6%B1%A4/%E6%98%82%E5%88%BA%E9%B1%BC%E8%B1%86%E8%85%90%E6%B1%A4/#_4","text":"\u9c7c\u5904\u7406\u597d\u540e\u6d17\u51c0\uff0c\uff08\u7279\u522b\u6ce8\u610f\u809a\u5185\u7684\u8840\u4e1d\u3001\u4e0d\u6d17\u5e72\u51c0\u4f1a\u6709\u8165\u5473\uff09\uff0c\u653e\u5165\u5927\u7897\u4e2d\uff0c\u5012\u5165\u6599\u9152\u300110g \u59dc\u7247\u30015g \u76d0\uff0c\u814c\u5236 15 \u5206\u949f \u8c46\u8150\u5207\u5757\uff0c\u653e\u5165\u51c9\u6c34\u6d78\u6ce1 5 \u5206\u949f\uff0c\u635e\u51fa\u5907\u7528 \u714e\u9c7c\u524d\uff0c\u5148\u7528\u751f\u59dc\u7247\u64e6\u4e00\u4e0b\u9505\u9632\u6b62\u7c98\u9505\uff0c\u5012\u5165\u6cb9\uff08\u6cb9\u91cf\u4e3a 15ml * \u9c7c\u7684\u6761\u6570 \uff09\uff0c\u70e7\u70ed\u540e\u653e\u5165\u9c7c\u714e 2~3 \u5206\u949f\uff0c\u671f\u95f4\u9700\u8981\u6643\u52a8\u4e00\u4e0b\u9c7c\uff0c\u9632\u6b62\u7c98\u5e95\uff0c\u4e14\u9700\u8981\u7ffb\u4e00\u6b21\u8eab \u5f85\u9c7c\u5168\u90e8\u714e\u597d\u4e4b\u540e\uff0c\u5012\u5165\u5f00\u6c34\u3001\u5c11\u8bb8\u6599\u9152\u3001\u59dc\u7247\uff0c\u5c0f\u706b\u8f6c\u81f3\u5927\u706b\uff0c\u76d6\u4e0a\u9505\u76d6\u3001\u5927\u706b\u716e 10 \u5206\u949f\u5de6\u53f3\uff08\u6c34\u8981\u7a0d\u5fae\u591a\u4e00\u4e9b\uff0c\u540e\u9762\u4f1a\u84b8\u53d1\u6389\u4e00\u4e9b\uff09 \u89c1\u6c64\u53d8\u767d\u540e\u5012\u5165\u51c6\u5907\u597d\u7684\u8c46\u8150\uff0c\u8c03\u4e2d\u706b\u518d\u716e 5 \u5206\u949f\uff0c\u52a0\u5165 10g \u76d0\u30013g \u80e1\u6912\u7c89\u8c03\u5473\uff0c\u6700\u540e\u6492\u4e0a\u8471\u82b1\u51fa\u9505","title":"\u64cd\u4f5c"},{"location":"dishes/soup/%E6%98%82%E5%88%BA%E9%B1%BC%E8%B1%86%E8%85%90%E6%B1%A4/%E6%98%82%E5%88%BA%E9%B1%BC%E8%B1%86%E8%85%90%E6%B1%A4/#_5","text":"\u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/soup/%E8%8F%8C%E8%8F%87%E7%82%96%E4%B9%B3%E9%B8%BD/%E8%8F%8C%E8%8F%87%E7%82%96%E4%B9%B3%E9%B8%BD/","text":"\u83cc\u83c7\u7096\u4e73\u9e3d\u7684\u505a\u6cd5 \u83cc\u83c7\u7096\u4e73\u9e3d \u6c64\u9c9c\u3001\u8089\u5ae9\u3001\u8425\u517b\u4e30\u5bcc \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u4e73\u9e3d \u83cc\u83c7 \u7389\u7c73 \u59dc \u6599\u9152 \u98df\u7528\u76d0 \u74e6\u7f50\u6216\u8005\u9ad8\u538b\u9505 \u8ba1\u7b97 2 \u4eba\u4efd\uff1a \u4e73\u9e3d 300 g \u83cc\u83c7 100 g \u7389\u7c73 200 g \u59dc 30 g \u6599\u9152 20 g \u98df\u7528\u76d0 10 g \u64cd\u4f5c \u51b7\u6c34\u6d17\u5e72\u51c0\u70ed\u5fc3\u644a\u4e3b\u5904\u7406\u597d\u7684\u4e73\u9e3d \u51b7\u6c34\u9505\u4e2d\u653e\u5165\u6d17\u5e72\u51c0\u7684\u4e73\u9e3d\uff0c\u52a0\u5165 3 \u52fa\u6599\u9152\u4e0e\u59dc\uff0c\u6c34\u716e\u5f00\u5373\u53ef\u635e\u51fa\u4e73\u9e3d\uff0c\u8981\u4e0d\u7136\u4f1a\u4e22\u5931\u8425\u517b \u628a\u4e73\u9e3d\u653e\u5230\u9ad8\u538b\u7f29\u6216\u8005\u74e6\u7f50\u4e2d\u3001\u5012\u5165\u7684\u6c34\u8981\u6ca1\u8fc7\u4e73\u9e3d\uff0c\u653e\u5165\u751f\u59dc 20 g\uff0c\u7389\u7c73 200 g\u3001\u83cc\u83c7 100 g \u6ce8\u610f\uff1a\u9ad8\u538b\u9505 30 \u5206\u949f\uff0c\u74e6\u7f50\u9700\u5728\u6c34\u70e7\u5f00\u540e\u8f6c\u5c0f\u706b\u6162\u7096 40-60 \u5206\u949f * \u65f6\u95f4\u5230\u4e86\uff0c\u76db\u5230\u7897\u4e2d\uff0c\u52a0\u5165 3~5g \u76d0 \u5373\u53ef \u9644\u52a0\u5185\u5bb9 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u83cc\u83c7\u7096\u4e73\u9e3d"},{"location":"dishes/soup/%E8%8F%8C%E8%8F%87%E7%82%96%E4%B9%B3%E9%B8%BD/%E8%8F%8C%E8%8F%87%E7%82%96%E4%B9%B3%E9%B8%BD/#_1","text":"\u83cc\u83c7\u7096\u4e73\u9e3d \u6c64\u9c9c\u3001\u8089\u5ae9\u3001\u8425\u517b\u4e30\u5bcc","title":"\u83cc\u83c7\u7096\u4e73\u9e3d\u7684\u505a\u6cd5"},{"location":"dishes/soup/%E8%8F%8C%E8%8F%87%E7%82%96%E4%B9%B3%E9%B8%BD/%E8%8F%8C%E8%8F%87%E7%82%96%E4%B9%B3%E9%B8%BD/#_2","text":"\u4e73\u9e3d \u83cc\u83c7 \u7389\u7c73 \u59dc \u6599\u9152 \u98df\u7528\u76d0 \u74e6\u7f50\u6216\u8005\u9ad8\u538b\u9505","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/soup/%E8%8F%8C%E8%8F%87%E7%82%96%E4%B9%B3%E9%B8%BD/%E8%8F%8C%E8%8F%87%E7%82%96%E4%B9%B3%E9%B8%BD/#_3","text":"2 \u4eba\u4efd\uff1a \u4e73\u9e3d 300 g \u83cc\u83c7 100 g \u7389\u7c73 200 g \u59dc 30 g \u6599\u9152 20 g \u98df\u7528\u76d0 10 g","title":"\u8ba1\u7b97"},{"location":"dishes/soup/%E8%8F%8C%E8%8F%87%E7%82%96%E4%B9%B3%E9%B8%BD/%E8%8F%8C%E8%8F%87%E7%82%96%E4%B9%B3%E9%B8%BD/#_4","text":"\u51b7\u6c34\u6d17\u5e72\u51c0\u70ed\u5fc3\u644a\u4e3b\u5904\u7406\u597d\u7684\u4e73\u9e3d \u51b7\u6c34\u9505\u4e2d\u653e\u5165\u6d17\u5e72\u51c0\u7684\u4e73\u9e3d\uff0c\u52a0\u5165 3 \u52fa\u6599\u9152\u4e0e\u59dc\uff0c\u6c34\u716e\u5f00\u5373\u53ef\u635e\u51fa\u4e73\u9e3d\uff0c\u8981\u4e0d\u7136\u4f1a\u4e22\u5931\u8425\u517b \u628a\u4e73\u9e3d\u653e\u5230\u9ad8\u538b\u7f29\u6216\u8005\u74e6\u7f50\u4e2d\u3001\u5012\u5165\u7684\u6c34\u8981\u6ca1\u8fc7\u4e73\u9e3d\uff0c\u653e\u5165\u751f\u59dc 20 g\uff0c\u7389\u7c73 200 g\u3001\u83cc\u83c7 100 g \u6ce8\u610f\uff1a\u9ad8\u538b\u9505 30 \u5206\u949f\uff0c\u74e6\u7f50\u9700\u5728\u6c34\u70e7\u5f00\u540e\u8f6c\u5c0f\u706b\u6162\u7096 40-60 \u5206\u949f * \u65f6\u95f4\u5230\u4e86\uff0c\u76db\u5230\u7897\u4e2d\uff0c\u52a0\u5165 3~5g \u76d0 \u5373\u53ef","title":"\u64cd\u4f5c"},{"location":"dishes/soup/%E8%8F%8C%E8%8F%87%E7%82%96%E4%B9%B3%E9%B8%BD/%E8%8F%8C%E8%8F%87%E7%82%96%E4%B9%B3%E9%B8%BD/#_5","text":"\u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/staple/%E6%89%8B%E5%B7%A5%E6%B0%B4%E9%A5%BA/","text":"\u624b\u5de5\u6c34\u997a\u7684\u505a\u6cd5 \u997a\u5b50\u662f\u4e00\u9053\u975e\u5e38\u597d\u5403\u7684\u4e3b\u98df\u4e4b\u4e00\u3002\u9971\u809a\u4e14\u6613\u4e8e\u6839\u636e\u81ea\u5df1\u53e3\u5473\u8fdb\u884c\u8c03\u5473\uff0c\u9002\u5408\u5728 US \u7684\u540c\u5b66\u5403\u4e0d\u5230\u6c34\u997a\u89e3\u998b\u3002\u4e00\u822c\u521d\u5b66\u8005\u9700\u8981 3 \u5c0f\u65f6\u5b8c\u6210\uff0c\u96be\u5ea6\u8f83\u5927 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u64c0\u9762\u6756 \u9762\u7c89 \u51b7\u6c34 \u76f4\u5f84 30cm \u4ee5\u4e0a\u7684\u76c6 \u829d\u9ebb\u9999\u6cb9 \u8ba1\u7b97 -\u5355\u4eba\uff0c\u7ea6 20 \u53ea \u6bcf\u4efd\uff1a \u9762\u7c89 200g \u51b7\u6c34 150ml \u829d\u9ebb\u9999\u6cb9 2-3ml \u7626\u8089\u672b 250g \u80a5\u8089\u672b 20g #\u4e0d\u559c\u53ef\u4e0d\u52a0 \u59dc 3g \u8471 15g \u76d0 3g \u8017\u6cb9 2ml \u9999\u6cb9 2ml \u751f\u62bd 2ml \u9e21\u86cb 1 \u4e2a \u64cd\u4f5c \u5236\u4f5c\u997a\u5b50\u76ae \u76c6\u4e2d\u52a0\u5165\u6240\u6709\u9762\u7c89 \u52a0\u5165\u829d\u9ebb\u9999\u6cb9 \u9762\u7c89\u4e2d\u592e\u6316\u5c0f\u6d1e \u5206 4-5 \u6b21\u52a0\u5165\u6c34\uff0c\u5e76\u6405\u548c\uff0c\u5f53\u51fa\u73b0\u788e\u672b\u72b6\u7684\u7a0d\u5fae\u5e72\u71e5\u9762\u56e2\u65f6 \u53d6\u6d88\u52a0\u6c34\uff0c\u7528\u624b\u5c06\u9762\u56e2\u538b\u5b9e \u9762\u56e2\u538b\u5b9e\u81f3\u53ef\u628a\u76c6\u5468\u56f4\u7684\u9762\u7c89\u7eb3\u5165\u5373\u53ef\uff0c\u6b64\u6b65\u9aa4\u4e3a\u9762\u5149\u76c6\u5149 \u5c06\u9762\u56e2\u7f6e\u4e8e\u684c\u4e0a\uff0c\u76c6\u5012\u6263\u4e8e\u684c\u4e0a\uff0c\u73af\u5883\u6e29\u5ea6\u4e3a 25 \u5ea6\u5de6\u53f3\uff0c\u4f7f\u9762\u56e2\u9192\u53d1\u7ea6 45min \u9192\u53d1\u5b8c\u6210\u540e\uff0c\u5c06\u9762\u56e2\u6413\u6210\u6761\u72b6\uff0c\u5408\u6210\u4e00\u56e2\uff0c\u518d\u6b21\u6413\u6210\u6761\uff0c\u91cd\u590d 3 \u6b21 \u64c0\u6210\u6761\u72b6\uff0c\u5207\u6210 20 \u4efd\u5747\u5300\u5927\u5c0f\u9762\u56e2\uff0c\u5e76\u6413\u6210\u76f4\u5f84\u7ea6 3-3.5cm \u7684\u7403\u72b6 \u538b\u6241\u9762\u56e2\uff0c\u5728\u624b\u4e0a\uff0c\u684c\u4e0a\uff0c\u64c0\u9762\u6756\u4e0a\uff0c\u53ca\u9762\u56e2\u4e0a\u6492\u4e0a\u9762\u7c89\uff0c\u6b64\u6b65\u9aa4\u9632\u6b62\u9762\u56e2\u53d1\u7c98 \u7528\u64c0\u9762\u6756\u5c06\u9762\u56e2\u64c0\u5e73\uff0c\u7ea6 8cm \u76f4\u5f84\uff0c\u539a\u7ea6 2mm\uff0c\u4e2d\u95f4\u7565\u5fae\u6bd4\u56db\u5468\u539a 1mm \u62cc\u9985 \u732a\u8089\u53bb\u76ae,\u4fdd\u7559\u90e8\u5206\u80a5\u8089,\u5207\u6210\u5c0f\u5757 \u83dc\u5200\uff08\u5efa\u8bae\u4e24\u628a\uff09\u5c06\u732a\u8089\u5241\u6210\u8089\u6cab,\u653e\u5165\u7897\u4e2d \u8471\u3001\u59dc\u5207\u6210\u672b,\u653e\u5165\u8089\u7897\u4e2d\u6405\u62cc\u5747\u5300 \u97ed\u83dc\u6d17\u51c0,\u5207\u77ed\u81f3 3mm \u4ee5\u4e0b\u957f\u5ea6 \u97ed\u83dc\u548c\u8089\u6cab\u6df7\u5408,\u52a0\u5165\u8017\u6cb9\u3001\u751f\u62bd\u3001\u9999\u6cb9\u5404 2ml,\u52a0\u5165\u4e00\u4e2a\u9e21\u86cb\u7684\u86cb\u6e05,\u7528\u624b\u6df7\u5408\u6405\u62cc\u5747\u5300 \u653e\u7f6e 30 \u5206\u949f\u5de6\u53f3\u5373\u53ef\u5f00\u59cb\u5305\u997a\u5b50 \u5305\u997a\u5b50 \u5de6\u624b\u4e0a\u653e\u9762\u76ae\uff0c\u653e\u997a\u5b50\u9985\u4e00\u9762\u5c3d\u91cf\u4e0d\u8981\u7c98\u5230\u9762\u7c89\uff0c\u9632\u6b62\u65e0\u6cd5\u5408\u62e2 \u53f3\u624b\u7528\u7b77\u5b50\u5939\u7ea6\u9762\u76ae 1/2 \u76f4\u5f84\u7684\u9985 \u6cbf\u997a\u5b50\u76ae\u5706\u5468\u8fdb\u884c\u5408\u62e2\uff0c\u634f\u5b9e\uff0c\u4e2a\u4eba\u5403\u65e0\u9700\u634f\u82b1\uff0c\u997a\u5b50\u76ae\u4e0d\u6f0f\u5373\u53ef \u716e\u997a\u5b50 \u4f7f\u7528\u53ef\u653e\u4e0b 20 \u53ea\u997a\u5b50\u7684\u9505\uff0c\u6216\u5206\u6279\u91cf\u716e \u70e7\u6c34\uff0c\u6c34\u7ea6 3/4 \u9505\u7684\u9ad8\u5ea6 \u5927\u706b\u70e7\u5f00\u6c34\u540e\u653e\u5165\u997a\u5b50\uff0c\u8c03\u81f3\u4e2d\u706b \u7b2c\u4e00\u6b21\u653e\u5165\u997a\u5b50\uff0c\u4e14\u6c34\u5192\u6ce1\u540e\uff0c\u9505\u8fb9\u52a0\u5165 50ml \u51b7\u6c34\uff08\u91cd\u590d\u6b64\u6b65\u9aa4\u4e24\u6b21\uff09 \u7b2c\u4e09\u6b21\u6c34\u5f00\u540e\u63ed\u5f00\u9505\u76d6\uff0c\u52a0\u5165\u51b7\u6c34 50ml\uff0c\u6c34\u5f00\u540e\u6253\u5f00\u9505\u76d6\uff0c\u8c03\u81f3\u5c0f\u706b\u7b49 60s \u5373\u53ef\u51fa\u9505 \u9644\u52a0\u5185\u5bb9 \u8fd9\u9053\u83dc\u5b58\u5728\u4e00\u4e9b\u8865\u5145\u505a\u6cd5\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\uff1a \u989d\u5916\u6dfb\u52a0\u4e0b\u5217\u6750\u6599\uff1a \u9ed1\u918b 10ml \u59dc \u4e00\u5c0f\u5757 50 \u514b \u9999\u6cb9 2 \u6ef4 \u5927\u849c/\u849c\u6ce5 3 \u74e3/\u4eba \u8003\u8651\u642d\u914d\u9ed1\u918b\u98df\u7528\u3002\u5efa\u8bae\u7528\u91cf\uff1a10-20ml\u3002 \u8003\u8651\u59dc\u5207\u4e1d\uff0c\u5728\u5c0f\u7897\u52a0\u5165 20ml \u7684\u9ed1\u918b\u4e0e\u59dc\u4e1d\u6405\u62cc\u5f53\u8638\u6599\uff0c\u5473\u9053\u66f4\u4e30\u5bcc\u3002 \u8003\u8651\u642d\u914d\u9ed1\u918b\u65f6\u52a0\u5165 1~3 \u6ef4\u9999\u6cb9\uff0c\u6405\u62cc\u5f53\u8638\u6599\u3002 \u8003\u8651\u642d\u914d\u9ed1\u918b\u65f6\u52a0\u5165\u7838\u597d\u7684\u849c\u6ce5\uff0c\u6405\u62cc\u5f53\u8638\u6599\u3002\uff08\u53e3\u8154\u5185\u4f1a\u6b8b\u7559\u849c\u5473\uff0c\u82e5\u996d\u540e\u9700\u8981\u4e0e\u4ed6\u4eba\u9762\u5bf9\u9762\u8c08\u8bdd\u5efa\u8bae\u653e\u5f03\u6216\u6e05\u6d01\u53e3\u8154\uff09 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u624b\u5de5\u6c34\u997a"},{"location":"dishes/staple/%E6%89%8B%E5%B7%A5%E6%B0%B4%E9%A5%BA/#_1","text":"\u997a\u5b50\u662f\u4e00\u9053\u975e\u5e38\u597d\u5403\u7684\u4e3b\u98df\u4e4b\u4e00\u3002\u9971\u809a\u4e14\u6613\u4e8e\u6839\u636e\u81ea\u5df1\u53e3\u5473\u8fdb\u884c\u8c03\u5473\uff0c\u9002\u5408\u5728 US \u7684\u540c\u5b66\u5403\u4e0d\u5230\u6c34\u997a\u89e3\u998b\u3002\u4e00\u822c\u521d\u5b66\u8005\u9700\u8981 3 \u5c0f\u65f6\u5b8c\u6210\uff0c\u96be\u5ea6\u8f83\u5927","title":"\u624b\u5de5\u6c34\u997a\u7684\u505a\u6cd5"},{"location":"dishes/staple/%E6%89%8B%E5%B7%A5%E6%B0%B4%E9%A5%BA/#_2","text":"\u64c0\u9762\u6756 \u9762\u7c89 \u51b7\u6c34 \u76f4\u5f84 30cm \u4ee5\u4e0a\u7684\u76c6 \u829d\u9ebb\u9999\u6cb9","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/staple/%E6%89%8B%E5%B7%A5%E6%B0%B4%E9%A5%BA/#_3","text":"-\u5355\u4eba\uff0c\u7ea6 20 \u53ea \u6bcf\u4efd\uff1a \u9762\u7c89 200g \u51b7\u6c34 150ml \u829d\u9ebb\u9999\u6cb9 2-3ml \u7626\u8089\u672b 250g \u80a5\u8089\u672b 20g #\u4e0d\u559c\u53ef\u4e0d\u52a0 \u59dc 3g \u8471 15g \u76d0 3g \u8017\u6cb9 2ml \u9999\u6cb9 2ml \u751f\u62bd 2ml \u9e21\u86cb 1 \u4e2a","title":"\u8ba1\u7b97"},{"location":"dishes/staple/%E6%89%8B%E5%B7%A5%E6%B0%B4%E9%A5%BA/#_4","text":"","title":"\u64cd\u4f5c"},{"location":"dishes/staple/%E6%89%8B%E5%B7%A5%E6%B0%B4%E9%A5%BA/#_5","text":"\u76c6\u4e2d\u52a0\u5165\u6240\u6709\u9762\u7c89 \u52a0\u5165\u829d\u9ebb\u9999\u6cb9 \u9762\u7c89\u4e2d\u592e\u6316\u5c0f\u6d1e \u5206 4-5 \u6b21\u52a0\u5165\u6c34\uff0c\u5e76\u6405\u548c\uff0c\u5f53\u51fa\u73b0\u788e\u672b\u72b6\u7684\u7a0d\u5fae\u5e72\u71e5\u9762\u56e2\u65f6 \u53d6\u6d88\u52a0\u6c34\uff0c\u7528\u624b\u5c06\u9762\u56e2\u538b\u5b9e \u9762\u56e2\u538b\u5b9e\u81f3\u53ef\u628a\u76c6\u5468\u56f4\u7684\u9762\u7c89\u7eb3\u5165\u5373\u53ef\uff0c\u6b64\u6b65\u9aa4\u4e3a\u9762\u5149\u76c6\u5149 \u5c06\u9762\u56e2\u7f6e\u4e8e\u684c\u4e0a\uff0c\u76c6\u5012\u6263\u4e8e\u684c\u4e0a\uff0c\u73af\u5883\u6e29\u5ea6\u4e3a 25 \u5ea6\u5de6\u53f3\uff0c\u4f7f\u9762\u56e2\u9192\u53d1\u7ea6 45min \u9192\u53d1\u5b8c\u6210\u540e\uff0c\u5c06\u9762\u56e2\u6413\u6210\u6761\u72b6\uff0c\u5408\u6210\u4e00\u56e2\uff0c\u518d\u6b21\u6413\u6210\u6761\uff0c\u91cd\u590d 3 \u6b21 \u64c0\u6210\u6761\u72b6\uff0c\u5207\u6210 20 \u4efd\u5747\u5300\u5927\u5c0f\u9762\u56e2\uff0c\u5e76\u6413\u6210\u76f4\u5f84\u7ea6 3-3.5cm \u7684\u7403\u72b6 \u538b\u6241\u9762\u56e2\uff0c\u5728\u624b\u4e0a\uff0c\u684c\u4e0a\uff0c\u64c0\u9762\u6756\u4e0a\uff0c\u53ca\u9762\u56e2\u4e0a\u6492\u4e0a\u9762\u7c89\uff0c\u6b64\u6b65\u9aa4\u9632\u6b62\u9762\u56e2\u53d1\u7c98 \u7528\u64c0\u9762\u6756\u5c06\u9762\u56e2\u64c0\u5e73\uff0c\u7ea6 8cm \u76f4\u5f84\uff0c\u539a\u7ea6 2mm\uff0c\u4e2d\u95f4\u7565\u5fae\u6bd4\u56db\u5468\u539a 1mm","title":"\u5236\u4f5c\u997a\u5b50\u76ae"},{"location":"dishes/staple/%E6%89%8B%E5%B7%A5%E6%B0%B4%E9%A5%BA/#_6","text":"\u732a\u8089\u53bb\u76ae,\u4fdd\u7559\u90e8\u5206\u80a5\u8089,\u5207\u6210\u5c0f\u5757 \u83dc\u5200\uff08\u5efa\u8bae\u4e24\u628a\uff09\u5c06\u732a\u8089\u5241\u6210\u8089\u6cab,\u653e\u5165\u7897\u4e2d \u8471\u3001\u59dc\u5207\u6210\u672b,\u653e\u5165\u8089\u7897\u4e2d\u6405\u62cc\u5747\u5300 \u97ed\u83dc\u6d17\u51c0,\u5207\u77ed\u81f3 3mm \u4ee5\u4e0b\u957f\u5ea6 \u97ed\u83dc\u548c\u8089\u6cab\u6df7\u5408,\u52a0\u5165\u8017\u6cb9\u3001\u751f\u62bd\u3001\u9999\u6cb9\u5404 2ml,\u52a0\u5165\u4e00\u4e2a\u9e21\u86cb\u7684\u86cb\u6e05,\u7528\u624b\u6df7\u5408\u6405\u62cc\u5747\u5300 \u653e\u7f6e 30 \u5206\u949f\u5de6\u53f3\u5373\u53ef\u5f00\u59cb\u5305\u997a\u5b50","title":"\u62cc\u9985"},{"location":"dishes/staple/%E6%89%8B%E5%B7%A5%E6%B0%B4%E9%A5%BA/#_7","text":"\u5de6\u624b\u4e0a\u653e\u9762\u76ae\uff0c\u653e\u997a\u5b50\u9985\u4e00\u9762\u5c3d\u91cf\u4e0d\u8981\u7c98\u5230\u9762\u7c89\uff0c\u9632\u6b62\u65e0\u6cd5\u5408\u62e2 \u53f3\u624b\u7528\u7b77\u5b50\u5939\u7ea6\u9762\u76ae 1/2 \u76f4\u5f84\u7684\u9985 \u6cbf\u997a\u5b50\u76ae\u5706\u5468\u8fdb\u884c\u5408\u62e2\uff0c\u634f\u5b9e\uff0c\u4e2a\u4eba\u5403\u65e0\u9700\u634f\u82b1\uff0c\u997a\u5b50\u76ae\u4e0d\u6f0f\u5373\u53ef","title":"\u5305\u997a\u5b50"},{"location":"dishes/staple/%E6%89%8B%E5%B7%A5%E6%B0%B4%E9%A5%BA/#_8","text":"\u4f7f\u7528\u53ef\u653e\u4e0b 20 \u53ea\u997a\u5b50\u7684\u9505\uff0c\u6216\u5206\u6279\u91cf\u716e \u70e7\u6c34\uff0c\u6c34\u7ea6 3/4 \u9505\u7684\u9ad8\u5ea6 \u5927\u706b\u70e7\u5f00\u6c34\u540e\u653e\u5165\u997a\u5b50\uff0c\u8c03\u81f3\u4e2d\u706b \u7b2c\u4e00\u6b21\u653e\u5165\u997a\u5b50\uff0c\u4e14\u6c34\u5192\u6ce1\u540e\uff0c\u9505\u8fb9\u52a0\u5165 50ml \u51b7\u6c34\uff08\u91cd\u590d\u6b64\u6b65\u9aa4\u4e24\u6b21\uff09 \u7b2c\u4e09\u6b21\u6c34\u5f00\u540e\u63ed\u5f00\u9505\u76d6\uff0c\u52a0\u5165\u51b7\u6c34 50ml\uff0c\u6c34\u5f00\u540e\u6253\u5f00\u9505\u76d6\uff0c\u8c03\u81f3\u5c0f\u706b\u7b49 60s \u5373\u53ef\u51fa\u9505","title":"\u716e\u997a\u5b50"},{"location":"dishes/staple/%E6%89%8B%E5%B7%A5%E6%B0%B4%E9%A5%BA/#_9","text":"\u8fd9\u9053\u83dc\u5b58\u5728\u4e00\u4e9b\u8865\u5145\u505a\u6cd5\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\uff1a \u989d\u5916\u6dfb\u52a0\u4e0b\u5217\u6750\u6599\uff1a \u9ed1\u918b 10ml \u59dc \u4e00\u5c0f\u5757 50 \u514b \u9999\u6cb9 2 \u6ef4 \u5927\u849c/\u849c\u6ce5 3 \u74e3/\u4eba \u8003\u8651\u642d\u914d\u9ed1\u918b\u98df\u7528\u3002\u5efa\u8bae\u7528\u91cf\uff1a10-20ml\u3002 \u8003\u8651\u59dc\u5207\u4e1d\uff0c\u5728\u5c0f\u7897\u52a0\u5165 20ml \u7684\u9ed1\u918b\u4e0e\u59dc\u4e1d\u6405\u62cc\u5f53\u8638\u6599\uff0c\u5473\u9053\u66f4\u4e30\u5bcc\u3002 \u8003\u8651\u642d\u914d\u9ed1\u918b\u65f6\u52a0\u5165 1~3 \u6ef4\u9999\u6cb9\uff0c\u6405\u62cc\u5f53\u8638\u6599\u3002 \u8003\u8651\u642d\u914d\u9ed1\u918b\u65f6\u52a0\u5165\u7838\u597d\u7684\u849c\u6ce5\uff0c\u6405\u62cc\u5f53\u8638\u6599\u3002\uff08\u53e3\u8154\u5185\u4f1a\u6b8b\u7559\u849c\u5473\uff0c\u82e5\u996d\u540e\u9700\u8981\u4e0e\u4ed6\u4eba\u9762\u5bf9\u9762\u8c08\u8bdd\u5efa\u8bae\u653e\u5f03\u6216\u6e05\u6d01\u53e3\u8154\uff09 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/staple/%E6%B1%A4%E9%9D%A2/","text":"\u6c64\u9762\u7684\u505a\u6cd5 \u6c64\u9762\u662f\u8bb8\u591a\u4eba\u559c\u7231\u7684\u57fa\u7840\u4e3b\u98df\uff0c\u6839\u636e\u4e2a\u4eba\u559c\u597d\u52a0\u5165\u4efb\u4f55\u81ea\u5df1\u559c\u6b22\u7684\u98df\u6750\uff0c\u8425\u517b\u5168\u9762\uff0c\u56fa\u6db2\u517c\u5177\uff0c\u6750\u6599\u6613\u5f97\uff0c\u505a\u6cd5\u7b80\u5355\uff0c\u6709\u624b\u5c31\u884c\u3002 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u9762\u98df\u6750\u6599\uff1a\u53ef\u4ee5\u662f\u624b\u5de5\u9762\u6761\u3001\u9f99\u987b\u9762\u3001\u9762\u9c7c\uff0c\u4e5f\u53ef\u4ee5\u662f\u6ce1\u9762\u9762\u997c\u3001\u5404\u7c7b\u89c4\u683c\u7c89\u4e1d\uff0c\u6216\u8005\u662f\u5176\u4ed6\u4efb\u4f55\u81ea\u5df1\u6240\u559c\u6b22\u7684\u9762\u98df\u5f62\u5f0f\u3002 \u83dc\u7c7b\u6750\u6599\uff1a\u5efa\u8bae\u8364\u7d20\u642d\u914d\uff0c\u9009\u62e9\u81ea\u5df1\u559c\u6b22\u7684\u98df\u6750\u6d17\u5e72\u51c0\u5373\u53ef\u3002\u4f8b\u5982\uff1a \u725b\u7f8a\u9c7c\u867e\u7b49\u8089\u7c7b\uff08\u751f\u719f\u7686\u53ef\uff09 \u9e21\u86cb\u9e2d\u86cb\u9e45\u86cb\u9e35\u9e1f\u86cb\u7b49\u86cb\u7c7b \u8c46\u5757\u8c46\u7b4b\u8c46\u8150\u76ae\u7b49\u8c46\u5236\u54c1\u7c7b \u751f\u83dc\u83e0\u83dc\u6cb9\u9ea6\u83dc \u9752\u6912\u756a\u8304\u80e1\u841d\u535c\u7b49\u852c\u83dc\u7c7b\u3002 \u8ba1\u7b97 \u9762\u7c7b\u6750\u6599\uff1a\u5355\u4eba\u4e00\u4e2a\u65b9\u4fbf\u9762\u5927\u5c0f\u7684\u91cf\uff0c\u53ef\u4ee5\u5728 70-230g \u4e4b\u95f4\u9009\u62e9\u3002 \u51b7\u6c34\uff1a \u52a0\u5165\u80fd\u6d78\u6ca1\u9762\u7684\u91cf\uff0c\u4e00\u822c\u5728 200 - 400 ml \u4e4b\u95f4\u9009\u62e9 \u83dc\u7c7b\uff1a\u4f53\u79ef\u5927\u7ea6\u548c\u9762\u7c7b\u76f8\u5f53 \u5176\u4e2d\u9752\u83dc\u4f53\u79ef\u53ef\u5ffd\u7565 \u64cd\u4f5c \u5148\u5c06\u83dc\u7c7b\u6750\u6599\u5207\u6210\u8fb9\u957f\u4e0d\u8d85\u8fc7 4cm \u7684\u5757\u72b6\uff0c\u4fbf\u4e8e\u716e\u719f \u5982\u6709\u751f\u8089\uff0c\u5219\u5148\u653e\u5165\u51b7\u6c34\u4e2d\uff0c\u76d6\u4e0a\u9505\u76d6\uff0c\u716e\u6cb8\u817e\uff0c\u5148\u635e\u51fa\u4e0a\u5c42\u8840\u6cab\uff0c\u518d\u5173\u706b\uff0c\u635e\u51fa\u534a\u719f\u7684\u8089\u5907\u7528 \u5148\u5927\u706b\u5c06\u6c34\u52a0\u70ed\u81f3\u6cb8\u817e\uff0c\u540e\u8c03\u81f3\u4e2d\u706b \u5c06\u8f83\u96be\u716e\u719f\u7684\u98df\u6750\u653e\u5165\u9505\u4e2d\uff08\u6bd4\u5982\u534a\u719f\u8089\u7c7b\u3001\u9999\u83c7\u7c7b\u3001\u7b49\u6700\u5148\u653e\u5165\u9505\u4e2d\uff09\u3002\u4e3a\u4fdd\u8bc1\u716e\u719f\uff0c\u53ef\u5728\u6cb8\u817e\u540e\u8ba1\u65f6 10 \u5206\u949f\uff0c\u7279\u522b\u96be\u719f\u7684\u5927\u5757\u98df\u6750\u53ef\u8ffd\u52a0 5 \u5206\u949f\u3002 \u5c06\u9762\u98df\u653e\u5165\u9505\u4e2d\uff0c\u9002\u5f53\u6405\u62cc\u786e\u4fdd\u9762\u548c\u6c64\u5145\u5206\u63a5\u89e6\uff0c\u4f7f\u6db2\u9762\u4fdd\u6301\u8f7b\u5fae\u6cb8\u817e\uff0c\u716e 5 \u5206\u949f\u3002\u52a0\u5165\u9762\u540e\u6db2\u9762\u6613\u4ea7\u751f\u767d\u8272\u6ce1\u6cab\uff0c\u53ef\u9002\u5f53\u62ac\u8d77\u9505\u76d6\u901a\u6c14\u6216\u8005\u64a4\u4e0b\u9505\u76d6\u3002 \u5c06\u6613\u4e8e\u716e\u719f\u7684\u98df\u6750\u5982\u9752\u83dc\u7c7b\u653e\u5165\u9505\u4e2d\uff0c\u9002\u5f53\u6405\u62cc\u4ee5\u5145\u5206\u6d78\u6ca1\uff0c\u716e 2-5 \u5206\u949f \u5173\u706b\uff0c\u968f\u540e\u52a0\u5165\u76d0\u3001\u80e1\u6912\u7c89\u3001\u9999\u6cb9\u7b49\u81ea\u5df1\u559c\u6b22\u7684\u8c03\u5473\u6599\uff0c\u9002\u5f53\u6405\u62cc\u5373\u53ef\u51fa\u9505\u98df\u7528 \u9644\u52a0\u5185\u5bb9 \u64cd\u4f5c\u6d41\u7a0b\u53ef\u6839\u636e\u81ea\u5df1\u559c\u597d\u66f4\u6539\uff0c\u591a\u591a\u5c1d\u8bd5\u4f1a\u6709\u60ca\u559c \u5982\u638c\u63e1\u4e0d\u597d\u52a0\u76d0\u91cf\uff0c\u53ef\u91c7\u7528\u5c11\u91cf\u591a\u6b21\u6dfb\u52a0\u7684\u65b9\u6cd5\uff0c\u4ee5\u514d\u8fc7\u91cf \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u6c64\u9762"},{"location":"dishes/staple/%E6%B1%A4%E9%9D%A2/#_1","text":"\u6c64\u9762\u662f\u8bb8\u591a\u4eba\u559c\u7231\u7684\u57fa\u7840\u4e3b\u98df\uff0c\u6839\u636e\u4e2a\u4eba\u559c\u597d\u52a0\u5165\u4efb\u4f55\u81ea\u5df1\u559c\u6b22\u7684\u98df\u6750\uff0c\u8425\u517b\u5168\u9762\uff0c\u56fa\u6db2\u517c\u5177\uff0c\u6750\u6599\u6613\u5f97\uff0c\u505a\u6cd5\u7b80\u5355\uff0c\u6709\u624b\u5c31\u884c\u3002","title":"\u6c64\u9762\u7684\u505a\u6cd5"},{"location":"dishes/staple/%E6%B1%A4%E9%9D%A2/#_2","text":"\u9762\u98df\u6750\u6599\uff1a\u53ef\u4ee5\u662f\u624b\u5de5\u9762\u6761\u3001\u9f99\u987b\u9762\u3001\u9762\u9c7c\uff0c\u4e5f\u53ef\u4ee5\u662f\u6ce1\u9762\u9762\u997c\u3001\u5404\u7c7b\u89c4\u683c\u7c89\u4e1d\uff0c\u6216\u8005\u662f\u5176\u4ed6\u4efb\u4f55\u81ea\u5df1\u6240\u559c\u6b22\u7684\u9762\u98df\u5f62\u5f0f\u3002 \u83dc\u7c7b\u6750\u6599\uff1a\u5efa\u8bae\u8364\u7d20\u642d\u914d\uff0c\u9009\u62e9\u81ea\u5df1\u559c\u6b22\u7684\u98df\u6750\u6d17\u5e72\u51c0\u5373\u53ef\u3002\u4f8b\u5982\uff1a \u725b\u7f8a\u9c7c\u867e\u7b49\u8089\u7c7b\uff08\u751f\u719f\u7686\u53ef\uff09 \u9e21\u86cb\u9e2d\u86cb\u9e45\u86cb\u9e35\u9e1f\u86cb\u7b49\u86cb\u7c7b \u8c46\u5757\u8c46\u7b4b\u8c46\u8150\u76ae\u7b49\u8c46\u5236\u54c1\u7c7b \u751f\u83dc\u83e0\u83dc\u6cb9\u9ea6\u83dc \u9752\u6912\u756a\u8304\u80e1\u841d\u535c\u7b49\u852c\u83dc\u7c7b\u3002","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/staple/%E6%B1%A4%E9%9D%A2/#_3","text":"\u9762\u7c7b\u6750\u6599\uff1a\u5355\u4eba\u4e00\u4e2a\u65b9\u4fbf\u9762\u5927\u5c0f\u7684\u91cf\uff0c\u53ef\u4ee5\u5728 70-230g \u4e4b\u95f4\u9009\u62e9\u3002 \u51b7\u6c34\uff1a \u52a0\u5165\u80fd\u6d78\u6ca1\u9762\u7684\u91cf\uff0c\u4e00\u822c\u5728 200 - 400 ml \u4e4b\u95f4\u9009\u62e9 \u83dc\u7c7b\uff1a\u4f53\u79ef\u5927\u7ea6\u548c\u9762\u7c7b\u76f8\u5f53 \u5176\u4e2d\u9752\u83dc\u4f53\u79ef\u53ef\u5ffd\u7565","title":"\u8ba1\u7b97"},{"location":"dishes/staple/%E6%B1%A4%E9%9D%A2/#_4","text":"\u5148\u5c06\u83dc\u7c7b\u6750\u6599\u5207\u6210\u8fb9\u957f\u4e0d\u8d85\u8fc7 4cm \u7684\u5757\u72b6\uff0c\u4fbf\u4e8e\u716e\u719f \u5982\u6709\u751f\u8089\uff0c\u5219\u5148\u653e\u5165\u51b7\u6c34\u4e2d\uff0c\u76d6\u4e0a\u9505\u76d6\uff0c\u716e\u6cb8\u817e\uff0c\u5148\u635e\u51fa\u4e0a\u5c42\u8840\u6cab\uff0c\u518d\u5173\u706b\uff0c\u635e\u51fa\u534a\u719f\u7684\u8089\u5907\u7528 \u5148\u5927\u706b\u5c06\u6c34\u52a0\u70ed\u81f3\u6cb8\u817e\uff0c\u540e\u8c03\u81f3\u4e2d\u706b \u5c06\u8f83\u96be\u716e\u719f\u7684\u98df\u6750\u653e\u5165\u9505\u4e2d\uff08\u6bd4\u5982\u534a\u719f\u8089\u7c7b\u3001\u9999\u83c7\u7c7b\u3001\u7b49\u6700\u5148\u653e\u5165\u9505\u4e2d\uff09\u3002\u4e3a\u4fdd\u8bc1\u716e\u719f\uff0c\u53ef\u5728\u6cb8\u817e\u540e\u8ba1\u65f6 10 \u5206\u949f\uff0c\u7279\u522b\u96be\u719f\u7684\u5927\u5757\u98df\u6750\u53ef\u8ffd\u52a0 5 \u5206\u949f\u3002 \u5c06\u9762\u98df\u653e\u5165\u9505\u4e2d\uff0c\u9002\u5f53\u6405\u62cc\u786e\u4fdd\u9762\u548c\u6c64\u5145\u5206\u63a5\u89e6\uff0c\u4f7f\u6db2\u9762\u4fdd\u6301\u8f7b\u5fae\u6cb8\u817e\uff0c\u716e 5 \u5206\u949f\u3002\u52a0\u5165\u9762\u540e\u6db2\u9762\u6613\u4ea7\u751f\u767d\u8272\u6ce1\u6cab\uff0c\u53ef\u9002\u5f53\u62ac\u8d77\u9505\u76d6\u901a\u6c14\u6216\u8005\u64a4\u4e0b\u9505\u76d6\u3002 \u5c06\u6613\u4e8e\u716e\u719f\u7684\u98df\u6750\u5982\u9752\u83dc\u7c7b\u653e\u5165\u9505\u4e2d\uff0c\u9002\u5f53\u6405\u62cc\u4ee5\u5145\u5206\u6d78\u6ca1\uff0c\u716e 2-5 \u5206\u949f \u5173\u706b\uff0c\u968f\u540e\u52a0\u5165\u76d0\u3001\u80e1\u6912\u7c89\u3001\u9999\u6cb9\u7b49\u81ea\u5df1\u559c\u6b22\u7684\u8c03\u5473\u6599\uff0c\u9002\u5f53\u6405\u62cc\u5373\u53ef\u51fa\u9505\u98df\u7528","title":"\u64cd\u4f5c"},{"location":"dishes/staple/%E6%B1%A4%E9%9D%A2/#_5","text":"\u64cd\u4f5c\u6d41\u7a0b\u53ef\u6839\u636e\u81ea\u5df1\u559c\u597d\u66f4\u6539\uff0c\u591a\u591a\u5c1d\u8bd5\u4f1a\u6709\u60ca\u559c \u5982\u638c\u63e1\u4e0d\u597d\u52a0\u76d0\u91cf\uff0c\u53ef\u91c7\u7528\u5c11\u91cf\u591a\u6b21\u6dfb\u52a0\u7684\u65b9\u6cd5\uff0c\u4ee5\u514d\u8fc7\u91cf \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/staple/%E7%82%92%E6%96%B9%E4%BE%BF%E9%9D%A2/","text":"\u7092\u65b9\u4fbf\u9762\u7684\u505a\u6cd5 \u8fd9\u662f\u5728\u63a2\u7a76\u4e86\u4f20\u7edf\u716e\u65b9\u4fbf\u9762\u7684\u6539\u826f\u65b9\u5411\u4e4b\u540e\uff0c\u8fdb\u884c\u7684\u4e00\u6b21\u6700\u6210\u529f\u7684\u5c1d\u8bd5\u3002\u5b83\u80fd\u591f\u8ba9\u65b9\u4fbf\u9762\u7684\u7f8e\u5473\u7a0b\u5ea6\u63d0\u5347\u5f88\u5927\u7a0b\u5ea6\uff0c\u7b80\u5355\u597d\u505a\u3002\u5982\u679c\u4f60\u672c\u6765\u6253\u7b97\u716e\u65b9\u4fbf\u9762\uff0c\u6b63\u597d\u53d1\u73b0\u5bb6\u91cc\u7684\u6750\u6599\u5b8c\u5168\u53ef\u4ee5\u505a\u7092\u65b9\u4fbf\u9762\uff0c\u90a3\u4e0d\u8981\u72b9\u8c6b\u4e86\uff0c\u5f00\u59cb\u7092\u5427\uff01 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u65b9\u4fbf\u9762 \u76d0 \u9e21\u86cb \u706b\u817f\u80a0\uff08\u53ef\u9009\uff09 \u8ba1\u7b97 \u65b9\u4fbf\u9762\u7528\u91cf\u4e3a 1.2 \u5305/\u4eba \u5411\u4e0b\u53d6\u6574\u3002 \u9e21\u86cb\u7684\u7528\u91cf\u4e3a 1.4 \u4e2a/\u4eba \u5411\u4e0b\u53d6\u6574\u3002 \u76d0\u7684\u7528\u91cf\u4e3a \u9e21\u86cb\u7684\u7528\u91cf * 2g\u3002 \u706b\u817f\u80a0\u7684\u7528\u91cf\u4e3a 0.7 \u4e2a/\u4eba \u5411\u4e0a\u53d6\u6574\u3002 \u98df\u7528\u6cb9\u7684\u7528\u91cf\u4e3a 10 - 18 ml / \u4eba\u3002 \u4f7f\u7528\u4e0a\u8ff0\u6761\u4ef6\uff0c\u8ba1\u7b97\u51fa\u8ba1\u5212\u4f7f\u7528\u7684\u539f\u6750\u6599\u6bd4\u4f8b\u3002 \u64cd\u4f5c \u9762\u7684\u5904\u7406 \u9505\u4e2d\u52a0\u5165 300 ml \u6c34\u3002\u716e\u6cb8\u3002 \u52a0\u5165\u65b9\u4fbf\u9762\uff0c\u716e 30 \u79d2\u3002\u716e\u7684\u8fc7\u7a0b\u4e2d\u5c06\u5176\u6311\u52a8\uff0c\u628a\u9762\u6761\u6253\u6563\u3002 \u9762\u6761\u6253\u6563\u540e\u5173\u706b \u5c06\u9762\u6c64\u548c\u9762\u5206\u79bb\u3002\u7528\u51c9\u6c34\u51b2\u4e00\u4e0b\u9762\u6761\u3002 \u9171\u6599\u5904\u7406 \u51c6\u5907\u4e00\u4e2a\u5c0f\u7897\uff0c\u5c06\u65b9\u4fbf\u9762\u7684\u4e09\u4e2a\u8c03\u6599\u5305\u5168\u90e8\u6324\u8fdb\u53bb\u3002 \u5c06\u7b2c\u4e00\u6b65\u7684\u9762\u6c64\u53d6\u51fa 60ml\uff0c\u52a0\u5165\u5c0f\u7897\uff0c\u6405\u5300\u3002 \u9e21\u86cb\u7684\u9884\u5904\u7406 \u53d6\u51fa\u8ba1\u7b97\u597d\u7684\u6570\u91cf\u7684\u9e21\u86cb\uff0c\u6253\u5165\u4e00\u4e2a\u5c0f\u7897\u3002 \u6bcf\u4e2a\u9e21\u86cb\u52a0\u5165 2g \u76d0\u3002\u6405\u62cc\u5747\u5300\u3002 \u70ed\u9505 20s\uff0c\u52a0\u5165\u4eba\u6570 * 8ml \u6cb9\u3002 \u6cb9\u70ed\u540e\uff0c\u53ef\u4ee5\u8003\u8651\u52a0\u5165\u706b\u817f\u80a0\u3002\u52a0\u5165\u521a\u521a\u51c6\u5907\u597d\u7684\u4e00\u7897\u9e21\u86cb\u3002\u7ffb\u7092\u5927\u7ea6 20s \u81f3\u9e21\u86cb\u5f62\u6210\u56fa\u6001\u5373\u53ef\u3002 \u5c06\u714e\u9e21\u86cb\u53d6\u51fa\u6682\u5b58\u3002 \u589e\u52a0\u9505\u5185\u7684\u6cb9\u5230\u4eba\u6570 * 10ml\u3002 \u6700\u7ec8\u6b65\u9aa4 \u7ee7\u4e0a\u4e00\u6b65\uff0c\u52a0\u5165\u7b2c\u4e00\u6b65\u7684\u9762\u3002\u7ffb\u7092 30 \u79d2\u3002 \u52a0\u5165\u7b2c\u4e8c\u6b65\u7684\u8c03\u6599\u7897\u3002\u7ffb\u7092 1 \u5206\u949f\u3002 \u52a0\u5165\u7b2c\u4e09\u6b65\u7684\u714e\u9e21\u86cb\u3002\u7ffb\u7092 1 \u5206\u949f\u3002 \u5173\u706b\u76db\u76d8\u5373\u53ef\u3002 \u9644\u52a0\u5185\u5bb9 \u5728\u5317\u4eac\uff0c\u53ef\u4ee5\u8003\u8651\u5728\u76db\u76d8\u540e\u52a0\u5165\u9ebb\u9171\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u7092\u65b9\u4fbf\u9762"},{"location":"dishes/staple/%E7%82%92%E6%96%B9%E4%BE%BF%E9%9D%A2/#_1","text":"\u8fd9\u662f\u5728\u63a2\u7a76\u4e86\u4f20\u7edf\u716e\u65b9\u4fbf\u9762\u7684\u6539\u826f\u65b9\u5411\u4e4b\u540e\uff0c\u8fdb\u884c\u7684\u4e00\u6b21\u6700\u6210\u529f\u7684\u5c1d\u8bd5\u3002\u5b83\u80fd\u591f\u8ba9\u65b9\u4fbf\u9762\u7684\u7f8e\u5473\u7a0b\u5ea6\u63d0\u5347\u5f88\u5927\u7a0b\u5ea6\uff0c\u7b80\u5355\u597d\u505a\u3002\u5982\u679c\u4f60\u672c\u6765\u6253\u7b97\u716e\u65b9\u4fbf\u9762\uff0c\u6b63\u597d\u53d1\u73b0\u5bb6\u91cc\u7684\u6750\u6599\u5b8c\u5168\u53ef\u4ee5\u505a\u7092\u65b9\u4fbf\u9762\uff0c\u90a3\u4e0d\u8981\u72b9\u8c6b\u4e86\uff0c\u5f00\u59cb\u7092\u5427\uff01","title":"\u7092\u65b9\u4fbf\u9762\u7684\u505a\u6cd5"},{"location":"dishes/staple/%E7%82%92%E6%96%B9%E4%BE%BF%E9%9D%A2/#_2","text":"\u65b9\u4fbf\u9762 \u76d0 \u9e21\u86cb \u706b\u817f\u80a0\uff08\u53ef\u9009\uff09","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/staple/%E7%82%92%E6%96%B9%E4%BE%BF%E9%9D%A2/#_3","text":"\u65b9\u4fbf\u9762\u7528\u91cf\u4e3a 1.2 \u5305/\u4eba \u5411\u4e0b\u53d6\u6574\u3002 \u9e21\u86cb\u7684\u7528\u91cf\u4e3a 1.4 \u4e2a/\u4eba \u5411\u4e0b\u53d6\u6574\u3002 \u76d0\u7684\u7528\u91cf\u4e3a \u9e21\u86cb\u7684\u7528\u91cf * 2g\u3002 \u706b\u817f\u80a0\u7684\u7528\u91cf\u4e3a 0.7 \u4e2a/\u4eba \u5411\u4e0a\u53d6\u6574\u3002 \u98df\u7528\u6cb9\u7684\u7528\u91cf\u4e3a 10 - 18 ml / \u4eba\u3002 \u4f7f\u7528\u4e0a\u8ff0\u6761\u4ef6\uff0c\u8ba1\u7b97\u51fa\u8ba1\u5212\u4f7f\u7528\u7684\u539f\u6750\u6599\u6bd4\u4f8b\u3002","title":"\u8ba1\u7b97"},{"location":"dishes/staple/%E7%82%92%E6%96%B9%E4%BE%BF%E9%9D%A2/#_4","text":"","title":"\u64cd\u4f5c"},{"location":"dishes/staple/%E7%82%92%E6%96%B9%E4%BE%BF%E9%9D%A2/#_5","text":"\u9505\u4e2d\u52a0\u5165 300 ml \u6c34\u3002\u716e\u6cb8\u3002 \u52a0\u5165\u65b9\u4fbf\u9762\uff0c\u716e 30 \u79d2\u3002\u716e\u7684\u8fc7\u7a0b\u4e2d\u5c06\u5176\u6311\u52a8\uff0c\u628a\u9762\u6761\u6253\u6563\u3002 \u9762\u6761\u6253\u6563\u540e\u5173\u706b \u5c06\u9762\u6c64\u548c\u9762\u5206\u79bb\u3002\u7528\u51c9\u6c34\u51b2\u4e00\u4e0b\u9762\u6761\u3002","title":"\u9762\u7684\u5904\u7406"},{"location":"dishes/staple/%E7%82%92%E6%96%B9%E4%BE%BF%E9%9D%A2/#_6","text":"\u51c6\u5907\u4e00\u4e2a\u5c0f\u7897\uff0c\u5c06\u65b9\u4fbf\u9762\u7684\u4e09\u4e2a\u8c03\u6599\u5305\u5168\u90e8\u6324\u8fdb\u53bb\u3002 \u5c06\u7b2c\u4e00\u6b65\u7684\u9762\u6c64\u53d6\u51fa 60ml\uff0c\u52a0\u5165\u5c0f\u7897\uff0c\u6405\u5300\u3002","title":"\u9171\u6599\u5904\u7406"},{"location":"dishes/staple/%E7%82%92%E6%96%B9%E4%BE%BF%E9%9D%A2/#_7","text":"\u53d6\u51fa\u8ba1\u7b97\u597d\u7684\u6570\u91cf\u7684\u9e21\u86cb\uff0c\u6253\u5165\u4e00\u4e2a\u5c0f\u7897\u3002 \u6bcf\u4e2a\u9e21\u86cb\u52a0\u5165 2g \u76d0\u3002\u6405\u62cc\u5747\u5300\u3002 \u70ed\u9505 20s\uff0c\u52a0\u5165\u4eba\u6570 * 8ml \u6cb9\u3002 \u6cb9\u70ed\u540e\uff0c\u53ef\u4ee5\u8003\u8651\u52a0\u5165\u706b\u817f\u80a0\u3002\u52a0\u5165\u521a\u521a\u51c6\u5907\u597d\u7684\u4e00\u7897\u9e21\u86cb\u3002\u7ffb\u7092\u5927\u7ea6 20s \u81f3\u9e21\u86cb\u5f62\u6210\u56fa\u6001\u5373\u53ef\u3002 \u5c06\u714e\u9e21\u86cb\u53d6\u51fa\u6682\u5b58\u3002 \u589e\u52a0\u9505\u5185\u7684\u6cb9\u5230\u4eba\u6570 * 10ml\u3002","title":"\u9e21\u86cb\u7684\u9884\u5904\u7406"},{"location":"dishes/staple/%E7%82%92%E6%96%B9%E4%BE%BF%E9%9D%A2/#_8","text":"\u7ee7\u4e0a\u4e00\u6b65\uff0c\u52a0\u5165\u7b2c\u4e00\u6b65\u7684\u9762\u3002\u7ffb\u7092 30 \u79d2\u3002 \u52a0\u5165\u7b2c\u4e8c\u6b65\u7684\u8c03\u6599\u7897\u3002\u7ffb\u7092 1 \u5206\u949f\u3002 \u52a0\u5165\u7b2c\u4e09\u6b65\u7684\u714e\u9e21\u86cb\u3002\u7ffb\u7092 1 \u5206\u949f\u3002 \u5173\u706b\u76db\u76d8\u5373\u53ef\u3002","title":"\u6700\u7ec8\u6b65\u9aa4"},{"location":"dishes/staple/%E7%82%92%E6%96%B9%E4%BE%BF%E9%9D%A2/#_9","text":"\u5728\u5317\u4eac\uff0c\u53ef\u4ee5\u8003\u8651\u5728\u76db\u76d8\u540e\u52a0\u5165\u9ebb\u9171\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/staple/%E7%82%92%E6%B2%B3%E7%B2%89/","text":"\u7b80\u5355\u7092\u6cb3\u7c89\u505a\u6cd5 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u7092\u6cb3\u7c89\u3001\u732a\u8089/\u725b\u8089 \u7092\u6599\uff1a\u76d0\u3001\u5473\u7cbe\u3001\u8001\u62bd\u3001\u751f\u62bd\u3001\u5b5c\u7136\u7c89\uff08\u6216\u76f4\u63a5\u7528\u6cb3\u7c89\u6599\uff09 \u5176\u4ed6\u8c03\u5473\u6599\uff1a\u80e1\u6912\u7c89 \u9ec4\u74dc\u3001\u9762\u7b4b\u5757\u3001\u7eff\u8c46\u82bd\u3001\u9e21\u86cb\u3001\u849c\u74e3\u3001\u5c0f\u8471\u3001\u6dc0\u7c89 \u76c6\u3001\u76d8\u5b50 \u5efa\u8bae\u8d2d\u4e70\u65b9\u6848\uff1a\u5728\u67d0\u5b9d\u3001\u67d0\u4e70\u83dc\u7b49\u5e73\u53f0\u4e0a\u8d2d\u4e70\u888b\u88c5\u9c9c\u6cb3\u7c89\uff0c\u4e00\u822c\u662f1\u65a4\u8d77\u552e\uff0c\u51b7\u85cf\u4fdd\u8d28\u671f\u53ef\u8fbe\u5230\u4e24\u5468\uff0c\u800c\u4e14\u9001\u6cb3\u7c89\u7092\u6599\uff01 \u8ba1\u7b97 \u6cb3\u7c89\u7528\u91cf\u4e3a 250 g/\u4eba\uff0c\u7537\u751f\u53ef\u518d\u52a0 100g/\u4eba \u5411\u4e0b\u53d6\u6574\u3002 \u9ec4\u74dc\u4e1d 30g/\u4eba\u3001\u9762\u7b4b\u5757 30g/\u4eba\u3001\u7eff\u8c46\u82bd 30g/\u4eba\u3001\u6253\u788e\u7684\u9e21\u86cb 1 \u4e2a/\u4eba\u3002 \u62cd\u788e\u7684\u849c\u74e3 2 \u4e2a/\u4eba\u3001\u5c0f\u8471 1 \u6839/\u4eba \u6cb3\u7c89\u6599\u53ef\u6309 20g/\u4eba\u6dfb\u52a0\uff0c\u82e5\u81ea\u884c\u51c6\u5907\u7092\u6599\u53ef 10g \u76d0+2g \u5473\u7cbe+3g \u5b5c\u7136\u7c89\u3002 \u6dc0\u7c89\u53ef\u51c6\u5907\u6bcf 100g \u8089+5g \u6dc0\u7c89\u6bd4\u4f8b\u51c6\u5907\u3002 \u8001\u62bd/\u751f\u62bd\uff0c\u5206\u522b\u4e3a\u6bcf 250g \u6cb3\u7c89 10ml/15ml\u3002 \u64cd\u4f5c \u51c6\u5907\u5de5\u4f5c \u5c0f\u8471\u5207\u788e\uff08\u8471\u767d\u548c\u8471\u53f6\u5206\u5f00\uff09\u3001\u849c\u74e3\u62cd\u788e\uff0c\u4e22\u6848\u677f\u4e0a\u5907\u7528\u3002 \u6253\u788e\u9e21\u86cb\uff0c\u635e\u4e00\u70b9\u86cb\u6e05\u5230\u4e00\u53ea\u7897\u4e2d\uff0c\u5269\u4e0b\u7684\u4e22\u5165\u53e6\u4e00\u53ea\u7897\u4e2d\u5907\u7528\u3002 \u5c06\u7eff\u8c46\u82bd\u653e\u5165\u9505\u4e2d\uff0c\u5927\u706b\u716e 60 \u79d2\u3002\u8c46\u82bd\u635e\u51fa\uff0c\u8fc7\u51c9\u6c34\uff0c\u653e\u5165\u76d8\u4e2d\u5907\u7528\u3002 \u9ec4\u74dc\u5207\u4e1d\u653e\u5165\u76d8\u4e2d\u5907\u7528\uff0c\u53ef\u548c\u8c46\u82bd\u4e22\u4e00\u8d77\u3002 \u5904\u7406\u9762\u7b4b\uff0c\u5355\u72ec\u4e22\u4e00\u4e2a\u76d8\u4e2d\u3002 \u8089\u5207\u7ec6\u6761\u72b6\uff0c\u52a0\u5165\u6dc0\u7c89\u4e0e\u521a\u521a\u7897\u4e2d\u7684\u9e21\u86cb\u6e05\u3001\u80e1\u6912\u7c89\uff0c\u987a\u65f6\u9488\u62cc\u5300\u3002 \u6ce8\uff1a\u8d85\u5e02\u8d2d\u4e70\u6765\u7684\u51c9\u76ae\u8868\u9762\u4e00\u822c\u4f1a\u6709\u98df\u7528\u6cb9\uff0c\u5982\u679c\u8fd9\u8ba9\u5e72\u51c0\u7684\u4f60\u5bf9\u8d85\u5e02\u4e0d\u4fe1\u4efb\uff0c\u53ef\u4ee5\u4f7f\u7528\u81ea\u6765\u6c34\u6e05\u6d17\u3002\u9762\u7b4b\u540c\u6837\u3002 \u6ce8\uff1a\u6e05\u6d17\u9762\u7b4b\u4e4b\u540e\uff0c\u8bf7\u7528\u624b\u5c06\u9762\u7b4b\u4e2d\u7684\u5927\u91cf\u6c34\u5206\u6324\u51fa\uff08\u4e0d\u9700\u8fc7\u4e8e\u7528\u529b\uff09\u3002 \u70ed\u9505\u7092\u8089 \u52a0\u5165\u98df\u7528\u6cb9\uff0c\u9505\u70ed\u5012\u51fa\u3002 \u5012\u5165\u5904\u7406\u597d\u7684\u8089\uff0c\u7ffb\u7092\u5747\u5300\u81f3\u53d8\u8272\uff0c\u5012\u5165\u7897\u4e2d\u5907\u7528\u3002 \u7092\u5236\u6cb3\u7c89 \u8d81\u9505\u70ed\uff0c\u52a0\u5165 20g \u98df\u7528\u6cb9\uff08\u9ad8\u8840\u538b\u4eba\u7fa4\u53ef\u964d\u4f4e\u7528\u91cf\uff09\uff0c\u5012\u5165\u8471\u767d\u3001\u849c\u7206\u7092\u51fa\u9999\u3002 \u52a0\u5165\u6cb3\u7c89\uff0c\u6dcb\u5165\u8001\u62bd\u63d0\u8272\uff0c\u7ffb\u7092\u5747\u5300\u540e\u518d\u52a0\u5165\u6cb3\u7c89\u7092\u6599\uff0c\u7ee7\u7eed\u7ffb\u7092\u3002 \u6cb3\u7c89\u5373\u5c06\u900f\u660e\u65f6\uff0c\u653e\u5165\u7092\u5236\u597d\u7684\u8089\u4e1d\u4e0e\u9762\u7b4b\uff0c\u5e76\u52a0\u5165\u751f\u62bd\u63d0\u9c9c\uff0c\u7b80\u5355\u7ffb\u7092\u4e24\u6b21\u3002 \u52a0\u5165\u8c46\u82bd\u4e0e\u9ec4\u74dc\u4e1d\uff0c\u7ffb\u7092\u81f3\u6cb3\u7c89\u5b8c\u5168\u900f\u660e\u3002 \u5173\u706b\uff01 \u6700\u7ec8\u6b65\u9aa4 \u6492\u5165\u8471\u53f6\u70b9\u7f00\uff0c\u628a\u9505\u7aef\u8d77\u3002 \u5012\u5165\u76d8\u4e2d\uff0c\u5f00\u59cb\u5e72\u996d\u3002 \u9644\u52a0\u5185\u5bb9 \u4e2a\u4eba\u53e3\u5473\u6839\u636e\u5730\u533a\u3001\u5929\u6c14\u3001\u65f6\u95f4\u5747\u6709\u4e0d\u540c\uff0c\u8c03\u6599\u7684\u5177\u4f53\u4f7f\u7528\u91cf\u8bf7\u636e\u4e2a\u4eba\u60c5\u51b5\u800c\u5b9a\uff0c\u559c\u6b22\u8fa3\u6912\u7684\u53ef\u4ee5\u81ea\u884c\u6dfb\u52a0\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u7092\u6cb3\u7c89"},{"location":"dishes/staple/%E7%82%92%E6%B2%B3%E7%B2%89/#_1","text":"","title":"\u7b80\u5355\u7092\u6cb3\u7c89\u505a\u6cd5"},{"location":"dishes/staple/%E7%82%92%E6%B2%B3%E7%B2%89/#_2","text":"\u7092\u6cb3\u7c89\u3001\u732a\u8089/\u725b\u8089 \u7092\u6599\uff1a\u76d0\u3001\u5473\u7cbe\u3001\u8001\u62bd\u3001\u751f\u62bd\u3001\u5b5c\u7136\u7c89\uff08\u6216\u76f4\u63a5\u7528\u6cb3\u7c89\u6599\uff09 \u5176\u4ed6\u8c03\u5473\u6599\uff1a\u80e1\u6912\u7c89 \u9ec4\u74dc\u3001\u9762\u7b4b\u5757\u3001\u7eff\u8c46\u82bd\u3001\u9e21\u86cb\u3001\u849c\u74e3\u3001\u5c0f\u8471\u3001\u6dc0\u7c89 \u76c6\u3001\u76d8\u5b50 \u5efa\u8bae\u8d2d\u4e70\u65b9\u6848\uff1a\u5728\u67d0\u5b9d\u3001\u67d0\u4e70\u83dc\u7b49\u5e73\u53f0\u4e0a\u8d2d\u4e70\u888b\u88c5\u9c9c\u6cb3\u7c89\uff0c\u4e00\u822c\u662f1\u65a4\u8d77\u552e\uff0c\u51b7\u85cf\u4fdd\u8d28\u671f\u53ef\u8fbe\u5230\u4e24\u5468\uff0c\u800c\u4e14\u9001\u6cb3\u7c89\u7092\u6599\uff01","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/staple/%E7%82%92%E6%B2%B3%E7%B2%89/#_3","text":"\u6cb3\u7c89\u7528\u91cf\u4e3a 250 g/\u4eba\uff0c\u7537\u751f\u53ef\u518d\u52a0 100g/\u4eba \u5411\u4e0b\u53d6\u6574\u3002 \u9ec4\u74dc\u4e1d 30g/\u4eba\u3001\u9762\u7b4b\u5757 30g/\u4eba\u3001\u7eff\u8c46\u82bd 30g/\u4eba\u3001\u6253\u788e\u7684\u9e21\u86cb 1 \u4e2a/\u4eba\u3002 \u62cd\u788e\u7684\u849c\u74e3 2 \u4e2a/\u4eba\u3001\u5c0f\u8471 1 \u6839/\u4eba \u6cb3\u7c89\u6599\u53ef\u6309 20g/\u4eba\u6dfb\u52a0\uff0c\u82e5\u81ea\u884c\u51c6\u5907\u7092\u6599\u53ef 10g \u76d0+2g \u5473\u7cbe+3g \u5b5c\u7136\u7c89\u3002 \u6dc0\u7c89\u53ef\u51c6\u5907\u6bcf 100g \u8089+5g \u6dc0\u7c89\u6bd4\u4f8b\u51c6\u5907\u3002 \u8001\u62bd/\u751f\u62bd\uff0c\u5206\u522b\u4e3a\u6bcf 250g \u6cb3\u7c89 10ml/15ml\u3002","title":"\u8ba1\u7b97"},{"location":"dishes/staple/%E7%82%92%E6%B2%B3%E7%B2%89/#_4","text":"","title":"\u64cd\u4f5c"},{"location":"dishes/staple/%E7%82%92%E6%B2%B3%E7%B2%89/#_5","text":"\u5c0f\u8471\u5207\u788e\uff08\u8471\u767d\u548c\u8471\u53f6\u5206\u5f00\uff09\u3001\u849c\u74e3\u62cd\u788e\uff0c\u4e22\u6848\u677f\u4e0a\u5907\u7528\u3002 \u6253\u788e\u9e21\u86cb\uff0c\u635e\u4e00\u70b9\u86cb\u6e05\u5230\u4e00\u53ea\u7897\u4e2d\uff0c\u5269\u4e0b\u7684\u4e22\u5165\u53e6\u4e00\u53ea\u7897\u4e2d\u5907\u7528\u3002 \u5c06\u7eff\u8c46\u82bd\u653e\u5165\u9505\u4e2d\uff0c\u5927\u706b\u716e 60 \u79d2\u3002\u8c46\u82bd\u635e\u51fa\uff0c\u8fc7\u51c9\u6c34\uff0c\u653e\u5165\u76d8\u4e2d\u5907\u7528\u3002 \u9ec4\u74dc\u5207\u4e1d\u653e\u5165\u76d8\u4e2d\u5907\u7528\uff0c\u53ef\u548c\u8c46\u82bd\u4e22\u4e00\u8d77\u3002 \u5904\u7406\u9762\u7b4b\uff0c\u5355\u72ec\u4e22\u4e00\u4e2a\u76d8\u4e2d\u3002 \u8089\u5207\u7ec6\u6761\u72b6\uff0c\u52a0\u5165\u6dc0\u7c89\u4e0e\u521a\u521a\u7897\u4e2d\u7684\u9e21\u86cb\u6e05\u3001\u80e1\u6912\u7c89\uff0c\u987a\u65f6\u9488\u62cc\u5300\u3002 \u6ce8\uff1a\u8d85\u5e02\u8d2d\u4e70\u6765\u7684\u51c9\u76ae\u8868\u9762\u4e00\u822c\u4f1a\u6709\u98df\u7528\u6cb9\uff0c\u5982\u679c\u8fd9\u8ba9\u5e72\u51c0\u7684\u4f60\u5bf9\u8d85\u5e02\u4e0d\u4fe1\u4efb\uff0c\u53ef\u4ee5\u4f7f\u7528\u81ea\u6765\u6c34\u6e05\u6d17\u3002\u9762\u7b4b\u540c\u6837\u3002 \u6ce8\uff1a\u6e05\u6d17\u9762\u7b4b\u4e4b\u540e\uff0c\u8bf7\u7528\u624b\u5c06\u9762\u7b4b\u4e2d\u7684\u5927\u91cf\u6c34\u5206\u6324\u51fa\uff08\u4e0d\u9700\u8fc7\u4e8e\u7528\u529b\uff09\u3002","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"dishes/staple/%E7%82%92%E6%B2%B3%E7%B2%89/#_6","text":"\u52a0\u5165\u98df\u7528\u6cb9\uff0c\u9505\u70ed\u5012\u51fa\u3002 \u5012\u5165\u5904\u7406\u597d\u7684\u8089\uff0c\u7ffb\u7092\u5747\u5300\u81f3\u53d8\u8272\uff0c\u5012\u5165\u7897\u4e2d\u5907\u7528\u3002","title":"\u70ed\u9505\u7092\u8089"},{"location":"dishes/staple/%E7%82%92%E6%B2%B3%E7%B2%89/#_7","text":"\u8d81\u9505\u70ed\uff0c\u52a0\u5165 20g \u98df\u7528\u6cb9\uff08\u9ad8\u8840\u538b\u4eba\u7fa4\u53ef\u964d\u4f4e\u7528\u91cf\uff09\uff0c\u5012\u5165\u8471\u767d\u3001\u849c\u7206\u7092\u51fa\u9999\u3002 \u52a0\u5165\u6cb3\u7c89\uff0c\u6dcb\u5165\u8001\u62bd\u63d0\u8272\uff0c\u7ffb\u7092\u5747\u5300\u540e\u518d\u52a0\u5165\u6cb3\u7c89\u7092\u6599\uff0c\u7ee7\u7eed\u7ffb\u7092\u3002 \u6cb3\u7c89\u5373\u5c06\u900f\u660e\u65f6\uff0c\u653e\u5165\u7092\u5236\u597d\u7684\u8089\u4e1d\u4e0e\u9762\u7b4b\uff0c\u5e76\u52a0\u5165\u751f\u62bd\u63d0\u9c9c\uff0c\u7b80\u5355\u7ffb\u7092\u4e24\u6b21\u3002 \u52a0\u5165\u8c46\u82bd\u4e0e\u9ec4\u74dc\u4e1d\uff0c\u7ffb\u7092\u81f3\u6cb3\u7c89\u5b8c\u5168\u900f\u660e\u3002 \u5173\u706b\uff01","title":"\u7092\u5236\u6cb3\u7c89"},{"location":"dishes/staple/%E7%82%92%E6%B2%B3%E7%B2%89/#_8","text":"\u6492\u5165\u8471\u53f6\u70b9\u7f00\uff0c\u628a\u9505\u7aef\u8d77\u3002 \u5012\u5165\u76d8\u4e2d\uff0c\u5f00\u59cb\u5e72\u996d\u3002","title":"\u6700\u7ec8\u6b65\u9aa4"},{"location":"dishes/staple/%E7%82%92%E6%B2%B3%E7%B2%89/#_9","text":"\u4e2a\u4eba\u53e3\u5473\u6839\u636e\u5730\u533a\u3001\u5929\u6c14\u3001\u65f6\u95f4\u5747\u6709\u4e0d\u540c\uff0c\u8c03\u6599\u7684\u5177\u4f53\u4f7f\u7528\u91cf\u8bf7\u636e\u4e2a\u4eba\u60c5\u51b5\u800c\u5b9a\uff0c\u559c\u6b22\u8fa3\u6912\u7684\u53ef\u4ee5\u81ea\u884c\u6dfb\u52a0\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/staple/%E7%82%92%E9%A6%8D/","text":"\u7092\u998d\u7247\u7684\u505a\u6cd5 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u9992\u5934\uff08\u9694\u5929\u7565\u786c\u66f4\u597d\uff09 \u76d0 \u6cb9 \u5b5c\u7136\u7c89 \u4e94\u9999\u7c89 \u5c0f\u8471 \u9e21\u86cb\uff08\u53ef\u9009\uff09 \u8ba1\u7b97 \u9992\u5934 2 \u4e2a\uff08\u9694\u5929\u7565\u786c\u66f4\u597d\uff09 \u76d0 3g \u6cb9 20ml\uff08\u82b1\u751f\u6cb9\u6216\u829d\u9ebb\u6cb9\u66f4\u597d\uff09 \u5b5c\u7136\u7c89 3g \u8fa3\u6912\u7c89 3g \u4e94\u9999\u7c89 3g \u5c0f\u8471 2 \u68f5 \u9e21\u86cb \uff08\u53ef\u9009,2 \u4e2a\uff09 \u4f7f\u7528\u4e0a\u8ff0\u6761\u4ef6\uff0c\u8ba1\u7b97\u51fa\u8ba1\u5212\u4f7f\u7528\u7684\u539f\u6750\u6599\u6bd4\u4f8b\u3002 \u51c6\u5907\u539f\u6599 \u5c06\u9992\u5934\u5207\u6210\u5c0f\u5757\u6216\u5c0f\u7247\u3002 \u9009\u6709\u9e21\u86cb\u7684\u8bdd\u5c06\u9e21\u86cb\u6253\u8fdb\u7897\u91cc\uff0c\u6253\u6563\uff08\u53ef\u52a0\u76d0\u548c\u4e94\u9999\u7c89\u5404 1g \u6216\u4e0d\u52a0\uff0c\u7b49\u7092\u7684\u8fc7\u7a0b\u4e2d\u52a0\uff09\u3002 \u9e21\u86cb\u6d47\u5728\u9992\u5934\u4e0a\uff0c\u62cc\u5300\uff0c\u9e21\u86cb\u4e0d\u5b9c\u8fc7\u591a\u3002 \u64cd\u4f5c \u5927\u706b\u70ed\u9505\uff0c\u5012\u5165\u98df\u7528\u6cb9\uff08\u4e0d\u9508\u94a2\u9505\u6015\u4f24\u9505\u7684\u8bdd\u53ef\u4ee5\u5148\u5012\u6cb9\uff0c\u70e7\u81f3\u6cb9\u70ed\u4e5f\u53ef\u4e5f\u53ef\uff09 \u5c06\u998d\u4e01\u653e\u8fdb\u53bb\u7ffb\u7092\uff0c\u7ffb\u7092\u5747\u5300\u3002 \u5c06\u706b\u8c03\u5c0f\uff0c\u7092\u81f3\u998d\u4e01\u5448\u91d1\u9ec4\u8272\u3002 \u653e\u5165\u76d0\uff0c\u80e1\u6912\u7c89\uff0c\u4e94\u9999\u7c89\u3002 \u6700\u540e\u5c06\u8471\u82b1\u653e\u5165\u4e00\u8d77\u7ffb\u7092\u51e0\u4e0b\u3002 \u5173\u706b\u51fa\u9505\u3002 \u9644\u52a0\u5185\u5bb9 \u7092\u7684\u8fc7\u7a0b\u4e2d\u8981\u6ce8\u610f\u63a7\u5236\u706b\u5019\uff0c\u4ee5\u9632\u7092\u7cca \u706b\u5927\u8865\u6551\u63aa\u65bd\u5c06\u706b\u8c03\u5c0f\uff0c\u53ef\u6cbf\u9505\u8fb9\u52a0\u6cb9\u6da6\u9505\u6216\u6d12\u6c34\uff0c\u6ce8\u610f\u4e0d\u8981\u5168\u5012\u5728\u4e00\u4e2a\u5730\u65b9\uff0c\u6700\u597d\u5206\u6563\u5f00 \u8c03\u5473\u6599\u53ef\u6839\u636e\u4e2a\u4eba\u559c\u597d\u653e\u5165\u5176\u4ed6\u9999\u6599\uff08\u6bd4\u5982\u5357\u5fb7\u8c03\u5473\u6599\uff09 \u5982\u679c\u559c\u6b22\u5403\u8106\u7684\uff0c\u53ef\u4ee5\u5c06\u706b\u5f00\u5230\u6700\u5c0f\uff0c\u591a\u7ffb\u7092\u4e00\u4f1a\uff0c\u5173\u706b\u540e\u8d81\u9505\u70ed\u518d\u653e\u7f6e\u4e00\u4f1a\u518d\u5012\u51fa\uff0c\u66f4\u9999\u8106 \u8f85\u6599\u4e5f\u53ef\u6839\u636e\u4e2a\u4eba\u53e3\u5473\u65b9\u4f4d\u849c\u672b\uff0c\u849c\u82d7\u7b49\uff0c\u53ef\u4ee5\u5355\u72ec\u7206\u9999\u5728\u6df7\u5408 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u7092\u998d"},{"location":"dishes/staple/%E7%82%92%E9%A6%8D/#_1","text":"","title":"\u7092\u998d\u7247\u7684\u505a\u6cd5"},{"location":"dishes/staple/%E7%82%92%E9%A6%8D/#_2","text":"\u9992\u5934\uff08\u9694\u5929\u7565\u786c\u66f4\u597d\uff09 \u76d0 \u6cb9 \u5b5c\u7136\u7c89 \u4e94\u9999\u7c89 \u5c0f\u8471 \u9e21\u86cb\uff08\u53ef\u9009\uff09","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/staple/%E7%82%92%E9%A6%8D/#_3","text":"\u9992\u5934 2 \u4e2a\uff08\u9694\u5929\u7565\u786c\u66f4\u597d\uff09 \u76d0 3g \u6cb9 20ml\uff08\u82b1\u751f\u6cb9\u6216\u829d\u9ebb\u6cb9\u66f4\u597d\uff09 \u5b5c\u7136\u7c89 3g \u8fa3\u6912\u7c89 3g \u4e94\u9999\u7c89 3g \u5c0f\u8471 2 \u68f5 \u9e21\u86cb \uff08\u53ef\u9009,2 \u4e2a\uff09 \u4f7f\u7528\u4e0a\u8ff0\u6761\u4ef6\uff0c\u8ba1\u7b97\u51fa\u8ba1\u5212\u4f7f\u7528\u7684\u539f\u6750\u6599\u6bd4\u4f8b\u3002","title":"\u8ba1\u7b97"},{"location":"dishes/staple/%E7%82%92%E9%A6%8D/#_4","text":"\u5c06\u9992\u5934\u5207\u6210\u5c0f\u5757\u6216\u5c0f\u7247\u3002 \u9009\u6709\u9e21\u86cb\u7684\u8bdd\u5c06\u9e21\u86cb\u6253\u8fdb\u7897\u91cc\uff0c\u6253\u6563\uff08\u53ef\u52a0\u76d0\u548c\u4e94\u9999\u7c89\u5404 1g \u6216\u4e0d\u52a0\uff0c\u7b49\u7092\u7684\u8fc7\u7a0b\u4e2d\u52a0\uff09\u3002 \u9e21\u86cb\u6d47\u5728\u9992\u5934\u4e0a\uff0c\u62cc\u5300\uff0c\u9e21\u86cb\u4e0d\u5b9c\u8fc7\u591a\u3002","title":"\u51c6\u5907\u539f\u6599"},{"location":"dishes/staple/%E7%82%92%E9%A6%8D/#_5","text":"\u5927\u706b\u70ed\u9505\uff0c\u5012\u5165\u98df\u7528\u6cb9\uff08\u4e0d\u9508\u94a2\u9505\u6015\u4f24\u9505\u7684\u8bdd\u53ef\u4ee5\u5148\u5012\u6cb9\uff0c\u70e7\u81f3\u6cb9\u70ed\u4e5f\u53ef\u4e5f\u53ef\uff09 \u5c06\u998d\u4e01\u653e\u8fdb\u53bb\u7ffb\u7092\uff0c\u7ffb\u7092\u5747\u5300\u3002 \u5c06\u706b\u8c03\u5c0f\uff0c\u7092\u81f3\u998d\u4e01\u5448\u91d1\u9ec4\u8272\u3002 \u653e\u5165\u76d0\uff0c\u80e1\u6912\u7c89\uff0c\u4e94\u9999\u7c89\u3002 \u6700\u540e\u5c06\u8471\u82b1\u653e\u5165\u4e00\u8d77\u7ffb\u7092\u51e0\u4e0b\u3002 \u5173\u706b\u51fa\u9505\u3002","title":"\u64cd\u4f5c"},{"location":"dishes/staple/%E7%82%92%E9%A6%8D/#_6","text":"\u7092\u7684\u8fc7\u7a0b\u4e2d\u8981\u6ce8\u610f\u63a7\u5236\u706b\u5019\uff0c\u4ee5\u9632\u7092\u7cca \u706b\u5927\u8865\u6551\u63aa\u65bd\u5c06\u706b\u8c03\u5c0f\uff0c\u53ef\u6cbf\u9505\u8fb9\u52a0\u6cb9\u6da6\u9505\u6216\u6d12\u6c34\uff0c\u6ce8\u610f\u4e0d\u8981\u5168\u5012\u5728\u4e00\u4e2a\u5730\u65b9\uff0c\u6700\u597d\u5206\u6563\u5f00 \u8c03\u5473\u6599\u53ef\u6839\u636e\u4e2a\u4eba\u559c\u597d\u653e\u5165\u5176\u4ed6\u9999\u6599\uff08\u6bd4\u5982\u5357\u5fb7\u8c03\u5473\u6599\uff09 \u5982\u679c\u559c\u6b22\u5403\u8106\u7684\uff0c\u53ef\u4ee5\u5c06\u706b\u5f00\u5230\u6700\u5c0f\uff0c\u591a\u7ffb\u7092\u4e00\u4f1a\uff0c\u5173\u706b\u540e\u8d81\u9505\u70ed\u518d\u653e\u7f6e\u4e00\u4f1a\u518d\u5012\u51fa\uff0c\u66f4\u9999\u8106 \u8f85\u6599\u4e5f\u53ef\u6839\u636e\u4e2a\u4eba\u53e3\u5473\u65b9\u4f4d\u849c\u672b\uff0c\u849c\u82d7\u7b49\uff0c\u53ef\u4ee5\u5355\u72ec\u7206\u9999\u5728\u6df7\u5408 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/staple/%E7%82%B8%E9%85%B1%E9%9D%A2/","text":"\u70b8\u9171\u9762\u7684\u505a\u6cd5 \u539f\u6599\u4e0e\u5de5\u5177 \u8089\u4e01/\u8089\u672b = \u4eba\u6570 * 150g \u6302\u9762 = \u4eba\u6570 * 150g \u849c = \u4eba\u6570 * 3 \u4e2a \u767d\u83dc = \u4eba\u6570 * 3 \u7247 \u6cb9 = \u4eba\u6570 * 10g \u8c46\u74e3\u9171 = \u4eba\u6570 * 15g \u751c\u9762\u9171 = \u4eba\u6570 * 15g \u64cd\u4f5c \u767d\u83dc\uff08\u6216\u5176\u4ed6\u83dc\uff09\u5207\u4e1d\uff0c \u712f\u6c34 \u81f3\u8f6f\u5316\u719f\u900f\uff0c\u76db\u51fa\u5907\u7528\u3002 \u716e\u9762\u6761\u81f3\u65ad\u751f\uff08\u65e0\u767d\u82af\uff09\uff0c\u8fde\u540c\u6c64\u6c34\u4e00\u540c\u76db\u51fa\u5907\u7528\u3002 \u849c\u5207\u672b\u3002\u6cb9\u9505\u70e7\u70ed\uff0c\u4e0b\u849c\u672b\u548c\u8089\uff0c\u7092\u81f3\u8089\u5b8c\u5168\u719f\u900f\uff08\u65e0\u7ea2\u8272\uff09\u3002 \u4e0b\u8c46\u74e3\u9171\u548c\u751c\u9762\u9171\uff0c\u52a0 30g \u6c34\u76d6\u76d6\u7116\u716e\u81f3\u6536\u6c41\u7c98\u7a20\uff0c\u5f97\u5230\u70b8\u9171\u3002 \u7b2c 2 \u6b65\u9762\u6761\u5012\u6389\u6c64\u6c34\uff0c\u76db\u5165\u7897\u4e2d\uff0c\u52a0\u7b2c 1 \u6b65\u7684\u83dc\u548c\u7b2c 4 \u6b65\u7684\u70b8\u9171\uff0c\u62cc\u5300\u53ef\u5403\u3002 \u9644\u52a0\u5185\u5bb9 \u8089\u63a8\u8350\u7626\u8089\u4e01\uff0c\u53e3\u611f\u66f4\u597d\uff0c\u4e00\u6b21\u4e70\u591a\u53ef\u5206\u88c5\u5c0f\u4fdd\u9c9c\u888b\u51b7\u51bb\u5907\u7528\u3002\u6bcf\u6b21\u53d6\u7528\u524d 30 \u79d2\u5fae\u6ce2\u7089\u89e3\u51bb\u3002 \u9762\u6761\u53e3\u611f\u5173\u952e\u5728\u4e8e\u52b2\u9053\u3002\u52ff\u9009\u9f99\u987b\u7b49\u7ec6\u9762\u3002\u7b2c 2 \u6b65\u4e2d\u4e0d\u8981\u5b8c\u5168\u716e\u719f\uff0c\u76db\u51fa\u5e76\u5728\u8fdb\u884c\u540e\u7eed\u6b65\u9aa4\u65f6\uff0c\u6c64\u6c34\u4f1a\u8fdb\u4e00\u6b65\u50ac\u719f\u3002 \u672c\u6587\u4ee5\u767d\u83dc\u4e3a\u4f8b\uff0c\u53ef\u7075\u6d3b\u66ff\u6362\u4e3a\u6613\u83b7\u53d6\u7684\u5404\u79cd\u852c\u83dc\uff0c\u53e3\u611f\u5f71\u54cd\u4e0d\u5927\uff0c\u4ee5\u534a\u7897\u7684\u91cf\u4e3a\u5b9c\u3002 \u5982\u6709\u6761\u4ef6\uff08\u53e6\u4e00\u4e2a\u9505\uff09\u4e14\u719f\u7ec3\u540e\uff0c\u7b2c 1\u30012 \u6b65\u548c 3\u30014 \u6b65\u53ef\u5206\u65f6\u5e76\u884c\u6267\u884c\u3002 \u7b2c 3/4 \u6b65\u53ef\u9009\u52a0\u5e72\u8fa3\u6912\uff08= \u4eba\u6570 * 3 \u4e2a\uff09\u3002 \u751c\u54b8\u53e3\u4e2a\u4eba\u6709\u7231\u597d\uff0c\u4e24\u79cd\u9171\u7684\u914d\u6bd4\u9700\u8981\u81ea\u5df1\u8fed\u4ee3\u4f18\u5316\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u70b8\u9171\u9762"},{"location":"dishes/staple/%E7%82%B8%E9%85%B1%E9%9D%A2/#_1","text":"","title":"\u70b8\u9171\u9762\u7684\u505a\u6cd5"},{"location":"dishes/staple/%E7%82%B8%E9%85%B1%E9%9D%A2/#_2","text":"\u8089\u4e01/\u8089\u672b = \u4eba\u6570 * 150g \u6302\u9762 = \u4eba\u6570 * 150g \u849c = \u4eba\u6570 * 3 \u4e2a \u767d\u83dc = \u4eba\u6570 * 3 \u7247 \u6cb9 = \u4eba\u6570 * 10g \u8c46\u74e3\u9171 = \u4eba\u6570 * 15g \u751c\u9762\u9171 = \u4eba\u6570 * 15g","title":"\u539f\u6599\u4e0e\u5de5\u5177"},{"location":"dishes/staple/%E7%82%B8%E9%85%B1%E9%9D%A2/#_3","text":"\u767d\u83dc\uff08\u6216\u5176\u4ed6\u83dc\uff09\u5207\u4e1d\uff0c \u712f\u6c34 \u81f3\u8f6f\u5316\u719f\u900f\uff0c\u76db\u51fa\u5907\u7528\u3002 \u716e\u9762\u6761\u81f3\u65ad\u751f\uff08\u65e0\u767d\u82af\uff09\uff0c\u8fde\u540c\u6c64\u6c34\u4e00\u540c\u76db\u51fa\u5907\u7528\u3002 \u849c\u5207\u672b\u3002\u6cb9\u9505\u70e7\u70ed\uff0c\u4e0b\u849c\u672b\u548c\u8089\uff0c\u7092\u81f3\u8089\u5b8c\u5168\u719f\u900f\uff08\u65e0\u7ea2\u8272\uff09\u3002 \u4e0b\u8c46\u74e3\u9171\u548c\u751c\u9762\u9171\uff0c\u52a0 30g \u6c34\u76d6\u76d6\u7116\u716e\u81f3\u6536\u6c41\u7c98\u7a20\uff0c\u5f97\u5230\u70b8\u9171\u3002 \u7b2c 2 \u6b65\u9762\u6761\u5012\u6389\u6c64\u6c34\uff0c\u76db\u5165\u7897\u4e2d\uff0c\u52a0\u7b2c 1 \u6b65\u7684\u83dc\u548c\u7b2c 4 \u6b65\u7684\u70b8\u9171\uff0c\u62cc\u5300\u53ef\u5403\u3002","title":"\u64cd\u4f5c"},{"location":"dishes/staple/%E7%82%B8%E9%85%B1%E9%9D%A2/#_4","text":"\u8089\u63a8\u8350\u7626\u8089\u4e01\uff0c\u53e3\u611f\u66f4\u597d\uff0c\u4e00\u6b21\u4e70\u591a\u53ef\u5206\u88c5\u5c0f\u4fdd\u9c9c\u888b\u51b7\u51bb\u5907\u7528\u3002\u6bcf\u6b21\u53d6\u7528\u524d 30 \u79d2\u5fae\u6ce2\u7089\u89e3\u51bb\u3002 \u9762\u6761\u53e3\u611f\u5173\u952e\u5728\u4e8e\u52b2\u9053\u3002\u52ff\u9009\u9f99\u987b\u7b49\u7ec6\u9762\u3002\u7b2c 2 \u6b65\u4e2d\u4e0d\u8981\u5b8c\u5168\u716e\u719f\uff0c\u76db\u51fa\u5e76\u5728\u8fdb\u884c\u540e\u7eed\u6b65\u9aa4\u65f6\uff0c\u6c64\u6c34\u4f1a\u8fdb\u4e00\u6b65\u50ac\u719f\u3002 \u672c\u6587\u4ee5\u767d\u83dc\u4e3a\u4f8b\uff0c\u53ef\u7075\u6d3b\u66ff\u6362\u4e3a\u6613\u83b7\u53d6\u7684\u5404\u79cd\u852c\u83dc\uff0c\u53e3\u611f\u5f71\u54cd\u4e0d\u5927\uff0c\u4ee5\u534a\u7897\u7684\u91cf\u4e3a\u5b9c\u3002 \u5982\u6709\u6761\u4ef6\uff08\u53e6\u4e00\u4e2a\u9505\uff09\u4e14\u719f\u7ec3\u540e\uff0c\u7b2c 1\u30012 \u6b65\u548c 3\u30014 \u6b65\u53ef\u5206\u65f6\u5e76\u884c\u6267\u884c\u3002 \u7b2c 3/4 \u6b65\u53ef\u9009\u52a0\u5e72\u8fa3\u6912\uff08= \u4eba\u6570 * 3 \u4e2a\uff09\u3002 \u751c\u54b8\u53e3\u4e2a\u4eba\u6709\u7231\u597d\uff0c\u4e24\u79cd\u9171\u7684\u914d\u6bd4\u9700\u8981\u81ea\u5df1\u8fed\u4ee3\u4f18\u5316\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/staple/%E7%83%AD%E5%B9%B2%E9%9D%A2/","text":"\u70ed\u5e72\u9762\u7684\u505a\u6cd5 \u539f\u6599\u4e0e\u5de5\u5177 \u70ed\u5e72\u9762\u7279\u6709\u7684\u78b1\u6c34\u9762 \u5c0f\u8471 \u9178\u8c46\u89d2 \u8089\u672b \u849c\u6c34 \u8089\u6c64\u6c41 \u841d\u535c\u5e72 \u829d\u9ebb\u9171 \u8fa3\u6912\u6cb9 \u80e1\u6912\u7c89 \u9171\u6cb9 \u98df\u76d0 \u9e21\u7cbe \u7b77\u5b50 \u52fa\u5b50 \u64cd\u4f5c \u6c34\u716e\u6cb8\uff0c\u5e76\u52a0\u5165\u78b1\u6c34\u9762\uff0c\u712f\u70eb\u5341\u51e0\u79d2\u949f\u635e\u8d77 \u6492\u4e0a\u98df\u76d0\u3001\u9e21\u7cbe\u548c\u80e1\u6912\u7c89 \u829d\u9ebb\u9171\u7528\u6c34\u7a00\u91ca\u540e\u52a0\u5165\uff0c\u52a0\u5165\u5c11\u8bb8\u9171\u6cb9\uff0c\u52a0\u5165\u5c11\u8bb8\u8089\u6c64\u6c41\u548c\u849c\u6c34 \u52a0\u5165\u841d\u535c\u5e72\uff0c\u8089\u672b\uff0c\u9178\u8c46\u89d2\uff0c\u8471\u82b1 \u62cc\u5747\u5300\u540e\u5f00\u5403 \u9644\u52a0\u5185\u5bb9 \u8fa3\u6912\u6cb9\u770b\u4e2a\u4eba\u53e3\u5473\u6dfb\u52a0 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u70ed\u5e72\u9762"},{"location":"dishes/staple/%E7%83%AD%E5%B9%B2%E9%9D%A2/#_1","text":"","title":"\u70ed\u5e72\u9762\u7684\u505a\u6cd5"},{"location":"dishes/staple/%E7%83%AD%E5%B9%B2%E9%9D%A2/#_2","text":"\u70ed\u5e72\u9762\u7279\u6709\u7684\u78b1\u6c34\u9762 \u5c0f\u8471 \u9178\u8c46\u89d2 \u8089\u672b \u849c\u6c34 \u8089\u6c64\u6c41 \u841d\u535c\u5e72 \u829d\u9ebb\u9171 \u8fa3\u6912\u6cb9 \u80e1\u6912\u7c89 \u9171\u6cb9 \u98df\u76d0 \u9e21\u7cbe \u7b77\u5b50 \u52fa\u5b50","title":"\u539f\u6599\u4e0e\u5de5\u5177"},{"location":"dishes/staple/%E7%83%AD%E5%B9%B2%E9%9D%A2/#_3","text":"\u6c34\u716e\u6cb8\uff0c\u5e76\u52a0\u5165\u78b1\u6c34\u9762\uff0c\u712f\u70eb\u5341\u51e0\u79d2\u949f\u635e\u8d77 \u6492\u4e0a\u98df\u76d0\u3001\u9e21\u7cbe\u548c\u80e1\u6912\u7c89 \u829d\u9ebb\u9171\u7528\u6c34\u7a00\u91ca\u540e\u52a0\u5165\uff0c\u52a0\u5165\u5c11\u8bb8\u9171\u6cb9\uff0c\u52a0\u5165\u5c11\u8bb8\u8089\u6c64\u6c41\u548c\u849c\u6c34 \u52a0\u5165\u841d\u535c\u5e72\uff0c\u8089\u672b\uff0c\u9178\u8c46\u89d2\uff0c\u8471\u82b1 \u62cc\u5747\u5300\u540e\u5f00\u5403","title":"\u64cd\u4f5c"},{"location":"dishes/staple/%E7%83%AD%E5%B9%B2%E9%9D%A2/#_4","text":"\u8fa3\u6912\u6cb9\u770b\u4e2a\u4eba\u53e3\u5473\u6dfb\u52a0 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/staple/%E7%85%AE%E6%B3%A1%E9%9D%A2%E5%8A%A0%E8%9B%8B/","text":"\u716e\u6ce1\u9762\u52a0\u86cb\u7684\u505a\u6cd5 \u716e\u6ce1\u9762\u52a0\u86cb\u662f\u80fd\u6ee1\u8db3\u4e8e\u5404\u79cd\u4eba\u7fa4\u7684\u751f\u5b58\u57fa\u672c\u9700\u6c42\u7684\u91cd\u8981\u4e3b\u98df\uff0c\u5176\u6750\u6599\u65b9\u4fbf\u6613\u5f97\uff0c\u505a\u6cd5\u7b80\u5355\u6613\u4e0a\u624b\u4e14\u5236\u4f5c\u5468\u671f\u6781\u77ed\u3002 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u6ce1\u9762 \u9e21\u86cb \u6c34 \u8ba1\u7b97 \u5355\u4eba\uff0c\u80fd\u652f\u6491\u4e00\u4e2a\u6210\u5e74\u4eba\u4e0d\u9965\u997f\u72b6\u6001\u7ea6 3 \u81f3 4 \u5c0f\u65f6\u3002 \u6bcf\u4efd\uff1a \u6ce1\u9762 1 \u5305 \u51b7\u6c34 1000ml \u9e21\u86cb 1 \u4e2a \u64cd\u4f5c \u5148\u5c06\u6c34\u52a0\u70ed\u81f3\u6cb8\u817e\uff08\u706b\u5019\u4e0d\u505a\u4e25\u683c\u8981\u6c42\uff0c\u4f7f\u7528\u70ed\u6c34\u4f1a\u66f4\u5feb\uff09 \u5c06\u53d6\u51fa\u7684\u9762\u997c\u653e\u5165\u9505\u4e2d \u5c06\u6ce1\u9762\u91cc\u9644\u5e26\u7684\u4f50\u6599\u653e\u5165\u9505\u4e2d \u53d6\u51fa\u7b77\u5b50\u8f7b\u5fae\u62e8\u52a8\u6ce1\u9762\uff0c\u4f7f\u4f5c\u6599\u5145\u5206\u6eb6\u89e3\uff0c\u9762\u997c\u5145\u5206\u6d78\u6ce1\u53d7\u70ed \u76d6\u4e0a\u9505\u76d6\u7b49\u5f85\u7ea6 1 \u5206\u949f\u81f3\u9505\u5185\u6c34\u518d\u6b21\u6cb8\u817e \u53bb\u58f3\u9e21\u86cb\uff0c\u52a0\u5165\u9505\u4e2d \u7b49\u5f85\u7ea6 3 \u81f3 4 \u5206\u949f\uff0c\u5373\u53ef \u9644\u52a0\u5185\u5bb9 \u672c\u6307\u5357\u4e2d\u7684\u9e21\u86cb\u5305\u62ec\u4f46\u4e0d\u4ec5\u9650\u4e8e\uff1a\u751f\u9e21\u86cb\uff0c\u719f\u9e21\u86cb\uff0c\u5364\u86cb\u7b49 \u539f\u6750\u6599\u6ce1\u9762\u53ef\u5728\u697c\u4e0b\u4fbf\u5229\u5e97\u8d2d\u4e70 \u53ef\u6839\u636e\u4e2a\u4eba\u9700\u8981\u52a0\u5165\u4f50\u6599\uff0c\u548c\u5176\u4ed6\u98df\u6750\u5305\u62ec\u4f46\u4e0d\u4ec5\u9650\u4e8e\uff1a\u706b\u817f\u80a0\uff0c\u751f\u83dc\uff0c\u5c0f\u8089\u4e1d\uff0c\u8fa3\u6761\uff0c\u9c7c\u5e72\uff0c\u867e\u4ec1\uff0c\u9e21\u817f \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u716e\u6ce1\u9762\u52a0\u86cb"},{"location":"dishes/staple/%E7%85%AE%E6%B3%A1%E9%9D%A2%E5%8A%A0%E8%9B%8B/#_1","text":"\u716e\u6ce1\u9762\u52a0\u86cb\u662f\u80fd\u6ee1\u8db3\u4e8e\u5404\u79cd\u4eba\u7fa4\u7684\u751f\u5b58\u57fa\u672c\u9700\u6c42\u7684\u91cd\u8981\u4e3b\u98df\uff0c\u5176\u6750\u6599\u65b9\u4fbf\u6613\u5f97\uff0c\u505a\u6cd5\u7b80\u5355\u6613\u4e0a\u624b\u4e14\u5236\u4f5c\u5468\u671f\u6781\u77ed\u3002","title":"\u716e\u6ce1\u9762\u52a0\u86cb\u7684\u505a\u6cd5"},{"location":"dishes/staple/%E7%85%AE%E6%B3%A1%E9%9D%A2%E5%8A%A0%E8%9B%8B/#_2","text":"\u6ce1\u9762 \u9e21\u86cb \u6c34","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/staple/%E7%85%AE%E6%B3%A1%E9%9D%A2%E5%8A%A0%E8%9B%8B/#_3","text":"\u5355\u4eba\uff0c\u80fd\u652f\u6491\u4e00\u4e2a\u6210\u5e74\u4eba\u4e0d\u9965\u997f\u72b6\u6001\u7ea6 3 \u81f3 4 \u5c0f\u65f6\u3002 \u6bcf\u4efd\uff1a \u6ce1\u9762 1 \u5305 \u51b7\u6c34 1000ml \u9e21\u86cb 1 \u4e2a","title":"\u8ba1\u7b97"},{"location":"dishes/staple/%E7%85%AE%E6%B3%A1%E9%9D%A2%E5%8A%A0%E8%9B%8B/#_4","text":"\u5148\u5c06\u6c34\u52a0\u70ed\u81f3\u6cb8\u817e\uff08\u706b\u5019\u4e0d\u505a\u4e25\u683c\u8981\u6c42\uff0c\u4f7f\u7528\u70ed\u6c34\u4f1a\u66f4\u5feb\uff09 \u5c06\u53d6\u51fa\u7684\u9762\u997c\u653e\u5165\u9505\u4e2d \u5c06\u6ce1\u9762\u91cc\u9644\u5e26\u7684\u4f50\u6599\u653e\u5165\u9505\u4e2d \u53d6\u51fa\u7b77\u5b50\u8f7b\u5fae\u62e8\u52a8\u6ce1\u9762\uff0c\u4f7f\u4f5c\u6599\u5145\u5206\u6eb6\u89e3\uff0c\u9762\u997c\u5145\u5206\u6d78\u6ce1\u53d7\u70ed \u76d6\u4e0a\u9505\u76d6\u7b49\u5f85\u7ea6 1 \u5206\u949f\u81f3\u9505\u5185\u6c34\u518d\u6b21\u6cb8\u817e \u53bb\u58f3\u9e21\u86cb\uff0c\u52a0\u5165\u9505\u4e2d \u7b49\u5f85\u7ea6 3 \u81f3 4 \u5206\u949f\uff0c\u5373\u53ef","title":"\u64cd\u4f5c"},{"location":"dishes/staple/%E7%85%AE%E6%B3%A1%E9%9D%A2%E5%8A%A0%E8%9B%8B/#_5","text":"\u672c\u6307\u5357\u4e2d\u7684\u9e21\u86cb\u5305\u62ec\u4f46\u4e0d\u4ec5\u9650\u4e8e\uff1a\u751f\u9e21\u86cb\uff0c\u719f\u9e21\u86cb\uff0c\u5364\u86cb\u7b49 \u539f\u6750\u6599\u6ce1\u9762\u53ef\u5728\u697c\u4e0b\u4fbf\u5229\u5e97\u8d2d\u4e70 \u53ef\u6839\u636e\u4e2a\u4eba\u9700\u8981\u52a0\u5165\u4f50\u6599\uff0c\u548c\u5176\u4ed6\u98df\u6750\u5305\u62ec\u4f46\u4e0d\u4ec5\u9650\u4e8e\uff1a\u706b\u817f\u80a0\uff0c\u751f\u83dc\uff0c\u5c0f\u8089\u4e1d\uff0c\u8fa3\u6761\uff0c\u9c7c\u5e72\uff0c\u867e\u4ec1\uff0c\u9e21\u817f \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/staple/%E8%80%81%E5%B9%B2%E5%A6%88%E6%8B%8C%E9%9D%A2/","text":"\u8001\u5e72\u5988\u62cc\u9762\u7684\u505a\u6cd5 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u9762 \u8001\u5e72\u5988 \u9171\u6cb9 \u8ba1\u7b97 \u6c34 1 \u5347 \u9762\u91cf 120 \u514b * \u4eba\u6570 \u8001\u5e72\u5988 3 \u52fa * \u4eba\u6570 \u9171\u6cb9\u534a\u52fa * \u4eba\u6570 \u64cd\u4f5c \u5c06\u6c34\u5012\u5165\u9505\u4e2d\u5e76\u716e\u6cb8 \u5c06\u9762\u5747\u5300\u653e\u5165\u9505\u4e2d \u5728\u716e\u7684\u8fc7\u7a0b\u6ce8\u610f\u6405\u62cc\uff0c\u907f\u514d\u9762\u7c98\u6210\u4e00\u5768 \u5f53\u7528\u7b77\u5b50\u6311\u8d77\u4e00\u6839\u9762\u4e14\u8be5\u9762\u80fd\u81ea\u7136\u5730\u4ece\u7b77\u5b50\u4e0a\u6ed1\u843d\u65f6\u518d\u7b49 30 \u79d2\u5173\u706b \u5c06\u9762\u5939\u5165\u7897\u4e2d \u6309\u7167\u4e0a\u9762\u7684\u8ba1\u91cf\u653e\u5165\u8001\u5e72\u5988\u548c\u9171\u6cb9 \u7528\u7b77\u5b50\u5c06\u7897\u91cc\u7684\u9762\u3001\u8001\u5e72\u5988\u3001\u9171\u6cb9\u62cc\u5747\u5300 \u5403 \u9644\u52a0\u5185\u5bb9 \u52fa\u5b50\u4e3a\u65e5\u5e38\u7684\u5403\u996d\u7684\u52fa\u5b50 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u8001\u5e72\u5988\u62cc\u9762"},{"location":"dishes/staple/%E8%80%81%E5%B9%B2%E5%A6%88%E6%8B%8C%E9%9D%A2/#_1","text":"","title":"\u8001\u5e72\u5988\u62cc\u9762\u7684\u505a\u6cd5"},{"location":"dishes/staple/%E8%80%81%E5%B9%B2%E5%A6%88%E6%8B%8C%E9%9D%A2/#_2","text":"\u9762 \u8001\u5e72\u5988 \u9171\u6cb9","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/staple/%E8%80%81%E5%B9%B2%E5%A6%88%E6%8B%8C%E9%9D%A2/#_3","text":"\u6c34 1 \u5347 \u9762\u91cf 120 \u514b * \u4eba\u6570 \u8001\u5e72\u5988 3 \u52fa * \u4eba\u6570 \u9171\u6cb9\u534a\u52fa * \u4eba\u6570","title":"\u8ba1\u7b97"},{"location":"dishes/staple/%E8%80%81%E5%B9%B2%E5%A6%88%E6%8B%8C%E9%9D%A2/#_4","text":"\u5c06\u6c34\u5012\u5165\u9505\u4e2d\u5e76\u716e\u6cb8 \u5c06\u9762\u5747\u5300\u653e\u5165\u9505\u4e2d \u5728\u716e\u7684\u8fc7\u7a0b\u6ce8\u610f\u6405\u62cc\uff0c\u907f\u514d\u9762\u7c98\u6210\u4e00\u5768 \u5f53\u7528\u7b77\u5b50\u6311\u8d77\u4e00\u6839\u9762\u4e14\u8be5\u9762\u80fd\u81ea\u7136\u5730\u4ece\u7b77\u5b50\u4e0a\u6ed1\u843d\u65f6\u518d\u7b49 30 \u79d2\u5173\u706b \u5c06\u9762\u5939\u5165\u7897\u4e2d \u6309\u7167\u4e0a\u9762\u7684\u8ba1\u91cf\u653e\u5165\u8001\u5e72\u5988\u548c\u9171\u6cb9 \u7528\u7b77\u5b50\u5c06\u7897\u91cc\u7684\u9762\u3001\u8001\u5e72\u5988\u3001\u9171\u6cb9\u62cc\u5747\u5300 \u5403","title":"\u64cd\u4f5c"},{"location":"dishes/staple/%E8%80%81%E5%B9%B2%E5%A6%88%E6%8B%8C%E9%9D%A2/#_5","text":"\u52fa\u5b50\u4e3a\u65e5\u5e38\u7684\u5403\u996d\u7684\u52fa\u5b50 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/staple/%E8%9B%8B%E7%82%92%E9%A5%AD/","text":"\u86cb\u7092\u996d\u7684\u505a\u6cd5 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u51b7\u996d \u9e21\u86cb \u706b\u817f \u9ec4\u74dc \u80e1\u841d\u535c \u6cb9 \u76d0 \u80e1\u6912\u7c89 \u751f\u62bd \u9999\u8471 \u706f\u5f71\u725b\u8089\u4e1d\uff08\u5907\u9009\uff09 \u51c6\u5907\u65f6\uff0c\u7c73\u996d\u53ef\u4ee5\u53c2\u8003 \u7c73\u996d\u7684\u505a\u6cd5 \u3002 \u8ba1\u7b97 \u51b7\u996d\uff08\u4eba\u6570*500ml\uff09 \u9e21\u86cb \uff08\u4eba\u6570*1.5 // 1 \u5411\u4e0b\u53d6\u6574\uff09 \u706b\u817f\uff08\u4eba\u6570*2 \u4e2a\uff09 \u9ec4\u74dc\uff08\u53ef\u9009\uff0c\u4eba\u6570*30g\uff09 \u80e1\u841d\u535c\uff08\u53ef\u9009\uff0c\u4eba\u6570*30g\uff09 \u6cb9\uff08\u4eba\u6570*12ml\uff09 \u76d0\uff08\u4eba\u6570*4g - \u4eba\u6570*6g\uff09 \u80e1\u6912\u7c89\uff08\u4eba\u6570*8g\uff09 \u9999\u8471\uff08\u4eba\u6570*1 \u9897\uff09 \u751f\u62bd\uff08\u4eba\u6570*10ml\uff09 \u4f7f\u7528\u4e0a\u8ff0\u6761\u4ef6\uff0c\u8ba1\u7b97\u51fa\u8ba1\u5212\u4f7f\u7528\u7684\u539f\u6750\u6599\u6bd4\u4f8b\u3002 \u51c6\u5907\u539f\u6599 \u7c73\u996d\u63d0\u524d\u7528\u94f2\u5b50\u94f2\u6210\u5c0f\u5757 \u706b\u817f\u80a0\u3001\u80e1\u841d\u535c\u3001\u9ec4\u74dc\u7b49\u6839\u636e\u9700\u6c42\u5207\u7247\u6216\u8005\u5757\u72b6 \u5982\u679c\u5bb6\u91cc\u6709\u706f\u5f71\u725b\u8089\u4e1d \u51c6\u5907\u597d\u5473\u9053\u66f4\u4f73 \u5c06\u9e21\u86cb\u5168\u90e8\u6253\u5230\u4e00\u4e2a\u5927\u7897\u91cc\uff0c\u6405\u5300\u3002\u6ce8\u610f\uff0c\u4e0d\u8981\u5728\u8fd9\u4e00\u6b65\u52a0\u76d0\u3002 \u64cd\u4f5c \u5927\u706b\u70ed\u9505\uff0c\u5f85\u9505\u91cc\u5192\u70df\u653e\u5165\u98df\u7528\u6cb9 \u5c06\u706b\u8c03\u81f3\u4e2d\u5c0f\u706b\uff0c\u5747\u5300\u5012\u5165\u9e21\u86cb\uff0c\u5b89\u9759\u7b49\u5f85 6s \u949f\uff0c\u5f85\u9e21\u86cb\u5e95\u90e8\u6709\u4e00\u70b9\u53ef\u4ee5\u6210\u578b\u7684\u611f\u89c9\u65f6\uff0c\u8fc5\u901f\u5012\u5165\u7c73\u996d\u5927\u706b\u7ffb\u7092\uff0c\u4e3a\u7684\u5c31\u662f\u6bcf\u4e00\u7c92\u996d\u90fd\u88f9\u4e0a\u9e21\u86cb\u3002 \u5012\u5165\u706b\u817f\u80a0\u3001\u80e1\u841d\u535c\u3001\u9ec4\u74dc\u7b49\u5907\u6599\u3001\u7ffb\u7092 10 \u79d2\u949f \u7ffb\u7092\u8fc7\u7a0b\u4e2d\u5c06\u7c73\u996d\u7684\u5757\u72b6\u6363\u788e\u3001\u8fd9\u4e00\u6b65\u8fc7\u7a0b\u4f1a\u6bd4\u8f83\u957f\u3001\u5f85\u7c73\u996d\u5168\u90e8\u6363\u788e\u518d\u7ffb\u7092\u5747\u5300\u5373\u53ef \u8c03\u81f3\u5c0f\u706b\u3001\u52a0\u76d0\u3001\u52a0\u706f\u5f71\u725b\u8089\u4e1d\u3001\u80e1\u6912\u7c89\u3001\u751f\u62bd \u8fdb\u4e00\u6b65\u7ffb\u7092\u5747\u5300\uff0c\u80fd\u770b\u5230\u4e00\u4e9b\u7c73\u996d\u5728\u9505\u91cc\u6709\u201c\u8df3\u8d77\u6765\u201d\u7684\u65f6\u5019\u5176\u5b9e\u5c31\u5df2\u7ecf\u5dee\u4e0d\u591a\u4e86 \u6700\u540e\u5012\u5165\u9999\u8471\u518d\u7ffb\u7092 10s \u5173\u706b\u3001\u76db\u5165\u7897\u4e2d \u9644\u52a0\u5185\u5bb9 \u6280\u672f\u603b\u7ed3 \u4f7f\u7528\u9694\u591c\u7684\u51b7\u996d\u7092\u996d\u6700\u4f73\uff0c\u6ca1\u6709\u51b7\u996d\u7684\u540c\u5b66\u4e5f\u53ef\u4ee5\u73b0\u716e\uff08\u53ef\u4ee5\u4f7f\u7528\u51b0\u7bb1\u7acb\u9a6c\u7ed9\u7c73\u996d\u964d\u6e29\uff09\uff0c\u4e0d\u8fc7\u8981\u505a\u5230\u201c\u7c92\u7c92\u5206\u660e\u201d\u7684\u53e3\u611f\u5c31\u9700\u8981\u7092\u66f4\u4e45\u3002 \u7092\u996d\u8981\u505a\u5230\u201c\u7c92\u7c92\u5206\u660e\u201d\u5176\u5b9e\u5c31\u662f\u8981\u5c06\u996d\u7092\u5e72\u3002\u4e3a\u4ec0\u4e48\u8981\u7528\u9694\u591c\u7684\u51b7\u996d\u662f\u56e0\u4e3a\u9694\u591c\u5df2\u7ecf\u6d41\u5931\u4e86\u4e00\u5b9a\u7684\u6c34\u5206\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u86cb\u7092\u996d"},{"location":"dishes/staple/%E8%9B%8B%E7%82%92%E9%A5%AD/#_1","text":"","title":"\u86cb\u7092\u996d\u7684\u505a\u6cd5"},{"location":"dishes/staple/%E8%9B%8B%E7%82%92%E9%A5%AD/#_2","text":"\u51b7\u996d \u9e21\u86cb \u706b\u817f \u9ec4\u74dc \u80e1\u841d\u535c \u6cb9 \u76d0 \u80e1\u6912\u7c89 \u751f\u62bd \u9999\u8471 \u706f\u5f71\u725b\u8089\u4e1d\uff08\u5907\u9009\uff09 \u51c6\u5907\u65f6\uff0c\u7c73\u996d\u53ef\u4ee5\u53c2\u8003 \u7c73\u996d\u7684\u505a\u6cd5 \u3002","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/staple/%E8%9B%8B%E7%82%92%E9%A5%AD/#_3","text":"\u51b7\u996d\uff08\u4eba\u6570*500ml\uff09 \u9e21\u86cb \uff08\u4eba\u6570*1.5 // 1 \u5411\u4e0b\u53d6\u6574\uff09 \u706b\u817f\uff08\u4eba\u6570*2 \u4e2a\uff09 \u9ec4\u74dc\uff08\u53ef\u9009\uff0c\u4eba\u6570*30g\uff09 \u80e1\u841d\u535c\uff08\u53ef\u9009\uff0c\u4eba\u6570*30g\uff09 \u6cb9\uff08\u4eba\u6570*12ml\uff09 \u76d0\uff08\u4eba\u6570*4g - \u4eba\u6570*6g\uff09 \u80e1\u6912\u7c89\uff08\u4eba\u6570*8g\uff09 \u9999\u8471\uff08\u4eba\u6570*1 \u9897\uff09 \u751f\u62bd\uff08\u4eba\u6570*10ml\uff09 \u4f7f\u7528\u4e0a\u8ff0\u6761\u4ef6\uff0c\u8ba1\u7b97\u51fa\u8ba1\u5212\u4f7f\u7528\u7684\u539f\u6750\u6599\u6bd4\u4f8b\u3002","title":"\u8ba1\u7b97"},{"location":"dishes/staple/%E8%9B%8B%E7%82%92%E9%A5%AD/#_4","text":"\u7c73\u996d\u63d0\u524d\u7528\u94f2\u5b50\u94f2\u6210\u5c0f\u5757 \u706b\u817f\u80a0\u3001\u80e1\u841d\u535c\u3001\u9ec4\u74dc\u7b49\u6839\u636e\u9700\u6c42\u5207\u7247\u6216\u8005\u5757\u72b6 \u5982\u679c\u5bb6\u91cc\u6709\u706f\u5f71\u725b\u8089\u4e1d \u51c6\u5907\u597d\u5473\u9053\u66f4\u4f73 \u5c06\u9e21\u86cb\u5168\u90e8\u6253\u5230\u4e00\u4e2a\u5927\u7897\u91cc\uff0c\u6405\u5300\u3002\u6ce8\u610f\uff0c\u4e0d\u8981\u5728\u8fd9\u4e00\u6b65\u52a0\u76d0\u3002","title":"\u51c6\u5907\u539f\u6599"},{"location":"dishes/staple/%E8%9B%8B%E7%82%92%E9%A5%AD/#_5","text":"\u5927\u706b\u70ed\u9505\uff0c\u5f85\u9505\u91cc\u5192\u70df\u653e\u5165\u98df\u7528\u6cb9 \u5c06\u706b\u8c03\u81f3\u4e2d\u5c0f\u706b\uff0c\u5747\u5300\u5012\u5165\u9e21\u86cb\uff0c\u5b89\u9759\u7b49\u5f85 6s \u949f\uff0c\u5f85\u9e21\u86cb\u5e95\u90e8\u6709\u4e00\u70b9\u53ef\u4ee5\u6210\u578b\u7684\u611f\u89c9\u65f6\uff0c\u8fc5\u901f\u5012\u5165\u7c73\u996d\u5927\u706b\u7ffb\u7092\uff0c\u4e3a\u7684\u5c31\u662f\u6bcf\u4e00\u7c92\u996d\u90fd\u88f9\u4e0a\u9e21\u86cb\u3002 \u5012\u5165\u706b\u817f\u80a0\u3001\u80e1\u841d\u535c\u3001\u9ec4\u74dc\u7b49\u5907\u6599\u3001\u7ffb\u7092 10 \u79d2\u949f \u7ffb\u7092\u8fc7\u7a0b\u4e2d\u5c06\u7c73\u996d\u7684\u5757\u72b6\u6363\u788e\u3001\u8fd9\u4e00\u6b65\u8fc7\u7a0b\u4f1a\u6bd4\u8f83\u957f\u3001\u5f85\u7c73\u996d\u5168\u90e8\u6363\u788e\u518d\u7ffb\u7092\u5747\u5300\u5373\u53ef \u8c03\u81f3\u5c0f\u706b\u3001\u52a0\u76d0\u3001\u52a0\u706f\u5f71\u725b\u8089\u4e1d\u3001\u80e1\u6912\u7c89\u3001\u751f\u62bd \u8fdb\u4e00\u6b65\u7ffb\u7092\u5747\u5300\uff0c\u80fd\u770b\u5230\u4e00\u4e9b\u7c73\u996d\u5728\u9505\u91cc\u6709\u201c\u8df3\u8d77\u6765\u201d\u7684\u65f6\u5019\u5176\u5b9e\u5c31\u5df2\u7ecf\u5dee\u4e0d\u591a\u4e86 \u6700\u540e\u5012\u5165\u9999\u8471\u518d\u7ffb\u7092 10s \u5173\u706b\u3001\u76db\u5165\u7897\u4e2d","title":"\u64cd\u4f5c"},{"location":"dishes/staple/%E8%9B%8B%E7%82%92%E9%A5%AD/#_6","text":"\u6280\u672f\u603b\u7ed3 \u4f7f\u7528\u9694\u591c\u7684\u51b7\u996d\u7092\u996d\u6700\u4f73\uff0c\u6ca1\u6709\u51b7\u996d\u7684\u540c\u5b66\u4e5f\u53ef\u4ee5\u73b0\u716e\uff08\u53ef\u4ee5\u4f7f\u7528\u51b0\u7bb1\u7acb\u9a6c\u7ed9\u7c73\u996d\u964d\u6e29\uff09\uff0c\u4e0d\u8fc7\u8981\u505a\u5230\u201c\u7c92\u7c92\u5206\u660e\u201d\u7684\u53e3\u611f\u5c31\u9700\u8981\u7092\u66f4\u4e45\u3002 \u7092\u996d\u8981\u505a\u5230\u201c\u7c92\u7c92\u5206\u660e\u201d\u5176\u5b9e\u5c31\u662f\u8981\u5c06\u996d\u7092\u5e72\u3002\u4e3a\u4ec0\u4e48\u8981\u7528\u9694\u591c\u7684\u51b7\u996d\u662f\u56e0\u4e3a\u9694\u591c\u5df2\u7ecf\u6d41\u5931\u4e86\u4e00\u5b9a\u7684\u6c34\u5206\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/staple/%E9%86%AA%E7%B3%9F%E5%B0%8F%E6%B1%A4%E5%9C%86/","text":"\u91aa\u7cdf\u5c0f\u6c64\u5706\u7684\u505a\u6cd5 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u5c0f\u6c64\u5706 \u91aa\u7cdf \u767d\u7cd6 \u67b8\u675e\uff08\u53ef\u9009\uff09 \u8ba1\u7b97 \u6c34 300 \u6beb\u5347 * \u4eba\u6570 \u5c0f\u6c64\u5706 250 \u514b * \u4eba\u6570 \u91aa\u7cdf 50 \u514b * \u4eba\u6570 \u67b8\u675e 5 \u9897 * \u4eba\u6570 \u767d\u7cd6 \u64cd\u4f5c \u5c06\u6c34\u5012\u5165\u9505\u4e2d\u5e76\u716e\u6cb8 \u653e\u5165\u5c0f\u6c64\u5706\u716e 8 \u5206\u949f \u653e\u5165\u91aa\u7cdf\u548c\u67b8\u675e\u518d\u716e 2 \u5206\u949f \u76db\u5165\u7897\u4e2d\u6839\u636e\u4e2a\u4eba\u53e3\u5473\u52a0\u5165\u767d\u7cd6\u5e76\u6405\u62cc\u5747\u5300 \u5403 \u9644\u52a0\u5185\u5bb9 \u767d\u7cd6\u7684\u7528\u91cf\u6839\u636e\u4e2a\u4eba\u53e3\u5473\u66f4\u6539 \u82e5\u559c\u6b22\u66f4\u6d53\u7684\u53e3\u611f\u53ef\u4ee5\u51cf\u5c11 100 \u6beb\u5347\u5185\u7684\u6c34 \u82e5\u559c\u6b22\u8f6f\u70b9\u7684\u67b8\u675e\u53e3\u611f\uff0c\u53ef\u4ee5\u5c06\u67b8\u675e\u548c\u5c0f\u6c64\u5706\u540c\u65f6\u716e \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request","title":"\u91aa\u7cdf\u5c0f\u6c64\u5706"},{"location":"dishes/staple/%E9%86%AA%E7%B3%9F%E5%B0%8F%E6%B1%A4%E5%9C%86/#_1","text":"","title":"\u91aa\u7cdf\u5c0f\u6c64\u5706\u7684\u505a\u6cd5"},{"location":"dishes/staple/%E9%86%AA%E7%B3%9F%E5%B0%8F%E6%B1%A4%E5%9C%86/#_2","text":"\u5c0f\u6c64\u5706 \u91aa\u7cdf \u767d\u7cd6 \u67b8\u675e\uff08\u53ef\u9009\uff09","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/staple/%E9%86%AA%E7%B3%9F%E5%B0%8F%E6%B1%A4%E5%9C%86/#_3","text":"\u6c34 300 \u6beb\u5347 * \u4eba\u6570 \u5c0f\u6c64\u5706 250 \u514b * \u4eba\u6570 \u91aa\u7cdf 50 \u514b * \u4eba\u6570 \u67b8\u675e 5 \u9897 * \u4eba\u6570 \u767d\u7cd6","title":"\u8ba1\u7b97"},{"location":"dishes/staple/%E9%86%AA%E7%B3%9F%E5%B0%8F%E6%B1%A4%E5%9C%86/#_4","text":"\u5c06\u6c34\u5012\u5165\u9505\u4e2d\u5e76\u716e\u6cb8 \u653e\u5165\u5c0f\u6c64\u5706\u716e 8 \u5206\u949f \u653e\u5165\u91aa\u7cdf\u548c\u67b8\u675e\u518d\u716e 2 \u5206\u949f \u76db\u5165\u7897\u4e2d\u6839\u636e\u4e2a\u4eba\u53e3\u5473\u52a0\u5165\u767d\u7cd6\u5e76\u6405\u62cc\u5747\u5300 \u5403","title":"\u64cd\u4f5c"},{"location":"dishes/staple/%E9%86%AA%E7%B3%9F%E5%B0%8F%E6%B1%A4%E5%9C%86/#_5","text":"\u767d\u7cd6\u7684\u7528\u91cf\u6839\u636e\u4e2a\u4eba\u53e3\u5473\u66f4\u6539 \u82e5\u559c\u6b22\u66f4\u6d53\u7684\u53e3\u611f\u53ef\u4ee5\u51cf\u5c11 100 \u6beb\u5347\u5185\u7684\u6c34 \u82e5\u559c\u6b22\u8f6f\u70b9\u7684\u67b8\u675e\u53e3\u611f\uff0c\u53ef\u4ee5\u5c06\u67b8\u675e\u548c\u5c0f\u6c64\u5706\u540c\u65f6\u716e \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/staple/%E9%BA%BB%E6%B2%B9%E6%8B%8C%E9%9D%A2/","text":"\u7701\u5403\u4fed\u7528\u61d2\u4eba\u9ebb\u6cb9\u62cc\u9762\u7684\u505a\u6cd5 \u60f3\u5fc5\u5927\u5bb6\u90fd\u4f1a\u6709\u8282\u7ea6\u5f00\u9500\u7684\u65f6\u523b\u5427\uff0c\u9644\u4e0a\u4e2a\u4eba\u8010\u5403\u53c8\u7701\u94b1\u7684\u98df\u8c31\u3002\u4e0d\u9700\u8981\u592a\u591a\u7684\u6b65\u9aa4\u7b80\u5355\u7684\u716e\uff0c\u635e\uff0c\u5403\u3002 \u5355\u8eab\u7684\u670b\u53cb\u61d2\u60f0\u51fa\u95e8\uff0c\u53c8\u4e0d\u60f3\u82b1\u94b1\uff0c\u7b80\u7b80\u5355\u5355\u5c31\u4e00\u9910\u3002 \u975e\u5355\u8eab\u7684\u670b\u53cb\u60f3\u5b58\u94b1\uff0c\u8ba9\u5973\u53cb\u82b1\u94b1\uff0c\u7b80\u7b80\u5355\u5355\u5c31\u4e00\u9910\u3002 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u98ce\u5e72\u5feb\u719f\u9762/\u4efb\u4f55\u724c\u5b50\u7684\u5feb\u719f\u9762\uff08\u4e0d\u9700\u8981\u8c03\u5473\u6599\uff09 \u9ebb\u6cb9 \u80e1\u6912\u7c89 \u8001\u62bd \u76d0 \u8ba1\u7b97 \u6bcf\u4efd\uff1a \u6c34 1 \u5347 \u5feb\u719f\u9762 1 \u5757 \u9ebb\u6cb9 3 \u52fa \u8001\u62bd 10 \u514b \u76d0 30 \u514b\uff08\u53ef\u9009\uff0c\u8fd9 30g \u76d0\u4e0d\u4f1a\u88ab\u5168\u90e8\u98df\u7528\uff09 \u80e1\u6912\u7c89 10 \u514b \u751f\u62bd 5 \u514b\uff08\u53ef\u9009\uff09 \u64cd\u4f5c \u5c06\u6c34\u5012\u5165\u9505\u4e2d\u5e76\u716e\u6cb8 \uff08\u559c\u6b22\u5403 q \u5f39\u9762\u7684\u540c\u5b66\uff0c\u53ef\u5728\u6c34\u91cc\u52a0\u5165 30 \u514b\u76d0\uff0c\u7528\u76d0\u6c34\u716e\u51fa\u6765\u7684\u9762\u4f1a\u6bd4\u8f83 q \u5f39\uff09 \u5c06\u5feb\u719f\u9762\u653e\u5165\u9505\u4e2d 3 \u5206\u949f\uff08\u4e5f\u53ef\u53c2\u8003\u5f53\u4e0b\u54c1\u724c\u5feb\u719f\u9762\u7684\u70f9\u996a\u65f6\u95f4\uff09 \u5f53\u9762\u5f00\u59cb\u6563\u4e86\u53ef\u4ee5\u5f00\u59cb\u6405\u62cc\uff0c\u8ba9\u9762\u53d7\u70ed\u5747\u5300 \u5c06\u6c34\u6ee4\u5e72\u628a\u9762\u5012\u5165\u7897\u4e2d \u6309\u7167\u4e0a\u9762\u7684\u8ba1\u91cf\u653e\u5165\u9ebb\u6cb9\uff0c\u8001\u62bd\uff0c\u80e1\u6912\u7c89\uff0c\u751f\u62bd\uff08\u53ef\u9009\uff09 \u7b77\u5b50\u6405\u62cc\u5747\u5300 \u4e00\u9053\u7b80\u5355\u5373\u7701\u94b1\u7684\u61d2\u4eba\u9ebb\u6cb9\u62cc\u9762\u5c31\u5b8c\u6210\u5566 \u9644\u52a0\u5185\u5bb9 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9ebb\u6cb9\u62cc\u9762"},{"location":"dishes/staple/%E9%BA%BB%E6%B2%B9%E6%8B%8C%E9%9D%A2/#_1","text":"\u60f3\u5fc5\u5927\u5bb6\u90fd\u4f1a\u6709\u8282\u7ea6\u5f00\u9500\u7684\u65f6\u523b\u5427\uff0c\u9644\u4e0a\u4e2a\u4eba\u8010\u5403\u53c8\u7701\u94b1\u7684\u98df\u8c31\u3002\u4e0d\u9700\u8981\u592a\u591a\u7684\u6b65\u9aa4\u7b80\u5355\u7684\u716e\uff0c\u635e\uff0c\u5403\u3002 \u5355\u8eab\u7684\u670b\u53cb\u61d2\u60f0\u51fa\u95e8\uff0c\u53c8\u4e0d\u60f3\u82b1\u94b1\uff0c\u7b80\u7b80\u5355\u5355\u5c31\u4e00\u9910\u3002 \u975e\u5355\u8eab\u7684\u670b\u53cb\u60f3\u5b58\u94b1\uff0c\u8ba9\u5973\u53cb\u82b1\u94b1\uff0c\u7b80\u7b80\u5355\u5355\u5c31\u4e00\u9910\u3002","title":"\u7701\u5403\u4fed\u7528\u61d2\u4eba\u9ebb\u6cb9\u62cc\u9762\u7684\u505a\u6cd5"},{"location":"dishes/staple/%E9%BA%BB%E6%B2%B9%E6%8B%8C%E9%9D%A2/#_2","text":"\u98ce\u5e72\u5feb\u719f\u9762/\u4efb\u4f55\u724c\u5b50\u7684\u5feb\u719f\u9762\uff08\u4e0d\u9700\u8981\u8c03\u5473\u6599\uff09 \u9ebb\u6cb9 \u80e1\u6912\u7c89 \u8001\u62bd \u76d0","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/staple/%E9%BA%BB%E6%B2%B9%E6%8B%8C%E9%9D%A2/#_3","text":"\u6bcf\u4efd\uff1a \u6c34 1 \u5347 \u5feb\u719f\u9762 1 \u5757 \u9ebb\u6cb9 3 \u52fa \u8001\u62bd 10 \u514b \u76d0 30 \u514b\uff08\u53ef\u9009\uff0c\u8fd9 30g \u76d0\u4e0d\u4f1a\u88ab\u5168\u90e8\u98df\u7528\uff09 \u80e1\u6912\u7c89 10 \u514b \u751f\u62bd 5 \u514b\uff08\u53ef\u9009\uff09","title":"\u8ba1\u7b97"},{"location":"dishes/staple/%E9%BA%BB%E6%B2%B9%E6%8B%8C%E9%9D%A2/#_4","text":"\u5c06\u6c34\u5012\u5165\u9505\u4e2d\u5e76\u716e\u6cb8 \uff08\u559c\u6b22\u5403 q \u5f39\u9762\u7684\u540c\u5b66\uff0c\u53ef\u5728\u6c34\u91cc\u52a0\u5165 30 \u514b\u76d0\uff0c\u7528\u76d0\u6c34\u716e\u51fa\u6765\u7684\u9762\u4f1a\u6bd4\u8f83 q \u5f39\uff09 \u5c06\u5feb\u719f\u9762\u653e\u5165\u9505\u4e2d 3 \u5206\u949f\uff08\u4e5f\u53ef\u53c2\u8003\u5f53\u4e0b\u54c1\u724c\u5feb\u719f\u9762\u7684\u70f9\u996a\u65f6\u95f4\uff09 \u5f53\u9762\u5f00\u59cb\u6563\u4e86\u53ef\u4ee5\u5f00\u59cb\u6405\u62cc\uff0c\u8ba9\u9762\u53d7\u70ed\u5747\u5300 \u5c06\u6c34\u6ee4\u5e72\u628a\u9762\u5012\u5165\u7897\u4e2d \u6309\u7167\u4e0a\u9762\u7684\u8ba1\u91cf\u653e\u5165\u9ebb\u6cb9\uff0c\u8001\u62bd\uff0c\u80e1\u6912\u7c89\uff0c\u751f\u62bd\uff08\u53ef\u9009\uff09 \u7b77\u5b50\u6405\u62cc\u5747\u5300 \u4e00\u9053\u7b80\u5355\u5373\u7701\u94b1\u7684\u61d2\u4eba\u9ebb\u6cb9\u62cc\u9762\u5c31\u5b8c\u6210\u5566","title":"\u64cd\u4f5c"},{"location":"dishes/staple/%E9%BA%BB%E6%B2%B9%E6%8B%8C%E9%9D%A2/#_5","text":"\u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/staple/%E9%BA%BB%E8%BE%A3%E5%87%8F%E8%84%82%E8%8D%9E%E9%BA%A6%E9%9D%A2/","text":"\u9ebb\u8fa3\u51cf\u8102\u835e\u9ea6\u9762\u7684\u505a\u6cd5 \u9ebb\u8fa3\u51cf\u8102\u835e\u9ea6\u9762\u505a\u6cd5\u975e\u5e38\u7b80\u5355\uff0c\u4e0d\u9700\u8981\u4efb\u4f55\u53a8\u827a\u57fa\u7840\u3002 \u4e00\u4efd 298 \u5343\u5361\uff0c\u7f8e\u5473+\u4fbf\u5b9c+\u51cf\u8102\uff0c\u53ea\u9700\u8981 20 \u5206\u949f\u5c31\u53ef\u4ee5\u5b8c\u6210\u3002 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u8c03\u5473\u6599\uff1a\u706b\u9505\u5e95\u6599\u3001\u82b1\u751f\u9171\u3001\u5168\u8102\u725b\u5976\u3001\u751f\u62bd\u3001\u8fa3\u6912\u6cb9\u3001\u918b\u3001\u82b1\u6912\u6cb9 \u539f\u6599\uff1a\u534a\u5e72\u835e\u9ea6\u9762\u3001\u5a03\u5a03\u83dc\u3001\u751f\u83dc \u6d17\u83dc\u76c6\u3001\u76f4\u5f84 18cm \u7684\u5c0f\u9505 \u5efa\u8bae\u8d2d\u4e70\u65b9\u6848\uff1a \u835e\u9ea6\u9762\uff1apdd\u4e70\u98df\u5c1a\u70e9\u835e\u9ea6\u9762\uff0c\u4e00\u5305400g\uff0c\u4ef7\u683c4.9\u5143\uff0c\u53ef\u4ee5\u505a4\u4efd \u706b\u9505\u5e95\u6599\uff1a\u67d0\u5b9d\u5c0f\u9f99\u574e\u4f20\u7edf\u6e05\u6cb9\u706b\u9505\u5e95\u6599\u5473\u9053\u6700\u4f73\uff0c29.8\u5143\u4e00\u5305\uff0c\u53ef\u4ee5\u505a20\u4efd \u82b1\u751f\u9171\uff1apdd\u83ba\u6b4c\u82b1\u751f\u9171 24.8\u5143\u4e24\u74f6\uff0c\u53ef\u4ee5\u505a68\u4efd \u82b1\u6912\u6cb9\uff1apdd\u4e94\u4e30\u9ece\u7ea2\u82b1\u6912\u6cb9400ml,32\u5143\u4e24\u74f6\uff0c\u53ef\u4ee5\u505a80\u4efd \u5176\u4ed6\uff1a\u968f\u4fbf\uff0c\u4e0d\u4f1a\u5f71\u54cd\u5230\u53e3\u5473 \u8ba1\u7b97 \u6bcf\u4efd\uff1a \u534a\u5e72\u835e\u9ea6\u9762 100g \u5a03\u5a03\u83dc 8 \u7247\uff08\u5171 150g\uff09 \u751f\u83dc 6 \u7247\uff08\u5171 80g\uff09 \u706b\u9505\u5e95\u6599 25g \u82b1\u751f\u9171 15g \u5168\u8102\u725b\u5976 150ml \u751f\u62bd 6ml \u8fa3\u6912\u6cb9 10ml \u918b 20ml \u82b1\u6912\u6cb9 10ml \u6c34 500ml \u64cd\u4f5c \u5a03\u5a03\u83dc\u3001\u751f\u83dc\u6d17\u597d\uff0c\u5907\u7528 \u9505\u5185\u5012\u5165 500ml \u6c34\uff0c\u5f00\u5927\u706b\uff0c\u5c06\u835e\u9ea6\u9762\u548c\u5a03\u5a03\u83dc\u653e\u8fdb\u53bb\uff0c\u7b49\u5f85\u6c34\u6cb8\u817e \u6c34\u6cb8\u817e\u540e\uff0c\u8f6c\u5c0f\u706b\uff0c\u52a0\u5165\u706b\u9505\u5e95\u6599\u3001\u82b1\u751f\u9171\u3001\u725b\u5976\u3001\u751f\u62bd\u3001\u8fa3\u6912\u6cb9\uff0c\u6c34\u5f00\u540e\u716e 5 \u5206\u949f \u52a0\u5165\u751f\u83dc\uff0c\u518d\u716e 2 \u5206\u949f \u52a0\u5165\u918b\u3001\u82b1\u6912\u6cb9\uff0c\u5173\u706b\uff0c\u76f4\u63a5\u7aef\u7740\u5c0f\u9505\u5f00\u5403\u3002 \u9644\u52a0\u5185\u5bb9 \u4e00\u5b9a\u8981\u9009\u534a\u5e72\u835e\u9ea6\u9762\uff0c\u53e3\u611f\u6700\u597d \u53ef\u4ee5\u968f\u610f\u6dfb\u52a0\u5176\u4ed6\u4e1c\u897f\uff0c\u6bd4\u5982\u706b\u9505\u4e38\u3001\u86cb\u997a\u7b49 \u706b\u9505\u5e95\u6599\u3001\u82b1\u751f\u9171\u3001\u725b\u5976\u4e00\u5b9a\u8981\u52a0\uff0c\u53e3\u5473\u4e09\u5927\u5de8\u5934 \u5982\u679c\u4e0d\u80fd\u5403\u9178\uff0c\u53ef\u4ee5\u4e0d\u52a0\u918b \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9ebb\u8fa3\u51cf\u8102\u835e\u9ea6\u9762"},{"location":"dishes/staple/%E9%BA%BB%E8%BE%A3%E5%87%8F%E8%84%82%E8%8D%9E%E9%BA%A6%E9%9D%A2/#_1","text":"\u9ebb\u8fa3\u51cf\u8102\u835e\u9ea6\u9762\u505a\u6cd5\u975e\u5e38\u7b80\u5355\uff0c\u4e0d\u9700\u8981\u4efb\u4f55\u53a8\u827a\u57fa\u7840\u3002 \u4e00\u4efd 298 \u5343\u5361\uff0c\u7f8e\u5473+\u4fbf\u5b9c+\u51cf\u8102\uff0c\u53ea\u9700\u8981 20 \u5206\u949f\u5c31\u53ef\u4ee5\u5b8c\u6210\u3002","title":"\u9ebb\u8fa3\u51cf\u8102\u835e\u9ea6\u9762\u7684\u505a\u6cd5"},{"location":"dishes/staple/%E9%BA%BB%E8%BE%A3%E5%87%8F%E8%84%82%E8%8D%9E%E9%BA%A6%E9%9D%A2/#_2","text":"\u8c03\u5473\u6599\uff1a\u706b\u9505\u5e95\u6599\u3001\u82b1\u751f\u9171\u3001\u5168\u8102\u725b\u5976\u3001\u751f\u62bd\u3001\u8fa3\u6912\u6cb9\u3001\u918b\u3001\u82b1\u6912\u6cb9 \u539f\u6599\uff1a\u534a\u5e72\u835e\u9ea6\u9762\u3001\u5a03\u5a03\u83dc\u3001\u751f\u83dc \u6d17\u83dc\u76c6\u3001\u76f4\u5f84 18cm \u7684\u5c0f\u9505 \u5efa\u8bae\u8d2d\u4e70\u65b9\u6848\uff1a \u835e\u9ea6\u9762\uff1apdd\u4e70\u98df\u5c1a\u70e9\u835e\u9ea6\u9762\uff0c\u4e00\u5305400g\uff0c\u4ef7\u683c4.9\u5143\uff0c\u53ef\u4ee5\u505a4\u4efd \u706b\u9505\u5e95\u6599\uff1a\u67d0\u5b9d\u5c0f\u9f99\u574e\u4f20\u7edf\u6e05\u6cb9\u706b\u9505\u5e95\u6599\u5473\u9053\u6700\u4f73\uff0c29.8\u5143\u4e00\u5305\uff0c\u53ef\u4ee5\u505a20\u4efd \u82b1\u751f\u9171\uff1apdd\u83ba\u6b4c\u82b1\u751f\u9171 24.8\u5143\u4e24\u74f6\uff0c\u53ef\u4ee5\u505a68\u4efd \u82b1\u6912\u6cb9\uff1apdd\u4e94\u4e30\u9ece\u7ea2\u82b1\u6912\u6cb9400ml,32\u5143\u4e24\u74f6\uff0c\u53ef\u4ee5\u505a80\u4efd \u5176\u4ed6\uff1a\u968f\u4fbf\uff0c\u4e0d\u4f1a\u5f71\u54cd\u5230\u53e3\u5473","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/staple/%E9%BA%BB%E8%BE%A3%E5%87%8F%E8%84%82%E8%8D%9E%E9%BA%A6%E9%9D%A2/#_3","text":"\u6bcf\u4efd\uff1a \u534a\u5e72\u835e\u9ea6\u9762 100g \u5a03\u5a03\u83dc 8 \u7247\uff08\u5171 150g\uff09 \u751f\u83dc 6 \u7247\uff08\u5171 80g\uff09 \u706b\u9505\u5e95\u6599 25g \u82b1\u751f\u9171 15g \u5168\u8102\u725b\u5976 150ml \u751f\u62bd 6ml \u8fa3\u6912\u6cb9 10ml \u918b 20ml \u82b1\u6912\u6cb9 10ml \u6c34 500ml","title":"\u8ba1\u7b97"},{"location":"dishes/staple/%E9%BA%BB%E8%BE%A3%E5%87%8F%E8%84%82%E8%8D%9E%E9%BA%A6%E9%9D%A2/#_4","text":"\u5a03\u5a03\u83dc\u3001\u751f\u83dc\u6d17\u597d\uff0c\u5907\u7528 \u9505\u5185\u5012\u5165 500ml \u6c34\uff0c\u5f00\u5927\u706b\uff0c\u5c06\u835e\u9ea6\u9762\u548c\u5a03\u5a03\u83dc\u653e\u8fdb\u53bb\uff0c\u7b49\u5f85\u6c34\u6cb8\u817e \u6c34\u6cb8\u817e\u540e\uff0c\u8f6c\u5c0f\u706b\uff0c\u52a0\u5165\u706b\u9505\u5e95\u6599\u3001\u82b1\u751f\u9171\u3001\u725b\u5976\u3001\u751f\u62bd\u3001\u8fa3\u6912\u6cb9\uff0c\u6c34\u5f00\u540e\u716e 5 \u5206\u949f \u52a0\u5165\u751f\u83dc\uff0c\u518d\u716e 2 \u5206\u949f \u52a0\u5165\u918b\u3001\u82b1\u6912\u6cb9\uff0c\u5173\u706b\uff0c\u76f4\u63a5\u7aef\u7740\u5c0f\u9505\u5f00\u5403\u3002","title":"\u64cd\u4f5c"},{"location":"dishes/staple/%E9%BA%BB%E8%BE%A3%E5%87%8F%E8%84%82%E8%8D%9E%E9%BA%A6%E9%9D%A2/#_5","text":"\u4e00\u5b9a\u8981\u9009\u534a\u5e72\u835e\u9ea6\u9762\uff0c\u53e3\u611f\u6700\u597d \u53ef\u4ee5\u968f\u610f\u6dfb\u52a0\u5176\u4ed6\u4e1c\u897f\uff0c\u6bd4\u5982\u706b\u9505\u4e38\u3001\u86cb\u997a\u7b49 \u706b\u9505\u5e95\u6599\u3001\u82b1\u751f\u9171\u3001\u725b\u5976\u4e00\u5b9a\u8981\u52a0\uff0c\u53e3\u5473\u4e09\u5927\u5de8\u5934 \u5982\u679c\u4e0d\u80fd\u5403\u9178\uff0c\u53ef\u4ee5\u4e0d\u52a0\u918b \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/staple/pizza/%E6%8A%AB%E8%90%A8%E9%A5%BC%E7%9A%AE/","text":"\u62ab\u8428\u997c\u76ae\u7684\u505a\u6cd5 \u62ab\u8428\u5236\u4f5c\u603b\u4f53\u6765\u8bf4\u6bd4\u8f83\u7b80\u5355\uff0c\u7a0d\u5fae\u6709\u70b9\u9ebb\u70e6\u4e5f\u662f\u4e89\u8bae\u6700\u591a\u7684\u5c31\u662f\u62ab\u8428\u997c\u76ae\uff0c\u505a\u597d\u4e86\u62ab\u8428\u997c\u76ae\u559c\u6b22\u5403\u4ec0\u4e48\u53e3\u5473\u7684\u62ab\u8428\uff0c\u76f4\u63a5\u628a\u51c6\u5907\u597d\u7684\u98df\u6750\u653e\u4e0a\u53bb\u70e4\u719f\u5c31\u597d\uff0c\u6240\u4ee5\u8fd9\u91cc\u91cd\u70b9\u8bf4\u4e00\u4e0b\u62ab\u8428\u997c\u76ae\u5982\u4f55\u5236\u4f5c\u3002 \u672c\u6559\u7a0b\u4e2d\u7684\u997c\u76ae\u662f\u5c5e\u4e8e\u8f6f\u9762\u56e2\u4f4e\u6e29\u9694\u591c\u53d1\u9175 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u539f\u6599 \u4e2d\u7b4b\u9762\u7c89 \u6c34\uff08\u6e29\u6c34\uff09 \u5b89\u742a\u5e72\u9175\u6bcd\u7c89 \u98df\u7528\u76d0 \u6a44\u6984\u6cb9 \u767d\u7802\u7cd6 \u5de5\u5177 \u70e4\u7bb1 \u70d8\u7119\u6cb9\u7eb8 \u62ab\u8428\u77f3\uff08\u6709\u66f4\u597d\uff0c\u6ca1\u6709\u666e\u901a\u70e4\u76d8\u4e5f\u53ef\u4ee5\uff09 \u64c0\u9762\u6756\uff08\u975e\u5fc5\u9700\uff09 \u8ba1\u7b97 \u4e00\u4e2a 8 ~ 9 \u5bf8\u7684\u62ab\u8428\u5dee\u4e0d\u591a\u9700\u8981 125g \u9762\u7c89\uff0c\u5dee\u4e0d\u591a\u662f\u4e00\u4e2a\u4eba\u7684\u91cf\uff08\u6210\u5e74\u7537\u6027\u5c06\u5c06\u591f\u5403\u7684\u6837\u5b50\uff09 \u539f\u6750\u6599\u7684\u6df7\u5408\u6bd4\u4f8b \u9762\u7c89 : \u6c34 : \u6a44\u6984\u6cb9 : \u9175\u6bcd\u7c89 : \u76d0 : \u7cd6 100 : 70 : 7 : 1 : 0.6 : 0.6 \u793a\u4f8b \u6211\u4e60\u60ef\u4e00\u6b21\u505a 4 \u4e2a\u997c\u76ae\uff0c\u9700\u8981: \u9762\u7c89 125g x 4= 500g\uff0c \u6c34 70 x 5 = 350g\uff0c \u6a44\u6984\u6cb9 7 x 5 =35g\uff0c \u9175\u6bcd\u7c89 1 x 5 = 5g\uff0c \u76d0 0.6 x 5 = 3g\uff0c \u7cd6 0.6 x 5 = 3g \u64cd\u4f5c \u7528\u51c6\u5907\u597d\u7684\u6e29\u6c34\u628a\u9175\u6bcd\u7c89\u5316\u5f00\uff0c\u7a0d\u5fae\u6405\u62cc\u5c0f\u5c31\u597d\uff0c\u5907\u7528 \u53d6\u51c6\u5907\u597d\u7684\u9762\u7c89\uff0c\u4f9d\u6b21\u6dfb\u52a0\u76d0\u3001\u6a44\u6984\u6cb9\u3001\u767d\u7802\u7cd6 \u51c6\u5907\u6df7\u5408\u6c34\u548c\u9762\u7c89\uff0c\u8fb9\u52a0\u6c34\u8fb9\u6405\u62cc\u76f4\u81f3\u6c34\u5168\u90e8\u52a0\u5b8c \u6405\u62cc\u81f3\u770b\u4e0d\u5230\u5e72\u7c73\u7c89\u4e3a\u6b62 \u7528\u5dee\u4e0d\u591a\u4e09\u500d\u5927\u9762\u56e2\u7684\u5bb9\u5668\u88c5\u597d\uff0c\u5bc6\u5c01\uff0c\u51b0\u7bb1\u51b7\u85cf\uff084 \u5ea6\u5de6\u53f3\uff09 \u7b49\u5f85 8~12 \u5c0f\u65f6\uff0c\u4e00\u822c\u665a\u4e0a\u505a\u7b2c\u4e8c\u5929\u5c31\u53ef\u4ee5\u7528 \u89c2\u5bdf\u9762\u56e2\u9192\u53d1\u5b8c\u6bd5 \u5dee\u4e0d\u591a\u662f\u539f\u59cb\u5927\u5c0f\u4e24\u500d\u5de6\u53f3\u7b97\u9192\u53d1\u5b8c\u6bd5 \u53d6\u9192\u53d1\u597d\u7684\u9762\u56e2\uff0c\u5747\u5300\u5206\u6210\u56db\u4efd\uff0c\u5206\u522b\u7528\u4fdd\u9c9c\u819c\u76d6\u597d\uff0c\u5907\u7528 \u6848\u677f\u6492\u7a0d\u5fae\u591a\u4e00\u70b9\u7684\u5e72\u9762\u7c89\uff0c\u51c6\u5907\u5f00\u59cb\u63c9\u9762 \u56e0\u4e3a\u662f\u6bd4\u8f83\u6e7f\u7684\u9762\u56e2\uff0c\u6240\u4ee5\u7c98\u4e0a\u5e72\u9762\u7c89\u540e\u624d\u6ca1\u90a3\u4e48\u7c98\u624b\uff0c\u4e0d\u7528\u63c9\u592a\u591a\u6b21\uff0c\u9762\u56e2\u8868\u9762\u7a0d\u5fae\u5149\u6ed1\u4e00\u70b9\u5c31\u53ef\u4ee5\u4e86 \u7528\u624b\u62c9\u626f\uff0c\u6216\u8005\u64c0\u9762\u6756\u64c0\u5e73\uff0c\u4e5f\u4e0d\u4e00\u5b9a\u975e\u5f97\u64c0\u5706\uff0c\u53ea\u8981\u539a\u5ea6\u5747\u5300\uff0c\u4f60\u5bb6\u70e4\u7bb1\u653e\u5f97\u8fdb\u53bb\u5c31\u597d \u94fa\u597d\u6cb9\u7eb8\uff0c\u653e\u4e0a\u997c\u76ae\uff0c\u4f9d\u7167\u4e2a\u4eba\u53e3\u5473\uff0c\u628a\u51c6\u5907\u597d\u7684\u98df\u6750\u653e\u4e0a\u53bb\uff0c\u6492\u4e0a\u829d\u58eb\u788e \u6c34\u679c\u70e4\u7bb1\u4e0a 180 \u5ea6\uff0c\u4e0b 220 \u5ea6\uff0c16 \u5206\u949f\u5373\u53ef \u8089\u852c\u83dc\u70e4\u7bb1\u4e0a 200 \u5ea6\uff0c\u4e0b 230 \u5ea6\uff0c18 \u5206\u949f\u5373\u53ef \u6324\u4e0a\u6c99\u62c9\u9171\u6216\u8005\u5176\u4ed6\u81ea\u5df1\u559c\u6b22\u7684\u9171\u5373\u53ef\u4eab\u7528~ \u9644\u52a0\u5185\u5bb9 \u4e00\u5b9a\u8981\u6ce8\u610f\u6c34\u7684\u6bd4\u4f8b \u70e4\u7bb1\u54c1\u8d28\u5c42\u6b21\u4e0d\u9f50\uff0c\u7b2c\u4e00\u6b21\u505a\u6ce8\u610f\u89c2\u5bdf\u706b\u5019\u5bf9\u62ab\u8428\u7684\u5f71\u54cd \u4e00\u822c\u4e0d\u7279\u522b\u6807\u6ce8\u662f\u4f4e\u7b4b\u6216\u9ad8\u7b4b\u9762\u7c89\uff0c\u57fa\u672c\u90fd\u662f\u4e2d\u7b4b\u9762\u7c89 \u5bb9\u6613\u51fa\u6c34\u7684\u6c34\u679c\u4e0d\u80fd\u4f5c\u4e3a\u98df\u6750\uff0c\u6bd4\u5982\u897f\u74dc\u3001\u6a58\u5b50\u7b49 \u5e0c\u671b\u4f60\u6210\u529f\uff0c\u5b9e\u73b0\u62ab\u8428\u81ea\u7531 :) \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u62ab\u8428\u997c\u76ae"},{"location":"dishes/staple/pizza/%E6%8A%AB%E8%90%A8%E9%A5%BC%E7%9A%AE/#_1","text":"\u62ab\u8428\u5236\u4f5c\u603b\u4f53\u6765\u8bf4\u6bd4\u8f83\u7b80\u5355\uff0c\u7a0d\u5fae\u6709\u70b9\u9ebb\u70e6\u4e5f\u662f\u4e89\u8bae\u6700\u591a\u7684\u5c31\u662f\u62ab\u8428\u997c\u76ae\uff0c\u505a\u597d\u4e86\u62ab\u8428\u997c\u76ae\u559c\u6b22\u5403\u4ec0\u4e48\u53e3\u5473\u7684\u62ab\u8428\uff0c\u76f4\u63a5\u628a\u51c6\u5907\u597d\u7684\u98df\u6750\u653e\u4e0a\u53bb\u70e4\u719f\u5c31\u597d\uff0c\u6240\u4ee5\u8fd9\u91cc\u91cd\u70b9\u8bf4\u4e00\u4e0b\u62ab\u8428\u997c\u76ae\u5982\u4f55\u5236\u4f5c\u3002 \u672c\u6559\u7a0b\u4e2d\u7684\u997c\u76ae\u662f\u5c5e\u4e8e\u8f6f\u9762\u56e2\u4f4e\u6e29\u9694\u591c\u53d1\u9175","title":"\u62ab\u8428\u997c\u76ae\u7684\u505a\u6cd5"},{"location":"dishes/staple/pizza/%E6%8A%AB%E8%90%A8%E9%A5%BC%E7%9A%AE/#_2","text":"\u539f\u6599 \u4e2d\u7b4b\u9762\u7c89 \u6c34\uff08\u6e29\u6c34\uff09 \u5b89\u742a\u5e72\u9175\u6bcd\u7c89 \u98df\u7528\u76d0 \u6a44\u6984\u6cb9 \u767d\u7802\u7cd6 \u5de5\u5177 \u70e4\u7bb1 \u70d8\u7119\u6cb9\u7eb8 \u62ab\u8428\u77f3\uff08\u6709\u66f4\u597d\uff0c\u6ca1\u6709\u666e\u901a\u70e4\u76d8\u4e5f\u53ef\u4ee5\uff09 \u64c0\u9762\u6756\uff08\u975e\u5fc5\u9700\uff09","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/staple/pizza/%E6%8A%AB%E8%90%A8%E9%A5%BC%E7%9A%AE/#_3","text":"\u4e00\u4e2a 8 ~ 9 \u5bf8\u7684\u62ab\u8428\u5dee\u4e0d\u591a\u9700\u8981 125g \u9762\u7c89\uff0c\u5dee\u4e0d\u591a\u662f\u4e00\u4e2a\u4eba\u7684\u91cf\uff08\u6210\u5e74\u7537\u6027\u5c06\u5c06\u591f\u5403\u7684\u6837\u5b50\uff09 \u539f\u6750\u6599\u7684\u6df7\u5408\u6bd4\u4f8b \u9762\u7c89 : \u6c34 : \u6a44\u6984\u6cb9 : \u9175\u6bcd\u7c89 : \u76d0 : \u7cd6 100 : 70 : 7 : 1 : 0.6 : 0.6 \u793a\u4f8b \u6211\u4e60\u60ef\u4e00\u6b21\u505a 4 \u4e2a\u997c\u76ae\uff0c\u9700\u8981: \u9762\u7c89 125g x 4= 500g\uff0c \u6c34 70 x 5 = 350g\uff0c \u6a44\u6984\u6cb9 7 x 5 =35g\uff0c \u9175\u6bcd\u7c89 1 x 5 = 5g\uff0c \u76d0 0.6 x 5 = 3g\uff0c \u7cd6 0.6 x 5 = 3g","title":"\u8ba1\u7b97"},{"location":"dishes/staple/pizza/%E6%8A%AB%E8%90%A8%E9%A5%BC%E7%9A%AE/#_4","text":"\u7528\u51c6\u5907\u597d\u7684\u6e29\u6c34\u628a\u9175\u6bcd\u7c89\u5316\u5f00\uff0c\u7a0d\u5fae\u6405\u62cc\u5c0f\u5c31\u597d\uff0c\u5907\u7528 \u53d6\u51c6\u5907\u597d\u7684\u9762\u7c89\uff0c\u4f9d\u6b21\u6dfb\u52a0\u76d0\u3001\u6a44\u6984\u6cb9\u3001\u767d\u7802\u7cd6 \u51c6\u5907\u6df7\u5408\u6c34\u548c\u9762\u7c89\uff0c\u8fb9\u52a0\u6c34\u8fb9\u6405\u62cc\u76f4\u81f3\u6c34\u5168\u90e8\u52a0\u5b8c \u6405\u62cc\u81f3\u770b\u4e0d\u5230\u5e72\u7c73\u7c89\u4e3a\u6b62 \u7528\u5dee\u4e0d\u591a\u4e09\u500d\u5927\u9762\u56e2\u7684\u5bb9\u5668\u88c5\u597d\uff0c\u5bc6\u5c01\uff0c\u51b0\u7bb1\u51b7\u85cf\uff084 \u5ea6\u5de6\u53f3\uff09 \u7b49\u5f85 8~12 \u5c0f\u65f6\uff0c\u4e00\u822c\u665a\u4e0a\u505a\u7b2c\u4e8c\u5929\u5c31\u53ef\u4ee5\u7528 \u89c2\u5bdf\u9762\u56e2\u9192\u53d1\u5b8c\u6bd5 \u5dee\u4e0d\u591a\u662f\u539f\u59cb\u5927\u5c0f\u4e24\u500d\u5de6\u53f3\u7b97\u9192\u53d1\u5b8c\u6bd5 \u53d6\u9192\u53d1\u597d\u7684\u9762\u56e2\uff0c\u5747\u5300\u5206\u6210\u56db\u4efd\uff0c\u5206\u522b\u7528\u4fdd\u9c9c\u819c\u76d6\u597d\uff0c\u5907\u7528 \u6848\u677f\u6492\u7a0d\u5fae\u591a\u4e00\u70b9\u7684\u5e72\u9762\u7c89\uff0c\u51c6\u5907\u5f00\u59cb\u63c9\u9762 \u56e0\u4e3a\u662f\u6bd4\u8f83\u6e7f\u7684\u9762\u56e2\uff0c\u6240\u4ee5\u7c98\u4e0a\u5e72\u9762\u7c89\u540e\u624d\u6ca1\u90a3\u4e48\u7c98\u624b\uff0c\u4e0d\u7528\u63c9\u592a\u591a\u6b21\uff0c\u9762\u56e2\u8868\u9762\u7a0d\u5fae\u5149\u6ed1\u4e00\u70b9\u5c31\u53ef\u4ee5\u4e86 \u7528\u624b\u62c9\u626f\uff0c\u6216\u8005\u64c0\u9762\u6756\u64c0\u5e73\uff0c\u4e5f\u4e0d\u4e00\u5b9a\u975e\u5f97\u64c0\u5706\uff0c\u53ea\u8981\u539a\u5ea6\u5747\u5300\uff0c\u4f60\u5bb6\u70e4\u7bb1\u653e\u5f97\u8fdb\u53bb\u5c31\u597d \u94fa\u597d\u6cb9\u7eb8\uff0c\u653e\u4e0a\u997c\u76ae\uff0c\u4f9d\u7167\u4e2a\u4eba\u53e3\u5473\uff0c\u628a\u51c6\u5907\u597d\u7684\u98df\u6750\u653e\u4e0a\u53bb\uff0c\u6492\u4e0a\u829d\u58eb\u788e \u6c34\u679c\u70e4\u7bb1\u4e0a 180 \u5ea6\uff0c\u4e0b 220 \u5ea6\uff0c16 \u5206\u949f\u5373\u53ef \u8089\u852c\u83dc\u70e4\u7bb1\u4e0a 200 \u5ea6\uff0c\u4e0b 230 \u5ea6\uff0c18 \u5206\u949f\u5373\u53ef \u6324\u4e0a\u6c99\u62c9\u9171\u6216\u8005\u5176\u4ed6\u81ea\u5df1\u559c\u6b22\u7684\u9171\u5373\u53ef\u4eab\u7528~","title":"\u64cd\u4f5c"},{"location":"dishes/staple/pizza/%E6%8A%AB%E8%90%A8%E9%A5%BC%E7%9A%AE/#_5","text":"\u4e00\u5b9a\u8981\u6ce8\u610f\u6c34\u7684\u6bd4\u4f8b \u70e4\u7bb1\u54c1\u8d28\u5c42\u6b21\u4e0d\u9f50\uff0c\u7b2c\u4e00\u6b21\u505a\u6ce8\u610f\u89c2\u5bdf\u706b\u5019\u5bf9\u62ab\u8428\u7684\u5f71\u54cd \u4e00\u822c\u4e0d\u7279\u522b\u6807\u6ce8\u662f\u4f4e\u7b4b\u6216\u9ad8\u7b4b\u9762\u7c89\uff0c\u57fa\u672c\u90fd\u662f\u4e2d\u7b4b\u9762\u7c89 \u5bb9\u6613\u51fa\u6c34\u7684\u6c34\u679c\u4e0d\u80fd\u4f5c\u4e3a\u98df\u6750\uff0c\u6bd4\u5982\u897f\u74dc\u3001\u6a58\u5b50\u7b49 \u5e0c\u671b\u4f60\u6210\u529f\uff0c\u5b9e\u73b0\u62ab\u8428\u81ea\u7531 :) \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/staple/%E4%B8%AD%E5%BC%8F%E9%A6%85%E9%A5%BC/%E4%B8%AD%E5%BC%8F%E9%A6%85%E9%A5%BC/","text":"\u4e2d\u5f0f\u9985\u997c\u7684\u505a\u6cd5 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u9762\u7c89\uff08\u975e\u81ea\u53d1\u7c89\uff09 \u8089\u6cab \u6cb9 \u76d0 \u7cd6 \u751f\u7c89 \u9171\u6cb9 \u98ce\u5473\u8c03\u6599\uff08\u5982\u9e21\u7c89\u3001\u5b5c\u7136\u3001\u6912\u76d0\uff0c\u53ef\u9009\uff09 \u849c\u5934 \u5927\u8471 \u9e21\u86cb\uff08\u53ef\u9009\uff09 \u80e1\u841d\u535c\uff08\u53ef\u9009\uff09 \u5e73\u5e95\u9505 \u7092\u9505\uff08\u53ef\u4ee5\u4f7f\u7528\u540c\u4e00\u4e2a\u5e73\u5e95\u9505\u66ff\u4ee3\uff09 \u8ba1\u7b97 \u6bcf\u4e00\u4efd\u542b\uff1a \u9762\u7c89 200g \u8089\u6cab 50g \u6cb9 30ml \u76d0 3g \u7cd6 5g \u751f\u7c89 10g \u9171\u6cb9 5g \u98ce\u5473\u8c03\u6599 3g \u849c\u5934 2 \u74e3 \u5927\u8471 1/4 \u6839\uff08\u9760\u53f6\u90e8\u5206\uff09 \u9e21\u86cb \uff08\u53ef\u9009\uff0c1 \u4e2a\uff09 \u4f7f\u7528\u4e0a\u8ff0\u6761\u4ef6\uff0c\u8ba1\u7b97\u51fa\u8ba1\u5212\u4f7f\u7528\u7684\u539f\u6750\u6599\u6bd4\u4f8b\u3002 \u51c6\u5907\u539f\u6599 \u53d6\u8089\u6cab\uff08\u89e3\u51bb\uff09\uff0c\u52a0\u5165 1/2 \u6240\u6709\u4e0a\u8ff0\u8c03\u6599\uff08\u6cb9\u3001\u76d0\u3001\u7cd6\u3001\u9171\u6cb9\u3001\u98ce\u5473\u8c03\u6599\uff09\u548c\u5168\u90e8\u7684\u751f\u7c89\uff0c\u6405\u62cc\u5747\u5300\uff0c\u814c\u5236 30 \u5206\u949f\u3002 \u5c06\u9762\u7c89\u52a0\u5165\u7897\u4e2d\uff0c\u52a0\u5165\u9e21\u86cb\uff0c\u52a0\u5165\u5269\u4e0b 1/2 \u6240\u6709\u4e0a\u8ff0\u8c03\u6599\uff0c\u52a0\u5165\u76f8\u5f53\u4e8e\u9762\u7c89 1/2 \u7684\u6c34\uff08\u4f7f\u5f97\u9762\u7c89\u76f8\u5bf9\u7c98\u7a20\u4f46\u53ef\u4ee5\u6d41\u52a8\uff09\uff0c\u6405\u62cc\u5747\u5300\u3002 \u849c\u5934\u5207\u4e3a\u849c\u672b\u3002 \u5927\u8471\u5207\u6bb5\u3002 \u80e1\u841d\u535c\u5207\u672b\uff08\u4f5c\u4e3a\u9985\u6599\u7528\uff0c\u6240\u4ee5\u8981\u6c42\u5c3d\u91cf\u7ec6\u788e\uff0c\u53ef\u7528\u4e71\u5200\uff09 \u64cd\u4f5c \u70ed\u9505\u51b7\u6cb9\uff0c\u5bbd\u6cb9\u8d77\u9505\u3002 \u5f85\u6cb9\u70e7\u70ed\u540e\uff0c\u653e\u5165\u849c\u672b\u7206\u9999\u3002 \u52a0\u5165\u814c\u5236\u7684\u8089\u6cab\uff0c\u7ffb\u7092\uff0c\u76f4\u81f3\u65ad\u751f\u3002 \u5c06\u80e1\u841d\u535c\u672b\u52a0\u5165\u8089\u6cab\u4e2d\u4e00\u540c\u7ffb\u7092\uff0c\u76f4\u81f3\u6cb9\u88ab\u67d3\u4e3a\u91d1\u9ec4\u8272\uff08\u8fd9\u662f\u4e3a\u4e86\u8403\u53d6\u80e1\u841d\u535c\u7684\u98ce\u5473\uff09\u3002 \u5173\u706b\u3002\u51b7\u5374 2 \u5206\u949f\u3002 \u5c06\u7092\u597d\u7684\u8089\u6cab\u5012\u5165\u751f\u9762\u7cca\u4e2d\uff0c\u6405\u5300\u3002 \u91cd\u65b0\u5f00\u706b\uff0c\u5e73\u5e95\u9505\u94fa\u5e95\u6cb9\u3002 \u8c03\u81f3\u5c0f\u706b\uff0c\u5c06\u9762\u7cca\u5012\u5165\u9505\u4e2d\u5747\u5300\u94fa\u6ee1\u3002\u4fdd\u8bc1\u539a\u5ea6\u4e0d\u8981\u8fc7\u9ad8\u3002\u53ef\u4ee5\u7aef\u8d77\u9505\uff0c\u8ba9\u9762\u7cca\u6d41\u8fc7\u9505\u5e95\u6765\u5b8c\u6210\u8fd9\u4e00\u64cd\u4f5c\u3002 \u5728\u997c\u7684\u8868\u9762\u5c1a\u4e3a\u6db2\u6001\u65f6\uff0c\u6492\u4e0a\u5927\u8471\u6bb5\u3002 \u4fdd\u6301\u5c0f\u706b\uff0c\u76f4\u5230\u5e95\u9762\u51dd\u56fa\u3002 \u5c06\u997c\u7ffb\u9762\uff0c\u7ee7\u7eed\u5c0f\u706b\u714e\u70e4\uff0c\u76f4\u81f3\u53e6\u4e00\u4fa7\u51dd\u56fa\u3002 \u4e4b\u540e\uff0c\u6bcf\u4e00\u9762\u518d\u989d\u5916\u714e 20 \u79d2\u3002 \u5173\u706b\u51fa\u9505\u3002 \u9644\u52a0\u5185\u5bb9 \u5c06\u8089\u6cab\u548c\u80e1\u841d\u535c\u672b\u52a0\u5165\u9762\u7cca\u540e\uff0c\u5e94\u8be5\u5c3d\u91cf\u6405\u5300\uff0c\u4fdd\u8bc1\u5473\u9053\u6269\u6563\u5230\u997c\u5185\u5404\u5904\u3002 \u8089\u6cab\u548c\u80e1\u841d\u535c\u672b\u5373\u9985\u6599\u53ef\u4ee5\u4f7f\u7528\u5404\u7c7b\u719f\u9985\u6599\u66ff\u4ee3\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u4e2d\u5f0f\u9985\u997c"},{"location":"dishes/staple/%E4%B8%AD%E5%BC%8F%E9%A6%85%E9%A5%BC/%E4%B8%AD%E5%BC%8F%E9%A6%85%E9%A5%BC/#_1","text":"","title":"\u4e2d\u5f0f\u9985\u997c\u7684\u505a\u6cd5"},{"location":"dishes/staple/%E4%B8%AD%E5%BC%8F%E9%A6%85%E9%A5%BC/%E4%B8%AD%E5%BC%8F%E9%A6%85%E9%A5%BC/#_2","text":"\u9762\u7c89\uff08\u975e\u81ea\u53d1\u7c89\uff09 \u8089\u6cab \u6cb9 \u76d0 \u7cd6 \u751f\u7c89 \u9171\u6cb9 \u98ce\u5473\u8c03\u6599\uff08\u5982\u9e21\u7c89\u3001\u5b5c\u7136\u3001\u6912\u76d0\uff0c\u53ef\u9009\uff09 \u849c\u5934 \u5927\u8471 \u9e21\u86cb\uff08\u53ef\u9009\uff09 \u80e1\u841d\u535c\uff08\u53ef\u9009\uff09 \u5e73\u5e95\u9505 \u7092\u9505\uff08\u53ef\u4ee5\u4f7f\u7528\u540c\u4e00\u4e2a\u5e73\u5e95\u9505\u66ff\u4ee3\uff09","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/staple/%E4%B8%AD%E5%BC%8F%E9%A6%85%E9%A5%BC/%E4%B8%AD%E5%BC%8F%E9%A6%85%E9%A5%BC/#_3","text":"\u6bcf\u4e00\u4efd\u542b\uff1a \u9762\u7c89 200g \u8089\u6cab 50g \u6cb9 30ml \u76d0 3g \u7cd6 5g \u751f\u7c89 10g \u9171\u6cb9 5g \u98ce\u5473\u8c03\u6599 3g \u849c\u5934 2 \u74e3 \u5927\u8471 1/4 \u6839\uff08\u9760\u53f6\u90e8\u5206\uff09 \u9e21\u86cb \uff08\u53ef\u9009\uff0c1 \u4e2a\uff09 \u4f7f\u7528\u4e0a\u8ff0\u6761\u4ef6\uff0c\u8ba1\u7b97\u51fa\u8ba1\u5212\u4f7f\u7528\u7684\u539f\u6750\u6599\u6bd4\u4f8b\u3002","title":"\u8ba1\u7b97"},{"location":"dishes/staple/%E4%B8%AD%E5%BC%8F%E9%A6%85%E9%A5%BC/%E4%B8%AD%E5%BC%8F%E9%A6%85%E9%A5%BC/#_4","text":"\u53d6\u8089\u6cab\uff08\u89e3\u51bb\uff09\uff0c\u52a0\u5165 1/2 \u6240\u6709\u4e0a\u8ff0\u8c03\u6599\uff08\u6cb9\u3001\u76d0\u3001\u7cd6\u3001\u9171\u6cb9\u3001\u98ce\u5473\u8c03\u6599\uff09\u548c\u5168\u90e8\u7684\u751f\u7c89\uff0c\u6405\u62cc\u5747\u5300\uff0c\u814c\u5236 30 \u5206\u949f\u3002 \u5c06\u9762\u7c89\u52a0\u5165\u7897\u4e2d\uff0c\u52a0\u5165\u9e21\u86cb\uff0c\u52a0\u5165\u5269\u4e0b 1/2 \u6240\u6709\u4e0a\u8ff0\u8c03\u6599\uff0c\u52a0\u5165\u76f8\u5f53\u4e8e\u9762\u7c89 1/2 \u7684\u6c34\uff08\u4f7f\u5f97\u9762\u7c89\u76f8\u5bf9\u7c98\u7a20\u4f46\u53ef\u4ee5\u6d41\u52a8\uff09\uff0c\u6405\u62cc\u5747\u5300\u3002 \u849c\u5934\u5207\u4e3a\u849c\u672b\u3002 \u5927\u8471\u5207\u6bb5\u3002 \u80e1\u841d\u535c\u5207\u672b\uff08\u4f5c\u4e3a\u9985\u6599\u7528\uff0c\u6240\u4ee5\u8981\u6c42\u5c3d\u91cf\u7ec6\u788e\uff0c\u53ef\u7528\u4e71\u5200\uff09","title":"\u51c6\u5907\u539f\u6599"},{"location":"dishes/staple/%E4%B8%AD%E5%BC%8F%E9%A6%85%E9%A5%BC/%E4%B8%AD%E5%BC%8F%E9%A6%85%E9%A5%BC/#_5","text":"\u70ed\u9505\u51b7\u6cb9\uff0c\u5bbd\u6cb9\u8d77\u9505\u3002 \u5f85\u6cb9\u70e7\u70ed\u540e\uff0c\u653e\u5165\u849c\u672b\u7206\u9999\u3002 \u52a0\u5165\u814c\u5236\u7684\u8089\u6cab\uff0c\u7ffb\u7092\uff0c\u76f4\u81f3\u65ad\u751f\u3002 \u5c06\u80e1\u841d\u535c\u672b\u52a0\u5165\u8089\u6cab\u4e2d\u4e00\u540c\u7ffb\u7092\uff0c\u76f4\u81f3\u6cb9\u88ab\u67d3\u4e3a\u91d1\u9ec4\u8272\uff08\u8fd9\u662f\u4e3a\u4e86\u8403\u53d6\u80e1\u841d\u535c\u7684\u98ce\u5473\uff09\u3002 \u5173\u706b\u3002\u51b7\u5374 2 \u5206\u949f\u3002 \u5c06\u7092\u597d\u7684\u8089\u6cab\u5012\u5165\u751f\u9762\u7cca\u4e2d\uff0c\u6405\u5300\u3002 \u91cd\u65b0\u5f00\u706b\uff0c\u5e73\u5e95\u9505\u94fa\u5e95\u6cb9\u3002 \u8c03\u81f3\u5c0f\u706b\uff0c\u5c06\u9762\u7cca\u5012\u5165\u9505\u4e2d\u5747\u5300\u94fa\u6ee1\u3002\u4fdd\u8bc1\u539a\u5ea6\u4e0d\u8981\u8fc7\u9ad8\u3002\u53ef\u4ee5\u7aef\u8d77\u9505\uff0c\u8ba9\u9762\u7cca\u6d41\u8fc7\u9505\u5e95\u6765\u5b8c\u6210\u8fd9\u4e00\u64cd\u4f5c\u3002 \u5728\u997c\u7684\u8868\u9762\u5c1a\u4e3a\u6db2\u6001\u65f6\uff0c\u6492\u4e0a\u5927\u8471\u6bb5\u3002 \u4fdd\u6301\u5c0f\u706b\uff0c\u76f4\u5230\u5e95\u9762\u51dd\u56fa\u3002 \u5c06\u997c\u7ffb\u9762\uff0c\u7ee7\u7eed\u5c0f\u706b\u714e\u70e4\uff0c\u76f4\u81f3\u53e6\u4e00\u4fa7\u51dd\u56fa\u3002 \u4e4b\u540e\uff0c\u6bcf\u4e00\u9762\u518d\u989d\u5916\u714e 20 \u79d2\u3002 \u5173\u706b\u51fa\u9505\u3002","title":"\u64cd\u4f5c"},{"location":"dishes/staple/%E4%B8%AD%E5%BC%8F%E9%A6%85%E9%A5%BC/%E4%B8%AD%E5%BC%8F%E9%A6%85%E9%A5%BC/#_6","text":"\u5c06\u8089\u6cab\u548c\u80e1\u841d\u535c\u672b\u52a0\u5165\u9762\u7cca\u540e\uff0c\u5e94\u8be5\u5c3d\u91cf\u6405\u5300\uff0c\u4fdd\u8bc1\u5473\u9053\u6269\u6563\u5230\u997c\u5185\u5404\u5904\u3002 \u8089\u6cab\u548c\u80e1\u841d\u535c\u672b\u5373\u9985\u6599\u53ef\u4ee5\u4f7f\u7528\u5404\u7c7b\u719f\u9985\u6599\u66ff\u4ee3\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/staple/%E5%87%89%E7%B2%89/%E5%87%89%E7%B2%89/","text":"\u51c9\u7c89\u7684\u505a\u6cd5 \u4f24\u5fc3\u51c9\u7c89\u5403\u4e86\u4e0d\u4f1a\u8ba9\u4f60\u4f24\u5fc3\u7684\u54e6\uff01 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u8c4c\u8c46\u6dc0\u7c89 \u5927\u849c \u5c0f\u7c73\u8fa3 \u8fa3\u6912\u7c89 \u9171\u6cb9 \u918b \u767d\u7cd6 \u9e21\u7cbe \u76d0 \u82b1\u751f\u788e \u9999\u83dc \u8ba1\u7b97 \u4e0b\u8ff0\u6750\u6599\u4e3a\u4e00\u4eba\u4efd\uff0c\u591a\u4eba\u53ef\u6839\u636e\u4eba\u6570\u6309\u6bd4\u4f8b\u589e\u52a0\u914d\u6599\u7684\u91cf\u3002 \u8c4c\u8c46\u6dc0\u7c89 100g \u5927\u849c 3 \u74e3 \u5c0f\u7c73\u8fa3 3 \u9897 \u8fa3\u6912\u7c89 10g \u9171\u6cb9 10ml \u918b 10ml \u767d\u7cd6 3ml \u9e21\u7cbe 3g \u76d0 3g \u82b1\u751f\u788e 5g \u9999\u83dc 5g \u64cd\u4f5c \u51c6\u5907\u98df\u6750\u3002 \u628a\u8c4c\u8c46\u6dc0\u7c89\u548c\u6c34\u5404 100 \u514b\u6df7\u5408\u6405\u62cc\u3002 \u5f80\u9505\u4e2d\u5012\u5165 600g \u6c34\uff0c\u5927\u706b\u716e\u5f00\u540e\u8f6c\u4e3a\u5c0f\u706b\u3002 \u5012\u5165\u6dc0\u7c89\u6c34\uff0c\u8fb9\u5012\u8fb9\u4e0d\u65ad\u7684\u6405\u62cc\uff0c\u6405\u62cc\u5230\u6d53\u7a20\u4e14\u8272\u6cfd\u5747\u5300\u3002 \u627e\u4e00\u4e2a\u5bb9\u5668\uff0c\u5728\u5bb9\u5668\u4e2d\u5237\u4e00\u5c42\u8584\u8584\u7684\u98df\u7528\u6cb9\u3002 \u5c06\u716e\u597d\u7684\u6dc0\u7c89\u5012\u5165\u5bb9\u5668\u4e2d\u51b7\u85cf 2-4 \u5c0f\u65f6\u3002 \u51b7\u85cf\u540e\u53d6\u51fa\uff0c\u8131\u6a21\uff0c\u5207\u6761\u3002 \u5927\u849c\u548c\u5c0f\u7c73\u8fa3\u5241\u6210\u6cab\uff0c\u653e\u4e0a 10g \u8fa3\u6912\u7c89\uff0c5g \u82b1\u751f\u788e\uff0c\u70ed\u6cb9\u6405\u62cc\u5747\u5300\u3002 \u518d\u52a0\u5165 10ml \u9171\u6cb9\uff0c10ml \u918b\uff0c5g \u767d\u7cd6\uff0c3g \u9e21\u7cbe\uff0c3g \u76d0\u6405\u62cc\u5747\u5300\u3002 \u5c06\u8c03\u5473\u6599\u5012\u5728\u51c9\u7c89\u4e0a\uff0c\u7136\u540e\u6492\u4e0a\u9999\u83dc\u5373\u53ef\u3002 \u9644\u52a0\u5185\u5bb9 \u53c2\u8003: \u5236\u4f5c\u51c9\u7c89\u7684\u8be6\u7ec6\u6b65\u9aa4 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u51c9\u7c89"},{"location":"dishes/staple/%E5%87%89%E7%B2%89/%E5%87%89%E7%B2%89/#_1","text":"\u4f24\u5fc3\u51c9\u7c89\u5403\u4e86\u4e0d\u4f1a\u8ba9\u4f60\u4f24\u5fc3\u7684\u54e6\uff01","title":"\u51c9\u7c89\u7684\u505a\u6cd5"},{"location":"dishes/staple/%E5%87%89%E7%B2%89/%E5%87%89%E7%B2%89/#_2","text":"\u8c4c\u8c46\u6dc0\u7c89 \u5927\u849c \u5c0f\u7c73\u8fa3 \u8fa3\u6912\u7c89 \u9171\u6cb9 \u918b \u767d\u7cd6 \u9e21\u7cbe \u76d0 \u82b1\u751f\u788e \u9999\u83dc","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/staple/%E5%87%89%E7%B2%89/%E5%87%89%E7%B2%89/#_3","text":"\u4e0b\u8ff0\u6750\u6599\u4e3a\u4e00\u4eba\u4efd\uff0c\u591a\u4eba\u53ef\u6839\u636e\u4eba\u6570\u6309\u6bd4\u4f8b\u589e\u52a0\u914d\u6599\u7684\u91cf\u3002 \u8c4c\u8c46\u6dc0\u7c89 100g \u5927\u849c 3 \u74e3 \u5c0f\u7c73\u8fa3 3 \u9897 \u8fa3\u6912\u7c89 10g \u9171\u6cb9 10ml \u918b 10ml \u767d\u7cd6 3ml \u9e21\u7cbe 3g \u76d0 3g \u82b1\u751f\u788e 5g \u9999\u83dc 5g","title":"\u8ba1\u7b97"},{"location":"dishes/staple/%E5%87%89%E7%B2%89/%E5%87%89%E7%B2%89/#_4","text":"\u51c6\u5907\u98df\u6750\u3002 \u628a\u8c4c\u8c46\u6dc0\u7c89\u548c\u6c34\u5404 100 \u514b\u6df7\u5408\u6405\u62cc\u3002 \u5f80\u9505\u4e2d\u5012\u5165 600g \u6c34\uff0c\u5927\u706b\u716e\u5f00\u540e\u8f6c\u4e3a\u5c0f\u706b\u3002 \u5012\u5165\u6dc0\u7c89\u6c34\uff0c\u8fb9\u5012\u8fb9\u4e0d\u65ad\u7684\u6405\u62cc\uff0c\u6405\u62cc\u5230\u6d53\u7a20\u4e14\u8272\u6cfd\u5747\u5300\u3002 \u627e\u4e00\u4e2a\u5bb9\u5668\uff0c\u5728\u5bb9\u5668\u4e2d\u5237\u4e00\u5c42\u8584\u8584\u7684\u98df\u7528\u6cb9\u3002 \u5c06\u716e\u597d\u7684\u6dc0\u7c89\u5012\u5165\u5bb9\u5668\u4e2d\u51b7\u85cf 2-4 \u5c0f\u65f6\u3002 \u51b7\u85cf\u540e\u53d6\u51fa\uff0c\u8131\u6a21\uff0c\u5207\u6761\u3002 \u5927\u849c\u548c\u5c0f\u7c73\u8fa3\u5241\u6210\u6cab\uff0c\u653e\u4e0a 10g \u8fa3\u6912\u7c89\uff0c5g \u82b1\u751f\u788e\uff0c\u70ed\u6cb9\u6405\u62cc\u5747\u5300\u3002 \u518d\u52a0\u5165 10ml \u9171\u6cb9\uff0c10ml \u918b\uff0c5g \u767d\u7cd6\uff0c3g \u9e21\u7cbe\uff0c3g \u76d0\u6405\u62cc\u5747\u5300\u3002 \u5c06\u8c03\u5473\u6599\u5012\u5728\u51c9\u7c89\u4e0a\uff0c\u7136\u540e\u6492\u4e0a\u9999\u83dc\u5373\u53ef\u3002","title":"\u64cd\u4f5c"},{"location":"dishes/staple/%E5%87%89%E7%B2%89/%E5%87%89%E7%B2%89/#_5","text":"\u53c2\u8003: \u5236\u4f5c\u51c9\u7c89\u7684\u8be6\u7ec6\u6b65\u9aa4 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/staple/%E5%BE%AE%E6%B3%A2%E7%82%89%E8%85%8A%E8%82%A0%E7%85%B2%E4%BB%94%E9%A5%AD/%E5%BE%AE%E6%B3%A2%E7%82%89%E8%85%8A%E8%82%A0%E7%85%B2%E4%BB%94%E9%A5%AD/","text":"\u5fae\u6ce2\u7089\u814a\u80a0\u7172\u4ed4\u996d\u7684\u505a\u6cd5 \u7a0b\u5e8f\u5458\u4ee5\u5355\u8eab\u6c49\u5c45\u591a \ud83d\udc36\uff0c\u505a\u518d\u591a\u7684\u83dc\u4e5f\u4f1a\u6709\u4e00\u4e2a\u4eba\u5403\u4e0d\u5b8c\u7684\u70e6\u607c\uff0c\u56e0\u6b64\u4e00\u4efd\u7b80\u5355\u7684\u814a\u80a0\u7172\u4ed4\u996d\u5219\u521a\u521a\u597d\u3002 \u4f7f\u7528\u5fae\u6ce2\u7089\u70f9\u5236\u4ec5\u9700 15 \u5206\u949f \uff0c\u65e2\u8425\u517b\u53c8\u7f8e\u5473\uff0c\u8fd9\u662f\u4e00\u9053\u7b80\u5355\u4e14\u7ec6\u817b\u7684\u4e3b\u98df\uff0c\u7ed9 TA \u9732\u4e0a\u4e00\u624b\u5427\u3002 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u5de5\u5177 \u5fae\u6ce2\u7089 2 \u4e2a\u5927\u7897\uff08\u63a8\u8350\u5fae\u6ce2\u7089\u4e13\u7528\u7897\uff09 1 \u4e2a\u5c0f\u7897 \u539f\u6599 \u7c73 200 ml \u814a\u80a0 1 \u6839 \u9e21\u86cb 1 \u4e2a \u7ea2\u841d\u535c 1 \u4e2a \u76d0 \u6cb9 15 ml \u751f\u62bd 10 ml \u9999\u8471 1 \u9897 \u8ba1\u7b97 1 \u4eba\u4efd\u3002 \u64cd\u4f5c \u5c06\u7c73\u6dd8\u6d17\u5e72\u51c0\u540e\u5012\u5165 \u996d\u7897 \u5185\uff0c\u52a0\u5165 400ml \u7684\u6c34\uff0c \u76d6\u4e0a\u76d6 \u653e\u5165\u5fae\u6ce2\u7089\uff0c\u9ad8\u706b\uff0c 6 \u5206\u949f\uff0c\u716e\u996d\u9014\u4e2d\u51c6\u5907\u539f\u6599 \u5207\u597d\u814a\u80a0 \u6d17\u597d\u9752\u83dc \u5207\u597d\u7ea2\u841d\u535c\u7247 \u5207\u597d\u8471\u82b1 \u9752\u83dc\u7897 \u4e2d\u653e\u5165\u9752\u83dc\u3001\u7ea2\u841d\u535c\u7247\uff0c\u5012\u5165 10 ml \u6cb9\uff0c\u653e\u5165 5 g \u76d0 \u5c0f\u7897 \u4e2d\u5012\u5165 10 ml \u751f\u62bd\u30015 ml \u6cb9 6 \u5206\u949f\u540e\uff0c\u7528\u6bdb\u5dfe\u6216\u9694\u70ed\u624b\u5957\u53d6\u51fa\u7897\uff0c\u53ef\u4ee5\u770b\u89c1\u7c73\u996d\u5df2\u7ecf\u516b\u5206\u719f \u5728\u7c73\u996d\u4e0a\u6446\u5165\u5207\u7247\u7684\u814a\u80a0\uff0c\u7ee7\u7eed\u9ad8\u706b 2 \u5206\u949f \u53d6\u51fa\u814a\u80a0\u996d\uff0c\u653e\u5165 \u9752\u83dc\u7897 \uff0c\u9ad8\u706b 4-5 \u5206\u949f \u5728\u814a\u80a0\u996d\u4e0a\u6446\u597d\u9752\u83dc\uff0c\u78d5\u5165\u9e21\u86cb\uff0c\u770b\u4e2a\u4eba\u559c\u597d\u7ee7\u7eed\u9ad8\u706b 40-60 \u79d2 \u53d6\u51fa\u814a\u80a0\u996d\uff0c\u6b64\u65f6\u5df2\u7ecf\u57fa\u672c\u5b8c\u6210\u3002 \u5c06 \u5c0f\u7897 \u653e\u5165\uff0c\u7ee7\u7eed\u9ad8\u706b 30 \u79d2 \u5728\u814a\u80a0\u996d\u4e0a\u6dcb\u4e0a\u53ee\u70ed\u7684\u751f\u62bd\uff0c\u6492\u4e0a\u8471\u82b1\u5373\u53ef \u591a\u4f59\u7684\u9752\u83dc\u53ef\u4ee5\u6cbe\u7740\u9171\u6cb9\u5403 \u9644\u52a0\u5185\u5bb9 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request\u3002","title":"\u5fae\u6ce2\u7089\u814a\u80a0\u7172\u4ed4\u996d"},{"location":"dishes/staple/%E5%BE%AE%E6%B3%A2%E7%82%89%E8%85%8A%E8%82%A0%E7%85%B2%E4%BB%94%E9%A5%AD/%E5%BE%AE%E6%B3%A2%E7%82%89%E8%85%8A%E8%82%A0%E7%85%B2%E4%BB%94%E9%A5%AD/#_1","text":"\u7a0b\u5e8f\u5458\u4ee5\u5355\u8eab\u6c49\u5c45\u591a \ud83d\udc36\uff0c\u505a\u518d\u591a\u7684\u83dc\u4e5f\u4f1a\u6709\u4e00\u4e2a\u4eba\u5403\u4e0d\u5b8c\u7684\u70e6\u607c\uff0c\u56e0\u6b64\u4e00\u4efd\u7b80\u5355\u7684\u814a\u80a0\u7172\u4ed4\u996d\u5219\u521a\u521a\u597d\u3002 \u4f7f\u7528\u5fae\u6ce2\u7089\u70f9\u5236\u4ec5\u9700 15 \u5206\u949f \uff0c\u65e2\u8425\u517b\u53c8\u7f8e\u5473\uff0c\u8fd9\u662f\u4e00\u9053\u7b80\u5355\u4e14\u7ec6\u817b\u7684\u4e3b\u98df\uff0c\u7ed9 TA \u9732\u4e0a\u4e00\u624b\u5427\u3002","title":"\u5fae\u6ce2\u7089\u814a\u80a0\u7172\u4ed4\u996d\u7684\u505a\u6cd5"},{"location":"dishes/staple/%E5%BE%AE%E6%B3%A2%E7%82%89%E8%85%8A%E8%82%A0%E7%85%B2%E4%BB%94%E9%A5%AD/%E5%BE%AE%E6%B3%A2%E7%82%89%E8%85%8A%E8%82%A0%E7%85%B2%E4%BB%94%E9%A5%AD/#_2","text":"\u5de5\u5177 \u5fae\u6ce2\u7089 2 \u4e2a\u5927\u7897\uff08\u63a8\u8350\u5fae\u6ce2\u7089\u4e13\u7528\u7897\uff09 1 \u4e2a\u5c0f\u7897 \u539f\u6599 \u7c73 200 ml \u814a\u80a0 1 \u6839 \u9e21\u86cb 1 \u4e2a \u7ea2\u841d\u535c 1 \u4e2a \u76d0 \u6cb9 15 ml \u751f\u62bd 10 ml \u9999\u8471 1 \u9897","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/staple/%E5%BE%AE%E6%B3%A2%E7%82%89%E8%85%8A%E8%82%A0%E7%85%B2%E4%BB%94%E9%A5%AD/%E5%BE%AE%E6%B3%A2%E7%82%89%E8%85%8A%E8%82%A0%E7%85%B2%E4%BB%94%E9%A5%AD/#_3","text":"1 \u4eba\u4efd\u3002","title":"\u8ba1\u7b97"},{"location":"dishes/staple/%E5%BE%AE%E6%B3%A2%E7%82%89%E8%85%8A%E8%82%A0%E7%85%B2%E4%BB%94%E9%A5%AD/%E5%BE%AE%E6%B3%A2%E7%82%89%E8%85%8A%E8%82%A0%E7%85%B2%E4%BB%94%E9%A5%AD/#_4","text":"\u5c06\u7c73\u6dd8\u6d17\u5e72\u51c0\u540e\u5012\u5165 \u996d\u7897 \u5185\uff0c\u52a0\u5165 400ml \u7684\u6c34\uff0c \u76d6\u4e0a\u76d6 \u653e\u5165\u5fae\u6ce2\u7089\uff0c\u9ad8\u706b\uff0c 6 \u5206\u949f\uff0c\u716e\u996d\u9014\u4e2d\u51c6\u5907\u539f\u6599 \u5207\u597d\u814a\u80a0 \u6d17\u597d\u9752\u83dc \u5207\u597d\u7ea2\u841d\u535c\u7247 \u5207\u597d\u8471\u82b1 \u9752\u83dc\u7897 \u4e2d\u653e\u5165\u9752\u83dc\u3001\u7ea2\u841d\u535c\u7247\uff0c\u5012\u5165 10 ml \u6cb9\uff0c\u653e\u5165 5 g \u76d0 \u5c0f\u7897 \u4e2d\u5012\u5165 10 ml \u751f\u62bd\u30015 ml \u6cb9 6 \u5206\u949f\u540e\uff0c\u7528\u6bdb\u5dfe\u6216\u9694\u70ed\u624b\u5957\u53d6\u51fa\u7897\uff0c\u53ef\u4ee5\u770b\u89c1\u7c73\u996d\u5df2\u7ecf\u516b\u5206\u719f \u5728\u7c73\u996d\u4e0a\u6446\u5165\u5207\u7247\u7684\u814a\u80a0\uff0c\u7ee7\u7eed\u9ad8\u706b 2 \u5206\u949f \u53d6\u51fa\u814a\u80a0\u996d\uff0c\u653e\u5165 \u9752\u83dc\u7897 \uff0c\u9ad8\u706b 4-5 \u5206\u949f \u5728\u814a\u80a0\u996d\u4e0a\u6446\u597d\u9752\u83dc\uff0c\u78d5\u5165\u9e21\u86cb\uff0c\u770b\u4e2a\u4eba\u559c\u597d\u7ee7\u7eed\u9ad8\u706b 40-60 \u79d2 \u53d6\u51fa\u814a\u80a0\u996d\uff0c\u6b64\u65f6\u5df2\u7ecf\u57fa\u672c\u5b8c\u6210\u3002 \u5c06 \u5c0f\u7897 \u653e\u5165\uff0c\u7ee7\u7eed\u9ad8\u706b 30 \u79d2 \u5728\u814a\u80a0\u996d\u4e0a\u6dcb\u4e0a\u53ee\u70ed\u7684\u751f\u62bd\uff0c\u6492\u4e0a\u8471\u82b1\u5373\u53ef \u591a\u4f59\u7684\u9752\u83dc\u53ef\u4ee5\u6cbe\u7740\u9171\u6cb9\u5403","title":"\u64cd\u4f5c"},{"location":"dishes/staple/%E5%BE%AE%E6%B3%A2%E7%82%89%E8%85%8A%E8%82%A0%E7%85%B2%E4%BB%94%E9%A5%AD/%E5%BE%AE%E6%B3%A2%E7%82%89%E8%85%8A%E8%82%A0%E7%85%B2%E4%BB%94%E9%A5%AD/#_5","text":"\u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request\u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/staple/%E6%97%A5%E5%BC%8F%E5%92%96%E5%96%B1%E9%A5%AD/%E6%97%A5%E5%BC%8F%E5%92%96%E5%96%B1%E9%A5%AD/","text":"\u65e5\u5f0f\u5496\u55b1\u996d\u7684\u505a\u6cd5 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u4e3b\u98df\u6750 \u5496\u55b1\u5757\uff08\u63a8\u8350\u54c1\u724c\u597d\u4f8d\uff09 \u571f\u8c46 \u80e1\u841d\u535c \u6d0b\u8471 \u8089\uff08\u732a\u8089\u3001\u9e21\u8089\u3001\u725b\u8089\u5747\u53ef\uff09 \u849c\u5934 \u526f\u98df\u6750 \u989d\u5916\u7528\u4f5c\u70b9\u7f00\u7684\u98df\u6750\uff0c\u53ef\u9009 \u82b1\u6930\u83dc\uff08\u6e05\u6c34\u716e\u5f00\uff09 \u57f9\u6839\uff08\u5373\u98df\uff09 \u714e\u86cb\u6216 \u592a\u9633\u86cb \u8ba1\u7b97 \u98df\u6750\u7528\u91cf\u4e0e\u5496\u55b1\u6210\u6b63\u6bd4\uff0c\u8ba1\u7b97\u90e8\u5206\u4ee5 \u534a\u76d2\u597d\u4f8d\u5496\u55b1\u5757(115g) \u4e3a\u4f8b\u3002\u534a\u76d2\u7ea6\u516d\u7897\u4efd\uff0c\u505a\u597d\u7684\u5496\u55b1\u5728\u51b0\u7bb1\u51b7\u85cf\u540e\u98ce\u5473\u66f4\u4f73\uff0c\u4e0d\u7528\u62c5\u5fc3\u4e00\u4e2a\u4eba\u5403\u4e0d\u5b8c\u3002 \u6d0b\u8471 2 \u4e2a \u571f\u8c46 2 \u4e2a \u80e1\u841d\u535c 1 \u6839 \u849c\u5934 2~3 \u74e3 \u8089 2 \u65a4 \u64cd\u4f5c 1. \u98df\u6750\u51c6\u5907 \u80e1\u841d\u535c\u53bb\u5934\u5c3e\uff0c\u53bb\u76ae\uff0c\u6eda\u5200\u5207 \u6d0b\u8471\u5265\u53bb\u5916\u5c42\u53bb\u82af\uff0c\u5207\u6210\u6708\u7259\u72b6 \u571f\u8c46\u53bb\u76ae\u3001\u5207\u5927\u5757 \u8089\u5207\u5757\u72b6 \u5265\u849c\u62cd\u5e73\u5207\u788e \u5496\u55b1\u5757\u5207\u788e\uff0c\u589e\u52a0\u63a5\u89e6\u9762\u79ef\u52a0\u901f\u6eb6\u89e3 2. \u70e7\u716e\u8fc7\u7a0b \u70ed\u6cb9\u9505\u653e\u5165\u849c\u548c\u8089\uff0c \u5feb\u901f\u7ffb\u7092 \u81f3\u8089 \u8868\u9762\u53d8\u767d \u52a0\u5165\u80e1\u841d\u535c\uff0c \u5feb\u901f\u7ffb\u7092 \u81f3\u5747\u5300\u53d7\u70ed \u52a0\u5165\u6d0b\u8471\uff0c \u5feb\u901f\u7ffb\u7092 \u81f3\u6d0b\u8471 \u53d8\u900f\u660e\u72b6 \u52a0\u5165\u571f\u8c46\uff0c\u4fdd\u6301\u7ffb\u7092\u81f3\u571f\u8c46 \u53d8\u8f6f \uff08\u53ef\u4ee5\u7528\u7b77\u5b50\u786e\u8ba4\uff09 \u52a0\u6c34\u6ca1\u8fc7\u6240\u6709\u98df\u6750\uff0c\u6cb8\u817e\u540e \u7b49\u5f85 15 \u5206\u949f \u5173\u706b\uff0c\u52a0\u5496\u55b1\u5e76\u6405\u62cc \u7b49\u5f85\u5496\u55b1\u878d\u5316\u540e\u518d\u5f00\u706b\uff0c\u7f13\u6162 \u6405\u62cc 10 \u5206\u949f \uff0c\u9632\u6b62\u7cca\u9505 \u5728\u5916\u89c2 \u5448\u7c98\u7a20\u72b6\u6001 \u5173\u706b\u7ed3\u675f\u5236\u4f5c 3.\u51b7\u85cf\u540e\u52a0\u70ed \u51b7\u85cf\u7684\u5496\u55b1\u6bcf\u6b21\u53d6\u51fa\u9700\u8981\u5403\u7684\u4efd\u91cf\uff0c\u52a0\u70ed\u540e\u76d6\u5728 \u7c73\u996d \u4e0a\u3002 \u5fae\u6ce2\u7089\uff1a\u5355\u4eba\u4efd\u9ad8\u706b 2-3 \u5206\u949f \u9505\uff1a\u9700\u989d\u5916\u52a0 50ml \u6c34\uff0c\u52a0\u70ed\u65f6\u4fdd\u6301\u6405\u62cc \u9644\u52a0\u5185\u5bb9 \u5907\u6ce8\u8bf4\u660e \u6b65\u9aa4 1-6 \u53ef\u4ee5\u5728 2-5 \u7684\u7b49\u5f85\u8fc7\u7a0b\u8fdb\u884c\uff0c\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e5f\u53ef\u4ee5\u7528\u6e05\u6c34\u9505\u716e\u4e9b\u852c\u83dc\uff0c\u6216\u505a\u4e2a\u714e\u86cb\u3002 2-5 \u5230 2-6 \u4e4b\u95f4\uff0c\u9700\u8981\u6ce8\u610f\u89c2\u5bdf\u6cb8\u817e\u7684\u6c34\u4f4d\u7ebf\uff0c\u5982\u53d1\u73b0\u4f4e\u4e8e 2/3 \u7684\u98df\u6750\u5e94\u52a0\u70ed\u6c34\u81f3\u6ca1\u8fc7\u98df\u6750\u3002 \u6d41\u7a0b\u56fe\u89e3 graph TD A[\u5904\u7406\u8089, \u80e1\u841d\u535c, \u6d0b\u8471, \u571f\u8c46] --> B(\u5f00\u6cb9\u9505, \u5148\u540e\u4e0b\u9505\u7092\u719f) B --> C[\u52a0\u6c34\u6ca1\u8fc7\u98df\u6750, \u716e15\u5206\u949f] C --> D[\u5496\u55b1\u5207\u788e, \u5f00\u6c34\u716e\u82b1\u6930\u83dc\u7b49] C --> E[\u52a0\u5165\u5496\u55b1\u6405\u62cc 10 \u5206\u949f] D --> E \u6210\u54c1 \u53c2\u8003\u8d44\u6599 \u4e16\u754c\u7f8e\u98df\u6559\u7a0b\u7684\u5fae\u535a\u89c6\u9891 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u65e5\u5f0f\u5496\u55b1\u996d"},{"location":"dishes/staple/%E6%97%A5%E5%BC%8F%E5%92%96%E5%96%B1%E9%A5%AD/%E6%97%A5%E5%BC%8F%E5%92%96%E5%96%B1%E9%A5%AD/#_1","text":"","title":"\u65e5\u5f0f\u5496\u55b1\u996d\u7684\u505a\u6cd5"},{"location":"dishes/staple/%E6%97%A5%E5%BC%8F%E5%92%96%E5%96%B1%E9%A5%AD/%E6%97%A5%E5%BC%8F%E5%92%96%E5%96%B1%E9%A5%AD/#_2","text":"","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/staple/%E6%97%A5%E5%BC%8F%E5%92%96%E5%96%B1%E9%A5%AD/%E6%97%A5%E5%BC%8F%E5%92%96%E5%96%B1%E9%A5%AD/#_3","text":"\u5496\u55b1\u5757\uff08\u63a8\u8350\u54c1\u724c\u597d\u4f8d\uff09 \u571f\u8c46 \u80e1\u841d\u535c \u6d0b\u8471 \u8089\uff08\u732a\u8089\u3001\u9e21\u8089\u3001\u725b\u8089\u5747\u53ef\uff09 \u849c\u5934","title":"\u4e3b\u98df\u6750"},{"location":"dishes/staple/%E6%97%A5%E5%BC%8F%E5%92%96%E5%96%B1%E9%A5%AD/%E6%97%A5%E5%BC%8F%E5%92%96%E5%96%B1%E9%A5%AD/#_4","text":"\u989d\u5916\u7528\u4f5c\u70b9\u7f00\u7684\u98df\u6750\uff0c\u53ef\u9009 \u82b1\u6930\u83dc\uff08\u6e05\u6c34\u716e\u5f00\uff09 \u57f9\u6839\uff08\u5373\u98df\uff09 \u714e\u86cb\u6216 \u592a\u9633\u86cb","title":"\u526f\u98df\u6750"},{"location":"dishes/staple/%E6%97%A5%E5%BC%8F%E5%92%96%E5%96%B1%E9%A5%AD/%E6%97%A5%E5%BC%8F%E5%92%96%E5%96%B1%E9%A5%AD/#_5","text":"\u98df\u6750\u7528\u91cf\u4e0e\u5496\u55b1\u6210\u6b63\u6bd4\uff0c\u8ba1\u7b97\u90e8\u5206\u4ee5 \u534a\u76d2\u597d\u4f8d\u5496\u55b1\u5757(115g) \u4e3a\u4f8b\u3002\u534a\u76d2\u7ea6\u516d\u7897\u4efd\uff0c\u505a\u597d\u7684\u5496\u55b1\u5728\u51b0\u7bb1\u51b7\u85cf\u540e\u98ce\u5473\u66f4\u4f73\uff0c\u4e0d\u7528\u62c5\u5fc3\u4e00\u4e2a\u4eba\u5403\u4e0d\u5b8c\u3002 \u6d0b\u8471 2 \u4e2a \u571f\u8c46 2 \u4e2a \u80e1\u841d\u535c 1 \u6839 \u849c\u5934 2~3 \u74e3 \u8089 2 \u65a4","title":"\u8ba1\u7b97"},{"location":"dishes/staple/%E6%97%A5%E5%BC%8F%E5%92%96%E5%96%B1%E9%A5%AD/%E6%97%A5%E5%BC%8F%E5%92%96%E5%96%B1%E9%A5%AD/#_6","text":"","title":"\u64cd\u4f5c"},{"location":"dishes/staple/%E6%97%A5%E5%BC%8F%E5%92%96%E5%96%B1%E9%A5%AD/%E6%97%A5%E5%BC%8F%E5%92%96%E5%96%B1%E9%A5%AD/#1","text":"\u80e1\u841d\u535c\u53bb\u5934\u5c3e\uff0c\u53bb\u76ae\uff0c\u6eda\u5200\u5207 \u6d0b\u8471\u5265\u53bb\u5916\u5c42\u53bb\u82af\uff0c\u5207\u6210\u6708\u7259\u72b6 \u571f\u8c46\u53bb\u76ae\u3001\u5207\u5927\u5757 \u8089\u5207\u5757\u72b6 \u5265\u849c\u62cd\u5e73\u5207\u788e \u5496\u55b1\u5757\u5207\u788e\uff0c\u589e\u52a0\u63a5\u89e6\u9762\u79ef\u52a0\u901f\u6eb6\u89e3","title":"1. \u98df\u6750\u51c6\u5907"},{"location":"dishes/staple/%E6%97%A5%E5%BC%8F%E5%92%96%E5%96%B1%E9%A5%AD/%E6%97%A5%E5%BC%8F%E5%92%96%E5%96%B1%E9%A5%AD/#2","text":"\u70ed\u6cb9\u9505\u653e\u5165\u849c\u548c\u8089\uff0c \u5feb\u901f\u7ffb\u7092 \u81f3\u8089 \u8868\u9762\u53d8\u767d \u52a0\u5165\u80e1\u841d\u535c\uff0c \u5feb\u901f\u7ffb\u7092 \u81f3\u5747\u5300\u53d7\u70ed \u52a0\u5165\u6d0b\u8471\uff0c \u5feb\u901f\u7ffb\u7092 \u81f3\u6d0b\u8471 \u53d8\u900f\u660e\u72b6 \u52a0\u5165\u571f\u8c46\uff0c\u4fdd\u6301\u7ffb\u7092\u81f3\u571f\u8c46 \u53d8\u8f6f \uff08\u53ef\u4ee5\u7528\u7b77\u5b50\u786e\u8ba4\uff09 \u52a0\u6c34\u6ca1\u8fc7\u6240\u6709\u98df\u6750\uff0c\u6cb8\u817e\u540e \u7b49\u5f85 15 \u5206\u949f \u5173\u706b\uff0c\u52a0\u5496\u55b1\u5e76\u6405\u62cc \u7b49\u5f85\u5496\u55b1\u878d\u5316\u540e\u518d\u5f00\u706b\uff0c\u7f13\u6162 \u6405\u62cc 10 \u5206\u949f \uff0c\u9632\u6b62\u7cca\u9505 \u5728\u5916\u89c2 \u5448\u7c98\u7a20\u72b6\u6001 \u5173\u706b\u7ed3\u675f\u5236\u4f5c","title":"2. \u70e7\u716e\u8fc7\u7a0b"},{"location":"dishes/staple/%E6%97%A5%E5%BC%8F%E5%92%96%E5%96%B1%E9%A5%AD/%E6%97%A5%E5%BC%8F%E5%92%96%E5%96%B1%E9%A5%AD/#3","text":"\u51b7\u85cf\u7684\u5496\u55b1\u6bcf\u6b21\u53d6\u51fa\u9700\u8981\u5403\u7684\u4efd\u91cf\uff0c\u52a0\u70ed\u540e\u76d6\u5728 \u7c73\u996d \u4e0a\u3002 \u5fae\u6ce2\u7089\uff1a\u5355\u4eba\u4efd\u9ad8\u706b 2-3 \u5206\u949f \u9505\uff1a\u9700\u989d\u5916\u52a0 50ml \u6c34\uff0c\u52a0\u70ed\u65f6\u4fdd\u6301\u6405\u62cc","title":"3.\u51b7\u85cf\u540e\u52a0\u70ed"},{"location":"dishes/staple/%E6%97%A5%E5%BC%8F%E5%92%96%E5%96%B1%E9%A5%AD/%E6%97%A5%E5%BC%8F%E5%92%96%E5%96%B1%E9%A5%AD/#_7","text":"","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/staple/%E6%97%A5%E5%BC%8F%E5%92%96%E5%96%B1%E9%A5%AD/%E6%97%A5%E5%BC%8F%E5%92%96%E5%96%B1%E9%A5%AD/#_8","text":"\u6b65\u9aa4 1-6 \u53ef\u4ee5\u5728 2-5 \u7684\u7b49\u5f85\u8fc7\u7a0b\u8fdb\u884c\uff0c\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e5f\u53ef\u4ee5\u7528\u6e05\u6c34\u9505\u716e\u4e9b\u852c\u83dc\uff0c\u6216\u505a\u4e2a\u714e\u86cb\u3002 2-5 \u5230 2-6 \u4e4b\u95f4\uff0c\u9700\u8981\u6ce8\u610f\u89c2\u5bdf\u6cb8\u817e\u7684\u6c34\u4f4d\u7ebf\uff0c\u5982\u53d1\u73b0\u4f4e\u4e8e 2/3 \u7684\u98df\u6750\u5e94\u52a0\u70ed\u6c34\u81f3\u6ca1\u8fc7\u98df\u6750\u3002","title":"\u5907\u6ce8\u8bf4\u660e"},{"location":"dishes/staple/%E6%97%A5%E5%BC%8F%E5%92%96%E5%96%B1%E9%A5%AD/%E6%97%A5%E5%BC%8F%E5%92%96%E5%96%B1%E9%A5%AD/#_9","text":"graph TD A[\u5904\u7406\u8089, \u80e1\u841d\u535c, \u6d0b\u8471, \u571f\u8c46] --> B(\u5f00\u6cb9\u9505, \u5148\u540e\u4e0b\u9505\u7092\u719f) B --> C[\u52a0\u6c34\u6ca1\u8fc7\u98df\u6750, \u716e15\u5206\u949f] C --> D[\u5496\u55b1\u5207\u788e, \u5f00\u6c34\u716e\u82b1\u6930\u83dc\u7b49] C --> E[\u52a0\u5165\u5496\u55b1\u6405\u62cc 10 \u5206\u949f] D --> E","title":"\u6d41\u7a0b\u56fe\u89e3"},{"location":"dishes/staple/%E6%97%A5%E5%BC%8F%E5%92%96%E5%96%B1%E9%A5%AD/%E6%97%A5%E5%BC%8F%E5%92%96%E5%96%B1%E9%A5%AD/#_10","text":"","title":"\u6210\u54c1"},{"location":"dishes/staple/%E6%97%A5%E5%BC%8F%E5%92%96%E5%96%B1%E9%A5%AD/%E6%97%A5%E5%BC%8F%E5%92%96%E5%96%B1%E9%A5%AD/#_11","text":"\u4e16\u754c\u7f8e\u98df\u6559\u7a0b\u7684\u5fae\u535a\u89c6\u9891 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u53c2\u8003\u8d44\u6599"},{"location":"dishes/staple/%E7%82%92%E6%84%8F%E5%A4%A7%E5%88%A9%E9%9D%A2/%E7%82%92%E6%84%8F%E5%A4%A7%E5%88%A9%E9%9D%A2/","text":"\u7092\u610f\u5927\u5229\u9762\u7684\u505a\u6cd5 \u8fd9\u662f\u4e00\u9053\u8f6f\u7cef\u723d\u53e3\u7684\u610f\u5927\u5229\u9762\u7684\u505a\u6cd5\uff0c\u975e\u5e38\u7b80\u5355\uff0c\u7528\u65f6\u5927\u6982 30 \u5206\u949f\u3002 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u610f\u5927\u5229\u9762 \u80a5\u725b\u7247 \u756a\u8304\u9171 / \u9ed1\u80e1\u6912\u9171\uff08\u9009\u5176\u4e00\u5373\u53ef\uff09 \u83dc\u7c7d\u6cb9\uff08\u5176\u4ed6\u690d\u7269\u6cb9\u4e5f\u53ef\uff09 \u8ba1\u7b97 \u610f\u5927\u5229\u9762 50 \u514b / \u4eba \u80a5\u725b 5 \u7247 / \u4eba \u98df\u7528\u6cb9 5ml / 50 \u514b\u610f\u9762 \u64cd\u4f5c \u52a0\u5165 250 \u514b\u6c34 / \u4eba \u5f85\u6c34\u70e7\u5f00\uff0c\u4e0b\u5165\u9762\u6761\uff0c\u4e2d\u706b\u716e 15 - 20 \u5206\u949f\uff08\u8fd9\u4e2a\u9762\u901a\u5e38\u6bd4\u8f83\u786c\uff0c\u635e\u8d77\u6765\u4e4b\u524d\u6700\u597d\u5c1d\u4e00\u4e0b\uff0c\u4e2d\u5fc3\u5982\u679c\u6709\u4e00\u70b9\u786c\uff0c\u9700\u8981\u7ee7\u7eed\u716e\uff09 \u635e\u51fa\u9762\u6761\uff0c\u76db\u5165\u76d8\u4e2d\u5907\u7528 \u70ed\u9505\u5012\u5165\u98df\u7528\u6cb9\uff0c\u5f85\u6cb9\u6e29\u4e2d\u70ed\uff0c\u4e0b\u5165\u9762\u6761\u7ffb\u7092\u4e00\u5206\u949f\uff08\u5982\u679c\u592a\u5e72\uff0c\u52a0\u5165\u5c11\u91cf\u6c34\uff09 \u653e\u5165 10 \u514b\u756a\u8304\u9171\u3001\u80a5\u725b\u3001\u52a0\u5165\u5c11\u8bb8\u98df\u76d0\uff0c\u7ee7\u7eed\u7ffb\u7092\u4e00\u5206\u949f \u8d77\u9505 \u9644\u52a0\u5185\u5bb9 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u7092\u610f\u5927\u5229\u9762"},{"location":"dishes/staple/%E7%82%92%E6%84%8F%E5%A4%A7%E5%88%A9%E9%9D%A2/%E7%82%92%E6%84%8F%E5%A4%A7%E5%88%A9%E9%9D%A2/#_1","text":"\u8fd9\u662f\u4e00\u9053\u8f6f\u7cef\u723d\u53e3\u7684\u610f\u5927\u5229\u9762\u7684\u505a\u6cd5\uff0c\u975e\u5e38\u7b80\u5355\uff0c\u7528\u65f6\u5927\u6982 30 \u5206\u949f\u3002","title":"\u7092\u610f\u5927\u5229\u9762\u7684\u505a\u6cd5"},{"location":"dishes/staple/%E7%82%92%E6%84%8F%E5%A4%A7%E5%88%A9%E9%9D%A2/%E7%82%92%E6%84%8F%E5%A4%A7%E5%88%A9%E9%9D%A2/#_2","text":"\u610f\u5927\u5229\u9762 \u80a5\u725b\u7247 \u756a\u8304\u9171 / \u9ed1\u80e1\u6912\u9171\uff08\u9009\u5176\u4e00\u5373\u53ef\uff09 \u83dc\u7c7d\u6cb9\uff08\u5176\u4ed6\u690d\u7269\u6cb9\u4e5f\u53ef\uff09","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/staple/%E7%82%92%E6%84%8F%E5%A4%A7%E5%88%A9%E9%9D%A2/%E7%82%92%E6%84%8F%E5%A4%A7%E5%88%A9%E9%9D%A2/#_3","text":"\u610f\u5927\u5229\u9762 50 \u514b / \u4eba \u80a5\u725b 5 \u7247 / \u4eba \u98df\u7528\u6cb9 5ml / 50 \u514b\u610f\u9762","title":"\u8ba1\u7b97"},{"location":"dishes/staple/%E7%82%92%E6%84%8F%E5%A4%A7%E5%88%A9%E9%9D%A2/%E7%82%92%E6%84%8F%E5%A4%A7%E5%88%A9%E9%9D%A2/#_4","text":"\u52a0\u5165 250 \u514b\u6c34 / \u4eba \u5f85\u6c34\u70e7\u5f00\uff0c\u4e0b\u5165\u9762\u6761\uff0c\u4e2d\u706b\u716e 15 - 20 \u5206\u949f\uff08\u8fd9\u4e2a\u9762\u901a\u5e38\u6bd4\u8f83\u786c\uff0c\u635e\u8d77\u6765\u4e4b\u524d\u6700\u597d\u5c1d\u4e00\u4e0b\uff0c\u4e2d\u5fc3\u5982\u679c\u6709\u4e00\u70b9\u786c\uff0c\u9700\u8981\u7ee7\u7eed\u716e\uff09 \u635e\u51fa\u9762\u6761\uff0c\u76db\u5165\u76d8\u4e2d\u5907\u7528 \u70ed\u9505\u5012\u5165\u98df\u7528\u6cb9\uff0c\u5f85\u6cb9\u6e29\u4e2d\u70ed\uff0c\u4e0b\u5165\u9762\u6761\u7ffb\u7092\u4e00\u5206\u949f\uff08\u5982\u679c\u592a\u5e72\uff0c\u52a0\u5165\u5c11\u91cf\u6c34\uff09 \u653e\u5165 10 \u514b\u756a\u8304\u9171\u3001\u80a5\u725b\u3001\u52a0\u5165\u5c11\u8bb8\u98df\u76d0\uff0c\u7ee7\u7eed\u7ffb\u7092\u4e00\u5206\u949f \u8d77\u9505","title":"\u64cd\u4f5c"},{"location":"dishes/staple/%E7%82%92%E6%84%8F%E5%A4%A7%E5%88%A9%E9%9D%A2/%E7%82%92%E6%84%8F%E5%A4%A7%E5%88%A9%E9%9D%A2/#_5","text":"\u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/staple/%E7%83%99%E9%A5%BC/%E7%83%99%E9%A5%BC/","text":"\u70d9\u997c\u7684\u505a\u6cd5 \u5fc5\u5907\u539f\u6599\u4e0e\u5de5\u5177 \u6cb9 \u9762\u7c89 \u7535\u997c\u94db \u8ba1\u7b97 \u6ce8\u610f\uff1a\u8be5\u4e3b\u98df\u4e0d\u63d0\u4f9b\u66f4\u5c11\u6216\u66f4\u591a\u7684\u7248\u672c\uff0c\u6211\u9009\u53d6\u4e86\u6700\u9002\u5408\u65b0\u624b\u7684\u91cf\uff0c\u8d85\u7b80\u5355\uff01\uff01\uff01 \u9762\u7c89 = 400g \u70ed\u6c34 = 130ml\uff0880 \u5ea6\uff09 \u51b7\u6c34 = 130ml \u64cd\u4f5c \u5c06 400g \u9762\u7c89\u5012\u5165\u76c6\u4e2d\uff0c\u4e00\u534a\u7528\u51c9\u6c34\u548c\u9762\uff0c\u4e00\u534a\u7528\u70ed\u6c34\u548c\u9762\uff0c\u6405\u62cc\u6210\u9762\u7d6e\uff0c\u7528\u624b\u63c9\u6210\u56e2\u3002\u7528\u4fdd\u9c9c\u819c\u5c01\u8d77\u6765\uff0c\u9192\u9762 40 \u5206\u949f \u79bb\u9192\u9762\u5b8c\u6210\u65f6\u95f4\u8fd8\u6709 10 \u5206\u949f\u65f6\uff0c\u8bf7\u67e5\u770b \u5c0f\u6280\u5de7 \u4e2d\u7684\u6cb9\u9165\u505a\u6cd5\uff08\u70ed\u6cb9\u9165\u6548\u679c\u66f4\u597d\uff09 \u9192\u597d\u7684\u9762\u4e0d\u7528\u63c9\uff0c\u7a0d\u5fae\u6441\u4e00\u4e0b\uff0c\u7528\u4e00\u6a2a\u5200\u4e00\u7ad6\u5200\u5c06\u5176\u5206\u6210\u56db\u4efd\u3002 \u6413\u5706\uff0c\u64c0\u5f00\uff0c\u64c0\u6210\u4e0e\u7535\u997c\u94db\u5927\u5c0f\u5dee\u4e0d\u591a\u7684\u997c\uff0c\u53d6 1/4 \u7684\u6cb9\u9165\uff0c\u5c06\u997c\u8868\u9762\u6d82\u62b9\u5747\u5300 \u6cbf\u997c\u7684\u534a\u5f84\u5207\u5f00\uff0c\u4ece\u5916\u5708\u5c06\u5176\u5377\u6210\u5706\u9525\u5f62\uff0c\u7136\u540e\u5c06\u5706\u9525\u5c3e\u90e8\u634f\u597d\uff0c\u9632\u6b62\u6cb9\u9165\u5916\u6f0f\u3002 \u6309\u538b\u9762\u997c\u5706\u9525\u5c16\u7684\u5730\u65b9\uff0c\u5c06\u5176\u538b\u6241\uff0c\u7136\u540e\u518d\u6b21\u64c0\u6210\u4e0e\u7535\u997c\u94db\u5927\u5c0f\u5dee\u4e0d\u591a\u7684\u9762\u997c\uff08\u539a\u5ea6\u7ea6\u4e3a 3mm\uff09 \u5c06\u7535\u997c\u94db\u9884\u70ed\uff0c\u6d82\u4e0a\u51c9\u6cb9\uff08\u70ed\u9505\u51c9\u6cb9\uff09\uff0c\u5c06\u64c0\u597d\u7684\u997c\u653e\u5165\u7535\u997c\u94db\u4e2d\uff0c\u5c06\u997c\u7684\u4e0a\u65b9\u4e5f\u5237\u70b9\u6cb9\uff0c\u6d82\u62b9\u5747\u5300\uff08\u9501\u4f4f\u6c34\u5206\uff09\uff0c\u76d6\u4e0a\u76d6\u5b50 \u5927\u706b\u70d9\u4e00\u5206\u949f\uff0c\u6253\u5f00\u76d6\u5b50\uff0c\u5c06\u997c\u7ffb\u4e2a\u9762\u518d\u70d9\u4e00\u5206\u949f \u91cd\u590d\u4ee5\u4e0a\u52a8\u4f5c\uff0c\u5b8c\u6210\u997c\u7684\u70d9\u5236 \u8fd9\u662f\u6211\u7b2c\u4e00\u6b21\u505a\u9762\u98df\u7c7b\uff0c\u7f3a\u70b9\u5f88\u591a\uff0c\u4f46\u81ea\u5df1\u5403\u8fd8\u662f\u76f8\u5f53\u4e0d\u9519\u7684 \u9644\u52a0\u5185\u5bb9 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u70d9\u997c"},{"location":"dishes/staple/%E7%83%99%E9%A5%BC/%E7%83%99%E9%A5%BC/#_1","text":"","title":"\u70d9\u997c\u7684\u505a\u6cd5"},{"location":"dishes/staple/%E7%83%99%E9%A5%BC/%E7%83%99%E9%A5%BC/#_2","text":"\u6cb9 \u9762\u7c89 \u7535\u997c\u94db","title":"\u5fc5\u5907\u539f\u6599\u4e0e\u5de5\u5177"},{"location":"dishes/staple/%E7%83%99%E9%A5%BC/%E7%83%99%E9%A5%BC/#_3","text":"\u6ce8\u610f\uff1a\u8be5\u4e3b\u98df\u4e0d\u63d0\u4f9b\u66f4\u5c11\u6216\u66f4\u591a\u7684\u7248\u672c\uff0c\u6211\u9009\u53d6\u4e86\u6700\u9002\u5408\u65b0\u624b\u7684\u91cf\uff0c\u8d85\u7b80\u5355\uff01\uff01\uff01 \u9762\u7c89 = 400g \u70ed\u6c34 = 130ml\uff0880 \u5ea6\uff09 \u51b7\u6c34 = 130ml","title":"\u8ba1\u7b97"},{"location":"dishes/staple/%E7%83%99%E9%A5%BC/%E7%83%99%E9%A5%BC/#_4","text":"\u5c06 400g \u9762\u7c89\u5012\u5165\u76c6\u4e2d\uff0c\u4e00\u534a\u7528\u51c9\u6c34\u548c\u9762\uff0c\u4e00\u534a\u7528\u70ed\u6c34\u548c\u9762\uff0c\u6405\u62cc\u6210\u9762\u7d6e\uff0c\u7528\u624b\u63c9\u6210\u56e2\u3002\u7528\u4fdd\u9c9c\u819c\u5c01\u8d77\u6765\uff0c\u9192\u9762 40 \u5206\u949f \u79bb\u9192\u9762\u5b8c\u6210\u65f6\u95f4\u8fd8\u6709 10 \u5206\u949f\u65f6\uff0c\u8bf7\u67e5\u770b \u5c0f\u6280\u5de7 \u4e2d\u7684\u6cb9\u9165\u505a\u6cd5\uff08\u70ed\u6cb9\u9165\u6548\u679c\u66f4\u597d\uff09 \u9192\u597d\u7684\u9762\u4e0d\u7528\u63c9\uff0c\u7a0d\u5fae\u6441\u4e00\u4e0b\uff0c\u7528\u4e00\u6a2a\u5200\u4e00\u7ad6\u5200\u5c06\u5176\u5206\u6210\u56db\u4efd\u3002 \u6413\u5706\uff0c\u64c0\u5f00\uff0c\u64c0\u6210\u4e0e\u7535\u997c\u94db\u5927\u5c0f\u5dee\u4e0d\u591a\u7684\u997c\uff0c\u53d6 1/4 \u7684\u6cb9\u9165\uff0c\u5c06\u997c\u8868\u9762\u6d82\u62b9\u5747\u5300 \u6cbf\u997c\u7684\u534a\u5f84\u5207\u5f00\uff0c\u4ece\u5916\u5708\u5c06\u5176\u5377\u6210\u5706\u9525\u5f62\uff0c\u7136\u540e\u5c06\u5706\u9525\u5c3e\u90e8\u634f\u597d\uff0c\u9632\u6b62\u6cb9\u9165\u5916\u6f0f\u3002 \u6309\u538b\u9762\u997c\u5706\u9525\u5c16\u7684\u5730\u65b9\uff0c\u5c06\u5176\u538b\u6241\uff0c\u7136\u540e\u518d\u6b21\u64c0\u6210\u4e0e\u7535\u997c\u94db\u5927\u5c0f\u5dee\u4e0d\u591a\u7684\u9762\u997c\uff08\u539a\u5ea6\u7ea6\u4e3a 3mm\uff09 \u5c06\u7535\u997c\u94db\u9884\u70ed\uff0c\u6d82\u4e0a\u51c9\u6cb9\uff08\u70ed\u9505\u51c9\u6cb9\uff09\uff0c\u5c06\u64c0\u597d\u7684\u997c\u653e\u5165\u7535\u997c\u94db\u4e2d\uff0c\u5c06\u997c\u7684\u4e0a\u65b9\u4e5f\u5237\u70b9\u6cb9\uff0c\u6d82\u62b9\u5747\u5300\uff08\u9501\u4f4f\u6c34\u5206\uff09\uff0c\u76d6\u4e0a\u76d6\u5b50 \u5927\u706b\u70d9\u4e00\u5206\u949f\uff0c\u6253\u5f00\u76d6\u5b50\uff0c\u5c06\u997c\u7ffb\u4e2a\u9762\u518d\u70d9\u4e00\u5206\u949f \u91cd\u590d\u4ee5\u4e0a\u52a8\u4f5c\uff0c\u5b8c\u6210\u997c\u7684\u70d9\u5236 \u8fd9\u662f\u6211\u7b2c\u4e00\u6b21\u505a\u9762\u98df\u7c7b\uff0c\u7f3a\u70b9\u5f88\u591a\uff0c\u4f46\u81ea\u5df1\u5403\u8fd8\u662f\u76f8\u5f53\u4e0d\u9519\u7684","title":"\u64cd\u4f5c"},{"location":"dishes/staple/%E7%83%99%E9%A5%BC/%E7%83%99%E9%A5%BC/#_5","text":"\u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/staple/%E7%B1%B3%E9%A5%AD/%E7%85%AE%E9%94%85%E8%92%B8%E7%B1%B3%E9%A5%AD/","text":"\u716e\u9505\u84b8\u7c73\u996d\u7684\u505a\u6cd5 \u5fc5\u5907\u7684\u539f\u6599\u548c\u5de5\u5177 \u5317\u65b9\u5927\u7c73 \u6c34 \u539a\u5e95\u716e\u9505+\u4e25\u4e1d\u5408\u7f1d\u7684\u9505\u76d6\uff08\u5236\u4f5c\u8fc7\u7a0b\u4e2d\u4e0d\u4f1a\u6709\u5927\u91cf\u84b8\u6c7d\u6cc4\u6f0f\uff09 \u8ba1\u7b97 \u7c73\uff1a 100ml-200ml/\u4eba \u6c34\uff1a \u7c73\u7684\u4f53\u79ef\u7684 2 \u500d \u64cd\u4f5c \u6e05\u6d17\u5927\u7c73 \u5c06\u7c73\u548c\u6c34\u52a0\u5165\u716e\u9505 \u5927\u706b\u716e\u81f3\u6c34\u6cb8\u817e \u6405\u62cc\u5e95\u90e8\u9632\u6b62\u7c98\u9ecf \u76d6\u4e0a\u9505\u76d6\uff0c\u8f6c \u5c0f\u706b \u52a0\u70ed 10-15 \u5206\u949f\uff08\u6839\u636e\u5bf9\u8f6f\u7cef\u7a0b\u5ea6\u7684\u559c\u597d\uff09\uff0c\u4e2d\u9014\u5207\u52ff\u6253\u5f00\u9505\u76d6 \u5173\u706b\uff0c\u9759\u7f6e 5 \u5206\u949f Enjoy :) \u9644\u52a0\u5185\u5bb9 \u8150\u56fd\u4eba\u7814\u7a76\u716e\u7c73\u996d\uff0c\u597d\u60f3\u9001\u4ed6\u4eec\u4e2a\u7535\u996d\u7172\uff01","title":"\u716e\u9505\u84b8\u7c73\u996d"},{"location":"dishes/staple/%E7%B1%B3%E9%A5%AD/%E7%85%AE%E9%94%85%E8%92%B8%E7%B1%B3%E9%A5%AD/#_1","text":"","title":"\u716e\u9505\u84b8\u7c73\u996d\u7684\u505a\u6cd5"},{"location":"dishes/staple/%E7%B1%B3%E9%A5%AD/%E7%85%AE%E9%94%85%E8%92%B8%E7%B1%B3%E9%A5%AD/#_2","text":"\u5317\u65b9\u5927\u7c73 \u6c34 \u539a\u5e95\u716e\u9505+\u4e25\u4e1d\u5408\u7f1d\u7684\u9505\u76d6\uff08\u5236\u4f5c\u8fc7\u7a0b\u4e2d\u4e0d\u4f1a\u6709\u5927\u91cf\u84b8\u6c7d\u6cc4\u6f0f\uff09","title":"\u5fc5\u5907\u7684\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/staple/%E7%B1%B3%E9%A5%AD/%E7%85%AE%E9%94%85%E8%92%B8%E7%B1%B3%E9%A5%AD/#_3","text":"\u7c73\uff1a 100ml-200ml/\u4eba \u6c34\uff1a \u7c73\u7684\u4f53\u79ef\u7684 2 \u500d","title":"\u8ba1\u7b97"},{"location":"dishes/staple/%E7%B1%B3%E9%A5%AD/%E7%85%AE%E9%94%85%E8%92%B8%E7%B1%B3%E9%A5%AD/#_4","text":"\u6e05\u6d17\u5927\u7c73 \u5c06\u7c73\u548c\u6c34\u52a0\u5165\u716e\u9505 \u5927\u706b\u716e\u81f3\u6c34\u6cb8\u817e \u6405\u62cc\u5e95\u90e8\u9632\u6b62\u7c98\u9ecf \u76d6\u4e0a\u9505\u76d6\uff0c\u8f6c \u5c0f\u706b \u52a0\u70ed 10-15 \u5206\u949f\uff08\u6839\u636e\u5bf9\u8f6f\u7cef\u7a0b\u5ea6\u7684\u559c\u597d\uff09\uff0c\u4e2d\u9014\u5207\u52ff\u6253\u5f00\u9505\u76d6 \u5173\u706b\uff0c\u9759\u7f6e 5 \u5206\u949f Enjoy :)","title":"\u64cd\u4f5c"},{"location":"dishes/staple/%E7%B1%B3%E9%A5%AD/%E7%85%AE%E9%94%85%E8%92%B8%E7%B1%B3%E9%A5%AD/#_5","text":"\u8150\u56fd\u4eba\u7814\u7a76\u716e\u7c73\u996d\uff0c\u597d\u60f3\u9001\u4ed6\u4eec\u4e2a\u7535\u996d\u7172\uff01","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/staple/%E7%B1%B3%E9%A5%AD/%E7%94%B5%E9%A5%AD%E7%85%B2%E8%92%B8%E7%B1%B3%E9%A5%AD/","text":"\u7535\u996d\u7172\u84b8\u7c73\u996d\u7684\u505a\u6cd5 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u7535\u996d\u7172 \u6c5f\u5357\u7c73\u6216\u5317\u65b9\u5927\u7c73 \u6c34 \u8ba1\u7b97 \u6bcf\u4eba\u53ef\u4ee5\u98df\u7528 100ml-200ml \u7684\u7c73\u3002 \u6307\u5c16\u91cf\u6c34\u6cd5 \uff08\u7528\u4e8e\u7cbe\u51c6\u786e\u5b9a\u7c73\u6c34\u91cf\u7684\u65b9\u6cd5\uff09 \u6c5f\u5357\u7c73\uff0c\u7c73\u548c\u6c34\u653e\u5728\u7535\u996d\u7172\u7684\u5bb9\u5668\u5185\uff0c\u98df\u6307\u89e6\u53ca\u7c73\u65f6\uff0c\u6c34\u91cf\u80fd\u521a\u597d\u6ca1\u8fc7\u98df\u6307\u7684\u7b2c\u4e00\u4e2a\u6307\u8282\u7684 \u4e00\u534a\u7684\u4e00\u534a \u3002 \u5317\u65b9\u5927\u7c73\uff0c\u7c73\u548c\u6c34\u653e\u5728\u7535\u996d\u7172\u7684\u5bb9\u5668\u5185\uff0c\u98df\u6307\u89e6\u53ca\u7c73\uff0c\u6c34\u91cf\u80fd\u521a\u597d\u6ca1\u8fc7\u98df\u6307\u7684\u7b2c\u4e00\u4e2a\u6307\u8282\u3002 \u4f7f\u7528\u4e0a\u8ff0\u6761\u4ef6\uff0c\u8ba1\u7b97\u51fa\u8ba1\u5212\u4f7f\u7528\u7684\u539f\u6750\u6599\u6bd4\u4f8b\u3002 \u64cd\u4f5c \u6e05\u6d17\u7c73 \u5c06\u7c73\u548c\u6c34\u4e00\u8d77\u52a0\u5165\u7535\u996d\u7172\u4e2d\u3002 \u8fde\u63a5\u7535\u996d\u7172\u7535\u6e90\uff0c\u8fdb\u5165\u52a0\u70ed\u6a21\u5f0f\u3002\u7b49\u5f85\u5927\u7ea6 30 \u5206\u949f\u3002 \u5f85\u7535\u996d\u7172\u81ea\u52a8\u8fdb\u5165\u4fdd\u6e29\u6a21\u5f0f\u540e\u3002 \u5c06\u7c73\u5728\u7535\u996d\u7172\u4e2d\u95f7 10-15 \u5206\u949f\u3002 \u76db\u51fa\u7c73\u3002 \u9644\u52a0\u5185\u5bb9 \u6280\u672f\u603b\u7ed3 \u4e0d\u8bba\u4ec0\u4e48\u5bb9\u5668\uff0c\u6c34\u7684\u91cf\u90fd\u662f\u53ef\u4ee5\u4f7f\u7528\u201c\u6307\u5c16\u91cf\u6c34\u6cd5\u201d\u716e\u51fa\u597d\u7c73\u996d\u3002 \u6c34\u7684\u591a\u5c11\u662f\u80fd\u591f\u4e25\u91cd\u5f71\u54cd\u4e00\u7897\u597d\u7c73\u996d\u7684\u53e3\u611f\u3002 \u5357\u65b9\u4e00\u822c\u98df\u7528\u6c5f\u5357\u7c73\uff0c\u5317\u65b9\u4e00\u822c\u98df\u7528\u5317\u65b9\u5927\u7c73\uff0c\u6c5f\u5357\u7c73\u4f1a\u6bd4\u8f83\u7ec6\u957f\uff0c\u800c\u5317\u65b9\u5927\u7c73\u4f1a\u6bd4\u8f83\u77ed\u4e14\u5706\u3002 \u7c73\u996d\u4e0d\u540c\u54c1\u79cd\u7684\u7c73\uff0c\u4e0d\u540c\u7684\u6c34\u91cf\u4f1a\u6781\u5ea6\u5f71\u54cd\u53e3\u611f\u3002 \u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u8003\u4f7f\u7528\u7684\u7535\u996d\u7172\u7684\u8bf4\u660e\u4e66\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u7535\u996d\u7172\u84b8\u7c73\u996d"},{"location":"dishes/staple/%E7%B1%B3%E9%A5%AD/%E7%94%B5%E9%A5%AD%E7%85%B2%E8%92%B8%E7%B1%B3%E9%A5%AD/#_1","text":"","title":"\u7535\u996d\u7172\u84b8\u7c73\u996d\u7684\u505a\u6cd5"},{"location":"dishes/staple/%E7%B1%B3%E9%A5%AD/%E7%94%B5%E9%A5%AD%E7%85%B2%E8%92%B8%E7%B1%B3%E9%A5%AD/#_2","text":"\u7535\u996d\u7172 \u6c5f\u5357\u7c73\u6216\u5317\u65b9\u5927\u7c73 \u6c34","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/staple/%E7%B1%B3%E9%A5%AD/%E7%94%B5%E9%A5%AD%E7%85%B2%E8%92%B8%E7%B1%B3%E9%A5%AD/#_3","text":"\u6bcf\u4eba\u53ef\u4ee5\u98df\u7528 100ml-200ml \u7684\u7c73\u3002 \u6307\u5c16\u91cf\u6c34\u6cd5 \uff08\u7528\u4e8e\u7cbe\u51c6\u786e\u5b9a\u7c73\u6c34\u91cf\u7684\u65b9\u6cd5\uff09 \u6c5f\u5357\u7c73\uff0c\u7c73\u548c\u6c34\u653e\u5728\u7535\u996d\u7172\u7684\u5bb9\u5668\u5185\uff0c\u98df\u6307\u89e6\u53ca\u7c73\u65f6\uff0c\u6c34\u91cf\u80fd\u521a\u597d\u6ca1\u8fc7\u98df\u6307\u7684\u7b2c\u4e00\u4e2a\u6307\u8282\u7684 \u4e00\u534a\u7684\u4e00\u534a \u3002 \u5317\u65b9\u5927\u7c73\uff0c\u7c73\u548c\u6c34\u653e\u5728\u7535\u996d\u7172\u7684\u5bb9\u5668\u5185\uff0c\u98df\u6307\u89e6\u53ca\u7c73\uff0c\u6c34\u91cf\u80fd\u521a\u597d\u6ca1\u8fc7\u98df\u6307\u7684\u7b2c\u4e00\u4e2a\u6307\u8282\u3002 \u4f7f\u7528\u4e0a\u8ff0\u6761\u4ef6\uff0c\u8ba1\u7b97\u51fa\u8ba1\u5212\u4f7f\u7528\u7684\u539f\u6750\u6599\u6bd4\u4f8b\u3002","title":"\u8ba1\u7b97"},{"location":"dishes/staple/%E7%B1%B3%E9%A5%AD/%E7%94%B5%E9%A5%AD%E7%85%B2%E8%92%B8%E7%B1%B3%E9%A5%AD/#_4","text":"\u6e05\u6d17\u7c73 \u5c06\u7c73\u548c\u6c34\u4e00\u8d77\u52a0\u5165\u7535\u996d\u7172\u4e2d\u3002 \u8fde\u63a5\u7535\u996d\u7172\u7535\u6e90\uff0c\u8fdb\u5165\u52a0\u70ed\u6a21\u5f0f\u3002\u7b49\u5f85\u5927\u7ea6 30 \u5206\u949f\u3002 \u5f85\u7535\u996d\u7172\u81ea\u52a8\u8fdb\u5165\u4fdd\u6e29\u6a21\u5f0f\u540e\u3002 \u5c06\u7c73\u5728\u7535\u996d\u7172\u4e2d\u95f7 10-15 \u5206\u949f\u3002 \u76db\u51fa\u7c73\u3002","title":"\u64cd\u4f5c"},{"location":"dishes/staple/%E7%B1%B3%E9%A5%AD/%E7%94%B5%E9%A5%AD%E7%85%B2%E8%92%B8%E7%B1%B3%E9%A5%AD/#_5","text":"\u6280\u672f\u603b\u7ed3 \u4e0d\u8bba\u4ec0\u4e48\u5bb9\u5668\uff0c\u6c34\u7684\u91cf\u90fd\u662f\u53ef\u4ee5\u4f7f\u7528\u201c\u6307\u5c16\u91cf\u6c34\u6cd5\u201d\u716e\u51fa\u597d\u7c73\u996d\u3002 \u6c34\u7684\u591a\u5c11\u662f\u80fd\u591f\u4e25\u91cd\u5f71\u54cd\u4e00\u7897\u597d\u7c73\u996d\u7684\u53e3\u611f\u3002 \u5357\u65b9\u4e00\u822c\u98df\u7528\u6c5f\u5357\u7c73\uff0c\u5317\u65b9\u4e00\u822c\u98df\u7528\u5317\u65b9\u5927\u7c73\uff0c\u6c5f\u5357\u7c73\u4f1a\u6bd4\u8f83\u7ec6\u957f\uff0c\u800c\u5317\u65b9\u5927\u7c73\u4f1a\u6bd4\u8f83\u77ed\u4e14\u5706\u3002 \u7c73\u996d\u4e0d\u540c\u54c1\u79cd\u7684\u7c73\uff0c\u4e0d\u540c\u7684\u6c34\u91cf\u4f1a\u6781\u5ea6\u5f71\u54cd\u53e3\u611f\u3002 \u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u8003\u4f7f\u7528\u7684\u7535\u996d\u7172\u7684\u8bf4\u660e\u4e66\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/staple/%E8%80%81%E5%8F%8B%E7%8C%AA%E8%82%89%E7%B2%89/%E8%80%81%E5%8F%8B%E7%8C%AA%E8%82%89%E7%B2%89/","text":"\u8001\u53cb\u732a\u8089\u7c89\u7684\u505a\u6cd5 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u7c73\u7c89\uff08250g \u8bb0\u5f97 50 \u5ea6\u7684\u6e29\u6c34\u6ce1\u534a\u5c0f\u65f6\uff09 \u732a\u8089(50g) \u9178\u7b0b(50g) \u5241\u6912\uff0815g \u8fa3\u6912\u5241\u5b8c\u540e, \u4e2a\u4eba\u9700\u6c42\u9002\u5f53\u653e\u3002 \uff09 \u8c46\u8c49(30g) \u5927\u849c(10g) \u6599\u9152(10-20ml) \u751f\u62bd(15ml) \u767d\u7cd6\uff085g \u9002\u5f53\u653e,\u6839\u636e\u4f60\u7684\u751c\u53e3\uff09 \u7c73\u918b(5ml) \u76d0(5ml) \u6cb9(15ml) \u751f\u7c89(15ml) \u80e1\u6912\u7c89(10ml) \u64cd\u4f5c \u5168\u90e8\u732a\u8089\u7528\u6599\u9152\u3001\u76d0\u3001\u751f\u62bd\u3001\u751f\u7c89\u3001\u80e1\u6912\u7c89\u5012\u5728\u4e00\u4e2a\u7897\u91cc\u8c03\u5473,\u5907\u7528 \u70ed\u9505\u4e0d\u653e\u6cb9,\u4e0b\u5168\u90e8\u9178\u7b0b\u628a\u6c34\u4efd\u7092\u5e72\uff0c\u7092\u5e72\u7684\u9178\u7b0b\u4e2d\u95f4\u7559\u70b9\u7a7a\u95f4 \u653e\u5165 10ml - 15ml \u98df\u7528\u6cb9\u4e0e\u5168\u90e8\u5927\u849c\u3001 \u5241\u6912\u3001 \u8c46\u8c49\u5230\u7092\u5e72\u7684\u9178\u7b0b\u4e2d\u95f4\u5230\u7092\u5e72\u7684\u9178\u7b0b\u4e2d\u95f4,\u5168\u90e8\u63a8\u5230\u4e2d\u95f4\u7092\u51fa\u9999\u5473 \u653e\u5165\u5168\u90e8\u8c03\u5473\u597d\u7684\u732a\u8089,\u6301\u7eed\u653e\u5165 10ml \u751f\u62bd\u7092\u4e00\u5206\u949f \u653e\u5165 5ml \u7c73\u918b\u3001 10ml \u751f\u62bd\u3001450ml \u6e05\u6c34\u4e00\u8d77\u716e\u5f00 \u6c34\u716e\u5f00\u540e,\u653e\u5165\u6e29\u6c34\u6ce1\u597d\u7684\u7c73\u7c89,\u7ee7\u7eed\u716e 3 \u5206\u949f\u5c31\u53ef\u4ee5\u76db\u76d8 \u9644\u52a0\u5185\u5bb9 \u8bb0\u5f97\u7c73\u7c89\u5fc5\u987b\u662f\u6ce1\u8fc7\u7684\u624d\u597d\u5403,\u6ca1\u6709\u6ce1\u8fc7\u7684\u8bdd\u662f\u5f88\u96be\u5403\u7684\uff01","title":"\u8001\u53cb\u732a\u8089\u7c89"},{"location":"dishes/staple/%E8%80%81%E5%8F%8B%E7%8C%AA%E8%82%89%E7%B2%89/%E8%80%81%E5%8F%8B%E7%8C%AA%E8%82%89%E7%B2%89/#_1","text":"","title":"\u8001\u53cb\u732a\u8089\u7c89\u7684\u505a\u6cd5"},{"location":"dishes/staple/%E8%80%81%E5%8F%8B%E7%8C%AA%E8%82%89%E7%B2%89/%E8%80%81%E5%8F%8B%E7%8C%AA%E8%82%89%E7%B2%89/#_2","text":"\u7c73\u7c89\uff08250g \u8bb0\u5f97 50 \u5ea6\u7684\u6e29\u6c34\u6ce1\u534a\u5c0f\u65f6\uff09 \u732a\u8089(50g) \u9178\u7b0b(50g) \u5241\u6912\uff0815g \u8fa3\u6912\u5241\u5b8c\u540e, \u4e2a\u4eba\u9700\u6c42\u9002\u5f53\u653e\u3002 \uff09 \u8c46\u8c49(30g) \u5927\u849c(10g) \u6599\u9152(10-20ml) \u751f\u62bd(15ml) \u767d\u7cd6\uff085g \u9002\u5f53\u653e,\u6839\u636e\u4f60\u7684\u751c\u53e3\uff09 \u7c73\u918b(5ml) \u76d0(5ml) \u6cb9(15ml) \u751f\u7c89(15ml) \u80e1\u6912\u7c89(10ml)","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/staple/%E8%80%81%E5%8F%8B%E7%8C%AA%E8%82%89%E7%B2%89/%E8%80%81%E5%8F%8B%E7%8C%AA%E8%82%89%E7%B2%89/#_3","text":"\u5168\u90e8\u732a\u8089\u7528\u6599\u9152\u3001\u76d0\u3001\u751f\u62bd\u3001\u751f\u7c89\u3001\u80e1\u6912\u7c89\u5012\u5728\u4e00\u4e2a\u7897\u91cc\u8c03\u5473,\u5907\u7528 \u70ed\u9505\u4e0d\u653e\u6cb9,\u4e0b\u5168\u90e8\u9178\u7b0b\u628a\u6c34\u4efd\u7092\u5e72\uff0c\u7092\u5e72\u7684\u9178\u7b0b\u4e2d\u95f4\u7559\u70b9\u7a7a\u95f4 \u653e\u5165 10ml - 15ml \u98df\u7528\u6cb9\u4e0e\u5168\u90e8\u5927\u849c\u3001 \u5241\u6912\u3001 \u8c46\u8c49\u5230\u7092\u5e72\u7684\u9178\u7b0b\u4e2d\u95f4\u5230\u7092\u5e72\u7684\u9178\u7b0b\u4e2d\u95f4,\u5168\u90e8\u63a8\u5230\u4e2d\u95f4\u7092\u51fa\u9999\u5473 \u653e\u5165\u5168\u90e8\u8c03\u5473\u597d\u7684\u732a\u8089,\u6301\u7eed\u653e\u5165 10ml \u751f\u62bd\u7092\u4e00\u5206\u949f \u653e\u5165 5ml \u7c73\u918b\u3001 10ml \u751f\u62bd\u3001450ml \u6e05\u6c34\u4e00\u8d77\u716e\u5f00 \u6c34\u716e\u5f00\u540e,\u653e\u5165\u6e29\u6c34\u6ce1\u597d\u7684\u7c73\u7c89,\u7ee7\u7eed\u716e 3 \u5206\u949f\u5c31\u53ef\u4ee5\u76db\u76d8","title":"\u64cd\u4f5c"},{"location":"dishes/staple/%E8%80%81%E5%8F%8B%E7%8C%AA%E8%82%89%E7%B2%89/%E8%80%81%E5%8F%8B%E7%8C%AA%E8%82%89%E7%B2%89/#_4","text":"\u8bb0\u5f97\u7c73\u7c89\u5fc5\u987b\u662f\u6ce1\u8fc7\u7684\u624d\u597d\u5403,\u6ca1\u6709\u6ce1\u8fc7\u7684\u8bdd\u662f\u5f88\u96be\u5403\u7684\uff01","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/staple/%E9%9F%A9%E5%BC%8F%E6%8B%8C%E9%A5%AD/%E9%9F%A9%E5%BC%8F%E6%8B%8C%E9%A5%AD/","text":"\u97e9\u5f0f\u62cc\u996d\u7684\u505a\u6cd5 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u7c73\u996d \u9e21\u86cb \u706b\u9505\u725b\u8089\u5377 \u8c46\u82bd \u8611\u83c7 \u80e1\u841d\u535c \u897f\u846b\u82a6 \u97e9\u5f0f\u8fa3\u9171 \u96ea\u78a7 \u829d\u9ebb \u829d\u9ebb\u6cb9 \u8ba1\u7b97 \u6bcf\u4efd\uff1a \u7c73\u996d 1 \u7897 (400g) \u9e21\u86cb 1 \u9897 \u706b\u9505\u725b\u8089\u5377 6 \u5377 60g \u8c46\u82bd 1 \u628a 80g \u8611\u83c7 50g \u80e1\u841d\u535c 1/4 \u6839 \u897f\u846b\u82a6 50g \u97e9\u5f0f\u8fa3\u9171 25ml \u96ea\u78a7 2 \u74f6\u76d6, 20ml \u829d\u9ebb \u5c11\u8bb8 \u829d\u9ebb\u6cb9 20ml \u751f\u62bd 15ml \u64cd\u4f5c \u852c\u83dc\u6e05\u6d17 \u5207\u4e1d \u653e\u9505\u4e2d\u7ffb\u7092 \u98df\u6750\u53d8\u8f6f \u4fbf\u53ef\u79f0\u51fa \u716e\u6c34 \u7b49\u6cb8\u817e\u65f6 \u712f\u725b\u8089\u5377 \u53ea\u9700\u716e\u719f \u5927\u6982\u4e09\u5206\u949f\u5373\u53ef\u635e\u51fa \u714e \u6e8f\u5fc3\u86cb \u5c06 \u7c73\u996d \u653e\u5728\u4e00\u4e2a\u7897\u91cc \u7136\u540e\u5012\u6263\u5728\u5927\u7897 \u5c06\u51c6\u5907\u597d\u7684\u852c\u83dc\u548c\u8089\u5377\u4f9d\u6b21\u7ed5\u5708\u653e\u5728\u7c73\u996d\u4e0a\u9762 \u5c06\u714e\u86cb\u653e\u4e2d\u95f4 \u5907\u9171\u6c41 \u4e24\u52fa\u97e9\u5f0f\u8fa3\u9171\uff08\u751c\u8fa3\u53e3\uff09+ \u4e00\u52fa\u751f\u62bd + \u4e24\u74f6\u76d6\u96ea\u78a7\uff08\u51cf\u80a5\u7684\u8bdd \u53ef\u4ee5\u653e\u65e0\u7cd6\u96ea\u78a7\uff09+ \u5c11\u8bb8\u829d\u9ebb + \u4e00\u52fa\u829d\u9ebb\u6cb9 \u6405\u62cc\u4e0a\u8ff0\u9171\u6c41\uff0c\u53ef\u4ee5\u518d\u52a0\u751f\u62bd\u548c\u76d0 \u5c06\u5907\u597d\u7684\u9171\u6c41\u5012\u5728\u6446\u597d\u76d8\u7684\u7897\u4e2d \u9644\u52a0\u5185\u5bb9 \u8fd9\u662f\u9053\u975e\u5e38\u7b80\u5355\u7684\u83dc \u8fc7\u7a0b\u4f1a\u6bd4\u8f83\u7e41\u7410 \u4f46\u5f53\u5c06\u83dc\u8089\u7c73\u996d\u9171\u6c41\u6405\u62cc\u8d77\u6765\u5403\u4f1a\u5f88\u6ee1\u8db3 \u5982\u679c\u5bf9\u5916\u89c2\u6709\u4e00\u5b9a\u8981\u6c42 \u53ef\u4ee5\u7528\u7802\u9505\u4ee3\u66ff\u666e\u901a\u7897 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u97e9\u5f0f\u62cc\u996d"},{"location":"dishes/staple/%E9%9F%A9%E5%BC%8F%E6%8B%8C%E9%A5%AD/%E9%9F%A9%E5%BC%8F%E6%8B%8C%E9%A5%AD/#_1","text":"","title":"\u97e9\u5f0f\u62cc\u996d\u7684\u505a\u6cd5"},{"location":"dishes/staple/%E9%9F%A9%E5%BC%8F%E6%8B%8C%E9%A5%AD/%E9%9F%A9%E5%BC%8F%E6%8B%8C%E9%A5%AD/#_2","text":"\u7c73\u996d \u9e21\u86cb \u706b\u9505\u725b\u8089\u5377 \u8c46\u82bd \u8611\u83c7 \u80e1\u841d\u535c \u897f\u846b\u82a6 \u97e9\u5f0f\u8fa3\u9171 \u96ea\u78a7 \u829d\u9ebb \u829d\u9ebb\u6cb9","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/staple/%E9%9F%A9%E5%BC%8F%E6%8B%8C%E9%A5%AD/%E9%9F%A9%E5%BC%8F%E6%8B%8C%E9%A5%AD/#_3","text":"\u6bcf\u4efd\uff1a \u7c73\u996d 1 \u7897 (400g) \u9e21\u86cb 1 \u9897 \u706b\u9505\u725b\u8089\u5377 6 \u5377 60g \u8c46\u82bd 1 \u628a 80g \u8611\u83c7 50g \u80e1\u841d\u535c 1/4 \u6839 \u897f\u846b\u82a6 50g \u97e9\u5f0f\u8fa3\u9171 25ml \u96ea\u78a7 2 \u74f6\u76d6, 20ml \u829d\u9ebb \u5c11\u8bb8 \u829d\u9ebb\u6cb9 20ml \u751f\u62bd 15ml","title":"\u8ba1\u7b97"},{"location":"dishes/staple/%E9%9F%A9%E5%BC%8F%E6%8B%8C%E9%A5%AD/%E9%9F%A9%E5%BC%8F%E6%8B%8C%E9%A5%AD/#_4","text":"\u852c\u83dc\u6e05\u6d17 \u5207\u4e1d \u653e\u9505\u4e2d\u7ffb\u7092 \u98df\u6750\u53d8\u8f6f \u4fbf\u53ef\u79f0\u51fa \u716e\u6c34 \u7b49\u6cb8\u817e\u65f6 \u712f\u725b\u8089\u5377 \u53ea\u9700\u716e\u719f \u5927\u6982\u4e09\u5206\u949f\u5373\u53ef\u635e\u51fa \u714e \u6e8f\u5fc3\u86cb \u5c06 \u7c73\u996d \u653e\u5728\u4e00\u4e2a\u7897\u91cc \u7136\u540e\u5012\u6263\u5728\u5927\u7897 \u5c06\u51c6\u5907\u597d\u7684\u852c\u83dc\u548c\u8089\u5377\u4f9d\u6b21\u7ed5\u5708\u653e\u5728\u7c73\u996d\u4e0a\u9762 \u5c06\u714e\u86cb\u653e\u4e2d\u95f4 \u5907\u9171\u6c41 \u4e24\u52fa\u97e9\u5f0f\u8fa3\u9171\uff08\u751c\u8fa3\u53e3\uff09+ \u4e00\u52fa\u751f\u62bd + \u4e24\u74f6\u76d6\u96ea\u78a7\uff08\u51cf\u80a5\u7684\u8bdd \u53ef\u4ee5\u653e\u65e0\u7cd6\u96ea\u78a7\uff09+ \u5c11\u8bb8\u829d\u9ebb + \u4e00\u52fa\u829d\u9ebb\u6cb9 \u6405\u62cc\u4e0a\u8ff0\u9171\u6c41\uff0c\u53ef\u4ee5\u518d\u52a0\u751f\u62bd\u548c\u76d0 \u5c06\u5907\u597d\u7684\u9171\u6c41\u5012\u5728\u6446\u597d\u76d8\u7684\u7897\u4e2d","title":"\u64cd\u4f5c"},{"location":"dishes/staple/%E9%9F%A9%E5%BC%8F%E6%8B%8C%E9%A5%AD/%E9%9F%A9%E5%BC%8F%E6%8B%8C%E9%A5%AD/#_5","text":"\u8fd9\u662f\u9053\u975e\u5e38\u7b80\u5355\u7684\u83dc \u8fc7\u7a0b\u4f1a\u6bd4\u8f83\u7e41\u7410 \u4f46\u5f53\u5c06\u83dc\u8089\u7c73\u996d\u9171\u6c41\u6405\u62cc\u8d77\u6765\u5403\u4f1a\u5f88\u6ee1\u8db3 \u5982\u679c\u5bf9\u5916\u89c2\u6709\u4e00\u5b9a\u8981\u6c42 \u53ef\u4ee5\u7528\u7802\u9505\u4ee3\u66ff\u666e\u901a\u7897 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/template/%E7%A4%BA%E4%BE%8B%E8%8F%9C/%E7%A4%BA%E4%BE%8B%E8%8F%9C/","text":"\u793a\u4f8b\u83dc\u7684\u505a\u6cd5 \u793a\u4f8b\u83dc\u662f\u4e00\u9053\u7b80\u5355\u6613\u505a\u7684\u83dc\u3002\u5bcc\u542b DHA \u548c\u86cb\u767d\u8d28\u3002\u4e00\u822c\u521d\u5b66\u8005\u53ea\u9700\u8981 3 \u5c0f\u65f6\u5373\u53ef\u5b8c\u6210\u3002\u8fd8\u6709\u7f8e\u5bb9\u6548\u679c\u54e6~ \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u5496\u55b1\u5757\uff08\u63a8\u8350\u54c1\u724c\u597d\u4f8d\uff09 \u571f\u8c46 \u8ba1\u7b97 \u6bcf\u4efd\uff1a \u5496\u55b1\u5757 115g \u571f\u8c46 2 \u4e2a\uff08\u6bcf\u4e2a\u571f\u8c46\u7ea6 120g\uff0c\u5171 240g\uff09 \u98df\u7528\u6cb9 10-15ml \u64cd\u4f5c \u571f\u8c46\u53bb\u76ae\u3001\u5207\u6210\u4e0d\u8d85\u8fc7 4cm \u7684\u5927\u5757\uff0c\u5907\u7528 \u5496\u55b1\u5757\u5207\u788e\uff0c\u589e\u52a0\u63a5\u89e6\u9762\u79ef\u52a0\u901f\u6eb6\u89e3\uff0c\u5907\u7528 \u70ed\u9505\uff0c\u9505\u5185\u653e\u5165 10ml - 15ml \u98df\u7528\u6cb9\u3002\u7b49\u5f85 10 \u79d2\u8ba9\u6cb9\u6e29\u5347\u9ad8 \u653e\u5165\u571f\u8c46\uff0c\u4fdd\u6301\u7ffb\u7092\u81f3\u571f\u8c46 \u53d8\u8f6f \uff08\u53ef\u4ee5\u7528\u7b77\u5b50\u786e\u8ba4\uff09 \u52a0\u6c34\u6ca1\u8fc7\u6240\u6709\u98df\u6750\uff0c\u6cb8\u817e\u540e\uff0c\u5c06\u706b\u8c03\u5c0f\u7136\u540e \u7b49\u5f85 15 - 20 \u5206\u949f \u5173\u706b\uff0c\u52a0\u5496\u55b1\u5e76\u6405\u62cc\uff0c\u7b49\u5f85\u76f4\u81f3\u5496\u55b1\u878d\u5316 \u518d\u5f00\u706b\uff0c\u7f13\u6162 \u6405\u62cc 10 \u5206\u949f \uff0c\u9632\u6b62\u7cca\u9505 \u5728\u5916\u89c2 \u5448\u7c98\u7a20\u72b6\u6001 \u540e\u5173\u706b\uff0c\u76db\u76d8 \u9644\u52a0\u5185\u5bb9 \u64cd\u4f5c\u65f6\uff0c\u9700\u8981\u6ce8\u610f\u89c2\u5bdf\u6cb8\u817e\u7684\u6c34\u4f4d\u7ebf\uff0c\u5982\u53d1\u73b0\u4f4e\u4e8e 2/3 \u7684\u98df\u6750\u5e94\u52a0\u70ed\u6c34\u81f3\u6ca1\u8fc7\u98df\u6750\u3002 \u53c2\u8003\u8d44\u6599\uff1a \u4e16\u754c\u7f8e\u98df\u6559\u7a0b\u7684\u5fae\u535a\u89c6\u9891 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u793a\u4f8b\u83dc"},{"location":"dishes/template/%E7%A4%BA%E4%BE%8B%E8%8F%9C/%E7%A4%BA%E4%BE%8B%E8%8F%9C/#_1","text":"\u793a\u4f8b\u83dc\u662f\u4e00\u9053\u7b80\u5355\u6613\u505a\u7684\u83dc\u3002\u5bcc\u542b DHA \u548c\u86cb\u767d\u8d28\u3002\u4e00\u822c\u521d\u5b66\u8005\u53ea\u9700\u8981 3 \u5c0f\u65f6\u5373\u53ef\u5b8c\u6210\u3002\u8fd8\u6709\u7f8e\u5bb9\u6548\u679c\u54e6~","title":"\u793a\u4f8b\u83dc\u7684\u505a\u6cd5"},{"location":"dishes/template/%E7%A4%BA%E4%BE%8B%E8%8F%9C/%E7%A4%BA%E4%BE%8B%E8%8F%9C/#_2","text":"\u5496\u55b1\u5757\uff08\u63a8\u8350\u54c1\u724c\u597d\u4f8d\uff09 \u571f\u8c46","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/template/%E7%A4%BA%E4%BE%8B%E8%8F%9C/%E7%A4%BA%E4%BE%8B%E8%8F%9C/#_3","text":"\u6bcf\u4efd\uff1a \u5496\u55b1\u5757 115g \u571f\u8c46 2 \u4e2a\uff08\u6bcf\u4e2a\u571f\u8c46\u7ea6 120g\uff0c\u5171 240g\uff09 \u98df\u7528\u6cb9 10-15ml","title":"\u8ba1\u7b97"},{"location":"dishes/template/%E7%A4%BA%E4%BE%8B%E8%8F%9C/%E7%A4%BA%E4%BE%8B%E8%8F%9C/#_4","text":"\u571f\u8c46\u53bb\u76ae\u3001\u5207\u6210\u4e0d\u8d85\u8fc7 4cm \u7684\u5927\u5757\uff0c\u5907\u7528 \u5496\u55b1\u5757\u5207\u788e\uff0c\u589e\u52a0\u63a5\u89e6\u9762\u79ef\u52a0\u901f\u6eb6\u89e3\uff0c\u5907\u7528 \u70ed\u9505\uff0c\u9505\u5185\u653e\u5165 10ml - 15ml \u98df\u7528\u6cb9\u3002\u7b49\u5f85 10 \u79d2\u8ba9\u6cb9\u6e29\u5347\u9ad8 \u653e\u5165\u571f\u8c46\uff0c\u4fdd\u6301\u7ffb\u7092\u81f3\u571f\u8c46 \u53d8\u8f6f \uff08\u53ef\u4ee5\u7528\u7b77\u5b50\u786e\u8ba4\uff09 \u52a0\u6c34\u6ca1\u8fc7\u6240\u6709\u98df\u6750\uff0c\u6cb8\u817e\u540e\uff0c\u5c06\u706b\u8c03\u5c0f\u7136\u540e \u7b49\u5f85 15 - 20 \u5206\u949f \u5173\u706b\uff0c\u52a0\u5496\u55b1\u5e76\u6405\u62cc\uff0c\u7b49\u5f85\u76f4\u81f3\u5496\u55b1\u878d\u5316 \u518d\u5f00\u706b\uff0c\u7f13\u6162 \u6405\u62cc 10 \u5206\u949f \uff0c\u9632\u6b62\u7cca\u9505 \u5728\u5916\u89c2 \u5448\u7c98\u7a20\u72b6\u6001 \u540e\u5173\u706b\uff0c\u76db\u76d8","title":"\u64cd\u4f5c"},{"location":"dishes/template/%E7%A4%BA%E4%BE%8B%E8%8F%9C/%E7%A4%BA%E4%BE%8B%E8%8F%9C/#_5","text":"\u64cd\u4f5c\u65f6\uff0c\u9700\u8981\u6ce8\u610f\u89c2\u5bdf\u6cb8\u817e\u7684\u6c34\u4f4d\u7ebf\uff0c\u5982\u53d1\u73b0\u4f4e\u4e8e 2/3 \u7684\u98df\u6750\u5e94\u52a0\u70ed\u6c34\u81f3\u6ca1\u8fc7\u98df\u6750\u3002 \u53c2\u8003\u8d44\u6599\uff1a \u4e16\u754c\u7f8e\u98df\u6559\u7a0b\u7684\u5fae\u535a\u89c6\u9891 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/vegetable_dish/%E5%87%89%E6%8B%8C%E6%B2%B9%E9%BA%A6%E8%8F%9C/","text":"\u51c9\u62cc\u6cb9\u9ea6\u83dc \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u6cb9\u9ea6\u83dc \u829d\u9ebb\u9171 \u9171\u6cb9 \u918b \u597d\u53cb \u767d\u7cd6 \u9999\u6cb9 \u849c \u76d0 \u8ba1\u7b97 1 \u9897 \u6cb9\u9ea6\u83dc\uff08\u7ea6 200g\uff09 * \u4eba\u6570 15ml \u918b * \u4eba\u6570 5ml \u9171\u6cb9 * \u4eba\u6570 10ml \u829d\u9ebb\u9171 * \u4eba\u6570 5ml \u9999\u6cb9 * \u4eba\u6570 5g \u7cd6 * \u4eba\u6570 10ml \u869d\u6cb9 * \u4eba\u6570 \u4e24 \u5934 \u849c * \u4eba\u6570 \u64cd\u4f5c \u849c\u62cd\u788e\u5207\u672b \u918b\uff0c\u9171\u6cb9\uff0c\u829d\u9ebb\u9171\uff0c\u9999\u6cb9\uff0c\u7cd6\uff0c\u869d\u6cb9\uff0c\u849c\u672b\u653e\u5230\u7897\u91cc\u6405\u62cc\u5747\u5300 \u6cb9\u9ea6\u83dc\u5207\u6bb5\uff0c\u6bcf\u6bb5\u4e0d\u8d85\u8fc7 4cm \u6cb9\u9ea6\u83dc\u653e\u5230\u4e00\u4e2a\u5927\u70b9\u7684\u76c6\u91cc,\u5012\u5165\u4e0a\u8ff0\u7897\u4e2d\u9171\u6599,\u5145\u5206\u6405\u62cc\u5747\u5300. \u9644\u52a0\u5185\u5bb9 \u829d\u9ebb\u9171\u53ef\u4ee5\u7528\u82b1\u751f\u9171\u4ee3\u66ff \u829d\u9ebb\u9171\u4e00\u5b9a\u8981\u548c\u6cb9\u9ea6\u83dc\u6df7\u5408\u5747\u5300\u624d\u66f4\u597d\u5403. \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u51c9\u62cc\u6cb9\u9ea6\u83dc"},{"location":"dishes/vegetable_dish/%E5%87%89%E6%8B%8C%E6%B2%B9%E9%BA%A6%E8%8F%9C/#_1","text":"","title":"\u51c9\u62cc\u6cb9\u9ea6\u83dc"},{"location":"dishes/vegetable_dish/%E5%87%89%E6%8B%8C%E6%B2%B9%E9%BA%A6%E8%8F%9C/#_2","text":"\u6cb9\u9ea6\u83dc \u829d\u9ebb\u9171 \u9171\u6cb9 \u918b \u597d\u53cb \u767d\u7cd6 \u9999\u6cb9 \u849c \u76d0","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/vegetable_dish/%E5%87%89%E6%8B%8C%E6%B2%B9%E9%BA%A6%E8%8F%9C/#_3","text":"1 \u9897 \u6cb9\u9ea6\u83dc\uff08\u7ea6 200g\uff09 * \u4eba\u6570 15ml \u918b * \u4eba\u6570 5ml \u9171\u6cb9 * \u4eba\u6570 10ml \u829d\u9ebb\u9171 * \u4eba\u6570 5ml \u9999\u6cb9 * \u4eba\u6570 5g \u7cd6 * \u4eba\u6570 10ml \u869d\u6cb9 * \u4eba\u6570 \u4e24 \u5934 \u849c * \u4eba\u6570","title":"\u8ba1\u7b97"},{"location":"dishes/vegetable_dish/%E5%87%89%E6%8B%8C%E6%B2%B9%E9%BA%A6%E8%8F%9C/#_4","text":"\u849c\u62cd\u788e\u5207\u672b \u918b\uff0c\u9171\u6cb9\uff0c\u829d\u9ebb\u9171\uff0c\u9999\u6cb9\uff0c\u7cd6\uff0c\u869d\u6cb9\uff0c\u849c\u672b\u653e\u5230\u7897\u91cc\u6405\u62cc\u5747\u5300 \u6cb9\u9ea6\u83dc\u5207\u6bb5\uff0c\u6bcf\u6bb5\u4e0d\u8d85\u8fc7 4cm \u6cb9\u9ea6\u83dc\u653e\u5230\u4e00\u4e2a\u5927\u70b9\u7684\u76c6\u91cc,\u5012\u5165\u4e0a\u8ff0\u7897\u4e2d\u9171\u6599,\u5145\u5206\u6405\u62cc\u5747\u5300.","title":"\u64cd\u4f5c"},{"location":"dishes/vegetable_dish/%E5%87%89%E6%8B%8C%E6%B2%B9%E9%BA%A6%E8%8F%9C/#_5","text":"\u829d\u9ebb\u9171\u53ef\u4ee5\u7528\u82b1\u751f\u9171\u4ee3\u66ff \u829d\u9ebb\u9171\u4e00\u5b9a\u8981\u548c\u6cb9\u9ea6\u83dc\u6df7\u5408\u5747\u5300\u624d\u66f4\u597d\u5403. \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/vegetable_dish/%E5%87%89%E6%8B%8C%E9%BB%84%E7%93%9C/","text":"\u51c9\u62cc\u9ec4\u74dc\u7684\u505a\u6cd5 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u9ec4\u74dc \u918b \u9171\u6cb9 \u849c \u8ba1\u7b97 \u9ec4\u74dc 200 \u514b * \u4eba\u6570 \u918b 20 \u514b * \u4eba\u6570 \u9171\u6cb9\u534a\u52fa * \u4eba\u6570 \u849c 3 \u74e3 * \u4eba\u6570 \u64cd\u4f5c \u7528\u83dc\u5200\u5c06\u9ec4\u74dc\u62cd\u6241\uff0c\u518d\u5241\u6210\u957f 3 \u5398\u7c73\u7684\u788e\u5757 \u5c06\u788e\u9ec4\u74dc\u88c5\u5165\u7897\u4e2d \u5c06\u849c\u62cd\u788e\u5207\u6210\u788e\u672b \u5c06\u918b\uff0c\u9171\u6cb9\u548c\u849c\u672b\u5012\u5165\u7897\u4e2d\u6405\u62cc\u5747\u5300 \u9644\u52a0\u5185\u5bb9 \u505a\u597d\u4e4b\u540e\u76f4\u63a5\u5f00\u5403 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u51c9\u62cc\u9ec4\u74dc"},{"location":"dishes/vegetable_dish/%E5%87%89%E6%8B%8C%E9%BB%84%E7%93%9C/#_1","text":"","title":"\u51c9\u62cc\u9ec4\u74dc\u7684\u505a\u6cd5"},{"location":"dishes/vegetable_dish/%E5%87%89%E6%8B%8C%E9%BB%84%E7%93%9C/#_2","text":"\u9ec4\u74dc \u918b \u9171\u6cb9 \u849c","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/vegetable_dish/%E5%87%89%E6%8B%8C%E9%BB%84%E7%93%9C/#_3","text":"\u9ec4\u74dc 200 \u514b * \u4eba\u6570 \u918b 20 \u514b * \u4eba\u6570 \u9171\u6cb9\u534a\u52fa * \u4eba\u6570 \u849c 3 \u74e3 * \u4eba\u6570","title":"\u8ba1\u7b97"},{"location":"dishes/vegetable_dish/%E5%87%89%E6%8B%8C%E9%BB%84%E7%93%9C/#_4","text":"\u7528\u83dc\u5200\u5c06\u9ec4\u74dc\u62cd\u6241\uff0c\u518d\u5241\u6210\u957f 3 \u5398\u7c73\u7684\u788e\u5757 \u5c06\u788e\u9ec4\u74dc\u88c5\u5165\u7897\u4e2d \u5c06\u849c\u62cd\u788e\u5207\u6210\u788e\u672b \u5c06\u918b\uff0c\u9171\u6cb9\u548c\u849c\u672b\u5012\u5165\u7897\u4e2d\u6405\u62cc\u5747\u5300","title":"\u64cd\u4f5c"},{"location":"dishes/vegetable_dish/%E5%87%89%E6%8B%8C%E9%BB%84%E7%93%9C/#_5","text":"\u505a\u597d\u4e4b\u540e\u76f4\u63a5\u5f00\u5403 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/vegetable_dish/%E5%9C%B0%E4%B8%89%E9%B2%9C/","text":"\u5730\u4e09\u9c9c\u7684\u505a\u6cd5 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u8304\u5b50 \u571f\u8c46 \u5c16\u6912 \u8471 \u59dc \u849c \u8c46\u74e3\u9171 \u751f\u62bd \u76d0 \u7cd6 \u6dc0\u7c89 \u8ba1\u7b97 \u6ce8\u610f\uff0c\u8fd9\u9053\u83dc\u4ec5\u6709\u8db3\u591f 2-4 \u4eba\u98df\u7528\u7684\u7248\u672c\u3002 \u8304\u5b50 100g \u571f\u8c46 150g \u5c16\u6912 3 - 4 \u4e2a \u4f7f\u7528\u4e0a\u8ff0\u6761\u4ef6\uff0c\u8ba1\u7b97\u51fa\u8ba1\u5212\u4f7f\u7528\u7684\u539f\u6750\u6599\u6bd4\u4f8b\u3002 \u64cd\u4f5c \u571f\u8c46\u6d17\u51c0\u3001\u53bb\u76ae\u3002\u8304\u5b50\u3001\u5c16\u6912\u6d17\u51c0\u3002 \u8471 3g \u5207 0.5cm \u5c0f\u6bb5\u3002\u849c 10g \u5241\u788e\u3002\u59dc 10g \u5207\u6cab\u3002 \u8304\u5b50\u3001\u571f\u8c46\u3001\u5c16\u6912\u5747\u5207\u6210 15g \u5de6\u53f3\u7684\u5c0f\u5757\u3002 \u70ed\u9505\uff0c\u52a0\u5165 25ml \u6cb9\u3002 \u52a0\u5165\u571f\u8c46\uff0c\u714e\u70b8\u5927\u7ea6 3 \u5206\u949f\uff0c\u5f85\u5176\u5230\u5927\u7ea6 8 \u5206\u719f\uff0c\u4ee5\u663e\u793a\u91d1\u9ec4\u8272\u4e3a\u51c6\u3002 \u635e\u51fa\u571f\u8c46\uff0c\u7559\u4e0b\u6cb9\u3002 \u52a0\u5165\u8304\u5b50\uff0c\u714e\u70b8\u5927\u7ea6 40 \u79d2\uff0c\u5f85\u5176\u5230\u5927\u7ea6 7 \u5206\u719f\uff0c\u4ee5\u663e\u793a\u91d1\u9ec4\u8272\u4e3a\u51c6\u3002 \u5982\u679c\u9505\u5185\u5df2\u7ecf\u6ca1\u6709\u6d41\u52a8\u7684\u6cb9\uff0c\u53ef\u4ee5\u8003\u8651\u8865\u5145 15ml \u6cb9\u3002 \u653e\u5165\u8471 3g\u3002\u59dc 10g\u3002 \u653e\u5165\u8c46\u74e3\u9171 20ml\u3002 \u653e\u5165\u751f\u62bd 10ml\u3002 \u653e\u5165\u76d0 8g\u3002 \u653e\u5165\u7cd6 10g\u3002 \u653e\u5165\u4e4b\u524d\u5904\u7406\u7684\u571f\u8c46\u3002 \u653e\u5165\u5c16\u6912\u3002 \u7ffb\u7092 1 \u5206\u949f\u3002 \u653e\u5165\u849c 10g \u52a0\u5165 200ml \u6c34\u548c 80g \u6dc0\u7c89\u3002 \u5f85\u6c34\u5f00\u540e\uff0c\u6c64\u51cf\u5c11\u4e00\u534a\u5de6\u53f3\u65f6\uff0c\u5173\u706b\u76db\u76d8\u3002 \u9644\u52a0\u5185\u5bb9 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u5730\u4e09\u9c9c"},{"location":"dishes/vegetable_dish/%E5%9C%B0%E4%B8%89%E9%B2%9C/#_1","text":"","title":"\u5730\u4e09\u9c9c\u7684\u505a\u6cd5"},{"location":"dishes/vegetable_dish/%E5%9C%B0%E4%B8%89%E9%B2%9C/#_2","text":"\u8304\u5b50 \u571f\u8c46 \u5c16\u6912 \u8471 \u59dc \u849c \u8c46\u74e3\u9171 \u751f\u62bd \u76d0 \u7cd6 \u6dc0\u7c89","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/vegetable_dish/%E5%9C%B0%E4%B8%89%E9%B2%9C/#_3","text":"\u6ce8\u610f\uff0c\u8fd9\u9053\u83dc\u4ec5\u6709\u8db3\u591f 2-4 \u4eba\u98df\u7528\u7684\u7248\u672c\u3002 \u8304\u5b50 100g \u571f\u8c46 150g \u5c16\u6912 3 - 4 \u4e2a \u4f7f\u7528\u4e0a\u8ff0\u6761\u4ef6\uff0c\u8ba1\u7b97\u51fa\u8ba1\u5212\u4f7f\u7528\u7684\u539f\u6750\u6599\u6bd4\u4f8b\u3002","title":"\u8ba1\u7b97"},{"location":"dishes/vegetable_dish/%E5%9C%B0%E4%B8%89%E9%B2%9C/#_4","text":"\u571f\u8c46\u6d17\u51c0\u3001\u53bb\u76ae\u3002\u8304\u5b50\u3001\u5c16\u6912\u6d17\u51c0\u3002 \u8471 3g \u5207 0.5cm \u5c0f\u6bb5\u3002\u849c 10g \u5241\u788e\u3002\u59dc 10g \u5207\u6cab\u3002 \u8304\u5b50\u3001\u571f\u8c46\u3001\u5c16\u6912\u5747\u5207\u6210 15g \u5de6\u53f3\u7684\u5c0f\u5757\u3002 \u70ed\u9505\uff0c\u52a0\u5165 25ml \u6cb9\u3002 \u52a0\u5165\u571f\u8c46\uff0c\u714e\u70b8\u5927\u7ea6 3 \u5206\u949f\uff0c\u5f85\u5176\u5230\u5927\u7ea6 8 \u5206\u719f\uff0c\u4ee5\u663e\u793a\u91d1\u9ec4\u8272\u4e3a\u51c6\u3002 \u635e\u51fa\u571f\u8c46\uff0c\u7559\u4e0b\u6cb9\u3002 \u52a0\u5165\u8304\u5b50\uff0c\u714e\u70b8\u5927\u7ea6 40 \u79d2\uff0c\u5f85\u5176\u5230\u5927\u7ea6 7 \u5206\u719f\uff0c\u4ee5\u663e\u793a\u91d1\u9ec4\u8272\u4e3a\u51c6\u3002 \u5982\u679c\u9505\u5185\u5df2\u7ecf\u6ca1\u6709\u6d41\u52a8\u7684\u6cb9\uff0c\u53ef\u4ee5\u8003\u8651\u8865\u5145 15ml \u6cb9\u3002 \u653e\u5165\u8471 3g\u3002\u59dc 10g\u3002 \u653e\u5165\u8c46\u74e3\u9171 20ml\u3002 \u653e\u5165\u751f\u62bd 10ml\u3002 \u653e\u5165\u76d0 8g\u3002 \u653e\u5165\u7cd6 10g\u3002 \u653e\u5165\u4e4b\u524d\u5904\u7406\u7684\u571f\u8c46\u3002 \u653e\u5165\u5c16\u6912\u3002 \u7ffb\u7092 1 \u5206\u949f\u3002 \u653e\u5165\u849c 10g \u52a0\u5165 200ml \u6c34\u548c 80g \u6dc0\u7c89\u3002 \u5f85\u6c34\u5f00\u540e\uff0c\u6c64\u51cf\u5c11\u4e00\u534a\u5de6\u53f3\u65f6\uff0c\u5173\u706b\u76db\u76d8\u3002","title":"\u64cd\u4f5c"},{"location":"dishes/vegetable_dish/%E5%9C%B0%E4%B8%89%E9%B2%9C/#_5","text":"\u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/vegetable_dish/%E6%B0%B4%E6%B2%B9%E7%84%96%E8%94%AC%E8%8F%9C/","text":"\u6c34\u6cb9\u7116\u852c\u83dc\u7684\u505a\u6cd5 \u6c34\u6cb9\u7116\u852c\u83dc\u4e2d\u6dfb\u52a0\u4e86\u6cb9\uff0c\u8fd9\u63d0\u5347\u4e86\u53e3\u611f\uff0c\u5e76\u4e14\u53ef\u63d0\u5347\u8102\u6eb6\u6027\u7ef4\u751f\u7d20\u7684\u6444\u5165\u3002\u76f8\u6bd4\u751f\u5403\u852c\u83dc\uff0c\u597d\u5904\u66f4\u591a\u3002 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u98df\u7528\u6cb9 \u76d0 \u869d\u6cb9\uff08\u53ef\u9009\uff09 \u53f6\u83dc\u7c7b\u852c\u83dc \u8ba1\u7b97 \u53f6\u83dc\u7c7b\u852c\u83dc\u542b\u6c34\u91cf\u8f83\u591a\uff0c\u5728\u51c6\u5907\u65f6\u53ef\u80fd\u770b\u8d77\u6765\u4f53\u79ef\u5f88\u5927\u3002\u5b9e\u9645\u53d7\u70ed\u540e\u4f53\u79ef\u4f1a\u8fc5\u901f\u51cf\u5c0f\u3002 \u53f6\u83dc\u7c7b\u852c\u83dc\uff1a300g ~ 500g \u64cd\u4f5c \u6d17\u51c0\u852c\u83dc \u9505\u4e2d\u52a0\u5165 150ml \u6c34\uff0c\u5e76\u70e7\u5f00\u3002\uff08\u6c34\u4e0d\u9700\u8981\u80fd\u5b8c\u5168\u6ca1\u8fc7\u852c\u83dc\uff09 \u52a0\u5165 3g \u76d0 \uff08\u53ef\u9009\uff09\u52a0\u5165 3ml \u869d\u6cb9 \u52a0\u5165 2ml \u5de6\u53f3\u98df\u7528\u6cb9 \u4e0b\u83dc\uff0c \u7ffb\u62cc\u4e00\u4e0b\uff0c\u7136\u540e\u76d6\u4e0a\u9505\u76d6\u7116 1 \u5206\u949f \u76db\u76d8 \u9644\u52a0\u5185\u5bb9 \u4e0d\u786e\u5b9a\u54b8\u6de1\u7684\u60c5\u51b5\uff0c \u53ef\u4ee5\u5148\u5c11\u653e\u76d0\uff0c \u5728\u51fa\u9505\u524d\u5c1d\u5473\uff0c \u9002\u91cf\u8c03\u6574\u52a0\u76d0 \u53ef\u4ee5\u7528\u9e21\u6c64\u3001\u9aa8\u5934\u6c64\u7b49\u66ff\u4ee3\u6c34\uff0c \u66f4\u597d\u5403 \u7116\u7684\u65f6\u95f4\u4e0d\u53ef\u8fc7\u957f \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u6c34\u6cb9\u7116\u852c\u83dc"},{"location":"dishes/vegetable_dish/%E6%B0%B4%E6%B2%B9%E7%84%96%E8%94%AC%E8%8F%9C/#_1","text":"\u6c34\u6cb9\u7116\u852c\u83dc\u4e2d\u6dfb\u52a0\u4e86\u6cb9\uff0c\u8fd9\u63d0\u5347\u4e86\u53e3\u611f\uff0c\u5e76\u4e14\u53ef\u63d0\u5347\u8102\u6eb6\u6027\u7ef4\u751f\u7d20\u7684\u6444\u5165\u3002\u76f8\u6bd4\u751f\u5403\u852c\u83dc\uff0c\u597d\u5904\u66f4\u591a\u3002","title":"\u6c34\u6cb9\u7116\u852c\u83dc\u7684\u505a\u6cd5"},{"location":"dishes/vegetable_dish/%E6%B0%B4%E6%B2%B9%E7%84%96%E8%94%AC%E8%8F%9C/#_2","text":"\u98df\u7528\u6cb9 \u76d0 \u869d\u6cb9\uff08\u53ef\u9009\uff09 \u53f6\u83dc\u7c7b\u852c\u83dc","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/vegetable_dish/%E6%B0%B4%E6%B2%B9%E7%84%96%E8%94%AC%E8%8F%9C/#_3","text":"\u53f6\u83dc\u7c7b\u852c\u83dc\u542b\u6c34\u91cf\u8f83\u591a\uff0c\u5728\u51c6\u5907\u65f6\u53ef\u80fd\u770b\u8d77\u6765\u4f53\u79ef\u5f88\u5927\u3002\u5b9e\u9645\u53d7\u70ed\u540e\u4f53\u79ef\u4f1a\u8fc5\u901f\u51cf\u5c0f\u3002 \u53f6\u83dc\u7c7b\u852c\u83dc\uff1a300g ~ 500g","title":"\u8ba1\u7b97"},{"location":"dishes/vegetable_dish/%E6%B0%B4%E6%B2%B9%E7%84%96%E8%94%AC%E8%8F%9C/#_4","text":"\u6d17\u51c0\u852c\u83dc \u9505\u4e2d\u52a0\u5165 150ml \u6c34\uff0c\u5e76\u70e7\u5f00\u3002\uff08\u6c34\u4e0d\u9700\u8981\u80fd\u5b8c\u5168\u6ca1\u8fc7\u852c\u83dc\uff09 \u52a0\u5165 3g \u76d0 \uff08\u53ef\u9009\uff09\u52a0\u5165 3ml \u869d\u6cb9 \u52a0\u5165 2ml \u5de6\u53f3\u98df\u7528\u6cb9 \u4e0b\u83dc\uff0c \u7ffb\u62cc\u4e00\u4e0b\uff0c\u7136\u540e\u76d6\u4e0a\u9505\u76d6\u7116 1 \u5206\u949f \u76db\u76d8","title":"\u64cd\u4f5c"},{"location":"dishes/vegetable_dish/%E6%B0%B4%E6%B2%B9%E7%84%96%E8%94%AC%E8%8F%9C/#_5","text":"\u4e0d\u786e\u5b9a\u54b8\u6de1\u7684\u60c5\u51b5\uff0c \u53ef\u4ee5\u5148\u5c11\u653e\u76d0\uff0c \u5728\u51fa\u9505\u524d\u5c1d\u5473\uff0c \u9002\u91cf\u8c03\u6574\u52a0\u76d0 \u53ef\u4ee5\u7528\u9e21\u6c64\u3001\u9aa8\u5934\u6c64\u7b49\u66ff\u4ee3\u6c34\uff0c \u66f4\u597d\u5403 \u7116\u7684\u65f6\u95f4\u4e0d\u53ef\u8fc7\u957f \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/vegetable_dish/%E7%82%92%E9%9D%92%E8%8F%9C/","text":"\u7092\u9752\u83dc\u7684\u505a\u6cd5 \u5236\u4f5c\u7b80\u5355\u65b9\u4fbf\u3002\u9884\u8ba1 10 \u5206\u949f\u5373\u53ef\u5b8c\u6210\u3002 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u9752\u83dc \u8ba1\u7b97 \u9752\u83dc 100g * \u4eba\u6570 \u98df\u7528\u6cb9 10-15ml\uff08\u8986\u76d6\u9505\u5e95\u5373\u53ef\uff09 \u98df\u76d0 5g * \u4eba\u6570 \u996e\u7528\u6c34 70ml * \u4eba\u6570 \u767d\u7cd6 5g * \u4eba\u6570 \u64cd\u4f5c \u9752\u83dc\u63b0\u6210\u5c0f\u74e3\uff0c\u7528\u6e05\u6c34\u6d17\u51c0\uff0c\u5907\u7528\u3002 \u70ed\u9505\uff0c\u9505\u5185\u653e\u5165 10-15ml \u98df\u7528\u6cb9\u3002\u7b49\u5f85 30 \u79d2\u8ba9\u6cb9\u6e29\u5347\u9ad8\u3002 \u5c06\u51c6\u5907\u597d\u7684\u9752\u83dc\u5012\u5165\u9505\u4e2d\uff0c\u7ffb\u7092\u81f3\u9752\u83dc\u53d8\u8f6f\uff08\u7ea6 1 \u5206\u949f\uff09\u3002 \u5012\u5165\u8ba1\u7b97\u597d\u7684\u6e05\u6c34\uff0c\u6c34\u4f4d\u5e94\u5f53\u5b8c\u5168\u6d78\u6da6\u6216\u5373\u5c06\u6ca1\u8fc7\u9752\u83dc\uff0c\u52a0\u5165\u98df\u76d0 \uff085g * \u4eba\u6570\uff09\uff0c\u7ee7\u7eed\u7ffb\u7092\u7ea6 1 \u5206\u949f\u3002 \u6700\u540e\u52a0\u5165\u767d\u7cd6\u5c0f\u706b\u52a0\u70ed 2 \u5206\u949f\uff0c\u52a0\u70ed\u65f6\u76d6\u4e0a\u9505\u76d6\u3002 \u76db\u76d8\u3002 \u9644\u52a0\u5185\u5bb9 \u867d\u7136\u770b\u8d77\u6765\u52a0\u4e86\u5f88\u591a\u76d0\uff0c\u4f46\u662f\u9752\u83dc\u6bd4\u8f83\u5bb9\u6613\u51fa\u6c34\uff0c\u76d0\u4e0d\u4f1a\u5168\u90e8\u88ab\u4f60\u5403\u8fdb\u53bb\uff0c\u6709\u4e0d\u5c11\u4f1a\u6eb6\u89e3\u5728\u6c34\u91cc\uff0c\u4e0d\u8981\u559d\u90a3\u4e2a\u5269\u4e0b\u7684\u6c64\u5c31\u884c\u3002 \u52a0\u5165\u767d\u7cd6\uff0c\u4f1a\u8ba9\u9752\u83dc\u989c\u8272\u66f4\u7eff\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u7092\u9752\u83dc"},{"location":"dishes/vegetable_dish/%E7%82%92%E9%9D%92%E8%8F%9C/#_1","text":"\u5236\u4f5c\u7b80\u5355\u65b9\u4fbf\u3002\u9884\u8ba1 10 \u5206\u949f\u5373\u53ef\u5b8c\u6210\u3002","title":"\u7092\u9752\u83dc\u7684\u505a\u6cd5"},{"location":"dishes/vegetable_dish/%E7%82%92%E9%9D%92%E8%8F%9C/#_2","text":"\u9752\u83dc","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/vegetable_dish/%E7%82%92%E9%9D%92%E8%8F%9C/#_3","text":"\u9752\u83dc 100g * \u4eba\u6570 \u98df\u7528\u6cb9 10-15ml\uff08\u8986\u76d6\u9505\u5e95\u5373\u53ef\uff09 \u98df\u76d0 5g * \u4eba\u6570 \u996e\u7528\u6c34 70ml * \u4eba\u6570 \u767d\u7cd6 5g * \u4eba\u6570","title":"\u8ba1\u7b97"},{"location":"dishes/vegetable_dish/%E7%82%92%E9%9D%92%E8%8F%9C/#_4","text":"\u9752\u83dc\u63b0\u6210\u5c0f\u74e3\uff0c\u7528\u6e05\u6c34\u6d17\u51c0\uff0c\u5907\u7528\u3002 \u70ed\u9505\uff0c\u9505\u5185\u653e\u5165 10-15ml \u98df\u7528\u6cb9\u3002\u7b49\u5f85 30 \u79d2\u8ba9\u6cb9\u6e29\u5347\u9ad8\u3002 \u5c06\u51c6\u5907\u597d\u7684\u9752\u83dc\u5012\u5165\u9505\u4e2d\uff0c\u7ffb\u7092\u81f3\u9752\u83dc\u53d8\u8f6f\uff08\u7ea6 1 \u5206\u949f\uff09\u3002 \u5012\u5165\u8ba1\u7b97\u597d\u7684\u6e05\u6c34\uff0c\u6c34\u4f4d\u5e94\u5f53\u5b8c\u5168\u6d78\u6da6\u6216\u5373\u5c06\u6ca1\u8fc7\u9752\u83dc\uff0c\u52a0\u5165\u98df\u76d0 \uff085g * \u4eba\u6570\uff09\uff0c\u7ee7\u7eed\u7ffb\u7092\u7ea6 1 \u5206\u949f\u3002 \u6700\u540e\u52a0\u5165\u767d\u7cd6\u5c0f\u706b\u52a0\u70ed 2 \u5206\u949f\uff0c\u52a0\u70ed\u65f6\u76d6\u4e0a\u9505\u76d6\u3002 \u76db\u76d8\u3002","title":"\u64cd\u4f5c"},{"location":"dishes/vegetable_dish/%E7%82%92%E9%9D%92%E8%8F%9C/#_5","text":"\u867d\u7136\u770b\u8d77\u6765\u52a0\u4e86\u5f88\u591a\u76d0\uff0c\u4f46\u662f\u9752\u83dc\u6bd4\u8f83\u5bb9\u6613\u51fa\u6c34\uff0c\u76d0\u4e0d\u4f1a\u5168\u90e8\u88ab\u4f60\u5403\u8fdb\u53bb\uff0c\u6709\u4e0d\u5c11\u4f1a\u6eb6\u89e3\u5728\u6c34\u91cc\uff0c\u4e0d\u8981\u559d\u90a3\u4e2a\u5269\u4e0b\u7684\u6c64\u5c31\u884c\u3002 \u52a0\u5165\u767d\u7cd6\uff0c\u4f1a\u8ba9\u9752\u83dc\u989c\u8272\u66f4\u7eff\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/vegetable_dish/%E7%BA%A2%E7%83%A7%E8%8C%84%E5%AD%90/","text":"\u7ea2\u70e7\u8304\u5b50\u7684\u505a\u6cd5 \u539f\u6599\u4e0e\u5de5\u5177 \u5927\u849c \u5927\u8471 \u9752\u8fa3\u6912 \u6d0b\u8471 \u897f\u7ea2\u67ff \u9752\u8304\u5b50 \u76d0 \u9171\u6cb9 \u9e21\u86cb \u9762\u7c89 \u6dc0\u7c89 \u8ba1\u7b97 \u4eba\u6570\u5927\u4e8e\u7b49\u4e8e 2 \u4eba\u65f6\u6700\u4f73 \u9752\u8304\u5b50\u7684\u6570\u91cf = \u4eba\u6570 * 0.7 \u4e2a \u9752\u8fa3\u6912 = \u4eba\u6570 * 0.5 \u4e2a \u6d0b\u8471 = \u4eba\u6570 * 0.3 \u4e2a \u897f\u7ea2\u67ff = 1 \u4e2a \u5927\u8471 = \u534a\u9897 \u5927\u849c = 3 \u74e3 \u9e21\u86cb = 1 \u4e2a \u9762\u7c89 = \u9752\u8304\u5b50\u6570\u91cf * 150 \u514b \u6dc0\u7c89 = \u9762\u7c89 / 4 \u514b \u9171\u6cb9 = \u8304\u5b50\u6570\u91cf * 7 \u514b\uff08\u5411\u4e0a\u53d6\u6574\uff09 \u64cd\u4f5c \u9752\u8304\u5b50\u3001\u9752\u8fa3\u6912\u3001\u897f\u7ea2\u67ff\u3001\u6d0b\u8471\u3001\u5927\u8471\u6d17\u51c0\u3002 \u5927\u8471\u5207 5 \u6beb\u7c73\u5bbd\u7684\u8471\u82b1\uff0c\u5927\u849c\u6252\u76ae\u5e76\u62cd\u788e\uff0c\u897f\u7ea2\u67ff\u5207 6 \u7acb\u65b9\u5398\u7c73\u5de6\u53f3\u7684\u5757\uff0c\u9752\u8fa3\u6912\u3001\u6d0b\u8471\u5207 5g \u5de6\u53f3\u7684\u5757\u3002 \u8304\u5b50\u5207\u83f1\u5f62\u5757\uff08\u5148\u5207 2 \u516c\u5206\u5de6\u53f3\u539a\u7684\u7247\uff0c\u7136\u540e\u518d\u628a\u7247\u5207\u6210 2 \u516c\u5206\u5de6\u53f3\u7684\u6761\uff0c\u6700\u540e\u659c\u5200\u5207\u5757\u513f...\uff09\u3002 \u5c06\u9762\u7c89\u5012\u5165\u76c6\u4e2d\uff0c\u4f9d\u6b21\u52a0\u5165\u5c11\u91cf\u6c34\uff0c\u6405\u62cc\u5747\u5300\uff0c\u5448\u7c98\u7a20\u7cca\u72b6\u3002 \u52a0\u5165\u6dc0\u7c89\uff0c\u52a0\u5165 30 \u514b\u6c34\uff0c\u6405\u62cc\u5747\u5300\u3002 \u5c06\u9e21\u86cb\u6253\u5230\u76c6\u4e2d\uff0c\u52a0\u5165\uff08\u9762\u7c89 / 20\uff09\u514b\u7684\u76d0\uff0c\u6405\u62cc\u5747\u5300\u3002 \u5c06\u8304\u5757\u5012\u5165\u9762\u7cca\u4e2d\uff0c\u6405\u62cc\u4f7f\u8304\u5757\u7684\u6bcf\u4e00\u9762\u90fd\u80fd\u6cbe\u4e0a\u9762\u7cca\u3002 \u5f00\u5927\u706b\uff0c\u70ed\u9505\uff0c\u52a0\u5165 500 \u6beb\u5347\u7684\u6cb9\uff0c\u5f53\u80fd\u770b\u5230\u9505\u91cc\u7684\u6cb9\u5192\u51fa\u4e00\u4e1d\u70df\u65f6\uff0c\u8c03\u81f3\u5c0f\u706b\uff0c\u5c06\u8304\u5757\u7528\u7b77\u5b50\u5939\u5165\u5230\u6cb9\u9505\uff0c\u5f85\u6240\u6709\u7684\u8304\u5757\u4e0b\u9505\u4e4b\u540e\uff0c\u8c03\u81f3\u4e2d\u706b\uff0c\u76f4\u5230\u8304\u5757\u53d8\u91d1\u9ec4\u8272\u65f6\u635e\u51fa\uff0c\u5c06\u6cb9\u5012\u51fa\u3002 \u52a0\u5165\uff08\u4eba\u6570 * 5\uff09g \u5de6\u53f3\u7684\u6cb9\uff0c\u653e\u5165\u5927\u849c\u3001\u8471\u82b1\uff0c\u7ffb\u7092 15 \u79d2\uff0c\u653e\u5165\u9752\u8fa3\u6912\u5757\u7ffb\u7092 30 \u79d2\uff0c\u653e\u5165\u897f\u7ea2\u67ff\u7ffb\u7092 30 \u79d2\u3002 \u653e\u5165\u70b8\u597d\u7684\u8304\u5757\uff0c\u52a0\u6c34\u9762\u9ad8\u5ea6\u4e3a\u9505\u5185\u98df\u6750\u7684 0.8 \u500d\u3002 \u653e\u5165\u9171\u6cb9\u548c\uff08\u4eba\u6570 * 3\uff09g \u5de6\u53f3\u7684\u76d0\u3002 \u7b49\u5f85\uff0c\u76f4\u5230\u6c64\u6c41\u5448\u7c98\u7a20\u72b6\uff08\u6c34\u4f4d\u5927\u6982\u4e3a\u5269\u4f59\u98df\u6750\u9ad8\u5ea6\u7684 0.2-0.3 \u500d\uff09\uff0c\u5f00\u76d6\uff0c\u76db\u51fa\u83dc\uff0c\u5173\u706b\u3002 \u9644\u52a0\u5185\u5bb9 \u5728\u64cd\u4f5c\u7684\u7b2c 4-6 \u6b65\u9aa4\u4e2d\u8981\u6ce8\u610f\uff1a \u4e00\u5b9a\u8981\u987a\u5e8f\u6267\u884c\uff0c\u5426\u5219\u4f1a\u6709\u707e\u96be\u6027\u9519\u8bef...... \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u7ea2\u70e7\u8304\u5b50"},{"location":"dishes/vegetable_dish/%E7%BA%A2%E7%83%A7%E8%8C%84%E5%AD%90/#_1","text":"","title":"\u7ea2\u70e7\u8304\u5b50\u7684\u505a\u6cd5"},{"location":"dishes/vegetable_dish/%E7%BA%A2%E7%83%A7%E8%8C%84%E5%AD%90/#_2","text":"\u5927\u849c \u5927\u8471 \u9752\u8fa3\u6912 \u6d0b\u8471 \u897f\u7ea2\u67ff \u9752\u8304\u5b50 \u76d0 \u9171\u6cb9 \u9e21\u86cb \u9762\u7c89 \u6dc0\u7c89","title":"\u539f\u6599\u4e0e\u5de5\u5177"},{"location":"dishes/vegetable_dish/%E7%BA%A2%E7%83%A7%E8%8C%84%E5%AD%90/#_3","text":"\u4eba\u6570\u5927\u4e8e\u7b49\u4e8e 2 \u4eba\u65f6\u6700\u4f73 \u9752\u8304\u5b50\u7684\u6570\u91cf = \u4eba\u6570 * 0.7 \u4e2a \u9752\u8fa3\u6912 = \u4eba\u6570 * 0.5 \u4e2a \u6d0b\u8471 = \u4eba\u6570 * 0.3 \u4e2a \u897f\u7ea2\u67ff = 1 \u4e2a \u5927\u8471 = \u534a\u9897 \u5927\u849c = 3 \u74e3 \u9e21\u86cb = 1 \u4e2a \u9762\u7c89 = \u9752\u8304\u5b50\u6570\u91cf * 150 \u514b \u6dc0\u7c89 = \u9762\u7c89 / 4 \u514b \u9171\u6cb9 = \u8304\u5b50\u6570\u91cf * 7 \u514b\uff08\u5411\u4e0a\u53d6\u6574\uff09","title":"\u8ba1\u7b97"},{"location":"dishes/vegetable_dish/%E7%BA%A2%E7%83%A7%E8%8C%84%E5%AD%90/#_4","text":"\u9752\u8304\u5b50\u3001\u9752\u8fa3\u6912\u3001\u897f\u7ea2\u67ff\u3001\u6d0b\u8471\u3001\u5927\u8471\u6d17\u51c0\u3002 \u5927\u8471\u5207 5 \u6beb\u7c73\u5bbd\u7684\u8471\u82b1\uff0c\u5927\u849c\u6252\u76ae\u5e76\u62cd\u788e\uff0c\u897f\u7ea2\u67ff\u5207 6 \u7acb\u65b9\u5398\u7c73\u5de6\u53f3\u7684\u5757\uff0c\u9752\u8fa3\u6912\u3001\u6d0b\u8471\u5207 5g \u5de6\u53f3\u7684\u5757\u3002 \u8304\u5b50\u5207\u83f1\u5f62\u5757\uff08\u5148\u5207 2 \u516c\u5206\u5de6\u53f3\u539a\u7684\u7247\uff0c\u7136\u540e\u518d\u628a\u7247\u5207\u6210 2 \u516c\u5206\u5de6\u53f3\u7684\u6761\uff0c\u6700\u540e\u659c\u5200\u5207\u5757\u513f...\uff09\u3002 \u5c06\u9762\u7c89\u5012\u5165\u76c6\u4e2d\uff0c\u4f9d\u6b21\u52a0\u5165\u5c11\u91cf\u6c34\uff0c\u6405\u62cc\u5747\u5300\uff0c\u5448\u7c98\u7a20\u7cca\u72b6\u3002 \u52a0\u5165\u6dc0\u7c89\uff0c\u52a0\u5165 30 \u514b\u6c34\uff0c\u6405\u62cc\u5747\u5300\u3002 \u5c06\u9e21\u86cb\u6253\u5230\u76c6\u4e2d\uff0c\u52a0\u5165\uff08\u9762\u7c89 / 20\uff09\u514b\u7684\u76d0\uff0c\u6405\u62cc\u5747\u5300\u3002 \u5c06\u8304\u5757\u5012\u5165\u9762\u7cca\u4e2d\uff0c\u6405\u62cc\u4f7f\u8304\u5757\u7684\u6bcf\u4e00\u9762\u90fd\u80fd\u6cbe\u4e0a\u9762\u7cca\u3002 \u5f00\u5927\u706b\uff0c\u70ed\u9505\uff0c\u52a0\u5165 500 \u6beb\u5347\u7684\u6cb9\uff0c\u5f53\u80fd\u770b\u5230\u9505\u91cc\u7684\u6cb9\u5192\u51fa\u4e00\u4e1d\u70df\u65f6\uff0c\u8c03\u81f3\u5c0f\u706b\uff0c\u5c06\u8304\u5757\u7528\u7b77\u5b50\u5939\u5165\u5230\u6cb9\u9505\uff0c\u5f85\u6240\u6709\u7684\u8304\u5757\u4e0b\u9505\u4e4b\u540e\uff0c\u8c03\u81f3\u4e2d\u706b\uff0c\u76f4\u5230\u8304\u5757\u53d8\u91d1\u9ec4\u8272\u65f6\u635e\u51fa\uff0c\u5c06\u6cb9\u5012\u51fa\u3002 \u52a0\u5165\uff08\u4eba\u6570 * 5\uff09g \u5de6\u53f3\u7684\u6cb9\uff0c\u653e\u5165\u5927\u849c\u3001\u8471\u82b1\uff0c\u7ffb\u7092 15 \u79d2\uff0c\u653e\u5165\u9752\u8fa3\u6912\u5757\u7ffb\u7092 30 \u79d2\uff0c\u653e\u5165\u897f\u7ea2\u67ff\u7ffb\u7092 30 \u79d2\u3002 \u653e\u5165\u70b8\u597d\u7684\u8304\u5757\uff0c\u52a0\u6c34\u9762\u9ad8\u5ea6\u4e3a\u9505\u5185\u98df\u6750\u7684 0.8 \u500d\u3002 \u653e\u5165\u9171\u6cb9\u548c\uff08\u4eba\u6570 * 3\uff09g \u5de6\u53f3\u7684\u76d0\u3002 \u7b49\u5f85\uff0c\u76f4\u5230\u6c64\u6c41\u5448\u7c98\u7a20\u72b6\uff08\u6c34\u4f4d\u5927\u6982\u4e3a\u5269\u4f59\u98df\u6750\u9ad8\u5ea6\u7684 0.2-0.3 \u500d\uff09\uff0c\u5f00\u76d6\uff0c\u76db\u51fa\u83dc\uff0c\u5173\u706b\u3002","title":"\u64cd\u4f5c"},{"location":"dishes/vegetable_dish/%E7%BA%A2%E7%83%A7%E8%8C%84%E5%AD%90/#_5","text":"\u5728\u64cd\u4f5c\u7684\u7b2c 4-6 \u6b65\u9aa4\u4e2d\u8981\u6ce8\u610f\uff1a \u4e00\u5b9a\u8981\u987a\u5e8f\u6267\u884c\uff0c\u5426\u5219\u4f1a\u6709\u707e\u96be\u6027\u9519\u8bef...... \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/vegetable_dish/%E8%8C%84%E5%AD%90%E7%82%96%E5%9C%9F%E8%B1%86/","text":"\u8304\u5b50\u7096\u571f\u8c46\u7684\u505a\u6cd5 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u8304\u5b50 \u571f\u8c46 \u8089 \u8fa3\u6912\uff08\u662f\u9752\u8fa3\u6912\uff0c\u800c \u4e0d\u662f\u8fa3\u6912\u9762\u6216\u8fa3\u6912\u6cb9 \uff09 \u9171\u6cb9 \u76d0 \u849c \u8ba1\u7b97 \u4e2a\u4eba\u8ba4\u4e3a\uff0c\u5f53\u4eba\u6570\u4e3a 1-5 \u4eba\u65f6\uff0c\u5473\u9053\u6700\u4f73\u3002 \u8304\u5b50\u7684\u6570\u91cf = \u4eba\u6570 * 1 \u4e2a \uff08\u6bcf\u4e2a\u8304\u5b50\u7ea6 150g\uff09 \u571f\u8c46\u6570\u91cf = \u4eba\u6570 * 1 \u4e2a\uff08\u6bcf\u4e2a\u571f\u8c46\u7ea6 150g\uff09 \u8089\u91cf = \u4eba\u6570 * 180 \u514b \u9171\u6cb9\u91cf = \u4eba\u6570 * 15 \u6beb\u5347 \u76d0\u91cf = \u4eba\u6570 * 5 \u514b \u8fa3\u6912\u91cf = 50 \u514b\uff08\u8c03\u5473\uff0c\u6240\u4ee5\u65e0\u8bba\u591a\u5c11\u4eba\u90fd\u653e\u8fd9\u4e9b\u3002\uff09 \u849c\u91cf = 3 \u74e3\uff08\u8c03\u5473\uff0c\u6240\u4ee5\u65e0\u8bba\u591a\u5c11\u4eba\u90fd\u653e\u8fd9\u4e9b\u3002\u6ce8\u610f\u662f\u91cc\u9762\u7684\u5c0f\u74e3 3 \u74e3\uff0c\u800c \u4e0d\u662f3\u6574\u5934 \uff09 \u4f7f\u7528\u4e0a\u8ff0\u6761\u4ef6\uff0c\u8ba1\u7b97\u51fa\u8ba1\u5212\u4f7f\u7528\u7684\u539f\u6750\u6599\u6bd4\u4f8b\u3002 \u64cd\u4f5c \u5c06\u8304\u5b50\u3001\u571f\u8c46\u3001\u8fa3\u6912\u6d17\u51c0\uff0c\u849c\u6252\u76ae\u5e76\u62cd\u788e\u3002 \u5c06\u8304\u5b50\u3001\u571f\u8c46\u5207\u6210\u7ea6 6 \u7acb\u65b9\u5398\u7c73\u5de6\u53f3\u7684\u5757\uff0c\u8fa3\u6912\u5207\u6210 5 \u514b\u5de6\u53f3\u7684\u5c0f\u5757\uff0c\u8089\u5207\u6210 3 \u5398\u7c73\u5de6\u53f3\u7684\u4e1d\u3002 \u5f00\u706b\uff0c\u70ed\u9505\uff0c\u52a0\u5165\u4eba\u6570 * 13 \u6beb\u5347\u5de6\u53f3\u7684\u6cb9\u3002 \u5f53\u80fd\u770b\u5230\u9505\u91cc\u7684\u6cb9\u5192\u51fa\u4e00\u4e1d\u70df\u65f6\uff0c\u653e\u5165\u8fa3\u6912\u3002 \u7178\u51fa\u8fa3\u6912\u9999\u6c14\u540e\uff0c\u7acb\u523b\u653e\u5165\u8089\uff0c\u7528\u94f2\u5b50\u7ffb\u7092 30 \u79d2\u3002 \u653e\u5165\u571f\u8c46\uff0c\u7ffb\u7092 30 \u79d2\u3002 \u653e\u5165\u8304\u5b50\uff0c\u7ffb\u7092 30 \u79d2\u3002 \u653e\u5165\u9171\u6cb9\u548c\u76d0\uff0c\u7ee7\u7eed\u7ffb\u7092 5 \u5206\u949f\u3002 \u52a0\u5165\u6c34\uff0c\u6c34\u9762\u9ad8\u5ea6\u4e3a\u9505\u5185\u98df\u6750\u9ad8\u5ea6\u7684 0.9 \u500d\uff0c\u5e76\u76d6\u4e0a\u9505\u76d6\u3002 \u7b49\u5f85\uff0c\u76f4\u5230\u9505\u5185\u6c34\u7684\u9ad8\u5ea6\u5269\u4f59\u98df\u6750\u9ad8\u5ea6\u7684 0.1 \u500d\u65f6\uff0c\u5f00\u76d6\uff0c\u653e\u5165\u849c\uff0c\u6405\u62cc\u5747\u5300\uff0c\u5173\u706b\u3002 \u9644\u52a0\u5185\u5bb9 \u5728\u64cd\u4f5c\u7684\u7b2c 5-7 \u6b65\u9aa4\u4e2d\u8981\u6ce8\u610f\uff1a\u5728\u6b64\u8fc7\u7a0b\u4e2d\u6ce8\u610f\u9505\u5e95\u5982\u679c\u6ca1\u6709\u6db2\u4f53\uff08\u6cb9\u6216\u6c34\uff09\uff0c\u5219\u52a0 5 \u6beb\u5347\u5de6\u53f3\u7684\u6c34\u518d\u7ee7\u7eed\u7ffb\u7092\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u8304\u5b50\u7096\u571f\u8c46"},{"location":"dishes/vegetable_dish/%E8%8C%84%E5%AD%90%E7%82%96%E5%9C%9F%E8%B1%86/#_1","text":"","title":"\u8304\u5b50\u7096\u571f\u8c46\u7684\u505a\u6cd5"},{"location":"dishes/vegetable_dish/%E8%8C%84%E5%AD%90%E7%82%96%E5%9C%9F%E8%B1%86/#_2","text":"\u8304\u5b50 \u571f\u8c46 \u8089 \u8fa3\u6912\uff08\u662f\u9752\u8fa3\u6912\uff0c\u800c \u4e0d\u662f\u8fa3\u6912\u9762\u6216\u8fa3\u6912\u6cb9 \uff09 \u9171\u6cb9 \u76d0 \u849c","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/vegetable_dish/%E8%8C%84%E5%AD%90%E7%82%96%E5%9C%9F%E8%B1%86/#_3","text":"\u4e2a\u4eba\u8ba4\u4e3a\uff0c\u5f53\u4eba\u6570\u4e3a 1-5 \u4eba\u65f6\uff0c\u5473\u9053\u6700\u4f73\u3002 \u8304\u5b50\u7684\u6570\u91cf = \u4eba\u6570 * 1 \u4e2a \uff08\u6bcf\u4e2a\u8304\u5b50\u7ea6 150g\uff09 \u571f\u8c46\u6570\u91cf = \u4eba\u6570 * 1 \u4e2a\uff08\u6bcf\u4e2a\u571f\u8c46\u7ea6 150g\uff09 \u8089\u91cf = \u4eba\u6570 * 180 \u514b \u9171\u6cb9\u91cf = \u4eba\u6570 * 15 \u6beb\u5347 \u76d0\u91cf = \u4eba\u6570 * 5 \u514b \u8fa3\u6912\u91cf = 50 \u514b\uff08\u8c03\u5473\uff0c\u6240\u4ee5\u65e0\u8bba\u591a\u5c11\u4eba\u90fd\u653e\u8fd9\u4e9b\u3002\uff09 \u849c\u91cf = 3 \u74e3\uff08\u8c03\u5473\uff0c\u6240\u4ee5\u65e0\u8bba\u591a\u5c11\u4eba\u90fd\u653e\u8fd9\u4e9b\u3002\u6ce8\u610f\u662f\u91cc\u9762\u7684\u5c0f\u74e3 3 \u74e3\uff0c\u800c \u4e0d\u662f3\u6574\u5934 \uff09 \u4f7f\u7528\u4e0a\u8ff0\u6761\u4ef6\uff0c\u8ba1\u7b97\u51fa\u8ba1\u5212\u4f7f\u7528\u7684\u539f\u6750\u6599\u6bd4\u4f8b\u3002","title":"\u8ba1\u7b97"},{"location":"dishes/vegetable_dish/%E8%8C%84%E5%AD%90%E7%82%96%E5%9C%9F%E8%B1%86/#_4","text":"\u5c06\u8304\u5b50\u3001\u571f\u8c46\u3001\u8fa3\u6912\u6d17\u51c0\uff0c\u849c\u6252\u76ae\u5e76\u62cd\u788e\u3002 \u5c06\u8304\u5b50\u3001\u571f\u8c46\u5207\u6210\u7ea6 6 \u7acb\u65b9\u5398\u7c73\u5de6\u53f3\u7684\u5757\uff0c\u8fa3\u6912\u5207\u6210 5 \u514b\u5de6\u53f3\u7684\u5c0f\u5757\uff0c\u8089\u5207\u6210 3 \u5398\u7c73\u5de6\u53f3\u7684\u4e1d\u3002 \u5f00\u706b\uff0c\u70ed\u9505\uff0c\u52a0\u5165\u4eba\u6570 * 13 \u6beb\u5347\u5de6\u53f3\u7684\u6cb9\u3002 \u5f53\u80fd\u770b\u5230\u9505\u91cc\u7684\u6cb9\u5192\u51fa\u4e00\u4e1d\u70df\u65f6\uff0c\u653e\u5165\u8fa3\u6912\u3002 \u7178\u51fa\u8fa3\u6912\u9999\u6c14\u540e\uff0c\u7acb\u523b\u653e\u5165\u8089\uff0c\u7528\u94f2\u5b50\u7ffb\u7092 30 \u79d2\u3002 \u653e\u5165\u571f\u8c46\uff0c\u7ffb\u7092 30 \u79d2\u3002 \u653e\u5165\u8304\u5b50\uff0c\u7ffb\u7092 30 \u79d2\u3002 \u653e\u5165\u9171\u6cb9\u548c\u76d0\uff0c\u7ee7\u7eed\u7ffb\u7092 5 \u5206\u949f\u3002 \u52a0\u5165\u6c34\uff0c\u6c34\u9762\u9ad8\u5ea6\u4e3a\u9505\u5185\u98df\u6750\u9ad8\u5ea6\u7684 0.9 \u500d\uff0c\u5e76\u76d6\u4e0a\u9505\u76d6\u3002 \u7b49\u5f85\uff0c\u76f4\u5230\u9505\u5185\u6c34\u7684\u9ad8\u5ea6\u5269\u4f59\u98df\u6750\u9ad8\u5ea6\u7684 0.1 \u500d\u65f6\uff0c\u5f00\u76d6\uff0c\u653e\u5165\u849c\uff0c\u6405\u62cc\u5747\u5300\uff0c\u5173\u706b\u3002","title":"\u64cd\u4f5c"},{"location":"dishes/vegetable_dish/%E8%8C%84%E5%AD%90%E7%82%96%E5%9C%9F%E8%B1%86/#_5","text":"\u5728\u64cd\u4f5c\u7684\u7b2c 5-7 \u6b65\u9aa4\u4e2d\u8981\u6ce8\u610f\uff1a\u5728\u6b64\u8fc7\u7a0b\u4e2d\u6ce8\u610f\u9505\u5e95\u5982\u679c\u6ca1\u6709\u6db2\u4f53\uff08\u6cb9\u6216\u6c34\uff09\uff0c\u5219\u52a0 5 \u6beb\u5347\u5de6\u53f3\u7684\u6c34\u518d\u7ee7\u7eed\u7ffb\u7092\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/vegetable_dish/%E8%91%B1%E7%85%8E%E8%B1%86%E8%85%90/","text":"\u8471\u714e\u8c46\u8150\u7684\u505a\u6cd5 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u767d\u8c46\u8150 \u8471 \u9752\u8fa3\u6912 \u76d0 \u9e21\u7cbe \u5e73\u5e95\u9505 \u8ba1\u7b97 \u6ce8\u610f\uff0c\u8fd9\u9053\u83dc\u4e0d\u63d0\u4f9b\u4e00\u4eba\u7248\u672c\u3002\u5982\u679c\u786e\u5b9a\u53ea\u6709\u4e00\u4e2a\u4eba\u98df\u7528\uff0c\u8bf7\u5728\u4eba\u6570\u4e2d\u4ee3\u5165 2\u3002 \u767d\u8c46\u8150\u7684\u6570\u91cf = \u4eba\u6570 * 0.8 \u5411\u4e0a\u53d6\u6574\u3002 \u8fa3\u6912\u7684\u6570\u91cf = 1.5 \u53ea/\u4e09\u4eba\u3002 \u8471\u7684\u6570\u91cf = 2 \u6839/\u4e09\u4eba\u3002 \u76d0\u91cf = \u4eba\u6570 * 3g\u3002 \u9e21\u7cbe\u91cf = \u4eba\u6570 * 1.5g\u3002 \u4f7f\u7528\u4e0a\u8ff0\u6761\u4ef6\uff0c\u8ba1\u7b97\u51fa\u8ba1\u5212\u4f7f\u7528\u7684\u539f\u6750\u6599\u6bd4\u4f8b\uff0c\u4f9d\u53e3\u5473\u8c03\u6574\u3002 \u64cd\u4f5c \u8c46\u8150\u6d17\u51c0\u3002\u5207\u7ea6 5 mm \u539a\u5ea6\uff0c\u7f6e\u4e8e\u789f\u4e2d\u3002 \u8471\u6d17\u51c0\uff0c\u9664\u53bb\u6839\u90e8\uff0c\u5207\u6210\u8471\u82b1\uff0c\u5907\u7528\u3002 \u8fa3\u6912\u6d17\u51c0\uff0c\u5207\u5f00\uff0c\u53bb\u7c7d\uff0c\u5207\u6210 1cm * 1cm \u72b6\uff0c\u5907\u7528\u3001 \u70ed\u9505\uff0c\u52a0\u5165\u4eba\u6570 * 9ml \u6cb9\u3002 \u6cb9\u5165\u9505\u540e\uff0c\u4f7f\u5176\u5747\u5300\u5e03\u4e8e\u9505\u5e95\uff0c\u5747\u5300\u653e\u5165\u8c46\u8150\uff0c\u5c0f\u706b\u714e\u81f3\u91d1\u9ec4\u7ffb\u9762\u3002 \u5f85\u4e24\u9762\u91d1\u9ec4\uff0c\u76db\u5165\u789f\u4e2d\u5907\u7528\u3002 \u8865\u6cb9\u81f3\u8986\u76d6\u9505\u5e95\uff0c\u5012\u5165\u8fa3\u6912\u5927\u706b\u7ffb\u7092\uff0c\u5e76\u94f2\u78be 3 \u5206\u949f\u3002 \u5012\u5165\u8c46\u8150\uff0c\u7ffb\u7092\uff0c\u52a0\u5165\u76d0\u4e0e\u9e21\u7cbe\uff0c\u4e2d\u706b\u7ffb\u7092 1 \u5206\u949f\u540e\u5012\u5165 10 ML \u6c34\uff0c\u5927\u706b\u6536\u6c41\u3002 \u51fa\u9505\u524d\u6492\u4e0a\u4e4b\u524d\u8ba1\u7b97\u597d\u7684\u8471\u82b1\uff0c\u8d77\u9505\u76db\u76d8\u3002 \u9644\u52a0\u5185\u5bb9 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u8471\u714e\u8c46\u8150"},{"location":"dishes/vegetable_dish/%E8%91%B1%E7%85%8E%E8%B1%86%E8%85%90/#_1","text":"","title":"\u8471\u714e\u8c46\u8150\u7684\u505a\u6cd5"},{"location":"dishes/vegetable_dish/%E8%91%B1%E7%85%8E%E8%B1%86%E8%85%90/#_2","text":"\u767d\u8c46\u8150 \u8471 \u9752\u8fa3\u6912 \u76d0 \u9e21\u7cbe \u5e73\u5e95\u9505","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/vegetable_dish/%E8%91%B1%E7%85%8E%E8%B1%86%E8%85%90/#_3","text":"\u6ce8\u610f\uff0c\u8fd9\u9053\u83dc\u4e0d\u63d0\u4f9b\u4e00\u4eba\u7248\u672c\u3002\u5982\u679c\u786e\u5b9a\u53ea\u6709\u4e00\u4e2a\u4eba\u98df\u7528\uff0c\u8bf7\u5728\u4eba\u6570\u4e2d\u4ee3\u5165 2\u3002 \u767d\u8c46\u8150\u7684\u6570\u91cf = \u4eba\u6570 * 0.8 \u5411\u4e0a\u53d6\u6574\u3002 \u8fa3\u6912\u7684\u6570\u91cf = 1.5 \u53ea/\u4e09\u4eba\u3002 \u8471\u7684\u6570\u91cf = 2 \u6839/\u4e09\u4eba\u3002 \u76d0\u91cf = \u4eba\u6570 * 3g\u3002 \u9e21\u7cbe\u91cf = \u4eba\u6570 * 1.5g\u3002 \u4f7f\u7528\u4e0a\u8ff0\u6761\u4ef6\uff0c\u8ba1\u7b97\u51fa\u8ba1\u5212\u4f7f\u7528\u7684\u539f\u6750\u6599\u6bd4\u4f8b\uff0c\u4f9d\u53e3\u5473\u8c03\u6574\u3002","title":"\u8ba1\u7b97"},{"location":"dishes/vegetable_dish/%E8%91%B1%E7%85%8E%E8%B1%86%E8%85%90/#_4","text":"\u8c46\u8150\u6d17\u51c0\u3002\u5207\u7ea6 5 mm \u539a\u5ea6\uff0c\u7f6e\u4e8e\u789f\u4e2d\u3002 \u8471\u6d17\u51c0\uff0c\u9664\u53bb\u6839\u90e8\uff0c\u5207\u6210\u8471\u82b1\uff0c\u5907\u7528\u3002 \u8fa3\u6912\u6d17\u51c0\uff0c\u5207\u5f00\uff0c\u53bb\u7c7d\uff0c\u5207\u6210 1cm * 1cm \u72b6\uff0c\u5907\u7528\u3001 \u70ed\u9505\uff0c\u52a0\u5165\u4eba\u6570 * 9ml \u6cb9\u3002 \u6cb9\u5165\u9505\u540e\uff0c\u4f7f\u5176\u5747\u5300\u5e03\u4e8e\u9505\u5e95\uff0c\u5747\u5300\u653e\u5165\u8c46\u8150\uff0c\u5c0f\u706b\u714e\u81f3\u91d1\u9ec4\u7ffb\u9762\u3002 \u5f85\u4e24\u9762\u91d1\u9ec4\uff0c\u76db\u5165\u789f\u4e2d\u5907\u7528\u3002 \u8865\u6cb9\u81f3\u8986\u76d6\u9505\u5e95\uff0c\u5012\u5165\u8fa3\u6912\u5927\u706b\u7ffb\u7092\uff0c\u5e76\u94f2\u78be 3 \u5206\u949f\u3002 \u5012\u5165\u8c46\u8150\uff0c\u7ffb\u7092\uff0c\u52a0\u5165\u76d0\u4e0e\u9e21\u7cbe\uff0c\u4e2d\u706b\u7ffb\u7092 1 \u5206\u949f\u540e\u5012\u5165 10 ML \u6c34\uff0c\u5927\u706b\u6536\u6c41\u3002 \u51fa\u9505\u524d\u6492\u4e0a\u4e4b\u524d\u8ba1\u7b97\u597d\u7684\u8471\u82b1\uff0c\u8d77\u9505\u76db\u76d8\u3002","title":"\u64cd\u4f5c"},{"location":"dishes/vegetable_dish/%E8%91%B1%E7%85%8E%E8%B1%86%E8%85%90/#_5","text":"\u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/vegetable_dish/%E8%92%B2%E7%83%A7%E8%8C%84%E5%AD%90/","text":"\u84b2\u70e7\u8304\u5b50\ud83c\udf46\u7684\u505a\u6cd5 \u4f17\u6240\u7686\u77e5\uff0c\u8304\u5b50\ud83c\udf46\u548c\u571f\u8c46\ud83e\udd54\u662f\u4e24\u79cd\u8364\u83dc\u3002\u8fd9\u4e00\u9053\u84b2\u70e7\u8304\u5b50\uff0c\u4ece\u5916\u89c2\u4e0a\u4e4b\u4e8e\u9cd7\u9c7c\u6b63\u5982 \u571f\u8c46\u7096.* \u4e2d\u7684\u751f\u59dc\u4e4b\u4e8e\u571f\u8c46\u3002 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u6839\u636e\u9505\u7684\u7c7b\u578b\u9002\u91cf\u7684\u6cb9\uff08\u4e0d\u7c98\u9505:\u6cb9\u6c47\u805a\u6210\u6ef4\u540e\u8981\u6563\u5e03\u5728\u8304\u5b50\u7684\u9762\u79ef || \u94c1\u9505:\u644a\u5f00\u540e\u6cb9\u53ef\u4ee5\u521a\u597d\u8986\u76d6\u9505\u5e95\uff09 1 \u4e2a\u957f\u7684\u4e0a\u5c0f\u4e0b\u5927\u7684\u8304\u5b50\uff08\u6ce8\u610f\u4e0d\u8981\u4f7f\u7528\u6d59\u8304\u548c\u5706\u8304\uff09 1 \u4efd\u84b2\u70e7\u6c41 20 ml \u8702\u871c 15 ml \u767d\u7cd6 40 ml \u751f\u62bd 10 ml \u8001\u62bd 20 ml \u6599\u9152 100 ml \u6c34 \u64cd\u4f5c \u8304\u5b50\u524a\u76ae\u3001\u6a2a\u7740\u5207\u6210\u4e24\u6bb5 \u84b8 5 min \u7eb5\u5411\u5207\u5f00\uff0c\u4e0d\u8981\u5207\u65ad\uff0c\u5728\u4e24\u8fb9\u5207\u9762\u5404\u5212 2~3 \u5200\u81f3\u53ef\u4ee5\u644a\u5e73 \u714e\u81f3\u4e24\u9762\u91d1\u9ec4 \u5f80\u8304\u5b50\u4e0a\u6d47\u84b2\u70e7\u6c41\u81f3\u6ca1\u8fc7 1/2 \u8304\u5b50\u9ad8\u5ea6 \u714e\u81f3\u80cc\u9762\u4e0a\u8272\uff0c\u7ffb\u9762 \u540c\u65f6\u6536\u6c41\uff0c\u82e5\u65e0\u6cd5\u6536\u6c41\u53ef\u4ee5\u52a0\u5165\u6c34\u6dc0\u7c89\uff08\u751f\u7c89\u548c\u6c34\u7684\u6bd4\u4f8b\u5728 1:4 \u5230 1:10 \u6839\u636e\u6536\u6c41\u60c5\u51b5\u800c\u5b9a\uff09 \u628a\u5269\u4e0b\u7684\u84b2\u70e7\u6c41\u6d47\u5728\u8304\u5b50\u4e0a \u51fa\u9505\uff0c\u4e00\u4efd\u8304\u5b50\u70e7\u84b2\u70e7\u6c41\u5c31\u70e7\u597d\u4e86 \u9644\u52a0\u5185\u5bb9 \u8fd9\u4e2a\u84b2\u713c\u304d\u5176\u5b9e\u5f88\u4e2d\u56fd\uff0c\u65e5\u5f0f\u7684\u84b2\u70e7\u5176\u5b9e\u662f\u70e4\u7684\u3002 \u7075\u9b42\u5176\u5b9e\u5728\u4e8e\u84b2\u70e7\u6c41\uff1f\u4e5f\u53ef\u4ee5\u4e70\u73b0\u6210\u7684\u84b2\u70e7\u6c41\u3002 \u5982\u679c\u89c9\u5f97\u817b\u53ef\u4ee5\u5728\u88c5\u76d8\u540e\u6492\u70b9\u5207\u6210 2~5 mm \u7684\u5c0f\u8471\uff0c\u989c\u8272\u642d\u914d\u4e0a\u4e5f\u80fd\u4e0d\u90a3\u4e48\u5355\u8c03\u3002 \u7092\u8304\u5b50\uff08\u9c7c\u9999\u8304\u5b50\u3001\u9171\u7206\u8304\u5b50\uff09\u5899\u88c2\u63a8\u8350\u6d59\u8304\uff0c\u7ec6\u957f\u6240\u4ee5\u5207\u6210\u6eda\u5200\u5757\u521a\u521a\u597d\uff0c\u76ae\u5f88\u5ae9\u4e0d\u50cf\u8fd9\u91cc\u9700\u8981\u53bb\u76ae\uff0c\u8304\u5b50\u7684\u5473\u9053\u9002\u4e2d\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u84b2\u70e7\u8304\u5b50"},{"location":"dishes/vegetable_dish/%E8%92%B2%E7%83%A7%E8%8C%84%E5%AD%90/#_1","text":"\u4f17\u6240\u7686\u77e5\uff0c\u8304\u5b50\ud83c\udf46\u548c\u571f\u8c46\ud83e\udd54\u662f\u4e24\u79cd\u8364\u83dc\u3002\u8fd9\u4e00\u9053\u84b2\u70e7\u8304\u5b50\uff0c\u4ece\u5916\u89c2\u4e0a\u4e4b\u4e8e\u9cd7\u9c7c\u6b63\u5982 \u571f\u8c46\u7096.* \u4e2d\u7684\u751f\u59dc\u4e4b\u4e8e\u571f\u8c46\u3002","title":"\u84b2\u70e7\u8304\u5b50\ud83c\udf46\u7684\u505a\u6cd5"},{"location":"dishes/vegetable_dish/%E8%92%B2%E7%83%A7%E8%8C%84%E5%AD%90/#_2","text":"\u6839\u636e\u9505\u7684\u7c7b\u578b\u9002\u91cf\u7684\u6cb9\uff08\u4e0d\u7c98\u9505:\u6cb9\u6c47\u805a\u6210\u6ef4\u540e\u8981\u6563\u5e03\u5728\u8304\u5b50\u7684\u9762\u79ef || \u94c1\u9505:\u644a\u5f00\u540e\u6cb9\u53ef\u4ee5\u521a\u597d\u8986\u76d6\u9505\u5e95\uff09 1 \u4e2a\u957f\u7684\u4e0a\u5c0f\u4e0b\u5927\u7684\u8304\u5b50\uff08\u6ce8\u610f\u4e0d\u8981\u4f7f\u7528\u6d59\u8304\u548c\u5706\u8304\uff09 1 \u4efd\u84b2\u70e7\u6c41 20 ml \u8702\u871c 15 ml \u767d\u7cd6 40 ml \u751f\u62bd 10 ml \u8001\u62bd 20 ml \u6599\u9152 100 ml \u6c34","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/vegetable_dish/%E8%92%B2%E7%83%A7%E8%8C%84%E5%AD%90/#_3","text":"\u8304\u5b50\u524a\u76ae\u3001\u6a2a\u7740\u5207\u6210\u4e24\u6bb5 \u84b8 5 min \u7eb5\u5411\u5207\u5f00\uff0c\u4e0d\u8981\u5207\u65ad\uff0c\u5728\u4e24\u8fb9\u5207\u9762\u5404\u5212 2~3 \u5200\u81f3\u53ef\u4ee5\u644a\u5e73 \u714e\u81f3\u4e24\u9762\u91d1\u9ec4 \u5f80\u8304\u5b50\u4e0a\u6d47\u84b2\u70e7\u6c41\u81f3\u6ca1\u8fc7 1/2 \u8304\u5b50\u9ad8\u5ea6 \u714e\u81f3\u80cc\u9762\u4e0a\u8272\uff0c\u7ffb\u9762 \u540c\u65f6\u6536\u6c41\uff0c\u82e5\u65e0\u6cd5\u6536\u6c41\u53ef\u4ee5\u52a0\u5165\u6c34\u6dc0\u7c89\uff08\u751f\u7c89\u548c\u6c34\u7684\u6bd4\u4f8b\u5728 1:4 \u5230 1:10 \u6839\u636e\u6536\u6c41\u60c5\u51b5\u800c\u5b9a\uff09 \u628a\u5269\u4e0b\u7684\u84b2\u70e7\u6c41\u6d47\u5728\u8304\u5b50\u4e0a \u51fa\u9505\uff0c\u4e00\u4efd\u8304\u5b50\u70e7\u84b2\u70e7\u6c41\u5c31\u70e7\u597d\u4e86","title":"\u64cd\u4f5c"},{"location":"dishes/vegetable_dish/%E8%92%B2%E7%83%A7%E8%8C%84%E5%AD%90/#_4","text":"\u8fd9\u4e2a\u84b2\u713c\u304d\u5176\u5b9e\u5f88\u4e2d\u56fd\uff0c\u65e5\u5f0f\u7684\u84b2\u70e7\u5176\u5b9e\u662f\u70e4\u7684\u3002 \u7075\u9b42\u5176\u5b9e\u5728\u4e8e\u84b2\u70e7\u6c41\uff1f\u4e5f\u53ef\u4ee5\u4e70\u73b0\u6210\u7684\u84b2\u70e7\u6c41\u3002 \u5982\u679c\u89c9\u5f97\u817b\u53ef\u4ee5\u5728\u88c5\u76d8\u540e\u6492\u70b9\u5207\u6210 2~5 mm \u7684\u5c0f\u8471\uff0c\u989c\u8272\u642d\u914d\u4e0a\u4e5f\u80fd\u4e0d\u90a3\u4e48\u5355\u8c03\u3002 \u7092\u8304\u5b50\uff08\u9c7c\u9999\u8304\u5b50\u3001\u9171\u7206\u8304\u5b50\uff09\u5899\u88c2\u63a8\u8350\u6d59\u8304\uff0c\u7ec6\u957f\u6240\u4ee5\u5207\u6210\u6eda\u5200\u5757\u521a\u521a\u597d\uff0c\u76ae\u5f88\u5ae9\u4e0d\u50cf\u8fd9\u91cc\u9700\u8981\u53bb\u76ae\uff0c\u8304\u5b50\u7684\u5473\u9053\u9002\u4e2d\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/vegetable_dish/%E8%A5%BF%E7%BA%A2%E6%9F%BF%E7%82%92%E9%B8%A1%E8%9B%8B/","text":"\u897f\u7ea2\u67ff\u9e21\u86cb\u7684\u505a\u6cd5 \u897f\u7ea2\u67ff\u7092\u86cb\u662f\u4e2d\u56fd\u5bb6\u5e38\u51e0\u4e4e\u6700\u5e38\u89c1\u7684\u4e00\u9053\u83dc\u80b4\u3002\u5b83\u7684\u539f\u6750\u6599\u6613\u4e8e\u641c\u96c6\uff0c\u5236\u4f5c\u6b65\u9aa4\u4e5f\u8f83\u4e3a\u7b80\u5355\uff0c\u6240\u4ee5\u975e\u5e38\u9002\u5408\u65b0\u53a8\u5e08\u4e0a\u624b\uff0c\u662f\u5f88\u591a\u4eba\u5b66\u4e60\u505a\u83dc\u65f6\u505a\u7684\u7b2c\u4e00\u9053\u83dc\u3002 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u897f\u7ea2\u67ff \u9e21\u86cb \u98df\u7528\u6cb9 \u76d0 \u53ef\u9009\uff1a\u7cd6 \u53ef\u9009\uff1a\u8471\u82b1 \u8ba1\u7b97 \u6bcf\u4efd\uff1a \u897f\u7ea2\u67ff = 1 \u4e2a\uff08\u7ea6 180g\uff09 * \u4eba\u6570 \u9e21\u86cb = 1.5 \u4e2a * \u4eba\u6570\uff0c\u5411\u4e0a\u53d6\u6574 \u98df\u7528\u6cb9 = 4ml * \u9e21\u86cb/\u4e2a \u76d0 = 1.5-2g * \u4eba\u6570 \u7cd6 = 0-2g * \u4eba\u6570 \u8471\u82b1 = 0-10g * \u4eba\u6570 \u64cd\u4f5c \u897f\u7ea2\u67ff\u6d17\u51c0 \u53ef\u9009\uff1a\u53bb\u6389\u897f\u7ea2\u67ff\u7684\u5916\u8868\u76ae \u5f00\u6c34\u70eb\u8868\u76ae\uff0c\u7136\u540e\u5c06\u897f\u7ea2\u67ff\u653e\u5165\u51b7\u6c34\uff0c\u5265\u53bb\u5916\u76ae \u897f\u7ea2\u67ff\u53bb\u8482\uff0c\u5207\u6210\u8fb9\u957f\u4e0d\u8d85\u8fc7 4cm \u7684\u5c0f\u5757\uff0c\u5373\u4e3a \u897f\u7ea2\u67ff\u5757 \u5c06\u9e21\u86cb\u6253\u5165\u7897\u4e2d\uff0c\u52a0\u5165 1g * \u4eba\u6570 \u7684\u76d0\uff0c\u6405\u5300\uff0c\u5373\u4e3a \u9e21\u86cb\u6db2 \u70ed\u9505\uff0c\u52a0\u5165\u98df\u7528\u6cb9 \u6cb9\u70ed\u540e\uff0c\u5012\u5165 \u9e21\u86cb\u6db2 \u3002\u7ffb\u7092\u81f3\u9e21\u86cb\u7ed3\u4e3a\u56fa\u4f53\u4e14\u989c\u8272\u5fae\u5fae\u53d1\u9ec4\uff0c\u5373\u4e3a \u534a\u719f\u9e21\u86cb \u6839\u636e\u53e3\u611f\u504f\u597d\uff0c\u53ef\u4ee5\u8c03\u6574\u7ffb\u7092\u65f6\u95f4 \u5173\u706b\u3002\u5c06 \u534a\u719f\u9e21\u86cb \u76db\u76d8\uff0c\u91cd\u65b0\u5f00\u706b \u6ce8\u610f\uff1a\u4e0d\u8981\u6d17\u9505 \u52a0\u5165 \u897f\u7ea2\u67ff\u5757 \uff0c\u9505\u94f2\u62cd\u6253\u5e76\u7ffb\u7092 20 \u79d2\uff0c\u6216\u81f3\u897f\u7ea2\u67ff\u8f6f\u70c2 \u5411\u9505\u4e2d\u52a0\u5165 \u534a\u719f\u9e21\u86cb \uff0c\u7ffb\u7092\u5747\u5300 \u52a0\u5165\u5269\u4f59\u7684\u76d0\u3001\u7cd6\u3001\u8471\u82b1\uff0c\u7ffb\u7092\u5747\u5300 \u5173\u706b\uff0c\u76db\u76d8 \u9644\u52a0\u5185\u5bb9 \u8fd9\u9053\u83dc\u6839\u636e\u4e0d\u540c\u7684\u53e3\u5473\u504f\u597d\uff0c\u5b58\u5728\u8bf8\u591a\u7248\u672c\uff0c\u5305\u62ec\u4e14\u4e0d\u9650\u4e8e\uff1a \u4e0d\u52a0\u7cd6 \u4e0d\u52a0\u8471\u82b1 \u8df3\u8fc7 7~9 \u6b65\uff0c\u6539\u4e3a\uff1a \u52a0\u5165 \u897f\u7ea2\u67ff\u5757 \uff0c\u4e0e\u9e21\u86cb\u4e00\u8d77\u7ffb\u7092 20 \u79d2\uff0c\u6216\u81f3\u897f\u7ea2\u67ff\u8f6f\u70c2 \u7b2c 4 \u6b65\u8ffd\u52a0\uff1a \u5411\u9e21\u86cb\u4e2d\u52a0\u5165\u4e24\u6ef4\u918b\uff0c\u53bb\u9664\u8165\u5473\uff0c\u4ee4\u9e21\u86cb\u66f4\u84ec\u677e \u7b2c 9 \u6b65\u8ffd\u52a0\uff1a \u52a0\u5165\u756a\u8304\u9171\u6216\u6e05\u6c34\uff0c\u589e\u52a0\u6c64\u6c41 \u7b2c 10 \u6b65\u4fee\u6539\uff1a \u201c\u52a0\u5165\u5269\u4f59\u7684\u76d0\u201d \u6539\u4e3a \u201c\u52a0\u5165\u4e24\u6ef4\u751f\u62bd\u201d \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u897f\u7ea2\u67ff\u7092\u9e21\u86cb"},{"location":"dishes/vegetable_dish/%E8%A5%BF%E7%BA%A2%E6%9F%BF%E7%82%92%E9%B8%A1%E8%9B%8B/#_1","text":"\u897f\u7ea2\u67ff\u7092\u86cb\u662f\u4e2d\u56fd\u5bb6\u5e38\u51e0\u4e4e\u6700\u5e38\u89c1\u7684\u4e00\u9053\u83dc\u80b4\u3002\u5b83\u7684\u539f\u6750\u6599\u6613\u4e8e\u641c\u96c6\uff0c\u5236\u4f5c\u6b65\u9aa4\u4e5f\u8f83\u4e3a\u7b80\u5355\uff0c\u6240\u4ee5\u975e\u5e38\u9002\u5408\u65b0\u53a8\u5e08\u4e0a\u624b\uff0c\u662f\u5f88\u591a\u4eba\u5b66\u4e60\u505a\u83dc\u65f6\u505a\u7684\u7b2c\u4e00\u9053\u83dc\u3002","title":"\u897f\u7ea2\u67ff\u9e21\u86cb\u7684\u505a\u6cd5"},{"location":"dishes/vegetable_dish/%E8%A5%BF%E7%BA%A2%E6%9F%BF%E7%82%92%E9%B8%A1%E8%9B%8B/#_2","text":"\u897f\u7ea2\u67ff \u9e21\u86cb \u98df\u7528\u6cb9 \u76d0 \u53ef\u9009\uff1a\u7cd6 \u53ef\u9009\uff1a\u8471\u82b1","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/vegetable_dish/%E8%A5%BF%E7%BA%A2%E6%9F%BF%E7%82%92%E9%B8%A1%E8%9B%8B/#_3","text":"\u6bcf\u4efd\uff1a \u897f\u7ea2\u67ff = 1 \u4e2a\uff08\u7ea6 180g\uff09 * \u4eba\u6570 \u9e21\u86cb = 1.5 \u4e2a * \u4eba\u6570\uff0c\u5411\u4e0a\u53d6\u6574 \u98df\u7528\u6cb9 = 4ml * \u9e21\u86cb/\u4e2a \u76d0 = 1.5-2g * \u4eba\u6570 \u7cd6 = 0-2g * \u4eba\u6570 \u8471\u82b1 = 0-10g * \u4eba\u6570","title":"\u8ba1\u7b97"},{"location":"dishes/vegetable_dish/%E8%A5%BF%E7%BA%A2%E6%9F%BF%E7%82%92%E9%B8%A1%E8%9B%8B/#_4","text":"\u897f\u7ea2\u67ff\u6d17\u51c0 \u53ef\u9009\uff1a\u53bb\u6389\u897f\u7ea2\u67ff\u7684\u5916\u8868\u76ae \u5f00\u6c34\u70eb\u8868\u76ae\uff0c\u7136\u540e\u5c06\u897f\u7ea2\u67ff\u653e\u5165\u51b7\u6c34\uff0c\u5265\u53bb\u5916\u76ae \u897f\u7ea2\u67ff\u53bb\u8482\uff0c\u5207\u6210\u8fb9\u957f\u4e0d\u8d85\u8fc7 4cm \u7684\u5c0f\u5757\uff0c\u5373\u4e3a \u897f\u7ea2\u67ff\u5757 \u5c06\u9e21\u86cb\u6253\u5165\u7897\u4e2d\uff0c\u52a0\u5165 1g * \u4eba\u6570 \u7684\u76d0\uff0c\u6405\u5300\uff0c\u5373\u4e3a \u9e21\u86cb\u6db2 \u70ed\u9505\uff0c\u52a0\u5165\u98df\u7528\u6cb9 \u6cb9\u70ed\u540e\uff0c\u5012\u5165 \u9e21\u86cb\u6db2 \u3002\u7ffb\u7092\u81f3\u9e21\u86cb\u7ed3\u4e3a\u56fa\u4f53\u4e14\u989c\u8272\u5fae\u5fae\u53d1\u9ec4\uff0c\u5373\u4e3a \u534a\u719f\u9e21\u86cb \u6839\u636e\u53e3\u611f\u504f\u597d\uff0c\u53ef\u4ee5\u8c03\u6574\u7ffb\u7092\u65f6\u95f4 \u5173\u706b\u3002\u5c06 \u534a\u719f\u9e21\u86cb \u76db\u76d8\uff0c\u91cd\u65b0\u5f00\u706b \u6ce8\u610f\uff1a\u4e0d\u8981\u6d17\u9505 \u52a0\u5165 \u897f\u7ea2\u67ff\u5757 \uff0c\u9505\u94f2\u62cd\u6253\u5e76\u7ffb\u7092 20 \u79d2\uff0c\u6216\u81f3\u897f\u7ea2\u67ff\u8f6f\u70c2 \u5411\u9505\u4e2d\u52a0\u5165 \u534a\u719f\u9e21\u86cb \uff0c\u7ffb\u7092\u5747\u5300 \u52a0\u5165\u5269\u4f59\u7684\u76d0\u3001\u7cd6\u3001\u8471\u82b1\uff0c\u7ffb\u7092\u5747\u5300 \u5173\u706b\uff0c\u76db\u76d8","title":"\u64cd\u4f5c"},{"location":"dishes/vegetable_dish/%E8%A5%BF%E7%BA%A2%E6%9F%BF%E7%82%92%E9%B8%A1%E8%9B%8B/#_5","text":"\u8fd9\u9053\u83dc\u6839\u636e\u4e0d\u540c\u7684\u53e3\u5473\u504f\u597d\uff0c\u5b58\u5728\u8bf8\u591a\u7248\u672c\uff0c\u5305\u62ec\u4e14\u4e0d\u9650\u4e8e\uff1a \u4e0d\u52a0\u7cd6 \u4e0d\u52a0\u8471\u82b1 \u8df3\u8fc7 7~9 \u6b65\uff0c\u6539\u4e3a\uff1a \u52a0\u5165 \u897f\u7ea2\u67ff\u5757 \uff0c\u4e0e\u9e21\u86cb\u4e00\u8d77\u7ffb\u7092 20 \u79d2\uff0c\u6216\u81f3\u897f\u7ea2\u67ff\u8f6f\u70c2 \u7b2c 4 \u6b65\u8ffd\u52a0\uff1a \u5411\u9e21\u86cb\u4e2d\u52a0\u5165\u4e24\u6ef4\u918b\uff0c\u53bb\u9664\u8165\u5473\uff0c\u4ee4\u9e21\u86cb\u66f4\u84ec\u677e \u7b2c 9 \u6b65\u8ffd\u52a0\uff1a \u52a0\u5165\u756a\u8304\u9171\u6216\u6e05\u6c34\uff0c\u589e\u52a0\u6c64\u6c41 \u7b2c 10 \u6b65\u4fee\u6539\uff1a \u201c\u52a0\u5165\u5269\u4f59\u7684\u76d0\u201d \u6539\u4e3a \u201c\u52a0\u5165\u4e24\u6ef4\u751f\u62bd\u201d \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/vegetable_dish/%E9%85%B8%E8%BE%A3%E5%9C%9F%E8%B1%86%E4%B8%9D/","text":"\u9178\u8fa3\u571f\u8c46\u4e1d\u7684\u505a\u6cd5 \u9178\u8fa3\u571f\u8c46\u4e1d\u662f\u4e00\u9053\u7b80\u5355\u6613\u505a\u7684\u83dc\u3002\u8272\u6cfd\u5149\u4eae\uff0c\u9178\u8fa3\u53ef\u53e3\u3002\u8f85\u6599\u8fa3\u6912\u5bcc\u542b\u7ef4\u751f\u7d20 C\u3002\u8be5\u83dc\u7528\u6599\u7b80\u5355\uff0c\u597d\u5b66\u6613\u505a \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u571f\u8c46 \u5927\u849c \u9752\u6912 \u7ea2\u6912 \u5e72\u8fa3\u6912 \u8471 \u751f\u62bd \u9648\u918b \u76d0 \u8ba1\u7b97 \u6bcf\u4efd\uff1a \u571f\u8c46 240g \u5de6\u53f3\uff08\u8d8a\u7ec6\u8d8a\u957f\u66f4\u597d\uff09 \u5927\u849c 4 \u74e3 \u9752\u6912 0.5 \u4e2a \u7ea2\u6912 0.5 \u4e2a \u5e72\u8fa3\u6912 3 \u4e2a \u8471 1 \u6839 \u751f\u62bd 1 \u52fa \u9648\u918b 2 \u52fa \u76d0 2g \u98df\u7528\u6cb9 10-15ml \u64cd\u4f5c \u571f\u8c46\u53bb\u76ae\u3001\u5207\u4e1d\uff08\u6216\u7528\u5228\u4e1d\u5668\uff09 \u5207\u597d\u7684\u571f\u8c46\u4e1d\u7528\u6e05\u6c34\u6d78\u6ce1\u6d17\u4e09\u904d\uff0c\u53bb\u9664\u591a\u4f59\u7684\u6dc0\u7c89\uff0c\u6ca5\u5e72\u5907\u7528 \u8471\u849c\u5e72\u8fa3\u6912\u5207\u5c0f\u5757\uff0c\u9752\u7ea2\u6912\u5207\u4e1d\u3002 \u70ed\u9505\uff0c\u5c0f\u706b\u70ed\u6cb9\u7206\u9999\u849c\u548c\u5e72\u8fa3\u6912\u3002 \u52a0\u5165\u9752\u7ea2\u6912\u7ffb\u7092\u51e0\u4e0b\uff0c\u52a0\u5165\u571f\u8c46\u4e1d\u7ffb\u7092\u81f3\u53d8\u8272\u3002 \u52a0\u4e00\u52fa\u751f\u62bd\uff0c\u4e24\u52fa\u9648\u918b\uff0c\u849c\u672b\uff0c\u6700\u540e\u52a0\u5165\u76d0\u7ffb\u7092\u5747\u5300\u5373\u53ef\u3002 \u9644\u52a0\u5185\u5bb9 \u6e05\u6d17\u571f\u8c46\u4e1d\u6dc0\u7c89\u4e00\u5b9a\u8981\u53bb\u5e72\u51c0\uff0c\u4e0d\u7136\u4f1a\u5168\u9ecf\u5728\u4e00\u8d77 \u52a0\u5165\u849c\u672b\u3001\u76d0\u540e\u5e94\u5c3d\u5feb\u51fa\u9505\uff0c\u4fdd\u7559\u849c\u9999\u4ee5\u53ca\u907f\u514d\u7834\u574f\u53e3\u611f\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9178\u8fa3\u571f\u8c46\u4e1d"},{"location":"dishes/vegetable_dish/%E9%85%B8%E8%BE%A3%E5%9C%9F%E8%B1%86%E4%B8%9D/#_1","text":"\u9178\u8fa3\u571f\u8c46\u4e1d\u662f\u4e00\u9053\u7b80\u5355\u6613\u505a\u7684\u83dc\u3002\u8272\u6cfd\u5149\u4eae\uff0c\u9178\u8fa3\u53ef\u53e3\u3002\u8f85\u6599\u8fa3\u6912\u5bcc\u542b\u7ef4\u751f\u7d20 C\u3002\u8be5\u83dc\u7528\u6599\u7b80\u5355\uff0c\u597d\u5b66\u6613\u505a","title":"\u9178\u8fa3\u571f\u8c46\u4e1d\u7684\u505a\u6cd5"},{"location":"dishes/vegetable_dish/%E9%85%B8%E8%BE%A3%E5%9C%9F%E8%B1%86%E4%B8%9D/#_2","text":"\u571f\u8c46 \u5927\u849c \u9752\u6912 \u7ea2\u6912 \u5e72\u8fa3\u6912 \u8471 \u751f\u62bd \u9648\u918b \u76d0","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/vegetable_dish/%E9%85%B8%E8%BE%A3%E5%9C%9F%E8%B1%86%E4%B8%9D/#_3","text":"\u6bcf\u4efd\uff1a \u571f\u8c46 240g \u5de6\u53f3\uff08\u8d8a\u7ec6\u8d8a\u957f\u66f4\u597d\uff09 \u5927\u849c 4 \u74e3 \u9752\u6912 0.5 \u4e2a \u7ea2\u6912 0.5 \u4e2a \u5e72\u8fa3\u6912 3 \u4e2a \u8471 1 \u6839 \u751f\u62bd 1 \u52fa \u9648\u918b 2 \u52fa \u76d0 2g \u98df\u7528\u6cb9 10-15ml","title":"\u8ba1\u7b97"},{"location":"dishes/vegetable_dish/%E9%85%B8%E8%BE%A3%E5%9C%9F%E8%B1%86%E4%B8%9D/#_4","text":"\u571f\u8c46\u53bb\u76ae\u3001\u5207\u4e1d\uff08\u6216\u7528\u5228\u4e1d\u5668\uff09 \u5207\u597d\u7684\u571f\u8c46\u4e1d\u7528\u6e05\u6c34\u6d78\u6ce1\u6d17\u4e09\u904d\uff0c\u53bb\u9664\u591a\u4f59\u7684\u6dc0\u7c89\uff0c\u6ca5\u5e72\u5907\u7528 \u8471\u849c\u5e72\u8fa3\u6912\u5207\u5c0f\u5757\uff0c\u9752\u7ea2\u6912\u5207\u4e1d\u3002 \u70ed\u9505\uff0c\u5c0f\u706b\u70ed\u6cb9\u7206\u9999\u849c\u548c\u5e72\u8fa3\u6912\u3002 \u52a0\u5165\u9752\u7ea2\u6912\u7ffb\u7092\u51e0\u4e0b\uff0c\u52a0\u5165\u571f\u8c46\u4e1d\u7ffb\u7092\u81f3\u53d8\u8272\u3002 \u52a0\u4e00\u52fa\u751f\u62bd\uff0c\u4e24\u52fa\u9648\u918b\uff0c\u849c\u672b\uff0c\u6700\u540e\u52a0\u5165\u76d0\u7ffb\u7092\u5747\u5300\u5373\u53ef\u3002","title":"\u64cd\u4f5c"},{"location":"dishes/vegetable_dish/%E9%85%B8%E8%BE%A3%E5%9C%9F%E8%B1%86%E4%B8%9D/#_5","text":"\u6e05\u6d17\u571f\u8c46\u4e1d\u6dc0\u7c89\u4e00\u5b9a\u8981\u53bb\u5e72\u51c0\uff0c\u4e0d\u7136\u4f1a\u5168\u9ecf\u5728\u4e00\u8d77 \u52a0\u5165\u849c\u672b\u3001\u76d0\u540e\u5e94\u5c3d\u5feb\u51fa\u9505\uff0c\u4fdd\u7559\u849c\u9999\u4ee5\u53ca\u907f\u514d\u7834\u574f\u53e3\u611f\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/vegetable_dish/%E4%B8%8A%E6%B1%A4%E5%A8%83%E5%A8%83%E8%8F%9C/%E4%B8%8A%E6%B1%A4%E5%A8%83%E5%A8%83%E8%8F%9C/","text":"\u4e0a\u6c64\u5a03\u5a03\u83dc\u7684\u505a\u6cd5 \uff08\u7d20\u83dc|\u51cf\u80a5\u9910\uff09 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u5a03\u5a03\u83dc \u76ae\u86cb \u5348\u9910\u8089\uff08\u706b\u817f\u80a0\uff09 \u8471 \u59dc \u849c \u76d0 \u7cd6 \u6dc0\u7c89 \u8ba1\u7b97 \u6ce8\u610f\uff0c\u8fd9\u9053\u83dc\u4ec5\u6709\u8db3\u591f 2-4 \u4eba\u98df\u7528\u7684\u7248\u672c\u3002 \u5a03\u5a03\u83dc 700g \u91d1\u9488\u83c7 10g\uff08\u770b\u4e2a\u4eba\u559c\u597d, \u4e0d\u559c\u6b22 see you tomorrow \u7684\u5c31\u4e0d\u653e \ud83d\ude02\uff09 \u76ae\u86cb \u4e00\u4e2a\uff08\u6ca1\u6709\u4e5f\u53ef\u4ee5\u4e0d\u653e, \u6211\u5403\u7740\u4e5f\u597d\u5403\uff09 \u5348\u9910\u8089\uff08\u706b\u817f\u80a0\u90fd\u53ef\u4ee5\u66ff\u4ee3\uff09 \u64cd\u4f5c \u5a03\u5a03\u83dc\u6d17\u51c0, \u7ad6\u7740\u5207\u5f00\u5207\u6210\u6bb5\u3002 \u8471 3g \u5207 \u5c0f\u6bb5\u3002\u849c 10g \u5207\u7247\u3002\u59dc 10g \u5207\u5c0f\u7247\u3002 \u76ae\u86cb\u5207\u6210\u4e01, \u706b\u817f\u80a0\u6216\u8005\u5348\u9910\u8089\u5207\u6210\u4e01\uff081cm \u5927\u5c0f\u7684\u4e01\uff09 \u91d1\u9488\u83c7\u6d17\u51c0\u6495\u5f00 \u70e7\u70ed\u6c34\u5a03\u5a03\u83dc\u653e\u8fdb\u53bb\u5341\u79d2\u949f\u51fa\u4e00\u4e0b\u6c34\u635e\u51fa\u3002 \u70ed\u9505\u51c9\u6cb9, \u52a0\u70ed\u9505\u5012\u5165\u6cb9\u8fc7\u4e00\u904d\u5c31\u5012\u51fa\u6765, \u91cd\u65b0\u5012\u5165\u4e00\u70b9\u6cb9\u3002 \u8c03\u81f3\u5c0f\u706b\u52a0\u5165\u8471\u59dc\u849c\uff0c\u714e\u7092\u51fa\u9999\u5473\u5373\u53ef\u3002 \u52a0\u5165\u9002 300g \u6e05\u6c34\uff08\u6c34\u91cf\u6ca1\u8fc7\u5a03\u5a03\u83dc\u5373\u53ef\uff09, \u653e\u5165\u5a03\u5a03\u83dc, \u91d1\u9488\u83c7, \u5348\u9910\u8089 \u52a0\u5165\u8c03\u5473\u6599\u869d\u6cb9\u3001\u7cd6\u3001\u76d0\u3001\u5473\u7cbe\u70e7\u5f00\u3002 \u716e 3 \u5206\u949f\u5de6\u53f3, \u716e\u5f00\u540e\u5f00\u59cb\u88c5\u76d8, \u76db\u51fa\u5a03\u5a03\u83dc\u540e\u76ae\u86cb\u653e\u5728\u4e0a\u9762\u628a\u6c64\u6c41\u6d47\u4e0a\u53bb\u5c31\u53ef\u4ee5\u4e86 \u62cd\u7167\u6280\u672f\u6709\u9650, \u5473\u9053\u8fd8\u662f\u5f88\u4e0d\u9519\u7684 \u9644\u52a0\u5185\u5bb9 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u4e0a\u6c64\u5a03\u5a03\u83dc"},{"location":"dishes/vegetable_dish/%E4%B8%8A%E6%B1%A4%E5%A8%83%E5%A8%83%E8%8F%9C/%E4%B8%8A%E6%B1%A4%E5%A8%83%E5%A8%83%E8%8F%9C/#_1","text":"","title":"\u4e0a\u6c64\u5a03\u5a03\u83dc\u7684\u505a\u6cd5 \uff08\u7d20\u83dc|\u51cf\u80a5\u9910\uff09"},{"location":"dishes/vegetable_dish/%E4%B8%8A%E6%B1%A4%E5%A8%83%E5%A8%83%E8%8F%9C/%E4%B8%8A%E6%B1%A4%E5%A8%83%E5%A8%83%E8%8F%9C/#_2","text":"\u5a03\u5a03\u83dc \u76ae\u86cb \u5348\u9910\u8089\uff08\u706b\u817f\u80a0\uff09 \u8471 \u59dc \u849c \u76d0 \u7cd6 \u6dc0\u7c89","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/vegetable_dish/%E4%B8%8A%E6%B1%A4%E5%A8%83%E5%A8%83%E8%8F%9C/%E4%B8%8A%E6%B1%A4%E5%A8%83%E5%A8%83%E8%8F%9C/#_3","text":"\u6ce8\u610f\uff0c\u8fd9\u9053\u83dc\u4ec5\u6709\u8db3\u591f 2-4 \u4eba\u98df\u7528\u7684\u7248\u672c\u3002 \u5a03\u5a03\u83dc 700g \u91d1\u9488\u83c7 10g\uff08\u770b\u4e2a\u4eba\u559c\u597d, \u4e0d\u559c\u6b22 see you tomorrow \u7684\u5c31\u4e0d\u653e \ud83d\ude02\uff09 \u76ae\u86cb \u4e00\u4e2a\uff08\u6ca1\u6709\u4e5f\u53ef\u4ee5\u4e0d\u653e, \u6211\u5403\u7740\u4e5f\u597d\u5403\uff09 \u5348\u9910\u8089\uff08\u706b\u817f\u80a0\u90fd\u53ef\u4ee5\u66ff\u4ee3\uff09","title":"\u8ba1\u7b97"},{"location":"dishes/vegetable_dish/%E4%B8%8A%E6%B1%A4%E5%A8%83%E5%A8%83%E8%8F%9C/%E4%B8%8A%E6%B1%A4%E5%A8%83%E5%A8%83%E8%8F%9C/#_4","text":"\u5a03\u5a03\u83dc\u6d17\u51c0, \u7ad6\u7740\u5207\u5f00\u5207\u6210\u6bb5\u3002 \u8471 3g \u5207 \u5c0f\u6bb5\u3002\u849c 10g \u5207\u7247\u3002\u59dc 10g \u5207\u5c0f\u7247\u3002 \u76ae\u86cb\u5207\u6210\u4e01, \u706b\u817f\u80a0\u6216\u8005\u5348\u9910\u8089\u5207\u6210\u4e01\uff081cm \u5927\u5c0f\u7684\u4e01\uff09 \u91d1\u9488\u83c7\u6d17\u51c0\u6495\u5f00 \u70e7\u70ed\u6c34\u5a03\u5a03\u83dc\u653e\u8fdb\u53bb\u5341\u79d2\u949f\u51fa\u4e00\u4e0b\u6c34\u635e\u51fa\u3002 \u70ed\u9505\u51c9\u6cb9, \u52a0\u70ed\u9505\u5012\u5165\u6cb9\u8fc7\u4e00\u904d\u5c31\u5012\u51fa\u6765, \u91cd\u65b0\u5012\u5165\u4e00\u70b9\u6cb9\u3002 \u8c03\u81f3\u5c0f\u706b\u52a0\u5165\u8471\u59dc\u849c\uff0c\u714e\u7092\u51fa\u9999\u5473\u5373\u53ef\u3002 \u52a0\u5165\u9002 300g \u6e05\u6c34\uff08\u6c34\u91cf\u6ca1\u8fc7\u5a03\u5a03\u83dc\u5373\u53ef\uff09, \u653e\u5165\u5a03\u5a03\u83dc, \u91d1\u9488\u83c7, \u5348\u9910\u8089 \u52a0\u5165\u8c03\u5473\u6599\u869d\u6cb9\u3001\u7cd6\u3001\u76d0\u3001\u5473\u7cbe\u70e7\u5f00\u3002 \u716e 3 \u5206\u949f\u5de6\u53f3, \u716e\u5f00\u540e\u5f00\u59cb\u88c5\u76d8, \u76db\u51fa\u5a03\u5a03\u83dc\u540e\u76ae\u86cb\u653e\u5728\u4e0a\u9762\u628a\u6c64\u6c41\u6d47\u4e0a\u53bb\u5c31\u53ef\u4ee5\u4e86 \u62cd\u7167\u6280\u672f\u6709\u9650, \u5473\u9053\u8fd8\u662f\u5f88\u4e0d\u9519\u7684","title":"\u64cd\u4f5c"},{"location":"dishes/vegetable_dish/%E4%B8%8A%E6%B1%A4%E5%A8%83%E5%A8%83%E8%8F%9C/%E4%B8%8A%E6%B1%A4%E5%A8%83%E5%A8%83%E8%8F%9C/#_5","text":"\u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/vegetable_dish/%E6%A4%92%E7%9B%90%E7%8E%89%E7%B1%B3/%E6%A4%92%E7%9B%90%E7%8E%89%E7%B1%B3/","text":"\u6912\u76d0\u7389\u7c73\u7684\u505a\u6cd5 \u5fc5\u5907\u7684\u539f\u6599\u548c\u5de5\u5177 \u7389\u7c73\u7c92 \u6912\u76d0 \u829d\u9ebb\u7c92 \u6cb9 \u6dc0\u7c89 \u4e24\u4e2a\u5851\u6599\u7c38\u7b95 \u82e5\u5e72\u5438\u6cb9\u7eb8 \u8ba1\u7b97 \u8fd9\u9053\u83dc\u5206\u91cf\u548c\u4f60\u5728\u5ddd\u83dc\u9986\u70b9\u7684\u6807\u51c6\u5206\u91cf\u4e00\u6837 \u7389\u7c73\u7c92\uff08\u888b\u88c5\uff09 350g \u6dc0\u7c89 \u9002\u91cf \u6912\u76d0\u7c89 \u534a\u52fa\uff08\u5907\u7528\uff09 \u505a\u6cd5 \u7389\u7c73\u7c92\u90fd\u662f\u5265\u597d\u7684\uff0c\u76f4\u63a5\u89e3\u51bb\u5373\u53ef\uff0c\u6e29\u6c34\u6ce1 15 \u5206\u949f\u6216\u8005\u7076\u4e0a\u5f00\u6c34\u716e 5 \u5206\u949f\u3002 \u62ff\u51fa\u4e00\u4e2a\u7c38\u7b95\u6211\u4eec\u5c06\u5176\u5047\u8bbe\u4e3a BoxA\uff0c\u57ab\u4e0a\u5438\u6cb9\u7eb8\uff0c\u5012\u8fdb\u89e3\u51bb\u597d\u7684\u7389\u7c73\u7c92\u3002 shaking shaking shaking! - \u76f4\u5230\u5438\u6cb9\u7eb8\u5168\u90e8\u53d8\u6e7f\u4e3a\u6b62\u3002 \u62ff\u51fa\u7b2c\u4e8c\u4e2a\u7c38\u7b95 BoxB\uff0c\u57ab\u4e0a\u5438\u6cb9\u7eb8\uff0c\u5c06 BoxA \u7684\u7389\u7c73\u7c92\u5168\u90e8\u5012\u5165 BoxB \u4e2d\u3002 shaking shaking shaking! - \u76f4\u5230\u5438\u6cb9\u7eb8\u5168\u90e8\u53d8\u6e7f\u4e3a\u6b62\u3002 \u91cd\u590d\u4e0a\u8ff0\u64cd\u4f5c\u591a\u6b21\uff0c\u76f4\u5230\u7389\u7c73\u8868\u9762\u6ca1\u6709\u660e\u663e\u53ef\u89c1\u7684\u6c34\u6ef4\u4f46\u4fdd\u6301\u6e7f\u6da6\u7684\u72b6\u6001\u3002 \u5012\u5165\u5927\u91cf\u6dc0\u7c89\uff0c\u80fd\u591f\u5b8c\u5168\u76d6\u4f4f\u7389\u7c73\u7c92\u3002 shaking shaking shaking! - \u76f4\u5230\u6dc0\u7c89\u88f9\u4f4f\u4e86\u7389\u7c73\u7c92 \u5f00\u7076 - \u653e\u9505 - \u5012\u5165\u6cb9 \u5c3d\u91cf\u94fa\u6ee1\u9505\u5e95 \u4f46\u4e0d\u8981\u592a\u591a\u3002 \u6cb9\u70ed 8 \u6210\uff0c\u5012\u5165\u88f9\u4e0a\u4e86\u6dc0\u7c89\u7684\u7389\u7c73\u7c92\u3002 \u4e2d\u706b\u5148\u714e 30s\uff0c\u4e0d\u8981\u7ffb\u7092\uff0c\u4e0d\u7136\u6dc0\u7c89\u4f1a\u6389\u3002 \u8f7b\u5fae\u7ffb\u7092 3 \u5206\u949f\u5373\u53ef\u51fa\u9505\u3002 \u6700\u91cd\u8981\u7684\u4e00\u6b65\uff1a\u6492\u4e0a\u534a\u52fa\u6912\u76d0\uff0c\u6492\u4e0a\u9002\u91cf\u829d\u9ebb\u7c92\uff01 \u9999\u55b7\u55b7\u7684\u201d\u6912\u76d0\u7389\u7c73\u201c\u5c31\u505a\u597d\u4e86 \u9644\u52a0\u5185\u5bb9 \u7389\u7c73\u7c92\u4e0d\u8981\u81ea\u5df1\u5265\uff0c\u8d39\u624b\u7684\uff0c\u53ef\u4ee5\u76f4\u63a5\u5916\u5356\u8f6f\u4ef6\u4e70\u83dc\u201d\u5df2\u7ecf\u5265\u597d\u7684\u7389\u7c73\u7c92\u201c\uff0c30min \u9001\u8fbe\u540e\u6e29\u6c34\u89e3\u51bb\u3002 \u5f00\u6c34\u89e3\u51bb\u6162\u5c31\u62ff\u5f00\u6c34\u716e\uff01\uff08 \u5343\u4e07\u522b\u716e\u7389\u7c73\u672c\u8eab\uff0c\u5e26\u7740\u5305\u88c5\u4e00\u8d77\u716e\uff0c\u6495\u6389\u4e00\u4e2a\u53e3 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u6912\u76d0\u7389\u7c73"},{"location":"dishes/vegetable_dish/%E6%A4%92%E7%9B%90%E7%8E%89%E7%B1%B3/%E6%A4%92%E7%9B%90%E7%8E%89%E7%B1%B3/#_1","text":"","title":"\u6912\u76d0\u7389\u7c73\u7684\u505a\u6cd5"},{"location":"dishes/vegetable_dish/%E6%A4%92%E7%9B%90%E7%8E%89%E7%B1%B3/%E6%A4%92%E7%9B%90%E7%8E%89%E7%B1%B3/#_2","text":"\u7389\u7c73\u7c92 \u6912\u76d0 \u829d\u9ebb\u7c92 \u6cb9 \u6dc0\u7c89 \u4e24\u4e2a\u5851\u6599\u7c38\u7b95 \u82e5\u5e72\u5438\u6cb9\u7eb8","title":"\u5fc5\u5907\u7684\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/vegetable_dish/%E6%A4%92%E7%9B%90%E7%8E%89%E7%B1%B3/%E6%A4%92%E7%9B%90%E7%8E%89%E7%B1%B3/#_3","text":"\u8fd9\u9053\u83dc\u5206\u91cf\u548c\u4f60\u5728\u5ddd\u83dc\u9986\u70b9\u7684\u6807\u51c6\u5206\u91cf\u4e00\u6837 \u7389\u7c73\u7c92\uff08\u888b\u88c5\uff09 350g \u6dc0\u7c89 \u9002\u91cf \u6912\u76d0\u7c89 \u534a\u52fa\uff08\u5907\u7528\uff09","title":"\u8ba1\u7b97"},{"location":"dishes/vegetable_dish/%E6%A4%92%E7%9B%90%E7%8E%89%E7%B1%B3/%E6%A4%92%E7%9B%90%E7%8E%89%E7%B1%B3/#_4","text":"\u7389\u7c73\u7c92\u90fd\u662f\u5265\u597d\u7684\uff0c\u76f4\u63a5\u89e3\u51bb\u5373\u53ef\uff0c\u6e29\u6c34\u6ce1 15 \u5206\u949f\u6216\u8005\u7076\u4e0a\u5f00\u6c34\u716e 5 \u5206\u949f\u3002 \u62ff\u51fa\u4e00\u4e2a\u7c38\u7b95\u6211\u4eec\u5c06\u5176\u5047\u8bbe\u4e3a BoxA\uff0c\u57ab\u4e0a\u5438\u6cb9\u7eb8\uff0c\u5012\u8fdb\u89e3\u51bb\u597d\u7684\u7389\u7c73\u7c92\u3002 shaking shaking shaking! - \u76f4\u5230\u5438\u6cb9\u7eb8\u5168\u90e8\u53d8\u6e7f\u4e3a\u6b62\u3002 \u62ff\u51fa\u7b2c\u4e8c\u4e2a\u7c38\u7b95 BoxB\uff0c\u57ab\u4e0a\u5438\u6cb9\u7eb8\uff0c\u5c06 BoxA \u7684\u7389\u7c73\u7c92\u5168\u90e8\u5012\u5165 BoxB \u4e2d\u3002 shaking shaking shaking! - \u76f4\u5230\u5438\u6cb9\u7eb8\u5168\u90e8\u53d8\u6e7f\u4e3a\u6b62\u3002 \u91cd\u590d\u4e0a\u8ff0\u64cd\u4f5c\u591a\u6b21\uff0c\u76f4\u5230\u7389\u7c73\u8868\u9762\u6ca1\u6709\u660e\u663e\u53ef\u89c1\u7684\u6c34\u6ef4\u4f46\u4fdd\u6301\u6e7f\u6da6\u7684\u72b6\u6001\u3002 \u5012\u5165\u5927\u91cf\u6dc0\u7c89\uff0c\u80fd\u591f\u5b8c\u5168\u76d6\u4f4f\u7389\u7c73\u7c92\u3002 shaking shaking shaking! - \u76f4\u5230\u6dc0\u7c89\u88f9\u4f4f\u4e86\u7389\u7c73\u7c92 \u5f00\u7076 - \u653e\u9505 - \u5012\u5165\u6cb9 \u5c3d\u91cf\u94fa\u6ee1\u9505\u5e95 \u4f46\u4e0d\u8981\u592a\u591a\u3002 \u6cb9\u70ed 8 \u6210\uff0c\u5012\u5165\u88f9\u4e0a\u4e86\u6dc0\u7c89\u7684\u7389\u7c73\u7c92\u3002 \u4e2d\u706b\u5148\u714e 30s\uff0c\u4e0d\u8981\u7ffb\u7092\uff0c\u4e0d\u7136\u6dc0\u7c89\u4f1a\u6389\u3002 \u8f7b\u5fae\u7ffb\u7092 3 \u5206\u949f\u5373\u53ef\u51fa\u9505\u3002 \u6700\u91cd\u8981\u7684\u4e00\u6b65\uff1a\u6492\u4e0a\u534a\u52fa\u6912\u76d0\uff0c\u6492\u4e0a\u9002\u91cf\u829d\u9ebb\u7c92\uff01 \u9999\u55b7\u55b7\u7684\u201d\u6912\u76d0\u7389\u7c73\u201c\u5c31\u505a\u597d\u4e86","title":"\u505a\u6cd5"},{"location":"dishes/vegetable_dish/%E6%A4%92%E7%9B%90%E7%8E%89%E7%B1%B3/%E6%A4%92%E7%9B%90%E7%8E%89%E7%B1%B3/#_5","text":"\u7389\u7c73\u7c92\u4e0d\u8981\u81ea\u5df1\u5265\uff0c\u8d39\u624b\u7684\uff0c\u53ef\u4ee5\u76f4\u63a5\u5916\u5356\u8f6f\u4ef6\u4e70\u83dc\u201d\u5df2\u7ecf\u5265\u597d\u7684\u7389\u7c73\u7c92\u201c\uff0c30min \u9001\u8fbe\u540e\u6e29\u6c34\u89e3\u51bb\u3002 \u5f00\u6c34\u89e3\u51bb\u6162\u5c31\u62ff\u5f00\u6c34\u716e\uff01\uff08 \u5343\u4e07\u522b\u716e\u7389\u7c73\u672c\u8eab\uff0c\u5e26\u7740\u5305\u88c5\u4e00\u8d77\u716e\uff0c\u6495\u6389\u4e00\u4e2a\u53e3 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/vegetable_dish/%E6%A6%84%E8%8F%9C%E8%82%89%E6%9C%AB%E5%9B%9B%E5%AD%A3%E8%B1%86/%E6%A6%84%E8%8F%9C%E8%82%89%E6%9C%AB%E5%9B%9B%E5%AD%A3%E8%B1%86/","text":"\u6984\u83dc\u8089\u672b\u56db\u5b63\u8c46\u7684\u505a\u6cd5 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u56db\u5b63\u8c46 \u4e94\u82b1\u8089 \u6a44\u6984\u83dc \u5927\u849c \u5c0f\u7c73\u8fa3\uff08\u4e0d\u5403\u8fa3\u53ef\u4ee5\u4e0d\u653e\uff09 \u8ba1\u7b97 \u56db\u5b63\u8c46 220g \u4e94\u82b1\u8089 100g \u6a44\u6984\u83dc 20g \u5927\u849c 10g \u5c0f\u7c73\u8fa3 10g \u64cd\u4f5c \u5c06\u56db\u5b63\u8c46\u6d17\u51c0\uff0c\u5e76\u628a\u7b4b\u6495\u5e72\u51c0\uff0c\u7136\u540e\u5207\u6210\u5927\u5c0f\u5747\u5300\u7684\u9897\u7c92\u5907\u7528\u3002 \u5c06\u5927\u849c\u62cd\u788e\u5241\u6210\u849c\u672b\u5907\u7528\u3002 \u5c06\u5c0f\u7c73\u8fa3\u5207\u6210\u5927\u5c0f\u5747\u5300\u7684\u9897\u7c92\u5907\u7528\u3002 \u5c06\u4e94\u82b1\u8089\u53bb\u76ae\uff0c\u7136\u540e\u5241\u6210\u8089\u672b\u5907\u7528\u3002 \u5c06\u9505\u70e7\u70ed\uff0c\u7136\u540e\u52a0\u5165 20ml \u6cb9\u6ed1\u9505\uff0c\u9505\u6ed1\u597d\u4e4b\u540e\u5c06\u70ed\u6cb9\u5012\u51fa\uff0c\u7136\u540e\u52a0\u5165 10ml \u51b7\u6cb9\uff0c\u8fd9\u5c31\u662f\u4f20\u8bf4\u4e2d\u70ed\u9505\u51b7\u6cb9\uff0c\u8fd9\u4e48\u505a\u4e3b\u8981\u662f\u9632\u6b62\u8089\u672b\u7c98\u9505\u3002 \u5982\u679c\u5bb6\u91cc\u6ca1\u6709\u667e\u6cb9\u74f6\u7684\u8bdd\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u7528\u6ed1\u9505\uff0c\u653e\u5165\u6cb9\u4e4b\u540e\uff0c\u76f4\u63a5\u52a0\u5165\u8089\u672b\u5f00\u59cb\u7178\u7092\uff0c\u5c0f\u706b\u7178\u7092\u4e24\u5206\u949f\uff0c\u7092\u51fa\u732a\u6cb9\u3002 \u8089\u672b\u7092\u9999\u4e4b\u540e\u52a0\u5165\u849c\u672b\uff0c\u6a44\u6984\u83dc\u548c\u5c0f\u7c73\u8fa3\uff0c\u7092\u51fa\u9999\u5473\u3002 \u52a0\u5165\u56db\u5b63\u8c46\u5f00\u4e2d\u706b\u7178\u7092\uff0c\u56db\u5b63\u8c46\u81f3\u5c11\u8981\u7092 5 \u5206\u949f\uff0c\u4e00\u5b9a\u8981\u4fdd\u8bc1\u56db\u5b63\u8c46 \u719f\u900f \uff0c\u5426\u5219\u53ef\u80fd\u4f1a\u98df\u7269\u4e2d\u6bd2\u3002 \u56db\u5b63\u8c46\u7092\u719f\u540e\u52a0\u5165 2ml \u9171\u6cb9\u4ece\u9505\u8fb9\u6dcb\u5165\uff0c\u7136\u540e\u52a0\u5165 2g \u76d0\u30011g \u9e21\u7cbe\u30011g \u80e1\u6912\u7c89\u548c 0.5g \u7cd6\u3002 \u5c06\u8c03\u6599\u7ffb\u7092\u5747\u5300\u3002 \u51fa\u9505\uff0c\u88c5\u76d8\u3002 \u9644\u52a0\u5185\u5bb9 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u6984\u83dc\u8089\u672b\u56db\u5b63\u8c46"},{"location":"dishes/vegetable_dish/%E6%A6%84%E8%8F%9C%E8%82%89%E6%9C%AB%E5%9B%9B%E5%AD%A3%E8%B1%86/%E6%A6%84%E8%8F%9C%E8%82%89%E6%9C%AB%E5%9B%9B%E5%AD%A3%E8%B1%86/#_1","text":"","title":"\u6984\u83dc\u8089\u672b\u56db\u5b63\u8c46\u7684\u505a\u6cd5"},{"location":"dishes/vegetable_dish/%E6%A6%84%E8%8F%9C%E8%82%89%E6%9C%AB%E5%9B%9B%E5%AD%A3%E8%B1%86/%E6%A6%84%E8%8F%9C%E8%82%89%E6%9C%AB%E5%9B%9B%E5%AD%A3%E8%B1%86/#_2","text":"\u56db\u5b63\u8c46 \u4e94\u82b1\u8089 \u6a44\u6984\u83dc \u5927\u849c \u5c0f\u7c73\u8fa3\uff08\u4e0d\u5403\u8fa3\u53ef\u4ee5\u4e0d\u653e\uff09","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/vegetable_dish/%E6%A6%84%E8%8F%9C%E8%82%89%E6%9C%AB%E5%9B%9B%E5%AD%A3%E8%B1%86/%E6%A6%84%E8%8F%9C%E8%82%89%E6%9C%AB%E5%9B%9B%E5%AD%A3%E8%B1%86/#_3","text":"\u56db\u5b63\u8c46 220g \u4e94\u82b1\u8089 100g \u6a44\u6984\u83dc 20g \u5927\u849c 10g \u5c0f\u7c73\u8fa3 10g","title":"\u8ba1\u7b97"},{"location":"dishes/vegetable_dish/%E6%A6%84%E8%8F%9C%E8%82%89%E6%9C%AB%E5%9B%9B%E5%AD%A3%E8%B1%86/%E6%A6%84%E8%8F%9C%E8%82%89%E6%9C%AB%E5%9B%9B%E5%AD%A3%E8%B1%86/#_4","text":"\u5c06\u56db\u5b63\u8c46\u6d17\u51c0\uff0c\u5e76\u628a\u7b4b\u6495\u5e72\u51c0\uff0c\u7136\u540e\u5207\u6210\u5927\u5c0f\u5747\u5300\u7684\u9897\u7c92\u5907\u7528\u3002 \u5c06\u5927\u849c\u62cd\u788e\u5241\u6210\u849c\u672b\u5907\u7528\u3002 \u5c06\u5c0f\u7c73\u8fa3\u5207\u6210\u5927\u5c0f\u5747\u5300\u7684\u9897\u7c92\u5907\u7528\u3002 \u5c06\u4e94\u82b1\u8089\u53bb\u76ae\uff0c\u7136\u540e\u5241\u6210\u8089\u672b\u5907\u7528\u3002 \u5c06\u9505\u70e7\u70ed\uff0c\u7136\u540e\u52a0\u5165 20ml \u6cb9\u6ed1\u9505\uff0c\u9505\u6ed1\u597d\u4e4b\u540e\u5c06\u70ed\u6cb9\u5012\u51fa\uff0c\u7136\u540e\u52a0\u5165 10ml \u51b7\u6cb9\uff0c\u8fd9\u5c31\u662f\u4f20\u8bf4\u4e2d\u70ed\u9505\u51b7\u6cb9\uff0c\u8fd9\u4e48\u505a\u4e3b\u8981\u662f\u9632\u6b62\u8089\u672b\u7c98\u9505\u3002 \u5982\u679c\u5bb6\u91cc\u6ca1\u6709\u667e\u6cb9\u74f6\u7684\u8bdd\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u7528\u6ed1\u9505\uff0c\u653e\u5165\u6cb9\u4e4b\u540e\uff0c\u76f4\u63a5\u52a0\u5165\u8089\u672b\u5f00\u59cb\u7178\u7092\uff0c\u5c0f\u706b\u7178\u7092\u4e24\u5206\u949f\uff0c\u7092\u51fa\u732a\u6cb9\u3002 \u8089\u672b\u7092\u9999\u4e4b\u540e\u52a0\u5165\u849c\u672b\uff0c\u6a44\u6984\u83dc\u548c\u5c0f\u7c73\u8fa3\uff0c\u7092\u51fa\u9999\u5473\u3002 \u52a0\u5165\u56db\u5b63\u8c46\u5f00\u4e2d\u706b\u7178\u7092\uff0c\u56db\u5b63\u8c46\u81f3\u5c11\u8981\u7092 5 \u5206\u949f\uff0c\u4e00\u5b9a\u8981\u4fdd\u8bc1\u56db\u5b63\u8c46 \u719f\u900f \uff0c\u5426\u5219\u53ef\u80fd\u4f1a\u98df\u7269\u4e2d\u6bd2\u3002 \u56db\u5b63\u8c46\u7092\u719f\u540e\u52a0\u5165 2ml \u9171\u6cb9\u4ece\u9505\u8fb9\u6dcb\u5165\uff0c\u7136\u540e\u52a0\u5165 2g \u76d0\u30011g \u9e21\u7cbe\u30011g \u80e1\u6912\u7c89\u548c 0.5g \u7cd6\u3002 \u5c06\u8c03\u6599\u7ffb\u7092\u5747\u5300\u3002 \u51fa\u9505\uff0c\u88c5\u76d8\u3002","title":"\u64cd\u4f5c"},{"location":"dishes/vegetable_dish/%E6%A6%84%E8%8F%9C%E8%82%89%E6%9C%AB%E5%9B%9B%E5%AD%A3%E8%B1%86/%E6%A6%84%E8%8F%9C%E8%82%89%E6%9C%AB%E5%9B%9B%E5%AD%A3%E8%B1%86/#_5","text":"\u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/vegetable_dish/%E7%82%92%E6%BB%91%E8%9B%8B/%E7%82%92%E6%BB%91%E8%9B%8B/","text":"\u7092\u6ed1\u86cb\u7684\u505a\u6cd5 \u7092\u6ed1\u86cb\u662f\u4e00\u9053\u7b80\u5355\u6613\u505a\u7684\u83dc\u3002\u4e00\u822c\u521d\u5b66\u8005\u53ea\u9700\u8981 5 \u5206\u949f\u5373\u53ef\u5b8c\u6210\u3002 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u9e21\u86cb\uff08\u6700\u597d\u662f\u65e0\u83cc\u86cb\uff09 \u725b\u5976 \u8ba1\u7b97 \u6bcf\u4efd\uff1a \u9e21\u86cb 4 \u9897 \u725b\u5976 30ml \u98df\u7528\u6cb9 10ml \u64cd\u4f5c \u9e21\u86cb\u52a0\u5165\u725b\u5976\u4ee5\u53ca 5ml \u98df\u7528\u6cb9\u6405\u62cc\u5747\u5300\uff0c\u5907\u7528 \u5927\u706b\u70e7\u70ed\u5e73\u5e95\u9505\u7ea6 30s \uff0c\u52a0\u5165 5ml \u98df\u7528\u6cb9\u540e\u518d\u70e7 30s \u8f6c\u5c0f\u706b\u3002 \u653e\u5165\u6405\u62cc\u597d\u7684\u9e21\u86cb\uff0c\u518d\u9505\u4e2d\u9759\u7f6e 5 \u79d2\u540e\uff0c\u7528\u9505\u94f2\u5c06\u86cb\u6db2\u4ece\u8fb9\u7f18\u7f13\u6162\u63a8\u5411\u4e2d\u95f4 \u7ffb\u7092\u81f3\u5927\u81f4\u51dd\u56fa\u540e\u5173\u706b\uff0c\u88c5\u76d8 \u9644\u52a0\u5185\u5bb9 \u6700\u540e\u53ef\u6839\u636e\u4e2a\u4eba\u53e3\u5473\u6492\u4e9b\u9ed1\u80e1\u6912\u6216\u8005\u76d0\u6765\u8c03\u5473\u3002 \u53c2\u8003\u8d44\u6599\uff1a \u751c\u741b\u5eda\u623f \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u7092\u6ed1\u86cb"},{"location":"dishes/vegetable_dish/%E7%82%92%E6%BB%91%E8%9B%8B/%E7%82%92%E6%BB%91%E8%9B%8B/#_1","text":"\u7092\u6ed1\u86cb\u662f\u4e00\u9053\u7b80\u5355\u6613\u505a\u7684\u83dc\u3002\u4e00\u822c\u521d\u5b66\u8005\u53ea\u9700\u8981 5 \u5206\u949f\u5373\u53ef\u5b8c\u6210\u3002","title":"\u7092\u6ed1\u86cb\u7684\u505a\u6cd5"},{"location":"dishes/vegetable_dish/%E7%82%92%E6%BB%91%E8%9B%8B/%E7%82%92%E6%BB%91%E8%9B%8B/#_2","text":"\u9e21\u86cb\uff08\u6700\u597d\u662f\u65e0\u83cc\u86cb\uff09 \u725b\u5976","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/vegetable_dish/%E7%82%92%E6%BB%91%E8%9B%8B/%E7%82%92%E6%BB%91%E8%9B%8B/#_3","text":"\u6bcf\u4efd\uff1a \u9e21\u86cb 4 \u9897 \u725b\u5976 30ml \u98df\u7528\u6cb9 10ml","title":"\u8ba1\u7b97"},{"location":"dishes/vegetable_dish/%E7%82%92%E6%BB%91%E8%9B%8B/%E7%82%92%E6%BB%91%E8%9B%8B/#_4","text":"\u9e21\u86cb\u52a0\u5165\u725b\u5976\u4ee5\u53ca 5ml \u98df\u7528\u6cb9\u6405\u62cc\u5747\u5300\uff0c\u5907\u7528 \u5927\u706b\u70e7\u70ed\u5e73\u5e95\u9505\u7ea6 30s \uff0c\u52a0\u5165 5ml \u98df\u7528\u6cb9\u540e\u518d\u70e7 30s \u8f6c\u5c0f\u706b\u3002 \u653e\u5165\u6405\u62cc\u597d\u7684\u9e21\u86cb\uff0c\u518d\u9505\u4e2d\u9759\u7f6e 5 \u79d2\u540e\uff0c\u7528\u9505\u94f2\u5c06\u86cb\u6db2\u4ece\u8fb9\u7f18\u7f13\u6162\u63a8\u5411\u4e2d\u95f4 \u7ffb\u7092\u81f3\u5927\u81f4\u51dd\u56fa\u540e\u5173\u706b\uff0c\u88c5\u76d8","title":"\u64cd\u4f5c"},{"location":"dishes/vegetable_dish/%E7%82%92%E6%BB%91%E8%9B%8B/%E7%82%92%E6%BB%91%E8%9B%8B/#_5","text":"\u6700\u540e\u53ef\u6839\u636e\u4e2a\u4eba\u53e3\u5473\u6492\u4e9b\u9ed1\u80e1\u6912\u6216\u8005\u76d0\u6765\u8c03\u5473\u3002 \u53c2\u8003\u8d44\u6599\uff1a \u751c\u741b\u5eda\u623f \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/vegetable_dish/%E7%83%A4%E8%8C%84%E5%AD%90/%E7%83%A4%E8%8C%84%E5%AD%90/","text":"\u70e4\u8304\u5b50\u7684\u505a\u6cd5 \u975e\u5e38\u7b80\u5355\u65b9\u4fbf\uff0c\u800c\u4e14\u9999\u6781\u4e86 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u8304\u5b50 \u98df\u7528\u6cb9 \u9171\u6cb9\uff08\u751f\u62bd\uff09 \u849c\u84c9 \u8fa3\u6912 \u5b5c\u7136 \u98df\u7528\u76d0 \u8ba1\u7b97 \u6309\u7167\u4e24\u4e2a\u4eba\u7684\u4efd\u91cf\uff1a \u8304\u5b50 1 \u4e2a \uff08\u5927\u7ea6 200g\uff09 \u98df\u7528\u6cb9 20-30 \u6beb\u5347 \u9171\u6cb9 4-6 \u514b \u5c0f\u7c73\u6912 1 \u4e2a \uff0820g \u5de6\u53f3\uff09 \u849c\u84c9 3-4 \u74e3 \u5b5c\u7136 1-3 \u514b \u98df\u7528\u76d0 0.5-2 \u514b \u64cd\u4f5c \u5c06\u9171\u6cb9\u3001\u5b5c\u7136\u3001\u98df\u7528\u76d0\u548c\u5207\u788e\u7684\u5c0f\u7c73\u6912\u7f6e\u4e8e\u7897\u4e2d\uff0c\u5747\u5300\u6405\u62cc\u5907\u7528 \u8304\u5b50\u6d17\u51c0\uff0c\u7528\u7eb8\u5dfe\u64e6\u5e72\u8868\u9762\u7684\u6c34\u5206 \u7528\u53c9\u5b50\u5728\u8304\u5b50\u7684\u4e00\u4fa7\u624e 4-8 \u4e0b \u4f7f\u7528 15-25ml \u7684\u98df\u7528\u6cb9\u6d82\u6ee1\u8304\u5b50\u8868\u9762 \u5c06\u70e4\u7bb1\u6e29\u5ea6\u8bbe\u7f6e\u4e3a 200\u2103 \uff08\u6253\u5f00\u70e4\u7bb1\u98ce\u6247 \u5927\u706b\uff09\uff0c\u9884\u70ed 2 \u5206\u949f \u5c06\u8304\u5b50\u653e\u5165\u70e4\u7bb1\u4e2d\u5c42\u6216\u8005\u4e0a\u5c42\uff0c\u70e4\u5236 12-15 \u5206\u949f \uff08\u8304\u5b50\u8868\u9762\u6709\u8936\u76b1\uff0c\u4e14\u80fd\u6309\u538b 0.3-0.5cm \u7684\u6df1\u5ea6\u5373\u53ef\uff09 \u53d6\u51fa\u8304\u5b50\uff0c\u7528\u5200\u8304\u5b50\u4e0a\u7ad6\u7740\u5212\u4e00\u4e2a\u53e3\u5b50\u3002\u53e3\u5b50\u5c45\u4e2d\uff0c\u4e0a\u4e0b\u8ddd 1-1.5cm \u7528\u5c0f\u5200\u6216\u8005\u53c9\u5b50\u4f38\u5165\u53e3\u5b50\uff0c\u7ad6\u7740\u5207\u5272\u8304\u5b50\u5185\u90e8 \u5c06\u53e3\u5b50\u5fae\u5fae\u63b0\u5f00\uff0c\u5012\u5165\u7b2c\u4e00\u6b65\u51c6\u5907\u7684\u9171\u6599 \u518d\u6b21\u5c06\u8304\u5b50\u653e\u5165\u70e4\u7bb1\uff0c\u5c06\u70e4\u7bb1\u6e29\u5ea6\u8bbe\u7f6e\u4e3a 200\u2103 \uff0c\u70e4\u5236 4-7 \u5206\u949f \u53d6\u51fa\uff0c\u5173\u95ed\u70e4\u7bb1\u7535\u6e90 \u9644\u52a0\u5185\u5bb9 \u6700\u7ec8\u6210\u54c1\u548c\u697c\u4e0b\u70e7\u70e4\u644a\u7684\u70e4\u8304\u5b50\u5dee\u4e0d\u591a\uff0c\u592a\u9999\u4e86\uff01 \u6ce8\u610f\u4e8b\u9879\uff1a \u8304\u5b50\u8868\u9762\u6709\u6c34\u5206\u3001\u672a\u6d82\u6ee1\u98df\u7528\u6cb9\u6216\u672a\u4f7f\u7528\u53c9\u5b50\u624e\u5b54\u53ef\u80fd\u5bfc\u81f4 \u8304\u5b50\u5728\u70e4\u5236\u7684\u8fc7\u7a0b\u4e2d\u7206\u88c2 \u53ef\u4ee5\u6539\u8fdb\u7684\u73af\u8282\uff1a \u7b2c\u4e00\u6b21\u7528\u5200\u5212\u53e3\u5b50\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u76f4\u63a5\u5c06\u8304\u5b50\u7ad6\u76f4\u5207\u6210\u4e24\u534a\uff0c\u7136\u540e\u5207\u5272\u51fa\u7eb9\u8def\u540e\u6d82\u62b9\u4e0a\u9171\u6599 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u70e4\u8304\u5b50"},{"location":"dishes/vegetable_dish/%E7%83%A4%E8%8C%84%E5%AD%90/%E7%83%A4%E8%8C%84%E5%AD%90/#_1","text":"\u975e\u5e38\u7b80\u5355\u65b9\u4fbf\uff0c\u800c\u4e14\u9999\u6781\u4e86","title":"\u70e4\u8304\u5b50\u7684\u505a\u6cd5"},{"location":"dishes/vegetable_dish/%E7%83%A4%E8%8C%84%E5%AD%90/%E7%83%A4%E8%8C%84%E5%AD%90/#_2","text":"\u8304\u5b50 \u98df\u7528\u6cb9 \u9171\u6cb9\uff08\u751f\u62bd\uff09 \u849c\u84c9 \u8fa3\u6912 \u5b5c\u7136 \u98df\u7528\u76d0","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/vegetable_dish/%E7%83%A4%E8%8C%84%E5%AD%90/%E7%83%A4%E8%8C%84%E5%AD%90/#_3","text":"\u6309\u7167\u4e24\u4e2a\u4eba\u7684\u4efd\u91cf\uff1a \u8304\u5b50 1 \u4e2a \uff08\u5927\u7ea6 200g\uff09 \u98df\u7528\u6cb9 20-30 \u6beb\u5347 \u9171\u6cb9 4-6 \u514b \u5c0f\u7c73\u6912 1 \u4e2a \uff0820g \u5de6\u53f3\uff09 \u849c\u84c9 3-4 \u74e3 \u5b5c\u7136 1-3 \u514b \u98df\u7528\u76d0 0.5-2 \u514b","title":"\u8ba1\u7b97"},{"location":"dishes/vegetable_dish/%E7%83%A4%E8%8C%84%E5%AD%90/%E7%83%A4%E8%8C%84%E5%AD%90/#_4","text":"\u5c06\u9171\u6cb9\u3001\u5b5c\u7136\u3001\u98df\u7528\u76d0\u548c\u5207\u788e\u7684\u5c0f\u7c73\u6912\u7f6e\u4e8e\u7897\u4e2d\uff0c\u5747\u5300\u6405\u62cc\u5907\u7528 \u8304\u5b50\u6d17\u51c0\uff0c\u7528\u7eb8\u5dfe\u64e6\u5e72\u8868\u9762\u7684\u6c34\u5206 \u7528\u53c9\u5b50\u5728\u8304\u5b50\u7684\u4e00\u4fa7\u624e 4-8 \u4e0b \u4f7f\u7528 15-25ml \u7684\u98df\u7528\u6cb9\u6d82\u6ee1\u8304\u5b50\u8868\u9762 \u5c06\u70e4\u7bb1\u6e29\u5ea6\u8bbe\u7f6e\u4e3a 200\u2103 \uff08\u6253\u5f00\u70e4\u7bb1\u98ce\u6247 \u5927\u706b\uff09\uff0c\u9884\u70ed 2 \u5206\u949f \u5c06\u8304\u5b50\u653e\u5165\u70e4\u7bb1\u4e2d\u5c42\u6216\u8005\u4e0a\u5c42\uff0c\u70e4\u5236 12-15 \u5206\u949f \uff08\u8304\u5b50\u8868\u9762\u6709\u8936\u76b1\uff0c\u4e14\u80fd\u6309\u538b 0.3-0.5cm \u7684\u6df1\u5ea6\u5373\u53ef\uff09 \u53d6\u51fa\u8304\u5b50\uff0c\u7528\u5200\u8304\u5b50\u4e0a\u7ad6\u7740\u5212\u4e00\u4e2a\u53e3\u5b50\u3002\u53e3\u5b50\u5c45\u4e2d\uff0c\u4e0a\u4e0b\u8ddd 1-1.5cm \u7528\u5c0f\u5200\u6216\u8005\u53c9\u5b50\u4f38\u5165\u53e3\u5b50\uff0c\u7ad6\u7740\u5207\u5272\u8304\u5b50\u5185\u90e8 \u5c06\u53e3\u5b50\u5fae\u5fae\u63b0\u5f00\uff0c\u5012\u5165\u7b2c\u4e00\u6b65\u51c6\u5907\u7684\u9171\u6599 \u518d\u6b21\u5c06\u8304\u5b50\u653e\u5165\u70e4\u7bb1\uff0c\u5c06\u70e4\u7bb1\u6e29\u5ea6\u8bbe\u7f6e\u4e3a 200\u2103 \uff0c\u70e4\u5236 4-7 \u5206\u949f \u53d6\u51fa\uff0c\u5173\u95ed\u70e4\u7bb1\u7535\u6e90","title":"\u64cd\u4f5c"},{"location":"dishes/vegetable_dish/%E7%83%A4%E8%8C%84%E5%AD%90/%E7%83%A4%E8%8C%84%E5%AD%90/#_5","text":"\u6700\u7ec8\u6210\u54c1\u548c\u697c\u4e0b\u70e7\u70e4\u644a\u7684\u70e4\u8304\u5b50\u5dee\u4e0d\u591a\uff0c\u592a\u9999\u4e86\uff01 \u6ce8\u610f\u4e8b\u9879\uff1a \u8304\u5b50\u8868\u9762\u6709\u6c34\u5206\u3001\u672a\u6d82\u6ee1\u98df\u7528\u6cb9\u6216\u672a\u4f7f\u7528\u53c9\u5b50\u624e\u5b54\u53ef\u80fd\u5bfc\u81f4 \u8304\u5b50\u5728\u70e4\u5236\u7684\u8fc7\u7a0b\u4e2d\u7206\u88c2 \u53ef\u4ee5\u6539\u8fdb\u7684\u73af\u8282\uff1a \u7b2c\u4e00\u6b21\u7528\u5200\u5212\u53e3\u5b50\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u76f4\u63a5\u5c06\u8304\u5b50\u7ad6\u76f4\u5207\u6210\u4e24\u534a\uff0c\u7136\u540e\u5207\u5272\u51fa\u7eb9\u8def\u540e\u6d82\u62b9\u4e0a\u9171\u6599 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/vegetable_dish/%E7%B3%96%E6%8B%8C%E8%A5%BF%E7%BA%A2%E6%9F%BF/%E7%B3%96%E6%8B%8C%E8%A5%BF%E7%BA%A2%E6%9F%BF/","text":"\u7cd6\u62cc\u897f\u7ea2\u67ff\u7684\u505a\u6cd5 \u65b0\u9c9c\u53ef\u53e3\uff0c\u5236\u4f5c\u7b80\u4fbf\uff0c\u8425\u517b\u4ef7\u503c\u9ad8\uff0c\u9002\u5408\u590f\u5b63\u98df\u7528\uff0c\u5bb6\u5ead\u9910\u684c\u4e0a\u7684\u4e00\u9053\u7f8e\u5473\u51c9\u83dc\u3002\u897f\u7ea2\u67ff\u542b\u6709\u5927\u91cf\u7684\u7ef4\u751f\u7d20 C, \u505a\u6cd5\u7b80\u5355 \u51e0\u5206\u949f\u5c31\u53ef\u5b8c\u6210\u3002 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u897f\u7ea2\u67ff \u767d\u7802\u7cd6 \u51b0\u7bb1 \u8ba1\u7b97 \u4eba\u6570 2 \u81f3 3 \u4eba\u65f6\u6700\u4f73 \u897f\u7ea2\u67ff\u7684\u6570\u91cf = \u4eba\u6570 * 1 \u4e2a \u767d\u7802\u7cd6 = 20g \u5de6\u53f3 \u6bcf\u4efd\uff1a \u897f\u7ea2\u67ff 2 \u4e2a\uff08\u6bcf\u4e2a\u897f\u7ea2\u67ff\u7ea6 100g\uff0c\u5171 200g\uff09 \u767d\u7802\u7cd6 20g \u5de6\u53f3 \u64cd\u4f5c \u897f\u7ea2\u67ff\u5927\u5378\u516b\u5757\uff0c\u53bb\u6389\u5934\u90e8\u6839\u8482\u90e8\uff0c\u5907\u7528 \u62ff\u51fa\u767d\u7802\u7cd6\uff0c\u5907\u7528 \u5168\u90e8\u5207\u597d\u540e\uff0c\u5c06\u897f\u7ea2\u67ff\u5728\u76d8\u5b50\u4e2d\u5747\u5300\u7801\u4e00\u5708 \u6492\u4e0a\u767d\u7cd6\uff0c\u4e00\u76d8\u51c9\u62cc\u897f\u7ea2\u67ff\u5c31\u597d\u4e86\uff0c\u8425\u517b\u7f8e\u5473\uff0c\u9178\u751c\u723d\u53e3\uff0c\u590f\u65e5\u89e3\u6691\u53c8\u89e3\u817b \u653e\u5165\u51b0\u7bb1\u51b7\u85cf 10 \u5206\u949f\u53e3\u611f\u6700\u4f73 \u9644\u52a0\u5185\u5bb9 \u5728\u5236\u4f5c\u8fc7\u7a0b\u4e2d \u8bf7\u60a8\u5c0f\u5fc3\u4f7f\u7528\u5200\u5177\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u7cd6\u62cc\u897f\u7ea2\u67ff"},{"location":"dishes/vegetable_dish/%E7%B3%96%E6%8B%8C%E8%A5%BF%E7%BA%A2%E6%9F%BF/%E7%B3%96%E6%8B%8C%E8%A5%BF%E7%BA%A2%E6%9F%BF/#_1","text":"\u65b0\u9c9c\u53ef\u53e3\uff0c\u5236\u4f5c\u7b80\u4fbf\uff0c\u8425\u517b\u4ef7\u503c\u9ad8\uff0c\u9002\u5408\u590f\u5b63\u98df\u7528\uff0c\u5bb6\u5ead\u9910\u684c\u4e0a\u7684\u4e00\u9053\u7f8e\u5473\u51c9\u83dc\u3002\u897f\u7ea2\u67ff\u542b\u6709\u5927\u91cf\u7684\u7ef4\u751f\u7d20 C, \u505a\u6cd5\u7b80\u5355 \u51e0\u5206\u949f\u5c31\u53ef\u5b8c\u6210\u3002","title":"\u7cd6\u62cc\u897f\u7ea2\u67ff\u7684\u505a\u6cd5"},{"location":"dishes/vegetable_dish/%E7%B3%96%E6%8B%8C%E8%A5%BF%E7%BA%A2%E6%9F%BF/%E7%B3%96%E6%8B%8C%E8%A5%BF%E7%BA%A2%E6%9F%BF/#_2","text":"\u897f\u7ea2\u67ff \u767d\u7802\u7cd6 \u51b0\u7bb1","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/vegetable_dish/%E7%B3%96%E6%8B%8C%E8%A5%BF%E7%BA%A2%E6%9F%BF/%E7%B3%96%E6%8B%8C%E8%A5%BF%E7%BA%A2%E6%9F%BF/#_3","text":"\u4eba\u6570 2 \u81f3 3 \u4eba\u65f6\u6700\u4f73 \u897f\u7ea2\u67ff\u7684\u6570\u91cf = \u4eba\u6570 * 1 \u4e2a \u767d\u7802\u7cd6 = 20g \u5de6\u53f3 \u6bcf\u4efd\uff1a \u897f\u7ea2\u67ff 2 \u4e2a\uff08\u6bcf\u4e2a\u897f\u7ea2\u67ff\u7ea6 100g\uff0c\u5171 200g\uff09 \u767d\u7802\u7cd6 20g \u5de6\u53f3","title":"\u8ba1\u7b97"},{"location":"dishes/vegetable_dish/%E7%B3%96%E6%8B%8C%E8%A5%BF%E7%BA%A2%E6%9F%BF/%E7%B3%96%E6%8B%8C%E8%A5%BF%E7%BA%A2%E6%9F%BF/#_4","text":"\u897f\u7ea2\u67ff\u5927\u5378\u516b\u5757\uff0c\u53bb\u6389\u5934\u90e8\u6839\u8482\u90e8\uff0c\u5907\u7528 \u62ff\u51fa\u767d\u7802\u7cd6\uff0c\u5907\u7528 \u5168\u90e8\u5207\u597d\u540e\uff0c\u5c06\u897f\u7ea2\u67ff\u5728\u76d8\u5b50\u4e2d\u5747\u5300\u7801\u4e00\u5708 \u6492\u4e0a\u767d\u7cd6\uff0c\u4e00\u76d8\u51c9\u62cc\u897f\u7ea2\u67ff\u5c31\u597d\u4e86\uff0c\u8425\u517b\u7f8e\u5473\uff0c\u9178\u751c\u723d\u53e3\uff0c\u590f\u65e5\u89e3\u6691\u53c8\u89e3\u817b \u653e\u5165\u51b0\u7bb1\u51b7\u85cf 10 \u5206\u949f\u53e3\u611f\u6700\u4f73","title":"\u64cd\u4f5c"},{"location":"dishes/vegetable_dish/%E7%B3%96%E6%8B%8C%E8%A5%BF%E7%BA%A2%E6%9F%BF/%E7%B3%96%E6%8B%8C%E8%A5%BF%E7%BA%A2%E6%9F%BF/#_5","text":"\u5728\u5236\u4f5c\u8fc7\u7a0b\u4e2d \u8bf7\u60a8\u5c0f\u5fc3\u4f7f\u7528\u5200\u5177\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/vegetable_dish/%E8%8F%A0%E8%8F%9C%E7%82%92%E9%B8%A1%E8%9B%8B/%E8%8F%A0%E8%8F%9C%E7%82%92%E9%B8%A1%E8%9B%8B/","text":"\u83e0\u83dc\u7092\u9e21\u86cb\u7684\u505a\u6cd5 \u8fd9\u9053\u83dc\u96be\u5ea6\u7cfb\u6570\u7b80\u5355\uff0c\u8425\u517b\u4e30\u5bcc\u3002 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u83e0\u83dc \u9e21\u86cb \u98df\u7528\u6cb9 \u98df\u7528\u76d0 \u8ba1\u7b97 \u6309\u7167 1 \u4eba\u7684\u4efd\u91cf\uff1a \u83e0\u83dc 350g \u9e21\u86cb 2 \u4e2a \u98df\u7528\u6cb9 15ml \u98df\u7528\u76d0 5g \u64cd\u4f5c \u83e0\u83dc\u53bb\u6839\uff0c\u6d17\u51c0\uff0c\u653e\u5728\u7bee\u5b50\u91cc\uff0c\u6ca5\u6c34 \u5c06\u9e21\u86cb\u6253\u5165\u7897\u4e2d\uff0c\u6405\u5300 \u70ed\u9505\uff0c\u52a0\u5165 10ml \u6cb9 \u6cb9\u70ed\u540e\uff0c\u5012\u5165\u9e21\u86cb\u6db2\uff0c\u4e2d\u706b\u7ffb\u7092 15 \u79d2\uff0c\u5148\u714e\u6210\u86cb\u997c\uff0c\u7136\u540e\u518d\u7528\u9505\u94f2\u5207\u6210\u5c0f\u5757 \u5173\u706b\uff0c\u5c06\u9e21\u86cb\u5757 \u76db\u5230\u76d8\u5b50\u4e2d\uff0c\u4e0d\u8981\u6d17\u9505 \u91cd\u65b0\u5f00\u706b\uff0c\u5012\u5165 5ml \u6cb9\uff0c\u6cb9\u70ed\u540e\uff0c\u653e\u5165\u83e0\u83dc\uff0c\u5927\u706b \u7ffb\u7092 15 \u79d2\u540e\uff0c\u5012\u5165\u9e21\u86cb\u5757\uff0c\u7ffb\u7092\u5747\u5300 \u52a0\u5165 5g \u76d0\u3001100ml \u996e\u7528\u6c34\uff0c\u5927\u706b \u7ffb\u7092 10 \u79d2 \u5173\u706b\uff0c\u76db\u76d8 \u9644\u52a0\u5185\u5bb9 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request\u3002","title":"\u83e0\u83dc\u7092\u9e21\u86cb"},{"location":"dishes/vegetable_dish/%E8%8F%A0%E8%8F%9C%E7%82%92%E9%B8%A1%E8%9B%8B/%E8%8F%A0%E8%8F%9C%E7%82%92%E9%B8%A1%E8%9B%8B/#_1","text":"\u8fd9\u9053\u83dc\u96be\u5ea6\u7cfb\u6570\u7b80\u5355\uff0c\u8425\u517b\u4e30\u5bcc\u3002","title":"\u83e0\u83dc\u7092\u9e21\u86cb\u7684\u505a\u6cd5"},{"location":"dishes/vegetable_dish/%E8%8F%A0%E8%8F%9C%E7%82%92%E9%B8%A1%E8%9B%8B/%E8%8F%A0%E8%8F%9C%E7%82%92%E9%B8%A1%E8%9B%8B/#_2","text":"\u83e0\u83dc \u9e21\u86cb \u98df\u7528\u6cb9 \u98df\u7528\u76d0","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/vegetable_dish/%E8%8F%A0%E8%8F%9C%E7%82%92%E9%B8%A1%E8%9B%8B/%E8%8F%A0%E8%8F%9C%E7%82%92%E9%B8%A1%E8%9B%8B/#_3","text":"\u6309\u7167 1 \u4eba\u7684\u4efd\u91cf\uff1a \u83e0\u83dc 350g \u9e21\u86cb 2 \u4e2a \u98df\u7528\u6cb9 15ml \u98df\u7528\u76d0 5g","title":"\u8ba1\u7b97"},{"location":"dishes/vegetable_dish/%E8%8F%A0%E8%8F%9C%E7%82%92%E9%B8%A1%E8%9B%8B/%E8%8F%A0%E8%8F%9C%E7%82%92%E9%B8%A1%E8%9B%8B/#_4","text":"\u83e0\u83dc\u53bb\u6839\uff0c\u6d17\u51c0\uff0c\u653e\u5728\u7bee\u5b50\u91cc\uff0c\u6ca5\u6c34 \u5c06\u9e21\u86cb\u6253\u5165\u7897\u4e2d\uff0c\u6405\u5300 \u70ed\u9505\uff0c\u52a0\u5165 10ml \u6cb9 \u6cb9\u70ed\u540e\uff0c\u5012\u5165\u9e21\u86cb\u6db2\uff0c\u4e2d\u706b\u7ffb\u7092 15 \u79d2\uff0c\u5148\u714e\u6210\u86cb\u997c\uff0c\u7136\u540e\u518d\u7528\u9505\u94f2\u5207\u6210\u5c0f\u5757 \u5173\u706b\uff0c\u5c06\u9e21\u86cb\u5757 \u76db\u5230\u76d8\u5b50\u4e2d\uff0c\u4e0d\u8981\u6d17\u9505 \u91cd\u65b0\u5f00\u706b\uff0c\u5012\u5165 5ml \u6cb9\uff0c\u6cb9\u70ed\u540e\uff0c\u653e\u5165\u83e0\u83dc\uff0c\u5927\u706b \u7ffb\u7092 15 \u79d2\u540e\uff0c\u5012\u5165\u9e21\u86cb\u5757\uff0c\u7ffb\u7092\u5747\u5300 \u52a0\u5165 5g \u76d0\u3001100ml \u996e\u7528\u6c34\uff0c\u5927\u706b \u7ffb\u7092 10 \u79d2 \u5173\u706b\uff0c\u76db\u76d8","title":"\u64cd\u4f5c"},{"location":"dishes/vegetable_dish/%E8%8F%A0%E8%8F%9C%E7%82%92%E9%B8%A1%E8%9B%8B/%E8%8F%A0%E8%8F%9C%E7%82%92%E9%B8%A1%E8%9B%8B/#_5","text":"\u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request\u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/vegetable_dish/%E8%99%8E%E7%9A%AE%E9%9D%92%E6%A4%92/%E8%99%8E%E7%9A%AE%E9%9D%92%E6%A4%92/","text":"\u864e\u76ae\u9752\u6912\u7684\u505a\u6cd5 \u5fc5\u5907\u7684\u539f\u6599\u548c\u5de5\u5177 \u9752\u6912\u82e5\u5e72\uff0c\u5927\u849c 2 \u74e3\uff0c\u9999\u918b 15ml\uff0c\u767d\u7cd6 15g\uff0c\u751f\u62bd 5ml\uff0c\u6cb9 15ml\uff0c\u76d0\u5c11\u8bb8\u3002 \u5927\u9752\u6912 \u5927\u849c \u767d\u7cd6\uff08\u7075\u9b42\uff09 \u918b \u751f\u62bd \u76d0 \u7835\u6216\u8005\u6709\u4e00\u5b9a\u6df1\u5ea6\u7684\u7897 \u8ba1\u7b97 \u9752\u6912 5 \u4e2a \u957f\u5ea6\u5728 10-15cm \u7684\u6700\u4e3a\u5408\u9002 \u5927\u849c 2-3 \u74e3 \u767d\u7cd6 15g \u751f\u62bd 15ml \u548c\u767d\u7cd6\u7b49\u91cf \u64cd\u4f5c \u51c6\u5907\u5de5\u4f5c\uff1a \u53bb\u6389\u9752\u6912\u8482\uff0c\u7528\u81ea\u6765\u6c34\u51b2\u6d17\u5e72\u51c0\u3002 \u9752\u6912\u5207\u957f\u7247\uff0c\u5e73\u5747\u4e00\u4e2a\u9752\u6912\u7eb5\u5411\u5207\u6210 3-4 \u7247\u5373\u53ef\u3002 \u5927\u849c\u53bb\u76ae\uff0c\u5207\u6210\u788e\u672b\uff0c\u4f53\u79ef\u5728 2mm x 2mm x 2mm \u5373\u53ef\u3002 \u8c03\u6599 1\uff1a \u62ff\u4e00\u4e2a\u5c0f\u7897\u5012\u5165 20ml \u6cb9\uff0c\u5c06\u5927\u849c\u672b\u653e\u5165\u5176\u4e2d\u3002 \u8c03\u6599 2\uff1a \u767d\u7cd6\u3001\u751f\u62bd\u3001\u918b\u3001\u76d0\u5168\u90e8\u5012\u5165\u7835\uff08\u7897\uff09\u7b49\u5bb9\u5668 \u70f9\u996a\uff1a \u5c06'\u8c03\u6599 1'\u5012\u5165\u9505\u4e2d\uff0c\u5f00\u706b\u52a0\u70ed 5 \u6210\u653e\u5165\u9752\u6912\u3002\uff08\u9752\u6912\u7247\u4e0d\u8981\u53e0\u5728\u4e00\u8d77\uff0c\u5355\u72ec\u6210\u7247\u653e\u7f6e\u9505\u4e2d\uff09 \u7528\u9505\u94f2\u4e0d\u505c\u7684\u6309\u538b\u9752\u6912\uff0c\u5408\u9002\u7684\u65f6\u5019\u7ffb\u9762\u3002 \u5f85\u9752\u6912\u8868\u76ae\u51fa\u73b0\u8936\u76b1\u65f6\uff0c\u5012\u5165'\u8c03\u6599 2'\uff0c\u540c\u65f6\u52a0\u5927\u706b\u5019\uff0c\u7ffb\u7092\u3002 30s \u540e\u5373\u53ef\u51fa\u9505\u76db\u5165\u76d8\u4e2d\u3002 \u9644\u52a0\u5185\u5bb9 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u864e\u76ae\u9752\u6912"},{"location":"dishes/vegetable_dish/%E8%99%8E%E7%9A%AE%E9%9D%92%E6%A4%92/%E8%99%8E%E7%9A%AE%E9%9D%92%E6%A4%92/#_1","text":"","title":"\u864e\u76ae\u9752\u6912\u7684\u505a\u6cd5"},{"location":"dishes/vegetable_dish/%E8%99%8E%E7%9A%AE%E9%9D%92%E6%A4%92/%E8%99%8E%E7%9A%AE%E9%9D%92%E6%A4%92/#_2","text":"\u9752\u6912\u82e5\u5e72\uff0c\u5927\u849c 2 \u74e3\uff0c\u9999\u918b 15ml\uff0c\u767d\u7cd6 15g\uff0c\u751f\u62bd 5ml\uff0c\u6cb9 15ml\uff0c\u76d0\u5c11\u8bb8\u3002 \u5927\u9752\u6912 \u5927\u849c \u767d\u7cd6\uff08\u7075\u9b42\uff09 \u918b \u751f\u62bd \u76d0 \u7835\u6216\u8005\u6709\u4e00\u5b9a\u6df1\u5ea6\u7684\u7897","title":"\u5fc5\u5907\u7684\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/vegetable_dish/%E8%99%8E%E7%9A%AE%E9%9D%92%E6%A4%92/%E8%99%8E%E7%9A%AE%E9%9D%92%E6%A4%92/#_3","text":"\u9752\u6912 5 \u4e2a \u957f\u5ea6\u5728 10-15cm \u7684\u6700\u4e3a\u5408\u9002 \u5927\u849c 2-3 \u74e3 \u767d\u7cd6 15g \u751f\u62bd 15ml \u548c\u767d\u7cd6\u7b49\u91cf","title":"\u8ba1\u7b97"},{"location":"dishes/vegetable_dish/%E8%99%8E%E7%9A%AE%E9%9D%92%E6%A4%92/%E8%99%8E%E7%9A%AE%E9%9D%92%E6%A4%92/#_4","text":"\u51c6\u5907\u5de5\u4f5c\uff1a \u53bb\u6389\u9752\u6912\u8482\uff0c\u7528\u81ea\u6765\u6c34\u51b2\u6d17\u5e72\u51c0\u3002 \u9752\u6912\u5207\u957f\u7247\uff0c\u5e73\u5747\u4e00\u4e2a\u9752\u6912\u7eb5\u5411\u5207\u6210 3-4 \u7247\u5373\u53ef\u3002 \u5927\u849c\u53bb\u76ae\uff0c\u5207\u6210\u788e\u672b\uff0c\u4f53\u79ef\u5728 2mm x 2mm x 2mm \u5373\u53ef\u3002 \u8c03\u6599 1\uff1a \u62ff\u4e00\u4e2a\u5c0f\u7897\u5012\u5165 20ml \u6cb9\uff0c\u5c06\u5927\u849c\u672b\u653e\u5165\u5176\u4e2d\u3002 \u8c03\u6599 2\uff1a \u767d\u7cd6\u3001\u751f\u62bd\u3001\u918b\u3001\u76d0\u5168\u90e8\u5012\u5165\u7835\uff08\u7897\uff09\u7b49\u5bb9\u5668 \u70f9\u996a\uff1a \u5c06'\u8c03\u6599 1'\u5012\u5165\u9505\u4e2d\uff0c\u5f00\u706b\u52a0\u70ed 5 \u6210\u653e\u5165\u9752\u6912\u3002\uff08\u9752\u6912\u7247\u4e0d\u8981\u53e0\u5728\u4e00\u8d77\uff0c\u5355\u72ec\u6210\u7247\u653e\u7f6e\u9505\u4e2d\uff09 \u7528\u9505\u94f2\u4e0d\u505c\u7684\u6309\u538b\u9752\u6912\uff0c\u5408\u9002\u7684\u65f6\u5019\u7ffb\u9762\u3002 \u5f85\u9752\u6912\u8868\u76ae\u51fa\u73b0\u8936\u76b1\u65f6\uff0c\u5012\u5165'\u8c03\u6599 2'\uff0c\u540c\u65f6\u52a0\u5927\u706b\u5019\uff0c\u7ffb\u7092\u3002 30s \u540e\u5373\u53ef\u51fa\u9505\u76db\u5165\u76d8\u4e2d\u3002","title":"\u64cd\u4f5c"},{"location":"dishes/vegetable_dish/%E8%99%8E%E7%9A%AE%E9%9D%92%E6%A4%92/%E8%99%8E%E7%9A%AE%E9%9D%92%E6%A4%92/#_5","text":"\u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/vegetable_dish/%E9%B8%A1%E8%9B%8B%E7%BE%B9/%E5%BE%AE%E6%B3%A2%E7%82%89%E9%B8%A1%E8%9B%8B%E7%BE%B9/","text":"\u5fae\u6ce2\u7089\u9e21\u86cb\u7fb9\u7684\u505a\u6cd5 \u5fae\u6ce2\u7089\u9e21\u86cb\u7fb9\u662f\u4e00\u4e2a\u7b80\u5355\u6613\u5236\u4f5c\u7684\u83dc\u3002\u975e\u5e38\u9002\u5408\u591c\u95f4\u7a81\u7136\u997f\u4e86\u7684\u65f6\u5019\u5145\u5f53\u591c\u5bb5\uff0c\u5feb\u6377\u7b80\u5355\u3002 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u4eba\u6570\u6700\u5927\u4e3a 3\u3002\u8d85\u8fc7 3 \u4eba\u7684\u60c5\u51b5\u4e0b\uff0c\u9700\u8981\u5206\u591a\u6b21\u5236\u4f5c\u3002 \u9e21\u86cb \u6c34 \u8ba1\u7b97 \u9e21\u86cb 2 \u4e2a * \u4eba\u6570 \u6c34 120ml * \u4eba\u6570 \u867e\u76ae 10 \u4e2a * \u4eba\u6570\uff08\u53ef\u9009\uff09 \u9171\u6cb9\uff08\u53ef\u9009\uff09 \u64cd\u4f5c \u5c06\u9e21\u86cb\u6253\u5165\u53ef\u4f7f\u7528\u5fae\u6ce2\u7089\u52a0\u70ed\u7684\u9676\u74f7\u7897\u4e2d\uff0c\u4f7f\u7528\u7b77\u5b50\u5c06\u5176\u6253\u6563\u3002 \u52a0\u5165\u6c34\uff0c\u6405\u62cc\u5747\u5300\u3002 \u5c06\u867e\u76ae\u653e\u5165\u7897\u4e2d\uff0c\u6405\u62cc\u5747\u5300\uff0c\u4fdd\u8bc1\u6240\u6709\u867e\u76ae\u4e0d\u4f1a\u5806\u79ef\u5728\u4e00\u8d77\u3002 \u5c06\u6b64\u7897\u53ca\u5185\u5bb9\u7269\u653e\u5165\u5fae\u6ce2\u7089\u4e2d\uff0c\u9ad8\u706b\u52a0\u70ed 1-1.5 \u5206\u949f\u3002 \u5c0f\u5fc3\u5730\u4ece\u5fae\u6ce2\u7089\u4e2d\u62ff\u51fa\u7897\uff08\u771f\u7684\u5f88\u70eb\uff09\u3002 \u5982\u679c\u9009\u62e9\u653e\u5165\u9171\u6cb9\uff0c\u5219\u786e\u4fdd\u9171\u6cb9\u5728\u9e21\u86cb\u7fb9\u8868\u9762\u6d41\u52a8\u540e\u80fd\u4ee5\u6700\u8584\u7684\u5f62\u5f0f\u6cbe\u6ee1\u9e21\u86cb\u7fb9\u8868\u9762\u5373\u53ef\u3002 \u5f00\u5fc3\u7684\u4eab\u53d7\u9e21\u86cb\u7fb9 \u9644\u52a0\u5185\u5bb9 \u4e00\u5b9a\u8981\u786e\u4fdd\u5c06\u9e21\u86cb\u6253\u6563\uff0c\u5426\u5219\u53ef\u80fd\u4f1a\u53d1\u751f\u8f7b\u5ea6\u9e21\u86cb\u7206\u70b8\u3002 \u9e21\u86cb\u548c\u6c34\u4e0d\u80fd\u8d85\u8fc7\u7897\u5bb9\u91cf\u7684 2/3\uff0c\u5426\u5219\u53ef\u80fd\u53d1\u751f\u6ea2\u51fa\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u5fae\u6ce2\u7089\u9e21\u86cb\u7fb9"},{"location":"dishes/vegetable_dish/%E9%B8%A1%E8%9B%8B%E7%BE%B9/%E5%BE%AE%E6%B3%A2%E7%82%89%E9%B8%A1%E8%9B%8B%E7%BE%B9/#_1","text":"\u5fae\u6ce2\u7089\u9e21\u86cb\u7fb9\u662f\u4e00\u4e2a\u7b80\u5355\u6613\u5236\u4f5c\u7684\u83dc\u3002\u975e\u5e38\u9002\u5408\u591c\u95f4\u7a81\u7136\u997f\u4e86\u7684\u65f6\u5019\u5145\u5f53\u591c\u5bb5\uff0c\u5feb\u6377\u7b80\u5355\u3002","title":"\u5fae\u6ce2\u7089\u9e21\u86cb\u7fb9\u7684\u505a\u6cd5"},{"location":"dishes/vegetable_dish/%E9%B8%A1%E8%9B%8B%E7%BE%B9/%E5%BE%AE%E6%B3%A2%E7%82%89%E9%B8%A1%E8%9B%8B%E7%BE%B9/#_2","text":"\u4eba\u6570\u6700\u5927\u4e3a 3\u3002\u8d85\u8fc7 3 \u4eba\u7684\u60c5\u51b5\u4e0b\uff0c\u9700\u8981\u5206\u591a\u6b21\u5236\u4f5c\u3002 \u9e21\u86cb \u6c34","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/vegetable_dish/%E9%B8%A1%E8%9B%8B%E7%BE%B9/%E5%BE%AE%E6%B3%A2%E7%82%89%E9%B8%A1%E8%9B%8B%E7%BE%B9/#_3","text":"\u9e21\u86cb 2 \u4e2a * \u4eba\u6570 \u6c34 120ml * \u4eba\u6570 \u867e\u76ae 10 \u4e2a * \u4eba\u6570\uff08\u53ef\u9009\uff09 \u9171\u6cb9\uff08\u53ef\u9009\uff09","title":"\u8ba1\u7b97"},{"location":"dishes/vegetable_dish/%E9%B8%A1%E8%9B%8B%E7%BE%B9/%E5%BE%AE%E6%B3%A2%E7%82%89%E9%B8%A1%E8%9B%8B%E7%BE%B9/#_4","text":"\u5c06\u9e21\u86cb\u6253\u5165\u53ef\u4f7f\u7528\u5fae\u6ce2\u7089\u52a0\u70ed\u7684\u9676\u74f7\u7897\u4e2d\uff0c\u4f7f\u7528\u7b77\u5b50\u5c06\u5176\u6253\u6563\u3002 \u52a0\u5165\u6c34\uff0c\u6405\u62cc\u5747\u5300\u3002 \u5c06\u867e\u76ae\u653e\u5165\u7897\u4e2d\uff0c\u6405\u62cc\u5747\u5300\uff0c\u4fdd\u8bc1\u6240\u6709\u867e\u76ae\u4e0d\u4f1a\u5806\u79ef\u5728\u4e00\u8d77\u3002 \u5c06\u6b64\u7897\u53ca\u5185\u5bb9\u7269\u653e\u5165\u5fae\u6ce2\u7089\u4e2d\uff0c\u9ad8\u706b\u52a0\u70ed 1-1.5 \u5206\u949f\u3002 \u5c0f\u5fc3\u5730\u4ece\u5fae\u6ce2\u7089\u4e2d\u62ff\u51fa\u7897\uff08\u771f\u7684\u5f88\u70eb\uff09\u3002 \u5982\u679c\u9009\u62e9\u653e\u5165\u9171\u6cb9\uff0c\u5219\u786e\u4fdd\u9171\u6cb9\u5728\u9e21\u86cb\u7fb9\u8868\u9762\u6d41\u52a8\u540e\u80fd\u4ee5\u6700\u8584\u7684\u5f62\u5f0f\u6cbe\u6ee1\u9e21\u86cb\u7fb9\u8868\u9762\u5373\u53ef\u3002 \u5f00\u5fc3\u7684\u4eab\u53d7\u9e21\u86cb\u7fb9","title":"\u64cd\u4f5c"},{"location":"dishes/vegetable_dish/%E9%B8%A1%E8%9B%8B%E7%BE%B9/%E5%BE%AE%E6%B3%A2%E7%82%89%E9%B8%A1%E8%9B%8B%E7%BE%B9/#_5","text":"\u4e00\u5b9a\u8981\u786e\u4fdd\u5c06\u9e21\u86cb\u6253\u6563\uff0c\u5426\u5219\u53ef\u80fd\u4f1a\u53d1\u751f\u8f7b\u5ea6\u9e21\u86cb\u7206\u70b8\u3002 \u9e21\u86cb\u548c\u6c34\u4e0d\u80fd\u8d85\u8fc7\u7897\u5bb9\u91cf\u7684 2/3\uff0c\u5426\u5219\u53ef\u80fd\u53d1\u751f\u6ea2\u51fa\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"dishes/vegetable_dish/%E9%B8%A1%E8%9B%8B%E7%BE%B9/%E9%B8%A1%E8%9B%8B%E7%BE%B9/","text":"\u9e21\u86cb\u7fb9\u7684\u505a\u6cd5 \u9e21\u86cb\u7fb9\uff0c\u53c8\u79f0\u6c34\u84b8\u86cb\uff0c\u4e0d\u9700\u8981\u51c6\u5907\u590d\u6742\u7684\u98df\u6750\uff0c\u662f\u4e00\u9053\u7b80\u5355\u5feb\u6377\u6613\u505a\u7684\u83dc\uff0c\u5f53\u65e9\u9910\u6216\u662f\u6b63\u9910\u90fd\u53ef\uff0c\u5236\u4f5c\u65f6\u957f\u7ea6\u4e3a 15 \u5206\u949f\u3002 \u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177 \u9e21\u86cb \u98df\u7528\u76d0 \u9999\u6cb9 \u751f\u62bd / \u5473\u6781\u9c9c \u767d\u918b\uff08\u53ef\u9009\uff09 \u8ba1\u7b97 \u6309\u7167 1 \u4eba\u7684\u4efd\u91cf\uff1a \u9e21\u86cb 2 \u4e2a \u98df\u7528\u76d0 3g \u767d\u918b 2ml \u9999\u6cb9 2-4ml \u751f\u62bd / \u5473\u6781\u9c9c 8ml \u64cd\u4f5c \u4e24\u4e2a\u9e21\u86cb\u653e\u5165\u7897\u4e2d\u6253\u6563 \u52a0\u5165\u98df\u7528\u76d0 3g\uff0c\u589e\u52a0\u5e95\u5473\uff08\u76d0\u8d77\u5230\u4e86\u91cd\u8981\u7684\u51dd\u56fa\u4f5c\u7528\uff09 \u52a0\u5165 2ml \u767d\u918b\uff0c\u53bb\u9664\u9e21\u86cb\u7684\u8165\u5473\uff08\u53ef\u9009\uff0c\u52a0\u5165\u7c73\u918b\u4e5f\u884c\uff0c\u4f46\u7c73\u918b\u7684\u989c\u8272\u4f1a\u4f7f\u9e21\u86cb\u5fae\u5fae\u53d1\u9ed1\uff09 \u5411\u7897\u4e2d\u52a0\u5165\u9e21\u86cb\u4f53\u79ef 1-1.5 \u500d\u7684\u7eaf\u51c0\u6c34\uff0c\u6405\u62cc\u5747\u5300\uff081 \u500d\u7684\u6c34\u9e21\u86cb\u66f4\u5f39\uff0c1.5 \u500d\u7684\u6c34\u9e21\u86cb\u66f4\u5ae9\uff09 \u8fc7\u6ee4\u86cb\u6db2\uff0c\u53bb\u6389\u86cb\u6db2\u4e2d\u7684\u6d6e\u6cab\uff08\u53ef\u9009\uff0c\u4e0d\u8fc7\u6ee4\u84b8\u51fa\u6765\u7684\u86cb\u4f1a\u6709\u6c14\u6ce1\uff0c\u4e0d\u597d\u770b\uff09 \u5411\u4efb\u610f\u4e00\u53e3\u9505\u4e2d\u52a0\u5165 50ml \u6e05\u6c34\uff0c\u6c34\u70e7\u5f00\u540e\uff0c\u653e\u5165\u76db\u6709\u9e21\u86cb\u7684\u7897 \u84b8 10 \u5206\u949f \u540e\uff0c\u5173\u706b\uff0c\u51fa\u9505\uff08\u84b8\u7897\u8981\u76d6\u76d6\u6216\u8005\u4fdd\u9c9c\u819c\uff0c\u51cf\u5c11\u6c34\u6c7d\u8fdb\u5165\uff0c\u5c31\u4e0d\u4f1a\u53d8\u6210\u8702\u7a9d\u72b6\uff09 \u52a0\u5165\u9999\u6cb9\u548c\u751f\u62bd\u5373\u53ef\u4eab\u7528 \u9644\u52a0\u5185\u5bb9 \u4e0a\u9762\u4ecb\u7ecd\u7684\u662f\u201c\u57fa\u7c7b\u201d\u6c34\u84b8\u86cb\uff0c\u53ef\u4ee5\u5728\u6b64\u57fa\u7840\u4e0a\u201c\u7ee7\u627f\u201d\uff0c\u6dfb\u52a0\u8bf8\u5982\u706b\u817f\u80a0\u3001\u8089\u9985\u3001\u867e\u76ae\u7b49\u6750\u6599\uff0c\u4e30\u5bcc\u9e21\u86cb\u7fb9\u7684\u53e3\u611f\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9e21\u86cb\u7fb9"},{"location":"dishes/vegetable_dish/%E9%B8%A1%E8%9B%8B%E7%BE%B9/%E9%B8%A1%E8%9B%8B%E7%BE%B9/#_1","text":"\u9e21\u86cb\u7fb9\uff0c\u53c8\u79f0\u6c34\u84b8\u86cb\uff0c\u4e0d\u9700\u8981\u51c6\u5907\u590d\u6742\u7684\u98df\u6750\uff0c\u662f\u4e00\u9053\u7b80\u5355\u5feb\u6377\u6613\u505a\u7684\u83dc\uff0c\u5f53\u65e9\u9910\u6216\u662f\u6b63\u9910\u90fd\u53ef\uff0c\u5236\u4f5c\u65f6\u957f\u7ea6\u4e3a 15 \u5206\u949f\u3002","title":"\u9e21\u86cb\u7fb9\u7684\u505a\u6cd5"},{"location":"dishes/vegetable_dish/%E9%B8%A1%E8%9B%8B%E7%BE%B9/%E9%B8%A1%E8%9B%8B%E7%BE%B9/#_2","text":"\u9e21\u86cb \u98df\u7528\u76d0 \u9999\u6cb9 \u751f\u62bd / \u5473\u6781\u9c9c \u767d\u918b\uff08\u53ef\u9009\uff09","title":"\u5fc5\u5907\u539f\u6599\u548c\u5de5\u5177"},{"location":"dishes/vegetable_dish/%E9%B8%A1%E8%9B%8B%E7%BE%B9/%E9%B8%A1%E8%9B%8B%E7%BE%B9/#_3","text":"\u6309\u7167 1 \u4eba\u7684\u4efd\u91cf\uff1a \u9e21\u86cb 2 \u4e2a \u98df\u7528\u76d0 3g \u767d\u918b 2ml \u9999\u6cb9 2-4ml \u751f\u62bd / \u5473\u6781\u9c9c 8ml","title":"\u8ba1\u7b97"},{"location":"dishes/vegetable_dish/%E9%B8%A1%E8%9B%8B%E7%BE%B9/%E9%B8%A1%E8%9B%8B%E7%BE%B9/#_4","text":"\u4e24\u4e2a\u9e21\u86cb\u653e\u5165\u7897\u4e2d\u6253\u6563 \u52a0\u5165\u98df\u7528\u76d0 3g\uff0c\u589e\u52a0\u5e95\u5473\uff08\u76d0\u8d77\u5230\u4e86\u91cd\u8981\u7684\u51dd\u56fa\u4f5c\u7528\uff09 \u52a0\u5165 2ml \u767d\u918b\uff0c\u53bb\u9664\u9e21\u86cb\u7684\u8165\u5473\uff08\u53ef\u9009\uff0c\u52a0\u5165\u7c73\u918b\u4e5f\u884c\uff0c\u4f46\u7c73\u918b\u7684\u989c\u8272\u4f1a\u4f7f\u9e21\u86cb\u5fae\u5fae\u53d1\u9ed1\uff09 \u5411\u7897\u4e2d\u52a0\u5165\u9e21\u86cb\u4f53\u79ef 1-1.5 \u500d\u7684\u7eaf\u51c0\u6c34\uff0c\u6405\u62cc\u5747\u5300\uff081 \u500d\u7684\u6c34\u9e21\u86cb\u66f4\u5f39\uff0c1.5 \u500d\u7684\u6c34\u9e21\u86cb\u66f4\u5ae9\uff09 \u8fc7\u6ee4\u86cb\u6db2\uff0c\u53bb\u6389\u86cb\u6db2\u4e2d\u7684\u6d6e\u6cab\uff08\u53ef\u9009\uff0c\u4e0d\u8fc7\u6ee4\u84b8\u51fa\u6765\u7684\u86cb\u4f1a\u6709\u6c14\u6ce1\uff0c\u4e0d\u597d\u770b\uff09 \u5411\u4efb\u610f\u4e00\u53e3\u9505\u4e2d\u52a0\u5165 50ml \u6e05\u6c34\uff0c\u6c34\u70e7\u5f00\u540e\uff0c\u653e\u5165\u76db\u6709\u9e21\u86cb\u7684\u7897 \u84b8 10 \u5206\u949f \u540e\uff0c\u5173\u706b\uff0c\u51fa\u9505\uff08\u84b8\u7897\u8981\u76d6\u76d6\u6216\u8005\u4fdd\u9c9c\u819c\uff0c\u51cf\u5c11\u6c34\u6c7d\u8fdb\u5165\uff0c\u5c31\u4e0d\u4f1a\u53d8\u6210\u8702\u7a9d\u72b6\uff09 \u52a0\u5165\u9999\u6cb9\u548c\u751f\u62bd\u5373\u53ef\u4eab\u7528","title":"\u64cd\u4f5c"},{"location":"dishes/vegetable_dish/%E9%B8%A1%E8%9B%8B%E7%BE%B9/%E9%B8%A1%E8%9B%8B%E7%BE%B9/#_5","text":"\u4e0a\u9762\u4ecb\u7ecd\u7684\u662f\u201c\u57fa\u7c7b\u201d\u6c34\u84b8\u86cb\uff0c\u53ef\u4ee5\u5728\u6b64\u57fa\u7840\u4e0a\u201c\u7ee7\u627f\u201d\uff0c\u6dfb\u52a0\u8bf8\u5982\u706b\u817f\u80a0\u3001\u8089\u9985\u3001\u867e\u76ae\u7b49\u6750\u6599\uff0c\u4e30\u5bcc\u9e21\u86cb\u7fb9\u7684\u53e3\u611f\u3002 \u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\u7684\u5236\u4f5c\u6d41\u7a0b\u800c\u53d1\u73b0\u6709\u95ee\u9898\u6216\u53ef\u4ee5\u6539\u8fdb\u7684\u6d41\u7a0b\uff0c\u8bf7\u63d0\u51fa Issue \u6216 Pull request \u3002","title":"\u9644\u52a0\u5185\u5bb9"},{"location":"node_modules/%40azu/format-text/","text":"@azu/format-text String formatting library inspired from Python Fork of azer/format-text Install $ npm install @azu/format-text Usage format = require ( '@azu/format-text' ) format ( 'Hello {0}. The weather is currently {1}\u00b0.' , 'Kitty' , '67' ) // => Hello Kitty. The weather is currently 67\u00b0. format ( 'Hello {name}, The weather is currently {degree}\u00b0' , { name : 'Kitty' , degree : 67 }) // => Hello Kitty. The weather is currently 67\u00b0.","title":"Index"},{"location":"node_modules/%40azu/format-text/#azuformat-text","text":"String formatting library inspired from Python Fork of azer/format-text","title":"@azu/format-text"},{"location":"node_modules/%40azu/format-text/#install","text":"$ npm install @azu/format-text","title":"Install"},{"location":"node_modules/%40azu/format-text/#usage","text":"format = require ( '@azu/format-text' ) format ( 'Hello {0}. The weather is currently {1}\u00b0.' , 'Kitty' , '67' ) // => Hello Kitty. The weather is currently 67\u00b0. format ( 'Hello {name}, The weather is currently {degree}\u00b0' , { name : 'Kitty' , degree : 67 }) // => Hello Kitty. The weather is currently 67\u00b0.","title":"Usage"},{"location":"node_modules/%40azu/style-format/","text":"style-format Library to easily style texts with string formatting. It's based on ansi-codes and format-text Install $ npm install @azu/style-format Usage format ( '{blue} hello {green} world' ) // => hello world format ( '{bold}{red} span {yellow} eggs {reset}' ) // => span eggs Reference See ansi-codes for reference.","title":"Index"},{"location":"node_modules/%40azu/style-format/#style-format","text":"Library to easily style texts with string formatting. It's based on ansi-codes and format-text","title":"style-format"},{"location":"node_modules/%40azu/style-format/#install","text":"$ npm install @azu/style-format","title":"Install"},{"location":"node_modules/%40azu/style-format/#usage","text":"format ( '{blue} hello {green} world' ) // => hello world format ( '{bold}{red} span {yellow} eggs {reset}' ) // => span eggs","title":"Usage"},{"location":"node_modules/%40azu/style-format/#reference","text":"See ansi-codes for reference.","title":"Reference"},{"location":"node_modules/%40babel/runtime-corejs3/","text":"@babel/runtime-corejs3 babel's modular runtime helpers with core-js@3 polyfilling See our website @babel/runtime-corejs3 for more information. Install Using npm: npm install --save @babel/runtime-corejs3 or using yarn: yarn add @babel/runtime-corejs3","title":"@babel/runtime-corejs3"},{"location":"node_modules/%40babel/runtime-corejs3/#babelruntime-corejs3","text":"babel's modular runtime helpers with core-js@3 polyfilling See our website @babel/runtime-corejs3 for more information.","title":"@babel/runtime-corejs3"},{"location":"node_modules/%40babel/runtime-corejs3/#install","text":"Using npm: npm install --save @babel/runtime-corejs3 or using yarn: yarn add @babel/runtime-corejs3","title":"Install"},{"location":"node_modules/%40textlint/ast-node-types/","text":"@textlint/ast-node-types The definition for textlint AST Node types. This module for parse plugin. For more details, see TxtNode document . Installation npm install @textlint/ast-node-types Usage import { ASTNodeTypes } from \"@textlint/ast-node-types\" ; console . log ( ASTNodeTypes . Document ); // => string Type interface for TxtNode This library include type interface of TxtNode . TypeScript user can use it as type of TxtNode. // type interface import { TxtNode } from \"@textlint/ast-node-types\" ; For parser creator Please use it for creating your textlint-plugin parser. Use it by textlint internal @textlint/text-to-ast @textlint/markdown-to-ast Versioning major: Breaking Change minor: Adding new type patch: Fixing issues Tests npm test Contributing If you want to new type for AST, Please file issue :) Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request :D License MIT","title":"@textlint/ast-node-types"},{"location":"node_modules/%40textlint/ast-node-types/#textlintast-node-types","text":"The definition for textlint AST Node types. This module for parse plugin. For more details, see TxtNode document .","title":"@textlint/ast-node-types"},{"location":"node_modules/%40textlint/ast-node-types/#installation","text":"npm install @textlint/ast-node-types","title":"Installation"},{"location":"node_modules/%40textlint/ast-node-types/#usage","text":"import { ASTNodeTypes } from \"@textlint/ast-node-types\" ; console . log ( ASTNodeTypes . Document ); // => string","title":"Usage"},{"location":"node_modules/%40textlint/ast-node-types/#type-interface-for-txtnode","text":"This library include type interface of TxtNode . TypeScript user can use it as type of TxtNode. // type interface import { TxtNode } from \"@textlint/ast-node-types\" ;","title":"Type interface for TxtNode"},{"location":"node_modules/%40textlint/ast-node-types/#for-parser-creator","text":"Please use it for creating your textlint-plugin parser. Use it by textlint internal @textlint/text-to-ast @textlint/markdown-to-ast","title":"For parser creator"},{"location":"node_modules/%40textlint/ast-node-types/#versioning","text":"major: Breaking Change minor: Adding new type patch: Fixing issues","title":"Versioning"},{"location":"node_modules/%40textlint/ast-node-types/#tests","text":"npm test","title":"Tests"},{"location":"node_modules/%40textlint/ast-node-types/#contributing","text":"If you want to new type for AST, Please file issue :) Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request :D","title":"Contributing"},{"location":"node_modules/%40textlint/ast-node-types/#license","text":"MIT","title":"License"},{"location":"node_modules/%40textlint/ast-tester/","text":"@textlint/ast-tester Compliance tests for textlint 's AST(Abstract Syntax Tree). It check compliance of AST at minimum. textlint/txtnode.md at master \u00b7 textlint/textlint If you have created Processor plugin for textlint, you can use it for testing the plugin. Installation npm install -D @textlint/ast-tester Usage test(textlintAST): void if the AST is invalid, then throw Error isTxtAST(textlintAST): boolean if the AST is valid, then return true . import { test , isTxtAST } from \"@textlint/ast-tester\" ; import yourParse from \"your-parser\" ; // recommenced: test much pattern test const AST = yourParse ( \"This is text\" ); test ( AST ); // if the AST is invalid, then throw Error isTxtAST ( AST ); // true or false Tests npm test Contributing Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request :D License MIT","title":"@textlint/ast-tester"},{"location":"node_modules/%40textlint/ast-tester/#textlintast-tester","text":"Compliance tests for textlint 's AST(Abstract Syntax Tree). It check compliance of AST at minimum. textlint/txtnode.md at master \u00b7 textlint/textlint If you have created Processor plugin for textlint, you can use it for testing the plugin.","title":"@textlint/ast-tester"},{"location":"node_modules/%40textlint/ast-tester/#installation","text":"npm install -D @textlint/ast-tester","title":"Installation"},{"location":"node_modules/%40textlint/ast-tester/#usage","text":"","title":"Usage"},{"location":"node_modules/%40textlint/ast-tester/#testtextlintast-void","text":"if the AST is invalid, then throw Error","title":"test(textlintAST): void"},{"location":"node_modules/%40textlint/ast-tester/#istxtasttextlintast-boolean","text":"if the AST is valid, then return true . import { test , isTxtAST } from \"@textlint/ast-tester\" ; import yourParse from \"your-parser\" ; // recommenced: test much pattern test const AST = yourParse ( \"This is text\" ); test ( AST ); // if the AST is invalid, then throw Error isTxtAST ( AST ); // true or false","title":"isTxtAST(textlintAST): boolean"},{"location":"node_modules/%40textlint/ast-tester/#tests","text":"npm test","title":"Tests"},{"location":"node_modules/%40textlint/ast-tester/#contributing","text":"Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request :D","title":"Contributing"},{"location":"node_modules/%40textlint/ast-tester/#license","text":"MIT","title":"License"},{"location":"node_modules/%40textlint/ast-traverse/","text":"@textlint/ast-traverse @textlint/ast-traverse provide traversal functions for TxtAST . This traverse function is a fork of estraverse for @textlint/markdown-to-ast . This library is a part of textlint/textlint . Installation npm install @textlint/ast-traverse Usage var parse = require ( \"@textlint/markdown-to-ast\" ). parse , Syntax = require ( \"@textlint/markdown-to-ast\" ). Syntax ; var traverse = require ( \"@textlint/ast-traverse\" ). traverse , VisitorOption = require ( \"@textlint/ast-traverse\" ). VisitorOption ; var AST = parse ( \"# Header\\nHello*world*\" ); traverse ( AST , { enter ( node ) { console . log ( \"enter\" , node . type ); if ( node . type === Syntax . Strong ) { return VisitorOption . Skip ; } }, leave ( node ) { console . log ( \"leave\" , node . type ); } }); Traversal rule is the same with Estraverse . Example Markdown: Hello *world* AST: { \"start_line\" : 1 , \"start_column\" : 1 , \"end_line\" : 0 , \"children\" : [ { \"start_line\" : 1 , \"start_column\" : 1 , \"end_line\" : 0 , \"inline_content\" : [ { \"c\" : \"Hello\" , \"raw\" : \"Hello\" , \"loc\" : { \"start\" : { \"line\" : 1 , \"column\" : 0 }, \"end\" : { \"line\" : 1 , \"column\" : 5 } }, \"range\" : [ 0 , 5 ], \"type\" : \"Str\" }, { \"c\" : \" \" , \"raw\" : \" \" , \"loc\" : { \"start\" : { \"line\" : 1 , \"column\" : 5 }, \"end\" : { \"line\" : 1 , \"column\" : 6 } }, \"range\" : [ 5 , 6 ], \"type\" : \"Str\" }, { \"c\" : [ { \"c\" : \"world\" , \"raw\" : \"world\" , \"loc\" : { \"start\" : { \"line\" : 1 , \"column\" : 0 }, \"end\" : { \"line\" : 1 , \"column\" : 5 } }, \"range\" : [ 0 , 5 ], \"type\" : \"Str\" } ], \"raw\" : \"*world*\" , \"loc\" : { \"start\" : { \"line\" : 1 , \"column\" : 6 }, \"end\" : { \"line\" : 1 , \"column\" : 13 } }, \"range\" : [ 6 , 13 ], \"type\" : \"Emphasis\" } ], \"children\" : [], \"raw\" : \"Hello *world*\" , \"loc\" : { \"start\" : { \"line\" : 1 , \"column\" : 0 }, \"end\" : { \"line\" : 1 , \"column\" : 13 } }, \"range\" : [ 0 , 13 ], \"type\" : \"Paragraph\" } ], \"raw\" : \"Hello *world*\" , \"loc\" : { \"start\" : { \"line\" : 1 , \"column\" : 0 }, \"end\" : { \"line\" : 1 , \"column\" : 13 } }, \"range\" : [ 0 , 13 ], \"type\" : \"Document\" } Traversal all from Root(Document node): [enter, Syntax.Document], // # Header [enter, Syntax.Header], [enter, Syntax.Str], [leave, Syntax.Str], [leave, Syntax.Header], // => Paragraph [enter, Syntax.Paragraph], [enter, Syntax.Str], [leave, Syntax.Str], // *world* [enter, Syntax.Emphasis], [enter, Syntax.Str], [leave, Syntax.Str], [leave, Syntax.Emphasis], // <= Paragraph [leave, Syntax.Paragraph], // End [leave, Syntax.Document] NOTE You want to set property on Node. Bad example: var TraverseController = require ( \"@textlint/ast-traverse\" ). Controller ; var controller = new TraverseController (); controller . traverse ( ast , { enter : function ( node , parent ) { node . parent = parent ; // it cause a circular reference! // do something something ( node ); } }); node.parent = parent; cause a circular reference! Correct example: var TraverseController = require ( \"@textlint/ast-traverse\" ). Controller ; var controller = new TraverseController (); controller . traverse ( ast , { enter : function ( node , parent ) { // set property as non-enumerable value Object . defineProperty ( node , \"parent\" , { value : parent }); // do something something ( node ); } }); Contributing Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request :D License MIT and Includes Estraverse Copyright (C) 2012-2013 Yusuke Suzuki https://github.com/estools/estraverse/blob/master/LICENSE.BSD","title":"@textlint/ast-traverse"},{"location":"node_modules/%40textlint/ast-traverse/#textlintast-traverse","text":"@textlint/ast-traverse provide traversal functions for TxtAST . This traverse function is a fork of estraverse for @textlint/markdown-to-ast . This library is a part of textlint/textlint .","title":"@textlint/ast-traverse"},{"location":"node_modules/%40textlint/ast-traverse/#installation","text":"npm install @textlint/ast-traverse","title":"Installation"},{"location":"node_modules/%40textlint/ast-traverse/#usage","text":"var parse = require ( \"@textlint/markdown-to-ast\" ). parse , Syntax = require ( \"@textlint/markdown-to-ast\" ). Syntax ; var traverse = require ( \"@textlint/ast-traverse\" ). traverse , VisitorOption = require ( \"@textlint/ast-traverse\" ). VisitorOption ; var AST = parse ( \"# Header\\nHello*world*\" ); traverse ( AST , { enter ( node ) { console . log ( \"enter\" , node . type ); if ( node . type === Syntax . Strong ) { return VisitorOption . Skip ; } }, leave ( node ) { console . log ( \"leave\" , node . type ); } }); Traversal rule is the same with Estraverse .","title":"Usage"},{"location":"node_modules/%40textlint/ast-traverse/#example","text":"Markdown: Hello *world* AST: { \"start_line\" : 1 , \"start_column\" : 1 , \"end_line\" : 0 , \"children\" : [ { \"start_line\" : 1 , \"start_column\" : 1 , \"end_line\" : 0 , \"inline_content\" : [ { \"c\" : \"Hello\" , \"raw\" : \"Hello\" , \"loc\" : { \"start\" : { \"line\" : 1 , \"column\" : 0 }, \"end\" : { \"line\" : 1 , \"column\" : 5 } }, \"range\" : [ 0 , 5 ], \"type\" : \"Str\" }, { \"c\" : \" \" , \"raw\" : \" \" , \"loc\" : { \"start\" : { \"line\" : 1 , \"column\" : 5 }, \"end\" : { \"line\" : 1 , \"column\" : 6 } }, \"range\" : [ 5 , 6 ], \"type\" : \"Str\" }, { \"c\" : [ { \"c\" : \"world\" , \"raw\" : \"world\" , \"loc\" : { \"start\" : { \"line\" : 1 , \"column\" : 0 }, \"end\" : { \"line\" : 1 , \"column\" : 5 } }, \"range\" : [ 0 , 5 ], \"type\" : \"Str\" } ], \"raw\" : \"*world*\" , \"loc\" : { \"start\" : { \"line\" : 1 , \"column\" : 6 }, \"end\" : { \"line\" : 1 , \"column\" : 13 } }, \"range\" : [ 6 , 13 ], \"type\" : \"Emphasis\" } ], \"children\" : [], \"raw\" : \"Hello *world*\" , \"loc\" : { \"start\" : { \"line\" : 1 , \"column\" : 0 }, \"end\" : { \"line\" : 1 , \"column\" : 13 } }, \"range\" : [ 0 , 13 ], \"type\" : \"Paragraph\" } ], \"raw\" : \"Hello *world*\" , \"loc\" : { \"start\" : { \"line\" : 1 , \"column\" : 0 }, \"end\" : { \"line\" : 1 , \"column\" : 13 } }, \"range\" : [ 0 , 13 ], \"type\" : \"Document\" } Traversal all from Root(Document node): [enter, Syntax.Document], // # Header [enter, Syntax.Header], [enter, Syntax.Str], [leave, Syntax.Str], [leave, Syntax.Header], // => Paragraph [enter, Syntax.Paragraph], [enter, Syntax.Str], [leave, Syntax.Str], // *world* [enter, Syntax.Emphasis], [enter, Syntax.Str], [leave, Syntax.Str], [leave, Syntax.Emphasis], // <= Paragraph [leave, Syntax.Paragraph], // End [leave, Syntax.Document]","title":"Example"},{"location":"node_modules/%40textlint/ast-traverse/#note","text":"You want to set property on Node. Bad example: var TraverseController = require ( \"@textlint/ast-traverse\" ). Controller ; var controller = new TraverseController (); controller . traverse ( ast , { enter : function ( node , parent ) { node . parent = parent ; // it cause a circular reference! // do something something ( node ); } }); node.parent = parent; cause a circular reference! Correct example: var TraverseController = require ( \"@textlint/ast-traverse\" ). Controller ; var controller = new TraverseController (); controller . traverse ( ast , { enter : function ( node , parent ) { // set property as non-enumerable value Object . defineProperty ( node , \"parent\" , { value : parent }); // do something something ( node ); } });","title":"NOTE"},{"location":"node_modules/%40textlint/ast-traverse/#contributing","text":"Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request :D","title":"Contributing"},{"location":"node_modules/%40textlint/ast-traverse/#license","text":"MIT and Includes Estraverse Copyright (C) 2012-2013 Yusuke Suzuki https://github.com/estools/estraverse/blob/master/LICENSE.BSD","title":"License"},{"location":"node_modules/%40textlint/feature-flag/","text":"@textlint/feature-flag textlint internal feature flag manager. Install Install with npm : npm install @textlint/feature-flag Usage import { coreFlags , isFeatureEnabled , setFeature } from \"@textlint/feature-flag\" ; // core flag assert . ok ( coreFlags . runningCLI === false ); assert . ok ( coreFlags . runningTester === false ); // default loose coreFlags . runningCLI = true ; coreFlags . runningTester = true ; coreFlags . experimental = true ; assert . ok ( coreFlags . runningCLI === true ); assert . ok ( coreFlags . runningTester === true ); assert . ok ( coreFlags . experimental === true ); // feature-flag try { isFeatureEnabled ( \"test\" ) } catch ( error ){ // default strict } setFeature ( \"test\" , true ); assert . ok ( isFeatureEnabled ( \"test\" ) === true ); Changelog See Releases page . Running tests Install devDependencies and Run npm test : npm i -d && npm test Contributing Pull requests and stars are always welcome. For bugs and feature requests, please create an issue . Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request :D Author github/azu twitter/azu_re License MIT \u00a9 azu","title":"@textlint/feature-flag"},{"location":"node_modules/%40textlint/feature-flag/#textlintfeature-flag","text":"textlint internal feature flag manager.","title":"@textlint/feature-flag"},{"location":"node_modules/%40textlint/feature-flag/#install","text":"Install with npm : npm install @textlint/feature-flag","title":"Install"},{"location":"node_modules/%40textlint/feature-flag/#usage","text":"import { coreFlags , isFeatureEnabled , setFeature } from \"@textlint/feature-flag\" ; // core flag assert . ok ( coreFlags . runningCLI === false ); assert . ok ( coreFlags . runningTester === false ); // default loose coreFlags . runningCLI = true ; coreFlags . runningTester = true ; coreFlags . experimental = true ; assert . ok ( coreFlags . runningCLI === true ); assert . ok ( coreFlags . runningTester === true ); assert . ok ( coreFlags . experimental === true ); // feature-flag try { isFeatureEnabled ( \"test\" ) } catch ( error ){ // default strict } setFeature ( \"test\" , true ); assert . ok ( isFeatureEnabled ( \"test\" ) === true );","title":"Usage"},{"location":"node_modules/%40textlint/feature-flag/#changelog","text":"See Releases page .","title":"Changelog"},{"location":"node_modules/%40textlint/feature-flag/#running-tests","text":"Install devDependencies and Run npm test : npm i -d && npm test","title":"Running tests"},{"location":"node_modules/%40textlint/feature-flag/#contributing","text":"Pull requests and stars are always welcome. For bugs and feature requests, please create an issue . Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request :D","title":"Contributing"},{"location":"node_modules/%40textlint/feature-flag/#author","text":"github/azu twitter/azu_re","title":"Author"},{"location":"node_modules/%40textlint/feature-flag/#license","text":"MIT \u00a9 azu","title":"License"},{"location":"node_modules/%40textlint/fixer-formatter/","text":"@textlint/fixer-formatter textlint output formatter for fixer Installation npm install @textlint/fixer-formatter Usage TBD Tests npm test License MIT","title":"@textlint/fixer-formatter"},{"location":"node_modules/%40textlint/fixer-formatter/#textlintfixer-formatter","text":"textlint output formatter for fixer","title":"@textlint/fixer-formatter"},{"location":"node_modules/%40textlint/fixer-formatter/#installation","text":"npm install @textlint/fixer-formatter","title":"Installation"},{"location":"node_modules/%40textlint/fixer-formatter/#usage","text":"TBD","title":"Usage"},{"location":"node_modules/%40textlint/fixer-formatter/#tests","text":"npm test","title":"Tests"},{"location":"node_modules/%40textlint/fixer-formatter/#license","text":"MIT","title":"License"},{"location":"node_modules/%40textlint/kernel/","text":"@textlint/kernel textlint kernel is core logic by pure JavaScript. This module is a low layer of textlint. No plugin, No rule, No filter rule by default. Install Install with npm : npm install @textlint/kernel Usage import { TextlintKernel } from \"@textlint/kernel\" ; const kernel = new TextlintKernel (); const options = { filePath : \"/path/to/file.md\" , ext : \".md\" , plugins : [ { pluginId : \"markdown\" , plugin : require ( \"@textlint/textlint-plugin-markdown\" ) } ], rules : [ { ruleId : \"no-todo\" , rule : require ( \"textlint-rule-no-todo\" ). default } ] }; kernel . lintText ( \"TODO: text\" , options ). then ( result => { assert . ok ( typeof result . filePath === \"string\" ); assert . ok ( result . messages . length === 1 ); }); Notes: Preset is a collection of Rules. Currently, presets option does not exist. Type Interface @textlint/kernel export core types of textlint. If you use TypeScript, this types help you. // Types import { TextlintResult , TextlintFixResult , TextlintFixCommand , TextlintMessage , // Kernel rule/filter/plugin format TextlintKernelRule , TextlintKernelFilterRule , TextlintKernelPlugin , // textlint rule interface TextlintRuleCreator , TextlintRuleOptions , // textlint filter rule interface TextlintFilterRuleCreator , TextlintFilterRuleOptions , // textlint plugin interface TextlintPluginCreator , TextlintPluginOptions , TextlintPluginProcessor , TextlintPluginProcessorConstructor } from \"@textlint/kernel\" ; Changelog See Releases page . Running tests Install devDependencies and Run npm test : npm i -d && npm test Contributing Pull requests and stars are always welcome. For bugs and feature requests, please create an issue . Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request :D Author github/azu twitter/azu_re License MIT \u00a9 azu","title":"@textlint/kernel"},{"location":"node_modules/%40textlint/kernel/#textlintkernel","text":"textlint kernel is core logic by pure JavaScript. This module is a low layer of textlint. No plugin, No rule, No filter rule by default.","title":"@textlint/kernel"},{"location":"node_modules/%40textlint/kernel/#install","text":"Install with npm : npm install @textlint/kernel","title":"Install"},{"location":"node_modules/%40textlint/kernel/#usage","text":"import { TextlintKernel } from \"@textlint/kernel\" ; const kernel = new TextlintKernel (); const options = { filePath : \"/path/to/file.md\" , ext : \".md\" , plugins : [ { pluginId : \"markdown\" , plugin : require ( \"@textlint/textlint-plugin-markdown\" ) } ], rules : [ { ruleId : \"no-todo\" , rule : require ( \"textlint-rule-no-todo\" ). default } ] }; kernel . lintText ( \"TODO: text\" , options ). then ( result => { assert . ok ( typeof result . filePath === \"string\" ); assert . ok ( result . messages . length === 1 ); }); Notes: Preset is a collection of Rules. Currently, presets option does not exist.","title":"Usage"},{"location":"node_modules/%40textlint/kernel/#type-interface","text":"@textlint/kernel export core types of textlint. If you use TypeScript, this types help you. // Types import { TextlintResult , TextlintFixResult , TextlintFixCommand , TextlintMessage , // Kernel rule/filter/plugin format TextlintKernelRule , TextlintKernelFilterRule , TextlintKernelPlugin , // textlint rule interface TextlintRuleCreator , TextlintRuleOptions , // textlint filter rule interface TextlintFilterRuleCreator , TextlintFilterRuleOptions , // textlint plugin interface TextlintPluginCreator , TextlintPluginOptions , TextlintPluginProcessor , TextlintPluginProcessorConstructor } from \"@textlint/kernel\" ;","title":"Type Interface"},{"location":"node_modules/%40textlint/kernel/#changelog","text":"See Releases page .","title":"Changelog"},{"location":"node_modules/%40textlint/kernel/#running-tests","text":"Install devDependencies and Run npm test : npm i -d && npm test","title":"Running tests"},{"location":"node_modules/%40textlint/kernel/#contributing","text":"Pull requests and stars are always welcome. For bugs and feature requests, please create an issue . Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request :D","title":"Contributing"},{"location":"node_modules/%40textlint/kernel/#author","text":"github/azu twitter/azu_re","title":"Author"},{"location":"node_modules/%40textlint/kernel/#license","text":"MIT \u00a9 azu","title":"License"},{"location":"node_modules/%40textlint/kernel/src/descriptor/","text":"descriptor A Descriptor class for kernel. The Descriptor is a structure object of rules, filter rules, plugins. The Descriptor is normalized/filtered object without duplication without disabled Create a Descriptor from textlintrc object Create a Descriptor from kernel options Analyze plugins and provide available extensions for linting Analyze rules and provide normalized rule instance Usage const descriptors = new TextlintKernelDescriptor ({ plugins : [ { pluginId : \"text\" , plugin : createDummyPlugin ([ \".txt\" ]) }, { pluginId : \"markdown\" , plugin : createDummyPlugin ([ \".md\" ]) } ], rules : [ { ruleId : \"example\" , rule : exampleRule } ], filterRules : [] }); // available extensions assert . deepStrictEqual ( descriptors . plugin . availableExtensions , [ \".txt\" , \".md\" ]); // get plugin instance const markdownProcessor = descriptors . findPluginDescriptorWithExt ( \".md\" ); assert . ok ( markdownProcessor !== undefined ); // rules assert . strictEqual ( descriptors . rule . descriptors . length , 1 );","title":"descriptor"},{"location":"node_modules/%40textlint/kernel/src/descriptor/#descriptor","text":"A Descriptor class for kernel. The Descriptor is a structure object of rules, filter rules, plugins. The Descriptor is normalized/filtered object without duplication without disabled Create a Descriptor from textlintrc object Create a Descriptor from kernel options Analyze plugins and provide available extensions for linting Analyze rules and provide normalized rule instance","title":"descriptor"},{"location":"node_modules/%40textlint/kernel/src/descriptor/#usage","text":"const descriptors = new TextlintKernelDescriptor ({ plugins : [ { pluginId : \"text\" , plugin : createDummyPlugin ([ \".txt\" ]) }, { pluginId : \"markdown\" , plugin : createDummyPlugin ([ \".md\" ]) } ], rules : [ { ruleId : \"example\" , rule : exampleRule } ], filterRules : [] }); // available extensions assert . deepStrictEqual ( descriptors . plugin . availableExtensions , [ \".txt\" , \".md\" ]); // get plugin instance const markdownProcessor = descriptors . findPluginDescriptorWithExt ( \".md\" ); assert . ok ( markdownProcessor !== undefined ); // rules assert . strictEqual ( descriptors . rule . descriptors . length , 1 );","title":"Usage"},{"location":"node_modules/%40textlint/kernel/src/task/","text":"CoreTask What's does Receive AST and rules Run linter/fixer of the rule and get messages Convert messages to TextLintMessage s emit TextLintMessage as \"messages\" event.","title":"CoreTask"},{"location":"node_modules/%40textlint/kernel/src/task/#coretask","text":"","title":"CoreTask"},{"location":"node_modules/%40textlint/kernel/src/task/#whats-does","text":"Receive AST and rules Run linter/fixer of the rule and get messages Convert messages to TextLintMessage s emit TextLintMessage as \"messages\" event.","title":"What's does"},{"location":"node_modules/%40textlint/linter-formatter/","text":"@textlint/linter-formatter textlint output formatter. Installation npm install @textlint/linter-formatter Usage See formatters/ . Currently, you can use \"stylish\" (defaults), \"checkstyle\", \"compact\", \"jslint-xml\", \"json\", \"junit\", \"pretty-error\", \"table\", \"tap\", and \"unix\". const createFormatter = require ( \"@textlint/linter-formatter\" ). createFormatter ; const formatter = createFormatter ({ formatterName : \"stylish\" }); const output = formatter ([ { filePath : \"./README.md\" , messages : [ { ruleId : \"semi\" , line : 1 , column : 23 , message : \"Expected a semicolon.\" } ] } ]); console . log ( output ); /* ./README.md 1:23 warning Expected a semicolon semi \u2716 1 problem (0 errors, 1 warning) */ API export declare type FormatterConfig = { color? : boolean ; formatterName : string ; }; export declare function createFormatter ( formatterConfig : FormatterConfig ) : ( results : TextlintResult []) => string ; export interface FormatterDetail { name : string ; } export declare function getFormatterList () : FormatterDetail []; CLI $ textlint -f json README.md --rule no-todo | textlint-formatter -f pretty-error --stdin Other formatter azu/textlint-formatter-codecov: textlint formatter for codecov json. azu/textlint-formatter-lcov: textlint formatter for lcov format Contributing Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request :D License MIT","title":"@textlint/linter-formatter"},{"location":"node_modules/%40textlint/linter-formatter/#textlintlinter-formatter","text":"textlint output formatter.","title":"@textlint/linter-formatter"},{"location":"node_modules/%40textlint/linter-formatter/#installation","text":"npm install @textlint/linter-formatter","title":"Installation"},{"location":"node_modules/%40textlint/linter-formatter/#usage","text":"See formatters/ . Currently, you can use \"stylish\" (defaults), \"checkstyle\", \"compact\", \"jslint-xml\", \"json\", \"junit\", \"pretty-error\", \"table\", \"tap\", and \"unix\". const createFormatter = require ( \"@textlint/linter-formatter\" ). createFormatter ; const formatter = createFormatter ({ formatterName : \"stylish\" }); const output = formatter ([ { filePath : \"./README.md\" , messages : [ { ruleId : \"semi\" , line : 1 , column : 23 , message : \"Expected a semicolon.\" } ] } ]); console . log ( output ); /* ./README.md 1:23 warning Expected a semicolon semi \u2716 1 problem (0 errors, 1 warning) */","title":"Usage"},{"location":"node_modules/%40textlint/linter-formatter/#api","text":"export declare type FormatterConfig = { color? : boolean ; formatterName : string ; }; export declare function createFormatter ( formatterConfig : FormatterConfig ) : ( results : TextlintResult []) => string ; export interface FormatterDetail { name : string ; } export declare function getFormatterList () : FormatterDetail [];","title":"API"},{"location":"node_modules/%40textlint/linter-formatter/#cli","text":"$ textlint -f json README.md --rule no-todo | textlint-formatter -f pretty-error --stdin","title":"CLI"},{"location":"node_modules/%40textlint/linter-formatter/#other-formatter","text":"azu/textlint-formatter-codecov: textlint formatter for codecov json. azu/textlint-formatter-lcov: textlint formatter for lcov format","title":"Other formatter"},{"location":"node_modules/%40textlint/linter-formatter/#contributing","text":"Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request :D","title":"Contributing"},{"location":"node_modules/%40textlint/linter-formatter/#license","text":"MIT","title":"License"},{"location":"node_modules/%40textlint/markdown-to-ast/","text":"@textlint/markdown-to-ast Parse Markdown to AST with location info. This library is not parser itself, it dependent on wooorm/remark . Markdown -> remark -> markdown-to-ast -> TxtNode s The AST consists of TxtNode s. A TxtNode of the AST has following properties: loc - Nodes have line and column-based location info. range - Nodes have an index-based location range (array). raw - Node have a raw text. value - Node have a value of text. The interface are defined in textlint/txtnode.md This library is a part of textlint/textlint . If you need to markdown parser, please use wooorm/remark directly. DEMO textlint AST explorer Installation npm install @textlint/markdown-to-ast Usage var parse = require ( \"@textlint/markdown-to-ast\" ) .parse ; var markdown = \"It's a *text*\" ; var AST = parse ( markdown ) ; /* { \"type\" : \"Document\" , \"children\" : [ { \"type\" : \"Paragraph\" , \"children\" : [ { \"type\" : \"Str\" , \"value\" : \"It's a \" , \"loc\" : { \"start\" : { \"line\" : 1 , \"column\" : 0 } , \"end\" : { \"line\" : 1 , \"column\" : 7 } } , \"range\" : [ 0 , 7 ] , \"raw\" : \"It's a \" } , { \"type\" : \"Emphasis\" , \"children\" : [ { \"type\" : \"Str\" , \"value\" : \"text\" , \"loc\" : { \"start\" : { \"line\" : 1 , \"column\" : 8 } , \"end\" : { \"line\" : 1 , \"column\" : 12 } } , \"range\" : [ 8 , 12 ] , \"raw\" : \"text\" } ] , \"loc\" : { \"start\" : { \"line\" : 1 , \"column\" : 7 } , \"end\" : { \"line\" : 1 , \"column\" : 13 } } , \"range\" : [ 7 , 13 ] , \"raw\" : \"*text*\" } ] , \"loc\" : { \"start\" : { \"line\" : 1 , \"column\" : 0 } , \"end\" : { \"line\" : 1 , \"column\" : 13 } } , \"range\" : [ 0 , 13 ] , \"raw\" : \"It's a *text*\" } ] , \"loc\" : { \"start\" : { \"line\" : 1 , \"column\" : 0 } , \"end\" : { \"line\" : 1 , \"column\" : 13 } } , \"range\" : [ 0 , 13 ] , \"raw\" : \"It's a *text*\" } */ If you want to know real use-case, please see textlint/textlint . Tests npm test Create fixtures See tools/ directory. Contributing Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request :D License MIT","title":"@textlint/markdown-to-ast"},{"location":"node_modules/%40textlint/markdown-to-ast/#textlintmarkdown-to-ast","text":"Parse Markdown to AST with location info. This library is not parser itself, it dependent on wooorm/remark . Markdown -> remark -> markdown-to-ast -> TxtNode s The AST consists of TxtNode s. A TxtNode of the AST has following properties: loc - Nodes have line and column-based location info. range - Nodes have an index-based location range (array). raw - Node have a raw text. value - Node have a value of text. The interface are defined in textlint/txtnode.md This library is a part of textlint/textlint . If you need to markdown parser, please use wooorm/remark directly.","title":"@textlint/markdown-to-ast"},{"location":"node_modules/%40textlint/markdown-to-ast/#demo","text":"textlint AST explorer","title":"DEMO"},{"location":"node_modules/%40textlint/markdown-to-ast/#installation","text":"npm install @textlint/markdown-to-ast","title":"Installation"},{"location":"node_modules/%40textlint/markdown-to-ast/#usage","text":"var parse = require ( \"@textlint/markdown-to-ast\" ) .parse ; var markdown = \"It's a *text*\" ; var AST = parse ( markdown ) ; /* { \"type\" : \"Document\" , \"children\" : [ { \"type\" : \"Paragraph\" , \"children\" : [ { \"type\" : \"Str\" , \"value\" : \"It's a \" , \"loc\" : { \"start\" : { \"line\" : 1 , \"column\" : 0 } , \"end\" : { \"line\" : 1 , \"column\" : 7 } } , \"range\" : [ 0 , 7 ] , \"raw\" : \"It's a \" } , { \"type\" : \"Emphasis\" , \"children\" : [ { \"type\" : \"Str\" , \"value\" : \"text\" , \"loc\" : { \"start\" : { \"line\" : 1 , \"column\" : 8 } , \"end\" : { \"line\" : 1 , \"column\" : 12 } } , \"range\" : [ 8 , 12 ] , \"raw\" : \"text\" } ] , \"loc\" : { \"start\" : { \"line\" : 1 , \"column\" : 7 } , \"end\" : { \"line\" : 1 , \"column\" : 13 } } , \"range\" : [ 7 , 13 ] , \"raw\" : \"*text*\" } ] , \"loc\" : { \"start\" : { \"line\" : 1 , \"column\" : 0 } , \"end\" : { \"line\" : 1 , \"column\" : 13 } } , \"range\" : [ 0 , 13 ] , \"raw\" : \"It's a *text*\" } ] , \"loc\" : { \"start\" : { \"line\" : 1 , \"column\" : 0 } , \"end\" : { \"line\" : 1 , \"column\" : 13 } } , \"range\" : [ 0 , 13 ] , \"raw\" : \"It's a *text*\" } */ If you want to know real use-case, please see textlint/textlint .","title":"Usage"},{"location":"node_modules/%40textlint/markdown-to-ast/#tests","text":"npm test","title":"Tests"},{"location":"node_modules/%40textlint/markdown-to-ast/#create-fixtures","text":"See tools/ directory.","title":"Create fixtures"},{"location":"node_modules/%40textlint/markdown-to-ast/#contributing","text":"Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request :D","title":"Contributing"},{"location":"node_modules/%40textlint/markdown-to-ast/#license","text":"MIT","title":"License"},{"location":"node_modules/%40textlint/module-interop/","text":"@textlint/module-interop ECMAScript module interop library. import .default from ES module or CommonJS module. example.mjs const value = 42 ; export default value ; import { module Interop } from \"@textlint/module-interop\" ; // Doesn't matter if `require` uses `module.exports` or ES Module `export` const value = module Interop ( require ( \"./example\" )); console . log ( value ); // 42 Notes : This library is for common use. This library is not depended on textlint. Why it is needed? Some rule modules use export default . If you creating rule preset for textlint, you should wrap the required result. const rule = require ( \"textlint-rule-es-export-default-example\" ); console . log ( rule ); // { default: ruleImplantation } This library resolve this issue by moduleInterop function. const { moduleInterop } = require ( \"@textlint/module-interop\" ); const rule = moduleInterop ( require ( \"textlint-rule-es-export-default-example\" )); console . log ( rule ); // ruleImplantation `````` ## Install Install with [ npm ]( https : //www.npmjs.com/): npm install @ textlint / module - interop ## Usage ```ts const {moduleInterop} = require(\"@textlint/module-interop\"); const rule = moduleInterop(require(\"textlint-rule-example\")); // rule implementation Related leebenson/module-interop: ES6 module interop Same purpose, but it has different API izaakschroeder/interop-require: Require babel ES6 modules from node land. Same function, but it prevent static analyzer It is just dynamic require that prevent static analyzer like Asset Relocator Loader for Webpack . Changelog See Releases page . Running tests Install devDependencies and Run npm test : npm test Contributing Pull requests and stars are always welcome. For bugs and feature requests, please create an issue . Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request :D Author github/azu twitter/azu_re License MIT \u00a9 azu","title":"@textlint/module-interop"},{"location":"node_modules/%40textlint/module-interop/#textlintmodule-interop","text":"ECMAScript module interop library. import .default from ES module or CommonJS module. example.mjs const value = 42 ; export default value ; import { module Interop } from \"@textlint/module-interop\" ; // Doesn't matter if `require` uses `module.exports` or ES Module `export` const value = module Interop ( require ( \"./example\" )); console . log ( value ); // 42 Notes : This library is for common use. This library is not depended on textlint.","title":"@textlint/module-interop"},{"location":"node_modules/%40textlint/module-interop/#why-it-is-needed","text":"Some rule modules use export default . If you creating rule preset for textlint, you should wrap the required result. const rule = require ( \"textlint-rule-es-export-default-example\" ); console . log ( rule ); // { default: ruleImplantation } This library resolve this issue by moduleInterop function. const { moduleInterop } = require ( \"@textlint/module-interop\" ); const rule = moduleInterop ( require ( \"textlint-rule-es-export-default-example\" )); console . log ( rule ); // ruleImplantation `````` ## Install Install with [ npm ]( https : //www.npmjs.com/): npm install @ textlint / module - interop ## Usage ```ts const {moduleInterop} = require(\"@textlint/module-interop\"); const rule = moduleInterop(require(\"textlint-rule-example\")); // rule implementation","title":"Why it is needed?"},{"location":"node_modules/%40textlint/module-interop/#related","text":"leebenson/module-interop: ES6 module interop Same purpose, but it has different API izaakschroeder/interop-require: Require babel ES6 modules from node land. Same function, but it prevent static analyzer It is just dynamic require that prevent static analyzer like Asset Relocator Loader for Webpack .","title":"Related"},{"location":"node_modules/%40textlint/module-interop/#changelog","text":"See Releases page .","title":"Changelog"},{"location":"node_modules/%40textlint/module-interop/#running-tests","text":"Install devDependencies and Run npm test : npm test","title":"Running tests"},{"location":"node_modules/%40textlint/module-interop/#contributing","text":"Pull requests and stars are always welcome. For bugs and feature requests, please create an issue . Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request :D","title":"Contributing"},{"location":"node_modules/%40textlint/module-interop/#author","text":"github/azu twitter/azu_re","title":"Author"},{"location":"node_modules/%40textlint/module-interop/#license","text":"MIT \u00a9 azu","title":"License"},{"location":"node_modules/%40textlint/source-code-fixer/","text":"@textlint/source-code-fixer Apply @textlint/kernel lint result to text. Almost user just use @textlint/kernel 's fixText API instead of This package. This package provide primitive functions for @textlint/kernel. Install Install with npm : npm install @textlint/source-code-fixer Usage import { TextlintKernel } from \"@textlint/kernel\" ; import { applyFixesToText } from \"@textlint/source-code-fixer\" ; const kernel = new TextlintKernel (); const text = \"text\" ; const result = kernel . lintText ( text , { ... }); const fixedOutput = applyFixesToText ( text , result . messages ); Changelog See Releases page . Running tests Install devDependencies and Run npm test : npm test Contributing Pull requests and stars are always welcome. For bugs and feature requests, please create an issue . Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request :D Author azu: GitHub , Twitter License MIT \u00a9 azu","title":"@textlint/source-code-fixer"},{"location":"node_modules/%40textlint/source-code-fixer/#textlintsource-code-fixer","text":"Apply @textlint/kernel lint result to text. Almost user just use @textlint/kernel 's fixText API instead of This package. This package provide primitive functions for @textlint/kernel.","title":"@textlint/source-code-fixer"},{"location":"node_modules/%40textlint/source-code-fixer/#install","text":"Install with npm : npm install @textlint/source-code-fixer","title":"Install"},{"location":"node_modules/%40textlint/source-code-fixer/#usage","text":"import { TextlintKernel } from \"@textlint/kernel\" ; import { applyFixesToText } from \"@textlint/source-code-fixer\" ; const kernel = new TextlintKernel (); const text = \"text\" ; const result = kernel . lintText ( text , { ... }); const fixedOutput = applyFixesToText ( text , result . messages );","title":"Usage"},{"location":"node_modules/%40textlint/source-code-fixer/#changelog","text":"See Releases page .","title":"Changelog"},{"location":"node_modules/%40textlint/source-code-fixer/#running-tests","text":"Install devDependencies and Run npm test : npm test","title":"Running tests"},{"location":"node_modules/%40textlint/source-code-fixer/#contributing","text":"Pull requests and stars are always welcome. For bugs and feature requests, please create an issue . Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request :D","title":"Contributing"},{"location":"node_modules/%40textlint/source-code-fixer/#author","text":"azu: GitHub , Twitter","title":"Author"},{"location":"node_modules/%40textlint/source-code-fixer/#license","text":"MIT \u00a9 azu","title":"License"},{"location":"node_modules/%40textlint/text-to-ast/","text":"@textlint/text-to-ast Parse plain text to AST with location info. This library is a part of textlint/textlint . Markdown version: @textlint/markdown-to-ast The AST consists of TxtNode s. A TxtNode of the AST has following properties: loc - Nodes have line and column-based location info. range - Nodes have an index-based location range (array). raw - Node have a raw text. value - Node have a value of text. The interface are defined in textlint/txtnode.md This library is a part of textlint/textlint . Installation npm install @textlint/text-to-ast DEMO AST explorer for textlint Usage var parse = require ( \"@textlint/text-to-ast\" ). parse ; var text = \"This is a text\\nParse text to AST\" ; var AST = parse ( text ); console . log ( JSON . stringify ( AST , null , 4 )) /* { \"type\": \"Document\", \"range\": [ 0, 32 ], \"loc\": { \"start\": { \"line\": 1, \"column\": 0 }, \"end\": { \"line\": 2, \"column\": 17 } }, \"children\": [ { \"type\": \"Paragraph\", \"raw\": \"This is a text\", \"range\": [ 0, 14 ], \"loc\": { \"start\": { \"line\": 1, \"column\": 0 }, \"end\": { \"line\": 1, \"column\": 14 } }, \"children\": [ { \"type\": \"Str\", \"raw\": \"This is a text\", \"range\": [ 0, 14 ], \"loc\": { \"start\": { \"line\": 1, \"column\": 0 }, \"end\": { \"line\": 1, \"column\": 14 } } } ] }, { \"type\": \"Break\", \"raw\": \"\\n\", \"range\": [ 14, 15 ], \"loc\": { \"start\": { \"line\": 1, \"column\": 14 }, \"end\": { \"line\": 1, \"column\": 15 } } }, { \"type\": \"Paragraph\", \"raw\": \"Parse text to AST\", \"range\": [ 15, 32 ], \"loc\": { \"start\": { \"line\": 2, \"column\": 0 }, \"end\": { \"line\": 2, \"column\": 17 } }, \"children\": [ { \"type\": \"Str\", \"raw\": \"Parse text to AST\", \"range\": [ 15, 32 ], \"loc\": { \"start\": { \"line\": 2, \"column\": 0 }, \"end\": { \"line\": 2, \"column\": 17 } } } ] } ] } */ Contributing Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request :D License MIT","title":"@textlint/text-to-ast"},{"location":"node_modules/%40textlint/text-to-ast/#textlinttext-to-ast","text":"Parse plain text to AST with location info. This library is a part of textlint/textlint . Markdown version: @textlint/markdown-to-ast The AST consists of TxtNode s. A TxtNode of the AST has following properties: loc - Nodes have line and column-based location info. range - Nodes have an index-based location range (array). raw - Node have a raw text. value - Node have a value of text. The interface are defined in textlint/txtnode.md This library is a part of textlint/textlint .","title":"@textlint/text-to-ast"},{"location":"node_modules/%40textlint/text-to-ast/#installation","text":"npm install @textlint/text-to-ast","title":"Installation"},{"location":"node_modules/%40textlint/text-to-ast/#demo","text":"AST explorer for textlint","title":"DEMO"},{"location":"node_modules/%40textlint/text-to-ast/#usage","text":"var parse = require ( \"@textlint/text-to-ast\" ). parse ; var text = \"This is a text\\nParse text to AST\" ; var AST = parse ( text ); console . log ( JSON . stringify ( AST , null , 4 )) /* { \"type\": \"Document\", \"range\": [ 0, 32 ], \"loc\": { \"start\": { \"line\": 1, \"column\": 0 }, \"end\": { \"line\": 2, \"column\": 17 } }, \"children\": [ { \"type\": \"Paragraph\", \"raw\": \"This is a text\", \"range\": [ 0, 14 ], \"loc\": { \"start\": { \"line\": 1, \"column\": 0 }, \"end\": { \"line\": 1, \"column\": 14 } }, \"children\": [ { \"type\": \"Str\", \"raw\": \"This is a text\", \"range\": [ 0, 14 ], \"loc\": { \"start\": { \"line\": 1, \"column\": 0 }, \"end\": { \"line\": 1, \"column\": 14 } } } ] }, { \"type\": \"Break\", \"raw\": \"\\n\", \"range\": [ 14, 15 ], \"loc\": { \"start\": { \"line\": 1, \"column\": 14 }, \"end\": { \"line\": 1, \"column\": 15 } } }, { \"type\": \"Paragraph\", \"raw\": \"Parse text to AST\", \"range\": [ 15, 32 ], \"loc\": { \"start\": { \"line\": 2, \"column\": 0 }, \"end\": { \"line\": 2, \"column\": 17 } }, \"children\": [ { \"type\": \"Str\", \"raw\": \"Parse text to AST\", \"range\": [ 15, 32 ], \"loc\": { \"start\": { \"line\": 2, \"column\": 0 }, \"end\": { \"line\": 2, \"column\": 17 } } } ] } ] } */","title":"Usage"},{"location":"node_modules/%40textlint/text-to-ast/#contributing","text":"Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request :D","title":"Contributing"},{"location":"node_modules/%40textlint/text-to-ast/#license","text":"MIT","title":"License"},{"location":"node_modules/%40textlint/textlint-plugin-markdown/","text":"@textlint/textlint-plugin-markdown Markdown support for textlint . Installation npm install @textlint/textlint-plugin-markdown Usage Built-in support on textlint. No need configuration. Following config is set by default. { \"plugins\": { \"@textlint/markdown\": true } } Options extensions : string[] Additional file extensions for markdown For example, if you want to treat MDX as markdown, put following config to .textlintrc { \"plugins\": { \"@textlint/markdown\": { \"extensions\": [\".mdx\"] } } } Tests npm test Contributing Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request :D License MIT","title":"@textlint/textlint-plugin-markdown"},{"location":"node_modules/%40textlint/textlint-plugin-markdown/#textlinttextlint-plugin-markdown","text":"Markdown support for textlint .","title":"@textlint/textlint-plugin-markdown"},{"location":"node_modules/%40textlint/textlint-plugin-markdown/#installation","text":"npm install @textlint/textlint-plugin-markdown","title":"Installation"},{"location":"node_modules/%40textlint/textlint-plugin-markdown/#usage","text":"Built-in support on textlint. No need configuration. Following config is set by default. { \"plugins\": { \"@textlint/markdown\": true } }","title":"Usage"},{"location":"node_modules/%40textlint/textlint-plugin-markdown/#options","text":"extensions : string[] Additional file extensions for markdown For example, if you want to treat MDX as markdown, put following config to .textlintrc { \"plugins\": { \"@textlint/markdown\": { \"extensions\": [\".mdx\"] } } }","title":"Options"},{"location":"node_modules/%40textlint/textlint-plugin-markdown/#tests","text":"npm test","title":"Tests"},{"location":"node_modules/%40textlint/textlint-plugin-markdown/#contributing","text":"Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request :D","title":"Contributing"},{"location":"node_modules/%40textlint/textlint-plugin-markdown/#license","text":"MIT","title":"License"},{"location":"node_modules/%40textlint/textlint-plugin-text/","text":"@textlint/textlint-plugin-text Plain text plugin for textlint . Install Install with npm : npm install @textlint/textlint-plugin-text Usage This plugin is built-in in textlint. No need configuration. Following config is set by default. { \"plugins\": { \"@textlint/text\": true } } Options extensions : string[] Additional file extensions for plain text For example, if you want to treat .custom-ext as text, put following config to .textlintrc { \"plugins\": { \"@textlint/text\": { \"extensions\": [\".custom-ext\"] } } } Changelog See Releases page . Running tests Install devDependencies and Run npm test : npm i -d && npm test Contributing Pull requests and stars are always welcome. For bugs and feature requests, please create an issue . Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request :D Author github/azu twitter/azu_re License MIT \u00a9 azu","title":"@textlint/textlint-plugin-text"},{"location":"node_modules/%40textlint/textlint-plugin-text/#textlinttextlint-plugin-text","text":"Plain text plugin for textlint .","title":"@textlint/textlint-plugin-text"},{"location":"node_modules/%40textlint/textlint-plugin-text/#install","text":"Install with npm : npm install @textlint/textlint-plugin-text","title":"Install"},{"location":"node_modules/%40textlint/textlint-plugin-text/#usage","text":"This plugin is built-in in textlint. No need configuration. Following config is set by default. { \"plugins\": { \"@textlint/text\": true } }","title":"Usage"},{"location":"node_modules/%40textlint/textlint-plugin-text/#options","text":"extensions : string[] Additional file extensions for plain text For example, if you want to treat .custom-ext as text, put following config to .textlintrc { \"plugins\": { \"@textlint/text\": { \"extensions\": [\".custom-ext\"] } } }","title":"Options"},{"location":"node_modules/%40textlint/textlint-plugin-text/#changelog","text":"See Releases page .","title":"Changelog"},{"location":"node_modules/%40textlint/textlint-plugin-text/#running-tests","text":"Install devDependencies and Run npm test : npm i -d && npm test","title":"Running tests"},{"location":"node_modules/%40textlint/textlint-plugin-text/#contributing","text":"Pull requests and stars are always welcome. For bugs and feature requests, please create an issue . Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request :D","title":"Contributing"},{"location":"node_modules/%40textlint/textlint-plugin-text/#author","text":"github/azu twitter/azu_re","title":"Author"},{"location":"node_modules/%40textlint/textlint-plugin-text/#license","text":"MIT \u00a9 azu","title":"License"},{"location":"node_modules/%40textlint/types/","text":"@textlint/types Type definition and Typed object package for textlint and textlint rule. If you import types from @textlint/kernel in your rule module, please use @textlint/types instead of it. Types Rule types Rule types includes following definition. Rule module types Rule report function types Rule Context types Rule types is depended from textlint's rule module and @textlint/kernel . By contrasts, textlint's rule module should not depended on @textlint/kernel OK: Rule types <--- Rule module OK: Rule types <--- Kernel module NG: Kernel module <--- Rule module NG: Kernel module ---> Rule module Abstraction Layer @textlint/types does not includes implementations. In other words, It has only type definition file. Install Install with npm : npm install @textlint/types Usage import type { TextlintSourceCode , TextlintSourceCodeArgs , TextlintSourceCodeLocation , TextlintSourceCodePosition , TextlintSourceCodeRange } from \"@textlint/types\" ; import type { TextlintRuleContextFixCommand } from \"@textlint/types\" ; import type { TextlintRuleContextFixCommandGenerator } from \"@textlint/types\" ; import type { TextlintRuleError , TextlintRuleErrorPadding , TextlintRuleReportedObject } from \"@textlint/types\" ; import type { TextlintRuleSeverityLevel } from \"@textlint/types\" ; import type { TextlintRuleContext , TextlintRuleContextArgs , TextlintRuleContextReportFunction , TextlintRuleContextReportFunctionArgs } from \"@textlint/types\" ; import type { TextlintRuleOptions } from \"@textlint/types\" ; import type { TextlintRuleReporter , TextlintFixableRuleModule , TextlintRuleModule , TextlintRuleReportHandler } from \"@textlint/types\" ; import type { TextlintFilterRuleContext , TextlintFilterRuleShouldIgnoreFunction , TextlintFilterRuleShouldIgnoreFunctionArgs } from \"@textlint/types\" ; import type { TextlintFilterRuleModule , TextlintFilterRuleOptions , TextlintFilterRuleReporter , TextlintFilterRuleReportHandler } from \"@textlint/types\" ; import type { TextlintPluginCreator , TextlintPluginOptions , TextlintPluginProcessor , TextlintPluginProcessorConstructor } from \"@textlint/types\" ; FAQ Occur incompatible types between @textlint/types and other module like textlint-rule-helper You should check if your @textlint/types dependencies is duplicated. @textlint/types should be deduped. npm ls @textlint/types If your dependencies is duplicated, you should update modules that are depended on @textlint/types . Versioning Policy @textlint/types is not semantic versioning. Because, This library provide only TypeScript definition. It is hard that we follow a semantic versioning. patch: fix bugs, maybe includes breaking change minor: add new types, maybe includes breaking change major: includes breaking change Changelog See Releases page . Running tests Install devDependencies and Run npm test : npm test Contributing Pull requests and stars are always welcome. For bugs and feature requests, please create an issue . Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request :D Author github/azu twitter/azu_re License MIT \u00a9 azu","title":"@textlint/types"},{"location":"node_modules/%40textlint/types/#textlinttypes","text":"Type definition and Typed object package for textlint and textlint rule. If you import types from @textlint/kernel in your rule module, please use @textlint/types instead of it.","title":"@textlint/types"},{"location":"node_modules/%40textlint/types/#types","text":"","title":"Types"},{"location":"node_modules/%40textlint/types/#rule-types","text":"Rule types includes following definition. Rule module types Rule report function types Rule Context types Rule types is depended from textlint's rule module and @textlint/kernel . By contrasts, textlint's rule module should not depended on @textlint/kernel OK: Rule types <--- Rule module OK: Rule types <--- Kernel module NG: Kernel module <--- Rule module NG: Kernel module ---> Rule module","title":"Rule types"},{"location":"node_modules/%40textlint/types/#abstraction-layer","text":"@textlint/types does not includes implementations. In other words, It has only type definition file.","title":"Abstraction Layer"},{"location":"node_modules/%40textlint/types/#install","text":"Install with npm : npm install @textlint/types","title":"Install"},{"location":"node_modules/%40textlint/types/#usage","text":"import type { TextlintSourceCode , TextlintSourceCodeArgs , TextlintSourceCodeLocation , TextlintSourceCodePosition , TextlintSourceCodeRange } from \"@textlint/types\" ; import type { TextlintRuleContextFixCommand } from \"@textlint/types\" ; import type { TextlintRuleContextFixCommandGenerator } from \"@textlint/types\" ; import type { TextlintRuleError , TextlintRuleErrorPadding , TextlintRuleReportedObject } from \"@textlint/types\" ; import type { TextlintRuleSeverityLevel } from \"@textlint/types\" ; import type { TextlintRuleContext , TextlintRuleContextArgs , TextlintRuleContextReportFunction , TextlintRuleContextReportFunctionArgs } from \"@textlint/types\" ; import type { TextlintRuleOptions } from \"@textlint/types\" ; import type { TextlintRuleReporter , TextlintFixableRuleModule , TextlintRuleModule , TextlintRuleReportHandler } from \"@textlint/types\" ; import type { TextlintFilterRuleContext , TextlintFilterRuleShouldIgnoreFunction , TextlintFilterRuleShouldIgnoreFunctionArgs } from \"@textlint/types\" ; import type { TextlintFilterRuleModule , TextlintFilterRuleOptions , TextlintFilterRuleReporter , TextlintFilterRuleReportHandler } from \"@textlint/types\" ; import type { TextlintPluginCreator , TextlintPluginOptions , TextlintPluginProcessor , TextlintPluginProcessorConstructor } from \"@textlint/types\" ;","title":"Usage"},{"location":"node_modules/%40textlint/types/#faq","text":"","title":"FAQ"},{"location":"node_modules/%40textlint/types/#occur-incompatible-types-between-textlinttypes-and-other-module-like-textlint-rule-helper","text":"You should check if your @textlint/types dependencies is duplicated. @textlint/types should be deduped. npm ls @textlint/types If your dependencies is duplicated, you should update modules that are depended on @textlint/types .","title":"Occur incompatible types between @textlint/types and other module like textlint-rule-helper"},{"location":"node_modules/%40textlint/types/#versioning-policy","text":"@textlint/types is not semantic versioning. Because, This library provide only TypeScript definition. It is hard that we follow a semantic versioning. patch: fix bugs, maybe includes breaking change minor: add new types, maybe includes breaking change major: includes breaking change","title":"Versioning Policy"},{"location":"node_modules/%40textlint/types/#changelog","text":"See Releases page .","title":"Changelog"},{"location":"node_modules/%40textlint/types/#running-tests","text":"Install devDependencies and Run npm test : npm test","title":"Running tests"},{"location":"node_modules/%40textlint/types/#contributing","text":"Pull requests and stars are always welcome. For bugs and feature requests, please create an issue . Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request :D","title":"Contributing"},{"location":"node_modules/%40textlint/types/#author","text":"github/azu twitter/azu_re","title":"Author"},{"location":"node_modules/%40textlint/types/#license","text":"MIT \u00a9 azu","title":"License"},{"location":"node_modules/%40textlint/utils/","text":"@textlint/utils textlint internal utils. Install Install with npm : npm install @textlint/utils Usage This utils is internal usage. [@textlint/types] has only abstract interface. [@textlint/utils] has implementation Changelog See Releases page . Running tests Install devDependencies and Run npm test : npm test Contributing Pull requests and stars are always welcome. For bugs and feature requests, please create an issue . Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request :D Author github/azu twitter/azu_re License MIT \u00a9 azu","title":"@textlint/utils"},{"location":"node_modules/%40textlint/utils/#textlintutils","text":"textlint internal utils.","title":"@textlint/utils"},{"location":"node_modules/%40textlint/utils/#install","text":"Install with npm : npm install @textlint/utils","title":"Install"},{"location":"node_modules/%40textlint/utils/#usage","text":"This utils is internal usage. [@textlint/types] has only abstract interface. [@textlint/utils] has implementation","title":"Usage"},{"location":"node_modules/%40textlint/utils/#changelog","text":"See Releases page .","title":"Changelog"},{"location":"node_modules/%40textlint/utils/#running-tests","text":"Install devDependencies and Run npm test : npm test","title":"Running tests"},{"location":"node_modules/%40textlint/utils/#contributing","text":"Pull requests and stars are always welcome. For bugs and feature requests, please create an issue . Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request :D","title":"Contributing"},{"location":"node_modules/%40textlint/utils/#author","text":"github/azu twitter/azu_re","title":"Author"},{"location":"node_modules/%40textlint/utils/#license","text":"MIT \u00a9 azu","title":"License"},{"location":"node_modules/%40types/mdast/","text":"Installation npm install --save @types/mdast Summary This package contains type definitions for Mdast (https://github.com/syntax-tree/mdast). Details Files were exported from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/mdast. Additional Details Last updated: Mon, 23 Aug 2021 20:18:29 GMT Dependencies: @types/unist Global values: none Credits These definitions were written by Christian Murphy , Jun Lu , Remco Haszing , and Titus Wormer .","title":"Installation"},{"location":"node_modules/%40types/mdast/#installation","text":"npm install --save @types/mdast","title":"Installation"},{"location":"node_modules/%40types/mdast/#summary","text":"This package contains type definitions for Mdast (https://github.com/syntax-tree/mdast).","title":"Summary"},{"location":"node_modules/%40types/mdast/#details","text":"Files were exported from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/mdast.","title":"Details"},{"location":"node_modules/%40types/mdast/#additional-details","text":"Last updated: Mon, 23 Aug 2021 20:18:29 GMT Dependencies: @types/unist Global values: none","title":"Additional Details"},{"location":"node_modules/%40types/mdast/#credits","text":"These definitions were written by Christian Murphy , Jun Lu , Remco Haszing , and Titus Wormer .","title":"Credits"},{"location":"node_modules/%40types/unist/","text":"Installation npm install --save @types/unist Summary This package contains type definitions for Unist (https://github.com/syntax-tree/unist). Details Files were exported from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/unist. Additional Details Last updated: Thu, 15 Jul 2021 00:31:23 GMT Dependencies: none Global values: none Credits These definitions were written by bizen241 , Jun Lu , Hernan Rajchert , Titus Wormer , Junyoung Choi , Ben Moon , and JounQin .","title":"Installation"},{"location":"node_modules/%40types/unist/#installation","text":"npm install --save @types/unist","title":"Installation"},{"location":"node_modules/%40types/unist/#summary","text":"This package contains type definitions for Unist (https://github.com/syntax-tree/unist).","title":"Summary"},{"location":"node_modules/%40types/unist/#details","text":"Files were exported from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/unist.","title":"Details"},{"location":"node_modules/%40types/unist/#additional-details","text":"Last updated: Thu, 15 Jul 2021 00:31:23 GMT Dependencies: none Global values: none","title":"Additional Details"},{"location":"node_modules/%40types/unist/#credits","text":"These definitions were written by bizen241 , Jun Lu , Hernan Rajchert , Titus Wormer , Junyoung Choi , Ben Moon , and JounQin .","title":"Credits"},{"location":"node_modules/ajv/","text":"Ajv JSON schema validator The fastest JSON validator for Node.js and browser. Supports JSON Schema draft-04/06/07/2019-09/2020-12 ( draft-04 support requires ajv-draft-04 package) and JSON Type Definition RFC8927 . Ajv sponsors Contributing More than 100 people contributed to Ajv, and we would love to have you join the development. We welcome implementing new features that will benefit many users and ideas to improve our documentation. Please review Contributing guidelines and Code components . Documentation All documentation is available on the Ajv website . Some useful site links: - Getting started - JSON Schema vs JSON Type Definition - API reference - Strict mode - Standalone validation code - Security considerations - Command line interface - Frequently Asked Questions Please sponsor Ajv development Since I asked to support Ajv development 40 people and 6 organizations contributed via GitHub and OpenCollective - this support helped receiving the MOSS grant! Your continuing support is very important - the funds will be used to develop and maintain Ajv once the next major version is released. Please sponsor Ajv via: GitHub sponsors page (GitHub will match it) Ajv Open Collective\ufe0f Thank you. Open Collective sponsors Performance Ajv generates code to turn JSON Schemas into super-fast validation functions that are efficient for v8 optimization. Currently Ajv is the fastest and the most standard compliant validator according to these benchmarks: json-schema-benchmark - 50% faster than the second place jsck benchmark - 20-190% faster z-schema benchmark themis benchmark Performance of different validators by json-schema-benchmark : Features Ajv implements JSON Schema draft-06/07/2019-09/2020-12 standards (draft-04 is supported in v6): all validation keywords (see JSON Schema validation keywords ) OpenAPI extensions: NEW: keyword discriminator . keyword nullable . full support of remote references (remote schemas have to be added with addSchema or compiled to be available) support of recursive references between schemas correct string lengths for strings with unicode pairs JSON Schema formats (with ajv-formats plugin). validates schemas against meta-schema NEW: supports JSON Type Definition : all keywords (see JSON Type Definition schema forms ) meta-schema for JTD schemas \"union\" keyword and user-defined keywords (can be used inside \"metadata\" member of the schema) supports browsers and Node.js 10.x - current asynchronous loading of referenced schemas during compilation \"All errors\" validation mode with option allErrors error messages with parameters describing error reasons to allow error message generation i18n error messages support with ajv-i18n package removing-additional-properties assigning defaults to missing properties and items coercing data to the types specified in type keywords user-defined keywords additional extension keywords with ajv-keywords package \\$data reference to use values from the validated data as values for the schema keywords asynchronous validation of user-defined formats and keywords Install To install version 8: npm install ajv Getting started Try it in the Node.js REPL: https://runkit.com/npm/ajv In JavaScript: // or ESM/TypeScript import import Ajv from \"ajv\" // Node.js require: const Ajv = require ( \"ajv\" ) const ajv = new Ajv () // options can be passed, e.g. {allErrors: true} const schema = { type : \"object\" , properties : { foo : { type : \"integer\" }, bar : { type : \"string\" } }, required : [ \"foo\" ], additionalProperties : false , } const data = { foo : 1 , bar : \"abc\" } const validate = ajv . compile ( schema ) const valid = validate ( data ) if ( ! valid ) console . log ( validate . errors ) Learn how to use Ajv and see more examples in the Guide: getting started Changes history See https://github.com/ajv-validator/ajv/releases Please note : Changes in version 8.0.0 Version 7.0.0 Version 6.0.0 . Code of conduct Please review and follow the Code of conduct . Please report any unacceptable behaviour to ajv.validator@gmail.com - it will be reviewed by the project team. Security contact To report a security vulnerability, please use the Tidelift security contact . Tidelift will coordinate the fix and disclosure. Please do NOT report security vulnerabilities via GitHub issues. Open-source software support Ajv is a part of Tidelift subscription - it provides a centralised support to open-source software users, in addition to the support provided by software maintainers. License MIT","title":"Index"},{"location":"node_modules/ajv/#ajv-json-schema-validator","text":"The fastest JSON validator for Node.js and browser. Supports JSON Schema draft-04/06/07/2019-09/2020-12 ( draft-04 support requires ajv-draft-04 package) and JSON Type Definition RFC8927 .","title":"Ajv JSON schema validator"},{"location":"node_modules/ajv/#ajv-sponsors","text":"","title":"Ajv sponsors"},{"location":"node_modules/ajv/#contributing","text":"More than 100 people contributed to Ajv, and we would love to have you join the development. We welcome implementing new features that will benefit many users and ideas to improve our documentation. Please review Contributing guidelines and Code components .","title":"Contributing"},{"location":"node_modules/ajv/#documentation","text":"All documentation is available on the Ajv website . Some useful site links: - Getting started - JSON Schema vs JSON Type Definition - API reference - Strict mode - Standalone validation code - Security considerations - Command line interface - Frequently Asked Questions","title":"Documentation"},{"location":"node_modules/ajv/#please-sponsor-ajv-development","text":"Since I asked to support Ajv development 40 people and 6 organizations contributed via GitHub and OpenCollective - this support helped receiving the MOSS grant! Your continuing support is very important - the funds will be used to develop and maintain Ajv once the next major version is released. Please sponsor Ajv via: GitHub sponsors page (GitHub will match it) Ajv Open Collective\ufe0f Thank you.","title":"Please sponsor Ajv development"},{"location":"node_modules/ajv/#open-collective-sponsors","text":"","title":"Open Collective sponsors"},{"location":"node_modules/ajv/#performance","text":"Ajv generates code to turn JSON Schemas into super-fast validation functions that are efficient for v8 optimization. Currently Ajv is the fastest and the most standard compliant validator according to these benchmarks: json-schema-benchmark - 50% faster than the second place jsck benchmark - 20-190% faster z-schema benchmark themis benchmark Performance of different validators by json-schema-benchmark :","title":"Performance"},{"location":"node_modules/ajv/#features","text":"Ajv implements JSON Schema draft-06/07/2019-09/2020-12 standards (draft-04 is supported in v6): all validation keywords (see JSON Schema validation keywords ) OpenAPI extensions: NEW: keyword discriminator . keyword nullable . full support of remote references (remote schemas have to be added with addSchema or compiled to be available) support of recursive references between schemas correct string lengths for strings with unicode pairs JSON Schema formats (with ajv-formats plugin). validates schemas against meta-schema NEW: supports JSON Type Definition : all keywords (see JSON Type Definition schema forms ) meta-schema for JTD schemas \"union\" keyword and user-defined keywords (can be used inside \"metadata\" member of the schema) supports browsers and Node.js 10.x - current asynchronous loading of referenced schemas during compilation \"All errors\" validation mode with option allErrors error messages with parameters describing error reasons to allow error message generation i18n error messages support with ajv-i18n package removing-additional-properties assigning defaults to missing properties and items coercing data to the types specified in type keywords user-defined keywords additional extension keywords with ajv-keywords package \\$data reference to use values from the validated data as values for the schema keywords asynchronous validation of user-defined formats and keywords","title":"Features"},{"location":"node_modules/ajv/#install","text":"To install version 8: npm install ajv","title":"Install"},{"location":"node_modules/ajv/#getting-started","text":"Try it in the Node.js REPL: https://runkit.com/npm/ajv In JavaScript: // or ESM/TypeScript import import Ajv from \"ajv\" // Node.js require: const Ajv = require ( \"ajv\" ) const ajv = new Ajv () // options can be passed, e.g. {allErrors: true} const schema = { type : \"object\" , properties : { foo : { type : \"integer\" }, bar : { type : \"string\" } }, required : [ \"foo\" ], additionalProperties : false , } const data = { foo : 1 , bar : \"abc\" } const validate = ajv . compile ( schema ) const valid = validate ( data ) if ( ! valid ) console . log ( validate . errors ) Learn how to use Ajv and see more examples in the Guide: getting started","title":"Getting started"},{"location":"node_modules/ajv/#changes-history","text":"See https://github.com/ajv-validator/ajv/releases Please note : Changes in version 8.0.0 Version 7.0.0 Version 6.0.0 .","title":"Changes history"},{"location":"node_modules/ajv/#code-of-conduct","text":"Please review and follow the Code of conduct . Please report any unacceptable behaviour to ajv.validator@gmail.com - it will be reviewed by the project team.","title":"Code of conduct"},{"location":"node_modules/ajv/#security-contact","text":"To report a security vulnerability, please use the Tidelift security contact . Tidelift will coordinate the fix and disclosure. Please do NOT report security vulnerabilities via GitHub issues.","title":"Security contact"},{"location":"node_modules/ajv/#open-source-software-support","text":"Ajv is a part of Tidelift subscription - it provides a centralised support to open-source software users, in addition to the support provided by software maintainers.","title":"Open-source software support"},{"location":"node_modules/ajv/#license","text":"MIT","title":"License"},{"location":"node_modules/ansi-regex/readme/","text":"ansi-regex Regular expression for matching ANSI escape codes Install $ npm install --save ansi-regex Usage const ansiRegex = require ( 'ansi-regex' ); ansiRegex (). test ( '\\u001b[4mcake\\u001b[0m' ); //=> true ansiRegex (). test ( 'cake' ); //=> false '\\u001b[4mcake\\u001b[0m' . match ( ansiRegex ()); //=> ['\\u001b[4m', '\\u001b[0m'] FAQ Why do you test for codes not in the ECMA 48 standard? Some of the codes we run as a test are codes that we acquired finding various lists of non-standard or manufacturer specific codes. If I recall correctly, we test for both standard and non-standard codes, as most of them follow the same or similar format and can be safely matched in strings without the risk of removing actual string content. There are a few non-standard control codes that do not follow the traditional format (i.e. they end in numbers) thus forcing us to exclude them from the test because we cannot reliably match them. On the historical side, those ECMA standards were established in the early 90's whereas the VT100, for example, was designed in the mid/late 70's. At that point in time, control codes were still pretty ungoverned and engineers used them for a multitude of things, namely to activate hardware ports that may have been proprietary. Somewhere else you see a similar 'anarchy' of codes is in the x86 architecture for processors; there are a ton of \"interrupts\" that can mean different things on certain brands of processors, most of which have been phased out. License MIT \u00a9 Sindre Sorhus","title":"ansi-regex [![Build Status](https://travis-ci.org/chalk/ansi-regex.svg?branch=master)](https://travis-ci.org/chalk/ansi-regex)"},{"location":"node_modules/ansi-regex/readme/#ansi-regex","text":"Regular expression for matching ANSI escape codes","title":"ansi-regex"},{"location":"node_modules/ansi-regex/readme/#install","text":"$ npm install --save ansi-regex","title":"Install"},{"location":"node_modules/ansi-regex/readme/#usage","text":"const ansiRegex = require ( 'ansi-regex' ); ansiRegex (). test ( '\\u001b[4mcake\\u001b[0m' ); //=> true ansiRegex (). test ( 'cake' ); //=> false '\\u001b[4mcake\\u001b[0m' . match ( ansiRegex ()); //=> ['\\u001b[4m', '\\u001b[0m']","title":"Usage"},{"location":"node_modules/ansi-regex/readme/#faq","text":"","title":"FAQ"},{"location":"node_modules/ansi-regex/readme/#why-do-you-test-for-codes-not-in-the-ecma-48-standard","text":"Some of the codes we run as a test are codes that we acquired finding various lists of non-standard or manufacturer specific codes. If I recall correctly, we test for both standard and non-standard codes, as most of them follow the same or similar format and can be safely matched in strings without the risk of removing actual string content. There are a few non-standard control codes that do not follow the traditional format (i.e. they end in numbers) thus forcing us to exclude them from the test because we cannot reliably match them. On the historical side, those ECMA standards were established in the early 90's whereas the VT100, for example, was designed in the mid/late 70's. At that point in time, control codes were still pretty ungoverned and engineers used them for a multitude of things, namely to activate hardware ports that may have been proprietary. Somewhere else you see a similar 'anarchy' of codes is in the x86 architecture for processors; there are a ton of \"interrupts\" that can mean different things on certain brands of processors, most of which have been phased out.","title":"Why do you test for codes not in the ECMA 48 standard?"},{"location":"node_modules/ansi-regex/readme/#license","text":"MIT \u00a9 Sindre Sorhus","title":"License"},{"location":"node_modules/ansi-styles/readme/","text":"ansi-styles ANSI escape codes for styling strings in the terminal You probably want the higher-level chalk module for styling your strings. Install $ npm install --save ansi-styles Usage var ansi = require ( 'ansi-styles' ); console . log ( ansi . green . open + 'Hello world!' + ansi . green . close ); API Each style has an open and close property. Styles Modifiers reset bold dim italic (not widely supported) underline inverse hidden strikethrough (not widely supported) Colors black red green yellow blue magenta cyan white gray Background colors bgBlack bgRed bgGreen bgYellow bgBlue bgMagenta bgCyan bgWhite Advanced usage By default you get a map of styles, but the styles are also available as groups. They are non-enumerable so they don't show up unless you access them explicitly. This makes it easier to expose only a subset in a higher-level module. ansi.modifiers ansi.colors ansi.bgColors Example console . log ( ansi . colors . green . open ); License MIT \u00a9 Sindre Sorhus","title":"ansi-styles [![Build Status](https://travis-ci.org/chalk/ansi-styles.svg?branch=master)](https://travis-ci.org/chalk/ansi-styles)"},{"location":"node_modules/ansi-styles/readme/#ansi-styles","text":"ANSI escape codes for styling strings in the terminal You probably want the higher-level chalk module for styling your strings.","title":"ansi-styles"},{"location":"node_modules/ansi-styles/readme/#install","text":"$ npm install --save ansi-styles","title":"Install"},{"location":"node_modules/ansi-styles/readme/#usage","text":"var ansi = require ( 'ansi-styles' ); console . log ( ansi . green . open + 'Hello world!' + ansi . green . close );","title":"Usage"},{"location":"node_modules/ansi-styles/readme/#api","text":"Each style has an open and close property.","title":"API"},{"location":"node_modules/ansi-styles/readme/#styles","text":"","title":"Styles"},{"location":"node_modules/ansi-styles/readme/#modifiers","text":"reset bold dim italic (not widely supported) underline inverse hidden strikethrough (not widely supported)","title":"Modifiers"},{"location":"node_modules/ansi-styles/readme/#colors","text":"black red green yellow blue magenta cyan white gray","title":"Colors"},{"location":"node_modules/ansi-styles/readme/#background-colors","text":"bgBlack bgRed bgGreen bgYellow bgBlue bgMagenta bgCyan bgWhite","title":"Background colors"},{"location":"node_modules/ansi-styles/readme/#advanced-usage","text":"By default you get a map of styles, but the styles are also available as groups. They are non-enumerable so they don't show up unless you access them explicitly. This makes it easier to expose only a subset in a higher-level module. ansi.modifiers ansi.colors ansi.bgColors","title":"Advanced usage"},{"location":"node_modules/ansi-styles/readme/#example","text":"console . log ( ansi . colors . green . open );","title":"Example"},{"location":"node_modules/ansi-styles/readme/#license","text":"MIT \u00a9 Sindre Sorhus","title":"License"},{"location":"node_modules/argparse/","text":"argparse CLI arguments parser for node.js. Javascript port of python's argparse module (original version 3.2). That's a full port, except some very rare options, recorded in issue tracker. NB. Difference with original. Method names changed to camelCase. See generated docs . Use defaultValue instead of default . Use argparse.Const.REMAINDER instead of argparse.REMAINDER , and similarly for constant values OPTIONAL , ZERO_OR_MORE , and ONE_OR_MORE (aliases for nargs values '?' , '*' , '+' , respectively), and SUPPRESS . Example test.js file: #!/usr/bin/env node 'use strict' ; var ArgumentParser = require ( '../lib/argparse' ). ArgumentParser ; var parser = new ArgumentParser ({ version : '0.0.1' , addHelp : true , description : 'Argparse example' }); parser . addArgument ( [ '-f' , '--foo' ], { help : 'foo bar' } ); parser . addArgument ( [ '-b' , '--bar' ], { help : 'bar foo' } ); parser . addArgument ( '--baz' , { help : 'baz bar' } ); var args = parser . parseArgs (); console . dir ( args ); Display help: $ ./test.js -h usage: example.js [-h] [-v] [-f FOO] [-b BAR] [--baz BAZ] Argparse example Optional arguments: -h, --help Show this help message and exit. -v, --version Show program's version number and exit. -f FOO, --foo FOO foo bar -b BAR, --bar BAR bar foo --baz BAZ baz bar Parse arguments: $ ./test.js -f=3 --bar=4 --baz 5 { foo: '3', bar: '4', baz: '5' } More examples . ArgumentParser objects new ArgumentParser({parameters hash}); Creates a new ArgumentParser object. Supported params: description - Text to display before the argument help. epilog - Text to display after the argument help. addHelp - Add a -h/\u2013help option to the parser. (default: true) argumentDefault - Set the global default value for arguments. (default: null) parents - A list of ArgumentParser objects whose arguments should also be included. prefixChars - The set of characters that prefix optional arguments. (default: \u2018-\u2018) formatterClass - A class for customizing the help output. prog - The name of the program (default: path.basename(process.argv[1]) ) usage - The string describing the program usage (default: generated) conflictHandler - Usually unnecessary, defines strategy for resolving conflicting optionals. Not supported yet fromfilePrefixChars - The set of characters that prefix files from which additional arguments should be read. Details in original ArgumentParser guide addArgument() method ArgumentParser.addArgument(name or flag or [name] or [flags...], {options}) Defines how a single command-line argument should be parsed. name or flag or [name] or [flags...] - Either a positional name (e.g., 'foo' ), a single option (e.g., '-f' or '--foo' ), an array of a single positional name (e.g., ['foo'] ), or an array of options (e.g., ['-f', '--foo'] ). Options: action - The basic type of action to be taken when this argument is encountered at the command line. nargs - The number of command-line arguments that should be consumed. constant - A constant value required by some action and nargs selections. defaultValue - The value produced if the argument is absent from the command line. type - The type to which the command-line argument should be converted. choices - A container of the allowable values for the argument. required - Whether or not the command-line option may be omitted (optionals only). help - A brief description of what the argument does. metavar - A name for the argument in usage messages. dest - The name of the attribute to be added to the object returned by parseArgs(). Details in original add_argument guide Action (some details) ArgumentParser objects associate command-line arguments with actions. These actions can do just about anything with the command-line arguments associated with them, though most actions simply add an attribute to the object returned by parseArgs(). The action keyword argument specifies how the command-line arguments should be handled. The supported actions are: store - Just stores the argument\u2019s value. This is the default action. storeConst - Stores value, specified by the const keyword argument. (Note that the const keyword argument defaults to the rather unhelpful None.) The 'storeConst' action is most commonly used with optional arguments, that specify some sort of flag. storeTrue and storeFalse - Stores values True and False respectively. These are special cases of 'storeConst'. append - Stores a list, and appends each argument value to the list. This is useful to allow an option to be specified multiple times. appendConst - Stores a list, and appends value, specified by the const keyword argument to the list. (Note, that the const keyword argument defaults is None.) The 'appendConst' action is typically used when multiple arguments need to store constants to the same list. count - Counts the number of times a keyword argument occurs. For example, used for increasing verbosity levels. help - Prints a complete help message for all the options in the current parser and then exits. By default a help action is automatically added to the parser. See ArgumentParser for details of how the output is created. version - Prints version information and exit. Expects a version= keyword argument in the addArgument() call. Details in original action guide Sub-commands ArgumentParser.addSubparsers() Many programs split their functionality into a number of sub-commands, for example, the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . Splitting up functionality this way can be a particularly good idea when a program performs several different functions which require different kinds of command-line arguments. ArgumentParser supports creation of such sub-commands with addSubparsers() method. The addSubparsers() method is normally called with no arguments and returns an special action object. This object has a single method addParser() , which takes a command name and any ArgumentParser constructor arguments, and returns an ArgumentParser object that can be modified as usual. Example: sub_commands.js #!/usr/bin/env node 'use strict' ; var ArgumentParser = require ( '../lib/argparse' ). ArgumentParser ; var parser = new ArgumentParser ({ version : '0.0.1' , addHelp : true , description : 'Argparse examples: sub-commands' , }); var subparsers = parser . addSubparsers ({ title : 'subcommands' , dest : \"subcommand_name\" }); var bar = subparsers . addParser ( 'c1' , { addHelp : true }); bar . addArgument ( [ '-f' , '--foo' ], { action : 'store' , help : 'foo3 bar3' } ); var bar = subparsers . addParser ( 'c2' , { aliases : [ 'co' ], addHelp : true } ); bar . addArgument ( [ '-b' , '--bar' ], { action : 'store' , type : 'int' , help : 'foo3 bar3' } ); var args = parser . parseArgs (); console . dir ( args ); Details in original sub-commands guide Contributors Eugene Shkuropat Paul Jacobson others License Copyright (c) 2012 Vitaly Puzrin . Released under the MIT license. See LICENSE for details.","title":"Index"},{"location":"node_modules/argparse/#argparse","text":"CLI arguments parser for node.js. Javascript port of python's argparse module (original version 3.2). That's a full port, except some very rare options, recorded in issue tracker. NB. Difference with original. Method names changed to camelCase. See generated docs . Use defaultValue instead of default . Use argparse.Const.REMAINDER instead of argparse.REMAINDER , and similarly for constant values OPTIONAL , ZERO_OR_MORE , and ONE_OR_MORE (aliases for nargs values '?' , '*' , '+' , respectively), and SUPPRESS .","title":"argparse"},{"location":"node_modules/argparse/#example","text":"test.js file: #!/usr/bin/env node 'use strict' ; var ArgumentParser = require ( '../lib/argparse' ). ArgumentParser ; var parser = new ArgumentParser ({ version : '0.0.1' , addHelp : true , description : 'Argparse example' }); parser . addArgument ( [ '-f' , '--foo' ], { help : 'foo bar' } ); parser . addArgument ( [ '-b' , '--bar' ], { help : 'bar foo' } ); parser . addArgument ( '--baz' , { help : 'baz bar' } ); var args = parser . parseArgs (); console . dir ( args ); Display help: $ ./test.js -h usage: example.js [-h] [-v] [-f FOO] [-b BAR] [--baz BAZ] Argparse example Optional arguments: -h, --help Show this help message and exit. -v, --version Show program's version number and exit. -f FOO, --foo FOO foo bar -b BAR, --bar BAR bar foo --baz BAZ baz bar Parse arguments: $ ./test.js -f=3 --bar=4 --baz 5 { foo: '3', bar: '4', baz: '5' } More examples .","title":"Example"},{"location":"node_modules/argparse/#argumentparser-objects","text":"new ArgumentParser({parameters hash}); Creates a new ArgumentParser object. Supported params: description - Text to display before the argument help. epilog - Text to display after the argument help. addHelp - Add a -h/\u2013help option to the parser. (default: true) argumentDefault - Set the global default value for arguments. (default: null) parents - A list of ArgumentParser objects whose arguments should also be included. prefixChars - The set of characters that prefix optional arguments. (default: \u2018-\u2018) formatterClass - A class for customizing the help output. prog - The name of the program (default: path.basename(process.argv[1]) ) usage - The string describing the program usage (default: generated) conflictHandler - Usually unnecessary, defines strategy for resolving conflicting optionals. Not supported yet fromfilePrefixChars - The set of characters that prefix files from which additional arguments should be read. Details in original ArgumentParser guide","title":"ArgumentParser objects"},{"location":"node_modules/argparse/#addargument-method","text":"ArgumentParser.addArgument(name or flag or [name] or [flags...], {options}) Defines how a single command-line argument should be parsed. name or flag or [name] or [flags...] - Either a positional name (e.g., 'foo' ), a single option (e.g., '-f' or '--foo' ), an array of a single positional name (e.g., ['foo'] ), or an array of options (e.g., ['-f', '--foo'] ). Options: action - The basic type of action to be taken when this argument is encountered at the command line. nargs - The number of command-line arguments that should be consumed. constant - A constant value required by some action and nargs selections. defaultValue - The value produced if the argument is absent from the command line. type - The type to which the command-line argument should be converted. choices - A container of the allowable values for the argument. required - Whether or not the command-line option may be omitted (optionals only). help - A brief description of what the argument does. metavar - A name for the argument in usage messages. dest - The name of the attribute to be added to the object returned by parseArgs(). Details in original add_argument guide","title":"addArgument() method"},{"location":"node_modules/argparse/#action-some-details","text":"ArgumentParser objects associate command-line arguments with actions. These actions can do just about anything with the command-line arguments associated with them, though most actions simply add an attribute to the object returned by parseArgs(). The action keyword argument specifies how the command-line arguments should be handled. The supported actions are: store - Just stores the argument\u2019s value. This is the default action. storeConst - Stores value, specified by the const keyword argument. (Note that the const keyword argument defaults to the rather unhelpful None.) The 'storeConst' action is most commonly used with optional arguments, that specify some sort of flag. storeTrue and storeFalse - Stores values True and False respectively. These are special cases of 'storeConst'. append - Stores a list, and appends each argument value to the list. This is useful to allow an option to be specified multiple times. appendConst - Stores a list, and appends value, specified by the const keyword argument to the list. (Note, that the const keyword argument defaults is None.) The 'appendConst' action is typically used when multiple arguments need to store constants to the same list. count - Counts the number of times a keyword argument occurs. For example, used for increasing verbosity levels. help - Prints a complete help message for all the options in the current parser and then exits. By default a help action is automatically added to the parser. See ArgumentParser for details of how the output is created. version - Prints version information and exit. Expects a version= keyword argument in the addArgument() call. Details in original action guide","title":"Action (some details)"},{"location":"node_modules/argparse/#sub-commands","text":"ArgumentParser.addSubparsers() Many programs split their functionality into a number of sub-commands, for example, the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . Splitting up functionality this way can be a particularly good idea when a program performs several different functions which require different kinds of command-line arguments. ArgumentParser supports creation of such sub-commands with addSubparsers() method. The addSubparsers() method is normally called with no arguments and returns an special action object. This object has a single method addParser() , which takes a command name and any ArgumentParser constructor arguments, and returns an ArgumentParser object that can be modified as usual. Example: sub_commands.js #!/usr/bin/env node 'use strict' ; var ArgumentParser = require ( '../lib/argparse' ). ArgumentParser ; var parser = new ArgumentParser ({ version : '0.0.1' , addHelp : true , description : 'Argparse examples: sub-commands' , }); var subparsers = parser . addSubparsers ({ title : 'subcommands' , dest : \"subcommand_name\" }); var bar = subparsers . addParser ( 'c1' , { addHelp : true }); bar . addArgument ( [ '-f' , '--foo' ], { action : 'store' , help : 'foo3 bar3' } ); var bar = subparsers . addParser ( 'c2' , { aliases : [ 'co' ], addHelp : true } ); bar . addArgument ( [ '-b' , '--bar' ], { action : 'store' , type : 'int' , help : 'foo3 bar3' } ); var args = parser . parseArgs (); console . dir ( args ); Details in original sub-commands guide","title":"Sub-commands"},{"location":"node_modules/argparse/#contributors","text":"Eugene Shkuropat Paul Jacobson others","title":"Contributors"},{"location":"node_modules/argparse/#license","text":"Copyright (c) 2012 Vitaly Puzrin . Released under the MIT license. See LICENSE for details.","title":"License"},{"location":"node_modules/argparse/CHANGELOG/","text":"1.0.10 / 2018-02-15 Use .concat instead of + for arrays, #122. 1.0.9 / 2016-09-29 Rerelease after 1.0.8 - deps cleanup. 1.0.8 / 2016-09-29 Maintenance (deps bump, fix node 6.5+ tests, coverage report). 1.0.7 / 2016-03-17 Teach addArgument to accept string arg names. #97, @tomxtobin. 1.0.6 / 2016-02-06 Maintenance: moved to eslint & updated CS. 1.0.5 / 2016-02-05 Removed lodash dependency to significantly reduce install size. Thanks to @mourner. 1.0.4 / 2016-01-17 Maintenance: lodash update to 4.0.0. 1.0.3 / 2015-10-27 Fix parse = in args: --examplepath=\"C:\\myfolder\\env=x64\" . #84, @CatWithApple. 1.0.2 / 2015-03-22 Relaxed lodash version dependency. 1.0.1 / 2015-02-20 Changed dependencies to be compatible with ancient nodejs. 1.0.0 / 2015-02-19 Maintenance release. Replaced underscore with lodash . Bumped version to 1.0.0 to better reflect semver meaning. HISTORY.md -> CHANGELOG.md 0.1.16 / 2013-12-01 Maintenance release. Updated dependencies and docs. 0.1.15 / 2013-05-13 Fixed #55, @trebor89 0.1.14 / 2013-05-12 Fixed #62, @maxtaco 0.1.13 / 2013-04-08 Added .npmignore to reduce package size 0.1.12 / 2013-02-10 Fixed conflictHandler (#46), @hpaulj 0.1.11 / 2013-02-07 Multiple bugfixes, @hpaulj Added 70+ tests (ported from python), @hpaulj Added conflictHandler, @applepicke Added fromfilePrefixChar, @hpaulj 0.1.10 / 2012-12-30 Added mutual exclusion support, thanks to @hpaulj Fixed options check for storeConst & appendConst actions, thanks to @hpaulj 0.1.9 / 2012-12-27 Fixed option dest interferens with other options (issue #23), thanks to @hpaulj Fixed default value behavior with * positionals, thanks to @hpaulj Improve getDefault() behavior, thanks to @hpaulj Imrove negative argument parsing, thanks to @hpaulj 0.1.8 / 2012-12-01 Fixed parser parents (issue #19), thanks to @hpaulj Fixed negative argument parse (issue #20), thanks to @hpaulj 0.1.7 / 2012-10-14 Fixed 'choices' argument parse (issue #16) Fixed stderr output (issue #15) 0.1.6 / 2012-09-09 Fixed check for conflict of options (thanks to @tomxtobin) 0.1.5 / 2012-09-03 Fix parser #setDefaults method (thanks to @tomxtobin) 0.1.4 / 2012-07-30 Fixed pseudo-argument support (thanks to @CGamesPlay) Fixed addHelp default (should be true), if not set (thanks to @benblank) 0.1.3 / 2012-06-27 Fixed formatter api name: Formatter -> HelpFormatter 0.1.2 / 2012-05-29 Added basic tests Removed excess whitespace in help Fixed error reporting, when parcer with subcommands called with empty arguments 0.1.1 / 2012-05-23 Fixed line wrapping in help formatter Added better error reporting on invalid arguments 0.1.0 / 2012-05-16 First release.","title":"CHANGELOG"},{"location":"node_modules/argparse/CHANGELOG/#1010-2018-02-15","text":"Use .concat instead of + for arrays, #122.","title":"1.0.10 / 2018-02-15"},{"location":"node_modules/argparse/CHANGELOG/#109-2016-09-29","text":"Rerelease after 1.0.8 - deps cleanup.","title":"1.0.9 / 2016-09-29"},{"location":"node_modules/argparse/CHANGELOG/#108-2016-09-29","text":"Maintenance (deps bump, fix node 6.5+ tests, coverage report).","title":"1.0.8 / 2016-09-29"},{"location":"node_modules/argparse/CHANGELOG/#107-2016-03-17","text":"Teach addArgument to accept string arg names. #97, @tomxtobin.","title":"1.0.7 / 2016-03-17"},{"location":"node_modules/argparse/CHANGELOG/#106-2016-02-06","text":"Maintenance: moved to eslint & updated CS.","title":"1.0.6 / 2016-02-06"},{"location":"node_modules/argparse/CHANGELOG/#105-2016-02-05","text":"Removed lodash dependency to significantly reduce install size. Thanks to @mourner.","title":"1.0.5 / 2016-02-05"},{"location":"node_modules/argparse/CHANGELOG/#104-2016-01-17","text":"Maintenance: lodash update to 4.0.0.","title":"1.0.4 / 2016-01-17"},{"location":"node_modules/argparse/CHANGELOG/#103-2015-10-27","text":"Fix parse = in args: --examplepath=\"C:\\myfolder\\env=x64\" . #84, @CatWithApple.","title":"1.0.3 / 2015-10-27"},{"location":"node_modules/argparse/CHANGELOG/#102-2015-03-22","text":"Relaxed lodash version dependency.","title":"1.0.2 / 2015-03-22"},{"location":"node_modules/argparse/CHANGELOG/#101-2015-02-20","text":"Changed dependencies to be compatible with ancient nodejs.","title":"1.0.1 / 2015-02-20"},{"location":"node_modules/argparse/CHANGELOG/#100-2015-02-19","text":"Maintenance release. Replaced underscore with lodash . Bumped version to 1.0.0 to better reflect semver meaning. HISTORY.md -> CHANGELOG.md","title":"1.0.0 / 2015-02-19"},{"location":"node_modules/argparse/CHANGELOG/#0116-2013-12-01","text":"Maintenance release. Updated dependencies and docs.","title":"0.1.16 / 2013-12-01"},{"location":"node_modules/argparse/CHANGELOG/#0115-2013-05-13","text":"Fixed #55, @trebor89","title":"0.1.15 / 2013-05-13"},{"location":"node_modules/argparse/CHANGELOG/#0114-2013-05-12","text":"Fixed #62, @maxtaco","title":"0.1.14 / 2013-05-12"},{"location":"node_modules/argparse/CHANGELOG/#0113-2013-04-08","text":"Added .npmignore to reduce package size","title":"0.1.13 / 2013-04-08"},{"location":"node_modules/argparse/CHANGELOG/#0112-2013-02-10","text":"Fixed conflictHandler (#46), @hpaulj","title":"0.1.12 / 2013-02-10"},{"location":"node_modules/argparse/CHANGELOG/#0111-2013-02-07","text":"Multiple bugfixes, @hpaulj Added 70+ tests (ported from python), @hpaulj Added conflictHandler, @applepicke Added fromfilePrefixChar, @hpaulj","title":"0.1.11 / 2013-02-07"},{"location":"node_modules/argparse/CHANGELOG/#0110-2012-12-30","text":"Added mutual exclusion support, thanks to @hpaulj Fixed options check for storeConst & appendConst actions, thanks to @hpaulj","title":"0.1.10 / 2012-12-30"},{"location":"node_modules/argparse/CHANGELOG/#019-2012-12-27","text":"Fixed option dest interferens with other options (issue #23), thanks to @hpaulj Fixed default value behavior with * positionals, thanks to @hpaulj Improve getDefault() behavior, thanks to @hpaulj Imrove negative argument parsing, thanks to @hpaulj","title":"0.1.9 / 2012-12-27"},{"location":"node_modules/argparse/CHANGELOG/#018-2012-12-01","text":"Fixed parser parents (issue #19), thanks to @hpaulj Fixed negative argument parse (issue #20), thanks to @hpaulj","title":"0.1.8 / 2012-12-01"},{"location":"node_modules/argparse/CHANGELOG/#017-2012-10-14","text":"Fixed 'choices' argument parse (issue #16) Fixed stderr output (issue #15)","title":"0.1.7 / 2012-10-14"},{"location":"node_modules/argparse/CHANGELOG/#016-2012-09-09","text":"Fixed check for conflict of options (thanks to @tomxtobin)","title":"0.1.6 / 2012-09-09"},{"location":"node_modules/argparse/CHANGELOG/#015-2012-09-03","text":"Fix parser #setDefaults method (thanks to @tomxtobin)","title":"0.1.5 / 2012-09-03"},{"location":"node_modules/argparse/CHANGELOG/#014-2012-07-30","text":"Fixed pseudo-argument support (thanks to @CGamesPlay) Fixed addHelp default (should be true), if not set (thanks to @benblank)","title":"0.1.4 / 2012-07-30"},{"location":"node_modules/argparse/CHANGELOG/#013-2012-06-27","text":"Fixed formatter api name: Formatter -> HelpFormatter","title":"0.1.3 / 2012-06-27"},{"location":"node_modules/argparse/CHANGELOG/#012-2012-05-29","text":"Added basic tests Removed excess whitespace in help Fixed error reporting, when parcer with subcommands called with empty arguments","title":"0.1.2 / 2012-05-29"},{"location":"node_modules/argparse/CHANGELOG/#011-2012-05-23","text":"Fixed line wrapping in help formatter Added better error reporting on invalid arguments","title":"0.1.1 / 2012-05-23"},{"location":"node_modules/argparse/CHANGELOG/#010-2012-05-16","text":"First release.","title":"0.1.0 / 2012-05-16"},{"location":"node_modules/astral-regex/readme/","text":"astral-regex Regular expression for matching astral symbols Install $ npm install astral-regex Usage const astralRegex = require ( 'astral-regex' ); astralRegex ({ exact : true }). test ( '\ud83e\udd84' ); //=> true 'foo \ud83e\udd84 \ud83d\udca9 bar' . match ( astralRegex ()); //=> ['\ud83e\udd84', '\ud83d\udca9'] API astralRegex([options]) Returns a RegExp for matching astral symbols. options Type: Object exact Type: boolean Default: false (Matches any astral symbols in a string) Only match an exact string. Useful with RegExp#test() to check if a string is a astral symbol. License MIT \u00a9 Kevin M\u00e5rtensson","title":"astral-regex [![Build Status](https://travis-ci.org/kevva/astral-regex.svg?branch=master)](https://travis-ci.org/kevva/astral-regex)"},{"location":"node_modules/astral-regex/readme/#astral-regex","text":"Regular expression for matching astral symbols","title":"astral-regex"},{"location":"node_modules/astral-regex/readme/#install","text":"$ npm install astral-regex","title":"Install"},{"location":"node_modules/astral-regex/readme/#usage","text":"const astralRegex = require ( 'astral-regex' ); astralRegex ({ exact : true }). test ( '\ud83e\udd84' ); //=> true 'foo \ud83e\udd84 \ud83d\udca9 bar' . match ( astralRegex ()); //=> ['\ud83e\udd84', '\ud83d\udca9']","title":"Usage"},{"location":"node_modules/astral-regex/readme/#api","text":"","title":"API"},{"location":"node_modules/astral-regex/readme/#astralregexoptions","text":"Returns a RegExp for matching astral symbols.","title":"astralRegex([options])"},{"location":"node_modules/astral-regex/readme/#options","text":"Type: Object","title":"options"},{"location":"node_modules/astral-regex/readme/#exact","text":"Type: boolean Default: false (Matches any astral symbols in a string) Only match an exact string. Useful with RegExp#test() to check if a string is a astral symbol.","title":"exact"},{"location":"node_modules/astral-regex/readme/#license","text":"MIT \u00a9 Kevin M\u00e5rtensson","title":"License"},{"location":"node_modules/bail/readme/","text":"bail :warning: Throw a given error. Install npm : npm install bail Use var bail = require ( 'bail' ) bail () bail ( new Error ( 'failure' )) // Error: failure // at repl:1:6 // at REPLServer.defaultEval (repl.js:154:27) // \u2026 API bail([err]) Throw a given error. Parameters err ( Error? ) \u2014 Optional error. Throws Error \u2014 Given error, if any. Related noop noop2 noop3 License MIT \u00a9 Titus Wormer","title":"bail"},{"location":"node_modules/bail/readme/#bail","text":":warning: Throw a given error.","title":"bail"},{"location":"node_modules/bail/readme/#install","text":"npm : npm install bail","title":"Install"},{"location":"node_modules/bail/readme/#use","text":"var bail = require ( 'bail' ) bail () bail ( new Error ( 'failure' )) // Error: failure // at repl:1:6 // at REPLServer.defaultEval (repl.js:154:27) // \u2026","title":"Use"},{"location":"node_modules/bail/readme/#api","text":"","title":"API"},{"location":"node_modules/bail/readme/#bailerr","text":"Throw a given error.","title":"bail([err])"},{"location":"node_modules/bail/readme/#parameters","text":"err ( Error? ) \u2014 Optional error.","title":"Parameters"},{"location":"node_modules/bail/readme/#throws","text":"Error \u2014 Given error, if any.","title":"Throws"},{"location":"node_modules/bail/readme/#related","text":"noop noop2 noop3","title":"Related"},{"location":"node_modules/bail/readme/#license","text":"MIT \u00a9 Titus Wormer","title":"License"},{"location":"node_modules/balanced-match/","text":"balanced-match Match balanced string pairs, like { and } or <b> and </b> . Supports regular expressions as well! Example Get the first matching pair of braces: var balanced = require ( 'balanced-match' ); console . log ( balanced ( '{' , '}' , 'pre{in{nested}}post' )); console . log ( balanced ( '{' , '}' , 'pre{first}between{second}post' )); console . log ( balanced ( /\\s+\\{\\s+/ , /\\s+\\}\\s+/ , 'pre { in{nest} } post' )); The matches are: $ node example.js { start: 3 , end: 14 , pre: 'pre' , body: 'in{nested}' , post: 'post' } { start: 3 , end: 9 , pre: 'pre' , body: 'first' , post: 'between{second}post' } { start: 3 , end: 17 , pre: 'pre' , body: 'in{nest}' , post: 'post' } API var m = balanced(a, b, str) For the first non-nested matching pair of a and b in str , return an object with those keys: start the index of the first match of a end the index of the matching b pre the preamble, a and b not included body the match, a and b not included post the postscript, a and b not included If there's no match, undefined will be returned. If the str contains more a than b / there are unmatched pairs, the first match that was closed will be used. For example, {{a} will match ['{', 'a', ''] and {a}} will match ['', 'a', '}'] . var r = balanced.range(a, b, str) For the first non-nested matching pair of a and b in str , return an array with indexes: [ <a index>, <b index> ] . If there's no match, undefined will be returned. If the str contains more a than b / there are unmatched pairs, the first match that was closed will be used. For example, {{a} will match [ 1, 3 ] and {a}} will match [0, 2] . Installation With npm do: npm install balanced-match Security contact information To report a security vulnerability, please use the Tidelift security contact . Tidelift will coordinate the fix and disclosure. License (MIT) Copyright (c) 2013 Julian Gruber <julian@juliangruber.com> Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"balanced-match"},{"location":"node_modules/balanced-match/#balanced-match","text":"Match balanced string pairs, like { and } or <b> and </b> . Supports regular expressions as well!","title":"balanced-match"},{"location":"node_modules/balanced-match/#example","text":"Get the first matching pair of braces: var balanced = require ( 'balanced-match' ); console . log ( balanced ( '{' , '}' , 'pre{in{nested}}post' )); console . log ( balanced ( '{' , '}' , 'pre{first}between{second}post' )); console . log ( balanced ( /\\s+\\{\\s+/ , /\\s+\\}\\s+/ , 'pre { in{nest} } post' )); The matches are: $ node example.js { start: 3 , end: 14 , pre: 'pre' , body: 'in{nested}' , post: 'post' } { start: 3 , end: 9 , pre: 'pre' , body: 'first' , post: 'between{second}post' } { start: 3 , end: 17 , pre: 'pre' , body: 'in{nest}' , post: 'post' }","title":"Example"},{"location":"node_modules/balanced-match/#api","text":"","title":"API"},{"location":"node_modules/balanced-match/#var-m-balanceda-b-str","text":"For the first non-nested matching pair of a and b in str , return an object with those keys: start the index of the first match of a end the index of the matching b pre the preamble, a and b not included body the match, a and b not included post the postscript, a and b not included If there's no match, undefined will be returned. If the str contains more a than b / there are unmatched pairs, the first match that was closed will be used. For example, {{a} will match ['{', 'a', ''] and {a}} will match ['', 'a', '}'] .","title":"var m = balanced(a, b, str)"},{"location":"node_modules/balanced-match/#var-r-balancedrangea-b-str","text":"For the first non-nested matching pair of a and b in str , return an array with indexes: [ <a index>, <b index> ] . If there's no match, undefined will be returned. If the str contains more a than b / there are unmatched pairs, the first match that was closed will be used. For example, {{a} will match [ 1, 3 ] and {a}} will match [0, 2] .","title":"var r = balanced.range(a, b, str)"},{"location":"node_modules/balanced-match/#installation","text":"With npm do: npm install balanced-match","title":"Installation"},{"location":"node_modules/balanced-match/#security-contact-information","text":"To report a security vulnerability, please use the Tidelift security contact . Tidelift will coordinate the fix and disclosure.","title":"Security contact information"},{"location":"node_modules/balanced-match/#license","text":"(MIT) Copyright (c) 2013 Julian Gruber <julian@juliangruber.com> Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"node_modules/balanced-match/LICENSE/","text":"(MIT) Copyright (c) 2013 Julian Gruber <julian@juliangruber.com> Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"LICENSE"},{"location":"node_modules/boundary/","text":"boundary About Provides binary search functions. Installation npm install boundary Usage function lessThan ( v1 , v2 ) { return v1 < v2 ; } // boundary.upperBound(sortedArray, value, compare = lessThan); assert ( upperBound ([ 0 , 0 , 2 , 3 , 4 ], - 1 ) === 0 ); assert ( upperBound ([ 0 , 0 , 2 , 3 , 4 ], 0 ) === 2 ); assert ( upperBound ([ 0 , 0 , 2 , 3 , 4 ], 1 ) === 2 ); assert ( upperBound ([ 0 , 0 , 2 , 3 , 4 ], 2 ) === 3 ); assert ( upperBound ([ 0 , 0 , 2 , 3 , 4 ], 3 ) === 4 ); assert ( upperBound ([ 0 , 0 , 2 , 3 , 4 ], 4 ) === 5 ); assert ( upperBound ([ 0 , 0 , 2 , 3 , 4 ], 5 ) === 5 ); // boundary.lowerBound(sortedArray, value, compare = lessThan); assert ( lowerBound ([ 0 , 0 , 2 , 3 , 4 ], - 1 ) === 0 ); assert ( lowerBound ([ 0 , 0 , 2 , 3 , 4 ], 0 ) === 0 ); assert ( lowerBound ([ 0 , 0 , 2 , 3 , 4 ], 1 ) === 2 ); assert ( lowerBound ([ 0 , 0 , 2 , 3 , 4 ], 2 ) === 2 ); assert ( lowerBound ([ 0 , 0 , 2 , 3 , 4 ], 3 ) === 3 ); assert ( lowerBound ([ 0 , 0 , 2 , 3 , 4 ], 4 ) === 4 ); assert ( lowerBound ([ 0 , 0 , 2 , 3 , 4 ], 5 ) === 5 ); // boundary.binarySearch(sortedArray, value, compare = lessThan); assert ( binarySearch ([ 0 , 0 , 2 , 3 , 4 ], - 1 ) === false ); assert ( binarySearch ([ 0 , 0 , 2 , 3 , 4 ], 0 ) === true ); assert ( binarySearch ([ 0 , 0 , 2 , 3 , 4 ], 1 ) === false ); assert ( binarySearch ([ 0 , 0 , 2 , 3 , 4 ], 2 ) === true ); assert ( binarySearch ([ 0 , 0 , 2 , 3 , 4 ], 3 ) === true ); assert ( binarySearch ([ 0 , 0 , 2 , 3 , 4 ], 4 ) === true ); assert ( binarySearch ([ 0 , 0 , 2 , 3 , 4 ], 5 ) === false ); License Copyright (C) 2012-2014 Yusuke Suzuki (twitter: @Constellation ) and other contributors. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Index"},{"location":"node_modules/boundary/#boundary","text":"","title":"boundary"},{"location":"node_modules/boundary/#about","text":"Provides binary search functions.","title":"About"},{"location":"node_modules/boundary/#installation","text":"npm install boundary","title":"Installation"},{"location":"node_modules/boundary/#usage","text":"function lessThan ( v1 , v2 ) { return v1 < v2 ; } // boundary.upperBound(sortedArray, value, compare = lessThan); assert ( upperBound ([ 0 , 0 , 2 , 3 , 4 ], - 1 ) === 0 ); assert ( upperBound ([ 0 , 0 , 2 , 3 , 4 ], 0 ) === 2 ); assert ( upperBound ([ 0 , 0 , 2 , 3 , 4 ], 1 ) === 2 ); assert ( upperBound ([ 0 , 0 , 2 , 3 , 4 ], 2 ) === 3 ); assert ( upperBound ([ 0 , 0 , 2 , 3 , 4 ], 3 ) === 4 ); assert ( upperBound ([ 0 , 0 , 2 , 3 , 4 ], 4 ) === 5 ); assert ( upperBound ([ 0 , 0 , 2 , 3 , 4 ], 5 ) === 5 ); // boundary.lowerBound(sortedArray, value, compare = lessThan); assert ( lowerBound ([ 0 , 0 , 2 , 3 , 4 ], - 1 ) === 0 ); assert ( lowerBound ([ 0 , 0 , 2 , 3 , 4 ], 0 ) === 0 ); assert ( lowerBound ([ 0 , 0 , 2 , 3 , 4 ], 1 ) === 2 ); assert ( lowerBound ([ 0 , 0 , 2 , 3 , 4 ], 2 ) === 2 ); assert ( lowerBound ([ 0 , 0 , 2 , 3 , 4 ], 3 ) === 3 ); assert ( lowerBound ([ 0 , 0 , 2 , 3 , 4 ], 4 ) === 4 ); assert ( lowerBound ([ 0 , 0 , 2 , 3 , 4 ], 5 ) === 5 ); // boundary.binarySearch(sortedArray, value, compare = lessThan); assert ( binarySearch ([ 0 , 0 , 2 , 3 , 4 ], - 1 ) === false ); assert ( binarySearch ([ 0 , 0 , 2 , 3 , 4 ], 0 ) === true ); assert ( binarySearch ([ 0 , 0 , 2 , 3 , 4 ], 1 ) === false ); assert ( binarySearch ([ 0 , 0 , 2 , 3 , 4 ], 2 ) === true ); assert ( binarySearch ([ 0 , 0 , 2 , 3 , 4 ], 3 ) === true ); assert ( binarySearch ([ 0 , 0 , 2 , 3 , 4 ], 4 ) === true ); assert ( binarySearch ([ 0 , 0 , 2 , 3 , 4 ], 5 ) === false );","title":"Usage"},{"location":"node_modules/boundary/#license","text":"Copyright (C) 2012-2014 Yusuke Suzuki (twitter: @Constellation ) and other contributors. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"License"},{"location":"node_modules/brace-expansion/","text":"brace-expansion Brace expansion , as known from sh/bash, in JavaScript. Example var expand = require ( 'brace-expansion' ); expand ( 'file-{a,b,c}.jpg' ) // => ['file-a.jpg', 'file-b.jpg', 'file-c.jpg'] expand ( '-v{,,}' ) // => ['-v', '-v', '-v'] expand ( 'file{0..2}.jpg' ) // => ['file0.jpg', 'file1.jpg', 'file2.jpg'] expand ( 'file-{a..c}.jpg' ) // => ['file-a.jpg', 'file-b.jpg', 'file-c.jpg'] expand ( 'file{2..0}.jpg' ) // => ['file2.jpg', 'file1.jpg', 'file0.jpg'] expand ( 'file{0..4..2}.jpg' ) // => ['file0.jpg', 'file2.jpg', 'file4.jpg'] expand ( 'file-{a..e..2}.jpg' ) // => ['file-a.jpg', 'file-c.jpg', 'file-e.jpg'] expand ( 'file{00..10..5}.jpg' ) // => ['file00.jpg', 'file05.jpg', 'file10.jpg'] expand ( '{{A..C},{a..c}}' ) // => ['A', 'B', 'C', 'a', 'b', 'c'] expand ( 'ppp{,config,oe{,conf}}' ) // => ['ppp', 'pppconfig', 'pppoe', 'pppoeconf'] API var expand = require ( 'brace-expansion' ); var expanded = expand(str) Return an array of all possible and valid expansions of str . If none are found, [str] is returned. Valid expansions are: /^(.*,)+(.+)?$/ // {a,b,...} A comma separated list of options, like {a,b} or {a,{b,c}} or {,a,} . /^-?\\d+\\.\\.-?\\d+(\\.\\.-?\\d+)?$/ // {x..y[..incr]} A numeric sequence from x to y inclusive, with optional increment. If x or y start with a leading 0 , all the numbers will be padded to have equal length. Negative numbers and backwards iteration work too. /^-?\\d+\\.\\.-?\\d+(\\.\\.-?\\d+)?$/ // {x..y[..incr]} An alphabetic sequence from x to y inclusive, with optional increment. x and y must be exactly one character, and if given, incr must be a number. For compatibility reasons, the string ${ is not eligible for brace expansion. Installation With npm do: npm install brace-expansion Contributors Julian Gruber Isaac Z. Schlueter Sponsors This module is proudly supported by my Sponsors ! Do you want to support modules like this to improve their quality, stability and weigh in on new features? Then please consider donating to my Patreon . Not sure how much of my modules you're using? Try feross/thanks ! License (MIT) Copyright (c) 2013 Julian Gruber <julian@juliangruber.com> Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"brace-expansion"},{"location":"node_modules/brace-expansion/#brace-expansion","text":"Brace expansion , as known from sh/bash, in JavaScript.","title":"brace-expansion"},{"location":"node_modules/brace-expansion/#example","text":"var expand = require ( 'brace-expansion' ); expand ( 'file-{a,b,c}.jpg' ) // => ['file-a.jpg', 'file-b.jpg', 'file-c.jpg'] expand ( '-v{,,}' ) // => ['-v', '-v', '-v'] expand ( 'file{0..2}.jpg' ) // => ['file0.jpg', 'file1.jpg', 'file2.jpg'] expand ( 'file-{a..c}.jpg' ) // => ['file-a.jpg', 'file-b.jpg', 'file-c.jpg'] expand ( 'file{2..0}.jpg' ) // => ['file2.jpg', 'file1.jpg', 'file0.jpg'] expand ( 'file{0..4..2}.jpg' ) // => ['file0.jpg', 'file2.jpg', 'file4.jpg'] expand ( 'file-{a..e..2}.jpg' ) // => ['file-a.jpg', 'file-c.jpg', 'file-e.jpg'] expand ( 'file{00..10..5}.jpg' ) // => ['file00.jpg', 'file05.jpg', 'file10.jpg'] expand ( '{{A..C},{a..c}}' ) // => ['A', 'B', 'C', 'a', 'b', 'c'] expand ( 'ppp{,config,oe{,conf}}' ) // => ['ppp', 'pppconfig', 'pppoe', 'pppoeconf']","title":"Example"},{"location":"node_modules/brace-expansion/#api","text":"var expand = require ( 'brace-expansion' );","title":"API"},{"location":"node_modules/brace-expansion/#var-expanded-expandstr","text":"Return an array of all possible and valid expansions of str . If none are found, [str] is returned. Valid expansions are: /^(.*,)+(.+)?$/ // {a,b,...} A comma separated list of options, like {a,b} or {a,{b,c}} or {,a,} . /^-?\\d+\\.\\.-?\\d+(\\.\\.-?\\d+)?$/ // {x..y[..incr]} A numeric sequence from x to y inclusive, with optional increment. If x or y start with a leading 0 , all the numbers will be padded to have equal length. Negative numbers and backwards iteration work too. /^-?\\d+\\.\\.-?\\d+(\\.\\.-?\\d+)?$/ // {x..y[..incr]} An alphabetic sequence from x to y inclusive, with optional increment. x and y must be exactly one character, and if given, incr must be a number. For compatibility reasons, the string ${ is not eligible for brace expansion.","title":"var expanded = expand(str)"},{"location":"node_modules/brace-expansion/#installation","text":"With npm do: npm install brace-expansion","title":"Installation"},{"location":"node_modules/brace-expansion/#contributors","text":"Julian Gruber Isaac Z. Schlueter","title":"Contributors"},{"location":"node_modules/brace-expansion/#sponsors","text":"This module is proudly supported by my Sponsors ! Do you want to support modules like this to improve their quality, stability and weigh in on new features? Then please consider donating to my Patreon . Not sure how much of my modules you're using? Try feross/thanks !","title":"Sponsors"},{"location":"node_modules/brace-expansion/#license","text":"(MIT) Copyright (c) 2013 Julian Gruber <julian@juliangruber.com> Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"node_modules/call-bind/","text":"call-bind Robustly .call.bind() a function.","title":"call-bind"},{"location":"node_modules/call-bind/#call-bind","text":"Robustly .call.bind() a function.","title":"call-bind"},{"location":"node_modules/call-bind/CHANGELOG/","text":"Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning . v1.0.2 - 2021-01-11 Commits [Fix] properly include the receiver in the bound length dbae7bc v1.0.1 - 2021-01-08 Commits [Tests] migrate tests to Github Actions b6db284 [meta] do not publish github action workflow files ec7fe46 [Fix] preserve original function\u2019s length when possible adbceaa [Tests] gather coverage data on every job d69e23c [Dev Deps] update eslint , @ljharb/eslint-config , aud , tape 2fd3586 [Deps] update get-intrinsic f23e931 [Deps] update get-intrinsic 72d9f44 [meta] fix FUNDING.yml e723573 [eslint] ignore coverage output 15e76d2 [meta] add Automatic Rebase and Require Allow Edits workflows 8fa4dab v1.0.0 - 2020-10-30 Commits Initial commit 306cf98 Tests e10d0bb Implementation 43852ed npm init 408f860 [meta] add Automatic Rebase and Require Allow Edits workflows fb349b2 [meta] add auto-changelog c4001fc [meta] add \"funding\"; create FUNDING.yml d4d6d29 [Tests] add npm run lint dedfb98 Only apps should have lockfiles 54ac776 [meta] add safe-publish-latest 9ea8e43","title":"Changelog"},{"location":"node_modules/call-bind/CHANGELOG/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"node_modules/call-bind/CHANGELOG/#v102-2021-01-11","text":"","title":"v1.0.2 - 2021-01-11"},{"location":"node_modules/call-bind/CHANGELOG/#commits","text":"[Fix] properly include the receiver in the bound length dbae7bc","title":"Commits"},{"location":"node_modules/call-bind/CHANGELOG/#v101-2021-01-08","text":"","title":"v1.0.1 - 2021-01-08"},{"location":"node_modules/call-bind/CHANGELOG/#commits_1","text":"[Tests] migrate tests to Github Actions b6db284 [meta] do not publish github action workflow files ec7fe46 [Fix] preserve original function\u2019s length when possible adbceaa [Tests] gather coverage data on every job d69e23c [Dev Deps] update eslint , @ljharb/eslint-config , aud , tape 2fd3586 [Deps] update get-intrinsic f23e931 [Deps] update get-intrinsic 72d9f44 [meta] fix FUNDING.yml e723573 [eslint] ignore coverage output 15e76d2 [meta] add Automatic Rebase and Require Allow Edits workflows 8fa4dab","title":"Commits"},{"location":"node_modules/call-bind/CHANGELOG/#v100-2020-10-30","text":"","title":"v1.0.0 - 2020-10-30"},{"location":"node_modules/call-bind/CHANGELOG/#commits_2","text":"Initial commit 306cf98 Tests e10d0bb Implementation 43852ed npm init 408f860 [meta] add Automatic Rebase and Require Allow Edits workflows fb349b2 [meta] add auto-changelog c4001fc [meta] add \"funding\"; create FUNDING.yml d4d6d29 [Tests] add npm run lint dedfb98 Only apps should have lockfiles 54ac776 [meta] add safe-publish-latest 9ea8e43","title":"Commits"},{"location":"node_modules/ccount/readme/","text":"ccount Count characters. Install npm : npm install ccount Use var ccount = require ( 'ccount' ) ccount ( 'foo(bar(baz)' , '(' ) // => 2 ccount ( 'foo(bar(baz)' , ')' ) // => 1 API ccount(value, character) Get the total count of character in value . Parameters value ( string ) \u2014 Content, coerced to string character ( string ) \u2014 Single character to look for Returns number \u2014 Number of times character occurred in value . License MIT \u00a9 Titus Wormer","title":"ccount"},{"location":"node_modules/ccount/readme/#ccount","text":"Count characters.","title":"ccount"},{"location":"node_modules/ccount/readme/#install","text":"npm : npm install ccount","title":"Install"},{"location":"node_modules/ccount/readme/#use","text":"var ccount = require ( 'ccount' ) ccount ( 'foo(bar(baz)' , '(' ) // => 2 ccount ( 'foo(bar(baz)' , ')' ) // => 1","title":"Use"},{"location":"node_modules/ccount/readme/#api","text":"","title":"API"},{"location":"node_modules/ccount/readme/#ccountvalue-character","text":"Get the total count of character in value .","title":"ccount(value, character)"},{"location":"node_modules/ccount/readme/#parameters","text":"value ( string ) \u2014 Content, coerced to string character ( string ) \u2014 Single character to look for","title":"Parameters"},{"location":"node_modules/ccount/readme/#returns","text":"number \u2014 Number of times character occurred in value .","title":"Returns"},{"location":"node_modules/ccount/readme/#license","text":"MIT \u00a9 Titus Wormer","title":"License"},{"location":"node_modules/chalk/readme/","text":"Terminal string styling done right colors.js used to be the most popular string styling module, but it has serious deficiencies like extending String.prototype which causes all kinds of problems . Although there are other ones, they either do too much or not enough. Chalk is a clean and focused alternative. Why Highly performant Doesn't extend String.prototype Expressive API Ability to nest styles Clean and focused Auto-detects color support Actively maintained Used by ~4500 modules as of July 15, 2015 Install $ npm install --save chalk Usage Chalk comes with an easy to use composable API where you just chain and nest the styles you want. var chalk = require ( 'chalk' ); // style a string chalk . blue ( 'Hello world!' ); // combine styled and normal strings chalk . blue ( 'Hello' ) + 'World' + chalk . red ( '!' ); // compose multiple styles using the chainable API chalk . blue . bgRed . bold ( 'Hello world!' ); // pass in multiple arguments chalk . blue ( 'Hello' , 'World!' , 'Foo' , 'bar' , 'biz' , 'baz' ); // nest styles chalk . red ( 'Hello' , chalk . underline . bgBlue ( 'world' ) + '!' ); // nest styles of the same type even (color, underline, background) chalk . green ( 'I am a green line ' + chalk . blue . underline . bold ( 'with a blue substring' ) + ' that becomes green again!' ); Easily define your own themes. var chalk = require ( 'chalk' ); var error = chalk . bold . red ; console . log ( error ( 'Error!' )); Take advantage of console.log string substitution . var name = 'Sindre' ; console . log ( chalk . green ( 'Hello %s' ), name ); //=> Hello Sindre API chalk. <style>[.<style>...](string, [string...]) Example: chalk.red.bold.underline('Hello', 'world'); Chain styles and call the last one as a method with a string argument. Order doesn't matter, and later styles take precedent in case of a conflict. This simply means that Chalk.red.yellow.green is equivalent to Chalk.green . Multiple arguments will be separated by space. chalk.enabled Color support is automatically detected, but you can override it by setting the enabled property. You should however only do this in your own code as it applies globally to all chalk consumers. If you need to change this in a reusable module create a new instance: var ctx = new chalk . constructor ({ enabled : false }); chalk.supportsColor Detect whether the terminal supports color . Used internally and handled for you, but exposed for convenience. Can be overridden by the user with the flags --color and --no-color . For situations where using --color is not possible, add an environment variable FORCE_COLOR with any value to force color. Trumps --no-color . chalk.styles Exposes the styles as ANSI escape codes . Generally not useful, but you might need just the .open or .close escape code if you're mixing externally styled strings with your own. var chalk = require ( 'chalk' ); console . log ( chalk . styles . red ); //=> {open: '\\u001b[31m', close: '\\u001b[39m'} console . log ( chalk . styles . red . open + 'Hello' + chalk . styles . red . close ); chalk.hasColor(string) Check whether a string has color . chalk.stripColor(string) Strip color from a string. Can be useful in combination with .supportsColor to strip color on externally styled text when it's not supported. Example: var chalk = require ( 'chalk' ); var styledString = getText (); if ( ! chalk . supportsColor ) { styledString = chalk . stripColor ( styledString ); } Styles Modifiers reset bold dim italic (not widely supported) underline inverse hidden strikethrough (not widely supported) Colors black red green yellow blue (on Windows the bright version is used as normal blue is illegible) magenta cyan white gray Background colors bgBlack bgRed bgGreen bgYellow bgBlue bgMagenta bgCyan bgWhite 256-colors Chalk does not support anything other than the base eight colors, which guarantees it will work on all terminals and systems. Some terminals, specifically xterm compliant ones, will support the full range of 8-bit colors. For this the lower level ansi-256-colors package can be used. Windows If you're on Windows, do yourself a favor and use cmder instead of cmd.exe . Related chalk-cli - CLI for this module ansi-styles - ANSI escape codes for styling strings in the terminal supports-color - Detect whether a terminal supports color strip-ansi - Strip ANSI escape codes has-ansi - Check if a string has ANSI escape codes ansi-regex - Regular expression for matching ANSI escape codes wrap-ansi - Wordwrap a string with ANSI escape codes License MIT \u00a9 Sindre Sorhus","title":"Readme"},{"location":"node_modules/chalk/readme/#why","text":"Highly performant Doesn't extend String.prototype Expressive API Ability to nest styles Clean and focused Auto-detects color support Actively maintained Used by ~4500 modules as of July 15, 2015","title":"Why"},{"location":"node_modules/chalk/readme/#install","text":"$ npm install --save chalk","title":"Install"},{"location":"node_modules/chalk/readme/#usage","text":"Chalk comes with an easy to use composable API where you just chain and nest the styles you want. var chalk = require ( 'chalk' ); // style a string chalk . blue ( 'Hello world!' ); // combine styled and normal strings chalk . blue ( 'Hello' ) + 'World' + chalk . red ( '!' ); // compose multiple styles using the chainable API chalk . blue . bgRed . bold ( 'Hello world!' ); // pass in multiple arguments chalk . blue ( 'Hello' , 'World!' , 'Foo' , 'bar' , 'biz' , 'baz' ); // nest styles chalk . red ( 'Hello' , chalk . underline . bgBlue ( 'world' ) + '!' ); // nest styles of the same type even (color, underline, background) chalk . green ( 'I am a green line ' + chalk . blue . underline . bold ( 'with a blue substring' ) + ' that becomes green again!' ); Easily define your own themes. var chalk = require ( 'chalk' ); var error = chalk . bold . red ; console . log ( error ( 'Error!' )); Take advantage of console.log string substitution . var name = 'Sindre' ; console . log ( chalk . green ( 'Hello %s' ), name ); //=> Hello Sindre","title":"Usage"},{"location":"node_modules/chalk/readme/#api","text":"","title":"API"},{"location":"node_modules/chalk/readme/#chalkstylestylestring-string","text":"Example: chalk.red.bold.underline('Hello', 'world'); Chain styles and call the last one as a method with a string argument. Order doesn't matter, and later styles take precedent in case of a conflict. This simply means that Chalk.red.yellow.green is equivalent to Chalk.green . Multiple arguments will be separated by space.","title":"chalk.&lt;style&gt;[.&lt;style&gt;...](string, [string...])"},{"location":"node_modules/chalk/readme/#chalkenabled","text":"Color support is automatically detected, but you can override it by setting the enabled property. You should however only do this in your own code as it applies globally to all chalk consumers. If you need to change this in a reusable module create a new instance: var ctx = new chalk . constructor ({ enabled : false });","title":"chalk.enabled"},{"location":"node_modules/chalk/readme/#chalksupportscolor","text":"Detect whether the terminal supports color . Used internally and handled for you, but exposed for convenience. Can be overridden by the user with the flags --color and --no-color . For situations where using --color is not possible, add an environment variable FORCE_COLOR with any value to force color. Trumps --no-color .","title":"chalk.supportsColor"},{"location":"node_modules/chalk/readme/#chalkstyles","text":"Exposes the styles as ANSI escape codes . Generally not useful, but you might need just the .open or .close escape code if you're mixing externally styled strings with your own. var chalk = require ( 'chalk' ); console . log ( chalk . styles . red ); //=> {open: '\\u001b[31m', close: '\\u001b[39m'} console . log ( chalk . styles . red . open + 'Hello' + chalk . styles . red . close );","title":"chalk.styles"},{"location":"node_modules/chalk/readme/#chalkhascolorstring","text":"Check whether a string has color .","title":"chalk.hasColor(string)"},{"location":"node_modules/chalk/readme/#chalkstripcolorstring","text":"Strip color from a string. Can be useful in combination with .supportsColor to strip color on externally styled text when it's not supported. Example: var chalk = require ( 'chalk' ); var styledString = getText (); if ( ! chalk . supportsColor ) { styledString = chalk . stripColor ( styledString ); }","title":"chalk.stripColor(string)"},{"location":"node_modules/chalk/readme/#styles","text":"","title":"Styles"},{"location":"node_modules/chalk/readme/#modifiers","text":"reset bold dim italic (not widely supported) underline inverse hidden strikethrough (not widely supported)","title":"Modifiers"},{"location":"node_modules/chalk/readme/#colors","text":"black red green yellow blue (on Windows the bright version is used as normal blue is illegible) magenta cyan white gray","title":"Colors"},{"location":"node_modules/chalk/readme/#background-colors","text":"bgBlack bgRed bgGreen bgYellow bgBlue bgMagenta bgCyan bgWhite","title":"Background colors"},{"location":"node_modules/chalk/readme/#256-colors","text":"Chalk does not support anything other than the base eight colors, which guarantees it will work on all terminals and systems. Some terminals, specifically xterm compliant ones, will support the full range of 8-bit colors. For this the lower level ansi-256-colors package can be used.","title":"256-colors"},{"location":"node_modules/chalk/readme/#windows","text":"If you're on Windows, do yourself a favor and use cmder instead of cmd.exe .","title":"Windows"},{"location":"node_modules/chalk/readme/#related","text":"chalk-cli - CLI for this module ansi-styles - ANSI escape codes for styling strings in the terminal supports-color - Detect whether a terminal supports color strip-ansi - Strip ANSI escape codes has-ansi - Check if a string has ANSI escape codes ansi-regex - Regular expression for matching ANSI escape codes wrap-ansi - Wordwrap a string with ANSI escape codes","title":"Related"},{"location":"node_modules/chalk/readme/#license","text":"MIT \u00a9 Sindre Sorhus","title":"License"},{"location":"node_modules/chalk/node_modules/strip-ansi/readme/","text":"strip-ansi Strip ANSI escape codes Install $ npm install --save strip-ansi Usage var stripAnsi = require ( 'strip-ansi' ); stripAnsi ( '\\u001b[4mcake\\u001b[0m' ); //=> 'cake' Related strip-ansi-cli - CLI for this module has-ansi - Check if a string has ANSI escape codes ansi-regex - Regular expression for matching ANSI escape codes chalk - Terminal string styling done right License MIT \u00a9 Sindre Sorhus","title":"strip-ansi [![Build Status](https://travis-ci.org/chalk/strip-ansi.svg?branch=master)](https://travis-ci.org/chalk/strip-ansi)"},{"location":"node_modules/chalk/node_modules/strip-ansi/readme/#strip-ansi","text":"Strip ANSI escape codes","title":"strip-ansi"},{"location":"node_modules/chalk/node_modules/strip-ansi/readme/#install","text":"$ npm install --save strip-ansi","title":"Install"},{"location":"node_modules/chalk/node_modules/strip-ansi/readme/#usage","text":"var stripAnsi = require ( 'strip-ansi' ); stripAnsi ( '\\u001b[4mcake\\u001b[0m' ); //=> 'cake'","title":"Usage"},{"location":"node_modules/chalk/node_modules/strip-ansi/readme/#related","text":"strip-ansi-cli - CLI for this module has-ansi - Check if a string has ANSI escape codes ansi-regex - Regular expression for matching ANSI escape codes chalk - Terminal string styling done right","title":"Related"},{"location":"node_modules/chalk/node_modules/strip-ansi/readme/#license","text":"MIT \u00a9 Sindre Sorhus","title":"License"},{"location":"node_modules/character-entities/readme/","text":"character-entities HTML character entity information. Install npm : npm install character-entities Use var characterEntities = require ( 'character-entities' ) console . log ( characterEntities . AElig ) // => '\u00c6' console . log ( characterEntities . aelig ) // => '\u00e6' console . log ( characterEntities . amp ) // => '&' API characterEntities Mapping between (case-sensitive) character entity names to replacements. Support See html.spec.whatwg.org . Related character-entities-html4 \u2014 HTML 4 character entity info character-entities-legacy \u2014 Legacy character entity info parse-entities \u2014 Parse HTML character references stringify-entities \u2014 Stringify HTML character references License MIT \u00a9 Titus Wormer","title":"character-entities"},{"location":"node_modules/character-entities/readme/#character-entities","text":"HTML character entity information.","title":"character-entities"},{"location":"node_modules/character-entities/readme/#install","text":"npm : npm install character-entities","title":"Install"},{"location":"node_modules/character-entities/readme/#use","text":"var characterEntities = require ( 'character-entities' ) console . log ( characterEntities . AElig ) // => '\u00c6' console . log ( characterEntities . aelig ) // => '\u00e6' console . log ( characterEntities . amp ) // => '&'","title":"Use"},{"location":"node_modules/character-entities/readme/#api","text":"","title":"API"},{"location":"node_modules/character-entities/readme/#characterentities","text":"Mapping between (case-sensitive) character entity names to replacements.","title":"characterEntities"},{"location":"node_modules/character-entities/readme/#support","text":"See html.spec.whatwg.org .","title":"Support"},{"location":"node_modules/character-entities/readme/#related","text":"character-entities-html4 \u2014 HTML 4 character entity info character-entities-legacy \u2014 Legacy character entity info parse-entities \u2014 Parse HTML character references stringify-entities \u2014 Stringify HTML character references","title":"Related"},{"location":"node_modules/character-entities/readme/#license","text":"MIT \u00a9 Titus Wormer","title":"License"},{"location":"node_modules/character-entities-legacy/readme/","text":"character-entities-legacy HTML legacy character entity information: for legacy reasons some character entities are not required to have a trailing semicolon: &copy is perfectly okay for \u00a9 . Install npm : npm install character-entities-legacy Use var characterEntitiesLegacy = require ( 'character-entities-legacy' ) console . log ( characterEntitiesLegacy . copy ) // => '\u00a9' console . log ( characterEntitiesLegacy . frac34 ) // => '\u00be' console . log ( characterEntitiesLegacy . sup1 ) // => '\u00b9' API characterEntitiesLegacy Mapping between (case-sensitive) legacy character entity names to replacements. Support See whatwg/html . Related character-entities \u2014 HTML character entity info character-entities-html4 \u2014 HTML 4 character entity info parse-entities \u2014 Parse HTML character references stringify-entities \u2014 Serialize HTML character references License MIT \u00a9 Titus Wormer","title":"character-entities-legacy"},{"location":"node_modules/character-entities-legacy/readme/#character-entities-legacy","text":"HTML legacy character entity information: for legacy reasons some character entities are not required to have a trailing semicolon: &copy is perfectly okay for \u00a9 .","title":"character-entities-legacy"},{"location":"node_modules/character-entities-legacy/readme/#install","text":"npm : npm install character-entities-legacy","title":"Install"},{"location":"node_modules/character-entities-legacy/readme/#use","text":"var characterEntitiesLegacy = require ( 'character-entities-legacy' ) console . log ( characterEntitiesLegacy . copy ) // => '\u00a9' console . log ( characterEntitiesLegacy . frac34 ) // => '\u00be' console . log ( characterEntitiesLegacy . sup1 ) // => '\u00b9'","title":"Use"},{"location":"node_modules/character-entities-legacy/readme/#api","text":"","title":"API"},{"location":"node_modules/character-entities-legacy/readme/#characterentitieslegacy","text":"Mapping between (case-sensitive) legacy character entity names to replacements.","title":"characterEntitiesLegacy"},{"location":"node_modules/character-entities-legacy/readme/#support","text":"See whatwg/html .","title":"Support"},{"location":"node_modules/character-entities-legacy/readme/#related","text":"character-entities \u2014 HTML character entity info character-entities-html4 \u2014 HTML 4 character entity info parse-entities \u2014 Parse HTML character references stringify-entities \u2014 Serialize HTML character references","title":"Related"},{"location":"node_modules/character-entities-legacy/readme/#license","text":"MIT \u00a9 Titus Wormer","title":"License"},{"location":"node_modules/character-reference-invalid/readme/","text":"character-reference-invalid HTML invalid numeric character reference information. Install npm : npm install character-reference-invalid Use var characterReferenceInvalid = require ( 'character-reference-invalid' ) console . log ( characterReferenceInvalid [ 0x80 ]) // => '\u20ac' console . log ( characterReferenceInvalid [ 0x89 ]) // => '\u2030' console . log ( characterReferenceInvalid [ 0x99 ]) // => '\u2122' API characterReferenceInvalid Mapping between invalid numeric character reference to replacements. Support See html.spec.whatwg.org . Related character-entities \u2014 HTML character entity info character-entities-html4 \u2014 HTML 4 character entity info character-entities-legacy \u2014 Legacy character entity info parse-entities \u2014 Parse HTML character references stringify-entities \u2014 Serialize HTML character references License MIT \u00a9 Titus Wormer","title":"character-reference-invalid"},{"location":"node_modules/character-reference-invalid/readme/#character-reference-invalid","text":"HTML invalid numeric character reference information.","title":"character-reference-invalid"},{"location":"node_modules/character-reference-invalid/readme/#install","text":"npm : npm install character-reference-invalid","title":"Install"},{"location":"node_modules/character-reference-invalid/readme/#use","text":"var characterReferenceInvalid = require ( 'character-reference-invalid' ) console . log ( characterReferenceInvalid [ 0x80 ]) // => '\u20ac' console . log ( characterReferenceInvalid [ 0x89 ]) // => '\u2030' console . log ( characterReferenceInvalid [ 0x99 ]) // => '\u2122'","title":"Use"},{"location":"node_modules/character-reference-invalid/readme/#api","text":"","title":"API"},{"location":"node_modules/character-reference-invalid/readme/#characterreferenceinvalid","text":"Mapping between invalid numeric character reference to replacements.","title":"characterReferenceInvalid"},{"location":"node_modules/character-reference-invalid/readme/#support","text":"See html.spec.whatwg.org .","title":"Support"},{"location":"node_modules/character-reference-invalid/readme/#related","text":"character-entities \u2014 HTML character entity info character-entities-html4 \u2014 HTML 4 character entity info character-entities-legacy \u2014 Legacy character entity info parse-entities \u2014 Parse HTML character references stringify-entities \u2014 Serialize HTML character references","title":"Related"},{"location":"node_modules/character-reference-invalid/readme/#license","text":"MIT \u00a9 Titus Wormer","title":"License"},{"location":"node_modules/charenc/LICENSE/","text":"Copyright \u00a9 2011, Paul Vorbach. All rights reserved. Copyright \u00a9 2009, Jeff Mott. All rights reserved. All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. Neither the name Crypto-JS nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"LICENSE"},{"location":"node_modules/code-point-at/readme/","text":"code-point-at ES2015 String#codePointAt() ponyfill Install $ npm install --save code-point-at Usage var codePointAt = require ( 'code-point-at' ); codePointAt ( '\ud83d\udc34' ); //=> 128052 codePointAt ( 'abc' , 2 ); //=> 99 API codePointAt(input, [position]) License MIT \u00a9 Sindre Sorhus","title":"code-point-at [![Build Status](https://travis-ci.org/sindresorhus/code-point-at.svg?branch=master)](https://travis-ci.org/sindresorhus/code-point-at)"},{"location":"node_modules/code-point-at/readme/#code-point-at","text":"ES2015 String#codePointAt() ponyfill","title":"code-point-at"},{"location":"node_modules/code-point-at/readme/#install","text":"$ npm install --save code-point-at","title":"Install"},{"location":"node_modules/code-point-at/readme/#usage","text":"var codePointAt = require ( 'code-point-at' ); codePointAt ( '\ud83d\udc34' ); //=> 128052 codePointAt ( 'abc' , 2 ); //=> 99","title":"Usage"},{"location":"node_modules/code-point-at/readme/#api","text":"","title":"API"},{"location":"node_modules/code-point-at/readme/#codepointatinput-position","text":"","title":"codePointAt(input, [position])"},{"location":"node_modules/code-point-at/readme/#license","text":"MIT \u00a9 Sindre Sorhus","title":"License"},{"location":"node_modules/color-convert/","text":"color-convert Color-convert is a color conversion library for JavaScript and node. It converts all ways between rgb , hsl , hsv , hwb , cmyk , ansi , ansi16 , hex strings, and CSS keyword s (will round to closest): var convert = require ( 'color-convert' ); convert . rgb . hsl ( 140 , 200 , 100 ); // [96, 48, 59] convert . keyword . rgb ( 'blue' ); // [0, 0, 255] var rgbChannels = convert . rgb . channels ; // 3 var cmykChannels = convert . cmyk . channels ; // 4 var ansiChannels = convert . ansi16 . channels ; // 1 Install $ npm install color-convert API Simply get the property of the from and to conversion that you're looking for. All functions have a rounded and unrounded variant. By default, return values are rounded. To get the unrounded (raw) results, simply tack on .raw to the function. All 'from' functions have a hidden property called .channels that indicates the number of channels the function expects (not including alpha). var convert = require ( 'color-convert' ); // Hex to LAB convert . hex . lab ( 'DEADBF' ); // [ 76, 21, -2 ] convert . hex . lab . raw ( 'DEADBF' ); // [ 75.56213190997677, 20.653827952644754, -2.290532499330533 ] // RGB to CMYK convert . rgb . cmyk ( 167 , 255 , 4 ); // [ 35, 0, 98, 0 ] convert . rgb . cmyk . raw ( 167 , 255 , 4 ); // [ 34.509803921568626, 0, 98.43137254901961, 0 ] Arrays All functions that accept multiple arguments also support passing an array. Note that this does not apply to functions that convert from a color that only requires one value (e.g. keyword , ansi256 , hex , etc.) var convert = require ( 'color-convert' ); convert . rgb . hex ( 123 , 45 , 67 ); // '7B2D43' convert . rgb . hex ([ 123 , 45 , 67 ]); // '7B2D43' Routing Conversions that don't have an explicitly defined conversion (in conversions.js ), but can be converted by means of sub-conversions (e.g. XYZ -> RGB -> CMYK), are automatically routed together. This allows just about any color model supported by color-convert to be converted to any other model, so long as a sub-conversion path exists. This is also true for conversions requiring more than one step in between (e.g. LCH -> LAB -> XYZ -> RGB -> Hex). Keep in mind that extensive conversions may result in a loss of precision, and exist only to be complete. For a list of \"direct\" (single-step) conversions, see conversions.js . Contribute If there is a new model you would like to support, or want to add a direct conversion between two existing models, please send us a pull request. License Copyright \u00a9 2011-2016, Heather Arthur and Josh Junon. Licensed under the MIT License .","title":"color-convert"},{"location":"node_modules/color-convert/#color-convert","text":"Color-convert is a color conversion library for JavaScript and node. It converts all ways between rgb , hsl , hsv , hwb , cmyk , ansi , ansi16 , hex strings, and CSS keyword s (will round to closest): var convert = require ( 'color-convert' ); convert . rgb . hsl ( 140 , 200 , 100 ); // [96, 48, 59] convert . keyword . rgb ( 'blue' ); // [0, 0, 255] var rgbChannels = convert . rgb . channels ; // 3 var cmykChannels = convert . cmyk . channels ; // 4 var ansiChannels = convert . ansi16 . channels ; // 1","title":"color-convert"},{"location":"node_modules/color-convert/#install","text":"$ npm install color-convert","title":"Install"},{"location":"node_modules/color-convert/#api","text":"Simply get the property of the from and to conversion that you're looking for. All functions have a rounded and unrounded variant. By default, return values are rounded. To get the unrounded (raw) results, simply tack on .raw to the function. All 'from' functions have a hidden property called .channels that indicates the number of channels the function expects (not including alpha). var convert = require ( 'color-convert' ); // Hex to LAB convert . hex . lab ( 'DEADBF' ); // [ 76, 21, -2 ] convert . hex . lab . raw ( 'DEADBF' ); // [ 75.56213190997677, 20.653827952644754, -2.290532499330533 ] // RGB to CMYK convert . rgb . cmyk ( 167 , 255 , 4 ); // [ 35, 0, 98, 0 ] convert . rgb . cmyk . raw ( 167 , 255 , 4 ); // [ 34.509803921568626, 0, 98.43137254901961, 0 ]","title":"API"},{"location":"node_modules/color-convert/#arrays","text":"All functions that accept multiple arguments also support passing an array. Note that this does not apply to functions that convert from a color that only requires one value (e.g. keyword , ansi256 , hex , etc.) var convert = require ( 'color-convert' ); convert . rgb . hex ( 123 , 45 , 67 ); // '7B2D43' convert . rgb . hex ([ 123 , 45 , 67 ]); // '7B2D43'","title":"Arrays"},{"location":"node_modules/color-convert/#routing","text":"Conversions that don't have an explicitly defined conversion (in conversions.js ), but can be converted by means of sub-conversions (e.g. XYZ -> RGB -> CMYK), are automatically routed together. This allows just about any color model supported by color-convert to be converted to any other model, so long as a sub-conversion path exists. This is also true for conversions requiring more than one step in between (e.g. LCH -> LAB -> XYZ -> RGB -> Hex). Keep in mind that extensive conversions may result in a loss of precision, and exist only to be complete. For a list of \"direct\" (single-step) conversions, see conversions.js .","title":"Routing"},{"location":"node_modules/color-convert/#contribute","text":"If there is a new model you would like to support, or want to add a direct conversion between two existing models, please send us a pull request.","title":"Contribute"},{"location":"node_modules/color-convert/#license","text":"Copyright \u00a9 2011-2016, Heather Arthur and Josh Junon. Licensed under the MIT License .","title":"License"},{"location":"node_modules/color-convert/CHANGELOG/","text":"1.0.0 - 2016-01-07 Removed: unused speed test Added: Automatic routing between previously unsupported conversions ( #27 ) Removed: xxx2xxx() and xxx2xxxRaw() functions ( #27 ) Removed: convert() class ( #27 ) Changed: all functions to lookup dictionary ( #27 ) Changed: ansi to ansi256 ( #27 ) Fixed: argument grouping for functions requiring only one argument ( #27 ) 0.6.0 - 2015-07-23 Added: methods to handle ANSI 16/256 colors: rgb2ansi16 rgb2ansi hsl2ansi16 hsl2ansi hsv2ansi16 hsv2ansi hwb2ansi16 hwb2ansi cmyk2ansi16 cmyk2ansi keyword2ansi16 keyword2ansi ansi162rgb ansi162hsl ansi162hsv ansi162hwb ansi162cmyk ansi162keyword ansi2rgb ansi2hsl ansi2hsv ansi2hwb ansi2cmyk ansi2keyword ( #18 ) 0.5.3 - 2015-06-02 Fixed: hsl2hsv does not return NaN anymore when using [0,0,0] ( #15 ) Check out commit logs for older releases","title":"1.0.0 - 2016-01-07"},{"location":"node_modules/color-convert/CHANGELOG/#100-2016-01-07","text":"Removed: unused speed test Added: Automatic routing between previously unsupported conversions ( #27 ) Removed: xxx2xxx() and xxx2xxxRaw() functions ( #27 ) Removed: convert() class ( #27 ) Changed: all functions to lookup dictionary ( #27 ) Changed: ansi to ansi256 ( #27 ) Fixed: argument grouping for functions requiring only one argument ( #27 )","title":"1.0.0 - 2016-01-07"},{"location":"node_modules/color-convert/CHANGELOG/#060-2015-07-23","text":"Added: methods to handle ANSI 16/256 colors: rgb2ansi16 rgb2ansi hsl2ansi16 hsl2ansi hsv2ansi16 hsv2ansi hwb2ansi16 hwb2ansi cmyk2ansi16 cmyk2ansi keyword2ansi16 keyword2ansi ansi162rgb ansi162hsl ansi162hsv ansi162hwb ansi162cmyk ansi162keyword ansi2rgb ansi2hsl ansi2hsv ansi2hwb ansi2cmyk ansi2keyword ( #18 )","title":"0.6.0 - 2015-07-23"},{"location":"node_modules/color-convert/CHANGELOG/#053-2015-06-02","text":"Fixed: hsl2hsv does not return NaN anymore when using [0,0,0] ( #15 ) Check out commit logs for older releases","title":"0.5.3 - 2015-06-02"},{"location":"node_modules/color-name/","text":"A JSON with color names and its values. Based on http://dev.w3.org/csswg/css-color/#named-colors. var colors = require ( 'color-name' ); colors . red //[255,0,0]","title":"Index"},{"location":"node_modules/concat-map/","text":"concat-map Concatenative mapdashery. example var concatMap = require ( 'concat-map' ); var xs = [ 1 , 2 , 3 , 4 , 5 , 6 ]; var ys = concatMap ( xs , function ( x ) { return x % 2 ? [ x - 0.1 , x , x + 0.1 ] : []; }); console . dir ( ys ); [ 0.9, 1, 1.1, 2.9, 3, 3.1, 4.9, 5, 5.1 ] methods var concatMap = require ( 'concat-map' ) concatMap(xs, fn) Return an array of concatenated elements by calling fn(x, i) for each element x and each index i in the array xs . When fn(x, i) returns an array, its result will be concatenated with the result array. If fn(x, i) returns anything else, that value will be pushed onto the end of the result array. install With npm do: npm install concat-map license MIT notes This module was written while sitting high above the ground in a tree.","title":"Index"},{"location":"node_modules/concat-map/#concat-map","text":"Concatenative mapdashery.","title":"concat-map"},{"location":"node_modules/concat-map/#example","text":"var concatMap = require ( 'concat-map' ); var xs = [ 1 , 2 , 3 , 4 , 5 , 6 ]; var ys = concatMap ( xs , function ( x ) { return x % 2 ? [ x - 0.1 , x , x + 0.1 ] : []; }); console . dir ( ys ); [ 0.9, 1, 1.1, 2.9, 3, 3.1, 4.9, 5, 5.1 ]","title":"example"},{"location":"node_modules/concat-map/#methods","text":"var concatMap = require ( 'concat-map' )","title":"methods"},{"location":"node_modules/concat-map/#concatmapxs-fn","text":"Return an array of concatenated elements by calling fn(x, i) for each element x and each index i in the array xs . When fn(x, i) returns an array, its result will be concatenated with the result array. If fn(x, i) returns anything else, that value will be pushed onto the end of the result array.","title":"concatMap(xs, fn)"},{"location":"node_modules/concat-map/#install","text":"With npm do: npm install concat-map","title":"install"},{"location":"node_modules/concat-map/#license","text":"MIT","title":"license"},{"location":"node_modules/concat-map/#notes","text":"This module was written while sitting high above the ground in a tree.","title":"notes"},{"location":"node_modules/core-js-pure/","text":"Modular standard library for JavaScript. Includes polyfills for ECMAScript up to 2021 : promises , symbols , collections , iterators, typed arrays , many other features, ECMAScript proposals , some cross-platform WHATWG / W3C features and proposals like URL . You can load only required features or use it without global namespace pollution. As advertising: the author is looking for a good job -) core-js@3, babel and a look into the future Raising funds core-js isn't backed by a company, so the future of this project depends on you. Become a sponsor or a backer if you are interested in core-js : Open Collective , Patreon , PayPal , Bitcoin ( bc1qlea7544qtsmj2rayg0lthvza9fau63ux0fstcz ) . Example of usage : import 'core-js/actual' ; // <- at the top of your entry point Array . from ( new Set ([ 1 , 2 , 3 , 2 , 1 ])); // => [1, 2, 3] [ 1 , 2 , 3 , 4 , 5 ]. groupBy ( it => it % 2 ); // => { 1: [1, 3, 5], 0: [2, 4] } Promise . resolve ( 42 ). then ( x => console . log ( x )); // => 42 structuredClone ( new Set ([ 1 , 2 , 3 ])); // => new Set([1, 2, 3]) queueMicrotask (() => console . log ( 'called as microtask' )); You can load only required features : import 'core-js/actual/array/from' ; // <- at the top of your entry point import 'core-js/actual/array/group-by' ; // <- at the top of your entry point import 'core-js/actual/set' ; // <- at the top of your entry point import 'core-js/actual/promise' ; // <- at the top of your entry point import 'core-js/actual/structured-clone' ; // <- at the top of your entry point import 'core-js/actual/queue-microtask' ; // <- at the top of your entry point Array . from ( new Set ([ 1 , 2 , 3 , 2 , 1 ])); // => [1, 2, 3] [ 1 , 2 , 3 , 4 , 5 ]. groupBy ( it => it % 2 ); // => { 1: [1, 3, 5], 0: [2, 4] } Promise . resolve ( 42 ). then ( x => console . log ( x )); // => 42 structuredClone ( new Set ([ 1 , 2 , 3 ])); // => new Set([1, 2, 3]) queueMicrotask (() => console . log ( 'called as microtask' )); Or use it without global namespace pollution : import from from 'core-js-pure/actual/array/from' ; import groupBy from 'core-js-pure/actual/array/group-by' ; import Set from 'core-js-pure/actual/set' ; import Promise from 'core-js-pure/actual/promise' ; import structuredClone from 'core-js-pure/actual/structured-clone' ; import queueMicrotask from 'core-js-pure/actual/queue-microtask' ; from ( new Set ([ 1 , 2 , 3 , 2 , 1 ])); // => [1, 2, 3] groupBy ([ 1 , 2 , 3 , 4 , 5 ], it => it % 2 ); // => { 1: [1, 3, 5], 0: [2, 4] } Promise . resolve ( 42 ). then ( x => console . log ( x )); // => 42 structuredClone ( new Set ([ 1 , 2 , 3 ])); // => new Set([1, 2, 3]) queueMicrotask (() => console . log ( 'called as microtask' )); It's a version without global namespace pollution (the third example), for more info see core-js documentation .","title":"Index"},{"location":"node_modules/core-js-pure/#as-advertising-the-author-is-looking-for-a-good-job-","text":"","title":"As advertising: the author is looking for a good job -)"},{"location":"node_modules/core-js-pure/#core-js3-babel-and-a-look-into-the-future","text":"","title":"core-js@3, babel and a look into the future"},{"location":"node_modules/core-js-pure/#raising-funds","text":"core-js isn't backed by a company, so the future of this project depends on you. Become a sponsor or a backer if you are interested in core-js : Open Collective , Patreon , PayPal , Bitcoin ( bc1qlea7544qtsmj2rayg0lthvza9fau63ux0fstcz ) . Example of usage : import 'core-js/actual' ; // <- at the top of your entry point Array . from ( new Set ([ 1 , 2 , 3 , 2 , 1 ])); // => [1, 2, 3] [ 1 , 2 , 3 , 4 , 5 ]. groupBy ( it => it % 2 ); // => { 1: [1, 3, 5], 0: [2, 4] } Promise . resolve ( 42 ). then ( x => console . log ( x )); // => 42 structuredClone ( new Set ([ 1 , 2 , 3 ])); // => new Set([1, 2, 3]) queueMicrotask (() => console . log ( 'called as microtask' )); You can load only required features : import 'core-js/actual/array/from' ; // <- at the top of your entry point import 'core-js/actual/array/group-by' ; // <- at the top of your entry point import 'core-js/actual/set' ; // <- at the top of your entry point import 'core-js/actual/promise' ; // <- at the top of your entry point import 'core-js/actual/structured-clone' ; // <- at the top of your entry point import 'core-js/actual/queue-microtask' ; // <- at the top of your entry point Array . from ( new Set ([ 1 , 2 , 3 , 2 , 1 ])); // => [1, 2, 3] [ 1 , 2 , 3 , 4 , 5 ]. groupBy ( it => it % 2 ); // => { 1: [1, 3, 5], 0: [2, 4] } Promise . resolve ( 42 ). then ( x => console . log ( x )); // => 42 structuredClone ( new Set ([ 1 , 2 , 3 ])); // => new Set([1, 2, 3]) queueMicrotask (() => console . log ( 'called as microtask' )); Or use it without global namespace pollution : import from from 'core-js-pure/actual/array/from' ; import groupBy from 'core-js-pure/actual/array/group-by' ; import Set from 'core-js-pure/actual/set' ; import Promise from 'core-js-pure/actual/promise' ; import structuredClone from 'core-js-pure/actual/structured-clone' ; import queueMicrotask from 'core-js-pure/actual/queue-microtask' ; from ( new Set ([ 1 , 2 , 3 , 2 , 1 ])); // => [1, 2, 3] groupBy ([ 1 , 2 , 3 , 4 , 5 ], it => it % 2 ); // => { 1: [1, 3, 5], 0: [2, 4] } Promise . resolve ( 42 ). then ( x => console . log ( x )); // => 42 structuredClone ( new Set ([ 1 , 2 , 3 ])); // => new Set([1, 2, 3]) queueMicrotask (() => console . log ( 'called as microtask' )); It's a version without global namespace pollution (the third example), for more info see core-js documentation .","title":"Raising funds"},{"location":"node_modules/core-js-pure/actual/","text":"This folder contains entry points for all core-js features with dependencies. It's the recommended way for usage only required features.","title":"Index"},{"location":"node_modules/core-js-pure/es/","text":"This folder contains entry points for stable ECMAScript features with dependencies.","title":"Index"},{"location":"node_modules/core-js-pure/features/","text":"This folder contains entry points for all core-js features with dependencies. It's the recommended way for usage only required features.","title":"Index"},{"location":"node_modules/core-js-pure/internals/","text":"This folder contains internal parts of core-js like helpers.","title":"Index"},{"location":"node_modules/core-js-pure/modules/","text":"This folder contains implementations of polyfills. It's not recommended to include in your projects directly if you don't completely understand what are you doing.","title":"Index"},{"location":"node_modules/core-js-pure/stable/","text":"This folder contains entry points for all stable core-js features with dependencies. It's the recommended way for usage only required features.","title":"Index"},{"location":"node_modules/core-js-pure/stage/","text":"This folder contains entry points for ECMAScript proposals with dependencies.","title":"Index"},{"location":"node_modules/core-js-pure/web/","text":"This folder contains entry points for features from WHATWG / W3C with dependencies.","title":"Index"},{"location":"node_modules/crypt/","text":"crypt provides utilities for encryption and hashing","title":"Index"},{"location":"node_modules/crypt/LICENSE/","text":"Copyright \u00a9 2011, Paul Vorbach. All rights reserved. Copyright \u00a9 2009, Jeff Mott. All rights reserved. All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. Neither the name Crypto-JS nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"LICENSE"},{"location":"node_modules/debug/","text":"debug A tiny JavaScript debugging utility modelled after Node.js core's debugging technique. Works in Node.js and web browsers. Installation $ npm install debug Usage debug exposes a function; simply pass this function the name of your module, and it will return a decorated version of console.error for you to pass debug statements to. This will allow you to toggle the debug output for different parts of your module as well as the module as a whole. Example app.js : var debug = require ( 'debug' )( 'http' ) , http = require ( 'http' ) , name = 'My App' ; // fake app debug ( 'booting %o' , name ); http . createServer ( function ( req , res ){ debug ( req . method + ' ' + req . url ); res . end ( 'hello\\n' ); }). listen ( 3000 , function (){ debug ( 'listening' ); }); // fake worker of some kind require ( './worker' ); Example worker.js : var a = require ( 'debug' )( 'worker:a' ) , b = require ( 'debug' )( 'worker:b' ); function work () { a ( 'doing lots of uninteresting work' ); setTimeout ( work , Math . random () * 1000 ); } work (); function workb () { b ( 'doing some work' ); setTimeout ( workb , Math . random () * 2000 ); } workb (); The DEBUG environment variable is then used to enable these based on space or comma-delimited names. Here are some examples: Windows command prompt notes CMD On Windows the environment variable is set using the set command. set DEBUG=*,-not_this Example: set DEBUG=* & node app.js PowerShell (VS Code default) PowerShell uses different syntax to set environment variables. $env:DEBUG = \"*,-not_this\" Example: $env:DEBUG='app';node app.js Then, run the program to be debugged as usual. npm script example: \"windowsDebug\" : \"@powershell -Command $env:DEBUG='*';node app.js\" , Namespace Colors Every debug instance has a color generated for it based on its namespace name. This helps when visually parsing the debug output to identify which debug instance a debug line belongs to. Node.js In Node.js, colors are enabled when stderr is a TTY. You also should install the supports-color module alongside debug, otherwise debug will only use a small handful of basic colors. Web Browser Colors are also enabled on \"Web Inspectors\" that understand the %c formatting option. These are WebKit web inspectors, Firefox ( since version 31 ) and the Firebug plugin for Firefox (any version). Millisecond diff When actively developing an application it can be useful to see when the time spent between one debug() call and the next. Suppose for example you invoke debug() before requesting a resource, and after as well, the \"+NNNms\" will show you how much time was spent between calls. When stdout is not a TTY, Date#toISOString() is used, making it more useful for logging the debug information as shown below: Conventions If you're using this in one or more of your libraries, you should use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you should prefix them with your library name and use \":\" to separate features. For example \"bodyParser\" from Connect would then be \"connect:bodyParser\". If you append a \"*\" to the end of your name, it will always be enabled regardless of the setting of the DEBUG environment variable. You can then use it for normal output as well as debug output. Wildcards The * character may be used as a wildcard. Suppose for example your library has debuggers named \"connect:bodyParser\", \"connect:compress\", \"connect:session\", instead of listing all three with DEBUG=connect:bodyParser,connect:compress,connect:session , you may simply do DEBUG=connect:* , or to run everything using this module simply use DEBUG=* . You can also exclude specific debuggers by prefixing them with a \"-\" character. For example, DEBUG=*,-connect:* would include all debuggers except those starting with \"connect:\". Environment Variables When running through Node.js, you can set a few environment variables that will change the behavior of the debug logging: Name Purpose DEBUG Enables/disables specific debugging namespaces. DEBUG_HIDE_DATE Hide date from debug output (non-TTY). DEBUG_COLORS Whether or not to use colors in the debug output. DEBUG_DEPTH Object inspection depth. DEBUG_SHOW_HIDDEN Shows hidden properties on inspected objects. Note: The environment variables beginning with DEBUG_ end up being converted into an Options object that gets used with %o / %O formatters. See the Node.js documentation for util.inspect() for the complete list. Formatters Debug uses printf-style formatting. Below are the officially supported formatters: Formatter Representation %O Pretty-print an Object on multiple lines. %o Pretty-print an Object all on a single line. %s String. %d Number (both integer and float). %j JSON. Replaced with the string '[Circular]' if the argument contains circular references. %% Single percent sign ('%'). This does not consume an argument. Custom formatters You can add custom formatters by extending the debug.formatters object. For example, if you wanted to add support for rendering a Buffer as hex with %h , you could do something like: const createDebug = require ( 'debug' ) createDebug . formatters . h = ( v ) => { return v . toString ( 'hex' ) } // \u2026elsewhere const debug = createDebug ( 'foo' ) debug ( 'this is hex: %h' , new Buffer ( 'hello world' )) // foo this is hex: 68656c6c6f20776f726c6421 +0ms Browser Support You can build a browser-ready script using browserify , or just use the browserify-as-a-service build , if you don't want to build it yourself. Debug's enable state is currently persisted by localStorage . Consider the situation shown below where you have worker:a and worker:b , and wish to debug both. You can enable this using localStorage.debug : localStorage . debug = 'worker:*' And then refresh the page. a = debug ( 'worker:a' ); b = debug ( 'worker:b' ); setInterval ( function (){ a ( 'doing some work' ); }, 1000 ); setInterval ( function (){ b ( 'doing some work' ); }, 1200 ); Output streams By default debug will log to stderr, however this can be configured per-namespace by overriding the log method: Example stdout.js : var debug = require ( 'debug' ); var error = debug ( 'app:error' ); // by default stderr is used error ( 'goes to stderr!' ); var log = debug ( 'app:log' ); // set this namespace to log via console.log log . log = console . log . bind ( console ); // don't forget to bind to console! log ( 'goes to stdout' ); error ( 'still goes to stderr!' ); // set all output to go via console.info // overrides all per-namespace log settings debug . log = console . info . bind ( console ); error ( 'now goes to stdout via console.info' ); log ( 'still goes to stdout, but via console.info now' ); Extend You can simply extend debugger const log = require ( 'debug' )( 'auth' ); //creates new debug instance with extended namespace const logSign = log . extend ( 'sign' ); const logLogin = log . extend ( 'login' ); log ( 'hello' ); // auth hello logSign ( 'hello' ); //auth:sign hello logLogin ( 'hello' ); //auth:login hello Set dynamically You can also enable debug dynamically by calling the enable() method : let debug = require ( 'debug' ); console . log ( 1 , debug . enabled ( 'test' )); debug . enable ( 'test' ); console . log ( 2 , debug . enabled ( 'test' )); debug . disable (); console . log ( 3 , debug . enabled ( 'test' )); print : 1 false 2 true 3 false Usage : enable(namespaces) namespaces can include modes separated by a colon and wildcards. Note that calling enable() completely overrides previously set DEBUG variable : $ DEBUG=foo node -e 'var dbg = require(\"debug\"); dbg.enable(\"bar\"); console.log(dbg.enabled(\"foo\"))' => false disable() Will disable all namespaces. The functions returns the namespaces currently enabled (and skipped). This can be useful if you want to disable debugging temporarily without knowing what was enabled to begin with. For example: let debug = require ( 'debug' ); debug . enable ( 'foo:*,-foo:bar' ); let namespaces = debug . disable (); debug . enable ( namespaces ); Note: There is no guarantee that the string will be identical to the initial enable string, but semantically they will be identical. Checking whether a debug target is enabled After you've created a debug instance, you can determine whether or not it is enabled by checking the enabled property: const debug = require ( 'debug' )( 'http' ); if ( debug . enabled ) { // do stuff... } You can also manually toggle this property to force the debug instance to be enabled or disabled. Usage in child processes Due to the way debug detects if the output is a TTY or not, colors are not shown in child processes when stderr is piped. A solution is to pass the DEBUG_COLORS=1 environment variable to the child process. For example: worker = fork ( WORKER_WRAP_PATH , [ workerPath ], { stdio : [ /* stdin: */ 0 , /* stdout: */ 'pipe' , /* stderr: */ 'pipe' , 'ipc' , ], env : Object . assign ({}, process . env , { DEBUG_COLORS : 1 // without this settings, colors won't be shown }), }); worker . stderr . pipe ( process . stderr , { end : false }); Authors TJ Holowaychuk Nathan Rajlich Andrew Rhyne Josh Junon Backers Support us with a monthly donation and help us continue our activities. [ Become a backer ] Sponsors Become a sponsor and get your logo on our README on Github with a link to your site. [ Become a sponsor ] License (The MIT License) Copyright (c) 2014-2017 TJ Holowaychuk <tj@vision-media.ca> Copyright (c) 2018-2021 Josh Junon Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"debug"},{"location":"node_modules/debug/#debug","text":"A tiny JavaScript debugging utility modelled after Node.js core's debugging technique. Works in Node.js and web browsers.","title":"debug"},{"location":"node_modules/debug/#installation","text":"$ npm install debug","title":"Installation"},{"location":"node_modules/debug/#usage","text":"debug exposes a function; simply pass this function the name of your module, and it will return a decorated version of console.error for you to pass debug statements to. This will allow you to toggle the debug output for different parts of your module as well as the module as a whole. Example app.js : var debug = require ( 'debug' )( 'http' ) , http = require ( 'http' ) , name = 'My App' ; // fake app debug ( 'booting %o' , name ); http . createServer ( function ( req , res ){ debug ( req . method + ' ' + req . url ); res . end ( 'hello\\n' ); }). listen ( 3000 , function (){ debug ( 'listening' ); }); // fake worker of some kind require ( './worker' ); Example worker.js : var a = require ( 'debug' )( 'worker:a' ) , b = require ( 'debug' )( 'worker:b' ); function work () { a ( 'doing lots of uninteresting work' ); setTimeout ( work , Math . random () * 1000 ); } work (); function workb () { b ( 'doing some work' ); setTimeout ( workb , Math . random () * 2000 ); } workb (); The DEBUG environment variable is then used to enable these based on space or comma-delimited names. Here are some examples:","title":"Usage"},{"location":"node_modules/debug/#windows-command-prompt-notes","text":"","title":"Windows command prompt notes"},{"location":"node_modules/debug/#cmd","text":"On Windows the environment variable is set using the set command. set DEBUG=*,-not_this Example: set DEBUG=* & node app.js","title":"CMD"},{"location":"node_modules/debug/#powershell-vs-code-default","text":"PowerShell uses different syntax to set environment variables. $env:DEBUG = \"*,-not_this\" Example: $env:DEBUG='app';node app.js Then, run the program to be debugged as usual. npm script example: \"windowsDebug\" : \"@powershell -Command $env:DEBUG='*';node app.js\" ,","title":"PowerShell (VS Code default)"},{"location":"node_modules/debug/#namespace-colors","text":"Every debug instance has a color generated for it based on its namespace name. This helps when visually parsing the debug output to identify which debug instance a debug line belongs to.","title":"Namespace Colors"},{"location":"node_modules/debug/#nodejs","text":"In Node.js, colors are enabled when stderr is a TTY. You also should install the supports-color module alongside debug, otherwise debug will only use a small handful of basic colors.","title":"Node.js"},{"location":"node_modules/debug/#web-browser","text":"Colors are also enabled on \"Web Inspectors\" that understand the %c formatting option. These are WebKit web inspectors, Firefox ( since version 31 ) and the Firebug plugin for Firefox (any version).","title":"Web Browser"},{"location":"node_modules/debug/#millisecond-diff","text":"When actively developing an application it can be useful to see when the time spent between one debug() call and the next. Suppose for example you invoke debug() before requesting a resource, and after as well, the \"+NNNms\" will show you how much time was spent between calls. When stdout is not a TTY, Date#toISOString() is used, making it more useful for logging the debug information as shown below:","title":"Millisecond diff"},{"location":"node_modules/debug/#conventions","text":"If you're using this in one or more of your libraries, you should use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you should prefix them with your library name and use \":\" to separate features. For example \"bodyParser\" from Connect would then be \"connect:bodyParser\". If you append a \"*\" to the end of your name, it will always be enabled regardless of the setting of the DEBUG environment variable. You can then use it for normal output as well as debug output.","title":"Conventions"},{"location":"node_modules/debug/#wildcards","text":"The * character may be used as a wildcard. Suppose for example your library has debuggers named \"connect:bodyParser\", \"connect:compress\", \"connect:session\", instead of listing all three with DEBUG=connect:bodyParser,connect:compress,connect:session , you may simply do DEBUG=connect:* , or to run everything using this module simply use DEBUG=* . You can also exclude specific debuggers by prefixing them with a \"-\" character. For example, DEBUG=*,-connect:* would include all debuggers except those starting with \"connect:\".","title":"Wildcards"},{"location":"node_modules/debug/#environment-variables","text":"When running through Node.js, you can set a few environment variables that will change the behavior of the debug logging: Name Purpose DEBUG Enables/disables specific debugging namespaces. DEBUG_HIDE_DATE Hide date from debug output (non-TTY). DEBUG_COLORS Whether or not to use colors in the debug output. DEBUG_DEPTH Object inspection depth. DEBUG_SHOW_HIDDEN Shows hidden properties on inspected objects. Note: The environment variables beginning with DEBUG_ end up being converted into an Options object that gets used with %o / %O formatters. See the Node.js documentation for util.inspect() for the complete list.","title":"Environment Variables"},{"location":"node_modules/debug/#formatters","text":"Debug uses printf-style formatting. Below are the officially supported formatters: Formatter Representation %O Pretty-print an Object on multiple lines. %o Pretty-print an Object all on a single line. %s String. %d Number (both integer and float). %j JSON. Replaced with the string '[Circular]' if the argument contains circular references. %% Single percent sign ('%'). This does not consume an argument.","title":"Formatters"},{"location":"node_modules/debug/#custom-formatters","text":"You can add custom formatters by extending the debug.formatters object. For example, if you wanted to add support for rendering a Buffer as hex with %h , you could do something like: const createDebug = require ( 'debug' ) createDebug . formatters . h = ( v ) => { return v . toString ( 'hex' ) } // \u2026elsewhere const debug = createDebug ( 'foo' ) debug ( 'this is hex: %h' , new Buffer ( 'hello world' )) // foo this is hex: 68656c6c6f20776f726c6421 +0ms","title":"Custom formatters"},{"location":"node_modules/debug/#browser-support","text":"You can build a browser-ready script using browserify , or just use the browserify-as-a-service build , if you don't want to build it yourself. Debug's enable state is currently persisted by localStorage . Consider the situation shown below where you have worker:a and worker:b , and wish to debug both. You can enable this using localStorage.debug : localStorage . debug = 'worker:*' And then refresh the page. a = debug ( 'worker:a' ); b = debug ( 'worker:b' ); setInterval ( function (){ a ( 'doing some work' ); }, 1000 ); setInterval ( function (){ b ( 'doing some work' ); }, 1200 );","title":"Browser Support"},{"location":"node_modules/debug/#output-streams","text":"By default debug will log to stderr, however this can be configured per-namespace by overriding the log method: Example stdout.js : var debug = require ( 'debug' ); var error = debug ( 'app:error' ); // by default stderr is used error ( 'goes to stderr!' ); var log = debug ( 'app:log' ); // set this namespace to log via console.log log . log = console . log . bind ( console ); // don't forget to bind to console! log ( 'goes to stdout' ); error ( 'still goes to stderr!' ); // set all output to go via console.info // overrides all per-namespace log settings debug . log = console . info . bind ( console ); error ( 'now goes to stdout via console.info' ); log ( 'still goes to stdout, but via console.info now' );","title":"Output streams"},{"location":"node_modules/debug/#extend","text":"You can simply extend debugger const log = require ( 'debug' )( 'auth' ); //creates new debug instance with extended namespace const logSign = log . extend ( 'sign' ); const logLogin = log . extend ( 'login' ); log ( 'hello' ); // auth hello logSign ( 'hello' ); //auth:sign hello logLogin ( 'hello' ); //auth:login hello","title":"Extend"},{"location":"node_modules/debug/#set-dynamically","text":"You can also enable debug dynamically by calling the enable() method : let debug = require ( 'debug' ); console . log ( 1 , debug . enabled ( 'test' )); debug . enable ( 'test' ); console . log ( 2 , debug . enabled ( 'test' )); debug . disable (); console . log ( 3 , debug . enabled ( 'test' )); print : 1 false 2 true 3 false Usage : enable(namespaces) namespaces can include modes separated by a colon and wildcards. Note that calling enable() completely overrides previously set DEBUG variable : $ DEBUG=foo node -e 'var dbg = require(\"debug\"); dbg.enable(\"bar\"); console.log(dbg.enabled(\"foo\"))' => false disable() Will disable all namespaces. The functions returns the namespaces currently enabled (and skipped). This can be useful if you want to disable debugging temporarily without knowing what was enabled to begin with. For example: let debug = require ( 'debug' ); debug . enable ( 'foo:*,-foo:bar' ); let namespaces = debug . disable (); debug . enable ( namespaces ); Note: There is no guarantee that the string will be identical to the initial enable string, but semantically they will be identical.","title":"Set dynamically"},{"location":"node_modules/debug/#checking-whether-a-debug-target-is-enabled","text":"After you've created a debug instance, you can determine whether or not it is enabled by checking the enabled property: const debug = require ( 'debug' )( 'http' ); if ( debug . enabled ) { // do stuff... } You can also manually toggle this property to force the debug instance to be enabled or disabled.","title":"Checking whether a debug target is enabled"},{"location":"node_modules/debug/#usage-in-child-processes","text":"Due to the way debug detects if the output is a TTY or not, colors are not shown in child processes when stderr is piped. A solution is to pass the DEBUG_COLORS=1 environment variable to the child process. For example: worker = fork ( WORKER_WRAP_PATH , [ workerPath ], { stdio : [ /* stdin: */ 0 , /* stdout: */ 'pipe' , /* stderr: */ 'pipe' , 'ipc' , ], env : Object . assign ({}, process . env , { DEBUG_COLORS : 1 // without this settings, colors won't be shown }), }); worker . stderr . pipe ( process . stderr , { end : false });","title":"Usage in child processes"},{"location":"node_modules/debug/#authors","text":"TJ Holowaychuk Nathan Rajlich Andrew Rhyne Josh Junon","title":"Authors"},{"location":"node_modules/debug/#backers","text":"Support us with a monthly donation and help us continue our activities. [ Become a backer ]","title":"Backers"},{"location":"node_modules/debug/#sponsors","text":"Become a sponsor and get your logo on our README on Github with a link to your site. [ Become a sponsor ]","title":"Sponsors"},{"location":"node_modules/debug/#license","text":"(The MIT License) Copyright (c) 2014-2017 TJ Holowaychuk <tj@vision-media.ca> Copyright (c) 2018-2021 Josh Junon Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"node_modules/deep-equal/CHANGELOG/","text":"Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning . Generated by auto-changelog . v1.1.1 - 2019-11-12 Commits [Tests] use shared travis-ci configs 678cb2a [meta] add auto-changelog 569bcce [Dev Deps] update eslint , @ljharb/eslint-config ; add safe-publish-latest 9dedd40 [Tests] add npx aud in posttest 0b76639 [meta] add funding field 3e519e3 v1.1.0 - 2019-08-28 Commits [Tests] up to node v12.7 , v11.15 , v10.16 , v9.11 , v8.16 , v7.10 , v6.17 , 4.9 ; use nvm install-latest-npm ba11166 [Tests] make a tape helper, to easily compare loose/strict, and (a,b)/(b,a) arg order 0c25e94 [Tests] add npm run lint 8590816 test: Fails simple array tests on IE < 9 #10 bc37498 [Tests] clean up/flesh out test cases 3fffed9 [Fix] (array,arguments) now behaves the same as (arguments,array) a9528ff [Refactor] move Date and RegExp tests into objEquiv 5b3bf31 [Fix] properly compare RegExp objects b8c179c [Refactor] Use object-keys and is-arguments instead of a homegrown shim. 3b503fb [Fix] use object-is to support NaN and -0 properly 28fde4a [meta] fix license text so GitHub can detect it 7000403 [Tests] add array/object tests 558eecf [Fix] ensure Buffer + non-Buffer comparison order does not matter de4e75c [Refactor] objEquiv : bail early if typeofs are different 410e2d6 [Tests] add tests for Object.create(null) ed266e8 [Refactor] there is no need to do further compareation when two types are not equal 6a5efc1 Only apps should have lockfiles f60442f [Tests] clean up redundant test cbbef21 [Fix] use is-date-object to properly detect cross-realm Dates 0c5b21a [meta] Add copyright statements 56a7746 [Dev Deps] update tape 3e9c1b9 v1.0.1 - 2015-08-29 Fixed Null should == undefined #23 Commits Update travis.yml to modern node 5055802 v1.0.0 - 2015-02-07 v0.2.2 - 2015-02-07 Commits latest tape 1d18617 add type check to support browsers 3acb0d7 v0.2.1 - 2014-01-29 Commits license file b3431d4 v0.2.0 - 2014-01-29 Commits buffer check without Buffer 5271f39 failing test for buffer comparison cc8990b v0.1.2 - 2013-12-21 Commits test the arguments shim and properly factor out the arguments handling cf88b9c more coverage for the keys shim 7a41f0e test coverage for the non-object case abd3358 fix the argument comparisons to properly call equal() 0114a10 more code coverage for date comparisons 41ac40e use the latest version of tape f8341cb use https: for the badges 514b332 100% coverage e55aac7 v0.1.1 - 2013-12-20 Commits Fixed arguments support for IE8- 174d41a v0.1.0 - 2013-10-14 Commits upgrade the markdown 30e1f8f opts.strict instead of a boolean arg 58cbdb2 using testling-ci 064af17 Add optional strict parameter f3413b1 strict equality test 281189b document opts.strict 69fae5a using tape 4384db8 using travis e508692 deepEquals comparing nulls seems to break in ie6-8 b2cfeb9 performance note in the readme da9bfc9 more firefoxes 3d60ec5 v0.0.0 - 2012-02-11 Commits implementation with an example 2dd56f9 readme 4a44f99 and a test 357ccd3 actually just MIT 3d348c8","title":"Changelog"},{"location":"node_modules/deep-equal/CHANGELOG/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning . Generated by auto-changelog .","title":"Changelog"},{"location":"node_modules/deep-equal/CHANGELOG/#v111-2019-11-12","text":"","title":"v1.1.1 - 2019-11-12"},{"location":"node_modules/deep-equal/CHANGELOG/#commits","text":"[Tests] use shared travis-ci configs 678cb2a [meta] add auto-changelog 569bcce [Dev Deps] update eslint , @ljharb/eslint-config ; add safe-publish-latest 9dedd40 [Tests] add npx aud in posttest 0b76639 [meta] add funding field 3e519e3","title":"Commits"},{"location":"node_modules/deep-equal/CHANGELOG/#v110-2019-08-28","text":"","title":"v1.1.0 - 2019-08-28"},{"location":"node_modules/deep-equal/CHANGELOG/#commits_1","text":"[Tests] up to node v12.7 , v11.15 , v10.16 , v9.11 , v8.16 , v7.10 , v6.17 , 4.9 ; use nvm install-latest-npm ba11166 [Tests] make a tape helper, to easily compare loose/strict, and (a,b)/(b,a) arg order 0c25e94 [Tests] add npm run lint 8590816 test: Fails simple array tests on IE < 9 #10 bc37498 [Tests] clean up/flesh out test cases 3fffed9 [Fix] (array,arguments) now behaves the same as (arguments,array) a9528ff [Refactor] move Date and RegExp tests into objEquiv 5b3bf31 [Fix] properly compare RegExp objects b8c179c [Refactor] Use object-keys and is-arguments instead of a homegrown shim. 3b503fb [Fix] use object-is to support NaN and -0 properly 28fde4a [meta] fix license text so GitHub can detect it 7000403 [Tests] add array/object tests 558eecf [Fix] ensure Buffer + non-Buffer comparison order does not matter de4e75c [Refactor] objEquiv : bail early if typeofs are different 410e2d6 [Tests] add tests for Object.create(null) ed266e8 [Refactor] there is no need to do further compareation when two types are not equal 6a5efc1 Only apps should have lockfiles f60442f [Tests] clean up redundant test cbbef21 [Fix] use is-date-object to properly detect cross-realm Dates 0c5b21a [meta] Add copyright statements 56a7746 [Dev Deps] update tape 3e9c1b9","title":"Commits"},{"location":"node_modules/deep-equal/CHANGELOG/#v101-2015-08-29","text":"","title":"v1.0.1 - 2015-08-29"},{"location":"node_modules/deep-equal/CHANGELOG/#fixed","text":"Null should == undefined #23","title":"Fixed"},{"location":"node_modules/deep-equal/CHANGELOG/#commits_2","text":"Update travis.yml to modern node 5055802","title":"Commits"},{"location":"node_modules/deep-equal/CHANGELOG/#v100-2015-02-07","text":"","title":"v1.0.0 - 2015-02-07"},{"location":"node_modules/deep-equal/CHANGELOG/#v022-2015-02-07","text":"","title":"v0.2.2 - 2015-02-07"},{"location":"node_modules/deep-equal/CHANGELOG/#commits_3","text":"latest tape 1d18617 add type check to support browsers 3acb0d7","title":"Commits"},{"location":"node_modules/deep-equal/CHANGELOG/#v021-2014-01-29","text":"","title":"v0.2.1 - 2014-01-29"},{"location":"node_modules/deep-equal/CHANGELOG/#commits_4","text":"license file b3431d4","title":"Commits"},{"location":"node_modules/deep-equal/CHANGELOG/#v020-2014-01-29","text":"","title":"v0.2.0 - 2014-01-29"},{"location":"node_modules/deep-equal/CHANGELOG/#commits_5","text":"buffer check without Buffer 5271f39 failing test for buffer comparison cc8990b","title":"Commits"},{"location":"node_modules/deep-equal/CHANGELOG/#v012-2013-12-21","text":"","title":"v0.1.2 - 2013-12-21"},{"location":"node_modules/deep-equal/CHANGELOG/#commits_6","text":"test the arguments shim and properly factor out the arguments handling cf88b9c more coverage for the keys shim 7a41f0e test coverage for the non-object case abd3358 fix the argument comparisons to properly call equal() 0114a10 more code coverage for date comparisons 41ac40e use the latest version of tape f8341cb use https: for the badges 514b332 100% coverage e55aac7","title":"Commits"},{"location":"node_modules/deep-equal/CHANGELOG/#v011-2013-12-20","text":"","title":"v0.1.1 - 2013-12-20"},{"location":"node_modules/deep-equal/CHANGELOG/#commits_7","text":"Fixed arguments support for IE8- 174d41a","title":"Commits"},{"location":"node_modules/deep-equal/CHANGELOG/#v010-2013-10-14","text":"","title":"v0.1.0 - 2013-10-14"},{"location":"node_modules/deep-equal/CHANGELOG/#commits_8","text":"upgrade the markdown 30e1f8f opts.strict instead of a boolean arg 58cbdb2 using testling-ci 064af17 Add optional strict parameter f3413b1 strict equality test 281189b document opts.strict 69fae5a using tape 4384db8 using travis e508692 deepEquals comparing nulls seems to break in ie6-8 b2cfeb9 performance note in the readme da9bfc9 more firefoxes 3d60ec5","title":"Commits"},{"location":"node_modules/deep-equal/CHANGELOG/#v000-2012-02-11","text":"","title":"v0.0.0 - 2012-02-11"},{"location":"node_modules/deep-equal/CHANGELOG/#commits_9","text":"implementation with an example 2dd56f9 readme 4a44f99 and a test 357ccd3 actually just MIT 3d348c8","title":"Commits"},{"location":"node_modules/deep-equal/readme/","text":"deep-equal Node's assert.deepEqual() algorithm as a standalone module. This module is around 5 times faster than wrapping assert.deepEqual() in a try/catch . example var equal = require ( 'deep-equal' ); console . dir ([ equal ( { a : [ 2 , 3 ], b : [ 4 ] }, { a : [ 2 , 3 ], b : [ 4 ] } ), equal ( { x : 5 , y : [ 6 ] }, { x : 5 , y : 6 } ) ]); methods var deepEqual = require ( 'deep-equal' ) deepEqual(a, b, opts) Compare objects a and b , returning whether they are equal according to a recursive equality algorithm. If opts.strict is true , use strict equality ( === ) to compare leaf nodes. The default is to use coercive equality ( == ) because that's how assert.deepEqual() works by default. install With npm do: npm install deep-equal test With npm do: npm test","title":"deep-equal"},{"location":"node_modules/deep-equal/readme/#deep-equal","text":"Node's assert.deepEqual() algorithm as a standalone module. This module is around 5 times faster than wrapping assert.deepEqual() in a try/catch .","title":"deep-equal"},{"location":"node_modules/deep-equal/readme/#example","text":"var equal = require ( 'deep-equal' ); console . dir ([ equal ( { a : [ 2 , 3 ], b : [ 4 ] }, { a : [ 2 , 3 ], b : [ 4 ] } ), equal ( { x : 5 , y : [ 6 ] }, { x : 5 , y : 6 } ) ]);","title":"example"},{"location":"node_modules/deep-equal/readme/#methods","text":"var deepEqual = require ( 'deep-equal' )","title":"methods"},{"location":"node_modules/deep-equal/readme/#deepequala-b-opts","text":"Compare objects a and b , returning whether they are equal according to a recursive equality algorithm. If opts.strict is true , use strict equality ( === ) to compare leaf nodes. The default is to use coercive equality ( == ) because that's how assert.deepEqual() works by default.","title":"deepEqual(a, b, opts)"},{"location":"node_modules/deep-equal/readme/#install","text":"With npm do: npm install deep-equal","title":"install"},{"location":"node_modules/deep-equal/readme/#test","text":"With npm do: npm test","title":"test"},{"location":"node_modules/deep-is/","text":"deep-is Node's assert.deepEqual() algorithm as a standalone module. Exactly like deep-equal except for the fact that deepEqual(NaN, NaN) === true . This module is around 5 times faster than wrapping assert.deepEqual() in a try/catch . example var equal = require ( 'deep-is' ); console . dir ([ equal ( { a : [ 2 , 3 ], b : [ 4 ] }, { a : [ 2 , 3 ], b : [ 4 ] } ), equal ( { x : 5 , y : [ 6 ] }, { x : 5 , y : 6 } ) ]); methods var deepIs = require('deep-is') deepIs(a, b) Compare objects a and b , returning whether they are equal according to a recursive equality algorithm. install With npm do: npm install deep-is test With npm do: npm test license Copyright (c) 2012, 2013 Thorsten Lorenz thlorenz@gmx.de Copyright (c) 2012 James Halliday mail@substack.net Derived largely from node's assert module, which has the copyright statement: Copyright (c) 2009 Thomas Robinson <280north.com> Released under the MIT license, see LICENSE for details.","title":"Index"},{"location":"node_modules/deep-is/#deep-is","text":"Node's assert.deepEqual() algorithm as a standalone module. Exactly like deep-equal except for the fact that deepEqual(NaN, NaN) === true . This module is around 5 times faster than wrapping assert.deepEqual() in a try/catch .","title":"deep-is"},{"location":"node_modules/deep-is/#example","text":"var equal = require ( 'deep-is' ); console . dir ([ equal ( { a : [ 2 , 3 ], b : [ 4 ] }, { a : [ 2 , 3 ], b : [ 4 ] } ), equal ( { x : 5 , y : [ 6 ] }, { x : 5 , y : 6 } ) ]);","title":"example"},{"location":"node_modules/deep-is/#methods","text":"var deepIs = require('deep-is')","title":"methods"},{"location":"node_modules/deep-is/#deepisa-b","text":"Compare objects a and b , returning whether they are equal according to a recursive equality algorithm.","title":"deepIs(a, b)"},{"location":"node_modules/deep-is/#install","text":"With npm do: npm install deep-is","title":"install"},{"location":"node_modules/deep-is/#test","text":"With npm do: npm test","title":"test"},{"location":"node_modules/deep-is/#license","text":"Copyright (c) 2012, 2013 Thorsten Lorenz thlorenz@gmx.de Copyright (c) 2012 James Halliday mail@substack.net Derived largely from node's assert module, which has the copyright statement: Copyright (c) 2009 Thomas Robinson <280north.com> Released under the MIT license, see LICENSE for details.","title":"license"},{"location":"node_modules/define-properties/","text":"define-properties Define multiple non-enumerable properties at once. Uses Object.defineProperty when available; falls back to standard assignment in older engines. Existing properties are not overridden. Accepts a map of property names to a predicate that, when true, force-overrides. Example var define = require ( 'define-properties' ); var assert = require ( 'assert' ); var obj = define ({ a : 1 , b : 2 }, { a : 10 , b : 20 , c : 30 }); assert ( obj . a === 1 ); assert ( obj . b === 2 ); assert ( obj . c === 30 ); if ( define . supportsDescriptors ) { assert . deepEqual ( Object . keys ( obj ), [ 'a' , 'b' ]); assert . deepEqual ( Object . getOwnPropertyDescriptor ( obj , 'c' ), { configurable : true , enumerable : false , value : 30 , writable : false }); } Then, with predicates: var define = require ( 'define-properties' ); var assert = require ( 'assert' ); var obj = define ({ a : 1 , b : 2 , c : 3 }, { a : 10 , b : 20 , c : 30 }, { a : function () { return false ; }, b : function () { return true ; } }); assert ( obj . a === 1 ); assert ( obj . b === 20 ); assert ( obj . c === 3 ); if ( define . supportsDescriptors ) { assert . deepEqual ( Object . keys ( obj ), [ 'a' , 'c' ]); assert . deepEqual ( Object . getOwnPropertyDescriptor ( obj , 'b' ), { configurable : true , enumerable : false , value : 20 , writable : false }); } Tests Simply clone the repo, npm install , and run npm test","title":"Index"},{"location":"node_modules/define-properties/#define-properties","text":"Define multiple non-enumerable properties at once. Uses Object.defineProperty when available; falls back to standard assignment in older engines. Existing properties are not overridden. Accepts a map of property names to a predicate that, when true, force-overrides.","title":"define-properties "},{"location":"node_modules/define-properties/#example","text":"var define = require ( 'define-properties' ); var assert = require ( 'assert' ); var obj = define ({ a : 1 , b : 2 }, { a : 10 , b : 20 , c : 30 }); assert ( obj . a === 1 ); assert ( obj . b === 2 ); assert ( obj . c === 30 ); if ( define . supportsDescriptors ) { assert . deepEqual ( Object . keys ( obj ), [ 'a' , 'b' ]); assert . deepEqual ( Object . getOwnPropertyDescriptor ( obj , 'c' ), { configurable : true , enumerable : false , value : 30 , writable : false }); } Then, with predicates: var define = require ( 'define-properties' ); var assert = require ( 'assert' ); var obj = define ({ a : 1 , b : 2 , c : 3 }, { a : 10 , b : 20 , c : 30 }, { a : function () { return false ; }, b : function () { return true ; } }); assert ( obj . a === 1 ); assert ( obj . b === 20 ); assert ( obj . c === 3 ); if ( define . supportsDescriptors ) { assert . deepEqual ( Object . keys ( obj ), [ 'a' , 'c' ]); assert . deepEqual ( Object . getOwnPropertyDescriptor ( obj , 'b' ), { configurable : true , enumerable : false , value : 20 , writable : false }); }","title":"Example"},{"location":"node_modules/define-properties/#tests","text":"Simply clone the repo, npm install , and run npm test","title":"Tests"},{"location":"node_modules/define-properties/CHANGELOG/","text":"1.1.3 / 2018-08-14 [Refactor] use a for loop instead of foreach to make for smaller bundle sizes [Robustness] cache Array.prototype.concat and Object.defineProperty [Deps] update object-keys [Dev Deps] update eslint , @ljharb/eslint-config , nsp , tape , jscs ; remove unused eccheck script + dep [Tests] use pretest/posttest for linting/security [Tests] fix npm upgrades on older nodes 1.1.2 / 2015-10-14 [Docs] Switch from vb.teelaun.ch to versionbadg.es for the npm version badge SVG [Deps] Update object-keys [Dev Deps] update jscs , tape , eslint , @ljharb/eslint-config , nsp [Tests] up to io.js v3.3 , node v4.2 1.1.1 / 2015-07-21 [Deps] Update object-keys [Dev Deps] Update tape , eslint [Tests] Test on io.js v2.4 1.1.0 / 2015-07-01 [New] Add support for symbol-valued properties. [Dev Deps] Update nsp , eslint [Tests] Test up to io.js v2.3 1.0.3 / 2015-05-30 Using a more reliable check for supported property descriptors. 1.0.2 / 2015-05-23 Test up to io.js v2.0 Update tape , jscs , nsp , eslint , object-keys , editorconfig-tools , covert 1.0.1 / 2015-01-06 Update object-keys to fix ES3 support 1.0.0 / 2015-01-04 v1.0.0","title":"CHANGELOG"},{"location":"node_modules/define-properties/CHANGELOG/#113-2018-08-14","text":"[Refactor] use a for loop instead of foreach to make for smaller bundle sizes [Robustness] cache Array.prototype.concat and Object.defineProperty [Deps] update object-keys [Dev Deps] update eslint , @ljharb/eslint-config , nsp , tape , jscs ; remove unused eccheck script + dep [Tests] use pretest/posttest for linting/security [Tests] fix npm upgrades on older nodes","title":"1.1.3 / 2018-08-14"},{"location":"node_modules/define-properties/CHANGELOG/#112-2015-10-14","text":"[Docs] Switch from vb.teelaun.ch to versionbadg.es for the npm version badge SVG [Deps] Update object-keys [Dev Deps] update jscs , tape , eslint , @ljharb/eslint-config , nsp [Tests] up to io.js v3.3 , node v4.2","title":"1.1.2 / 2015-10-14"},{"location":"node_modules/define-properties/CHANGELOG/#111-2015-07-21","text":"[Deps] Update object-keys [Dev Deps] Update tape , eslint [Tests] Test on io.js v2.4","title":"1.1.1 / 2015-07-21"},{"location":"node_modules/define-properties/CHANGELOG/#110-2015-07-01","text":"[New] Add support for symbol-valued properties. [Dev Deps] Update nsp , eslint [Tests] Test up to io.js v2.3","title":"1.1.0 / 2015-07-01"},{"location":"node_modules/define-properties/CHANGELOG/#103-2015-05-30","text":"Using a more reliable check for supported property descriptors.","title":"1.0.3 / 2015-05-30"},{"location":"node_modules/define-properties/CHANGELOG/#102-2015-05-23","text":"Test up to io.js v2.0 Update tape , jscs , nsp , eslint , object-keys , editorconfig-tools , covert","title":"1.0.2 / 2015-05-23"},{"location":"node_modules/define-properties/CHANGELOG/#101-2015-01-06","text":"Update object-keys to fix ES3 support","title":"1.0.1 / 2015-01-06"},{"location":"node_modules/define-properties/CHANGELOG/#100-2015-01-04","text":"v1.0.0","title":"1.0.0 / 2015-01-04"},{"location":"node_modules/diff/","text":"jsdiff A javascript text differencing implementation. Based on the algorithm proposed in \"An O(ND) Difference Algorithm and its Variations\" (Myers, 1986) . Installation npm install diff --save API JsDiff.diffChars(oldStr, newStr[, options]) - diffs two blocks of text, comparing character by character. Returns a list of change objects (See below). Options * ignoreCase : true to ignore casing difference. Defaults to false . JsDiff.diffWords(oldStr, newStr[, options]) - diffs two blocks of text, comparing word by word, ignoring whitespace. Returns a list of change objects (See below). Options * ignoreCase : Same as in diffChars . JsDiff.diffWordsWithSpace(oldStr, newStr[, options]) - diffs two blocks of text, comparing word by word, treating whitespace as significant. Returns a list of change objects (See below). JsDiff.diffLines(oldStr, newStr[, options]) - diffs two blocks of text, comparing line by line. Options * ignoreWhitespace : true to ignore leading and trailing whitespace. This is the same as diffTrimmedLines * newlineIsToken : true to treat newline characters as separate tokens. This allows for changes to the newline structure to occur independently of the line content and to be treated as such. In general this is the more human friendly form of diffLines and diffLines is better suited for patches and other computer friendly output. Returns a list of change objects (See below). JsDiff.diffTrimmedLines(oldStr, newStr[, options]) - diffs two blocks of text, comparing line by line, ignoring leading and trailing whitespace. Returns a list of change objects (See below). JsDiff.diffSentences(oldStr, newStr[, options]) - diffs two blocks of text, comparing sentence by sentence. Returns a list of change objects (See below). JsDiff.diffCss(oldStr, newStr[, options]) - diffs two blocks of text, comparing CSS tokens. Returns a list of change objects (See below). JsDiff.diffJson(oldObj, newObj[, options]) - diffs two JSON objects, comparing the fields defined on each. The order of fields, etc does not matter in this comparison. Returns a list of change objects (See below). JsDiff.diffArrays(oldArr, newArr[, options]) - diffs two arrays, comparing each item for strict equality (===). Options * comparator : function(left, right) for custom equality checks Returns a list of change objects (See below). JsDiff.createTwoFilesPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader) - creates a unified diff patch. Parameters: * oldFileName : String to be output in the filename section of the patch for the removals * newFileName : String to be output in the filename section of the patch for the additions * oldStr : Original string value * newStr : New string value * oldHeader : Additional information to include in the old file header * newHeader : Additional information to include in the new file header * options : An object with options. Currently, only context is supported and describes how many lines of context should be included. JsDiff.createPatch(fileName, oldStr, newStr, oldHeader, newHeader) - creates a unified diff patch. Just like JsDiff.createTwoFilesPatch, but with oldFileName being equal to newFileName. JsDiff.structuredPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options) - returns an object with an array of hunk objects. This method is similar to createTwoFilesPatch, but returns a data structure suitable for further processing. Parameters are the same as createTwoFilesPatch. The data structure returned may look like this: { oldFileName : 'oldfile' , newFileName : 'newfile' , oldHeader : 'header1' , newHeader : 'header2' , hunks : [{ oldStart : 1 , oldLines : 3 , newStart : 1 , newLines : 3 , lines : [ ' line2' , ' line3' , '-line4' , '+line5' , '\\\\ No newline at end of file' ], }] } JsDiff.applyPatch(source, patch[, options]) - applies a unified diff patch. Return a string containing new version of provided data. patch may be a string diff or the output from the parsePatch or structuredPatch methods. The optional options object may have the following keys: fuzzFactor : Number of lines that are allowed to differ before rejecting a patch. Defaults to 0. compareLine(lineNumber, line, operation, patchContent) : Callback used to compare to given lines to determine if they should be considered equal when patching. Defaults to strict equality but may be overridden to provide fuzzier comparison. Should return false if the lines should be rejected. JsDiff.applyPatches(patch, options) - applies one or more patches. This method will iterate over the contents of the patch and apply to data provided through callbacks. The general flow for each patch index is: options.loadFile(index, callback) is called. The caller should then load the contents of the file and then pass that to the callback(err, data) callback. Passing an err will terminate further patch execution. options.patched(index, content, callback) is called once the patch has been applied. content will be the return value from applyPatch . When it's ready, the caller should call callback(err) callback. Passing an err will terminate further patch execution. Once all patches have been applied or an error occurs, the options.complete(err) callback is made. JsDiff.parsePatch(diffStr) - Parses a patch into structured data Return a JSON object representation of the a patch, suitable for use with the applyPatch method. This parses to the same structure returned by JsDiff.structuredPatch . convertChangesToXML(changes) - converts a list of changes to a serialized XML format All methods above which accept the optional callback method will run in sync mode when that parameter is omitted and in async mode when supplied. This allows for larger diffs without blocking the event loop. This may be passed either directly as the final parameter or as the callback field in the options object. Change Objects Many of the methods above return change objects. These objects consist of the following fields: value : Text content added : True if the value was inserted into the new string removed : True if the value was removed from the old string Note that some cases may omit a particular flag field. Comparison on the flag fields should always be done in a truthy or falsy manner. Examples Basic example in Node require ( 'colors' ); var jsdiff = require ( 'diff' ); var one = 'beep boop' ; var other = 'beep boob blah' ; var diff = jsdiff . diffChars ( one , other ); diff . forEach ( function ( part ){ // green for additions, red for deletions // grey for common parts var color = part . added ? 'green' : part . removed ? 'red' : 'grey' ; process . stderr . write ( part . value [ color ]); }); console . log (); Running the above program should yield Basic example in a web page < pre id = \"display\" ></ pre > < script src = \"diff.js\" ></ script > < script > var one = 'beep boop' , other = 'beep boob blah' , color = '' , span = null ; var diff = JsDiff . diffChars ( one , other ), display = document . getElementById ( 'display' ), fragment = document . createDocumentFragment (); diff . forEach ( function ( part ){ // green for additions, red for deletions // grey for common parts color = part . added ? 'green' : part . removed ? 'red' : 'grey' ; span = document . createElement ( 'span' ); span . style . color = color ; span . appendChild ( document . createTextNode ( part . value )); fragment . appendChild ( span ); }); display . appendChild ( fragment ); </ script > Open the above .html file in a browser and you should see Full online demo Compatibility jsdiff supports all ES3 environments with some known issues on IE8 and below. Under these browsers some diff algorithms such as word diff and others may fail due to lack of support for capturing groups in the split operation. License See LICENSE .","title":"jsdiff"},{"location":"node_modules/diff/#jsdiff","text":"A javascript text differencing implementation. Based on the algorithm proposed in \"An O(ND) Difference Algorithm and its Variations\" (Myers, 1986) .","title":"jsdiff"},{"location":"node_modules/diff/#installation","text":"npm install diff --save","title":"Installation"},{"location":"node_modules/diff/#api","text":"JsDiff.diffChars(oldStr, newStr[, options]) - diffs two blocks of text, comparing character by character. Returns a list of change objects (See below). Options * ignoreCase : true to ignore casing difference. Defaults to false . JsDiff.diffWords(oldStr, newStr[, options]) - diffs two blocks of text, comparing word by word, ignoring whitespace. Returns a list of change objects (See below). Options * ignoreCase : Same as in diffChars . JsDiff.diffWordsWithSpace(oldStr, newStr[, options]) - diffs two blocks of text, comparing word by word, treating whitespace as significant. Returns a list of change objects (See below). JsDiff.diffLines(oldStr, newStr[, options]) - diffs two blocks of text, comparing line by line. Options * ignoreWhitespace : true to ignore leading and trailing whitespace. This is the same as diffTrimmedLines * newlineIsToken : true to treat newline characters as separate tokens. This allows for changes to the newline structure to occur independently of the line content and to be treated as such. In general this is the more human friendly form of diffLines and diffLines is better suited for patches and other computer friendly output. Returns a list of change objects (See below). JsDiff.diffTrimmedLines(oldStr, newStr[, options]) - diffs two blocks of text, comparing line by line, ignoring leading and trailing whitespace. Returns a list of change objects (See below). JsDiff.diffSentences(oldStr, newStr[, options]) - diffs two blocks of text, comparing sentence by sentence. Returns a list of change objects (See below). JsDiff.diffCss(oldStr, newStr[, options]) - diffs two blocks of text, comparing CSS tokens. Returns a list of change objects (See below). JsDiff.diffJson(oldObj, newObj[, options]) - diffs two JSON objects, comparing the fields defined on each. The order of fields, etc does not matter in this comparison. Returns a list of change objects (See below). JsDiff.diffArrays(oldArr, newArr[, options]) - diffs two arrays, comparing each item for strict equality (===). Options * comparator : function(left, right) for custom equality checks Returns a list of change objects (See below). JsDiff.createTwoFilesPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader) - creates a unified diff patch. Parameters: * oldFileName : String to be output in the filename section of the patch for the removals * newFileName : String to be output in the filename section of the patch for the additions * oldStr : Original string value * newStr : New string value * oldHeader : Additional information to include in the old file header * newHeader : Additional information to include in the new file header * options : An object with options. Currently, only context is supported and describes how many lines of context should be included. JsDiff.createPatch(fileName, oldStr, newStr, oldHeader, newHeader) - creates a unified diff patch. Just like JsDiff.createTwoFilesPatch, but with oldFileName being equal to newFileName. JsDiff.structuredPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options) - returns an object with an array of hunk objects. This method is similar to createTwoFilesPatch, but returns a data structure suitable for further processing. Parameters are the same as createTwoFilesPatch. The data structure returned may look like this: { oldFileName : 'oldfile' , newFileName : 'newfile' , oldHeader : 'header1' , newHeader : 'header2' , hunks : [{ oldStart : 1 , oldLines : 3 , newStart : 1 , newLines : 3 , lines : [ ' line2' , ' line3' , '-line4' , '+line5' , '\\\\ No newline at end of file' ], }] } JsDiff.applyPatch(source, patch[, options]) - applies a unified diff patch. Return a string containing new version of provided data. patch may be a string diff or the output from the parsePatch or structuredPatch methods. The optional options object may have the following keys: fuzzFactor : Number of lines that are allowed to differ before rejecting a patch. Defaults to 0. compareLine(lineNumber, line, operation, patchContent) : Callback used to compare to given lines to determine if they should be considered equal when patching. Defaults to strict equality but may be overridden to provide fuzzier comparison. Should return false if the lines should be rejected. JsDiff.applyPatches(patch, options) - applies one or more patches. This method will iterate over the contents of the patch and apply to data provided through callbacks. The general flow for each patch index is: options.loadFile(index, callback) is called. The caller should then load the contents of the file and then pass that to the callback(err, data) callback. Passing an err will terminate further patch execution. options.patched(index, content, callback) is called once the patch has been applied. content will be the return value from applyPatch . When it's ready, the caller should call callback(err) callback. Passing an err will terminate further patch execution. Once all patches have been applied or an error occurs, the options.complete(err) callback is made. JsDiff.parsePatch(diffStr) - Parses a patch into structured data Return a JSON object representation of the a patch, suitable for use with the applyPatch method. This parses to the same structure returned by JsDiff.structuredPatch . convertChangesToXML(changes) - converts a list of changes to a serialized XML format All methods above which accept the optional callback method will run in sync mode when that parameter is omitted and in async mode when supplied. This allows for larger diffs without blocking the event loop. This may be passed either directly as the final parameter or as the callback field in the options object.","title":"API"},{"location":"node_modules/diff/#change-objects","text":"Many of the methods above return change objects. These objects consist of the following fields: value : Text content added : True if the value was inserted into the new string removed : True if the value was removed from the old string Note that some cases may omit a particular flag field. Comparison on the flag fields should always be done in a truthy or falsy manner.","title":"Change Objects"},{"location":"node_modules/diff/#examples","text":"Basic example in Node require ( 'colors' ); var jsdiff = require ( 'diff' ); var one = 'beep boop' ; var other = 'beep boob blah' ; var diff = jsdiff . diffChars ( one , other ); diff . forEach ( function ( part ){ // green for additions, red for deletions // grey for common parts var color = part . added ? 'green' : part . removed ? 'red' : 'grey' ; process . stderr . write ( part . value [ color ]); }); console . log (); Running the above program should yield Basic example in a web page < pre id = \"display\" ></ pre > < script src = \"diff.js\" ></ script > < script > var one = 'beep boop' , other = 'beep boob blah' , color = '' , span = null ; var diff = JsDiff . diffChars ( one , other ), display = document . getElementById ( 'display' ), fragment = document . createDocumentFragment (); diff . forEach ( function ( part ){ // green for additions, red for deletions // grey for common parts color = part . added ? 'green' : part . removed ? 'red' : 'grey' ; span = document . createElement ( 'span' ); span . style . color = color ; span . appendChild ( document . createTextNode ( part . value )); fragment . appendChild ( span ); }); display . appendChild ( fragment ); </ script > Open the above .html file in a browser and you should see Full online demo","title":"Examples"},{"location":"node_modules/diff/#compatibility","text":"jsdiff supports all ES3 environments with some known issues on IE8 and below. Under these browsers some diff algorithms such as word diff and others may fail due to lack of support for capturing groups in the split operation.","title":"Compatibility"},{"location":"node_modules/diff/#license","text":"See LICENSE .","title":"License"},{"location":"node_modules/diff/CONTRIBUTING/","text":"How to Contribute Pull Requests We also accept pull requests ! Generally we like to see pull requests that Maintain the existing code style Are focused on a single change (i.e. avoid large refactoring or style adjustments in untouched code if not the primary goal of the pull request) Have good commit messages Have tests Don't decrease the current code coverage (see coverage/lcov-report/index.html) Building npm install npm test The npm test -- dev implements watching for tests within Node and karma start may be used for manual testing in browsers. If you notice any problems, please report them to the GitHub issue tracker at http://github.com/kpdecker/jsdiff/issues . Releasing JsDiff utilizes the release yeoman generator to perform most release tasks. A full release may be completed with the following: yo release npm publish","title":"How to Contribute"},{"location":"node_modules/diff/CONTRIBUTING/#how-to-contribute","text":"","title":"How to Contribute"},{"location":"node_modules/diff/CONTRIBUTING/#pull-requests","text":"We also accept pull requests ! Generally we like to see pull requests that Maintain the existing code style Are focused on a single change (i.e. avoid large refactoring or style adjustments in untouched code if not the primary goal of the pull request) Have good commit messages Have tests Don't decrease the current code coverage (see coverage/lcov-report/index.html)","title":"Pull Requests"},{"location":"node_modules/diff/CONTRIBUTING/#building","text":"npm install npm test The npm test -- dev implements watching for tests within Node and karma start may be used for manual testing in browsers. If you notice any problems, please report them to the GitHub issue tracker at http://github.com/kpdecker/jsdiff/issues .","title":"Building"},{"location":"node_modules/diff/CONTRIBUTING/#releasing","text":"JsDiff utilizes the release yeoman generator to perform most release tasks. A full release may be completed with the following: yo release npm publish","title":"Releasing"},{"location":"node_modules/diff/release-notes/","text":"Release Notes Development Commits v4.0.1 - January 6th, 2019 Fix main reference path - b826104 Commits v4.0.0 - January 5th, 2019 #94 - Missing \"No newline at end of file\" when comparing two texts that do not end in newlines ( @federicotdn ) #227 - Licence #199 - Import statement for jsdiff #159 - applyPatch affecting wrong line number with with new lines #8 - A new state \"replace\" Drop ie9 from karma targets - 79c31bd Upgrade deps. Convert from webpack to rollup - 2c1a29c Make ()[]\"' as word boundaries between each other - f27b899 jsdiff: Replaced phantomJS by chrome - ec3114e Add yarn.lock to .npmignore - 29466d8 Compatibility notes: - Bower and Component packages no longer supported Commits v3.5.0 - March 4th, 2018 Omit redundant slice in join method of diffArrays - 1023590 Support patches with empty lines - fb0f208 Accept a custom JSON replacer function for JSON diffing - 69c7f0a Optimize parch header parser - 2aec429 Fix typos - e89c832 Commits v3.4.0 - October 7th, 2017 #183 - Feature request: ability to specify a custom equality checker for diffArrays #173 - Bug: diffArrays gives wrong result on array of booleans #158 - diffArrays will not compare the empty string in array? comparator for custom equality checks - 30e141e count oldLines and newLines when there are conflicts - 53bf384 Fix: diffArrays can compare falsey items - 9e24284 Docs: Replace grunt with npm test - 00e2f94 Commits v3.3.1 - September 3rd, 2017 #141 - Cannot apply patch because my file delimiter is \"/r/n\" instead of \"/n\" #192 - Fix: Bad merge when adding new files (#189) correct spelling mistake - 21fa478 Commits v3.3.0 - July 5th, 2017 #114 - /patch/merge not exported Gracefully accept invalid newStart in hunks, same as patch(1) does. - d8a3635 Use regex rather than starts/ends with for parsePatch - 6cab62c Add browser flag - e64f674 refactor: simplified code a bit more - 8f8e0f2 refactor: simplified code a bit - b094a6f fix: some corrections re ignoreCase option - 3c78fd0 ignoreCase option - 3cbfbb5 Sanitize filename while parsing patches - 2fe8129 Added better installation methods - aced50b Simple export of functionality - 8690f31 Commits v3.2.0 - December 26th, 2016 #156 - Add undefinedReplacement option to diffJson ( @ewnd9 ) #154 - Add examples and images to .npmignore . ( @wtgtybhertgeghgtwtg ) #153 - feat(structuredPatch): Pass options to diffLines ( @Kiougar ) Commits v3.1.0 - November 27th, 2016 #146 - JsDiff.diffArrays to compare arrays ( @wvanderdeijl ) #144 - Split file using all possible line delimiter instead of hard-coded \"/n\" and join lines back using the original delimiters ( @soulbeing ) Commits v3.0.1 - October 9th, 2016 #139 - Make README.md look nicer in npmjs.com ( @takenspc ) #135 - parsePatch combines patches from multiple files into a single IUniDiff when there is no \"Index\" line ( @ramya-rao-a ) #124 - IE7/IE8 failure since 2.0.0 ( @boneskull ) Commits v3.0.0 - August 23rd, 2016 #130 - Add callback argument to applyPatches patched option ( @piranna ) #120 - Correctly handle file names containing spaces ( @adius ) #119 - Do single reflow ( @wifiextender ) #117 - Make more usable with long strings. ( @abnbgist ) Compatibility notes: - applyPatches patch callback now is async and requires the callback be called to continue operation Commits v2.2.3 - May 31st, 2016 #118 - Add a fix for applying 0-length destination patches ( @chaaz ) #115 - Fixed grammar in README ( @krizalys ) #113 - fix typo ( @vmazare ) Commits v2.2.2 - March 13th, 2016 #102 - diffJson with dates, returns empty curly braces ( @dr-dimitru ) #97 - Whitespaces & diffWords ( @faiwer ) #92 - Fixes typo in the readme ( @bg451 ) Commits v2.2.1 - November 12th, 2015 #89 - add in display selector to readme ( @FranDias ) #88 - Split diffs based on file headers instead of 'Index:' metadata ( @piranna ) Commits v2.2.0 - October 29th, 2015 #80 - Fix a typo: applyPath -> applyPatch ( @fluxxu ) #83 - Add basic fuzzy matching to applyPatch ( @piranna ) Commits v2.2.0 - October 29th, 2015 #80 - Fix a typo: applyPath -> applyPatch ( @fluxxu ) #83 - Add basic fuzzy matching to applyPatch ( @piranna ) Commits v2.1.3 - September 30th, 2015 #78 - fix: error throwing when apply patch to empty string ( @21paradox ) Commits v2.1.2 - September 23rd, 2015 #76 - diff headers give error ( @piranna ) Commits v2.1.1 - September 9th, 2015 #73 - Is applyPatches() exposed in the API? ( @davidparsson ) Commits v2.1.0 - August 27th, 2015 #72 - Consider using options object API for flag permutations ( @kpdecker ) #70 - diffWords treats \\n at the end as significant whitespace ( @nesQuick ) #69 - Missing count ( @wfalkwallace ) #68 - diffLines seems broken ( @wfalkwallace ) #60 - Support multiple diff hunks ( @piranna ) #54 - Feature Request: 3-way merge ( @mog422 ) #42 - Fuzz factor for applyPatch ( @stuartpb ) Move whitespace ignore out of equals method - 542063c Include source maps in babel output - 7f7ab21 Merge diff/line and diff/patch implementations - 1597705 Drop map utility method - 1ddc939 Documentation for parsePatch and applyPatches - 27c4b77 Compatibility notes: - The undocumented ignoreWhitespace flag has been removed from the Diff equality check directly. This implementation may be copied to diff utilities if dependencies existed on this functionality. Commits v2.0.2 - August 8th, 2015 #67 - cannot require from npm module in node ( @commenthol ) Convert to chai since we don\u2019t support IE8 - a96bbad Commits v2.0.1 - August 7th, 2015 Add release build at proper step - 57542fd Commits v2.0.0 - August 7th, 2015 #66 - Add karma and sauce tests ( @kpdecker ) #65 - Create component repository for bower ( @kpdecker ) #64 - Automatically call removeEmpty for all tokenizer calls ( @kpdecker ) #62 - Allow access to structured object representation of patch data ( @bittrance ) #61 - Use svg instead of png to get better image quality ( @PeterDaveHello ) #29 - word tokenizer works only for 7 bit ascii ( @plasmagunman ) Compatibility notes: - this.removeEmpty is now called automatically for all instances. If this is not desired, this may be overridden on a per instance basis. - The library has been refactored to use some ES6 features. The external APIs should remain the same, but bower projects that directly referenced the repository will now have to point to the components/jsdiff repository. Commits v1.4.0 - May 6th, 2015 #57 - createPatch -> applyPatch failed. ( @mog422 ) #56 - Two files patch ( @rgeissert ) #14 - Flip added and removed order? ( @jakesandlund ) Commits v1.3.2 - March 30th, 2015 #53 - Updated README.MD with Bower installation instructions ( @ofbriggs ) #49 - Cannot read property 'oldlines' of undefined ( @nwtn ) #44 - invalid-meta jsdiff is missing \"main\" entry in bower.json Commits v1.3.1 - March 13th, 2015 #52 - Fix for #51 Wrong result of JsDiff.diffLines ( @felicienfrancois ) Commits v1.3.0 - March 2nd, 2015 #47 - Adding Diff Trimmed Lines ( @JamesGould123 ) Commits v1.2.2 - January 26th, 2015 #45 - Fix AMD module loading ( @pedrocarrico ) #43 - added a bower file ( @nbrustein ) Commits v1.2.1 - December 26th, 2014 #41 - change condition of using node export system. ( @ironhee ) Commits v1.2.0 - November 29th, 2014 #37 - Add support for sentences. ( @vmariano ) #28 - Implemented diffJson ( @papandreou ) #27 - Slow to execute over diffs with a large number of changes ( @termi ) Allow for optional async diffing - 19385b9 Fix diffChars implementation - eaa44ed Commits v1.1.0 - November 25th, 2014 #33 - AMD and global exports ( @ovcharik ) #32 - Add support for component ( @vmariano ) #31 - Don't rely on Array.prototype.map ( @papandreou ) Commits v1.0.8 - December 22nd, 2013 #24 - Handle windows newlines on non windows machines. ( @benogle ) #23 - Prettied up the API formatting a little, and added basic node and web examples ( @airportyh ) Commits v1.0.7 - September 11th, 2013 #22 - Added variant of WordDiff that doesn't ignore whitespace differences ( @papandreou Add 0.10 to travis tests - 243a526 Commits v1.0.6 - August 30th, 2013 #19 - Explicitly define contents of npm package ( @sindresorhus Commits","title":"Release Notes"},{"location":"node_modules/diff/release-notes/#release-notes","text":"","title":"Release Notes"},{"location":"node_modules/diff/release-notes/#development","text":"Commits","title":"Development"},{"location":"node_modules/diff/release-notes/#v401-january-6th-2019","text":"Fix main reference path - b826104 Commits","title":"v4.0.1 - January 6th, 2019"},{"location":"node_modules/diff/release-notes/#v400-january-5th-2019","text":"#94 - Missing \"No newline at end of file\" when comparing two texts that do not end in newlines ( @federicotdn ) #227 - Licence #199 - Import statement for jsdiff #159 - applyPatch affecting wrong line number with with new lines #8 - A new state \"replace\" Drop ie9 from karma targets - 79c31bd Upgrade deps. Convert from webpack to rollup - 2c1a29c Make ()[]\"' as word boundaries between each other - f27b899 jsdiff: Replaced phantomJS by chrome - ec3114e Add yarn.lock to .npmignore - 29466d8 Compatibility notes: - Bower and Component packages no longer supported Commits","title":"v4.0.0 - January 5th, 2019"},{"location":"node_modules/diff/release-notes/#v350-march-4th-2018","text":"Omit redundant slice in join method of diffArrays - 1023590 Support patches with empty lines - fb0f208 Accept a custom JSON replacer function for JSON diffing - 69c7f0a Optimize parch header parser - 2aec429 Fix typos - e89c832 Commits","title":"v3.5.0 - March 4th, 2018"},{"location":"node_modules/diff/release-notes/#v340-october-7th-2017","text":"#183 - Feature request: ability to specify a custom equality checker for diffArrays #173 - Bug: diffArrays gives wrong result on array of booleans #158 - diffArrays will not compare the empty string in array? comparator for custom equality checks - 30e141e count oldLines and newLines when there are conflicts - 53bf384 Fix: diffArrays can compare falsey items - 9e24284 Docs: Replace grunt with npm test - 00e2f94 Commits","title":"v3.4.0 - October 7th, 2017"},{"location":"node_modules/diff/release-notes/#v331-september-3rd-2017","text":"#141 - Cannot apply patch because my file delimiter is \"/r/n\" instead of \"/n\" #192 - Fix: Bad merge when adding new files (#189) correct spelling mistake - 21fa478 Commits","title":"v3.3.1 - September 3rd, 2017"},{"location":"node_modules/diff/release-notes/#v330-july-5th-2017","text":"#114 - /patch/merge not exported Gracefully accept invalid newStart in hunks, same as patch(1) does. - d8a3635 Use regex rather than starts/ends with for parsePatch - 6cab62c Add browser flag - e64f674 refactor: simplified code a bit more - 8f8e0f2 refactor: simplified code a bit - b094a6f fix: some corrections re ignoreCase option - 3c78fd0 ignoreCase option - 3cbfbb5 Sanitize filename while parsing patches - 2fe8129 Added better installation methods - aced50b Simple export of functionality - 8690f31 Commits","title":"v3.3.0 - July 5th, 2017"},{"location":"node_modules/diff/release-notes/#v320-december-26th-2016","text":"#156 - Add undefinedReplacement option to diffJson ( @ewnd9 ) #154 - Add examples and images to .npmignore . ( @wtgtybhertgeghgtwtg ) #153 - feat(structuredPatch): Pass options to diffLines ( @Kiougar ) Commits","title":"v3.2.0 - December 26th, 2016"},{"location":"node_modules/diff/release-notes/#v310-november-27th-2016","text":"#146 - JsDiff.diffArrays to compare arrays ( @wvanderdeijl ) #144 - Split file using all possible line delimiter instead of hard-coded \"/n\" and join lines back using the original delimiters ( @soulbeing ) Commits","title":"v3.1.0 - November 27th, 2016"},{"location":"node_modules/diff/release-notes/#v301-october-9th-2016","text":"#139 - Make README.md look nicer in npmjs.com ( @takenspc ) #135 - parsePatch combines patches from multiple files into a single IUniDiff when there is no \"Index\" line ( @ramya-rao-a ) #124 - IE7/IE8 failure since 2.0.0 ( @boneskull ) Commits","title":"v3.0.1 - October 9th, 2016"},{"location":"node_modules/diff/release-notes/#v300-august-23rd-2016","text":"#130 - Add callback argument to applyPatches patched option ( @piranna ) #120 - Correctly handle file names containing spaces ( @adius ) #119 - Do single reflow ( @wifiextender ) #117 - Make more usable with long strings. ( @abnbgist ) Compatibility notes: - applyPatches patch callback now is async and requires the callback be called to continue operation Commits","title":"v3.0.0 - August 23rd, 2016"},{"location":"node_modules/diff/release-notes/#v223-may-31st-2016","text":"#118 - Add a fix for applying 0-length destination patches ( @chaaz ) #115 - Fixed grammar in README ( @krizalys ) #113 - fix typo ( @vmazare ) Commits","title":"v2.2.3 - May 31st, 2016"},{"location":"node_modules/diff/release-notes/#v222-march-13th-2016","text":"#102 - diffJson with dates, returns empty curly braces ( @dr-dimitru ) #97 - Whitespaces & diffWords ( @faiwer ) #92 - Fixes typo in the readme ( @bg451 ) Commits","title":"v2.2.2 - March 13th, 2016"},{"location":"node_modules/diff/release-notes/#v221-november-12th-2015","text":"#89 - add in display selector to readme ( @FranDias ) #88 - Split diffs based on file headers instead of 'Index:' metadata ( @piranna ) Commits","title":"v2.2.1 - November 12th, 2015"},{"location":"node_modules/diff/release-notes/#v220-october-29th-2015","text":"#80 - Fix a typo: applyPath -> applyPatch ( @fluxxu ) #83 - Add basic fuzzy matching to applyPatch ( @piranna ) Commits","title":"v2.2.0 - October 29th, 2015"},{"location":"node_modules/diff/release-notes/#v220-october-29th-2015_1","text":"#80 - Fix a typo: applyPath -> applyPatch ( @fluxxu ) #83 - Add basic fuzzy matching to applyPatch ( @piranna ) Commits","title":"v2.2.0 - October 29th, 2015"},{"location":"node_modules/diff/release-notes/#v213-september-30th-2015","text":"#78 - fix: error throwing when apply patch to empty string ( @21paradox ) Commits","title":"v2.1.3 - September 30th, 2015"},{"location":"node_modules/diff/release-notes/#v212-september-23rd-2015","text":"#76 - diff headers give error ( @piranna ) Commits","title":"v2.1.2 - September 23rd, 2015"},{"location":"node_modules/diff/release-notes/#v211-september-9th-2015","text":"#73 - Is applyPatches() exposed in the API? ( @davidparsson ) Commits","title":"v2.1.1 - September 9th, 2015"},{"location":"node_modules/diff/release-notes/#v210-august-27th-2015","text":"#72 - Consider using options object API for flag permutations ( @kpdecker ) #70 - diffWords treats \\n at the end as significant whitespace ( @nesQuick ) #69 - Missing count ( @wfalkwallace ) #68 - diffLines seems broken ( @wfalkwallace ) #60 - Support multiple diff hunks ( @piranna ) #54 - Feature Request: 3-way merge ( @mog422 ) #42 - Fuzz factor for applyPatch ( @stuartpb ) Move whitespace ignore out of equals method - 542063c Include source maps in babel output - 7f7ab21 Merge diff/line and diff/patch implementations - 1597705 Drop map utility method - 1ddc939 Documentation for parsePatch and applyPatches - 27c4b77 Compatibility notes: - The undocumented ignoreWhitespace flag has been removed from the Diff equality check directly. This implementation may be copied to diff utilities if dependencies existed on this functionality. Commits","title":"v2.1.0 - August 27th, 2015"},{"location":"node_modules/diff/release-notes/#v202-august-8th-2015","text":"#67 - cannot require from npm module in node ( @commenthol ) Convert to chai since we don\u2019t support IE8 - a96bbad Commits","title":"v2.0.2 - August 8th, 2015"},{"location":"node_modules/diff/release-notes/#v201-august-7th-2015","text":"Add release build at proper step - 57542fd Commits","title":"v2.0.1 - August 7th, 2015"},{"location":"node_modules/diff/release-notes/#v200-august-7th-2015","text":"#66 - Add karma and sauce tests ( @kpdecker ) #65 - Create component repository for bower ( @kpdecker ) #64 - Automatically call removeEmpty for all tokenizer calls ( @kpdecker ) #62 - Allow access to structured object representation of patch data ( @bittrance ) #61 - Use svg instead of png to get better image quality ( @PeterDaveHello ) #29 - word tokenizer works only for 7 bit ascii ( @plasmagunman ) Compatibility notes: - this.removeEmpty is now called automatically for all instances. If this is not desired, this may be overridden on a per instance basis. - The library has been refactored to use some ES6 features. The external APIs should remain the same, but bower projects that directly referenced the repository will now have to point to the components/jsdiff repository. Commits","title":"v2.0.0 - August 7th, 2015"},{"location":"node_modules/diff/release-notes/#v140-may-6th-2015","text":"#57 - createPatch -> applyPatch failed. ( @mog422 ) #56 - Two files patch ( @rgeissert ) #14 - Flip added and removed order? ( @jakesandlund ) Commits","title":"v1.4.0 - May 6th, 2015"},{"location":"node_modules/diff/release-notes/#v132-march-30th-2015","text":"#53 - Updated README.MD with Bower installation instructions ( @ofbriggs ) #49 - Cannot read property 'oldlines' of undefined ( @nwtn ) #44 - invalid-meta jsdiff is missing \"main\" entry in bower.json Commits","title":"v1.3.2 - March 30th, 2015"},{"location":"node_modules/diff/release-notes/#v131-march-13th-2015","text":"#52 - Fix for #51 Wrong result of JsDiff.diffLines ( @felicienfrancois ) Commits","title":"v1.3.1 - March 13th, 2015"},{"location":"node_modules/diff/release-notes/#v130-march-2nd-2015","text":"#47 - Adding Diff Trimmed Lines ( @JamesGould123 ) Commits","title":"v1.3.0 - March 2nd, 2015"},{"location":"node_modules/diff/release-notes/#v122-january-26th-2015","text":"#45 - Fix AMD module loading ( @pedrocarrico ) #43 - added a bower file ( @nbrustein ) Commits","title":"v1.2.2 - January 26th, 2015"},{"location":"node_modules/diff/release-notes/#v121-december-26th-2014","text":"#41 - change condition of using node export system. ( @ironhee ) Commits","title":"v1.2.1 - December 26th, 2014"},{"location":"node_modules/diff/release-notes/#v120-november-29th-2014","text":"#37 - Add support for sentences. ( @vmariano ) #28 - Implemented diffJson ( @papandreou ) #27 - Slow to execute over diffs with a large number of changes ( @termi ) Allow for optional async diffing - 19385b9 Fix diffChars implementation - eaa44ed Commits","title":"v1.2.0 - November 29th, 2014"},{"location":"node_modules/diff/release-notes/#v110-november-25th-2014","text":"#33 - AMD and global exports ( @ovcharik ) #32 - Add support for component ( @vmariano ) #31 - Don't rely on Array.prototype.map ( @papandreou ) Commits","title":"v1.1.0 - November 25th, 2014"},{"location":"node_modules/diff/release-notes/#v108-december-22nd-2013","text":"#24 - Handle windows newlines on non windows machines. ( @benogle ) #23 - Prettied up the API formatting a little, and added basic node and web examples ( @airportyh ) Commits","title":"v1.0.8 - December 22nd, 2013"},{"location":"node_modules/diff/release-notes/#v107-september-11th-2013","text":"#22 - Added variant of WordDiff that doesn't ignore whitespace differences ( @papandreou Add 0.10 to travis tests - 243a526 Commits","title":"v1.0.7 - September 11th, 2013"},{"location":"node_modules/diff/release-notes/#v106-august-30th-2013","text":"#19 - Explicitly define contents of npm package ( @sindresorhus Commits","title":"v1.0.6 - August 30th, 2013"},{"location":"node_modules/emoji-regex/","text":"emoji-regex emoji-regex offers a regular expression to match all emoji symbols (including textual representations of emoji) as per the Unicode Standard. This repository contains a script that generates this regular expression based on the data from Unicode v12 . Because of this, the regular expression can easily be updated whenever new emoji are added to the Unicode standard. Installation Via npm : npm install emoji-regex In Node.js : const emojiRegex = require ( 'emoji-regex' ); // Note: because the regular expression has the global flag set, this module // exports a function that returns the regex rather than exporting the regular // expression itself, to make it impossible to (accidentally) mutate the // original regular expression. const text = ` \\u{231A}: \u231a default emoji presentation character (Emoji_Presentation) \\u{2194}\\u{FE0F}: \u2194\ufe0f default text presentation character rendered as emoji \\u{1F469}: \ud83d\udc69 emoji modifier base (Emoji_Modifier_Base) \\u{1F469}\\u{1F3FF}: \ud83d\udc69\ud83c\udfff emoji modifier base followed by a modifier ` ; const regex = emojiRegex (); let match ; while ( match = regex . exec ( text )) { const emoji = match [ 0 ]; console . log ( `Matched sequence ${ emoji } \u2014 code points: ${ [... emoji ]. length } ` ); } Console output: Matched sequence \u231a \u2014 code points: 1 Matched sequence \u231a \u2014 code points: 1 Matched sequence \u2194\ufe0f \u2014 code points: 2 Matched sequence \u2194\ufe0f \u2014 code points: 2 Matched sequence \ud83d\udc69 \u2014 code points: 1 Matched sequence \ud83d\udc69 \u2014 code points: 1 Matched sequence \ud83d\udc69\ud83c\udfff \u2014 code points: 2 Matched sequence \ud83d\udc69\ud83c\udfff \u2014 code points: 2 To match emoji in their textual representation as well (i.e. emoji that are not Emoji_Presentation symbols and that aren\u2019t forced to render as emoji by a variation selector), require the other regex: const emojiRegex = require ( 'emoji-regex/text.js' ); Additionally, in environments which support ES2015 Unicode escapes, you may require ES2015-style versions of the regexes: const emojiRegex = require ( 'emoji-regex/es2015/index.js' ); const emojiRegexText = require ( 'emoji-regex/es2015/text.js' ); Author Mathias Bynens License emoji-regex is available under the MIT license.","title":"emoji-regex [![Build status](https://travis-ci.org/mathiasbynens/emoji-regex.svg?branch=master)](https://travis-ci.org/mathiasbynens/emoji-regex)"},{"location":"node_modules/emoji-regex/#emoji-regex","text":"emoji-regex offers a regular expression to match all emoji symbols (including textual representations of emoji) as per the Unicode Standard. This repository contains a script that generates this regular expression based on the data from Unicode v12 . Because of this, the regular expression can easily be updated whenever new emoji are added to the Unicode standard.","title":"emoji-regex"},{"location":"node_modules/emoji-regex/#installation","text":"Via npm : npm install emoji-regex In Node.js : const emojiRegex = require ( 'emoji-regex' ); // Note: because the regular expression has the global flag set, this module // exports a function that returns the regex rather than exporting the regular // expression itself, to make it impossible to (accidentally) mutate the // original regular expression. const text = ` \\u{231A}: \u231a default emoji presentation character (Emoji_Presentation) \\u{2194}\\u{FE0F}: \u2194\ufe0f default text presentation character rendered as emoji \\u{1F469}: \ud83d\udc69 emoji modifier base (Emoji_Modifier_Base) \\u{1F469}\\u{1F3FF}: \ud83d\udc69\ud83c\udfff emoji modifier base followed by a modifier ` ; const regex = emojiRegex (); let match ; while ( match = regex . exec ( text )) { const emoji = match [ 0 ]; console . log ( `Matched sequence ${ emoji } \u2014 code points: ${ [... emoji ]. length } ` ); } Console output: Matched sequence \u231a \u2014 code points: 1 Matched sequence \u231a \u2014 code points: 1 Matched sequence \u2194\ufe0f \u2014 code points: 2 Matched sequence \u2194\ufe0f \u2014 code points: 2 Matched sequence \ud83d\udc69 \u2014 code points: 1 Matched sequence \ud83d\udc69 \u2014 code points: 1 Matched sequence \ud83d\udc69\ud83c\udfff \u2014 code points: 2 Matched sequence \ud83d\udc69\ud83c\udfff \u2014 code points: 2 To match emoji in their textual representation as well (i.e. emoji that are not Emoji_Presentation symbols and that aren\u2019t forced to render as emoji by a variation selector), require the other regex: const emojiRegex = require ( 'emoji-regex/text.js' ); Additionally, in environments which support ES2015 Unicode escapes, you may require ES2015-style versions of the regexes: const emojiRegex = require ( 'emoji-regex/es2015/index.js' ); const emojiRegexText = require ( 'emoji-regex/es2015/text.js' );","title":"Installation"},{"location":"node_modules/emoji-regex/#author","text":"Mathias Bynens","title":"Author"},{"location":"node_modules/emoji-regex/#license","text":"emoji-regex is available under the MIT license.","title":"License"},{"location":"node_modules/error-ex/","text":"node-error-ex Easily subclass and customize new Error types Examples To include in your project: var errorEx = require ( 'error-ex' ); To create an error message type with a specific name (note, that ErrorFn.name will not reflect this): var JSONError = errorEx ( 'JSONError' ); var err = new JSONError ( 'error' ); err . name ; //-> JSONError throw err ; //-> JSONError: error To add a stack line: var JSONError = errorEx ( 'JSONError' , { fileName : errorEx . line ( 'in %s' )}); var err = new JSONError ( 'error' ) err . fileName = '/a/b/c/foo.json' ; throw err ; //-> (line 2)-> in /a/b/c/foo.json To append to the error message: var JSONError = errorEx ( 'JSONError' , { fileName : errorEx . append ( 'in %s' )}); var err = new JSONError ( 'error' ); err . fileName = '/a/b/c/foo.json' ; throw err ; //-> JSONError: error in /a/b/c/foo.json API errorEx([name], [properties]) Creates a new ErrorEx error type name : the name of the new type (appears in the error message upon throw; defaults to Error.name ) properties : if supplied, used as a key/value dictionary of properties to use when building up the stack message. Keys are property names that are looked up on the error message, and then passed to function values. line : if specified and is a function, return value is added as a stack entry (error-ex will indent for you). Passed the property value given the key. stack : if specified and is a function, passed the value of the property using the key, and the raw stack lines as a second argument. Takes no return value (but the stack can be modified directly). message : if specified and is a function, return value is used as new .message value upon get. Passed the property value of the property named by key, and the existing message is passed as the second argument as an array of lines (suitable for multi-line messages). Returns a constructor (Function) that can be used just like the regular Error constructor. var errorEx = require ( 'error-ex' ); var BasicError = errorEx (); var NamedError = errorEx ( 'NamedError' ); // -- var AdvancedError = errorEx ( 'AdvancedError' , { foo : { line : function ( value , stack ) { if ( value ) { return 'bar ' + value ; } return null ; } } } var err = new AdvancedError ( 'hello, world' ); err . foo = 'baz' ; throw err ; /* AdvancedError: hello, world bar baz at tryReadme() (readme.js:20:1) */ errorEx.line(str) Creates a stack line using a delimiter This is a helper function. It is to be used in lieu of writing a value object for properties values. str : The string to create Use the delimiter %s to specify where in the string the value should go var errorEx = require ( 'error-ex' ); var FileError = errorEx ( 'FileError' , { fileName : errorEx . line ( 'in %s' )}); var err = new FileError ( 'problem reading file' ); err . fileName = '/a/b/c/d/foo.js' ; throw err ; /* FileError: problem reading file in /a/b/c/d/foo.js at tryReadme() (readme.js:7:1) */ errorEx.append(str) Appends to the error.message string This is a helper function. It is to be used in lieu of writing a value object for properties values. str : The string to append Use the delimiter %s to specify where in the string the value should go var errorEx = require ( 'error-ex' ); var SyntaxError = errorEx ( 'SyntaxError' , { fileName : errorEx . append ( 'in %s' )}); var err = new SyntaxError ( 'improper indentation' ); err . fileName = '/a/b/c/d/foo.js' ; throw err ; /* SyntaxError: improper indentation in /a/b/c/d/foo.js at tryReadme() (readme.js:7:1) */ License Licensed under the MIT License . You can find a copy of it in LICENSE .","title":"node-error-ex [![Travis-CI.org Build Status](https://img.shields.io/travis/Qix-/node-error-ex.svg?style=flat-square)](https://travis-ci.org/Qix-/node-error-ex) [![Coveralls.io Coverage Rating](https://img.shields.io/coveralls/Qix-/node-error-ex.svg?style=flat-square)](https://coveralls.io/r/Qix-/node-error-ex)"},{"location":"node_modules/error-ex/#node-error-ex","text":"Easily subclass and customize new Error types","title":"node-error-ex"},{"location":"node_modules/error-ex/#examples","text":"To include in your project: var errorEx = require ( 'error-ex' ); To create an error message type with a specific name (note, that ErrorFn.name will not reflect this): var JSONError = errorEx ( 'JSONError' ); var err = new JSONError ( 'error' ); err . name ; //-> JSONError throw err ; //-> JSONError: error To add a stack line: var JSONError = errorEx ( 'JSONError' , { fileName : errorEx . line ( 'in %s' )}); var err = new JSONError ( 'error' ) err . fileName = '/a/b/c/foo.json' ; throw err ; //-> (line 2)-> in /a/b/c/foo.json To append to the error message: var JSONError = errorEx ( 'JSONError' , { fileName : errorEx . append ( 'in %s' )}); var err = new JSONError ( 'error' ); err . fileName = '/a/b/c/foo.json' ; throw err ; //-> JSONError: error in /a/b/c/foo.json","title":"Examples"},{"location":"node_modules/error-ex/#api","text":"","title":"API"},{"location":"node_modules/error-ex/#errorexname-properties","text":"Creates a new ErrorEx error type name : the name of the new type (appears in the error message upon throw; defaults to Error.name ) properties : if supplied, used as a key/value dictionary of properties to use when building up the stack message. Keys are property names that are looked up on the error message, and then passed to function values. line : if specified and is a function, return value is added as a stack entry (error-ex will indent for you). Passed the property value given the key. stack : if specified and is a function, passed the value of the property using the key, and the raw stack lines as a second argument. Takes no return value (but the stack can be modified directly). message : if specified and is a function, return value is used as new .message value upon get. Passed the property value of the property named by key, and the existing message is passed as the second argument as an array of lines (suitable for multi-line messages). Returns a constructor (Function) that can be used just like the regular Error constructor. var errorEx = require ( 'error-ex' ); var BasicError = errorEx (); var NamedError = errorEx ( 'NamedError' ); // -- var AdvancedError = errorEx ( 'AdvancedError' , { foo : { line : function ( value , stack ) { if ( value ) { return 'bar ' + value ; } return null ; } } } var err = new AdvancedError ( 'hello, world' ); err . foo = 'baz' ; throw err ; /* AdvancedError: hello, world bar baz at tryReadme() (readme.js:20:1) */","title":"errorEx([name], [properties])"},{"location":"node_modules/error-ex/#errorexlinestr","text":"Creates a stack line using a delimiter This is a helper function. It is to be used in lieu of writing a value object for properties values. str : The string to create Use the delimiter %s to specify where in the string the value should go var errorEx = require ( 'error-ex' ); var FileError = errorEx ( 'FileError' , { fileName : errorEx . line ( 'in %s' )}); var err = new FileError ( 'problem reading file' ); err . fileName = '/a/b/c/d/foo.js' ; throw err ; /* FileError: problem reading file in /a/b/c/d/foo.js at tryReadme() (readme.js:7:1) */","title":"errorEx.line(str)"},{"location":"node_modules/error-ex/#errorexappendstr","text":"Appends to the error.message string This is a helper function. It is to be used in lieu of writing a value object for properties values. str : The string to append Use the delimiter %s to specify where in the string the value should go var errorEx = require ( 'error-ex' ); var SyntaxError = errorEx ( 'SyntaxError' , { fileName : errorEx . append ( 'in %s' )}); var err = new SyntaxError ( 'improper indentation' ); err . fileName = '/a/b/c/d/foo.js' ; throw err ; /* SyntaxError: improper indentation in /a/b/c/d/foo.js at tryReadme() (readme.js:7:1) */","title":"errorEx.append(str)"},{"location":"node_modules/error-ex/#license","text":"Licensed under the MIT License . You can find a copy of it in LICENSE .","title":"License"},{"location":"node_modules/escape-string-regexp/readme/","text":"escape-string-regexp Escape RegExp special characters Install $ npm install --save escape-string-regexp Usage const escapeStringRegexp = require ( 'escape-string-regexp' ); const escapedString = escapeStringRegexp ( 'how much $ for a unicorn?' ); //=> 'how much \\$ for a unicorn\\?' new RegExp ( escapedString ); License MIT \u00a9 Sindre Sorhus","title":"escape-string-regexp [![Build Status](https://travis-ci.org/sindresorhus/escape-string-regexp.svg?branch=master)](https://travis-ci.org/sindresorhus/escape-string-regexp)"},{"location":"node_modules/escape-string-regexp/readme/#escape-string-regexp","text":"Escape RegExp special characters","title":"escape-string-regexp"},{"location":"node_modules/escape-string-regexp/readme/#install","text":"$ npm install --save escape-string-regexp","title":"Install"},{"location":"node_modules/escape-string-regexp/readme/#usage","text":"const escapeStringRegexp = require ( 'escape-string-regexp' ); const escapedString = escapeStringRegexp ( 'how much $ for a unicorn?' ); //=> 'how much \\$ for a unicorn\\?' new RegExp ( escapedString );","title":"Usage"},{"location":"node_modules/escape-string-regexp/readme/#license","text":"MIT \u00a9 Sindre Sorhus","title":"License"},{"location":"node_modules/esprima/","text":"Esprima ( esprima.org , BSD license) is a high performance, standard-compliant ECMAScript parser written in ECMAScript (also popularly known as JavaScript ). Esprima is created and maintained by Ariya Hidayat , with the help of many contributors . Features Full support for ECMAScript 2017 ( ECMA-262 8th Edition ) Sensible syntax tree format as standardized by ESTree project Experimental support for JSX , a syntax extension for React Optional tracking of syntax node location (index-based and line-column) Heavily tested (~1500 unit tests with full code coverage ) API Esprima can be used to perform lexical analysis (tokenization) or syntactic analysis (parsing) of a JavaScript program. A simple example on Node.js REPL: > var esprima = require ( 'esprima' ); > var program = 'const answer = 42' ; > esprima . tokenize ( program ); [ { type : 'Keyword' , value : 'const' }, { type : 'Identifier' , value : 'answer' }, { type : 'Punctuator' , value : '=' }, { type : 'Numeric' , value : '42' } ] > esprima . parseScript ( program ); { type : 'Program' , body : [ { type : 'VariableDeclaration' , declarations : [ Object ], kind : 'const' } ], sourceType : 'script' } For more information, please read the complete documentation .","title":"Index"},{"location":"node_modules/esprima/#features","text":"Full support for ECMAScript 2017 ( ECMA-262 8th Edition ) Sensible syntax tree format as standardized by ESTree project Experimental support for JSX , a syntax extension for React Optional tracking of syntax node location (index-based and line-column) Heavily tested (~1500 unit tests with full code coverage )","title":"Features"},{"location":"node_modules/esprima/#api","text":"Esprima can be used to perform lexical analysis (tokenization) or syntactic analysis (parsing) of a JavaScript program. A simple example on Node.js REPL: > var esprima = require ( 'esprima' ); > var program = 'const answer = 42' ; > esprima . tokenize ( program ); [ { type : 'Keyword' , value : 'const' }, { type : 'Identifier' , value : 'answer' }, { type : 'Punctuator' , value : '=' }, { type : 'Numeric' , value : '42' } ] > esprima . parseScript ( program ); { type : 'Program' , body : [ { type : 'VariableDeclaration' , declarations : [ Object ], kind : 'const' } ], sourceType : 'script' } For more information, please read the complete documentation .","title":"API"},{"location":"node_modules/extend/","text":"extend() for Node.js node-extend is a port of the classic extend() method from jQuery. It behaves as you expect. It is simple, tried and true. Notes: Since Node.js >= 4, Object.assign now offers the same functionality natively (but without the \"deep copy\" option). See ECMAScript 2015 (ES6) in Node.js . Some native implementations of Object.assign in both Node.js and many browsers (since NPM modules are for the browser too) may not be fully spec-compliant. Check object.assign module for a compliant candidate. Installation This package is available on npm as: extend npm install extend Usage Syntax: extend ( [ deep ], target , object1 , [ objectN ] ) Extend one object with one or more others, returning the modified object. Example: var extend = require ( 'extend' ); extend ( targetObject , object1 , object2 ); Keep in mind that the target object will be modified, and will be returned from extend(). If a boolean true is specified as the first argument, extend performs a deep copy, recursively copying any objects it finds. Otherwise, the copy will share structure with the original object(s). Undefined properties are not copied. However, properties inherited from the object's prototype will be copied over. Warning: passing false as the first argument is not supported. Arguments deep Boolean (optional) If set, the merge becomes recursive (i.e. deep copy). target Object The object to extend. object1 Object The object that will be merged into the first. objectN Object (Optional) More objects to merge into the first. License node-extend is licensed under the MIT License . Acknowledgements All credit to the jQuery authors for perfecting this amazing utility. Ported to Node.js by Stefan Thomas with contributions by Jonathan Buchanan and Jordan Harband .","title":"Index"},{"location":"node_modules/extend/#extend-for-nodejs","text":"node-extend is a port of the classic extend() method from jQuery. It behaves as you expect. It is simple, tried and true. Notes: Since Node.js >= 4, Object.assign now offers the same functionality natively (but without the \"deep copy\" option). See ECMAScript 2015 (ES6) in Node.js . Some native implementations of Object.assign in both Node.js and many browsers (since NPM modules are for the browser too) may not be fully spec-compliant. Check object.assign module for a compliant candidate.","title":"extend() for Node.js "},{"location":"node_modules/extend/#installation","text":"This package is available on npm as: extend npm install extend","title":"Installation"},{"location":"node_modules/extend/#usage","text":"Syntax: extend ( [ deep ], target , object1 , [ objectN ] ) Extend one object with one or more others, returning the modified object. Example: var extend = require ( 'extend' ); extend ( targetObject , object1 , object2 ); Keep in mind that the target object will be modified, and will be returned from extend(). If a boolean true is specified as the first argument, extend performs a deep copy, recursively copying any objects it finds. Otherwise, the copy will share structure with the original object(s). Undefined properties are not copied. However, properties inherited from the object's prototype will be copied over. Warning: passing false as the first argument is not supported.","title":"Usage"},{"location":"node_modules/extend/#arguments","text":"deep Boolean (optional) If set, the merge becomes recursive (i.e. deep copy). target Object The object to extend. object1 Object The object that will be merged into the first. objectN Object (Optional) More objects to merge into the first.","title":"Arguments"},{"location":"node_modules/extend/#license","text":"node-extend is licensed under the MIT License .","title":"License"},{"location":"node_modules/extend/#acknowledgements","text":"All credit to the jQuery authors for perfecting this amazing utility. Ported to Node.js by Stefan Thomas with contributions by Jonathan Buchanan and Jordan Harband .","title":"Acknowledgements"},{"location":"node_modules/extend/CHANGELOG/","text":"3.0.2 / 2018-07-19 [Fix] Prevent merging __proto__ property (#48) [Dev Deps] update eslint , @ljharb/eslint-config , tape [Tests] up to node v10.7 , v9.11 , v8.11 , v7.10 , v6.14 , v4.9 ; use nvm install-latest-npm 3.0.1 / 2017-04-27 [Fix] deep extending should work with a non-object (#46) [Dev Deps] update tape , eslint , @ljharb/eslint-config [Tests] up to node v7.9 , v6.10 , v4.8 ; improve matrix [Docs] Switch from vb.teelaun.ch to versionbadg.es for the npm version badge SVG. [Docs] Add example to readme (#34) 3.0.0 / 2015-07-01 [Possible breaking change] Use global \"strict\" directive (#32) [Tests] int is an ES3 reserved word [Tests] Test up to io.js v2.3 [Tests] Add npm run eslint [Dev Deps] Update covert , jscs 2.0.1 / 2015-04-25 Use an inline isArray check, for ES3 browsers. (#27) Some old browsers fail when an identifier is toString Test latest node and io.js versions on travis-ci ; speed up builds Add license info to package.json (#25) Update tape , jscs Adding a CHANGELOG 2.0.0 / 2014-10-01 Increase code coverage to 100%; run code coverage as part of tests Add npm run lint ; Run linter as part of tests Remove nodeType and setInterval checks in isPlainObject Updating tape , jscs , covert General style and README cleanup 1.3.0 / 2014-06-20 Add component.json for browser support (#18) Use SVG for badges in README (#16) Updating tape , covert Updating travis-ci to work with multiple node versions Fix deep === false bug (returning target as {}) (#14) Fixing constructor checks in isPlainObject Adding additional test coverage Adding npm run coverage Add LICENSE (#13) Adding a warning about false , per #11 General style and whitespace cleanup 1.2.1 / 2013-09-14 Fixing hasOwnProperty bugs that would only have shown up in specific browsers. Fixes #8 Updating tape 1.2.0 / 2013-09-02 Updating the README: add badges Adding a missing variable reference. Using tape instead of buster for tests; add more tests (#7) Adding node 0.10 to Travis CI (#6) Enabling \"npm test\" and cleaning up package.json (#5) Add Travis CI. 1.1.3 / 2012-12-06 Added unit tests. Ensure extend function is named. (Looks nicer in a stack trace.) README cleanup. 1.1.1 / 2012-11-07 README cleanup. Added installation instructions. Added a missing semicolon 1.0.0 / 2012-04-08 Initial commit","title":"CHANGELOG"},{"location":"node_modules/extend/CHANGELOG/#302-2018-07-19","text":"[Fix] Prevent merging __proto__ property (#48) [Dev Deps] update eslint , @ljharb/eslint-config , tape [Tests] up to node v10.7 , v9.11 , v8.11 , v7.10 , v6.14 , v4.9 ; use nvm install-latest-npm","title":"3.0.2 / 2018-07-19"},{"location":"node_modules/extend/CHANGELOG/#301-2017-04-27","text":"[Fix] deep extending should work with a non-object (#46) [Dev Deps] update tape , eslint , @ljharb/eslint-config [Tests] up to node v7.9 , v6.10 , v4.8 ; improve matrix [Docs] Switch from vb.teelaun.ch to versionbadg.es for the npm version badge SVG. [Docs] Add example to readme (#34)","title":"3.0.1 / 2017-04-27"},{"location":"node_modules/extend/CHANGELOG/#300-2015-07-01","text":"[Possible breaking change] Use global \"strict\" directive (#32) [Tests] int is an ES3 reserved word [Tests] Test up to io.js v2.3 [Tests] Add npm run eslint [Dev Deps] Update covert , jscs","title":"3.0.0 / 2015-07-01"},{"location":"node_modules/extend/CHANGELOG/#201-2015-04-25","text":"Use an inline isArray check, for ES3 browsers. (#27) Some old browsers fail when an identifier is toString Test latest node and io.js versions on travis-ci ; speed up builds Add license info to package.json (#25) Update tape , jscs Adding a CHANGELOG","title":"2.0.1 / 2015-04-25"},{"location":"node_modules/extend/CHANGELOG/#200-2014-10-01","text":"Increase code coverage to 100%; run code coverage as part of tests Add npm run lint ; Run linter as part of tests Remove nodeType and setInterval checks in isPlainObject Updating tape , jscs , covert General style and README cleanup","title":"2.0.0 / 2014-10-01"},{"location":"node_modules/extend/CHANGELOG/#130-2014-06-20","text":"Add component.json for browser support (#18) Use SVG for badges in README (#16) Updating tape , covert Updating travis-ci to work with multiple node versions Fix deep === false bug (returning target as {}) (#14) Fixing constructor checks in isPlainObject Adding additional test coverage Adding npm run coverage Add LICENSE (#13) Adding a warning about false , per #11 General style and whitespace cleanup","title":"1.3.0 / 2014-06-20"},{"location":"node_modules/extend/CHANGELOG/#121-2013-09-14","text":"Fixing hasOwnProperty bugs that would only have shown up in specific browsers. Fixes #8 Updating tape","title":"1.2.1 / 2013-09-14"},{"location":"node_modules/extend/CHANGELOG/#120-2013-09-02","text":"Updating the README: add badges Adding a missing variable reference. Using tape instead of buster for tests; add more tests (#7) Adding node 0.10 to Travis CI (#6) Enabling \"npm test\" and cleaning up package.json (#5) Add Travis CI.","title":"1.2.0 / 2013-09-02"},{"location":"node_modules/extend/CHANGELOG/#113-2012-12-06","text":"Added unit tests. Ensure extend function is named. (Looks nicer in a stack trace.) README cleanup.","title":"1.1.3 / 2012-12-06"},{"location":"node_modules/extend/CHANGELOG/#111-2012-11-07","text":"README cleanup. Added installation instructions. Added a missing semicolon","title":"1.1.1 / 2012-11-07"},{"location":"node_modules/extend/CHANGELOG/#100-2012-04-08","text":"Initial commit","title":"1.0.0 / 2012-04-08"},{"location":"node_modules/fast-deep-equal/","text":"fast-deep-equal The fastest deep equal with ES6 Map, Set and Typed arrays support. Install npm install fast-deep-equal Features ES5 compatible works in node.js (8+) and browsers (IE9+) checks equality of Date and RegExp objects by value. ES6 equal ( require('fast-deep-equal/es6') ) also supports: - Maps - Sets - Typed arrays Usage var equal = require ( 'fast-deep-equal' ); console . log ( equal ({ foo : 'bar' }, { foo : 'bar' })); // true To support ES6 Maps, Sets and Typed arrays equality use: var equal = require ( 'fast-deep-equal/es6' ); console . log ( equal ( Int16Array ([ 1 , 2 ]), Int16Array ([ 1 , 2 ]))); // true To use with React (avoiding the traversal of React elements' _owner property that contains circular references and is not needed when comparing the elements - borrowed from react-fast-compare ): var equal = require ( 'fast-deep-equal/react' ); var equal = require ( 'fast-deep-equal/es6/react' ); Performance benchmark Node.js v12.6.0: fast-deep-equal x 261,950 ops/sec \u00b10.52% (89 runs sampled) fast-deep-equal/es6 x 212,991 ops/sec \u00b10.34% (92 runs sampled) fast-equals x 230,957 ops/sec \u00b10.83% (85 runs sampled) nano-equal x 187,995 ops/sec \u00b10.53% (88 runs sampled) shallow-equal-fuzzy x 138,302 ops/sec \u00b10.49% (90 runs sampled) underscore.isEqual x 74,423 ops/sec \u00b10.38% (89 runs sampled) lodash.isEqual x 36,637 ops/sec \u00b10.72% (90 runs sampled) deep-equal x 2,310 ops/sec \u00b10.37% (90 runs sampled) deep-eql x 35,312 ops/sec \u00b10.67% (91 runs sampled) ramda.equals x 12,054 ops/sec \u00b10.40% (91 runs sampled) util.isDeepStrictEqual x 46,440 ops/sec \u00b10.43% (90 runs sampled) assert.deepStrictEqual x 456 ops/sec \u00b10.71% (88 runs sampled) The fastest is fast-deep-equal To run benchmark (requires node.js 6+): npm run benchmark Please note : this benchmark runs against the available test cases. To choose the most performant library for your application, it is recommended to benchmark against your data and to NOT expect this benchmark to reflect the performance difference in your application. Enterprise support fast-deep-equal package is a part of Tidelift enterprise subscription - it provides a centralised commercial support to open-source software users, in addition to the support provided by software maintainers. Security contact To report a security vulnerability, please use the Tidelift security contact . Tidelift will coordinate the fix and disclosure. Please do NOT report security vulnerability via GitHub issues. License MIT","title":"fast-deep-equal"},{"location":"node_modules/fast-deep-equal/#fast-deep-equal","text":"The fastest deep equal with ES6 Map, Set and Typed arrays support.","title":"fast-deep-equal"},{"location":"node_modules/fast-deep-equal/#install","text":"npm install fast-deep-equal","title":"Install"},{"location":"node_modules/fast-deep-equal/#features","text":"ES5 compatible works in node.js (8+) and browsers (IE9+) checks equality of Date and RegExp objects by value. ES6 equal ( require('fast-deep-equal/es6') ) also supports: - Maps - Sets - Typed arrays","title":"Features"},{"location":"node_modules/fast-deep-equal/#usage","text":"var equal = require ( 'fast-deep-equal' ); console . log ( equal ({ foo : 'bar' }, { foo : 'bar' })); // true To support ES6 Maps, Sets and Typed arrays equality use: var equal = require ( 'fast-deep-equal/es6' ); console . log ( equal ( Int16Array ([ 1 , 2 ]), Int16Array ([ 1 , 2 ]))); // true To use with React (avoiding the traversal of React elements' _owner property that contains circular references and is not needed when comparing the elements - borrowed from react-fast-compare ): var equal = require ( 'fast-deep-equal/react' ); var equal = require ( 'fast-deep-equal/es6/react' );","title":"Usage"},{"location":"node_modules/fast-deep-equal/#performance-benchmark","text":"Node.js v12.6.0: fast-deep-equal x 261,950 ops/sec \u00b10.52% (89 runs sampled) fast-deep-equal/es6 x 212,991 ops/sec \u00b10.34% (92 runs sampled) fast-equals x 230,957 ops/sec \u00b10.83% (85 runs sampled) nano-equal x 187,995 ops/sec \u00b10.53% (88 runs sampled) shallow-equal-fuzzy x 138,302 ops/sec \u00b10.49% (90 runs sampled) underscore.isEqual x 74,423 ops/sec \u00b10.38% (89 runs sampled) lodash.isEqual x 36,637 ops/sec \u00b10.72% (90 runs sampled) deep-equal x 2,310 ops/sec \u00b10.37% (90 runs sampled) deep-eql x 35,312 ops/sec \u00b10.67% (91 runs sampled) ramda.equals x 12,054 ops/sec \u00b10.40% (91 runs sampled) util.isDeepStrictEqual x 46,440 ops/sec \u00b10.43% (90 runs sampled) assert.deepStrictEqual x 456 ops/sec \u00b10.71% (88 runs sampled) The fastest is fast-deep-equal To run benchmark (requires node.js 6+): npm run benchmark Please note : this benchmark runs against the available test cases. To choose the most performant library for your application, it is recommended to benchmark against your data and to NOT expect this benchmark to reflect the performance difference in your application.","title":"Performance benchmark"},{"location":"node_modules/fast-deep-equal/#enterprise-support","text":"fast-deep-equal package is a part of Tidelift enterprise subscription - it provides a centralised commercial support to open-source software users, in addition to the support provided by software maintainers.","title":"Enterprise support"},{"location":"node_modules/fast-deep-equal/#security-contact","text":"To report a security vulnerability, please use the Tidelift security contact . Tidelift will coordinate the fix and disclosure. Please do NOT report security vulnerability via GitHub issues.","title":"Security contact"},{"location":"node_modules/fast-deep-equal/#license","text":"MIT","title":"License"},{"location":"node_modules/fast-levenshtein/","text":"fast-levenshtein - Levenshtein algorithm in Javascript An efficient Javascript implementation of the Levenshtein algorithm with locale-specific collator support. Features Works in node.js and in the browser. Better performance than other implementations by not needing to store the whole matrix ( more info ). Locale-sensitive string comparisions if needed. Comprehensive test suite and performance benchmark. Small: <1 KB minified and gzipped Installation node.js Install using npm : $ npm install fast-levenshtein Browser Using bower: $ bower install fast-levenshtein If you are not using any module loader system then the API will then be accessible via the window.Levenshtein object. Examples Default usage var levenshtein = require ( 'fast-levenshtein' ); var distance = levenshtein . get ( 'back' , 'book' ); // 2 var distance = levenshtein . get ( '\u6211\u611b\u4f60' , '\u6211\u53eb\u4f60' ); // 1 Locale-sensitive string comparisons It supports using Intl.Collator for locale-sensitive string comparisons: var levenshtein = require ( 'fast-levenshtein' ); levenshtein . get ( 'mikailovitch' , 'Mikha\u00eflovitch' , { useCollator : true }); // 1 Building and Testing To build the code and run the tests: $ npm install -g grunt-cli $ npm install $ npm run build Performance Thanks to Titus Wormer for encouraging me to do this. Benchmarked against other node.js levenshtein distance modules (on Macbook Air 2012, Core i7, 8GB RAM): Running suite Implementation comparison [ benchmark/speed.js ] ... >> levenshtein-edit-distance x 234 ops/sec \u00b13.02% ( 73 runs sampled ) >> levenshtein-component x 422 ops/sec \u00b14.38% ( 83 runs sampled ) >> levenshtein-deltas x 283 ops/sec \u00b13.83% ( 78 runs sampled ) >> natural x 255 ops/sec \u00b10.76% ( 88 runs sampled ) >> levenshtein x 180 ops/sec \u00b13.55% ( 86 runs sampled ) >> fast-levenshtein x 1 ,792 ops/sec \u00b12.72% ( 95 runs sampled ) Benchmark done . Fastest test is fast-levenshtein at 4 .2x faster than levenshtein-component You can run this benchmark yourself by doing: $ npm install $ npm run build $ npm run benchmark Contributing If you wish to submit a pull request please update and/or create new tests for any changes you make and ensure the grunt build passes. See CONTRIBUTING.md for details. License MIT - see LICENSE.md","title":"fast-levenshtein - Levenshtein algorithm in Javascript"},{"location":"node_modules/fast-levenshtein/#fast-levenshtein-levenshtein-algorithm-in-javascript","text":"An efficient Javascript implementation of the Levenshtein algorithm with locale-specific collator support.","title":"fast-levenshtein - Levenshtein algorithm in Javascript"},{"location":"node_modules/fast-levenshtein/#features","text":"Works in node.js and in the browser. Better performance than other implementations by not needing to store the whole matrix ( more info ). Locale-sensitive string comparisions if needed. Comprehensive test suite and performance benchmark. Small: <1 KB minified and gzipped","title":"Features"},{"location":"node_modules/fast-levenshtein/#installation","text":"","title":"Installation"},{"location":"node_modules/fast-levenshtein/#nodejs","text":"Install using npm : $ npm install fast-levenshtein","title":"node.js"},{"location":"node_modules/fast-levenshtein/#browser","text":"Using bower: $ bower install fast-levenshtein If you are not using any module loader system then the API will then be accessible via the window.Levenshtein object.","title":"Browser"},{"location":"node_modules/fast-levenshtein/#examples","text":"Default usage var levenshtein = require ( 'fast-levenshtein' ); var distance = levenshtein . get ( 'back' , 'book' ); // 2 var distance = levenshtein . get ( '\u6211\u611b\u4f60' , '\u6211\u53eb\u4f60' ); // 1 Locale-sensitive string comparisons It supports using Intl.Collator for locale-sensitive string comparisons: var levenshtein = require ( 'fast-levenshtein' ); levenshtein . get ( 'mikailovitch' , 'Mikha\u00eflovitch' , { useCollator : true }); // 1","title":"Examples"},{"location":"node_modules/fast-levenshtein/#building-and-testing","text":"To build the code and run the tests: $ npm install -g grunt-cli $ npm install $ npm run build","title":"Building and Testing"},{"location":"node_modules/fast-levenshtein/#performance","text":"Thanks to Titus Wormer for encouraging me to do this. Benchmarked against other node.js levenshtein distance modules (on Macbook Air 2012, Core i7, 8GB RAM): Running suite Implementation comparison [ benchmark/speed.js ] ... >> levenshtein-edit-distance x 234 ops/sec \u00b13.02% ( 73 runs sampled ) >> levenshtein-component x 422 ops/sec \u00b14.38% ( 83 runs sampled ) >> levenshtein-deltas x 283 ops/sec \u00b13.83% ( 78 runs sampled ) >> natural x 255 ops/sec \u00b10.76% ( 88 runs sampled ) >> levenshtein x 180 ops/sec \u00b13.55% ( 86 runs sampled ) >> fast-levenshtein x 1 ,792 ops/sec \u00b12.72% ( 95 runs sampled ) Benchmark done . Fastest test is fast-levenshtein at 4 .2x faster than levenshtein-component You can run this benchmark yourself by doing: $ npm install $ npm run build $ npm run benchmark","title":"Performance"},{"location":"node_modules/fast-levenshtein/#contributing","text":"If you wish to submit a pull request please update and/or create new tests for any changes you make and ensure the grunt build passes. See CONTRIBUTING.md for details.","title":"Contributing"},{"location":"node_modules/fast-levenshtein/#license","text":"MIT - see LICENSE.md","title":"License"},{"location":"node_modules/fast-levenshtein/LICENSE/","text":"(MIT License) Copyright (c) 2013 Ramesh Nair Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"LICENSE"},{"location":"node_modules/fault/readme/","text":"fault Functional errors with formatted output. Install npm : npm install fault Use var fault = require ( 'fault' ) throw fault ( 'Hello %s!' , 'Eric' ) Yields: Error: Hello Eric! at FormattedError (~/node_modules/fault/index.js:30:12) at Object.<anonymous> (~/example.js:3:7) \u2026 Or, format a float in a type error: var fault = require ( 'fault' ) throw fault . type ( 'Who doesn\u2019t like %f? \\uD83C\\uDF70' , Math . PI ) Yields: TypeError: Who doesn\u2019t like 3.141593? \ud83c\udf70 at Function.FormattedError [as type] (~/node_modules/fault/index.js:30:12) at Object.<anonymous> (~/example.js:3:7) API fault(format?[, values...]) Create an error with a printf-like formatted message. Parameters format ( string , optional) values ( * , optional) Formatters %s \u2014 String %b \u2014 Binary %c \u2014 Character %d \u2014 Decimal %f \u2014 Floating point %o \u2014 Octal %x \u2014 Lowercase hexadecimal %X \u2014 Uppercase hexadecimal % followed by any other character, prints that character See samsonjs/format for argument parsing. Returns An instance of Error . Other errors fault.eval(format?[, values...]) \u2014 EvalError fault.range(format?[, values...]) \u2014 RangeError fault.reference(format?[, values...]) \u2014 ReferenceError fault.syntax(format?[, values...]) \u2014 SyntaxError fault.type(format?[, values...]) \u2014 TypeError fault.uri(format?[, values...]) \u2014 URIError fault.create(Constructor) Factory to create instances of ErrorConstructor with support for formatting. Used internally to wrap the global error constructors, exposed for custom errors. Returns a function just like fault . License MIT \u00a9 Titus Wormer","title":"fault"},{"location":"node_modules/fault/readme/#fault","text":"Functional errors with formatted output.","title":"fault"},{"location":"node_modules/fault/readme/#install","text":"npm : npm install fault","title":"Install"},{"location":"node_modules/fault/readme/#use","text":"var fault = require ( 'fault' ) throw fault ( 'Hello %s!' , 'Eric' ) Yields: Error: Hello Eric! at FormattedError (~/node_modules/fault/index.js:30:12) at Object.<anonymous> (~/example.js:3:7) \u2026 Or, format a float in a type error: var fault = require ( 'fault' ) throw fault . type ( 'Who doesn\u2019t like %f? \\uD83C\\uDF70' , Math . PI ) Yields: TypeError: Who doesn\u2019t like 3.141593? \ud83c\udf70 at Function.FormattedError [as type] (~/node_modules/fault/index.js:30:12) at Object.<anonymous> (~/example.js:3:7)","title":"Use"},{"location":"node_modules/fault/readme/#api","text":"","title":"API"},{"location":"node_modules/fault/readme/#faultformat-values","text":"Create an error with a printf-like formatted message.","title":"fault(format?[, values...])"},{"location":"node_modules/fault/readme/#parameters","text":"format ( string , optional) values ( * , optional)","title":"Parameters"},{"location":"node_modules/fault/readme/#formatters","text":"%s \u2014 String %b \u2014 Binary %c \u2014 Character %d \u2014 Decimal %f \u2014 Floating point %o \u2014 Octal %x \u2014 Lowercase hexadecimal %X \u2014 Uppercase hexadecimal % followed by any other character, prints that character See samsonjs/format for argument parsing.","title":"Formatters"},{"location":"node_modules/fault/readme/#returns","text":"An instance of Error .","title":"Returns"},{"location":"node_modules/fault/readme/#other-errors","text":"fault.eval(format?[, values...]) \u2014 EvalError fault.range(format?[, values...]) \u2014 RangeError fault.reference(format?[, values...]) \u2014 ReferenceError fault.syntax(format?[, values...]) \u2014 SyntaxError fault.type(format?[, values...]) \u2014 TypeError fault.uri(format?[, values...]) \u2014 URIError","title":"Other errors"},{"location":"node_modules/fault/readme/#faultcreateconstructor","text":"Factory to create instances of ErrorConstructor with support for formatting. Used internally to wrap the global error constructors, exposed for custom errors. Returns a function just like fault .","title":"fault.create(Constructor)"},{"location":"node_modules/fault/readme/#license","text":"MIT \u00a9 Titus Wormer","title":"License"},{"location":"node_modules/file-entry-cache/","text":"file-entry-cache Super simple cache for file metadata, useful for process that work o a given series of files and that only need to repeat the job on the changed ones since the previous run of the process \u2014 Edit install npm i --save file-entry-cache Usage The module exposes two functions create and createFromFile . create(cacheName, [directory, useCheckSum]) cacheName : the name of the cache to be created directory : Optional the directory to load the cache from usecheckSum : Whether to use md5 checksum to verify if file changed. If false the default will be to use the mtime and size of the file. createFromFile(pathToCache, [useCheckSum]) pathToCache : the path to the cache file (this combines the cache name and directory) useCheckSum : Whether to use md5 checksum to verify if file changed. If false the default will be to use the mtime and size of the file. // loads the cache, if one does not exists for the given // Id a new one will be prepared to be created var fileEntryCache = require ( 'file-entry-cache' ); var cache = fileEntryCache . create ( 'testCache' ); var files = expand ( '../fixtures/*.txt' ); // the first time this method is called, will return all the files var oFiles = cache . getUpdatedFiles ( files ); // this will persist this to disk checking each file stats and // updating the meta attributes `size` and `mtime`. // custom fields could also be added to the meta object and will be persisted // in order to retrieve them later cache . reconcile (); // use this if you want the non visited file entries to be kept in the cache // for more than one execution // // cache.reconcile( true /* noPrune */) // on a second run var cache2 = fileEntryCache . create ( 'testCache' ); // will return now only the files that were modified or none // if no files were modified previous to the execution of this function var oFiles = cache . getUpdatedFiles ( files ); // if you want to prevent a file from being considered non modified // something useful if a file failed some sort of validation // you can then remove the entry from the cache doing cache . removeEntry ( 'path/to/file' ); // path to file should be the same path of the file received on `getUpdatedFiles` // that will effectively make the file to appear again as modified until the validation is passed. In that // case you should not remove it from the cache // if you need all the files, so you can determine what to do with the changed ones // you can call var oFiles = cache . normalizeEntries ( files ); // oFiles will be an array of objects like the following entry = { key : 'some/name/file' , the path to the file changed : true , // if the file was changed since previous run meta : { size : 3242 , // the size of the file mtime : 231231231 , // the modification time of the file data : {} // some extra field stored for this file (useful to save the result of a transformation on the file } } Motivation for this module I needed a super simple and dumb in-memory cache with optional disk persistence (write-back cache) in order to make a script that will beautify files with esformatter to execute only on the files that were changed since the last run. In doing so the process of beautifying files was reduced from several seconds to a small fraction of a second. This module uses flat-cache a super simple key/value cache storage with optional file persistance. The main idea is to read the files when the task begins, apply the transforms required, and if the process succeed, then store the new state of the files. The next time this module request for getChangedFiles will return only the files that were modified. Making the process to end faster. This module could also be used by processes that modify the files applying a transform, in that case the result of the transform could be stored in the meta field, of the entries. Anything added to the meta field will be persisted. Those processes won't need to call getChangedFiles they will instead call normalizeEntries that will return the entries with a changed field that can be used to determine if the file was changed or not. If it was not changed the transformed stored data could be used instead of actually applying the transformation, saving time in case of only a few files changed. In the worst case scenario all the files will be processed. In the best case scenario only a few of them will be processed. Important notes The values set on the meta attribute of the entries should be stringify-able ones if possible, flat-cache uses circular-json to try to persist circular structures, but this should be considered experimental. The best results are always obtained with non circular values All the changes to the cache state are done to memory first and only persisted after reconcile. License MIT","title":"file-entry-cache"},{"location":"node_modules/file-entry-cache/#file-entry-cache","text":"Super simple cache for file metadata, useful for process that work o a given series of files and that only need to repeat the job on the changed ones since the previous run of the process \u2014 Edit","title":"file-entry-cache"},{"location":"node_modules/file-entry-cache/#install","text":"npm i --save file-entry-cache","title":"install"},{"location":"node_modules/file-entry-cache/#usage","text":"The module exposes two functions create and createFromFile .","title":"Usage"},{"location":"node_modules/file-entry-cache/#createcachename-directory-usechecksum","text":"cacheName : the name of the cache to be created directory : Optional the directory to load the cache from usecheckSum : Whether to use md5 checksum to verify if file changed. If false the default will be to use the mtime and size of the file.","title":"create(cacheName, [directory, useCheckSum])"},{"location":"node_modules/file-entry-cache/#createfromfilepathtocache-usechecksum","text":"pathToCache : the path to the cache file (this combines the cache name and directory) useCheckSum : Whether to use md5 checksum to verify if file changed. If false the default will be to use the mtime and size of the file. // loads the cache, if one does not exists for the given // Id a new one will be prepared to be created var fileEntryCache = require ( 'file-entry-cache' ); var cache = fileEntryCache . create ( 'testCache' ); var files = expand ( '../fixtures/*.txt' ); // the first time this method is called, will return all the files var oFiles = cache . getUpdatedFiles ( files ); // this will persist this to disk checking each file stats and // updating the meta attributes `size` and `mtime`. // custom fields could also be added to the meta object and will be persisted // in order to retrieve them later cache . reconcile (); // use this if you want the non visited file entries to be kept in the cache // for more than one execution // // cache.reconcile( true /* noPrune */) // on a second run var cache2 = fileEntryCache . create ( 'testCache' ); // will return now only the files that were modified or none // if no files were modified previous to the execution of this function var oFiles = cache . getUpdatedFiles ( files ); // if you want to prevent a file from being considered non modified // something useful if a file failed some sort of validation // you can then remove the entry from the cache doing cache . removeEntry ( 'path/to/file' ); // path to file should be the same path of the file received on `getUpdatedFiles` // that will effectively make the file to appear again as modified until the validation is passed. In that // case you should not remove it from the cache // if you need all the files, so you can determine what to do with the changed ones // you can call var oFiles = cache . normalizeEntries ( files ); // oFiles will be an array of objects like the following entry = { key : 'some/name/file' , the path to the file changed : true , // if the file was changed since previous run meta : { size : 3242 , // the size of the file mtime : 231231231 , // the modification time of the file data : {} // some extra field stored for this file (useful to save the result of a transformation on the file } }","title":"createFromFile(pathToCache, [useCheckSum])"},{"location":"node_modules/file-entry-cache/#motivation-for-this-module","text":"I needed a super simple and dumb in-memory cache with optional disk persistence (write-back cache) in order to make a script that will beautify files with esformatter to execute only on the files that were changed since the last run. In doing so the process of beautifying files was reduced from several seconds to a small fraction of a second. This module uses flat-cache a super simple key/value cache storage with optional file persistance. The main idea is to read the files when the task begins, apply the transforms required, and if the process succeed, then store the new state of the files. The next time this module request for getChangedFiles will return only the files that were modified. Making the process to end faster. This module could also be used by processes that modify the files applying a transform, in that case the result of the transform could be stored in the meta field, of the entries. Anything added to the meta field will be persisted. Those processes won't need to call getChangedFiles they will instead call normalizeEntries that will return the entries with a changed field that can be used to determine if the file was changed or not. If it was not changed the transformed stored data could be used instead of actually applying the transformation, saving time in case of only a few files changed. In the worst case scenario all the files will be processed. In the best case scenario only a few of them will be processed.","title":"Motivation for this module"},{"location":"node_modules/file-entry-cache/#important-notes","text":"The values set on the meta attribute of the entries should be stringify-able ones if possible, flat-cache uses circular-json to try to persist circular structures, but this should be considered experimental. The best results are always obtained with non circular values All the changes to the cache state are done to memory first and only persisted after reconcile.","title":"Important notes"},{"location":"node_modules/file-entry-cache/#license","text":"MIT","title":"License"},{"location":"node_modules/file-entry-cache/changelog/","text":"file-entry-cache - Changelog v5.0.1 Bug Fixes Fix missing checksum comparison from reconcile since now we use mtime and size by default. - e858aa9 , Roy Riojas , 04/02/2019 12:30:22 Old mode using checkSum can still be used by passing the useCheckSum parameter to the create or createFromFile methods. v5.0.0 Refactoring Make checksum comparison optional - b0f9ae0 , Roy Riojas , 03/02/2019 21:17:39 To determine if a file has changed we were using the checksum in the newer versions, but eslint was relying on the old behavior where we use the mtime and file size to determine if a file changed. That's why we decided to make the checksum check optional. To use it: // to make the cache use the checkSum check do the following: var fCache = fileEntryCache . create ( cacheName , dir , useCheckSum ); // pass the third parameter as true var otherCache = fileEntryCache . createFromFile ( cacheName , useCheckSum ); // pass the second parameter as true v4.0.0 Build Scripts Changes use the same node versions eslint use - 563cfee , Roy Riojas , 08/01/2019 23:29:34 Other changes Remove object-assign dependency. - d0f598e , Corey Farrell , 08/01/2019 23:09:51 node.js >=4 is required so object-assign is no longer needed, the native Object.assign can be used instead. v3.0.0 Build Scripts Changes Upgrade flat-cache dep to latest - 078b0df , Roy Riojas , 08/01/2019 21:54:40 Commit new package-lock.json file - 245fe62 , Roy Riojas , 08/01/2019 20:56:21 Refactoring add eslintrc file - 6dd32d8 , Roy Riojas , 22/08/2018 11:58:17 Other changes Move variable definition out of else block - ea05441 , Zakhar Shapurau , 25/04/2017 13:19:00 Add script and cmd to test hash/checksum performance - 7f60e0a , Zakhar Shapurau , 24/04/2017 16:43:12 Calculate md5 hexdigest instead of Adler-32 checksum - f9e5c69 , Zakhar Shapurau , 24/04/2017 16:43:12 How to reproduce - 4edc2dc , Zakhar Shapurau , 24/04/2017 15:49:32 Test handling of removed files - 09d9ec5 , Zakhar Shapurau , 19/04/2017 21:51:50 Use content checksum instead of mtime and fsize - 343b340 , Zakhar Shapurau , 19/04/2017 21:51:47 Revert Revert \"How to reproduce\" - 4b4e54a , Zakhar Shapurau , 25/04/2017 13:15:36 This reverts commit 4edc2dcec01574247bfc2e0a2fe26527332b7df3. v2.0.0 Features do not persist and prune removed files from cache. Relates to #2 - 408374d , Roy Riojas , 16/08/2016 15:47:58 v1.3.1 Build Scripts Changes remove older node version - 0a26ac4 , Roy Riojas , 01/08/2016 06:09:17 v1.3.0 Features Add an option to not prune non visited keys. Closes #2 - b1a64db , Roy Riojas , 01/08/2016 05:52:12 v1.2.4 Enhancements Expose the flat-cache instance - f34c557 , royriojas , 23/09/2015 20:26:33 v1.2.3 Build Scripts Changes update flat-cache dep - cc7b9ce , royriojas , 11/09/2015 18:04:44 v1.2.2 Build Scripts Changes Add changelogx section to package.json - a3916ff , royriojas , 11/09/2015 18:00:26 v1.2.1 Build Scripts Changes update flat-cache dep - e49b0d4 , royriojas , 11/09/2015 17:55:25 Other changes Update dependencies Replaced lodash.assign with smaller object-assign Fixed tests for windows - 0ad3000 , Bogdan Chadkin , 11/09/2015 17:44:18 v1.2.0 Features analyzeFiles now returns also the files that were removed - 6ac2431 , royriojas , 04/09/2015 14:40:53 v1.1.1 Features Add method to check if a file hasChanged - 3640e2b , Roy Riojas , 30/08/2015 07:33:32 v1.1.0 Features Create the cache directly from a file path - a23de61 , Roy Riojas , 30/08/2015 06:41:33 Add a method to remove an entry from the filecache - 7af29fc , Roy Riojas , 03/03/2015 02:25:32 cache module finished - 1f95544 , Roy Riojas , 02/03/2015 04:08:08 Build Scripts Changes set the version for the first release - 7472eaa , Roy Riojas , 02/03/2015 04:29:54 Documentation Updated documentation - 557358f , Roy Riojas , 02/03/2015 04:29:29 Other changes Initial commit - 3d5f42b , Roy Riojas , 02/03/2015 00:58:29","title":"file-entry-cache - Changelog"},{"location":"node_modules/file-entry-cache/changelog/#file-entry-cache-changelog","text":"","title":"file-entry-cache - Changelog"},{"location":"node_modules/file-entry-cache/changelog/#v501","text":"Bug Fixes Fix missing checksum comparison from reconcile since now we use mtime and size by default. - e858aa9 , Roy Riojas , 04/02/2019 12:30:22 Old mode using checkSum can still be used by passing the useCheckSum parameter to the create or createFromFile methods.","title":"v5.0.1"},{"location":"node_modules/file-entry-cache/changelog/#v500","text":"Refactoring Make checksum comparison optional - b0f9ae0 , Roy Riojas , 03/02/2019 21:17:39 To determine if a file has changed we were using the checksum in the newer versions, but eslint was relying on the old behavior where we use the mtime and file size to determine if a file changed. That's why we decided to make the checksum check optional. To use it: // to make the cache use the checkSum check do the following: var fCache = fileEntryCache . create ( cacheName , dir , useCheckSum ); // pass the third parameter as true var otherCache = fileEntryCache . createFromFile ( cacheName , useCheckSum ); // pass the second parameter as true","title":"v5.0.0"},{"location":"node_modules/file-entry-cache/changelog/#v400","text":"Build Scripts Changes use the same node versions eslint use - 563cfee , Roy Riojas , 08/01/2019 23:29:34 Other changes Remove object-assign dependency. - d0f598e , Corey Farrell , 08/01/2019 23:09:51 node.js >=4 is required so object-assign is no longer needed, the native Object.assign can be used instead.","title":"v4.0.0"},{"location":"node_modules/file-entry-cache/changelog/#v300","text":"Build Scripts Changes Upgrade flat-cache dep to latest - 078b0df , Roy Riojas , 08/01/2019 21:54:40 Commit new package-lock.json file - 245fe62 , Roy Riojas , 08/01/2019 20:56:21 Refactoring add eslintrc file - 6dd32d8 , Roy Riojas , 22/08/2018 11:58:17 Other changes Move variable definition out of else block - ea05441 , Zakhar Shapurau , 25/04/2017 13:19:00 Add script and cmd to test hash/checksum performance - 7f60e0a , Zakhar Shapurau , 24/04/2017 16:43:12 Calculate md5 hexdigest instead of Adler-32 checksum - f9e5c69 , Zakhar Shapurau , 24/04/2017 16:43:12 How to reproduce - 4edc2dc , Zakhar Shapurau , 24/04/2017 15:49:32 Test handling of removed files - 09d9ec5 , Zakhar Shapurau , 19/04/2017 21:51:50 Use content checksum instead of mtime and fsize - 343b340 , Zakhar Shapurau , 19/04/2017 21:51:47 Revert Revert \"How to reproduce\" - 4b4e54a , Zakhar Shapurau , 25/04/2017 13:15:36 This reverts commit 4edc2dcec01574247bfc2e0a2fe26527332b7df3.","title":"v3.0.0"},{"location":"node_modules/file-entry-cache/changelog/#v200","text":"Features do not persist and prune removed files from cache. Relates to #2 - 408374d , Roy Riojas , 16/08/2016 15:47:58","title":"v2.0.0"},{"location":"node_modules/file-entry-cache/changelog/#v131","text":"Build Scripts Changes remove older node version - 0a26ac4 , Roy Riojas , 01/08/2016 06:09:17","title":"v1.3.1"},{"location":"node_modules/file-entry-cache/changelog/#v130","text":"Features Add an option to not prune non visited keys. Closes #2 - b1a64db , Roy Riojas , 01/08/2016 05:52:12","title":"v1.3.0"},{"location":"node_modules/file-entry-cache/changelog/#v124","text":"Enhancements Expose the flat-cache instance - f34c557 , royriojas , 23/09/2015 20:26:33","title":"v1.2.4"},{"location":"node_modules/file-entry-cache/changelog/#v123","text":"Build Scripts Changes update flat-cache dep - cc7b9ce , royriojas , 11/09/2015 18:04:44","title":"v1.2.3"},{"location":"node_modules/file-entry-cache/changelog/#v122","text":"Build Scripts Changes Add changelogx section to package.json - a3916ff , royriojas , 11/09/2015 18:00:26","title":"v1.2.2"},{"location":"node_modules/file-entry-cache/changelog/#v121","text":"Build Scripts Changes update flat-cache dep - e49b0d4 , royriojas , 11/09/2015 17:55:25 Other changes Update dependencies Replaced lodash.assign with smaller object-assign Fixed tests for windows - 0ad3000 , Bogdan Chadkin , 11/09/2015 17:44:18","title":"v1.2.1"},{"location":"node_modules/file-entry-cache/changelog/#v120","text":"Features analyzeFiles now returns also the files that were removed - 6ac2431 , royriojas , 04/09/2015 14:40:53","title":"v1.2.0"},{"location":"node_modules/file-entry-cache/changelog/#v111","text":"Features Add method to check if a file hasChanged - 3640e2b , Roy Riojas , 30/08/2015 07:33:32","title":"v1.1.1"},{"location":"node_modules/file-entry-cache/changelog/#v110","text":"Features Create the cache directly from a file path - a23de61 , Roy Riojas , 30/08/2015 06:41:33 Add a method to remove an entry from the filecache - 7af29fc , Roy Riojas , 03/03/2015 02:25:32 cache module finished - 1f95544 , Roy Riojas , 02/03/2015 04:08:08 Build Scripts Changes set the version for the first release - 7472eaa , Roy Riojas , 02/03/2015 04:29:54 Documentation Updated documentation - 557358f , Roy Riojas , 02/03/2015 04:29:29 Other changes Initial commit - 3d5f42b , Roy Riojas , 02/03/2015 00:58:29","title":"v1.1.0"},{"location":"node_modules/find-up/readme/","text":"find-up Find a file by walking up parent directories Install $ npm install --save find-up Usage / \u2514\u2500\u2500 Users \u2514\u2500\u2500 sindresorhus \u251c\u2500\u2500 unicorn.png \u2514\u2500\u2500 foo \u2514\u2500\u2500 bar \u251c\u2500\u2500 baz \u2514\u2500\u2500 example.js // example.js const findUp = require ( 'find-up' ); findUp ( 'unicorn.png' ). then ( filepath => { console . log ( filepath ); //=> '/Users/sindresorhus/unicorn.png' }); findUp ([ 'rainbow.png' , 'unicorn.png' ]). then ( filepath => { console . log ( filepath ); //=> '/Users/sindresorhus/unicorn.png' }); API findUp(filename, [options]) Returns a Promise for the filepath or null . findUp([filenameA, filenameB], [options]) Returns a Promise for the first filepath found (by respecting the order) or null . findUp.sync(filename, [options]) Returns a filepath or null . findUp.sync([filenameA, filenameB], [options]) Returns the first filepath found (by respecting the order) or null . filename Type: string Filename of the file to find. options cwd Type: string Default: process.cwd() Directory to start from. Related find-up-cli - CLI for this module pkg-up - Find the closest package.json file pkg-dir - Find the root directory of an npm package License MIT \u00a9 Sindre Sorhus","title":"find-up [![Build Status: Linux and macOS](https://travis-ci.org/sindresorhus/find-up.svg?branch=master)](https://travis-ci.org/sindresorhus/find-up) [![Build Status: Windows](https://ci.appveyor.com/api/projects/status/l0cyjmvh5lq72vq2/branch/master?svg=true)](https://ci.appveyor.com/project/sindresorhus/find-up/branch/master)"},{"location":"node_modules/find-up/readme/#find-up","text":"Find a file by walking up parent directories","title":"find-up"},{"location":"node_modules/find-up/readme/#install","text":"$ npm install --save find-up","title":"Install"},{"location":"node_modules/find-up/readme/#usage","text":"/ \u2514\u2500\u2500 Users \u2514\u2500\u2500 sindresorhus \u251c\u2500\u2500 unicorn.png \u2514\u2500\u2500 foo \u2514\u2500\u2500 bar \u251c\u2500\u2500 baz \u2514\u2500\u2500 example.js // example.js const findUp = require ( 'find-up' ); findUp ( 'unicorn.png' ). then ( filepath => { console . log ( filepath ); //=> '/Users/sindresorhus/unicorn.png' }); findUp ([ 'rainbow.png' , 'unicorn.png' ]). then ( filepath => { console . log ( filepath ); //=> '/Users/sindresorhus/unicorn.png' });","title":"Usage"},{"location":"node_modules/find-up/readme/#api","text":"","title":"API"},{"location":"node_modules/find-up/readme/#findupfilename-options","text":"Returns a Promise for the filepath or null .","title":"findUp(filename, [options])"},{"location":"node_modules/find-up/readme/#findupfilenamea-filenameb-options","text":"Returns a Promise for the first filepath found (by respecting the order) or null .","title":"findUp([filenameA, filenameB], [options])"},{"location":"node_modules/find-up/readme/#findupsyncfilename-options","text":"Returns a filepath or null .","title":"findUp.sync(filename, [options])"},{"location":"node_modules/find-up/readme/#findupsyncfilenamea-filenameb-options","text":"Returns the first filepath found (by respecting the order) or null .","title":"findUp.sync([filenameA, filenameB], [options])"},{"location":"node_modules/find-up/readme/#filename","text":"Type: string Filename of the file to find.","title":"filename"},{"location":"node_modules/find-up/readme/#options","text":"","title":"options"},{"location":"node_modules/find-up/readme/#cwd","text":"Type: string Default: process.cwd() Directory to start from.","title":"cwd"},{"location":"node_modules/find-up/readme/#related","text":"find-up-cli - CLI for this module pkg-up - Find the closest package.json file pkg-dir - Find the root directory of an npm package","title":"Related"},{"location":"node_modules/find-up/readme/#license","text":"MIT \u00a9 Sindre Sorhus","title":"License"},{"location":"node_modules/flat-cache/","text":"flat-cache A stupidly simple key/value storage using files to persist the data install npm i --save flat-cache Usage var flatCache = require ( 'flat-cache' ) // loads the cache, if one does not exists for the given // Id a new one will be prepared to be created var cache = flatCache . load ( 'cacheId' ); // sets a key on the cache cache . setKey ( 'key' , { foo : 'var' }); // get a key from the cache cache . getKey ( 'key' ) // { foo: 'var' } // fetch the entire persisted object cache . all () // { 'key': { foo: 'var' } } // remove a key cache . removeKey ( 'key' ); // removes a key from the cache // save it to disk cache . save (); // very important, if you don't save no changes will be persisted. // cache.save( true /* noPrune */) // can be used to prevent the removal of non visited keys // loads the cache from a given directory, if one does // not exists for the given Id a new one will be prepared to be created var cache = flatCache . load ( 'cacheId' , path . resolve ( './path/to/folder' )); // The following methods are useful to clear the cache // delete a given cache flatCache . clearCacheById ( 'cacheId' ) // removes the cacheId document if one exists. // delete all cache flatCache . clearAll (); // remove the cache directory Motivation for this module I needed a super simple and dumb in-memory cache with optional disk persistance in order to make a script that will beutify files with esformatter only execute on the files that were changed since the last run. To make that possible we need to store the fileSize and modificationTime of the files. So a simple key/value storage was needed and Bam! this module was born. Important notes If no directory is especified when the load method is called, a folder named .cache will be created inside the module directory when cache.save is called. If you're committing your node_modules to any vcs, you might want to ignore the default .cache folder, or specify a custom directory. The values set on the keys of the cache should be stringify-able ones, meaning no circular references All the changes to the cache state are done to memory I could have used a timer or Object.observe to deliver the changes to disk, but I wanted to keep this module intentionally dumb and simple Non visited keys are removed when cache.save() is called. If this is not desired, you can pass true to the save call like: cache.save( true /* noPrune */ ) . License MIT Changelog changelog","title":"flat-cache"},{"location":"node_modules/flat-cache/#flat-cache","text":"A stupidly simple key/value storage using files to persist the data","title":"flat-cache"},{"location":"node_modules/flat-cache/#install","text":"npm i --save flat-cache","title":"install"},{"location":"node_modules/flat-cache/#usage","text":"var flatCache = require ( 'flat-cache' ) // loads the cache, if one does not exists for the given // Id a new one will be prepared to be created var cache = flatCache . load ( 'cacheId' ); // sets a key on the cache cache . setKey ( 'key' , { foo : 'var' }); // get a key from the cache cache . getKey ( 'key' ) // { foo: 'var' } // fetch the entire persisted object cache . all () // { 'key': { foo: 'var' } } // remove a key cache . removeKey ( 'key' ); // removes a key from the cache // save it to disk cache . save (); // very important, if you don't save no changes will be persisted. // cache.save( true /* noPrune */) // can be used to prevent the removal of non visited keys // loads the cache from a given directory, if one does // not exists for the given Id a new one will be prepared to be created var cache = flatCache . load ( 'cacheId' , path . resolve ( './path/to/folder' )); // The following methods are useful to clear the cache // delete a given cache flatCache . clearCacheById ( 'cacheId' ) // removes the cacheId document if one exists. // delete all cache flatCache . clearAll (); // remove the cache directory","title":"Usage"},{"location":"node_modules/flat-cache/#motivation-for-this-module","text":"I needed a super simple and dumb in-memory cache with optional disk persistance in order to make a script that will beutify files with esformatter only execute on the files that were changed since the last run. To make that possible we need to store the fileSize and modificationTime of the files. So a simple key/value storage was needed and Bam! this module was born.","title":"Motivation for this module"},{"location":"node_modules/flat-cache/#important-notes","text":"If no directory is especified when the load method is called, a folder named .cache will be created inside the module directory when cache.save is called. If you're committing your node_modules to any vcs, you might want to ignore the default .cache folder, or specify a custom directory. The values set on the keys of the cache should be stringify-able ones, meaning no circular references All the changes to the cache state are done to memory I could have used a timer or Object.observe to deliver the changes to disk, but I wanted to keep this module intentionally dumb and simple Non visited keys are removed when cache.save() is called. If this is not desired, you can pass true to the save call like: cache.save( true /* noPrune */ ) .","title":"Important notes"},{"location":"node_modules/flat-cache/#license","text":"MIT","title":"License"},{"location":"node_modules/flat-cache/#changelog","text":"changelog","title":"Changelog"},{"location":"node_modules/flat-cache/changelog/","text":"flat-cache - Changelog v2.0.1 Refactoring upgrade node modules to latest versions - 6402ed3 , Roy Riojas , 08/01/2019 21:47:05 v2.0.0 Bug Fixes upgrade package.json lock file - 8d21c7b , Roy Riojas , 08/01/2019 20:03:13 Use the same versions of node_js that eslint use - 8d23379 , Roy Riojas , 08/01/2019 19:25:11 Other changes Replace circular-json with flatted ( #36 ) - b93aced , C. K. Tang , 08/01/2019 20:03:01 Change JSON parser from circular-json to flatted & 1 more changes ( #37 ) - 745e65a , Andy Chen , 08/01/2019 19:17:20 Change JSON parser from circular-json to flatted & 1 more changes Change JSON parser from circular-json Audited 2 vulnerabilities Update package.json Update Engine require There's a bunch of dependencies in this pkg requires node >=4, so I changed it to 4 Remove and add node versions I have seen this pkg is not available with node 0.12 so I removed it I have added a popular used LTS version of node - 10 v1.3.4 Refactoring Add del.js and utils.js to the list of files to be beautified - 9d0ca9b , Roy Riojas , 14/11/2018 15:19:02 v1.3.3 Refactoring Make sure package-lock.json is up to date - a7d2598 , Roy Riojas , 14/11/2018 14:36:08 Other changes Removed the need for del ( #33 ) - c429012 , S. Gilroy , 13/11/2018 16:56:37 Removed the need for del Removed the need for del as newer versions have broken backwards compatibility. del mainly uses rimraf for deleting folders and files, replaceing it with rimraf only is a minimal change. Disable glob on rimraf calls Added glob disable to wrong call Wrapped rimraf to simplify solution v1.3.2 Refactoring remove yarn.lock file - 704c6c4 , Roy Riojas , 07/11/2018 18:41:08 undefined replace circular-json with flatted ( #23 )\" - db12d74 , Roy Riojas , 07/11/2018 18:40:39 This reverts commit 00f689277a75e85fef28e6a048fad227afc525e6. v1.3.1 Refactoring upgrade deps to remove some security warnings - f405719 , Roy Riojas , 06/11/2018 15:07:31 Bug Fixes replace circular-json with flatted ( #23 ) - 00f6892 , Terry , 05/11/2018 21:44:16 undefined update del to v3.0.0 ( #26 ) - d42883f , Patrick Silva , 03/11/2018 03:00:44 Closes #25 v1.3.0 Other changes Added #all method ( #16 ) - 12293be , Ozair Patel , 25/09/2017 16:46:38 Added #all method Added #all method test Updated readme Added yarn.lock Added more keys for #all test Beautified file fix changelog title style ( #14 ) - af8338a , \u524d\u7aef\u5c0f\u6b66 , 19/12/2016 23:34:48 v1.2.2 Bug Fixes Do not crash if cache file is invalid JSON. ( #13 ) - 87beaa6 , Roy Riojas , 19/12/2016 21:03:35 Fixes #12 Not sure under which situations a cache file might exist that does not contain a valid JSON structure, but just in case to cover the possibility of this happening a try catch block has been added If the cache is somehow not valid the cache will be discarded an a a new cache will be stored instead - Other changes - Added travis ci support for modern node versions ( #11 ) - 1c2b1f7 , Amila Welihinda , 11/11/2016 02:47:52 Bumping circular-son version ( #10 ) - 4d5e861 , Andrea Giammarchi , 02/08/2016 09:13:52 As mentioned in https://github.com/WebReflection/circular-json/issues/25 circular-json wan't rightly implementing the license field. Latest version bump changed only that bit so that ESLint should now be happy. v1.2.1 Bug Fixes Add missing utils.js file to the package. closes #8 - ec10cf2 , Roy Riojas , 01/08/2016 04:18:57 v1.2.0 Documentation Add documentation about noPrune option - 23e11f9 , Roy Riojas , 01/08/2016 04:06:49 v1.1.0 Features Add noPrune option to cache.save() method. closes #7 - 2c8016a , Roy Riojas , 01/08/2016 04:00:29 Add json read and write utility based on circular-json - c31081e , Jean Ponchon , 28/07/2016 10:58:17 Bug Fixes Remove UTF16 BOM stripping - 4a41e22 , Jean Ponchon , 29/07/2016 04:18:06 Since we control both writing and reading of JSON stream, there no needs to handle unicode BOM. - Use circular-json to handle circular references (fix #5 ) - cd7aeed , Jean Ponchon , 25/07/2016 13:11:59 Tests Related fixes Add missing file from eslint test - d6fa3c3 , Jean Ponchon , 29/07/2016 04:15:51 Add test for circular json serialization / deserialization - 07d2ddd , Jean Ponchon , 28/07/2016 10:59:36 Refactoring Remove unused read-json-sync - 2be1c24 , Jean Ponchon , 28/07/2016 10:59:18 Build Scripts Changes travis tests on 0.12 and 4x - 3a613fd , royriojas , 15/11/2015 17:34:40 add eslint-fix task - fd29e52 , royriojas , 01/11/2015 18:04:08 make sure the test script also verify beautification and linting of files before running tests - e94e176 , royriojas , 01/11/2015 14:54:48 Other changes add clearAll for cacheDir - 97383d9 , xieyaowu , 31/10/2015 23:02:18 v1.0.9 Bug Fixes wrong default values for changelogx user repo name - 7bb52d1 , royriojas , 11/09/2015 17:59:30 v1.0.8 Build Scripts Changes test against node 4 - c395b66 , royriojas , 11/09/2015 17:51:39 v1.0.7 Other changes Move dependencies into devDep - 7e47099 , Bogdan Chadkin , 11/09/2015 17:10:57 Documentation Add missing changelog link - f51197a , royriojas , 11/09/2015 16:48:05 v1.0.6 Build Scripts Changes Add helpers/code check scripts - bdb82f3 , royriojas , 11/09/2015 16:44:31 v1.0.5 Documentation better description for the module - 436817f , royriojas , 11/09/2015 16:35:33 Other changes Update dependencies - be88aa3 , Bogdan Chadkin , 11/09/2015 15:47:41 v1.0.11 Features Add noPrune option to cache.save() method. closes #7 - 2c8016a , Roy Riojas , 01/08/2016 04:00:29 Add json read and write utility based on circular-json - c31081e , Jean Ponchon , 28/07/2016 10:58:17 Bug Fixes Remove UTF16 BOM stripping - 4a41e22 , Jean Ponchon , 29/07/2016 04:18:06 Since we control both writing and reading of JSON stream, there no needs to handle unicode BOM. - Use circular-json to handle circular references (fix #5 ) - cd7aeed , Jean Ponchon , 25/07/2016 13:11:59 Tests Related fixes Add missing file from eslint test - d6fa3c3 , Jean Ponchon , 29/07/2016 04:15:51 Add test for circular json serialization / deserialization - 07d2ddd , Jean Ponchon , 28/07/2016 10:59:36 Refactoring Remove unused read-json-sync - 2be1c24 , Jean Ponchon , 28/07/2016 10:59:18 Build Scripts Changes travis tests on 0.12 and 4x - 3a613fd , royriojas , 15/11/2015 17:34:40 v1.0.10 Build Scripts Changes add eslint-fix task - fd29e52 , royriojas , 01/11/2015 18:04:08 make sure the test script also verify beautification and linting of files before running tests - e94e176 , royriojas , 01/11/2015 14:54:48 test against node 4 - c395b66 , royriojas , 11/09/2015 17:51:39 Add helpers/code check scripts - bdb82f3 , royriojas , 11/09/2015 16:44:31 Other changes add clearAll for cacheDir - 97383d9 , xieyaowu , 31/10/2015 23:02:18 Move dependencies into devDep - 7e47099 , Bogdan Chadkin , 11/09/2015 17:10:57 Update dependencies - be88aa3 , Bogdan Chadkin , 11/09/2015 15:47:41 Bug Fixes wrong default values for changelogx user repo name - 7bb52d1 , royriojas , 11/09/2015 17:59:30 Documentation Add missing changelog link - f51197a , royriojas , 11/09/2015 16:48:05 better description for the module - 436817f , royriojas , 11/09/2015 16:35:33 Add documentation about clearAll and clearCacheById - 13947c1 , Roy Riojas , 02/03/2015 02:44:05 Refactoring load a cache file using the full filepath - b8f68c2 , Roy Riojas , 30/08/2015 06:19:14 Features Add methods to remove the cache documents created - af40443 , Roy Riojas , 02/03/2015 02:39:27 v1.0.1 Other changes Update README.md - c2b6805 , Roy Riojas , 26/02/2015 07:28:07 v1.0.0 Refactoring flat-cache v.1.0.0 - c984274 , Roy Riojas , 26/02/2015 07:11:50 Other changes Initial commit - d43cccf , Roy Riojas , 26/02/2015 04:12:16","title":"flat-cache - Changelog"},{"location":"node_modules/flat-cache/changelog/#flat-cache-changelog","text":"","title":"flat-cache - Changelog"},{"location":"node_modules/flat-cache/changelog/#v201","text":"Refactoring upgrade node modules to latest versions - 6402ed3 , Roy Riojas , 08/01/2019 21:47:05","title":"v2.0.1"},{"location":"node_modules/flat-cache/changelog/#v200","text":"Bug Fixes upgrade package.json lock file - 8d21c7b , Roy Riojas , 08/01/2019 20:03:13 Use the same versions of node_js that eslint use - 8d23379 , Roy Riojas , 08/01/2019 19:25:11 Other changes Replace circular-json with flatted ( #36 ) - b93aced , C. K. Tang , 08/01/2019 20:03:01 Change JSON parser from circular-json to flatted & 1 more changes ( #37 ) - 745e65a , Andy Chen , 08/01/2019 19:17:20 Change JSON parser from circular-json to flatted & 1 more changes Change JSON parser from circular-json Audited 2 vulnerabilities Update package.json Update Engine require There's a bunch of dependencies in this pkg requires node >=4, so I changed it to 4 Remove and add node versions I have seen this pkg is not available with node 0.12 so I removed it I have added a popular used LTS version of node - 10","title":"v2.0.0"},{"location":"node_modules/flat-cache/changelog/#v134","text":"Refactoring Add del.js and utils.js to the list of files to be beautified - 9d0ca9b , Roy Riojas , 14/11/2018 15:19:02","title":"v1.3.4"},{"location":"node_modules/flat-cache/changelog/#v133","text":"Refactoring Make sure package-lock.json is up to date - a7d2598 , Roy Riojas , 14/11/2018 14:36:08 Other changes Removed the need for del ( #33 ) - c429012 , S. Gilroy , 13/11/2018 16:56:37 Removed the need for del Removed the need for del as newer versions have broken backwards compatibility. del mainly uses rimraf for deleting folders and files, replaceing it with rimraf only is a minimal change. Disable glob on rimraf calls Added glob disable to wrong call Wrapped rimraf to simplify solution","title":"v1.3.3"},{"location":"node_modules/flat-cache/changelog/#v132","text":"Refactoring remove yarn.lock file - 704c6c4 , Roy Riojas , 07/11/2018 18:41:08 undefined replace circular-json with flatted ( #23 )\" - db12d74 , Roy Riojas , 07/11/2018 18:40:39 This reverts commit 00f689277a75e85fef28e6a048fad227afc525e6.","title":"v1.3.2"},{"location":"node_modules/flat-cache/changelog/#v131","text":"Refactoring upgrade deps to remove some security warnings - f405719 , Roy Riojas , 06/11/2018 15:07:31 Bug Fixes replace circular-json with flatted ( #23 ) - 00f6892 , Terry , 05/11/2018 21:44:16 undefined update del to v3.0.0 ( #26 ) - d42883f , Patrick Silva , 03/11/2018 03:00:44 Closes #25","title":"v1.3.1"},{"location":"node_modules/flat-cache/changelog/#v130","text":"Other changes Added #all method ( #16 ) - 12293be , Ozair Patel , 25/09/2017 16:46:38 Added #all method Added #all method test Updated readme Added yarn.lock Added more keys for #all test Beautified file fix changelog title style ( #14 ) - af8338a , \u524d\u7aef\u5c0f\u6b66 , 19/12/2016 23:34:48","title":"v1.3.0"},{"location":"node_modules/flat-cache/changelog/#v122","text":"Bug Fixes Do not crash if cache file is invalid JSON. ( #13 ) - 87beaa6 , Roy Riojas , 19/12/2016 21:03:35 Fixes #12 Not sure under which situations a cache file might exist that does not contain a valid JSON structure, but just in case to cover the possibility of this happening a try catch block has been added If the cache is somehow not valid the cache will be discarded an a a new cache will be stored instead - Other changes - Added travis ci support for modern node versions ( #11 ) - 1c2b1f7 , Amila Welihinda , 11/11/2016 02:47:52 Bumping circular-son version ( #10 ) - 4d5e861 , Andrea Giammarchi , 02/08/2016 09:13:52 As mentioned in https://github.com/WebReflection/circular-json/issues/25 circular-json wan't rightly implementing the license field. Latest version bump changed only that bit so that ESLint should now be happy.","title":"v1.2.2"},{"location":"node_modules/flat-cache/changelog/#v121","text":"Bug Fixes Add missing utils.js file to the package. closes #8 - ec10cf2 , Roy Riojas , 01/08/2016 04:18:57","title":"v1.2.1"},{"location":"node_modules/flat-cache/changelog/#v120","text":"Documentation Add documentation about noPrune option - 23e11f9 , Roy Riojas , 01/08/2016 04:06:49","title":"v1.2.0"},{"location":"node_modules/flat-cache/changelog/#v110","text":"Features Add noPrune option to cache.save() method. closes #7 - 2c8016a , Roy Riojas , 01/08/2016 04:00:29 Add json read and write utility based on circular-json - c31081e , Jean Ponchon , 28/07/2016 10:58:17 Bug Fixes Remove UTF16 BOM stripping - 4a41e22 , Jean Ponchon , 29/07/2016 04:18:06 Since we control both writing and reading of JSON stream, there no needs to handle unicode BOM. - Use circular-json to handle circular references (fix #5 ) - cd7aeed , Jean Ponchon , 25/07/2016 13:11:59 Tests Related fixes Add missing file from eslint test - d6fa3c3 , Jean Ponchon , 29/07/2016 04:15:51 Add test for circular json serialization / deserialization - 07d2ddd , Jean Ponchon , 28/07/2016 10:59:36 Refactoring Remove unused read-json-sync - 2be1c24 , Jean Ponchon , 28/07/2016 10:59:18 Build Scripts Changes travis tests on 0.12 and 4x - 3a613fd , royriojas , 15/11/2015 17:34:40 add eslint-fix task - fd29e52 , royriojas , 01/11/2015 18:04:08 make sure the test script also verify beautification and linting of files before running tests - e94e176 , royriojas , 01/11/2015 14:54:48 Other changes add clearAll for cacheDir - 97383d9 , xieyaowu , 31/10/2015 23:02:18","title":"v1.1.0"},{"location":"node_modules/flat-cache/changelog/#v109","text":"Bug Fixes wrong default values for changelogx user repo name - 7bb52d1 , royriojas , 11/09/2015 17:59:30","title":"v1.0.9"},{"location":"node_modules/flat-cache/changelog/#v108","text":"Build Scripts Changes test against node 4 - c395b66 , royriojas , 11/09/2015 17:51:39","title":"v1.0.8"},{"location":"node_modules/flat-cache/changelog/#v107","text":"Other changes Move dependencies into devDep - 7e47099 , Bogdan Chadkin , 11/09/2015 17:10:57 Documentation Add missing changelog link - f51197a , royriojas , 11/09/2015 16:48:05","title":"v1.0.7"},{"location":"node_modules/flat-cache/changelog/#v106","text":"Build Scripts Changes Add helpers/code check scripts - bdb82f3 , royriojas , 11/09/2015 16:44:31","title":"v1.0.6"},{"location":"node_modules/flat-cache/changelog/#v105","text":"Documentation better description for the module - 436817f , royriojas , 11/09/2015 16:35:33 Other changes Update dependencies - be88aa3 , Bogdan Chadkin , 11/09/2015 15:47:41","title":"v1.0.5"},{"location":"node_modules/flat-cache/changelog/#v1011","text":"Features Add noPrune option to cache.save() method. closes #7 - 2c8016a , Roy Riojas , 01/08/2016 04:00:29 Add json read and write utility based on circular-json - c31081e , Jean Ponchon , 28/07/2016 10:58:17 Bug Fixes Remove UTF16 BOM stripping - 4a41e22 , Jean Ponchon , 29/07/2016 04:18:06 Since we control both writing and reading of JSON stream, there no needs to handle unicode BOM. - Use circular-json to handle circular references (fix #5 ) - cd7aeed , Jean Ponchon , 25/07/2016 13:11:59 Tests Related fixes Add missing file from eslint test - d6fa3c3 , Jean Ponchon , 29/07/2016 04:15:51 Add test for circular json serialization / deserialization - 07d2ddd , Jean Ponchon , 28/07/2016 10:59:36 Refactoring Remove unused read-json-sync - 2be1c24 , Jean Ponchon , 28/07/2016 10:59:18 Build Scripts Changes travis tests on 0.12 and 4x - 3a613fd , royriojas , 15/11/2015 17:34:40","title":"v1.0.11"},{"location":"node_modules/flat-cache/changelog/#v1010","text":"Build Scripts Changes add eslint-fix task - fd29e52 , royriojas , 01/11/2015 18:04:08 make sure the test script also verify beautification and linting of files before running tests - e94e176 , royriojas , 01/11/2015 14:54:48 test against node 4 - c395b66 , royriojas , 11/09/2015 17:51:39 Add helpers/code check scripts - bdb82f3 , royriojas , 11/09/2015 16:44:31 Other changes add clearAll for cacheDir - 97383d9 , xieyaowu , 31/10/2015 23:02:18 Move dependencies into devDep - 7e47099 , Bogdan Chadkin , 11/09/2015 17:10:57 Update dependencies - be88aa3 , Bogdan Chadkin , 11/09/2015 15:47:41 Bug Fixes wrong default values for changelogx user repo name - 7bb52d1 , royriojas , 11/09/2015 17:59:30 Documentation Add missing changelog link - f51197a , royriojas , 11/09/2015 16:48:05 better description for the module - 436817f , royriojas , 11/09/2015 16:35:33 Add documentation about clearAll and clearCacheById - 13947c1 , Roy Riojas , 02/03/2015 02:44:05 Refactoring load a cache file using the full filepath - b8f68c2 , Roy Riojas , 30/08/2015 06:19:14 Features Add methods to remove the cache documents created - af40443 , Roy Riojas , 02/03/2015 02:39:27","title":"v1.0.10"},{"location":"node_modules/flat-cache/changelog/#v101","text":"Other changes Update README.md - c2b6805 , Roy Riojas , 26/02/2015 07:28:07","title":"v1.0.1"},{"location":"node_modules/flat-cache/changelog/#v100","text":"Refactoring flat-cache v.1.0.0 - c984274 , Roy Riojas , 26/02/2015 07:11:50 Other changes Initial commit - d43cccf , Roy Riojas , 26/02/2015 04:12:16","title":"v1.0.0"},{"location":"node_modules/flatted/","text":"flatted A super light (0.5K) and fast circular JSON parser, directly from the creator of CircularJSON . npm i flatted Usable via CDN or as regular module. // ESM import { parse , stringify } from 'flatted/esm' ; // CJS const { parse , stringify } = require ( 'flatted/cjs' ); const a = [{}]; a [ 0 ]. a = a ; a . push ( a ); stringify ( a ); // [[\"1\",\"0\"],{\"a\":\"0\"}] Flatted VS JSON As it is for every other specialized format capable of serializing and deserializing circular data, you should never JSON.parse(Flatted.stringify(data)) , and you should never Flatted.parse(JSON.stringify(data)) . The only way this could work is to Flatted.parse(Flatted.stringify(data)) , as it is also for CircularJSON or any other, otherwise there's no granted data integrity. Also please note this project serializes and deserializes only data compatible with JSON, so that sockets, or anything else with internal classes different from those allowed by JSON standard, won't be serialized and unserialized as expected. New in V1: Exact same JSON API Added a reviver parameter to .parse(string, reviver) and revive your own objects. Added a replacer and a space parameter to .stringify(object, replacer, space) for feature parity with JSON signature. Compatibility All ECMAScript engines compatible with Map , Set , Object.keys , and Array.prototype.reduce will work, even if polyfilled. How does it work ? While stringifying, all Objects, including Arrays, and strings, are flattened out and replaced as unique index. * Once parsed, all indexes will be replaced through the flattened collection. * represented as string to avoid conflicts with numbers // logic example var a = [{ one : 1 }, { two : '2' }]; a [ 0 ]. a = a ; // a is the main object, will be at index '0' // {one: 1} is the second object, index '1' // {two: '2'} the third, in '2', and it has a string // which will be found at index '3' Flatted . stringify ( a ); // [[\"1\",\"2\"],{\"one\":1,\"a\":\"0\"},{\"two\":\"3\"},\"2\"] // a[one,two] {one: 1, a} {two: '2'} '2'","title":"flatted"},{"location":"node_modules/flatted/#flatted","text":"A super light (0.5K) and fast circular JSON parser, directly from the creator of CircularJSON . npm i flatted Usable via CDN or as regular module. // ESM import { parse , stringify } from 'flatted/esm' ; // CJS const { parse , stringify } = require ( 'flatted/cjs' ); const a = [{}]; a [ 0 ]. a = a ; a . push ( a ); stringify ( a ); // [[\"1\",\"0\"],{\"a\":\"0\"}]","title":"flatted"},{"location":"node_modules/flatted/#flatted-vs-json","text":"As it is for every other specialized format capable of serializing and deserializing circular data, you should never JSON.parse(Flatted.stringify(data)) , and you should never Flatted.parse(JSON.stringify(data)) . The only way this could work is to Flatted.parse(Flatted.stringify(data)) , as it is also for CircularJSON or any other, otherwise there's no granted data integrity. Also please note this project serializes and deserializes only data compatible with JSON, so that sockets, or anything else with internal classes different from those allowed by JSON standard, won't be serialized and unserialized as expected.","title":"Flatted VS JSON"},{"location":"node_modules/flatted/#new-in-v1-exact-same-json-api","text":"Added a reviver parameter to .parse(string, reviver) and revive your own objects. Added a replacer and a space parameter to .stringify(object, replacer, space) for feature parity with JSON signature.","title":"New in V1: Exact same JSON API"},{"location":"node_modules/flatted/#compatibility","text":"All ECMAScript engines compatible with Map , Set , Object.keys , and Array.prototype.reduce will work, even if polyfilled.","title":"Compatibility"},{"location":"node_modules/flatted/#how-does-it-work","text":"While stringifying, all Objects, including Arrays, and strings, are flattened out and replaced as unique index. * Once parsed, all indexes will be replaced through the flattened collection. * represented as string to avoid conflicts with numbers // logic example var a = [{ one : 1 }, { two : '2' }]; a [ 0 ]. a = a ; // a is the main object, will be at index '0' // {one: 1} is the second object, index '1' // {two: '2'} the third, in '2', and it has a string // which will be found at index '3' Flatted . stringify ( a ); // [[\"1\",\"2\"],{\"one\":1,\"a\":\"0\"},{\"two\":\"3\"},\"2\"] // a[one,two] {one: 1, a} {two: '2'} '2'","title":"How does it work ?"},{"location":"node_modules/flatted/SPECS/","text":"Flatted Specifications This document describes operations performed to produce, or parse, the flatted output. stringify(any) => flattedString The output is always an Array that contains at index 0 the given value. If the value is an Array or an Object , per each property value passed through the callback, return the value as is if it's not an Array , an Object , or a string . In case it's an Array , an Object , or a string , return the index as string , associated through a Map . Giving the following example: flatted . stringify ( 'a' ); // [\"a\"] flatted . stringify ([ 'a' ]); // [[\"1\"],\"a\"] flatted . stringify ([ 'a' , 1 , 'b' ]); // [[\"1\",1,\"2\"],\"a\",\"b\"] There is an input containing [array, \"a\", \"b\"] , where the array has indexes \"1\" and \"2\" as strings, indexes that point respectively at \"a\" and \"b\" within the input [array, \"a\", \"b\"] . The exact same happens for objects. flatted . stringify ( 'a' ); // [\"a\"] flatted . stringify ({ a : 'a' }); // [{\"a\":\"1\"},\"a\"] flatted . stringify ({ a : 'a' , n : 1 , b : 'b' }); // [{\"a\":\"1\",\"n\":1,\"b\":\"2\"},\"a\",\"b\"] Every object, string, or array, encountered during serialization will be stored once as stringified index. // per each property/value of the object/array if ( any == null || ! /object|string/ . test ( typeof any )) return any ; if ( ! map . has ( any )) { const index = String ( arr . length ); arr . push ( any ); map . set ( any , index ); } return map . get ( any ); This, performed before going through all properties, grants unique indexes per reference. The stringified indexes ensure there won't be conflicts with regularly stored numbers. parse(flattedString) => any Everything that is a string is wrapped as new String , but strings in the array, from index 1 on, is kept as regular string . const input = JSON . parse ( '[{\"a\":\"1\"},\"b\"]' , Strings ). map ( strings ); // convert strings primitives into String instances function Strings ( key , value ) { return typeof value === 'string' ? new String ( value ) : value ; } // converts String instances into strings primitives function strings ( value ) { return value instanceof String ? String ( value ) : value ; } The input array will have a regular string at index 1 , but its object at index 0 will have an instanceof String as .a property. That is the key to place back values from the rest of the array, so that per each property of the object at index 0 , if the value is an instanceof String, something not serializable via JSON, it means it can be used to retrieve the position of its value from the input array. If such value is an object and it hasn't been parsed yet, add it as parsed and go through all its properties/values. // outside any loop ... const parsed = new Set ; // ... per each property/value ... if ( value instanceof Primitive ) { const tmp = input [ parseInt ( value )]; if ( typeof tmp === 'object' && ! parsed . has ( tmp )) { parsed . add ( tmp ); output [ key ] = tmp ; if ( typeof tmp === 'object' && tmp != null ) { // perform this same logic per // each nested property/value ... } } else { output [ key ] = tmp ; } } else output [ key ] = tmp ; As summary, the whole logic is based on polluting the de-serialization with a kind of variable that is unexpected, hence secure to use as directive to retrieve an index with a value. The usage of a Map and a Set to flag known references/strings as visited/stored makes flatted a rock solid, fast, and compact, solution.","title":"Flatted Specifications"},{"location":"node_modules/flatted/SPECS/#flatted-specifications","text":"This document describes operations performed to produce, or parse, the flatted output.","title":"Flatted Specifications"},{"location":"node_modules/flatted/SPECS/#stringifyany-flattedstring","text":"The output is always an Array that contains at index 0 the given value. If the value is an Array or an Object , per each property value passed through the callback, return the value as is if it's not an Array , an Object , or a string . In case it's an Array , an Object , or a string , return the index as string , associated through a Map . Giving the following example: flatted . stringify ( 'a' ); // [\"a\"] flatted . stringify ([ 'a' ]); // [[\"1\"],\"a\"] flatted . stringify ([ 'a' , 1 , 'b' ]); // [[\"1\",1,\"2\"],\"a\",\"b\"] There is an input containing [array, \"a\", \"b\"] , where the array has indexes \"1\" and \"2\" as strings, indexes that point respectively at \"a\" and \"b\" within the input [array, \"a\", \"b\"] . The exact same happens for objects. flatted . stringify ( 'a' ); // [\"a\"] flatted . stringify ({ a : 'a' }); // [{\"a\":\"1\"},\"a\"] flatted . stringify ({ a : 'a' , n : 1 , b : 'b' }); // [{\"a\":\"1\",\"n\":1,\"b\":\"2\"},\"a\",\"b\"] Every object, string, or array, encountered during serialization will be stored once as stringified index. // per each property/value of the object/array if ( any == null || ! /object|string/ . test ( typeof any )) return any ; if ( ! map . has ( any )) { const index = String ( arr . length ); arr . push ( any ); map . set ( any , index ); } return map . get ( any ); This, performed before going through all properties, grants unique indexes per reference. The stringified indexes ensure there won't be conflicts with regularly stored numbers.","title":"stringify(any) =&gt; flattedString"},{"location":"node_modules/flatted/SPECS/#parseflattedstring-any","text":"Everything that is a string is wrapped as new String , but strings in the array, from index 1 on, is kept as regular string . const input = JSON . parse ( '[{\"a\":\"1\"},\"b\"]' , Strings ). map ( strings ); // convert strings primitives into String instances function Strings ( key , value ) { return typeof value === 'string' ? new String ( value ) : value ; } // converts String instances into strings primitives function strings ( value ) { return value instanceof String ? String ( value ) : value ; } The input array will have a regular string at index 1 , but its object at index 0 will have an instanceof String as .a property. That is the key to place back values from the rest of the array, so that per each property of the object at index 0 , if the value is an instanceof String, something not serializable via JSON, it means it can be used to retrieve the position of its value from the input array. If such value is an object and it hasn't been parsed yet, add it as parsed and go through all its properties/values. // outside any loop ... const parsed = new Set ; // ... per each property/value ... if ( value instanceof Primitive ) { const tmp = input [ parseInt ( value )]; if ( typeof tmp === 'object' && ! parsed . has ( tmp )) { parsed . add ( tmp ); output [ key ] = tmp ; if ( typeof tmp === 'object' && tmp != null ) { // perform this same logic per // each nested property/value ... } } else { output [ key ] = tmp ; } } else output [ key ] = tmp ; As summary, the whole logic is based on polluting the de-serialization with a kind of variable that is unexpected, hence secure to use as directive to retrieve an index with a value. The usage of a Map and a Set to flag known references/strings as visited/stored makes flatted a rock solid, fast, and compact, solution.","title":"parse(flattedString) =&gt; any"},{"location":"node_modules/format/Readme/","text":"format printf, sprintf, and vsprintf for JavaScript Installation npm install format The code works in browsers as well, you can copy these functions into your project or otherwise include them with your other JavaScript. Usage var format = require('format') , printf = format.printf , vsprintf = format.vsprintf // or if you want to keep it old school , sprintf = format // Print 'hello world' printf('%s world', 'hello') var what = 'life, the universe, and everything' format('%d is the answer to %s', 42, what) // => '42 is the answer to life, the universe, and everything' vsprintf('%d is the answer to %s', [42, what]) // => '42 is the answer to life, the universe, and everything' Supported format specifiers: b, c, d, f, o, s, x, and X. See man 3 printf or man 1 printf for details. Precision is supported for floating point numbers. License Copyright 2010 - 2014 Sami Samhuri sami@samhuri.net MIT license","title":"Readme"},{"location":"node_modules/format/Readme/#format","text":"printf, sprintf, and vsprintf for JavaScript","title":"format"},{"location":"node_modules/format/Readme/#installation","text":"npm install format The code works in browsers as well, you can copy these functions into your project or otherwise include them with your other JavaScript.","title":"Installation"},{"location":"node_modules/format/Readme/#usage","text":"var format = require('format') , printf = format.printf , vsprintf = format.vsprintf // or if you want to keep it old school , sprintf = format // Print 'hello world' printf('%s world', 'hello') var what = 'life, the universe, and everything' format('%d is the answer to %s', 42, what) // => '42 is the answer to life, the universe, and everything' vsprintf('%d is the answer to %s', [42, what]) // => '42 is the answer to life, the universe, and everything' Supported format specifiers: b, c, d, f, o, s, x, and X. See man 3 printf or man 1 printf for details. Precision is supported for floating point numbers.","title":"Usage"},{"location":"node_modules/format/Readme/#license","text":"Copyright 2010 - 2014 Sami Samhuri sami@samhuri.net MIT license","title":"License"},{"location":"node_modules/fs.realpath/","text":"fs.realpath A backwards-compatible fs.realpath for Node v6 and above In Node v6, the JavaScript implementation of fs.realpath was replaced with a faster (but less resilient) native implementation. That raises new and platform-specific errors and cannot handle long or excessively symlink-looping paths. This module handles those cases by detecting the new errors and falling back to the JavaScript implementation. On versions of Node prior to v6, it has no effect. USAGE var rp = require ( 'fs.realpath' ) // async version rp . realpath ( someLongAndLoopingPath , function ( er , real ) { // the ELOOP was handled, but it was a bit slower }) // sync version var real = rp . realpathSync ( someLongAndLoopingPath ) // monkeypatch at your own risk! // This replaces the fs.realpath/fs.realpathSync builtins rp . monkeypatch () // un-do the monkeypatching rp . unmonkeypatch ()","title":"fs.realpath"},{"location":"node_modules/fs.realpath/#fsrealpath","text":"A backwards-compatible fs.realpath for Node v6 and above In Node v6, the JavaScript implementation of fs.realpath was replaced with a faster (but less resilient) native implementation. That raises new and platform-specific errors and cannot handle long or excessively symlink-looping paths. This module handles those cases by detecting the new errors and falling back to the JavaScript implementation. On versions of Node prior to v6, it has no effect.","title":"fs.realpath"},{"location":"node_modules/fs.realpath/#usage","text":"var rp = require ( 'fs.realpath' ) // async version rp . realpath ( someLongAndLoopingPath , function ( er , real ) { // the ELOOP was handled, but it was a bit slower }) // sync version var real = rp . realpathSync ( someLongAndLoopingPath ) // monkeypatch at your own risk! // This replaces the fs.realpath/fs.realpathSync builtins rp . monkeypatch () // un-do the monkeypatching rp . unmonkeypatch ()","title":"USAGE"},{"location":"node_modules/function-bind/","text":"function-bind Implementation of function.prototype.bind Example I mainly do this for unit tests I run on phantomjs. PhantomJS does not have Function.prototype.bind :( Function . prototype . bind = require ( \"function-bind\" ) Installation npm install function-bind Contributors Raynos MIT Licenced","title":"function-bind"},{"location":"node_modules/function-bind/#function-bind","text":"Implementation of function.prototype.bind","title":"function-bind"},{"location":"node_modules/function-bind/#example","text":"I mainly do this for unit tests I run on phantomjs. PhantomJS does not have Function.prototype.bind :( Function . prototype . bind = require ( \"function-bind\" )","title":"Example"},{"location":"node_modules/function-bind/#installation","text":"npm install function-bind","title":"Installation"},{"location":"node_modules/function-bind/#contributors","text":"Raynos","title":"Contributors"},{"location":"node_modules/function-bind/#mit-licenced","text":"","title":"MIT Licenced"},{"location":"node_modules/get-intrinsic/","text":"get-intrinsic Get and robustly cache all JS language-level intrinsics at first require time. See the syntax described in the JS spec for reference. Example var GetIntrinsic = require ( 'get-intrinsic' ); var assert = require ( 'assert' ); // static methods assert . equal ( GetIntrinsic ( '%Math.pow%' ), Math . pow ); assert . equal ( Math . pow ( 2 , 3 ), 8 ); assert . equal ( GetIntrinsic ( '%Math.pow%' )( 2 , 3 ), 8 ); delete Math . pow ; assert . equal ( GetIntrinsic ( '%Math.pow%' )( 2 , 3 ), 8 ); // instance methods var arr = [ 1 ]; assert . equal ( GetIntrinsic ( '%Array.prototype.push%' ), Array . prototype . push ); assert . deepEqual ( arr , [ 1 ]); arr . push ( 2 ); assert . deepEqual ( arr , [ 1 , 2 ]); GetIntrinsic ( '%Array.prototype.push%' ). call ( arr , 3 ); assert . deepEqual ( arr , [ 1 , 2 , 3 ]); delete Array . prototype . push ; GetIntrinsic ( '%Array.prototype.push%' ). call ( arr , 4 ); assert . deepEqual ( arr , [ 1 , 2 , 3 , 4 ]); // missing features delete JSON . parse ; // to simulate a real intrinsic that is missing in the environment assert . throws (() => GetIntrinsic ( '%JSON.parse%' )); assert . equal ( undefined , GetIntrinsic ( '%JSON.parse%' , true )); Tests Simply clone the repo, npm install , and run npm test Security Please email @ljharb or see https://tidelift.com/security if you have a potential security vulnerability to report.","title":"get-intrinsic <sup>[![Version Badge][npm-version-svg]][package-url]</sup>"},{"location":"node_modules/get-intrinsic/#get-intrinsic","text":"Get and robustly cache all JS language-level intrinsics at first require time. See the syntax described in the JS spec for reference.","title":"get-intrinsic "},{"location":"node_modules/get-intrinsic/#example","text":"var GetIntrinsic = require ( 'get-intrinsic' ); var assert = require ( 'assert' ); // static methods assert . equal ( GetIntrinsic ( '%Math.pow%' ), Math . pow ); assert . equal ( Math . pow ( 2 , 3 ), 8 ); assert . equal ( GetIntrinsic ( '%Math.pow%' )( 2 , 3 ), 8 ); delete Math . pow ; assert . equal ( GetIntrinsic ( '%Math.pow%' )( 2 , 3 ), 8 ); // instance methods var arr = [ 1 ]; assert . equal ( GetIntrinsic ( '%Array.prototype.push%' ), Array . prototype . push ); assert . deepEqual ( arr , [ 1 ]); arr . push ( 2 ); assert . deepEqual ( arr , [ 1 , 2 ]); GetIntrinsic ( '%Array.prototype.push%' ). call ( arr , 3 ); assert . deepEqual ( arr , [ 1 , 2 , 3 ]); delete Array . prototype . push ; GetIntrinsic ( '%Array.prototype.push%' ). call ( arr , 4 ); assert . deepEqual ( arr , [ 1 , 2 , 3 , 4 ]); // missing features delete JSON . parse ; // to simulate a real intrinsic that is missing in the environment assert . throws (() => GetIntrinsic ( '%JSON.parse%' )); assert . equal ( undefined , GetIntrinsic ( '%JSON.parse%' , true ));","title":"Example"},{"location":"node_modules/get-intrinsic/#tests","text":"Simply clone the repo, npm install , and run npm test","title":"Tests"},{"location":"node_modules/get-intrinsic/#security","text":"Please email @ljharb or see https://tidelift.com/security if you have a potential security vulnerability to report.","title":"Security"},{"location":"node_modules/get-intrinsic/CHANGELOG/","text":"Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning . v1.1.1 - 2021-02-03 Fixed [meta] export ./package.json #9 Commits [readme] flesh out the readme; use evalmd d12f12c [eslint] set up proper globals config 5a8c098 [Dev Deps] update eslint 7b9a5c0 v1.1.0 - 2021-01-25 Fixed [Refactor] delay Function eval until syntax-derived values are requested #3 Commits [Tests] migrate tests to Github Actions 2ab762b [meta] do not publish github action workflow files 5e7108e [Tests] add some coverage 01ac7a8 [Dev Deps] update eslint , @ljharb/eslint-config , call-bind , es-abstract , tape ; add call-bind 911b672 [Refactor] rearrange evalled constructors a bit 7e7e4bf [meta] add Automatic Rebase and Require Allow Edits workflows 0199968 v1.0.2 - 2020-12-17 Commits [Fix] Throw for non\u2011existent intrinsics 68f873b [Fix] Throw for non\u2011existent segments in the intrinsic path 8325dee [Dev Deps] update eslint , @ljharb/eslint-config , aud , has-bigints , object-inspect 0c227a7 [meta] do not lint coverage output 70d2419 v1.0.1 - 2020-10-30 Commits [Tests] gather coverage data on every job d1d280d [Fix] add missing dependencies 5031771 [Tests] use es-value-fixtures af48765 v1.0.0 - 2020-10-29 Commits Implementation bbce57c Tests 17b4f0d Initial commit 3153294 npm init fb326c4 [meta] add Automatic Rebase and Require Allow Edits workflows 48862fb [meta] add auto-changelog 5f28ad0 [meta] add \"funding\"; create FUNDING.yml c2bbdde [Tests] add npm run lint 0a84b98 Only apps should have lockfiles 9586c75","title":"Changelog"},{"location":"node_modules/get-intrinsic/CHANGELOG/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"node_modules/get-intrinsic/CHANGELOG/#v111-2021-02-03","text":"","title":"v1.1.1 - 2021-02-03"},{"location":"node_modules/get-intrinsic/CHANGELOG/#fixed","text":"[meta] export ./package.json #9","title":"Fixed"},{"location":"node_modules/get-intrinsic/CHANGELOG/#commits","text":"[readme] flesh out the readme; use evalmd d12f12c [eslint] set up proper globals config 5a8c098 [Dev Deps] update eslint 7b9a5c0","title":"Commits"},{"location":"node_modules/get-intrinsic/CHANGELOG/#v110-2021-01-25","text":"","title":"v1.1.0 - 2021-01-25"},{"location":"node_modules/get-intrinsic/CHANGELOG/#fixed_1","text":"[Refactor] delay Function eval until syntax-derived values are requested #3","title":"Fixed"},{"location":"node_modules/get-intrinsic/CHANGELOG/#commits_1","text":"[Tests] migrate tests to Github Actions 2ab762b [meta] do not publish github action workflow files 5e7108e [Tests] add some coverage 01ac7a8 [Dev Deps] update eslint , @ljharb/eslint-config , call-bind , es-abstract , tape ; add call-bind 911b672 [Refactor] rearrange evalled constructors a bit 7e7e4bf [meta] add Automatic Rebase and Require Allow Edits workflows 0199968","title":"Commits"},{"location":"node_modules/get-intrinsic/CHANGELOG/#v102-2020-12-17","text":"","title":"v1.0.2 - 2020-12-17"},{"location":"node_modules/get-intrinsic/CHANGELOG/#commits_2","text":"[Fix] Throw for non\u2011existent intrinsics 68f873b [Fix] Throw for non\u2011existent segments in the intrinsic path 8325dee [Dev Deps] update eslint , @ljharb/eslint-config , aud , has-bigints , object-inspect 0c227a7 [meta] do not lint coverage output 70d2419","title":"Commits"},{"location":"node_modules/get-intrinsic/CHANGELOG/#v101-2020-10-30","text":"","title":"v1.0.1 - 2020-10-30"},{"location":"node_modules/get-intrinsic/CHANGELOG/#commits_3","text":"[Tests] gather coverage data on every job d1d280d [Fix] add missing dependencies 5031771 [Tests] use es-value-fixtures af48765","title":"Commits"},{"location":"node_modules/get-intrinsic/CHANGELOG/#v100-2020-10-29","text":"","title":"v1.0.0 - 2020-10-29"},{"location":"node_modules/get-intrinsic/CHANGELOG/#commits_4","text":"Implementation bbce57c Tests 17b4f0d Initial commit 3153294 npm init fb326c4 [meta] add Automatic Rebase and Require Allow Edits workflows 48862fb [meta] add auto-changelog 5f28ad0 [meta] add \"funding\"; create FUNDING.yml c2bbdde [Tests] add npm run lint 0a84b98 Only apps should have lockfiles 9586c75","title":"Commits"},{"location":"node_modules/get-stdin/readme/","text":"get-stdin Get stdin as a string or buffer Install $ npm install --save get-stdin Usage // example.js const getStdin = require ( 'get-stdin' ); getStdin (). then ( str => { console . log ( str ); //=> 'unicorns' }); $ echo unicorns | node example.js unicorns API Both methods returns a promise that is resolved when the end event fires on the stdin stream, indicating that there is no more data to be read. getStdin() Get stdin as a string. In a TTY context, a promise that resolves to an empty string is returned. getStdin.buffer() Get stdin as a buffer. In a TTY context, a promise that resolves to an empty buffer is returned. Related get-stream - Get a stream as a string or buffer License MIT \u00a9 Sindre Sorhus","title":"get-stdin [![Build Status](https://travis-ci.org/sindresorhus/get-stdin.svg?branch=master)](https://travis-ci.org/sindresorhus/get-stdin)"},{"location":"node_modules/get-stdin/readme/#get-stdin","text":"Get stdin as a string or buffer","title":"get-stdin"},{"location":"node_modules/get-stdin/readme/#install","text":"$ npm install --save get-stdin","title":"Install"},{"location":"node_modules/get-stdin/readme/#usage","text":"// example.js const getStdin = require ( 'get-stdin' ); getStdin (). then ( str => { console . log ( str ); //=> 'unicorns' }); $ echo unicorns | node example.js unicorns","title":"Usage"},{"location":"node_modules/get-stdin/readme/#api","text":"Both methods returns a promise that is resolved when the end event fires on the stdin stream, indicating that there is no more data to be read.","title":"API"},{"location":"node_modules/get-stdin/readme/#getstdin","text":"Get stdin as a string. In a TTY context, a promise that resolves to an empty string is returned.","title":"getStdin()"},{"location":"node_modules/get-stdin/readme/#getstdinbuffer","text":"Get stdin as a buffer. In a TTY context, a promise that resolves to an empty buffer is returned.","title":"getStdin.buffer()"},{"location":"node_modules/get-stdin/readme/#related","text":"get-stream - Get a stream as a string or buffer","title":"Related"},{"location":"node_modules/get-stdin/readme/#license","text":"MIT \u00a9 Sindre Sorhus","title":"License"},{"location":"node_modules/glob/","text":"Glob Match files using the patterns the shell uses, like stars and stuff. This is a glob implementation in JavaScript. It uses the minimatch library to do its matching. Usage Install with npm npm i glob var glob = require ( \"glob\" ) // options is optional glob ( \"**/*.js\" , options , function ( er , files ) { // files is an array of filenames. // If the `nonull` option is set, and nothing // was found, then files is [\"**/*.js\"] // er is an error object or null. }) Glob Primer \"Globs\" are the patterns you type when you do stuff like ls *.js on the command line, or put build/* in a .gitignore file. Before parsing the path part patterns, braced sections are expanded into a set. Braced sections start with { and end with } , with any number of comma-delimited sections within. Braced sections may contain slash characters, so a{/b/c,bcd} would expand into a/b/c and abcd . The following characters have special magic meaning when used in a path portion: * Matches 0 or more characters in a single path portion ? Matches 1 character [...] Matches a range of characters, similar to a RegExp range. If the first character of the range is ! or ^ then it matches any character not in the range. !(pattern|pattern|pattern) Matches anything that does not match any of the patterns provided. ?(pattern|pattern|pattern) Matches zero or one occurrence of the patterns provided. +(pattern|pattern|pattern) Matches one or more occurrences of the patterns provided. *(a|b|c) Matches zero or more occurrences of the patterns provided @(pattern|pat*|pat?erN) Matches exactly one of the patterns provided ** If a \"globstar\" is alone in a path portion, then it matches zero or more directories and subdirectories searching for matches. It does not crawl symlinked directories. Dots If a file or directory path portion has a . as the first character, then it will not match any glob pattern unless that pattern's corresponding path part also has a . as its first character. For example, the pattern a/.*/c would match the file at a/.b/c . However the pattern a/*/c would not, because * does not start with a dot character. You can make glob treat dots as normal characters by setting dot:true in the options. Basename Matching If you set matchBase:true in the options, and the pattern has no slashes in it, then it will seek for any file anywhere in the tree with a matching basename. For example, *.js would match test/simple/basic.js . Empty Sets If no matching files are found, then an empty array is returned. This differs from the shell, where the pattern itself is returned. For example: $ echo a*s*d*f a*s*d*f To get the bash-style behavior, set the nonull:true in the options. See Also: man sh man bash (Search for \"Pattern Matching\") man 3 fnmatch man 5 gitignore minimatch documentation glob.hasMagic(pattern, [options]) Returns true if there are any special characters in the pattern, and false otherwise. Note that the options affect the results. If noext:true is set in the options object, then +(a|b) will not be considered a magic pattern. If the pattern has a brace expansion, like a/{b/c,x/y} then that is considered magical, unless nobrace:true is set in the options. glob(pattern, [options], cb) pattern {String} Pattern to be matched options {Object} cb {Function} err {Error | null} matches {Array<String>} filenames found matching the pattern Perform an asynchronous glob search. glob.sync(pattern, [options]) pattern {String} Pattern to be matched options {Object} return: {Array<String>} filenames found matching the pattern Perform a synchronous glob search. Class: glob.Glob Create a Glob object by instantiating the glob.Glob class. var Glob = require ( \"glob\" ). Glob var mg = new Glob ( pattern , options , cb ) It's an EventEmitter, and starts walking the filesystem to find matches immediately. new glob.Glob(pattern, [options], [cb]) pattern {String} pattern to search for options {Object} cb {Function} Called when an error occurs, or matches are found err {Error | null} matches {Array<String>} filenames found matching the pattern Note that if the sync flag is set in the options, then matches will be immediately available on the g.found member. Properties minimatch The minimatch object that the glob uses. options The options object passed in. aborted Boolean which is set to true when calling abort() . There is no way at this time to continue a glob search after aborting, but you can re-use the statCache to avoid having to duplicate syscalls. cache Convenience object. Each field has the following possible values: false - Path does not exist true - Path exists 'FILE' - Path exists, and is not a directory 'DIR' - Path exists, and is a directory [file, entries, ...] - Path exists, is a directory, and the array value is the results of fs.readdir statCache Cache of fs.stat results, to prevent statting the same path multiple times. symlinks A record of which paths are symbolic links, which is relevant in resolving ** patterns. realpathCache An optional object which is passed to fs.realpath to minimize unnecessary syscalls. It is stored on the instantiated Glob object, and may be re-used. Events end When the matching is finished, this is emitted with all the matches found. If the nonull option is set, and no match was found, then the matches list contains the original pattern. The matches are sorted, unless the nosort flag is set. match Every time a match is found, this is emitted with the specific thing that matched. It is not deduplicated or resolved to a realpath. error Emitted when an unexpected error is encountered, or whenever any fs error occurs if options.strict is set. abort When abort() is called, this event is raised. Methods pause Temporarily stop the search resume Resume the search abort Stop the search forever Options All the options that can be passed to Minimatch can also be passed to Glob to change pattern matching behavior. Also, some have been added, or have glob-specific ramifications. All options are false by default, unless otherwise noted. All options are added to the Glob object, as well. If you are running many glob operations, you can pass a Glob object as the options argument to a subsequent operation to shortcut some stat and readdir calls. At the very least, you may pass in shared symlinks , statCache , realpathCache , and cache options, so that parallel glob operations will be sped up by sharing information about the filesystem. cwd The current working directory in which to search. Defaults to process.cwd() . root The place where patterns starting with / will be mounted onto. Defaults to path.resolve(options.cwd, \"/\") ( / on Unix systems, and C:\\ or some such on Windows.) dot Include .dot files in normal matches and globstar matches. Note that an explicit dot in a portion of the pattern will always match dot files. nomount By default, a pattern starting with a forward-slash will be \"mounted\" onto the root setting, so that a valid filesystem path is returned. Set this flag to disable that behavior. mark Add a / character to directory matches. Note that this requires additional stat calls. nosort Don't sort the results. stat Set to true to stat all results. This reduces performance somewhat, and is completely unnecessary, unless readdir is presumed to be an untrustworthy indicator of file existence. silent When an unusual error is encountered when attempting to read a directory, a warning will be printed to stderr. Set the silent option to true to suppress these warnings. strict When an unusual error is encountered when attempting to read a directory, the process will just continue on in search of other matches. Set the strict option to raise an error in these cases. cache See cache property above. Pass in a previously generated cache object to save some fs calls. statCache A cache of results of filesystem information, to prevent unnecessary stat calls. While it should not normally be necessary to set this, you may pass the statCache from one glob() call to the options object of another, if you know that the filesystem will not change between calls. (See \"Race Conditions\" below.) symlinks A cache of known symbolic links. You may pass in a previously generated symlinks object to save lstat calls when resolving ** matches. sync DEPRECATED: use glob.sync(pattern, opts) instead. nounique In some cases, brace-expanded patterns can result in the same file showing up multiple times in the result set. By default, this implementation prevents duplicates in the result set. Set this flag to disable that behavior. nonull Set to never return an empty set, instead returning a set containing the pattern itself. This is the default in glob(3). debug Set to enable debug logging in minimatch and glob. nobrace Do not expand {a,b} and {1..3} brace sets. noglobstar Do not match ** against multiple filenames. (Ie, treat it as a normal * instead.) noext Do not match +(a|b) \"extglob\" patterns. nocase Perform a case-insensitive match. Note: on case-insensitive filesystems, non-magic patterns will match by default, since stat and readdir will not raise errors. matchBase Perform a basename-only match if the pattern does not contain any slash characters. That is, *.js would be treated as equivalent to **/*.js , matching all js files in all directories. nodir Do not match directories, only files. (Note: to match only directories, simply put a / at the end of the pattern.) ignore Add a pattern or an array of glob patterns to exclude matches. Note: ignore patterns are always in dot:true mode, regardless of any other settings. follow Follow symlinked directories when expanding ** patterns. Note that this can result in a lot of duplicate references in the presence of cyclic links. realpath Set to true to call fs.realpath on all of the results. In the case of a symlink that cannot be resolved, the full absolute path to the matched entry is returned (though it will usually be a broken symlink) absolute Set to true to always receive absolute paths for matched files. Unlike realpath , this also affects the values returned in the match event. fs File-system object with Node's fs API. By default, the built-in fs module will be used. Set to a volume provided by a library like memfs to avoid using the \"real\" file-system. Comparisons to other fnmatch/glob implementations While strict compliance with the existing standards is a worthwhile goal, some discrepancies exist between node-glob and other implementations, and are intentional. The double-star character ** is supported by default, unless the noglobstar flag is set. This is supported in the manner of bsdglob and bash 4.3, where ** only has special significance if it is the only thing in a path part. That is, a/**/b will match a/x/y/b , but a/**b will not. Note that symlinked directories are not crawled as part of a ** , though their contents may match against subsequent portions of the pattern. This prevents infinite loops and duplicates and the like. If an escaped pattern has no matches, and the nonull flag is set, then glob returns the pattern as-provided, rather than interpreting the character escapes. For example, glob.match([], \"\\\\*a\\\\?\") will return \"\\\\*a\\\\?\" rather than \"*a?\" . This is akin to setting the nullglob option in bash, except that it does not resolve escaped pattern characters. If brace expansion is not disabled, then it is performed before any other interpretation of the glob pattern. Thus, a pattern like +(a|{b),c)} , which would not be valid in bash or zsh, is expanded first into the set of +(a|b) and +(a|c) , and those patterns are checked for validity. Since those two are valid, matching proceeds. Comments and Negation Previously, this module let you mark a pattern as a \"comment\" if it started with a # character, or a \"negated\" pattern if it started with a ! character. These options were deprecated in version 5, and removed in version 6. To specify things that should not match, use the ignore option. Windows Please only use forward-slashes in glob expressions. Though windows uses either / or \\ as its path separator, only / characters are used by this glob implementation. You must use forward-slashes only in glob expressions. Back-slashes will always be interpreted as escape characters, not path separators. Results from absolute patterns such as /foo/* are mounted onto the root setting using path.join . On windows, this will by default result in /foo/* matching C:\\foo\\bar.txt . Race Conditions Glob searching, by its very nature, is susceptible to race conditions, since it relies on directory walking and such. As a result, it is possible that a file that exists when glob looks for it may have been deleted or modified by the time it returns the result. As part of its internal implementation, this program caches all stat and readdir calls that it makes, in order to cut down on system overhead. However, this also makes it even more susceptible to races, especially if the cache or statCache objects are reused between glob calls. Users are thus advised not to use a glob result as a guarantee of filesystem state in the face of rapid changes. For the vast majority of operations, this is never a problem. Glob Logo Glob's logo was created by Tanya Brassie . Logo files can be found here . The logo is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License . Contributing Any change to behavior (including bugfixes) must come with a test. Patches that fail tests or reduce performance will be rejected. # to run tests npm test # to re-generate test fixtures npm run test-regen # to benchmark against bash/zsh npm run bench # to profile javascript npm run prof","title":"Glob"},{"location":"node_modules/glob/#glob","text":"Match files using the patterns the shell uses, like stars and stuff. This is a glob implementation in JavaScript. It uses the minimatch library to do its matching.","title":"Glob"},{"location":"node_modules/glob/#usage","text":"Install with npm npm i glob var glob = require ( \"glob\" ) // options is optional glob ( \"**/*.js\" , options , function ( er , files ) { // files is an array of filenames. // If the `nonull` option is set, and nothing // was found, then files is [\"**/*.js\"] // er is an error object or null. })","title":"Usage"},{"location":"node_modules/glob/#glob-primer","text":"\"Globs\" are the patterns you type when you do stuff like ls *.js on the command line, or put build/* in a .gitignore file. Before parsing the path part patterns, braced sections are expanded into a set. Braced sections start with { and end with } , with any number of comma-delimited sections within. Braced sections may contain slash characters, so a{/b/c,bcd} would expand into a/b/c and abcd . The following characters have special magic meaning when used in a path portion: * Matches 0 or more characters in a single path portion ? Matches 1 character [...] Matches a range of characters, similar to a RegExp range. If the first character of the range is ! or ^ then it matches any character not in the range. !(pattern|pattern|pattern) Matches anything that does not match any of the patterns provided. ?(pattern|pattern|pattern) Matches zero or one occurrence of the patterns provided. +(pattern|pattern|pattern) Matches one or more occurrences of the patterns provided. *(a|b|c) Matches zero or more occurrences of the patterns provided @(pattern|pat*|pat?erN) Matches exactly one of the patterns provided ** If a \"globstar\" is alone in a path portion, then it matches zero or more directories and subdirectories searching for matches. It does not crawl symlinked directories.","title":"Glob Primer"},{"location":"node_modules/glob/#dots","text":"If a file or directory path portion has a . as the first character, then it will not match any glob pattern unless that pattern's corresponding path part also has a . as its first character. For example, the pattern a/.*/c would match the file at a/.b/c . However the pattern a/*/c would not, because * does not start with a dot character. You can make glob treat dots as normal characters by setting dot:true in the options.","title":"Dots"},{"location":"node_modules/glob/#basename-matching","text":"If you set matchBase:true in the options, and the pattern has no slashes in it, then it will seek for any file anywhere in the tree with a matching basename. For example, *.js would match test/simple/basic.js .","title":"Basename Matching"},{"location":"node_modules/glob/#empty-sets","text":"If no matching files are found, then an empty array is returned. This differs from the shell, where the pattern itself is returned. For example: $ echo a*s*d*f a*s*d*f To get the bash-style behavior, set the nonull:true in the options.","title":"Empty Sets"},{"location":"node_modules/glob/#see-also","text":"man sh man bash (Search for \"Pattern Matching\") man 3 fnmatch man 5 gitignore minimatch documentation","title":"See Also:"},{"location":"node_modules/glob/#globhasmagicpattern-options","text":"Returns true if there are any special characters in the pattern, and false otherwise. Note that the options affect the results. If noext:true is set in the options object, then +(a|b) will not be considered a magic pattern. If the pattern has a brace expansion, like a/{b/c,x/y} then that is considered magical, unless nobrace:true is set in the options.","title":"glob.hasMagic(pattern, [options])"},{"location":"node_modules/glob/#globpattern-options-cb","text":"pattern {String} Pattern to be matched options {Object} cb {Function} err {Error | null} matches {Array<String>} filenames found matching the pattern Perform an asynchronous glob search.","title":"glob(pattern, [options], cb)"},{"location":"node_modules/glob/#globsyncpattern-options","text":"pattern {String} Pattern to be matched options {Object} return: {Array<String>} filenames found matching the pattern Perform a synchronous glob search.","title":"glob.sync(pattern, [options])"},{"location":"node_modules/glob/#class-globglob","text":"Create a Glob object by instantiating the glob.Glob class. var Glob = require ( \"glob\" ). Glob var mg = new Glob ( pattern , options , cb ) It's an EventEmitter, and starts walking the filesystem to find matches immediately.","title":"Class: glob.Glob"},{"location":"node_modules/glob/#new-globglobpattern-options-cb","text":"pattern {String} pattern to search for options {Object} cb {Function} Called when an error occurs, or matches are found err {Error | null} matches {Array<String>} filenames found matching the pattern Note that if the sync flag is set in the options, then matches will be immediately available on the g.found member.","title":"new glob.Glob(pattern, [options], [cb])"},{"location":"node_modules/glob/#properties","text":"minimatch The minimatch object that the glob uses. options The options object passed in. aborted Boolean which is set to true when calling abort() . There is no way at this time to continue a glob search after aborting, but you can re-use the statCache to avoid having to duplicate syscalls. cache Convenience object. Each field has the following possible values: false - Path does not exist true - Path exists 'FILE' - Path exists, and is not a directory 'DIR' - Path exists, and is a directory [file, entries, ...] - Path exists, is a directory, and the array value is the results of fs.readdir statCache Cache of fs.stat results, to prevent statting the same path multiple times. symlinks A record of which paths are symbolic links, which is relevant in resolving ** patterns. realpathCache An optional object which is passed to fs.realpath to minimize unnecessary syscalls. It is stored on the instantiated Glob object, and may be re-used.","title":"Properties"},{"location":"node_modules/glob/#events","text":"end When the matching is finished, this is emitted with all the matches found. If the nonull option is set, and no match was found, then the matches list contains the original pattern. The matches are sorted, unless the nosort flag is set. match Every time a match is found, this is emitted with the specific thing that matched. It is not deduplicated or resolved to a realpath. error Emitted when an unexpected error is encountered, or whenever any fs error occurs if options.strict is set. abort When abort() is called, this event is raised.","title":"Events"},{"location":"node_modules/glob/#methods","text":"pause Temporarily stop the search resume Resume the search abort Stop the search forever","title":"Methods"},{"location":"node_modules/glob/#options","text":"All the options that can be passed to Minimatch can also be passed to Glob to change pattern matching behavior. Also, some have been added, or have glob-specific ramifications. All options are false by default, unless otherwise noted. All options are added to the Glob object, as well. If you are running many glob operations, you can pass a Glob object as the options argument to a subsequent operation to shortcut some stat and readdir calls. At the very least, you may pass in shared symlinks , statCache , realpathCache , and cache options, so that parallel glob operations will be sped up by sharing information about the filesystem. cwd The current working directory in which to search. Defaults to process.cwd() . root The place where patterns starting with / will be mounted onto. Defaults to path.resolve(options.cwd, \"/\") ( / on Unix systems, and C:\\ or some such on Windows.) dot Include .dot files in normal matches and globstar matches. Note that an explicit dot in a portion of the pattern will always match dot files. nomount By default, a pattern starting with a forward-slash will be \"mounted\" onto the root setting, so that a valid filesystem path is returned. Set this flag to disable that behavior. mark Add a / character to directory matches. Note that this requires additional stat calls. nosort Don't sort the results. stat Set to true to stat all results. This reduces performance somewhat, and is completely unnecessary, unless readdir is presumed to be an untrustworthy indicator of file existence. silent When an unusual error is encountered when attempting to read a directory, a warning will be printed to stderr. Set the silent option to true to suppress these warnings. strict When an unusual error is encountered when attempting to read a directory, the process will just continue on in search of other matches. Set the strict option to raise an error in these cases. cache See cache property above. Pass in a previously generated cache object to save some fs calls. statCache A cache of results of filesystem information, to prevent unnecessary stat calls. While it should not normally be necessary to set this, you may pass the statCache from one glob() call to the options object of another, if you know that the filesystem will not change between calls. (See \"Race Conditions\" below.) symlinks A cache of known symbolic links. You may pass in a previously generated symlinks object to save lstat calls when resolving ** matches. sync DEPRECATED: use glob.sync(pattern, opts) instead. nounique In some cases, brace-expanded patterns can result in the same file showing up multiple times in the result set. By default, this implementation prevents duplicates in the result set. Set this flag to disable that behavior. nonull Set to never return an empty set, instead returning a set containing the pattern itself. This is the default in glob(3). debug Set to enable debug logging in minimatch and glob. nobrace Do not expand {a,b} and {1..3} brace sets. noglobstar Do not match ** against multiple filenames. (Ie, treat it as a normal * instead.) noext Do not match +(a|b) \"extglob\" patterns. nocase Perform a case-insensitive match. Note: on case-insensitive filesystems, non-magic patterns will match by default, since stat and readdir will not raise errors. matchBase Perform a basename-only match if the pattern does not contain any slash characters. That is, *.js would be treated as equivalent to **/*.js , matching all js files in all directories. nodir Do not match directories, only files. (Note: to match only directories, simply put a / at the end of the pattern.) ignore Add a pattern or an array of glob patterns to exclude matches. Note: ignore patterns are always in dot:true mode, regardless of any other settings. follow Follow symlinked directories when expanding ** patterns. Note that this can result in a lot of duplicate references in the presence of cyclic links. realpath Set to true to call fs.realpath on all of the results. In the case of a symlink that cannot be resolved, the full absolute path to the matched entry is returned (though it will usually be a broken symlink) absolute Set to true to always receive absolute paths for matched files. Unlike realpath , this also affects the values returned in the match event. fs File-system object with Node's fs API. By default, the built-in fs module will be used. Set to a volume provided by a library like memfs to avoid using the \"real\" file-system.","title":"Options"},{"location":"node_modules/glob/#comparisons-to-other-fnmatchglob-implementations","text":"While strict compliance with the existing standards is a worthwhile goal, some discrepancies exist between node-glob and other implementations, and are intentional. The double-star character ** is supported by default, unless the noglobstar flag is set. This is supported in the manner of bsdglob and bash 4.3, where ** only has special significance if it is the only thing in a path part. That is, a/**/b will match a/x/y/b , but a/**b will not. Note that symlinked directories are not crawled as part of a ** , though their contents may match against subsequent portions of the pattern. This prevents infinite loops and duplicates and the like. If an escaped pattern has no matches, and the nonull flag is set, then glob returns the pattern as-provided, rather than interpreting the character escapes. For example, glob.match([], \"\\\\*a\\\\?\") will return \"\\\\*a\\\\?\" rather than \"*a?\" . This is akin to setting the nullglob option in bash, except that it does not resolve escaped pattern characters. If brace expansion is not disabled, then it is performed before any other interpretation of the glob pattern. Thus, a pattern like +(a|{b),c)} , which would not be valid in bash or zsh, is expanded first into the set of +(a|b) and +(a|c) , and those patterns are checked for validity. Since those two are valid, matching proceeds.","title":"Comparisons to other fnmatch/glob implementations"},{"location":"node_modules/glob/#comments-and-negation","text":"Previously, this module let you mark a pattern as a \"comment\" if it started with a # character, or a \"negated\" pattern if it started with a ! character. These options were deprecated in version 5, and removed in version 6. To specify things that should not match, use the ignore option.","title":"Comments and Negation"},{"location":"node_modules/glob/#windows","text":"Please only use forward-slashes in glob expressions. Though windows uses either / or \\ as its path separator, only / characters are used by this glob implementation. You must use forward-slashes only in glob expressions. Back-slashes will always be interpreted as escape characters, not path separators. Results from absolute patterns such as /foo/* are mounted onto the root setting using path.join . On windows, this will by default result in /foo/* matching C:\\foo\\bar.txt .","title":"Windows"},{"location":"node_modules/glob/#race-conditions","text":"Glob searching, by its very nature, is susceptible to race conditions, since it relies on directory walking and such. As a result, it is possible that a file that exists when glob looks for it may have been deleted or modified by the time it returns the result. As part of its internal implementation, this program caches all stat and readdir calls that it makes, in order to cut down on system overhead. However, this also makes it even more susceptible to races, especially if the cache or statCache objects are reused between glob calls. Users are thus advised not to use a glob result as a guarantee of filesystem state in the face of rapid changes. For the vast majority of operations, this is never a problem.","title":"Race Conditions"},{"location":"node_modules/glob/#glob-logo","text":"Glob's logo was created by Tanya Brassie . Logo files can be found here . The logo is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License .","title":"Glob Logo"},{"location":"node_modules/glob/#contributing","text":"Any change to behavior (including bugfixes) must come with a test. Patches that fail tests or reduce performance will be rejected. # to run tests npm test # to re-generate test fixtures npm run test-regen # to benchmark against bash/zsh npm run bench # to profile javascript npm run prof","title":"Contributing"},{"location":"node_modules/graceful-fs/","text":"graceful-fs graceful-fs functions as a drop-in replacement for the fs module, making various improvements. The improvements are meant to normalize behavior across different platforms and environments, and to make filesystem access more resilient to errors. Improvements over fs module Queues up open and readdir calls, and retries them once something closes if there is an EMFILE error from too many file descriptors. fixes lchmod for Node versions prior to 0.6.2. implements fs.lutimes if possible. Otherwise it becomes a noop. ignores EINVAL and EPERM errors in chown , fchown or lchown if the user isn't root. makes lchmod and lchown become noops, if not available. retries reading a file if read results in EAGAIN error. On Windows, it retries renaming a file for up to one second if EACCESS or EPERM error occurs, likely because antivirus software has locked the directory. USAGE // use just like fs var fs = require ( 'graceful-fs' ) // now go and do stuff with it... fs . readFile ( 'some-file-or-whatever' , ( err , data ) => { // Do stuff here. }) Sync methods This module cannot intercept or handle EMFILE or ENFILE errors from sync methods. If you use sync methods which open file descriptors then you are responsible for dealing with any errors. This is a known limitation, not a bug. Global Patching If you want to patch the global fs module (or any other fs-like module) you can do this: // Make sure to read the caveat below. var realFs = require ( 'fs' ) var gracefulFs = require ( 'graceful-fs' ) gracefulFs . gracefulify ( realFs ) This should only ever be done at the top-level application layer, in order to delay on EMFILE errors from any fs-using dependencies. You should not do this in a library, because it can cause unexpected delays in other parts of the program. Changes This module is fairly stable at this point, and used by a lot of things. That being said, because it implements a subtle behavior change in a core part of the node API, even modest changes can be extremely breaking, and the versioning is thus biased towards bumping the major when in doubt. The main change between major versions has been switching between providing a fully-patched fs module vs monkey-patching the node core builtin, and the approach by which a non-monkey-patched fs was created. The goal is to trade EMFILE errors for slower fs operations. So, if you try to open a zillion files, rather than crashing, open operations will be queued up and wait for something else to close . There are advantages to each approach. Monkey-patching the fs means that no EMFILE errors can possibly occur anywhere in your application, because everything is using the same core fs module, which is patched. However, it can also obviously cause undesirable side-effects, especially if the module is loaded multiple times. Implementing a separate-but-identical patched fs module is more surgical (and doesn't run the risk of patching multiple times), but also imposes the challenge of keeping in sync with the core module. The current approach loads the fs module, and then creates a lookalike object that has all the same methods, except a few that are patched. It is safe to use in all versions of Node from 0.8 through 7.0. v4 Do not monkey-patch the fs module. This module may now be used as a drop-in dep, and users can opt into monkey-patching the fs builtin if their app requires it. v3 Monkey-patch fs, because the eval approach no longer works on recent node. fixed possible type-error throw if rename fails on windows verify that we never get EMFILE errors Ignore ENOSYS from chmod/chown clarify that graceful-fs must be used as a drop-in v2.1.0 Use eval rather than monkey-patching fs. readdir: Always sort the results win32: requeue a file if error has an OK status v2.0 A return to monkey patching wrap process.cwd v1.1 wrap readFile Wrap fs.writeFile. readdir protection Don't clobber the fs builtin Handle fs.read EAGAIN errors by trying again Expose the curOpen counter No-op lchown/lchmod if not implemented fs.rename patch only for win32 Patch fs.rename to handle AV software on Windows Close #4 Chown should not fail on einval or eperm if non-root Fix isaacs/fstream#1 Only wrap fs one time Fix #3 Start at 1024 max files, then back off on EMFILE lutimes that doens't blow up on Linux A full on-rewrite using a queue instead of just swallowing the EMFILE error Wrap Read/Write streams as well 1.0 Update engines for node 0.6 Be lstat-graceful on Windows first","title":"graceful-fs"},{"location":"node_modules/graceful-fs/#graceful-fs","text":"graceful-fs functions as a drop-in replacement for the fs module, making various improvements. The improvements are meant to normalize behavior across different platforms and environments, and to make filesystem access more resilient to errors.","title":"graceful-fs"},{"location":"node_modules/graceful-fs/#improvements-over-fs-module","text":"Queues up open and readdir calls, and retries them once something closes if there is an EMFILE error from too many file descriptors. fixes lchmod for Node versions prior to 0.6.2. implements fs.lutimes if possible. Otherwise it becomes a noop. ignores EINVAL and EPERM errors in chown , fchown or lchown if the user isn't root. makes lchmod and lchown become noops, if not available. retries reading a file if read results in EAGAIN error. On Windows, it retries renaming a file for up to one second if EACCESS or EPERM error occurs, likely because antivirus software has locked the directory.","title":"Improvements over fs module"},{"location":"node_modules/graceful-fs/#usage","text":"// use just like fs var fs = require ( 'graceful-fs' ) // now go and do stuff with it... fs . readFile ( 'some-file-or-whatever' , ( err , data ) => { // Do stuff here. })","title":"USAGE"},{"location":"node_modules/graceful-fs/#sync-methods","text":"This module cannot intercept or handle EMFILE or ENFILE errors from sync methods. If you use sync methods which open file descriptors then you are responsible for dealing with any errors. This is a known limitation, not a bug.","title":"Sync methods"},{"location":"node_modules/graceful-fs/#global-patching","text":"If you want to patch the global fs module (or any other fs-like module) you can do this: // Make sure to read the caveat below. var realFs = require ( 'fs' ) var gracefulFs = require ( 'graceful-fs' ) gracefulFs . gracefulify ( realFs ) This should only ever be done at the top-level application layer, in order to delay on EMFILE errors from any fs-using dependencies. You should not do this in a library, because it can cause unexpected delays in other parts of the program.","title":"Global Patching"},{"location":"node_modules/graceful-fs/#changes","text":"This module is fairly stable at this point, and used by a lot of things. That being said, because it implements a subtle behavior change in a core part of the node API, even modest changes can be extremely breaking, and the versioning is thus biased towards bumping the major when in doubt. The main change between major versions has been switching between providing a fully-patched fs module vs monkey-patching the node core builtin, and the approach by which a non-monkey-patched fs was created. The goal is to trade EMFILE errors for slower fs operations. So, if you try to open a zillion files, rather than crashing, open operations will be queued up and wait for something else to close . There are advantages to each approach. Monkey-patching the fs means that no EMFILE errors can possibly occur anywhere in your application, because everything is using the same core fs module, which is patched. However, it can also obviously cause undesirable side-effects, especially if the module is loaded multiple times. Implementing a separate-but-identical patched fs module is more surgical (and doesn't run the risk of patching multiple times), but also imposes the challenge of keeping in sync with the core module. The current approach loads the fs module, and then creates a lookalike object that has all the same methods, except a few that are patched. It is safe to use in all versions of Node from 0.8 through 7.0.","title":"Changes"},{"location":"node_modules/graceful-fs/#v4","text":"Do not monkey-patch the fs module. This module may now be used as a drop-in dep, and users can opt into monkey-patching the fs builtin if their app requires it.","title":"v4"},{"location":"node_modules/graceful-fs/#v3","text":"Monkey-patch fs, because the eval approach no longer works on recent node. fixed possible type-error throw if rename fails on windows verify that we never get EMFILE errors Ignore ENOSYS from chmod/chown clarify that graceful-fs must be used as a drop-in","title":"v3"},{"location":"node_modules/graceful-fs/#v210","text":"Use eval rather than monkey-patching fs. readdir: Always sort the results win32: requeue a file if error has an OK status","title":"v2.1.0"},{"location":"node_modules/graceful-fs/#v20","text":"A return to monkey patching wrap process.cwd","title":"v2.0"},{"location":"node_modules/graceful-fs/#v11","text":"wrap readFile Wrap fs.writeFile. readdir protection Don't clobber the fs builtin Handle fs.read EAGAIN errors by trying again Expose the curOpen counter No-op lchown/lchmod if not implemented fs.rename patch only for win32 Patch fs.rename to handle AV software on Windows Close #4 Chown should not fail on einval or eperm if non-root Fix isaacs/fstream#1 Only wrap fs one time Fix #3 Start at 1024 max files, then back off on EMFILE lutimes that doens't blow up on Linux A full on-rewrite using a queue instead of just swallowing the EMFILE error Wrap Read/Write streams as well","title":"v1.1"},{"location":"node_modules/graceful-fs/#10","text":"Update engines for node 0.6 Be lstat-graceful on Windows first","title":"1.0"},{"location":"node_modules/has/","text":"has Object.prototype.hasOwnProperty.call shortcut Installation npm install --save has Usage var has = require ( 'has' ); has ({}, 'hasOwnProperty' ); // false has ( Object . prototype , 'hasOwnProperty' ); // true","title":"has"},{"location":"node_modules/has/#has","text":"Object.prototype.hasOwnProperty.call shortcut","title":"has"},{"location":"node_modules/has/#installation","text":"npm install --save has","title":"Installation"},{"location":"node_modules/has/#usage","text":"var has = require ( 'has' ); has ({}, 'hasOwnProperty' ); // false has ( Object . prototype , 'hasOwnProperty' ); // true","title":"Usage"},{"location":"node_modules/has-ansi/readme/","text":"has-ansi Check if a string has ANSI escape codes Install $ npm install --save has-ansi Usage var hasAnsi = require ( 'has-ansi' ); hasAnsi ( '\\u001b[4mcake\\u001b[0m' ); //=> true hasAnsi ( 'cake' ); //=> false Related has-ansi-cli - CLI for this module strip-ansi - Strip ANSI escape codes ansi-regex - Regular expression for matching ANSI escape codes chalk - Terminal string styling done right License MIT \u00a9 Sindre Sorhus","title":"has-ansi [![Build Status](https://travis-ci.org/sindresorhus/has-ansi.svg?branch=master)](https://travis-ci.org/sindresorhus/has-ansi)"},{"location":"node_modules/has-ansi/readme/#has-ansi","text":"Check if a string has ANSI escape codes","title":"has-ansi"},{"location":"node_modules/has-ansi/readme/#install","text":"$ npm install --save has-ansi","title":"Install"},{"location":"node_modules/has-ansi/readme/#usage","text":"var hasAnsi = require ( 'has-ansi' ); hasAnsi ( '\\u001b[4mcake\\u001b[0m' ); //=> true hasAnsi ( 'cake' ); //=> false","title":"Usage"},{"location":"node_modules/has-ansi/readme/#related","text":"has-ansi-cli - CLI for this module strip-ansi - Strip ANSI escape codes ansi-regex - Regular expression for matching ANSI escape codes chalk - Terminal string styling done right","title":"Related"},{"location":"node_modules/has-ansi/readme/#license","text":"MIT \u00a9 Sindre Sorhus","title":"License"},{"location":"node_modules/has-symbols/","text":"has-symbols Determine if the JS environment has Symbol support. Supports spec, or shams. Example var hasSymbols = require ( 'has-symbols' ); hasSymbols () === true ; // if the environment has native Symbol support. Not polyfillable, not forgeable. var hasSymbolsKinda = require ( 'has-symbols/shams' ); hasSymbolsKinda () === true ; // if the environment has a Symbol sham that mostly follows the spec. Supported Symbol shams get-own-property-symbols npm | github core-js npm | github Tests Simply clone the repo, npm install , and run npm test","title":"has-symbols <sup>[![Version Badge][2]][1]</sup>"},{"location":"node_modules/has-symbols/#has-symbols","text":"Determine if the JS environment has Symbol support. Supports spec, or shams.","title":"has-symbols "},{"location":"node_modules/has-symbols/#example","text":"var hasSymbols = require ( 'has-symbols' ); hasSymbols () === true ; // if the environment has native Symbol support. Not polyfillable, not forgeable. var hasSymbolsKinda = require ( 'has-symbols/shams' ); hasSymbolsKinda () === true ; // if the environment has a Symbol sham that mostly follows the spec.","title":"Example"},{"location":"node_modules/has-symbols/#supported-symbol-shams","text":"get-own-property-symbols npm | github core-js npm | github","title":"Supported Symbol shams"},{"location":"node_modules/has-symbols/#tests","text":"Simply clone the repo, npm install , and run npm test","title":"Tests"},{"location":"node_modules/has-symbols/CHANGELOG/","text":"Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning . v1.0.2 - 2021-02-27 Fixed [Fix] use a universal way to get the original Symbol #11 Commits [Tests] migrate tests to Github Actions 90ae798 [meta] do not publish github action workflow files 29e60a1 [Tests] run nyc on all tests 8476b91 [readme] fix repo URLs, remove defunct badges 126288e [Dev Deps] update eslint , @ljharb/eslint-config , aud , auto-changelog , core-js , get-own-property-symbols d84bdfa [Tests] fix linting errors 0df3070 [actions] add \"Allow Edits\" workflow 1e6bc29 [Dev Deps] update eslint , @ljharb/eslint-config , tape 36cea2a [Dev Deps] update eslint , @ljharb/eslint-config , aud , tape 1278338 [Dev Deps] update eslint , @ljharb/eslint-config , aud , tape 1493254 [Dev Deps] update eslint , @ljharb/eslint-config , core-js b090bf2 [actions] switch Automatic Rebase workflow to pull_request_target event 4addb7a [Dev Deps] update auto-changelog , tape 81d0baf [Dev Deps] update auto-changelog ; add aud 1a4e561 [readme] remove unused testling URLs 3000941 [Tests] only audit prod deps 692e974 [Dev Deps] update @ljharb/eslint-config 51c946c v1.0.1 - 2019-11-16 Commits [Tests] use shared travis-ci configs ce396c9 [Tests] up to node v12.4 , v11.15 , v10.15 , v9.11 , v8.15 , v7.10 , v6.17 , v4.9 ; use nvm install-latest-npm 0690732 [meta] add auto-changelog 2163d0b [Dev Deps] update eslint , @ljharb/eslint-config , core-js , safe-publish-latest , tape 8e0951f [actions] add automatic rebasing / merge commit blocking b09cdb7 [Dev Deps] update eslint , @ljharb/eslint-config , safe-publish-latest , core-js , get-own-property-symbols , tape 1dd42cd [meta] create FUNDING.yml aa57a17 Only apps should have lockfiles a2d8bea [Tests] use npx aud instead of nsp or npm audit with hoops 9e96cb7 [meta] add funding field a0b32cf [Dev Deps] update safe-publish-latest cb9f0a5 v1.0.0 - 2016-09-19 Commits Tests. ecb6eb9 package.json 88a337c Initial commit 42e1e55 Initial implementation. 33f5cc6 read me 01f1170","title":"Changelog"},{"location":"node_modules/has-symbols/CHANGELOG/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"node_modules/has-symbols/CHANGELOG/#v102-2021-02-27","text":"","title":"v1.0.2 - 2021-02-27"},{"location":"node_modules/has-symbols/CHANGELOG/#fixed","text":"[Fix] use a universal way to get the original Symbol #11","title":"Fixed"},{"location":"node_modules/has-symbols/CHANGELOG/#commits","text":"[Tests] migrate tests to Github Actions 90ae798 [meta] do not publish github action workflow files 29e60a1 [Tests] run nyc on all tests 8476b91 [readme] fix repo URLs, remove defunct badges 126288e [Dev Deps] update eslint , @ljharb/eslint-config , aud , auto-changelog , core-js , get-own-property-symbols d84bdfa [Tests] fix linting errors 0df3070 [actions] add \"Allow Edits\" workflow 1e6bc29 [Dev Deps] update eslint , @ljharb/eslint-config , tape 36cea2a [Dev Deps] update eslint , @ljharb/eslint-config , aud , tape 1278338 [Dev Deps] update eslint , @ljharb/eslint-config , aud , tape 1493254 [Dev Deps] update eslint , @ljharb/eslint-config , core-js b090bf2 [actions] switch Automatic Rebase workflow to pull_request_target event 4addb7a [Dev Deps] update auto-changelog , tape 81d0baf [Dev Deps] update auto-changelog ; add aud 1a4e561 [readme] remove unused testling URLs 3000941 [Tests] only audit prod deps 692e974 [Dev Deps] update @ljharb/eslint-config 51c946c","title":"Commits"},{"location":"node_modules/has-symbols/CHANGELOG/#v101-2019-11-16","text":"","title":"v1.0.1 - 2019-11-16"},{"location":"node_modules/has-symbols/CHANGELOG/#commits_1","text":"[Tests] use shared travis-ci configs ce396c9 [Tests] up to node v12.4 , v11.15 , v10.15 , v9.11 , v8.15 , v7.10 , v6.17 , v4.9 ; use nvm install-latest-npm 0690732 [meta] add auto-changelog 2163d0b [Dev Deps] update eslint , @ljharb/eslint-config , core-js , safe-publish-latest , tape 8e0951f [actions] add automatic rebasing / merge commit blocking b09cdb7 [Dev Deps] update eslint , @ljharb/eslint-config , safe-publish-latest , core-js , get-own-property-symbols , tape 1dd42cd [meta] create FUNDING.yml aa57a17 Only apps should have lockfiles a2d8bea [Tests] use npx aud instead of nsp or npm audit with hoops 9e96cb7 [meta] add funding field a0b32cf [Dev Deps] update safe-publish-latest cb9f0a5","title":"Commits"},{"location":"node_modules/has-symbols/CHANGELOG/#v100-2016-09-19","text":"","title":"v1.0.0 - 2016-09-19"},{"location":"node_modules/has-symbols/CHANGELOG/#commits_2","text":"Tests. ecb6eb9 package.json 88a337c Initial commit 42e1e55 Initial implementation. 33f5cc6 read me 01f1170","title":"Commits"},{"location":"node_modules/has-tostringtag/","text":"has-tostringtag Determine if the JS environment has Symbol.toStringTag support. Supports spec, or shams. Example var hasSymbolToStringTag = require ( 'has-tostringtag' ); hasSymbolToStringTag () === true ; // if the environment has native Symbol.toStringTag support. Not polyfillable, not forgeable. var hasSymbolToStringTagKinda = require ( 'has-tostringtag/shams' ); hasSymbolToStringTagKinda () === true ; // if the environment has a Symbol.toStringTag sham that mostly follows the spec. Supported Symbol shams get-own-property-symbols npm | github core-js npm | github Tests Simply clone the repo, npm install , and run npm test","title":"has-tostringtag <sup>[![Version Badge][2]][1]</sup>"},{"location":"node_modules/has-tostringtag/#has-tostringtag","text":"Determine if the JS environment has Symbol.toStringTag support. Supports spec, or shams.","title":"has-tostringtag "},{"location":"node_modules/has-tostringtag/#example","text":"var hasSymbolToStringTag = require ( 'has-tostringtag' ); hasSymbolToStringTag () === true ; // if the environment has native Symbol.toStringTag support. Not polyfillable, not forgeable. var hasSymbolToStringTagKinda = require ( 'has-tostringtag/shams' ); hasSymbolToStringTagKinda () === true ; // if the environment has a Symbol.toStringTag sham that mostly follows the spec.","title":"Example"},{"location":"node_modules/has-tostringtag/#supported-symbol-shams","text":"get-own-property-symbols npm | github core-js npm | github","title":"Supported Symbol shams"},{"location":"node_modules/has-tostringtag/#tests","text":"Simply clone the repo, npm install , and run npm test","title":"Tests"},{"location":"node_modules/has-tostringtag/CHANGELOG/","text":"Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning . v1.0.0 - 2021-08-05 Commits Tests 6b6f573 Initial commit 2f8190e [meta] do not publish github action workflow files 6e08cc4 readme 94bed6c npm init be67840 Implementation c4914ec [meta] use auto-changelog 4aaf768 Only apps should have lockfiles bc4d99e [meta] add safe-publish-latest 6523c05","title":"Changelog"},{"location":"node_modules/has-tostringtag/CHANGELOG/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"node_modules/has-tostringtag/CHANGELOG/#v100-2021-08-05","text":"","title":"v1.0.0 - 2021-08-05"},{"location":"node_modules/has-tostringtag/CHANGELOG/#commits","text":"Tests 6b6f573 Initial commit 2f8190e [meta] do not publish github action workflow files 6e08cc4 readme 94bed6c npm init be67840 Implementation c4914ec [meta] use auto-changelog 4aaf768 Only apps should have lockfiles bc4d99e [meta] add safe-publish-latest 6523c05","title":"Commits"},{"location":"node_modules/hosted-git-info/","text":"hosted-git-info This will let you identify and transform various git hosts URLs between protocols. It also can tell you what the URL is for the raw path for particular file for direct access without git. Example var hostedGitInfo = require ( \"hosted-git-info\" ) var info = hostedGitInfo . fromUrl ( \"git@github.com:npm/hosted-git-info.git\" , opts ) /* info looks like: { type: \"github\", domain: \"github.com\", user: \"npm\", project: \"hosted-git-info\" } */ If the URL can't be matched with a git host, null will be returned. We can match git, ssh and https urls. Additionally, we can match ssh connect strings ( git@github.com:npm/hosted-git-info ) and shortcuts (eg, github:npm/hosted-git-info ). Github specifically, is detected in the case of a third, unprefixed, form: npm/hosted-git-info . If it does match, the returned object has properties of: info.type -- The short name of the service info.domain -- The domain for git protocol use info.user -- The name of the user/org on the git host info.project -- The name of the project on the git host Version Contract The major version will be bumped any time\u2026 The constructor stops accepting URLs that it previously accepted. A method is removed. A method can no longer accept the number and type of arguments it previously accepted. A method can return a different type than it currently returns. Implications: I do not consider the specific format of the urls returned from, say .https() to be a part of the contract. The contract is that it will return a string that can be used to fetch the repo via HTTPS. But what that string looks like, specifically, can change. Dropping support for a hosted git provider would constitute a breaking change. Usage var info = hostedGitInfo.fromUrl(gitSpecifier[, options]) gitSpecifer is a URL of a git repository or a SCP-style specifier of one. options is an optional object. It can have the following properties: noCommittish \u2014 If true then committishes won't be included in generated URLs. noGitPlus \u2014 If true then git+ won't be prefixed on URLs. Methods All of the methods take the same options as the fromUrl factory. Options provided to a method override those provided to the constructor. info.file(path, opts) Given the path of a file relative to the repository, returns a URL for directly fetching it from the githost. If no committish was set then master will be used as the default. For example hostedGitInfo.fromUrl(\"git@github.com:npm/hosted-git-info.git#v1.0.0\").file(\"package.json\") would return https://raw.githubusercontent.com/npm/hosted-git-info/v1.0.0/package.json info.shortcut(opts) eg, github:npm/hosted-git-info info.browse(path, fragment, opts) eg, https://github.com/npm/hosted-git-info/tree/v1.2.0 , https://github.com/npm/hosted-git-info/tree/v1.2.0/package.json , https://github.com/npm/hosted-git-info/tree/v1.2.0/REAMDE.md#supported-hosts info.bugs(opts) eg, https://github.com/npm/hosted-git-info/issues info.docs(opts) eg, https://github.com/npm/hosted-git-info/tree/v1.2.0#readme info.https(opts) eg, git+https://github.com/npm/hosted-git-info.git info.sshurl(opts) eg, git+ssh://git@github.com/npm/hosted-git-info.git info.ssh(opts) eg, git@github.com:npm/hosted-git-info.git info.path(opts) eg, npm/hosted-git-info info.tarball(opts) eg, https://github.com/npm/hosted-git-info/archive/v1.2.0.tar.gz info.getDefaultRepresentation() Returns the default output type. The default output type is based on the string you passed in to be parsed info.toString(opts) Uses the getDefaultRepresentation to call one of the other methods to get a URL for this resource. As such hostedGitInfo.fromUrl(url).toString() will give you a normalized version of the URL that still uses the same protocol. Shortcuts will still be returned as shortcuts, but the special case github form of org/project will be normalized to github:org/project . SSH connect strings will be normalized into git+ssh URLs. Supported hosts Currently this supports Github, Bitbucket and Gitlab. Pull requests for additional hosts welcome.","title":"hosted-git-info"},{"location":"node_modules/hosted-git-info/#hosted-git-info","text":"This will let you identify and transform various git hosts URLs between protocols. It also can tell you what the URL is for the raw path for particular file for direct access without git.","title":"hosted-git-info"},{"location":"node_modules/hosted-git-info/#example","text":"var hostedGitInfo = require ( \"hosted-git-info\" ) var info = hostedGitInfo . fromUrl ( \"git@github.com:npm/hosted-git-info.git\" , opts ) /* info looks like: { type: \"github\", domain: \"github.com\", user: \"npm\", project: \"hosted-git-info\" } */ If the URL can't be matched with a git host, null will be returned. We can match git, ssh and https urls. Additionally, we can match ssh connect strings ( git@github.com:npm/hosted-git-info ) and shortcuts (eg, github:npm/hosted-git-info ). Github specifically, is detected in the case of a third, unprefixed, form: npm/hosted-git-info . If it does match, the returned object has properties of: info.type -- The short name of the service info.domain -- The domain for git protocol use info.user -- The name of the user/org on the git host info.project -- The name of the project on the git host","title":"Example"},{"location":"node_modules/hosted-git-info/#version-contract","text":"The major version will be bumped any time\u2026 The constructor stops accepting URLs that it previously accepted. A method is removed. A method can no longer accept the number and type of arguments it previously accepted. A method can return a different type than it currently returns. Implications: I do not consider the specific format of the urls returned from, say .https() to be a part of the contract. The contract is that it will return a string that can be used to fetch the repo via HTTPS. But what that string looks like, specifically, can change. Dropping support for a hosted git provider would constitute a breaking change.","title":"Version Contract"},{"location":"node_modules/hosted-git-info/#usage","text":"","title":"Usage"},{"location":"node_modules/hosted-git-info/#var-info-hostedgitinfofromurlgitspecifier-options","text":"gitSpecifer is a URL of a git repository or a SCP-style specifier of one. options is an optional object. It can have the following properties: noCommittish \u2014 If true then committishes won't be included in generated URLs. noGitPlus \u2014 If true then git+ won't be prefixed on URLs.","title":"var info = hostedGitInfo.fromUrl(gitSpecifier[, options])"},{"location":"node_modules/hosted-git-info/#methods","text":"All of the methods take the same options as the fromUrl factory. Options provided to a method override those provided to the constructor. info.file(path, opts) Given the path of a file relative to the repository, returns a URL for directly fetching it from the githost. If no committish was set then master will be used as the default. For example hostedGitInfo.fromUrl(\"git@github.com:npm/hosted-git-info.git#v1.0.0\").file(\"package.json\") would return https://raw.githubusercontent.com/npm/hosted-git-info/v1.0.0/package.json info.shortcut(opts) eg, github:npm/hosted-git-info info.browse(path, fragment, opts) eg, https://github.com/npm/hosted-git-info/tree/v1.2.0 , https://github.com/npm/hosted-git-info/tree/v1.2.0/package.json , https://github.com/npm/hosted-git-info/tree/v1.2.0/REAMDE.md#supported-hosts info.bugs(opts) eg, https://github.com/npm/hosted-git-info/issues info.docs(opts) eg, https://github.com/npm/hosted-git-info/tree/v1.2.0#readme info.https(opts) eg, git+https://github.com/npm/hosted-git-info.git info.sshurl(opts) eg, git+ssh://git@github.com/npm/hosted-git-info.git info.ssh(opts) eg, git@github.com:npm/hosted-git-info.git info.path(opts) eg, npm/hosted-git-info info.tarball(opts) eg, https://github.com/npm/hosted-git-info/archive/v1.2.0.tar.gz info.getDefaultRepresentation() Returns the default output type. The default output type is based on the string you passed in to be parsed info.toString(opts) Uses the getDefaultRepresentation to call one of the other methods to get a URL for this resource. As such hostedGitInfo.fromUrl(url).toString() will give you a normalized version of the URL that still uses the same protocol. Shortcuts will still be returned as shortcuts, but the special case github form of org/project will be normalized to github:org/project . SSH connect strings will be normalized into git+ssh URLs.","title":"Methods"},{"location":"node_modules/hosted-git-info/#supported-hosts","text":"Currently this supports Github, Bitbucket and Gitlab. Pull requests for additional hosts welcome.","title":"Supported hosts"},{"location":"node_modules/hosted-git-info/CHANGELOG/","text":"Change Log All notable changes to this project will be documented in this file. See standard-version for commit guidelines. 2.8.9 (2021-04-07) Bug Fixes backport regex fix from #76 ( 29adfe5 ), closes #84 2.8.8 (2020-02-29) Bug Fixes #61 & #65 addressing issues w/ url.URL implmentation which regressed node 6 support ( 5038b18 ), closes #66 2.8.7 (2020-02-26) Bug Fixes Do not attempt to use url.URL when unavailable ( 2d0bb66 ), closes #61 #62 Do not pass scp-style URLs to the WhatWG url.URL ( f2cdfcf ), closes #60 2.8.6 (2020-02-25) 2.8.5 (2019-10-07) Bug Fixes updated pathmatch for gitlab ( e8325b5 ), closes #51 updated pathmatch for gitlab ( ffe056f ) 2.8.4 (2019-08-12) 2.8.3 (2019-08-12) 2.8.2 (2019-08-05) Bug Fixes http protocol use sshurl by default ( 3b1d629 ), closes #48 2.8.1 (2019-08-05) Bug Fixes ignore noCommittish on tarball url generation ( 5d4a8d7 ) use gist tarball url that works for anonymous gists ( 1692435 ) 2.8.0 (2019-08-05) Bug Fixes Allow slashes in gitlab project section ( bbcf7b2 ), closes #46 #43 git-host: disallow URI-encoded slash (%2F) in path ( 3776fa5 ), closes #44 gitlab: Do not URL encode slashes in project name for GitLab https URL ( cbf04f9 ), closes #47 do not allow invalid gist urls ( d5cf830 ) cache: Switch to lru-cache to save ourselves from unlimited memory consumption ( e518222 ), closes #38 Features give these objects a name ( 60abaea ) 2.7.1 (2018-07-07) Bug Fixes index: Guard against non-string types ( 5bc580d ) parse: Crash on strings that parse to having no host ( c931482 ), closes #35 2.7.0 (2018-07-06) Bug Fixes github tarball: update github tarballtemplate ( 6efd582 ), closes #34 gitlab docs: switched to lowercase anchors for readmes ( 701bcd1 ) Features all: Support www. prefixes on hostnames ( 3349575 ), closes #32 2.6.1 (2018-06-25) Bug Fixes Revert: \"compat: remove Object.assign fallback ( #25 )\" ( cce5a62 ) Revert: \"git-host: fix forgotten extend()\" ( a815ec9 ) 2.6.0 (2018-03-07) Bug Fixes compat: remove Object.assign fallback ( #25 ) ( 627ab55 ) git-host: fix forgotten extend() ( eba1f7b ) Features browse: fragment support for browse() ( #28 ) ( cd5e5bb )","title":"Change Log"},{"location":"node_modules/hosted-git-info/CHANGELOG/#change-log","text":"All notable changes to this project will be documented in this file. See standard-version for commit guidelines.","title":"Change Log"},{"location":"node_modules/hosted-git-info/CHANGELOG/#289-2021-04-07","text":"","title":"2.8.9 (2021-04-07)"},{"location":"node_modules/hosted-git-info/CHANGELOG/#bug-fixes","text":"backport regex fix from #76 ( 29adfe5 ), closes #84","title":"Bug Fixes"},{"location":"node_modules/hosted-git-info/CHANGELOG/#288-2020-02-29","text":"","title":"2.8.8 (2020-02-29)"},{"location":"node_modules/hosted-git-info/CHANGELOG/#bug-fixes_1","text":"#61 & #65 addressing issues w/ url.URL implmentation which regressed node 6 support ( 5038b18 ), closes #66","title":"Bug Fixes"},{"location":"node_modules/hosted-git-info/CHANGELOG/#287-2020-02-26","text":"","title":"2.8.7 (2020-02-26)"},{"location":"node_modules/hosted-git-info/CHANGELOG/#bug-fixes_2","text":"Do not attempt to use url.URL when unavailable ( 2d0bb66 ), closes #61 #62 Do not pass scp-style URLs to the WhatWG url.URL ( f2cdfcf ), closes #60","title":"Bug Fixes"},{"location":"node_modules/hosted-git-info/CHANGELOG/#286-2020-02-25","text":"","title":"2.8.6 (2020-02-25)"},{"location":"node_modules/hosted-git-info/CHANGELOG/#285-2019-10-07","text":"","title":"2.8.5 (2019-10-07)"},{"location":"node_modules/hosted-git-info/CHANGELOG/#bug-fixes_3","text":"updated pathmatch for gitlab ( e8325b5 ), closes #51 updated pathmatch for gitlab ( ffe056f )","title":"Bug Fixes"},{"location":"node_modules/hosted-git-info/CHANGELOG/#284-2019-08-12","text":"","title":"2.8.4 (2019-08-12)"},{"location":"node_modules/hosted-git-info/CHANGELOG/#283-2019-08-12","text":"","title":"2.8.3 (2019-08-12)"},{"location":"node_modules/hosted-git-info/CHANGELOG/#282-2019-08-05","text":"","title":"2.8.2 (2019-08-05)"},{"location":"node_modules/hosted-git-info/CHANGELOG/#bug-fixes_4","text":"http protocol use sshurl by default ( 3b1d629 ), closes #48","title":"Bug Fixes"},{"location":"node_modules/hosted-git-info/CHANGELOG/#281-2019-08-05","text":"","title":"2.8.1 (2019-08-05)"},{"location":"node_modules/hosted-git-info/CHANGELOG/#bug-fixes_5","text":"ignore noCommittish on tarball url generation ( 5d4a8d7 ) use gist tarball url that works for anonymous gists ( 1692435 )","title":"Bug Fixes"},{"location":"node_modules/hosted-git-info/CHANGELOG/#280-2019-08-05","text":"","title":"2.8.0 (2019-08-05)"},{"location":"node_modules/hosted-git-info/CHANGELOG/#bug-fixes_6","text":"Allow slashes in gitlab project section ( bbcf7b2 ), closes #46 #43 git-host: disallow URI-encoded slash (%2F) in path ( 3776fa5 ), closes #44 gitlab: Do not URL encode slashes in project name for GitLab https URL ( cbf04f9 ), closes #47 do not allow invalid gist urls ( d5cf830 ) cache: Switch to lru-cache to save ourselves from unlimited memory consumption ( e518222 ), closes #38","title":"Bug Fixes"},{"location":"node_modules/hosted-git-info/CHANGELOG/#features","text":"give these objects a name ( 60abaea )","title":"Features"},{"location":"node_modules/hosted-git-info/CHANGELOG/#271-2018-07-07","text":"","title":"2.7.1 (2018-07-07)"},{"location":"node_modules/hosted-git-info/CHANGELOG/#bug-fixes_7","text":"index: Guard against non-string types ( 5bc580d ) parse: Crash on strings that parse to having no host ( c931482 ), closes #35","title":"Bug Fixes"},{"location":"node_modules/hosted-git-info/CHANGELOG/#270-2018-07-06","text":"","title":"2.7.0 (2018-07-06)"},{"location":"node_modules/hosted-git-info/CHANGELOG/#bug-fixes_8","text":"github tarball: update github tarballtemplate ( 6efd582 ), closes #34 gitlab docs: switched to lowercase anchors for readmes ( 701bcd1 )","title":"Bug Fixes"},{"location":"node_modules/hosted-git-info/CHANGELOG/#features_1","text":"all: Support www. prefixes on hostnames ( 3349575 ), closes #32","title":"Features"},{"location":"node_modules/hosted-git-info/CHANGELOG/#261-2018-06-25","text":"","title":"2.6.1 (2018-06-25)"},{"location":"node_modules/hosted-git-info/CHANGELOG/#bug-fixes_9","text":"Revert: \"compat: remove Object.assign fallback ( #25 )\" ( cce5a62 ) Revert: \"git-host: fix forgotten extend()\" ( a815ec9 )","title":"Bug Fixes"},{"location":"node_modules/hosted-git-info/CHANGELOG/#260-2018-03-07","text":"","title":"2.6.0 (2018-03-07)"},{"location":"node_modules/hosted-git-info/CHANGELOG/#bug-fixes_10","text":"compat: remove Object.assign fallback ( #25 ) ( 627ab55 ) git-host: fix forgotten extend() ( eba1f7b )","title":"Bug Fixes"},{"location":"node_modules/hosted-git-info/CHANGELOG/#features_2","text":"browse: fragment support for browse() ( #28 ) ( cd5e5bb )","title":"Features"},{"location":"node_modules/inflight/","text":"inflight Add callbacks to requests in flight to avoid async duplication USAGE var inflight = require ( 'inflight' ) // some request that does some stuff function req ( key , callback ) { // key is any random string. like a url or filename or whatever. // // will return either a falsey value, indicating that the // request for this key is already in flight, or a new callback // which when called will call all callbacks passed to inflightk // with the same key callback = inflight ( key , callback ) // If we got a falsey value back, then there's already a req going if ( ! callback ) return // this is where you'd fetch the url or whatever // callback is also once()-ified, so it can safely be assigned // to multiple events etc. First call wins. setTimeout ( function () { callback ( null , key ) }, 100 ) } // only assigns a single setTimeout // when it dings, all cbs get called req ( 'foo' , cb1 ) req ( 'foo' , cb2 ) req ( 'foo' , cb3 ) req ( 'foo' , cb4 )","title":"inflight"},{"location":"node_modules/inflight/#inflight","text":"Add callbacks to requests in flight to avoid async duplication","title":"inflight"},{"location":"node_modules/inflight/#usage","text":"var inflight = require ( 'inflight' ) // some request that does some stuff function req ( key , callback ) { // key is any random string. like a url or filename or whatever. // // will return either a falsey value, indicating that the // request for this key is already in flight, or a new callback // which when called will call all callbacks passed to inflightk // with the same key callback = inflight ( key , callback ) // If we got a falsey value back, then there's already a req going if ( ! callback ) return // this is where you'd fetch the url or whatever // callback is also once()-ified, so it can safely be assigned // to multiple events etc. First call wins. setTimeout ( function () { callback ( null , key ) }, 100 ) } // only assigns a single setTimeout // when it dings, all cbs get called req ( 'foo' , cb1 ) req ( 'foo' , cb2 ) req ( 'foo' , cb3 ) req ( 'foo' , cb4 )","title":"USAGE"},{"location":"node_modules/inherits/","text":"Browser-friendly inheritance fully compatible with standard node.js inherits . This package exports standard inherits from node.js util module in node environment, but also provides alternative browser-friendly implementation through browser field . Alternative implementation is a literal copy of standard one located in standalone module to avoid requiring of util . It also has a shim for old browsers with no Object.create support. While keeping you sure you are using standard inherits implementation in node.js environment, it allows bundlers such as browserify to not include full util package to your client code if all you need is just inherits function. It worth, because browser shim for util package is large and inherits is often the single function you need from it. It's recommended to use this package instead of require('util').inherits for any code that has chances to be used not only in node.js but in browser too. usage var inherits = require ( 'inherits' ); // then use exactly as the standard one note on version ~1.0 Version ~1.0 had completely different motivation and is not compatible neither with 2.0 nor with standard node.js inherits . If you are using version ~1.0 and planning to switch to ~2.0, be careful: new version uses super_ instead of super for referencing superclass new version overwrites current prototype while old one preserves any existing fields on it","title":"Index"},{"location":"node_modules/inherits/#usage","text":"var inherits = require ( 'inherits' ); // then use exactly as the standard one","title":"usage"},{"location":"node_modules/inherits/#note-on-version-10","text":"Version ~1.0 had completely different motivation and is not compatible neither with 2.0 nor with standard node.js inherits . If you are using version ~1.0 and planning to switch to ~2.0, be careful: new version uses super_ instead of super for referencing superclass new version overwrites current prototype while old one preserves any existing fields on it","title":"note on version ~1.0"},{"location":"node_modules/is-alphabetical/readme/","text":"is-alphabetical Check if a character is alphabetical. Install npm : npm install is-alphabetical Use var alphabetical = require ( 'is-alphabetical' ) alphabetical ( 'a' ) // => true alphabetical ( 'B' ) // => true alphabetical ( '0' ) // => false alphabetical ( '\ud83d\udca9' ) // => false API alphabetical(character|code) Check whether the given character code ( number ), or the character code at the first position ( string ), is alphabetical. Related is-decimal is-hexadecimal is-alphanumerical is-whitespace-character is-word-character License MIT \u00a9 Titus Wormer","title":"is-alphabetical"},{"location":"node_modules/is-alphabetical/readme/#is-alphabetical","text":"Check if a character is alphabetical.","title":"is-alphabetical"},{"location":"node_modules/is-alphabetical/readme/#install","text":"npm : npm install is-alphabetical","title":"Install"},{"location":"node_modules/is-alphabetical/readme/#use","text":"var alphabetical = require ( 'is-alphabetical' ) alphabetical ( 'a' ) // => true alphabetical ( 'B' ) // => true alphabetical ( '0' ) // => false alphabetical ( '\ud83d\udca9' ) // => false","title":"Use"},{"location":"node_modules/is-alphabetical/readme/#api","text":"","title":"API"},{"location":"node_modules/is-alphabetical/readme/#alphabeticalcharactercode","text":"Check whether the given character code ( number ), or the character code at the first position ( string ), is alphabetical.","title":"alphabetical(character|code)"},{"location":"node_modules/is-alphabetical/readme/#related","text":"is-decimal is-hexadecimal is-alphanumerical is-whitespace-character is-word-character","title":"Related"},{"location":"node_modules/is-alphabetical/readme/#license","text":"MIT \u00a9 Titus Wormer","title":"License"},{"location":"node_modules/is-alphanumerical/readme/","text":"is-alphanumerical Check if a character is alphanumerical ( [a-zA-Z0-9] ). Install npm : npm install is-alphanumerical Use var alphanumerical = require ( 'is-alphanumerical' ) alphanumerical ( 'a' ) // => true alphanumerical ( 'Z' ) // => true alphanumerical ( '0' ) // => true alphanumerical ( ' ' ) // => false alphanumerical ( '\ud83d\udca9' ) // => false API alphanumerical(character) Check whether the given character code ( number ), or the character code at the first position ( string ), is alphanumerical. Related is-alphabetical is-decimal is-hexadecimal is-whitespace-character is-word-character License MIT \u00a9 Titus Wormer","title":"is-alphanumerical"},{"location":"node_modules/is-alphanumerical/readme/#is-alphanumerical","text":"Check if a character is alphanumerical ( [a-zA-Z0-9] ).","title":"is-alphanumerical"},{"location":"node_modules/is-alphanumerical/readme/#install","text":"npm : npm install is-alphanumerical","title":"Install"},{"location":"node_modules/is-alphanumerical/readme/#use","text":"var alphanumerical = require ( 'is-alphanumerical' ) alphanumerical ( 'a' ) // => true alphanumerical ( 'Z' ) // => true alphanumerical ( '0' ) // => true alphanumerical ( ' ' ) // => false alphanumerical ( '\ud83d\udca9' ) // => false","title":"Use"},{"location":"node_modules/is-alphanumerical/readme/#api","text":"","title":"API"},{"location":"node_modules/is-alphanumerical/readme/#alphanumericalcharacter","text":"Check whether the given character code ( number ), or the character code at the first position ( string ), is alphanumerical.","title":"alphanumerical(character)"},{"location":"node_modules/is-alphanumerical/readme/#related","text":"is-alphabetical is-decimal is-hexadecimal is-whitespace-character is-word-character","title":"Related"},{"location":"node_modules/is-alphanumerical/readme/#license","text":"MIT \u00a9 Titus Wormer","title":"License"},{"location":"node_modules/is-arguments/","text":"is-arguments Is this an arguments object? It's a harder question than you think. Example var isArguments = require ( 'is-arguments' ); var assert = require ( 'assert' ); assert . equal ( isArguments ({}), false ); assert . equal ( isArguments ([]), false ); ( function () { assert . equal ( isArguments ( arguments ), true ); }()) Caveats If you have modified an actual arguments object by giving it a Symbol.toStringTag property, then this package will return false . Tests Simply clone the repo, npm install , and run npm test","title":"is-arguments <sup>[![Version Badge][2]][1]</sup>"},{"location":"node_modules/is-arguments/#is-arguments","text":"Is this an arguments object? It's a harder question than you think.","title":"is-arguments "},{"location":"node_modules/is-arguments/#example","text":"var isArguments = require ( 'is-arguments' ); var assert = require ( 'assert' ); assert . equal ( isArguments ({}), false ); assert . equal ( isArguments ([]), false ); ( function () { assert . equal ( isArguments ( arguments ), true ); }())","title":"Example"},{"location":"node_modules/is-arguments/#caveats","text":"If you have modified an actual arguments object by giving it a Symbol.toStringTag property, then this package will return false .","title":"Caveats"},{"location":"node_modules/is-arguments/#tests","text":"Simply clone the repo, npm install , and run npm test","title":"Tests"},{"location":"node_modules/is-arguments/CHANGELOG/","text":"Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning . v1.1.1 - 2021-08-05 Commits [actions] use node/install instead of node/run ; use codecov action dd28b30 [meta] do not publish github action workflow files 87e489c [readme] fix repo URLs e2c2c6e [Dev Deps] update eslint , @ljharb/eslint-config , aud , tape b9ae62b [readme] add github actions/codecov badges 504c0a5 [Fix] use has-tostringtag to behave correctly in the presence of symbol shams dc29e52 [Dev Deps] update auto-changelog , eslint , tape a966d25 [Dev Deps] update eslint , @ljharb/eslint-config , tape 1218944 [meta] use prepublishOnly script for npm 7+ 757dbee [Deps] update call-bind b206f05 [actions] update workflows b89b2f1 v1.1.0 - 2020-12-04 Commits [Tests] use shared travis-ci configs fd59a37 [Tests] migrate tests to Github Actions 982a0d6 [Tests] remove jscs 927d4b5 [meta] add auto-changelog ef0634b [Tests] up to node v12.10 , v11.15 , v10.16 , v8.16 , v6.17 1689f8b [Tests] up to node v11.7 , v10.15 , v8.15 , v6.16 145aaeb [readme] fix repo URLs, remove defunct badges cc484a3 [Dev Deps] update eslint , @ljharb/eslint-config , aud , auto-changelog , tape c888738 [Tests] run nyc on all tests 0de8efb [actions] add automatic rebasing / merge commit blocking 818775a [Robustness] use call-bind 31d0199 [actions] add \"Allow Edits\" workflow 0c55f7d [meta] create FUNDING.yml ca7ed59 [Dev Deps] update eslint , @ljharb/eslint-config , aud , auto-changelog 1ae5053 [Dev Deps] update eslint , @ljharb/eslint-config , tape ; add safe-publish-latest 433f4a5 [Dev Deps] update eslint , @ljharb/eslint-config , covert , tape 78ea4e8 [Tests] use npm audit instead of nsp 07fb85b [Dev Deps] update eslint , @ljharb/eslint-config , tape 2204add [Dev Deps] update eslint , @ljharb/eslint-config , safe-publish-latest ce150c0 [Tests] fix tests from 0de8efb ee45fc3 [Tests] use npx aud instead of nsp or npm audit with hoops 03a312c [actions] switch Automatic Rebase workflow to pull_request_target event 25d2ef8 [Dev Deps] update auto-changelog , tape 0fe60b7 [Dev Deps] update @ljharb/eslint-config , tape 4a9cbd0 [Dev Deps] update auto-changelog ; add aud d9ff7d5 [meta] add funding field adec2d2 [Tests] only audit prod deps f474960 v1.0.4 - 2018-11-05 Commits [Fix] Fix errors about in operator. 4d12e23 v1.0.3 - 2018-11-02 Fixed [Fix] add awareness of Symbol.toStringTag #20 Commits [Tests] up to node v8.1 ; v7.10 , v6.11 , v4.8 ; improve matrix; newer npm fails on older node ea5f23c [Tests] up to node v9.1 , v8.9 , v6.12 ; use nvm install-latest-npm ; pin included builds to LTS. 697a0a1 [Tests] up to node v10.0 , v9.11 , v8.11 , v6.14 , v4.9 40045c5 [Dev Deps] update eslint , @ljharb/eslint-config , jscs , tape 08abc0d [Tests] up to node v11.1 , v10.13 , v8.12 bf8d275 [Tests] up to node v7.0 , v6.9 , v4.6 ; improve test matrix f813d86 [Dev Deps] update tape , jscs , eslint , @ljharb/eslint-config e4f9aee [Dev Deps] update jscs , eslint , @ljharb/eslint-config 6c98d11 [Dev Deps] update jscs , eslint , @ljharb/eslint-config 8e3178d package.json: use object form of \"author\", add \"contributors\" decc4fe [Dev Deps] update jscs , eslint , @ljharb/eslint-config 514902a [Tests] up to node v5.6 , v4.3 f11f47c [Dev Deps] add npm run security 4adf82c [Dev Deps] update tape , jscs , eslint , @ljharb/eslint-config f587aeb [Dev Deps] update eslint , @ljharb/eslint-config , nsp , tape 4f587bb [Tests] up to node v6.2 , v5.11 36939c5 [Dev Deps] update eslint , @ljharb/eslint-config , nsp , tape d779cc8 Only apps should have lockfiles f50ce65 [Dev Deps] update tape , jscs , eslint , @ljharb/eslint-config 3025559 [Dev Deps] update tape , jscs , eslint , @ljharb/eslint-config 3b9ddee [Tests] up to v5.8 , v4.4 d4902cf [Tests] fix npm upgrades for older nodes c617dd3 [Tests] up to node v5.3 cdd2a61 [Dev Deps] update eslint , @ljharb/eslint-config , tape 7719172 [Dev Deps] update es5-shim , tape , nsp , eslint 6a5f82b [Dev Deps] update tape , eslint , @ljharb/eslint-config c896c1c [Tests] Use pretest for running the linter. 83db117 [Dev Deps] update @ljharb/eslint-config , eslint 57fdc63 [Tests] up to node v7.2 aa3eacf [Tests] up to node v5.10 94ff6d7 [Tests] on node v4.2 cdb1fb5 v1.0.2 - 2015-09-21 Commits Update eslint , use my personal shared config. 8e211f4 In modern engines, only export the \"is standard arguments\" check. e8aa23f Update jscs , eslint , @ljharb/eslint-config 8a90bca Update eslint 2214b5d Update eslint ca97c5b [Dev Deps] update jscs ca6a477 Update covert , jscs , eslint 232d92a [Tests] up to io.js v3.3 , node v4.1 460d700 Test up to io.js v2.3 7ef2293 [Dev Deps] update tape , jscs , eslint , @ljharb/eslint-config 29f3d71 [Dev Deps] update tape , eslint , @ljharb/eslint-config 1c79a85 toString as a variable name breaks in some older browsers. 1e59f2b Update tape , eslint 1efbefd Test up to io.js v2.5 0760acc Test up to io.js v2.1 4c2245f [Dev Deps] update tape 348980e Switch from vb.teelaun.ch to versionbadg.es for the npm version badge SVG. 91d8c4f Update tape ec9b92a Update tape 6bc8969 Test on io.js v3.0 33d9578 v1.0.1 - 2015-04-29 Commits Update jscs , add npm run eslint 13a5f01 Using my standard jscs.json file d669fc4 Adding npm run lint ece5d05 Test on latest io.js 908b092 Adding license and downloads badges 05fd28b Make sure old and unstable nodes don't break Travis 16ee7ea All grade A-supported node / iojs versions now ship with an npm that understands ^ . 9846c79 Run travis-ci tests on iojs and node v0.12; speed up builds; allow 0.8 failures. 27c014d Use SVG instead of PNG badges ea01e68 Remove unused links in README f5baaff Test on latest io.js versions 293e2c4 Update tape , jscs d72ab08 Update jscs 5f6e6d4 Update tape , jscs 39ae55b Update tape , jscs 594d928 Updating dependencies 183ac15 Update tape 77b9cea Lock covert to v1.0.0. 28d9052 Updating tape d9ee2ac Updating jscs c0cab8f Updating jscs c59352a Run linter as part of tests 8b8154e Oops, properly running code coverage checks during tests. cc441d0 Updating covert. 142db90 Updating tape 265fd0f Updating tape 7e9aec6 Updating covert d96860a Updating tape 1ec32a0 Run code coverage as part of tests 155ab22 Coverage does not work currently on node 0.6. 9acf696 Testing node 0.6 again a23ca07 v1.0.0 - 2014-01-07 Commits :metal: 1.0.0 fc08874 v0.1.0 - 2014-01-07 Commits package.json c547055 read me! 72ed639 Initial commit d2e0264 Tests. 032ed16 Implementation. 71c312d Travis CI 5500a66 Running code coverage as part of tests. 88ad34a","title":"Changelog"},{"location":"node_modules/is-arguments/CHANGELOG/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"node_modules/is-arguments/CHANGELOG/#v111-2021-08-05","text":"","title":"v1.1.1 - 2021-08-05"},{"location":"node_modules/is-arguments/CHANGELOG/#commits","text":"[actions] use node/install instead of node/run ; use codecov action dd28b30 [meta] do not publish github action workflow files 87e489c [readme] fix repo URLs e2c2c6e [Dev Deps] update eslint , @ljharb/eslint-config , aud , tape b9ae62b [readme] add github actions/codecov badges 504c0a5 [Fix] use has-tostringtag to behave correctly in the presence of symbol shams dc29e52 [Dev Deps] update auto-changelog , eslint , tape a966d25 [Dev Deps] update eslint , @ljharb/eslint-config , tape 1218944 [meta] use prepublishOnly script for npm 7+ 757dbee [Deps] update call-bind b206f05 [actions] update workflows b89b2f1","title":"Commits"},{"location":"node_modules/is-arguments/CHANGELOG/#v110-2020-12-04","text":"","title":"v1.1.0 - 2020-12-04"},{"location":"node_modules/is-arguments/CHANGELOG/#commits_1","text":"[Tests] use shared travis-ci configs fd59a37 [Tests] migrate tests to Github Actions 982a0d6 [Tests] remove jscs 927d4b5 [meta] add auto-changelog ef0634b [Tests] up to node v12.10 , v11.15 , v10.16 , v8.16 , v6.17 1689f8b [Tests] up to node v11.7 , v10.15 , v8.15 , v6.16 145aaeb [readme] fix repo URLs, remove defunct badges cc484a3 [Dev Deps] update eslint , @ljharb/eslint-config , aud , auto-changelog , tape c888738 [Tests] run nyc on all tests 0de8efb [actions] add automatic rebasing / merge commit blocking 818775a [Robustness] use call-bind 31d0199 [actions] add \"Allow Edits\" workflow 0c55f7d [meta] create FUNDING.yml ca7ed59 [Dev Deps] update eslint , @ljharb/eslint-config , aud , auto-changelog 1ae5053 [Dev Deps] update eslint , @ljharb/eslint-config , tape ; add safe-publish-latest 433f4a5 [Dev Deps] update eslint , @ljharb/eslint-config , covert , tape 78ea4e8 [Tests] use npm audit instead of nsp 07fb85b [Dev Deps] update eslint , @ljharb/eslint-config , tape 2204add [Dev Deps] update eslint , @ljharb/eslint-config , safe-publish-latest ce150c0 [Tests] fix tests from 0de8efb ee45fc3 [Tests] use npx aud instead of nsp or npm audit with hoops 03a312c [actions] switch Automatic Rebase workflow to pull_request_target event 25d2ef8 [Dev Deps] update auto-changelog , tape 0fe60b7 [Dev Deps] update @ljharb/eslint-config , tape 4a9cbd0 [Dev Deps] update auto-changelog ; add aud d9ff7d5 [meta] add funding field adec2d2 [Tests] only audit prod deps f474960","title":"Commits"},{"location":"node_modules/is-arguments/CHANGELOG/#v104-2018-11-05","text":"","title":"v1.0.4 - 2018-11-05"},{"location":"node_modules/is-arguments/CHANGELOG/#commits_2","text":"[Fix] Fix errors about in operator. 4d12e23","title":"Commits"},{"location":"node_modules/is-arguments/CHANGELOG/#v103-2018-11-02","text":"","title":"v1.0.3 - 2018-11-02"},{"location":"node_modules/is-arguments/CHANGELOG/#fixed","text":"[Fix] add awareness of Symbol.toStringTag #20","title":"Fixed"},{"location":"node_modules/is-arguments/CHANGELOG/#commits_3","text":"[Tests] up to node v8.1 ; v7.10 , v6.11 , v4.8 ; improve matrix; newer npm fails on older node ea5f23c [Tests] up to node v9.1 , v8.9 , v6.12 ; use nvm install-latest-npm ; pin included builds to LTS. 697a0a1 [Tests] up to node v10.0 , v9.11 , v8.11 , v6.14 , v4.9 40045c5 [Dev Deps] update eslint , @ljharb/eslint-config , jscs , tape 08abc0d [Tests] up to node v11.1 , v10.13 , v8.12 bf8d275 [Tests] up to node v7.0 , v6.9 , v4.6 ; improve test matrix f813d86 [Dev Deps] update tape , jscs , eslint , @ljharb/eslint-config e4f9aee [Dev Deps] update jscs , eslint , @ljharb/eslint-config 6c98d11 [Dev Deps] update jscs , eslint , @ljharb/eslint-config 8e3178d package.json: use object form of \"author\", add \"contributors\" decc4fe [Dev Deps] update jscs , eslint , @ljharb/eslint-config 514902a [Tests] up to node v5.6 , v4.3 f11f47c [Dev Deps] add npm run security 4adf82c [Dev Deps] update tape , jscs , eslint , @ljharb/eslint-config f587aeb [Dev Deps] update eslint , @ljharb/eslint-config , nsp , tape 4f587bb [Tests] up to node v6.2 , v5.11 36939c5 [Dev Deps] update eslint , @ljharb/eslint-config , nsp , tape d779cc8 Only apps should have lockfiles f50ce65 [Dev Deps] update tape , jscs , eslint , @ljharb/eslint-config 3025559 [Dev Deps] update tape , jscs , eslint , @ljharb/eslint-config 3b9ddee [Tests] up to v5.8 , v4.4 d4902cf [Tests] fix npm upgrades for older nodes c617dd3 [Tests] up to node v5.3 cdd2a61 [Dev Deps] update eslint , @ljharb/eslint-config , tape 7719172 [Dev Deps] update es5-shim , tape , nsp , eslint 6a5f82b [Dev Deps] update tape , eslint , @ljharb/eslint-config c896c1c [Tests] Use pretest for running the linter. 83db117 [Dev Deps] update @ljharb/eslint-config , eslint 57fdc63 [Tests] up to node v7.2 aa3eacf [Tests] up to node v5.10 94ff6d7 [Tests] on node v4.2 cdb1fb5","title":"Commits"},{"location":"node_modules/is-arguments/CHANGELOG/#v102-2015-09-21","text":"","title":"v1.0.2 - 2015-09-21"},{"location":"node_modules/is-arguments/CHANGELOG/#commits_4","text":"Update eslint , use my personal shared config. 8e211f4 In modern engines, only export the \"is standard arguments\" check. e8aa23f Update jscs , eslint , @ljharb/eslint-config 8a90bca Update eslint 2214b5d Update eslint ca97c5b [Dev Deps] update jscs ca6a477 Update covert , jscs , eslint 232d92a [Tests] up to io.js v3.3 , node v4.1 460d700 Test up to io.js v2.3 7ef2293 [Dev Deps] update tape , jscs , eslint , @ljharb/eslint-config 29f3d71 [Dev Deps] update tape , eslint , @ljharb/eslint-config 1c79a85 toString as a variable name breaks in some older browsers. 1e59f2b Update tape , eslint 1efbefd Test up to io.js v2.5 0760acc Test up to io.js v2.1 4c2245f [Dev Deps] update tape 348980e Switch from vb.teelaun.ch to versionbadg.es for the npm version badge SVG. 91d8c4f Update tape ec9b92a Update tape 6bc8969 Test on io.js v3.0 33d9578","title":"Commits"},{"location":"node_modules/is-arguments/CHANGELOG/#v101-2015-04-29","text":"","title":"v1.0.1 - 2015-04-29"},{"location":"node_modules/is-arguments/CHANGELOG/#commits_5","text":"Update jscs , add npm run eslint 13a5f01 Using my standard jscs.json file d669fc4 Adding npm run lint ece5d05 Test on latest io.js 908b092 Adding license and downloads badges 05fd28b Make sure old and unstable nodes don't break Travis 16ee7ea All grade A-supported node / iojs versions now ship with an npm that understands ^ . 9846c79 Run travis-ci tests on iojs and node v0.12; speed up builds; allow 0.8 failures. 27c014d Use SVG instead of PNG badges ea01e68 Remove unused links in README f5baaff Test on latest io.js versions 293e2c4 Update tape , jscs d72ab08 Update jscs 5f6e6d4 Update tape , jscs 39ae55b Update tape , jscs 594d928 Updating dependencies 183ac15 Update tape 77b9cea Lock covert to v1.0.0. 28d9052 Updating tape d9ee2ac Updating jscs c0cab8f Updating jscs c59352a Run linter as part of tests 8b8154e Oops, properly running code coverage checks during tests. cc441d0 Updating covert. 142db90 Updating tape 265fd0f Updating tape 7e9aec6 Updating covert d96860a Updating tape 1ec32a0 Run code coverage as part of tests 155ab22 Coverage does not work currently on node 0.6. 9acf696 Testing node 0.6 again a23ca07","title":"Commits"},{"location":"node_modules/is-arguments/CHANGELOG/#v100-2014-01-07","text":"","title":"v1.0.0 - 2014-01-07"},{"location":"node_modules/is-arguments/CHANGELOG/#commits_6","text":":metal: 1.0.0 fc08874","title":"Commits"},{"location":"node_modules/is-arguments/CHANGELOG/#v010-2014-01-07","text":"","title":"v0.1.0 - 2014-01-07"},{"location":"node_modules/is-arguments/CHANGELOG/#commits_7","text":"package.json c547055 read me! 72ed639 Initial commit d2e0264 Tests. 032ed16 Implementation. 71c312d Travis CI 5500a66 Running code coverage as part of tests. 88ad34a","title":"Commits"},{"location":"node_modules/is-arrayish/","text":"node-is-arrayish Determines if an object can be used like an Array Example var isArrayish = require ( 'is-arrayish' ); isArrayish ([]); // true isArrayish ({ __proto__ : []}); // true isArrayish ({}); // false isArrayish ({ length : 10 }); // false License Licensed under the MIT License . You can find a copy of it in LICENSE .","title":"node-is-arrayish [![Travis-CI.org Build Status](https://img.shields.io/travis/Qix-/node-is-arrayish.svg?style=flat-square)](https://travis-ci.org/Qix-/node-is-arrayish) [![Coveralls.io Coverage Rating](https://img.shields.io/coveralls/Qix-/node-is-arrayish.svg?style=flat-square)](https://coveralls.io/r/Qix-/node-is-arrayish)"},{"location":"node_modules/is-arrayish/#node-is-arrayish","text":"Determines if an object can be used like an Array","title":"node-is-arrayish"},{"location":"node_modules/is-arrayish/#example","text":"var isArrayish = require ( 'is-arrayish' ); isArrayish ([]); // true isArrayish ({ __proto__ : []}); // true isArrayish ({}); // false isArrayish ({ length : 10 }); // false","title":"Example"},{"location":"node_modules/is-arrayish/#license","text":"Licensed under the MIT License . You can find a copy of it in LICENSE .","title":"License"},{"location":"node_modules/is-buffer/","text":"is-buffer Determine if an object is a Buffer (including the browserify Buffer ) Why not use Buffer.isBuffer ? This module lets you check if an object is a Buffer without using Buffer.isBuffer (which includes the whole buffer module in browserify ). It's future-proof and works in node too! install npm install is-buffer usage var isBuffer = require ( 'is-buffer' ) isBuffer ( new Buffer ( 4 )) // true isBuffer ( undefined ) // false isBuffer ( null ) // false isBuffer ( '' ) // false isBuffer ( true ) // false isBuffer ( false ) // false isBuffer ( 0 ) // false isBuffer ( 1 ) // false isBuffer ( 1.0 ) // false isBuffer ( 'string' ) // false isBuffer ({}) // false isBuffer ( function foo () {}) // false license MIT. Copyright (C) Feross Aboukhadijeh .","title":"is-buffer [![travis][travis-image]][travis-url] [![npm][npm-image]][npm-url] [![downloads][downloads-image]][downloads-url] [![javascript style guide][standard-image]][standard-url]"},{"location":"node_modules/is-buffer/#is-buffer","text":"","title":"is-buffer"},{"location":"node_modules/is-buffer/#determine-if-an-object-is-a-buffer-including-the-browserify-buffer","text":"","title":"Determine if an object is a Buffer (including the browserify Buffer)"},{"location":"node_modules/is-buffer/#why-not-use-bufferisbuffer","text":"This module lets you check if an object is a Buffer without using Buffer.isBuffer (which includes the whole buffer module in browserify ). It's future-proof and works in node too!","title":"Why not use Buffer.isBuffer?"},{"location":"node_modules/is-buffer/#install","text":"npm install is-buffer","title":"install"},{"location":"node_modules/is-buffer/#usage","text":"var isBuffer = require ( 'is-buffer' ) isBuffer ( new Buffer ( 4 )) // true isBuffer ( undefined ) // false isBuffer ( null ) // false isBuffer ( '' ) // false isBuffer ( true ) // false isBuffer ( false ) // false isBuffer ( 0 ) // false isBuffer ( 1 ) // false isBuffer ( 1.0 ) // false isBuffer ( 'string' ) // false isBuffer ({}) // false isBuffer ( function foo () {}) // false","title":"usage"},{"location":"node_modules/is-buffer/#license","text":"MIT. Copyright (C) Feross Aboukhadijeh .","title":"license"},{"location":"node_modules/is-core-module/","text":"is-core-module Is this specifier a node.js core module? Optionally provide a node version to check; defaults to the current node version. Example var isCore = require ( 'is-core-module' ); var assert = require ( 'assert' ); assert ( isCore ( 'fs' )); assert ( ! isCore ( 'butts' )); Tests Clone the repo, npm install , and run npm test","title":"is-core-module <sup>[![Version Badge][2]][1]</sup>"},{"location":"node_modules/is-core-module/#is-core-module","text":"Is this specifier a node.js core module? Optionally provide a node version to check; defaults to the current node version.","title":"is-core-module "},{"location":"node_modules/is-core-module/#example","text":"var isCore = require ( 'is-core-module' ); var assert = require ( 'assert' ); assert ( isCore ( 'fs' )); assert ( ! isCore ( 'butts' ));","title":"Example"},{"location":"node_modules/is-core-module/#tests","text":"Clone the repo, npm install , and run npm test","title":"Tests"},{"location":"node_modules/is-core-module/CHANGELOG/","text":"Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning . v2.8.1 - 2022-01-05 Commits [actions] reuse common workflows cd2cf9b [Fix] update node 0.4 results 062195d [Dev Deps] update eslint , @ljharb/eslint-config , safe-publish-latest , tape 0790b62 [Dev Deps] update eslint , @ljharb/eslint-config , tape 7d139a6 [Tests] run nyc in tests-only , not test 780e8a0 v2.8.0 - 2021-10-14 Commits [actions] update codecov uploader 0cfe94e [New] add readline/promises to node v17+ 4f78c30 [Tests] node ^14.18 supports node: prefixes for CJS 43e2f17 v2.7.0 - 2021-09-27 Commits [New] node v14.18 added node: -prefixed core modules to require 6d943ab [Tests] add coverage for Object.prototype pollution c6baf5f [Dev Deps] update @ljharb/eslint-config 6717f00 [eslint] fix linter warning 594c10b [meta] add sideEffects flag c32cfa5 v2.6.0 - 2021-08-17 Commits [Dev Deps] update eslint , tape 6cc928f [New] add stream/consumers to node &gt;= 16.7 a1a423e [Refactor] Remove duplicated && operand 86faea7 [Tests] include prereleases a4da7a6 v2.5.0 - 2021-07-12 Commits [Dev Deps] update auto-changelog , eslint 6334cc9 [New] add stream/web to node v16.5+ 17ac59b v2.4.0 - 2021-05-09 Commits [readme] add actions and codecov badges 82b7faa [Dev Deps] update @ljharb/eslint-config , aud 8096868 [Dev Deps] update eslint 6726824 [New] add diagnostics_channel to node ^14.17 86c6563 [meta] fix prepublish script 697a01e v2.3.0 - 2021-04-24 Commits [meta] do not publish github action workflow files 060d4bb [New] add support for node: prefix, in node 16+ 7341223 [actions] use node/install instead of node/run ; use codecov action 016269a [patch] remove unneeded .0 in version ranges cb466a6 [Dev Deps] update eslint , @ljharb/eslint-config , aud , tape c9f9c39 [actions] update workflows 3ee4a89 [Dev Deps] update eslint , @ljharb/eslint-config dee4fed [Dev Deps] update eslint , @ljharb/eslint-config 7d046ba [meta] use prepublishOnly script for npm 7+ 149e677 [readme] remove travis badge 903b51d v2.2.0 - 2020-11-26 Commits [Tests] migrate tests to Github Actions c919f57 [patch] core.json : %s/ /\\t/g db3f685 [Tests] run nyc on all tests b2f925f [Dev Deps] update eslint , @ljharb/eslint-config , aud ; add safe-publish-latest 89f02a2 [New] add path/posix , path/win32 , util/types 77f94f1 v2.1.0 - 2020-11-04 Commits [Dev Deps] update eslint 5e0034e [New] Add diagnostics_channel c2d83d0 v2.0.0 - 2020-09-29 Commits v2 implementation 865aeb5 Only apps should have lockfiles 5a5e660 Initial commit for v2 5a51524 Tests 116eae4 [meta] add auto-changelog c24388b [actions] add \"Automatic Rebase\" and \"require allow edits\" actions 34292db [Tests] add npm run lint 4f9eeee [readme] fix travis badges, https all URLs e516a73 [meta] create FUNDING.yml 1aabebc [Fix] domain : domain landed sometime > v0.7.7 and <= v0.7.12 2df7d37 [Fix] sys : worked in 0.6, not 0.7, and 0.8+ a75c134 v1.0.2 - 2014-09-28 Commits simpler 66fe90f v1.0.1 - 2014-09-28 Commits remove stupid f21f906 update readme 1eff0ec v1.0.0 - 2014-09-28 Commits init 48e5e76","title":"Changelog"},{"location":"node_modules/is-core-module/CHANGELOG/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"node_modules/is-core-module/CHANGELOG/#v281-2022-01-05","text":"","title":"v2.8.1 - 2022-01-05"},{"location":"node_modules/is-core-module/CHANGELOG/#commits","text":"[actions] reuse common workflows cd2cf9b [Fix] update node 0.4 results 062195d [Dev Deps] update eslint , @ljharb/eslint-config , safe-publish-latest , tape 0790b62 [Dev Deps] update eslint , @ljharb/eslint-config , tape 7d139a6 [Tests] run nyc in tests-only , not test 780e8a0","title":"Commits"},{"location":"node_modules/is-core-module/CHANGELOG/#v280-2021-10-14","text":"","title":"v2.8.0 - 2021-10-14"},{"location":"node_modules/is-core-module/CHANGELOG/#commits_1","text":"[actions] update codecov uploader 0cfe94e [New] add readline/promises to node v17+ 4f78c30 [Tests] node ^14.18 supports node: prefixes for CJS 43e2f17","title":"Commits"},{"location":"node_modules/is-core-module/CHANGELOG/#v270-2021-09-27","text":"","title":"v2.7.0 - 2021-09-27"},{"location":"node_modules/is-core-module/CHANGELOG/#commits_2","text":"[New] node v14.18 added node: -prefixed core modules to require 6d943ab [Tests] add coverage for Object.prototype pollution c6baf5f [Dev Deps] update @ljharb/eslint-config 6717f00 [eslint] fix linter warning 594c10b [meta] add sideEffects flag c32cfa5","title":"Commits"},{"location":"node_modules/is-core-module/CHANGELOG/#v260-2021-08-17","text":"","title":"v2.6.0 - 2021-08-17"},{"location":"node_modules/is-core-module/CHANGELOG/#commits_3","text":"[Dev Deps] update eslint , tape 6cc928f [New] add stream/consumers to node &gt;= 16.7 a1a423e [Refactor] Remove duplicated && operand 86faea7 [Tests] include prereleases a4da7a6","title":"Commits"},{"location":"node_modules/is-core-module/CHANGELOG/#v250-2021-07-12","text":"","title":"v2.5.0 - 2021-07-12"},{"location":"node_modules/is-core-module/CHANGELOG/#commits_4","text":"[Dev Deps] update auto-changelog , eslint 6334cc9 [New] add stream/web to node v16.5+ 17ac59b","title":"Commits"},{"location":"node_modules/is-core-module/CHANGELOG/#v240-2021-05-09","text":"","title":"v2.4.0 - 2021-05-09"},{"location":"node_modules/is-core-module/CHANGELOG/#commits_5","text":"[readme] add actions and codecov badges 82b7faa [Dev Deps] update @ljharb/eslint-config , aud 8096868 [Dev Deps] update eslint 6726824 [New] add diagnostics_channel to node ^14.17 86c6563 [meta] fix prepublish script 697a01e","title":"Commits"},{"location":"node_modules/is-core-module/CHANGELOG/#v230-2021-04-24","text":"","title":"v2.3.0 - 2021-04-24"},{"location":"node_modules/is-core-module/CHANGELOG/#commits_6","text":"[meta] do not publish github action workflow files 060d4bb [New] add support for node: prefix, in node 16+ 7341223 [actions] use node/install instead of node/run ; use codecov action 016269a [patch] remove unneeded .0 in version ranges cb466a6 [Dev Deps] update eslint , @ljharb/eslint-config , aud , tape c9f9c39 [actions] update workflows 3ee4a89 [Dev Deps] update eslint , @ljharb/eslint-config dee4fed [Dev Deps] update eslint , @ljharb/eslint-config 7d046ba [meta] use prepublishOnly script for npm 7+ 149e677 [readme] remove travis badge 903b51d","title":"Commits"},{"location":"node_modules/is-core-module/CHANGELOG/#v220-2020-11-26","text":"","title":"v2.2.0 - 2020-11-26"},{"location":"node_modules/is-core-module/CHANGELOG/#commits_7","text":"[Tests] migrate tests to Github Actions c919f57 [patch] core.json : %s/ /\\t/g db3f685 [Tests] run nyc on all tests b2f925f [Dev Deps] update eslint , @ljharb/eslint-config , aud ; add safe-publish-latest 89f02a2 [New] add path/posix , path/win32 , util/types 77f94f1","title":"Commits"},{"location":"node_modules/is-core-module/CHANGELOG/#v210-2020-11-04","text":"","title":"v2.1.0 - 2020-11-04"},{"location":"node_modules/is-core-module/CHANGELOG/#commits_8","text":"[Dev Deps] update eslint 5e0034e [New] Add diagnostics_channel c2d83d0","title":"Commits"},{"location":"node_modules/is-core-module/CHANGELOG/#v200-2020-09-29","text":"","title":"v2.0.0 - 2020-09-29"},{"location":"node_modules/is-core-module/CHANGELOG/#commits_9","text":"v2 implementation 865aeb5 Only apps should have lockfiles 5a5e660 Initial commit for v2 5a51524 Tests 116eae4 [meta] add auto-changelog c24388b [actions] add \"Automatic Rebase\" and \"require allow edits\" actions 34292db [Tests] add npm run lint 4f9eeee [readme] fix travis badges, https all URLs e516a73 [meta] create FUNDING.yml 1aabebc [Fix] domain : domain landed sometime > v0.7.7 and <= v0.7.12 2df7d37 [Fix] sys : worked in 0.6, not 0.7, and 0.8+ a75c134","title":"Commits"},{"location":"node_modules/is-core-module/CHANGELOG/#v102-2014-09-28","text":"","title":"v1.0.2 - 2014-09-28"},{"location":"node_modules/is-core-module/CHANGELOG/#commits_10","text":"simpler 66fe90f","title":"Commits"},{"location":"node_modules/is-core-module/CHANGELOG/#v101-2014-09-28","text":"","title":"v1.0.1 - 2014-09-28"},{"location":"node_modules/is-core-module/CHANGELOG/#commits_11","text":"remove stupid f21f906 update readme 1eff0ec","title":"Commits"},{"location":"node_modules/is-core-module/CHANGELOG/#v100-2014-09-28","text":"","title":"v1.0.0 - 2014-09-28"},{"location":"node_modules/is-core-module/CHANGELOG/#commits_12","text":"init 48e5e76","title":"Commits"},{"location":"node_modules/is-date-object/","text":"is-date-object Is this value a JS Date object? This module works cross-realm/iframe, and despite ES6 @@toStringTag. Example var isDate = require ( 'is-date-object' ); var assert = require ( 'assert' ); assert . notOk ( isDate ( undefined )); assert . notOk ( isDate ( null )); assert . notOk ( isDate ( false )); assert . notOk ( isDate ( true )); assert . notOk ( isDate ( 42 )); assert . notOk ( isDate ( 'foo' )); assert . notOk ( isDate ( function () {})); assert . notOk ( isDate ([])); assert . notOk ( isDate ({})); assert . notOk ( isDate ( /a/g )); assert . notOk ( isDate ( new RegExp ( 'a' , 'g' ))); assert . ok ( isDate ( new Date ())); Tests Simply clone the repo, npm install , and run npm test","title":"is-date-object <sup>[![Version Badge][2]][1]</sup>"},{"location":"node_modules/is-date-object/#is-date-object","text":"Is this value a JS Date object? This module works cross-realm/iframe, and despite ES6 @@toStringTag.","title":"is-date-object "},{"location":"node_modules/is-date-object/#example","text":"var isDate = require ( 'is-date-object' ); var assert = require ( 'assert' ); assert . notOk ( isDate ( undefined )); assert . notOk ( isDate ( null )); assert . notOk ( isDate ( false )); assert . notOk ( isDate ( true )); assert . notOk ( isDate ( 42 )); assert . notOk ( isDate ( 'foo' )); assert . notOk ( isDate ( function () {})); assert . notOk ( isDate ([])); assert . notOk ( isDate ({})); assert . notOk ( isDate ( /a/g )); assert . notOk ( isDate ( new RegExp ( 'a' , 'g' ))); assert . ok ( isDate ( new Date ()));","title":"Example"},{"location":"node_modules/is-date-object/#tests","text":"Simply clone the repo, npm install , and run npm test","title":"Tests"},{"location":"node_modules/is-date-object/CHANGELOG/","text":"Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning . v1.0.5 - 2021-08-05 Commits [meta] remove .jscs.json 31c731c [Fix] use has-tostringtag to behave correctly in the presence of symbol shams 17a6df4 [Dev Deps] update eslint , auto-changelog , tape 79db3af v1.0.4 - 2021-05-07 Commits [Fix] do not use Object.prototype.toString when Symbol.toStringTag is shammed 8943a4a [readme] make all URLs https 1d4d6cd [Dev Deps] update eslint a7abeaa v1.0.3 - 2021-05-05 Commits [Tests] migrate tests to Github Actions 023504f [readme] add actions and codecov badges e63305f [meta] do not publish github action workflow files 017d906 [Tests] run nyc on all tests 0376b6f [readme] fix repo URLs; remove defunct badges 1c148c6 [Dev Deps] update eslint , @ljharb/eslint-config , aud , auto-changelog , tape c7a3f54 [actions] add \"Allow Edits\" workflow e79b5b2 [Dev Deps] update eslint , @ljharb/eslint-config , aud , tape da28980 [Dev Deps] update eslint , @ljharb/eslint-config , aud , auto-changelog 5cabae9 [readme] add actions and codecov badges 33dfb88 [Dev Deps] update eslint , @ljharb/eslint-config , tape 745eb04 [Dev Deps] update eslint , @ljharb/eslint-config , tape 466c62b [actions] use checkout v2; remove unneeded env ff87a16 [Dev Deps] update auto-changelog , tape 93188f5 [meta] use prepublishOnly script for npm 7+ 1d0e3ea [actions] update workflows 4d1a235 [Dev Deps] update auto-changelog ; add aud 67be59a [actions] switch Automatic Rebase workflow to pull_request_target event a6661c2 [Tests] only audit prod deps dd4a47f v1.0.2 - 2019-12-18 Commits [Tests] use shared travis-ci configs 8a378b8 [Tests] on all node minors; use nvm install-latest-npm ; fix scripts; improve matrix 6e97a21 [Dev Deps] update eslint , @ljharb/eslint-config , is , jscs , nsp , semver , tape 8472b90 [Tests] up to node v10.0 , v9.11 , v8.11 , v6.14 , v4.9 ae73e38 [meta] add auto-changelog 82f8f47 [meta] remove unused Makefile and associated utilities 788a2cd [Tests] up to node v11.4 , v10.14 , v8.14 , v6.15 b9caf7c [Tests] up to node v12.4 , v11.15 , v10.15 , v8.15 , v6.17 ; use nvm install-latest-npm cda0abc [Tests] up to node v12.10 , v10.16 , v8.16 49bc482 [Dev Deps] update eslint , @ljharb/eslint-config , semver , tape ; add safe-publish-latest f77fec4 [actions] add automatic rebasing / merge commit blocking 68605fc [meta] create FUNDING.yml 4f82d88 [Dev Deps] update tape , jscs , eslint , @ljharb/eslint-config 3cbf28a [Dev Deps] update eslint , @ljharb/eslint-config@ , is , semver , tape abf9fb0 [Tests] switch from nsp to npm audit 6543c7d [Dev Deps] update eslint , @ljharb/eslint-config , covert , tape ba5d2d7 [Dev Deps] update eslint , nsp , semver , tape c1e3525 [Tests] use npx aud instead of nsp or npm audit with hoops 14e4824 [Dev Deps] update eslint , @ljharb/eslint-config , safe-publish-latest 68ead64 [Dev Deps] update eslint , semver , tape , semver [ f55453f`](https://github.com/inspect-js/is-date-object/commit/f55453f200903277465d7e9307a9c49120a4f419) Only apps should have lockfiles 6c848eb [Tests] remove jscs 3fd3a62 [Dev Deps] update eslint , tape 77d3130 [meta] add funding field 9ef6d58 v1.0.1 - 2015-09-27 Commits Update tape , semver , eslint ; use my personal shared eslint config. 731aa13 Update is , tape , covert , jscs , editorconfig-tools , nsp , eslint , semver 53e43a6 Update eslint d2fc304 Update tape , jscs , eslint , @ljharb/eslint-config c9568df Test on latest node and io.js versions. a21d537 Update nsp , eslint , semver 9e1d908 Update covert , jscs , eslint , semver f198f6b [Dev Deps] update tape , jscs , eslint ab9bdbb If @@toStringTag is not present, use the old-school Object#toString test. c03afce [Dev Deps] update jscs , nsp , tape , eslint , @ljharb/eslint-config 9d94ccb [Dev Deps] update is , eslint , @ljharb/eslint-config , semver 35cbff7 Test up to io.js v2.3 be5d11e [Tests] on io.js v3.3 , up to node v4.1 20221a3 [Tests] up to io.js v3.2 7009b4a Test on io.js v2.1 68b29b1 Remove editorconfig-tools 8d3972c [Dev Deps] update tape 204945d Switch from vb.teelaun.ch to versionbadg.es for the npm version badge SVG. 7bff214 Test on io.js v2.5 92f7bd6 Test on io.js v2.4 ebb34bf Fix tests for faked @@toStringTag 3b9c26c Test on io.js v3.0 5eedf4b v1.0.0 - 2015-01-28 Commits Dotfiles. 5b6a929 make release e8d40ce package.json a107259 Read me eb92695 Initial commit 4fc7755 Tests. b6f432f Implementation. dd0fd96","title":"Changelog"},{"location":"node_modules/is-date-object/CHANGELOG/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"node_modules/is-date-object/CHANGELOG/#v105-2021-08-05","text":"","title":"v1.0.5 - 2021-08-05"},{"location":"node_modules/is-date-object/CHANGELOG/#commits","text":"[meta] remove .jscs.json 31c731c [Fix] use has-tostringtag to behave correctly in the presence of symbol shams 17a6df4 [Dev Deps] update eslint , auto-changelog , tape 79db3af","title":"Commits"},{"location":"node_modules/is-date-object/CHANGELOG/#v104-2021-05-07","text":"","title":"v1.0.4 - 2021-05-07"},{"location":"node_modules/is-date-object/CHANGELOG/#commits_1","text":"[Fix] do not use Object.prototype.toString when Symbol.toStringTag is shammed 8943a4a [readme] make all URLs https 1d4d6cd [Dev Deps] update eslint a7abeaa","title":"Commits"},{"location":"node_modules/is-date-object/CHANGELOG/#v103-2021-05-05","text":"","title":"v1.0.3 - 2021-05-05"},{"location":"node_modules/is-date-object/CHANGELOG/#commits_2","text":"[Tests] migrate tests to Github Actions 023504f [readme] add actions and codecov badges e63305f [meta] do not publish github action workflow files 017d906 [Tests] run nyc on all tests 0376b6f [readme] fix repo URLs; remove defunct badges 1c148c6 [Dev Deps] update eslint , @ljharb/eslint-config , aud , auto-changelog , tape c7a3f54 [actions] add \"Allow Edits\" workflow e79b5b2 [Dev Deps] update eslint , @ljharb/eslint-config , aud , tape da28980 [Dev Deps] update eslint , @ljharb/eslint-config , aud , auto-changelog 5cabae9 [readme] add actions and codecov badges 33dfb88 [Dev Deps] update eslint , @ljharb/eslint-config , tape 745eb04 [Dev Deps] update eslint , @ljharb/eslint-config , tape 466c62b [actions] use checkout v2; remove unneeded env ff87a16 [Dev Deps] update auto-changelog , tape 93188f5 [meta] use prepublishOnly script for npm 7+ 1d0e3ea [actions] update workflows 4d1a235 [Dev Deps] update auto-changelog ; add aud 67be59a [actions] switch Automatic Rebase workflow to pull_request_target event a6661c2 [Tests] only audit prod deps dd4a47f","title":"Commits"},{"location":"node_modules/is-date-object/CHANGELOG/#v102-2019-12-18","text":"","title":"v1.0.2 - 2019-12-18"},{"location":"node_modules/is-date-object/CHANGELOG/#commits_3","text":"[Tests] use shared travis-ci configs 8a378b8 [Tests] on all node minors; use nvm install-latest-npm ; fix scripts; improve matrix 6e97a21 [Dev Deps] update eslint , @ljharb/eslint-config , is , jscs , nsp , semver , tape 8472b90 [Tests] up to node v10.0 , v9.11 , v8.11 , v6.14 , v4.9 ae73e38 [meta] add auto-changelog 82f8f47 [meta] remove unused Makefile and associated utilities 788a2cd [Tests] up to node v11.4 , v10.14 , v8.14 , v6.15 b9caf7c [Tests] up to node v12.4 , v11.15 , v10.15 , v8.15 , v6.17 ; use nvm install-latest-npm cda0abc [Tests] up to node v12.10 , v10.16 , v8.16 49bc482 [Dev Deps] update eslint , @ljharb/eslint-config , semver , tape ; add safe-publish-latest f77fec4 [actions] add automatic rebasing / merge commit blocking 68605fc [meta] create FUNDING.yml 4f82d88 [Dev Deps] update tape , jscs , eslint , @ljharb/eslint-config 3cbf28a [Dev Deps] update eslint , @ljharb/eslint-config@ , is , semver , tape abf9fb0 [Tests] switch from nsp to npm audit 6543c7d [Dev Deps] update eslint , @ljharb/eslint-config , covert , tape ba5d2d7 [Dev Deps] update eslint , nsp , semver , tape c1e3525 [Tests] use npx aud instead of nsp or npm audit with hoops 14e4824 [Dev Deps] update eslint , @ljharb/eslint-config , safe-publish-latest 68ead64 [Dev Deps] update eslint , semver , tape , semver [ f55453f`](https://github.com/inspect-js/is-date-object/commit/f55453f200903277465d7e9307a9c49120a4f419) Only apps should have lockfiles 6c848eb [Tests] remove jscs 3fd3a62 [Dev Deps] update eslint , tape 77d3130 [meta] add funding field 9ef6d58","title":"Commits"},{"location":"node_modules/is-date-object/CHANGELOG/#v101-2015-09-27","text":"","title":"v1.0.1 - 2015-09-27"},{"location":"node_modules/is-date-object/CHANGELOG/#commits_4","text":"Update tape , semver , eslint ; use my personal shared eslint config. 731aa13 Update is , tape , covert , jscs , editorconfig-tools , nsp , eslint , semver 53e43a6 Update eslint d2fc304 Update tape , jscs , eslint , @ljharb/eslint-config c9568df Test on latest node and io.js versions. a21d537 Update nsp , eslint , semver 9e1d908 Update covert , jscs , eslint , semver f198f6b [Dev Deps] update tape , jscs , eslint ab9bdbb If @@toStringTag is not present, use the old-school Object#toString test. c03afce [Dev Deps] update jscs , nsp , tape , eslint , @ljharb/eslint-config 9d94ccb [Dev Deps] update is , eslint , @ljharb/eslint-config , semver 35cbff7 Test up to io.js v2.3 be5d11e [Tests] on io.js v3.3 , up to node v4.1 20221a3 [Tests] up to io.js v3.2 7009b4a Test on io.js v2.1 68b29b1 Remove editorconfig-tools 8d3972c [Dev Deps] update tape 204945d Switch from vb.teelaun.ch to versionbadg.es for the npm version badge SVG. 7bff214 Test on io.js v2.5 92f7bd6 Test on io.js v2.4 ebb34bf Fix tests for faked @@toStringTag 3b9c26c Test on io.js v3.0 5eedf4b","title":"Commits"},{"location":"node_modules/is-date-object/CHANGELOG/#v100-2015-01-28","text":"","title":"v1.0.0 - 2015-01-28"},{"location":"node_modules/is-date-object/CHANGELOG/#commits_5","text":"Dotfiles. 5b6a929 make release e8d40ce package.json a107259 Read me eb92695 Initial commit 4fc7755 Tests. b6f432f Implementation. dd0fd96","title":"Commits"},{"location":"node_modules/is-decimal/readme/","text":"is-decimal Check if a character is decimal. Install npm : npm install is-decimal Use var decimal = require ( 'is-decimal' ) decimal ( '0' ) // => true decimal ( '9' ) // => true decimal ( 'a' ) // => false decimal ( '\ud83d\udca9' ) // => false API decimal(character|code) Check whether the given character code ( number ), or the character code at the first position ( string ), is decimal. Related is-alphabetical is-hexadecimal is-whitespace-character is-word-character License MIT \u00a9 Titus Wormer","title":"is-decimal"},{"location":"node_modules/is-decimal/readme/#is-decimal","text":"Check if a character is decimal.","title":"is-decimal"},{"location":"node_modules/is-decimal/readme/#install","text":"npm : npm install is-decimal","title":"Install"},{"location":"node_modules/is-decimal/readme/#use","text":"var decimal = require ( 'is-decimal' ) decimal ( '0' ) // => true decimal ( '9' ) // => true decimal ( 'a' ) // => false decimal ( '\ud83d\udca9' ) // => false","title":"Use"},{"location":"node_modules/is-decimal/readme/#api","text":"","title":"API"},{"location":"node_modules/is-decimal/readme/#decimalcharactercode","text":"Check whether the given character code ( number ), or the character code at the first position ( string ), is decimal.","title":"decimal(character|code)"},{"location":"node_modules/is-decimal/readme/#related","text":"is-alphabetical is-hexadecimal is-whitespace-character is-word-character","title":"Related"},{"location":"node_modules/is-decimal/readme/#license","text":"MIT \u00a9 Titus Wormer","title":"License"},{"location":"node_modules/is-file/","text":"node-is-file Tests if a given path resolves to a file. Example Async var isFile = require ( 'is-file' ); isFile ( __filename , function ( err , bool ){ console . log ( bool ); // => true }); Sync var isFile = require ( 'is-file' ); var bool = isFile ( __filename ); console . log ( bool ); // => true With .sync : var isFile = require ( 'is-file' ); var bool = isFile . sync ( __filename ); console . log ( bool ); // => true LICENSE The MIT License (MIT) Copyright (c) 2014 Joseph Spencer Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"node-is-file [![NPM version][npm-image]][npm-url] [![Downloads][downloads-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Coveralls Status][coveralls-image]][coveralls-url]"},{"location":"node_modules/is-file/#node-is-file","text":"Tests if a given path resolves to a file.","title":"node-is-file"},{"location":"node_modules/is-file/#example","text":"","title":"Example"},{"location":"node_modules/is-file/#async","text":"var isFile = require ( 'is-file' ); isFile ( __filename , function ( err , bool ){ console . log ( bool ); // => true });","title":"Async"},{"location":"node_modules/is-file/#sync","text":"var isFile = require ( 'is-file' ); var bool = isFile ( __filename ); console . log ( bool ); // => true With .sync : var isFile = require ( 'is-file' ); var bool = isFile . sync ( __filename ); console . log ( bool ); // => true","title":"Sync"},{"location":"node_modules/is-file/#license","text":"The MIT License (MIT) Copyright (c) 2014 Joseph Spencer Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"LICENSE"},{"location":"node_modules/is-fullwidth-code-point/readme/","text":"is-fullwidth-code-point Check if the character represented by a given Unicode code point is fullwidth Install $ npm install --save is-fullwidth-code-point Usage var isFullwidthCodePoint = require ( 'is-fullwidth-code-point' ); isFullwidthCodePoint ( '\u8c22' . codePointAt ()); //=> true isFullwidthCodePoint ( 'a' . codePointAt ()); //=> false API isFullwidthCodePoint(input) input Type: number Code point of a character. License MIT \u00a9 Sindre Sorhus","title":"is-fullwidth-code-point [![Build Status](https://travis-ci.org/sindresorhus/is-fullwidth-code-point.svg?branch=master)](https://travis-ci.org/sindresorhus/is-fullwidth-code-point)"},{"location":"node_modules/is-fullwidth-code-point/readme/#is-fullwidth-code-point","text":"Check if the character represented by a given Unicode code point is fullwidth","title":"is-fullwidth-code-point"},{"location":"node_modules/is-fullwidth-code-point/readme/#install","text":"$ npm install --save is-fullwidth-code-point","title":"Install"},{"location":"node_modules/is-fullwidth-code-point/readme/#usage","text":"var isFullwidthCodePoint = require ( 'is-fullwidth-code-point' ); isFullwidthCodePoint ( '\u8c22' . codePointAt ()); //=> true isFullwidthCodePoint ( 'a' . codePointAt ()); //=> false","title":"Usage"},{"location":"node_modules/is-fullwidth-code-point/readme/#api","text":"","title":"API"},{"location":"node_modules/is-fullwidth-code-point/readme/#isfullwidthcodepointinput","text":"","title":"isFullwidthCodePoint(input)"},{"location":"node_modules/is-fullwidth-code-point/readme/#input","text":"Type: number Code point of a character.","title":"input"},{"location":"node_modules/is-fullwidth-code-point/readme/#license","text":"MIT \u00a9 Sindre Sorhus","title":"License"},{"location":"node_modules/is-hexadecimal/readme/","text":"is-hexadecimal Check if a character is hexadecimal. Install npm : npm install is-hexadecimal Use var hexadecimal = require ( 'is-hexadecimal' ) hexadecimal ( 'a' ) // => true hexadecimal ( '0' ) // => true hexadecimal ( 'G' ) // => false hexadecimal ( '\ud83d\udca9' ) // => false API hexadecimal(character|code) Check whether the given character code ( number ), or the character code at the first position ( string ), is hexadecimal. Related is-alphabetical is-alphanumerical is-decimal is-whitespace-character is-word-character License MIT \u00a9 Titus Wormer","title":"is-hexadecimal"},{"location":"node_modules/is-hexadecimal/readme/#is-hexadecimal","text":"Check if a character is hexadecimal.","title":"is-hexadecimal"},{"location":"node_modules/is-hexadecimal/readme/#install","text":"npm : npm install is-hexadecimal","title":"Install"},{"location":"node_modules/is-hexadecimal/readme/#use","text":"var hexadecimal = require ( 'is-hexadecimal' ) hexadecimal ( 'a' ) // => true hexadecimal ( '0' ) // => true hexadecimal ( 'G' ) // => false hexadecimal ( '\ud83d\udca9' ) // => false","title":"Use"},{"location":"node_modules/is-hexadecimal/readme/#api","text":"","title":"API"},{"location":"node_modules/is-hexadecimal/readme/#hexadecimalcharactercode","text":"Check whether the given character code ( number ), or the character code at the first position ( string ), is hexadecimal.","title":"hexadecimal(character|code)"},{"location":"node_modules/is-hexadecimal/readme/#related","text":"is-alphabetical is-alphanumerical is-decimal is-whitespace-character is-word-character","title":"Related"},{"location":"node_modules/is-hexadecimal/readme/#license","text":"MIT \u00a9 Titus Wormer","title":"License"},{"location":"node_modules/is-plain-obj/readme/","text":"is-plain-obj Check if a value is a plain object An object is plain if it's created by either {} , new Object() , or Object.create(null) . Install $ npm install is-plain-obj Usage const isPlainObject = require ( 'is-plain-obj' ); isPlainObject ({ foo : 'bar' }); //=> true isPlainObject ( new Object ()); //=> true isPlainObject ( Object . create ( null )); //=> true isPlainObject ([ 1 , 2 , 3 ]); //=> false class Unicorn {} isPlainObject ( new Unicorn ()); //=> false Related is-obj - Check if a value is an object is - Type check values Get professional support for this package with a Tidelift subscription Tidelift helps make open source sustainable for maintainers while giving companies assurances about security, maintenance, and licensing for their dependencies.","title":"is-plain-obj [![Build Status](https://travis-ci.org/sindresorhus/is-plain-obj.svg?branch=master)](https://travis-ci.org/sindresorhus/is-plain-obj)"},{"location":"node_modules/is-plain-obj/readme/#is-plain-obj","text":"Check if a value is a plain object An object is plain if it's created by either {} , new Object() , or Object.create(null) .","title":"is-plain-obj"},{"location":"node_modules/is-plain-obj/readme/#install","text":"$ npm install is-plain-obj","title":"Install"},{"location":"node_modules/is-plain-obj/readme/#usage","text":"const isPlainObject = require ( 'is-plain-obj' ); isPlainObject ({ foo : 'bar' }); //=> true isPlainObject ( new Object ()); //=> true isPlainObject ( Object . create ( null )); //=> true isPlainObject ([ 1 , 2 , 3 ]); //=> false class Unicorn {} isPlainObject ( new Unicorn ()); //=> false","title":"Usage"},{"location":"node_modules/is-plain-obj/readme/#related","text":"is-obj - Check if a value is an object is - Type check values Get professional support for this package with a Tidelift subscription Tidelift helps make open source sustainable for maintainers while giving companies assurances about security, maintenance, and licensing for their dependencies.","title":"Related"},{"location":"node_modules/is-regex/","text":"is-regex Is this value a JS regex? This module works cross-realm/iframe, and despite ES6 @@toStringTag. Example var isRegex = require ( 'is-regex' ); var assert = require ( 'assert' ); assert . notOk ( isRegex ( undefined )); assert . notOk ( isRegex ( null )); assert . notOk ( isRegex ( false )); assert . notOk ( isRegex ( true )); assert . notOk ( isRegex ( 42 )); assert . notOk ( isRegex ( 'foo' )); assert . notOk ( isRegex ( function () {})); assert . notOk ( isRegex ([])); assert . notOk ( isRegex ({})); assert . ok ( isRegex ( /a/g )); assert . ok ( isRegex ( new RegExp ( 'a' , 'g' ))); Tests Simply clone the repo, npm install , and run npm test","title":"is-regex <sup>[![Version Badge][2]][1]</sup>"},{"location":"node_modules/is-regex/#is-regex","text":"Is this value a JS regex? This module works cross-realm/iframe, and despite ES6 @@toStringTag.","title":"is-regex "},{"location":"node_modules/is-regex/#example","text":"var isRegex = require ( 'is-regex' ); var assert = require ( 'assert' ); assert . notOk ( isRegex ( undefined )); assert . notOk ( isRegex ( null )); assert . notOk ( isRegex ( false )); assert . notOk ( isRegex ( true )); assert . notOk ( isRegex ( 42 )); assert . notOk ( isRegex ( 'foo' )); assert . notOk ( isRegex ( function () {})); assert . notOk ( isRegex ([])); assert . notOk ( isRegex ({})); assert . ok ( isRegex ( /a/g )); assert . ok ( isRegex ( new RegExp ( 'a' , 'g' )));","title":"Example"},{"location":"node_modules/is-regex/#tests","text":"Simply clone the repo, npm install , and run npm test","title":"Tests"},{"location":"node_modules/is-regex/CHANGELOG/","text":"Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning . v1.1.4 - 2021-08-05 Commits [Dev Deps] update auto-changelog , core-js , eslint , tape 4b17cad [Refactor] use has-tostringtag to behave correctly in the presence of symbol shams 2dad4af v1.1.3 - 2021-05-07 Commits [actions] use node/install instead of node/run ; use codecov action c681ab9 [Fix] do not use Object.prototype.toString when Symbol.toStringTag is shammed ca019fd [Dev Deps] update eslint , @ljharb/eslint-config , aud , tape 605a66f [readme] add actions and codecov badges 8d7c6f0 [meta] use prepublishOnly script for npm 7+ 8e50e91 [Deps] update has-symbols 4742c81 v1.1.2 - 2021-02-01 Commits [Tests] migrate tests to Github Actions cc1686e [readme] fix repo URLs; remove travis badge d1d1da6 [meta] do not publish github action workflow files 9f84b99 [Tests] run nyc on all tests c37aab9 [Robustness] use call-bind fbb61bf [actions] add \"Allow Edits\" workflow 9022b53 [Dev Deps] update eslint , @ljharb/eslint-config , aud , auto-changelog d60f28f [Dev Deps] update eslint , @ljharb/eslint-config , tape 2c35c43 [actions] switch Automatic Rebase workflow to pull_request_target event 1009e25 [meta] gitignore coverage output 3b5fa9e [actions] update workflows 1843ef6 v1.1.1 - 2020-08-03 Commits [Performance] Re-add lastIndex check to improve performance d8495cd [Dev Deps] update auto-changelog , eslint 778fa6b v1.1.0 - 2020-06-03 Commits [New] use badStringifier \u2011based RegExp detection 31eff67 [Dev Deps] update eslint , @ljharb/eslint-config , aud , tape fc91458 [Dev Deps] update eslint , @ljharb/eslint-config , tape ; add safe-publish-latest d43ed83 [Dev Deps] update auto-changelog , tape ; add aud 56647d1 [meta] only run aud on prod deps e0865b8 v1.0.5 - 2019-12-15 Commits [Tests] use shared travis-ci configs af728b2 [Tests] remove jscs 1b8cfe8 [meta] add auto-changelog c3131d8 [Tests] up to node v8.1 , v7.10 , v6.11 , v4.8 ; newer npm fails on older nodes 660b658 [Tests] up to node v9.3 , v8.9 , v6.12 ; use nvm install-latest-npm ; pin included builds to LTS 7c25218 [Tests] up to node v12.10 , v11.15 , v10.16 , v8.16 , v6.17 fa95547 [meta] remove unused Makefile and associated utilities 9fd2a29 [Tests] up to node v11.3 , v10.14 , v8.14 , v6.15 7f2ac41 [Tests] up to node v10.0 , v9.11 , v8.11 , v6.14 , v4.9 6fa2b0f [Dev Deps] update eslint , @ljharb/eslint-config 697e1de [actions] add automatic rebasing / merge commit blocking ad86dc9 [Dev Deps] update eslint , @ljharb/eslint-config , jscs , nsp , replace , semver , tape 5c99c8e [Dev Deps] update eslint , @ljharb/eslint-config , replace , semver , tape bb63686 [Dev Deps] update eslint , @ljharb/eslint-config@ , replace , semver , tape ddf3670 [Dev Deps] update tape , nsp , eslint , @ljharb/eslint-config e7b5a62 [Dev Deps] update eslint , @ljharb/eslint-config , covert , tape c803db5 [Tests] switch from nsp to npm audit b7239be [Dev Deps] update eslint , nsp , semver , tape 347ee6c Only apps should have lockfiles. 3866575 [Tests] use npx aud instead of nsp or npm audit with hoops d099a39 [meta] add funding field 741aecd [Tests] use eclint instead of editorconfig-tools bc6aa75 [Tests] on node v10.1 262226f [Dev Deps] update eslint 31fd719 [Deps] update has e9e25a3 [Dev Deps] update replace aeeb968 [Tests] set audit level 2a6290e [Tests] remove nsp fc74c2b v1.0.4 - 2017-02-18 Fixed [Fix] ensure that lastIndex is not mutated #3 Commits Update eslint , tape , semver ; use my personal shared eslint config c4a41c3 [Tests] on all node minors; improve test matrix 58d7508 [Dev Deps] update tape , jscs , nsp , eslint , @ljharb/eslint-config , semver 7290076 Update covert , jscs , eslint , semver dabc729 Update eslint a946b05 Update tape , jscs , eslint , @ljharb/eslint-config 1744dde [Refactor] when try/catch is needed, bail early if the value lacks an own lastIndex data property. 288ad93 Update editorconfig-tools , eslint , semver , replace 4d895c6 Update eslint , tape , semver f387f03 All grade A-supported node / iojs versions now ship with an npm that understands ^ . 55e480f [Dev Deps] update jscs , nsp , eslint , @ljharb/eslint-config , semver 89d9528 [Dev Deps] update jscs eb222a8 [Tests] up to io.js v3.3 , node v4.1 c65429c Update nsp , eslint c60fbd8 Update eslint , semver 6a62116 [Tests] on node v7.5 , v4.7 e764651 Test up to io.js v2.1 3bf326a Test on the latest io.js versions. 693d047 [Refactor] use an early return instead of a ternary. 31eaca2 Test on io.js v2.2 c18c55a Run travis-ci tests on iojs and node v0.12; speed up builds; allow 0.8 failures. a1c237d [Dev Deps] update eslint , @ljharb/eslint-config aa3ea0f [Dev Deps] update eslint , @ljharb/eslint-config d97831d [Dev Deps] Update tape , eslint 95e6def Update eslint , nsp 3844c93 Update tape , jscs 0d6dac8 Fix tests for faked @@toStringTag 2ebef9f Test up to io.js v3.0 ec1d2d4 [Refactor] bail earlier when the value is falsy. a9e333e [Dev Deps] update tape 8cdcaae Switch from vb.teelaun.ch to versionbadg.es for the npm version badge SVG. 281c4ef Test on io.js v2.4 4d54c68 Test on io.js v2.3 23170f5 Test on iojs-v1.6 4487ad0 v1.0.3 - 2015-01-29 Commits Update npm run scripts. dc528dd Add toStringTag tests. f48a83a If @@toStringTag is not present, use the old-school Object#toString test. 50b0ffd v1.0.2 - 2015-01-29 Commits make release a1de7ec Improve optimization by separating the try/catch, and bailing out early when not typeof \"object\". 5ab7632 v1.0.1 - 2015-01-28 Commits Using my standard jscs.json file 1f1733a Adding npm run lint 51ea70f Use RegExp#exec to test if something is a regex, which works even with ES6 @@toStringTag. 042c8c7 Adding license and downloads badges 366d619 Use SVG badges instead of PNG 6a32e4f Update tape , jscs f1b9462 Update jscs 1bff23f Update tape , jscs c22ea2e Update tape , jscs b0479db Use consistent quotes 1a6e347 Make travis builds faster. 090a4ea Update tape 7d76129 Lock covert to v1.0.0. 9a90b03 Updating tape bfbc7f5 Updating jscs 13ad511 Updating jscs cda1945 Updating jscs de96c99 Running linter as part of tests 2cb6567 Updating covert a56ae74 Updating tape ffe47f7 v1.0.0 - 2014-05-19 Commits Make sure old and unstable nodes don't break Travis 05da747 toString is a reserved var name in old Opera 885c48c Updating deps 2ca0e79 Updating tape. 9678435 Updating covert c3bb898 Updating tape 7811708 Testing on node 0.6 again dec36ae Run code coverage as part of tests e6f4ebe v0.0.0 - 2014-01-15 Commits package.json aa60d43 read me 861e944 Initial commit d0cdd71 Tests. b533f74 Implementation. 3c9a8c0 Travis CI 742c440","title":"Changelog"},{"location":"node_modules/is-regex/CHANGELOG/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"node_modules/is-regex/CHANGELOG/#v114-2021-08-05","text":"","title":"v1.1.4 - 2021-08-05"},{"location":"node_modules/is-regex/CHANGELOG/#commits","text":"[Dev Deps] update auto-changelog , core-js , eslint , tape 4b17cad [Refactor] use has-tostringtag to behave correctly in the presence of symbol shams 2dad4af","title":"Commits"},{"location":"node_modules/is-regex/CHANGELOG/#v113-2021-05-07","text":"","title":"v1.1.3 - 2021-05-07"},{"location":"node_modules/is-regex/CHANGELOG/#commits_1","text":"[actions] use node/install instead of node/run ; use codecov action c681ab9 [Fix] do not use Object.prototype.toString when Symbol.toStringTag is shammed ca019fd [Dev Deps] update eslint , @ljharb/eslint-config , aud , tape 605a66f [readme] add actions and codecov badges 8d7c6f0 [meta] use prepublishOnly script for npm 7+ 8e50e91 [Deps] update has-symbols 4742c81","title":"Commits"},{"location":"node_modules/is-regex/CHANGELOG/#v112-2021-02-01","text":"","title":"v1.1.2 - 2021-02-01"},{"location":"node_modules/is-regex/CHANGELOG/#commits_2","text":"[Tests] migrate tests to Github Actions cc1686e [readme] fix repo URLs; remove travis badge d1d1da6 [meta] do not publish github action workflow files 9f84b99 [Tests] run nyc on all tests c37aab9 [Robustness] use call-bind fbb61bf [actions] add \"Allow Edits\" workflow 9022b53 [Dev Deps] update eslint , @ljharb/eslint-config , aud , auto-changelog d60f28f [Dev Deps] update eslint , @ljharb/eslint-config , tape 2c35c43 [actions] switch Automatic Rebase workflow to pull_request_target event 1009e25 [meta] gitignore coverage output 3b5fa9e [actions] update workflows 1843ef6","title":"Commits"},{"location":"node_modules/is-regex/CHANGELOG/#v111-2020-08-03","text":"","title":"v1.1.1 - 2020-08-03"},{"location":"node_modules/is-regex/CHANGELOG/#commits_3","text":"[Performance] Re-add lastIndex check to improve performance d8495cd [Dev Deps] update auto-changelog , eslint 778fa6b","title":"Commits"},{"location":"node_modules/is-regex/CHANGELOG/#v110-2020-06-03","text":"","title":"v1.1.0 - 2020-06-03"},{"location":"node_modules/is-regex/CHANGELOG/#commits_4","text":"[New] use badStringifier \u2011based RegExp detection 31eff67 [Dev Deps] update eslint , @ljharb/eslint-config , aud , tape fc91458 [Dev Deps] update eslint , @ljharb/eslint-config , tape ; add safe-publish-latest d43ed83 [Dev Deps] update auto-changelog , tape ; add aud 56647d1 [meta] only run aud on prod deps e0865b8","title":"Commits"},{"location":"node_modules/is-regex/CHANGELOG/#v105-2019-12-15","text":"","title":"v1.0.5 - 2019-12-15"},{"location":"node_modules/is-regex/CHANGELOG/#commits_5","text":"[Tests] use shared travis-ci configs af728b2 [Tests] remove jscs 1b8cfe8 [meta] add auto-changelog c3131d8 [Tests] up to node v8.1 , v7.10 , v6.11 , v4.8 ; newer npm fails on older nodes 660b658 [Tests] up to node v9.3 , v8.9 , v6.12 ; use nvm install-latest-npm ; pin included builds to LTS 7c25218 [Tests] up to node v12.10 , v11.15 , v10.16 , v8.16 , v6.17 fa95547 [meta] remove unused Makefile and associated utilities 9fd2a29 [Tests] up to node v11.3 , v10.14 , v8.14 , v6.15 7f2ac41 [Tests] up to node v10.0 , v9.11 , v8.11 , v6.14 , v4.9 6fa2b0f [Dev Deps] update eslint , @ljharb/eslint-config 697e1de [actions] add automatic rebasing / merge commit blocking ad86dc9 [Dev Deps] update eslint , @ljharb/eslint-config , jscs , nsp , replace , semver , tape 5c99c8e [Dev Deps] update eslint , @ljharb/eslint-config , replace , semver , tape bb63686 [Dev Deps] update eslint , @ljharb/eslint-config@ , replace , semver , tape ddf3670 [Dev Deps] update tape , nsp , eslint , @ljharb/eslint-config e7b5a62 [Dev Deps] update eslint , @ljharb/eslint-config , covert , tape c803db5 [Tests] switch from nsp to npm audit b7239be [Dev Deps] update eslint , nsp , semver , tape 347ee6c Only apps should have lockfiles. 3866575 [Tests] use npx aud instead of nsp or npm audit with hoops d099a39 [meta] add funding field 741aecd [Tests] use eclint instead of editorconfig-tools bc6aa75 [Tests] on node v10.1 262226f [Dev Deps] update eslint 31fd719 [Deps] update has e9e25a3 [Dev Deps] update replace aeeb968 [Tests] set audit level 2a6290e [Tests] remove nsp fc74c2b","title":"Commits"},{"location":"node_modules/is-regex/CHANGELOG/#v104-2017-02-18","text":"","title":"v1.0.4 - 2017-02-18"},{"location":"node_modules/is-regex/CHANGELOG/#fixed","text":"[Fix] ensure that lastIndex is not mutated #3","title":"Fixed"},{"location":"node_modules/is-regex/CHANGELOG/#commits_6","text":"Update eslint , tape , semver ; use my personal shared eslint config c4a41c3 [Tests] on all node minors; improve test matrix 58d7508 [Dev Deps] update tape , jscs , nsp , eslint , @ljharb/eslint-config , semver 7290076 Update covert , jscs , eslint , semver dabc729 Update eslint a946b05 Update tape , jscs , eslint , @ljharb/eslint-config 1744dde [Refactor] when try/catch is needed, bail early if the value lacks an own lastIndex data property. 288ad93 Update editorconfig-tools , eslint , semver , replace 4d895c6 Update eslint , tape , semver f387f03 All grade A-supported node / iojs versions now ship with an npm that understands ^ . 55e480f [Dev Deps] update jscs , nsp , eslint , @ljharb/eslint-config , semver 89d9528 [Dev Deps] update jscs eb222a8 [Tests] up to io.js v3.3 , node v4.1 c65429c Update nsp , eslint c60fbd8 Update eslint , semver 6a62116 [Tests] on node v7.5 , v4.7 e764651 Test up to io.js v2.1 3bf326a Test on the latest io.js versions. 693d047 [Refactor] use an early return instead of a ternary. 31eaca2 Test on io.js v2.2 c18c55a Run travis-ci tests on iojs and node v0.12; speed up builds; allow 0.8 failures. a1c237d [Dev Deps] update eslint , @ljharb/eslint-config aa3ea0f [Dev Deps] update eslint , @ljharb/eslint-config d97831d [Dev Deps] Update tape , eslint 95e6def Update eslint , nsp 3844c93 Update tape , jscs 0d6dac8 Fix tests for faked @@toStringTag 2ebef9f Test up to io.js v3.0 ec1d2d4 [Refactor] bail earlier when the value is falsy. a9e333e [Dev Deps] update tape 8cdcaae Switch from vb.teelaun.ch to versionbadg.es for the npm version badge SVG. 281c4ef Test on io.js v2.4 4d54c68 Test on io.js v2.3 23170f5 Test on iojs-v1.6 4487ad0","title":"Commits"},{"location":"node_modules/is-regex/CHANGELOG/#v103-2015-01-29","text":"","title":"v1.0.3 - 2015-01-29"},{"location":"node_modules/is-regex/CHANGELOG/#commits_7","text":"Update npm run scripts. dc528dd Add toStringTag tests. f48a83a If @@toStringTag is not present, use the old-school Object#toString test. 50b0ffd","title":"Commits"},{"location":"node_modules/is-regex/CHANGELOG/#v102-2015-01-29","text":"","title":"v1.0.2 - 2015-01-29"},{"location":"node_modules/is-regex/CHANGELOG/#commits_8","text":"make release a1de7ec Improve optimization by separating the try/catch, and bailing out early when not typeof \"object\". 5ab7632","title":"Commits"},{"location":"node_modules/is-regex/CHANGELOG/#v101-2015-01-28","text":"","title":"v1.0.1 - 2015-01-28"},{"location":"node_modules/is-regex/CHANGELOG/#commits_9","text":"Using my standard jscs.json file 1f1733a Adding npm run lint 51ea70f Use RegExp#exec to test if something is a regex, which works even with ES6 @@toStringTag. 042c8c7 Adding license and downloads badges 366d619 Use SVG badges instead of PNG 6a32e4f Update tape , jscs f1b9462 Update jscs 1bff23f Update tape , jscs c22ea2e Update tape , jscs b0479db Use consistent quotes 1a6e347 Make travis builds faster. 090a4ea Update tape 7d76129 Lock covert to v1.0.0. 9a90b03 Updating tape bfbc7f5 Updating jscs 13ad511 Updating jscs cda1945 Updating jscs de96c99 Running linter as part of tests 2cb6567 Updating covert a56ae74 Updating tape ffe47f7","title":"Commits"},{"location":"node_modules/is-regex/CHANGELOG/#v100-2014-05-19","text":"","title":"v1.0.0 - 2014-05-19"},{"location":"node_modules/is-regex/CHANGELOG/#commits_10","text":"Make sure old and unstable nodes don't break Travis 05da747 toString is a reserved var name in old Opera 885c48c Updating deps 2ca0e79 Updating tape. 9678435 Updating covert c3bb898 Updating tape 7811708 Testing on node 0.6 again dec36ae Run code coverage as part of tests e6f4ebe","title":"Commits"},{"location":"node_modules/is-regex/CHANGELOG/#v000-2014-01-15","text":"","title":"v0.0.0 - 2014-01-15"},{"location":"node_modules/is-regex/CHANGELOG/#commits_11","text":"package.json aa60d43 read me 861e944 Initial commit d0cdd71 Tests. b533f74 Implementation. 3c9a8c0 Travis CI 742c440","title":"Commits"},{"location":"node_modules/is-utf8/","text":"utf8 detector Detect if a Buffer is utf8 encoded. It need The minimum amount of bytes is 4. var fs = require ( 'fs' ); var isUtf8 = require ( 'is-utf8' ); var ansi = fs . readFileSync ( 'ansi.txt' ); var utf8 = fs . readFileSync ( 'utf8.txt' ); console . log ( 'ansi.txt is utf8: ' + isUtf8 ( ansi )); //false console . log ( 'utf8.txt is utf8: ' + isUtf8 ( utf8 )); //true","title":"Index"},{"location":"node_modules/is-utf8/#utf8-detector","text":"Detect if a Buffer is utf8 encoded. It need The minimum amount of bytes is 4. var fs = require ( 'fs' ); var isUtf8 = require ( 'is-utf8' ); var ansi = fs . readFileSync ( 'ansi.txt' ); var utf8 = fs . readFileSync ( 'utf8.txt' ); console . log ( 'ansi.txt is utf8: ' + isUtf8 ( ansi )); //false console . log ( 'utf8.txt is utf8: ' + isUtf8 ( utf8 )); //true","title":"utf8 detector"},{"location":"node_modules/js-yaml/","text":"JS-YAML - YAML 1.2 parser / writer for JavaScript Online Demo This is an implementation of YAML , a human-friendly data serialization language. Started as PyYAML port, it was completely rewritten from scratch. Now it's very fast, and supports 1.2 spec. Installation YAML module for node.js npm install js-yaml CLI executable If you want to inspect your YAML files from CLI, install js-yaml globally: npm install -g js-yaml Usage usage: js-yaml [-h] [-v] [-c] [-t] file Positional arguments: file File with YAML document(s) Optional arguments: -h, --help Show this help message and exit. -v, --version Show program's version number and exit. -c, --compact Display errors in compact mode -t, --trace Show stack trace on error Bundled YAML library for browsers <!-- esprima required only for !!js/function --> < script src = \"esprima.js\" ></ script > < script src = \"js-yaml.min.js\" ></ script > < script type = \"text/javascript\" > var doc = jsyaml . load ( 'greeting: hello\\nname: world' ); </ script > Browser support was done mostly for the online demo. If you find any errors - feel free to send pull requests with fixes. Also note, that IE and other old browsers needs es5-shims to operate. Notes: We have no resources to support browserified version. Don't expect it to be well tested. Don't expect fast fixes if something goes wrong there. !!js/function in browser bundle will not work by default. If you really need it - load esprima parser first (via amd or directly). !!bin in browser will return Array , because browsers do not support node.js Buffer and adding Buffer shims is completely useless on practice. API Here we cover the most 'useful' methods. If you need advanced details (creating your own tags), see wiki and examples for more info. const yaml = require ( 'js-yaml' ); const fs = require ( 'fs' ); // Get document, or throw exception on error try { const doc = yaml . safeLoad ( fs . readFileSync ( '/home/ixti/example.yml' , 'utf8' )); console . log ( doc ); } catch ( e ) { console . log ( e ); } safeLoad (string [ , options ]) Recommended loading way. Parses string as single YAML document. Returns either a plain object, a string or undefined , or throws YAMLException on error. By default, does not support regexps, functions and undefined. This method is safe for untrusted data. options: filename (default: null) - string to be used as a file path in error/warning messages. onWarning (default: null) - function to call on warning messages. Loader will call this function with an instance of YAMLException for each warning. schema (default: DEFAULT_SAFE_SCHEMA ) - specifies a schema to use. FAILSAFE_SCHEMA - only strings, arrays and plain objects: http://www.yaml.org/spec/1.2/spec.html#id2802346 JSON_SCHEMA - all JSON-supported types: http://www.yaml.org/spec/1.2/spec.html#id2803231 CORE_SCHEMA - same as JSON_SCHEMA : http://www.yaml.org/spec/1.2/spec.html#id2804923 DEFAULT_SAFE_SCHEMA - all supported YAML types, without unsafe ones ( !!js/undefined , !!js/regexp and !!js/function ): http://yaml.org/type/ DEFAULT_FULL_SCHEMA - all supported YAML types. json (default: false) - compatibility with JSON.parse behaviour. If true, then duplicate keys in a mapping will override values rather than throwing an error. NOTE: This function does not understand multi-document sources, it throws exception on those. NOTE: JS-YAML does not support schema-specific tag resolution restrictions. So, the JSON schema is not as strictly defined in the YAML specification. It allows numbers in any notation, use Null and NULL as null , etc. The core schema also has no such restrictions. It allows binary notation for integers. load (string [ , options ]) Use with care with untrusted sources . The same as safeLoad() but uses DEFAULT_FULL_SCHEMA by default - adds some JavaScript-specific types: !!js/function , !!js/regexp and !!js/undefined . For untrusted sources, you must additionally validate object structure to avoid injections: const untrusted_code = '\"toString\": !<tag:yaml.org,2002:js/function> \"function (){very_evil_thing();}\"' ; // I'm just converting that string, what could possibly go wrong? require ( 'js-yaml' ). load ( untrusted_code ) + '' safeLoadAll (string [, iterator] [, options ]) Same as safeLoad() , but understands multi-document sources. Applies iterator to each document if specified, or returns array of documents. const yaml = require ( 'js-yaml' ); yaml . safeLoadAll ( data , function ( doc ) { console . log ( doc ); }); loadAll (string [, iterator] [ , options ]) Same as safeLoadAll() but uses DEFAULT_FULL_SCHEMA by default. safeDump (object [ , options ]) Serializes object as a YAML document. Uses DEFAULT_SAFE_SCHEMA , so it will throw an exception if you try to dump regexps or functions. However, you can disable exceptions by setting the skipInvalid option to true . options: indent (default: 2) - indentation width to use (in spaces). noArrayIndent (default: false) - when true, will not add an indentation level to array elements skipInvalid (default: false) - do not throw on invalid types (like function in the safe schema) and skip pairs and single values with such types. flowLevel (default: -1) - specifies level of nesting, when to switch from block to flow style for collections. -1 means block style everwhere styles - \"tag\" => \"style\" map. Each tag may have own set of styles. schema (default: DEFAULT_SAFE_SCHEMA ) specifies a schema to use. sortKeys (default: false ) - if true , sort keys when dumping YAML. If a function, use the function to sort the keys. lineWidth (default: 80 ) - set max line width. noRefs (default: false ) - if true , don't convert duplicate objects into references noCompatMode (default: false ) - if true don't try to be compatible with older yaml versions. Currently: don't quote \"yes\", \"no\" and so on, as required for YAML 1.1 condenseFlow (default: false ) - if true flow sequences will be condensed, omitting the space between a, b . Eg. '[a,b]' , and omitting the space between key: value and quoting the key. Eg. '{\"a\":b}' Can be useful when using yaml for pretty URL query params as spaces are %-encoded. The following table show availlable styles (e.g. \"canonical\", \"binary\"...) available for each tag (.e.g. !!null, !!int ...). Yaml output is shown on the right side after => (default setting) or -> : !!null \"canonical\" -> \"~\" \"lowercase\" => \"null\" \"uppercase\" -> \"NULL\" \"camelcase\" -> \"Null\" !!int \"binary\" -> \"0b1\", \"0b101010\", \"0b1110001111010\" \"octal\" -> \"01\", \"052\", \"016172\" \"decimal\" => \"1\", \"42\", \"7290\" \"hexadecimal\" -> \"0x1\", \"0x2A\", \"0x1C7A\" !!bool \"lowercase\" => \"true\", \"false\" \"uppercase\" -> \"TRUE\", \"FALSE\" \"camelcase\" -> \"True\", \"False\" !!float \"lowercase\" => \".nan\", '.inf' \"uppercase\" -> \".NAN\", '.INF' \"camelcase\" -> \".NaN\", '.Inf' Example: safeDump ( object , { 'styles' : { '!!null' : 'canonical' // dump null as ~ }, 'sortKeys' : true // sort object keys }); dump (object [ , options ]) Same as safeDump() but without limits (uses DEFAULT_FULL_SCHEMA by default). Supported YAML types The list of standard YAML tags and corresponding JavaScipt types. See also YAML tag discussion and YAML types repository . !!null '' # null !!bool 'yes' # bool !!int '3...' # number !!float '3.14...' # number !!binary '...base64...' # buffer !!timestamp 'YYYY-...' # date !!omap [ ... ] # array of key-value pairs !!pairs [ ... ] # array or array pairs !!set { ... } # array of objects with given keys and null values !!str '...' # string !!seq [ ... ] # array !!map { ... } # object JavaScript-specific tags !!js/regexp /pattern/gim # RegExp !!js/undefined '' # Undefined !!js/function 'function () {...}' # Function Caveats Note, that you use arrays or objects as key in JS-YAML. JS does not allow objects or arrays as keys, and stringifies (by calling toString() method) them at the moment of adding them. --- ? [ foo , bar ] : - baz ? { foo : bar } : - baz - baz { \"foo,bar\" : [ \"baz\" ], \"[object Object]\" : [ \"baz\" , \"baz\" ] } Also, reading of properties on implicit block mapping keys is not supported yet. So, the following YAML document cannot be loaded. &anchor foo : foo : bar *anchor : duplicate key baz : bat *anchor : duplicate key js-yaml for enterprise Available as part of the Tidelift Subscription The maintainers of js-yaml and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. Learn more.","title":"Index"},{"location":"node_modules/js-yaml/#js-yaml-yaml-12-parser-writer-for-javascript","text":"Online Demo This is an implementation of YAML , a human-friendly data serialization language. Started as PyYAML port, it was completely rewritten from scratch. Now it's very fast, and supports 1.2 spec.","title":"JS-YAML - YAML 1.2 parser / writer for JavaScript"},{"location":"node_modules/js-yaml/#installation","text":"","title":"Installation"},{"location":"node_modules/js-yaml/#yaml-module-for-nodejs","text":"npm install js-yaml","title":"YAML module for node.js"},{"location":"node_modules/js-yaml/#cli-executable","text":"If you want to inspect your YAML files from CLI, install js-yaml globally: npm install -g js-yaml","title":"CLI executable"},{"location":"node_modules/js-yaml/#usage","text":"usage: js-yaml [-h] [-v] [-c] [-t] file Positional arguments: file File with YAML document(s) Optional arguments: -h, --help Show this help message and exit. -v, --version Show program's version number and exit. -c, --compact Display errors in compact mode -t, --trace Show stack trace on error","title":"Usage"},{"location":"node_modules/js-yaml/#bundled-yaml-library-for-browsers","text":"<!-- esprima required only for !!js/function --> < script src = \"esprima.js\" ></ script > < script src = \"js-yaml.min.js\" ></ script > < script type = \"text/javascript\" > var doc = jsyaml . load ( 'greeting: hello\\nname: world' ); </ script > Browser support was done mostly for the online demo. If you find any errors - feel free to send pull requests with fixes. Also note, that IE and other old browsers needs es5-shims to operate. Notes: We have no resources to support browserified version. Don't expect it to be well tested. Don't expect fast fixes if something goes wrong there. !!js/function in browser bundle will not work by default. If you really need it - load esprima parser first (via amd or directly). !!bin in browser will return Array , because browsers do not support node.js Buffer and adding Buffer shims is completely useless on practice.","title":"Bundled YAML library for browsers"},{"location":"node_modules/js-yaml/#api","text":"Here we cover the most 'useful' methods. If you need advanced details (creating your own tags), see wiki and examples for more info. const yaml = require ( 'js-yaml' ); const fs = require ( 'fs' ); // Get document, or throw exception on error try { const doc = yaml . safeLoad ( fs . readFileSync ( '/home/ixti/example.yml' , 'utf8' )); console . log ( doc ); } catch ( e ) { console . log ( e ); }","title":"API"},{"location":"node_modules/js-yaml/#safeload-string-options","text":"Recommended loading way. Parses string as single YAML document. Returns either a plain object, a string or undefined , or throws YAMLException on error. By default, does not support regexps, functions and undefined. This method is safe for untrusted data. options: filename (default: null) - string to be used as a file path in error/warning messages. onWarning (default: null) - function to call on warning messages. Loader will call this function with an instance of YAMLException for each warning. schema (default: DEFAULT_SAFE_SCHEMA ) - specifies a schema to use. FAILSAFE_SCHEMA - only strings, arrays and plain objects: http://www.yaml.org/spec/1.2/spec.html#id2802346 JSON_SCHEMA - all JSON-supported types: http://www.yaml.org/spec/1.2/spec.html#id2803231 CORE_SCHEMA - same as JSON_SCHEMA : http://www.yaml.org/spec/1.2/spec.html#id2804923 DEFAULT_SAFE_SCHEMA - all supported YAML types, without unsafe ones ( !!js/undefined , !!js/regexp and !!js/function ): http://yaml.org/type/ DEFAULT_FULL_SCHEMA - all supported YAML types. json (default: false) - compatibility with JSON.parse behaviour. If true, then duplicate keys in a mapping will override values rather than throwing an error. NOTE: This function does not understand multi-document sources, it throws exception on those. NOTE: JS-YAML does not support schema-specific tag resolution restrictions. So, the JSON schema is not as strictly defined in the YAML specification. It allows numbers in any notation, use Null and NULL as null , etc. The core schema also has no such restrictions. It allows binary notation for integers.","title":"safeLoad (string [ , options ])"},{"location":"node_modules/js-yaml/#load-string-options","text":"Use with care with untrusted sources . The same as safeLoad() but uses DEFAULT_FULL_SCHEMA by default - adds some JavaScript-specific types: !!js/function , !!js/regexp and !!js/undefined . For untrusted sources, you must additionally validate object structure to avoid injections: const untrusted_code = '\"toString\": !<tag:yaml.org,2002:js/function> \"function (){very_evil_thing();}\"' ; // I'm just converting that string, what could possibly go wrong? require ( 'js-yaml' ). load ( untrusted_code ) + ''","title":"load (string [ , options ])"},{"location":"node_modules/js-yaml/#safeloadall-string-iterator-options","text":"Same as safeLoad() , but understands multi-document sources. Applies iterator to each document if specified, or returns array of documents. const yaml = require ( 'js-yaml' ); yaml . safeLoadAll ( data , function ( doc ) { console . log ( doc ); });","title":"safeLoadAll (string [, iterator] [, options ])"},{"location":"node_modules/js-yaml/#loadall-string-iterator-options","text":"Same as safeLoadAll() but uses DEFAULT_FULL_SCHEMA by default.","title":"loadAll (string [, iterator] [ , options ])"},{"location":"node_modules/js-yaml/#safedump-object-options","text":"Serializes object as a YAML document. Uses DEFAULT_SAFE_SCHEMA , so it will throw an exception if you try to dump regexps or functions. However, you can disable exceptions by setting the skipInvalid option to true . options: indent (default: 2) - indentation width to use (in spaces). noArrayIndent (default: false) - when true, will not add an indentation level to array elements skipInvalid (default: false) - do not throw on invalid types (like function in the safe schema) and skip pairs and single values with such types. flowLevel (default: -1) - specifies level of nesting, when to switch from block to flow style for collections. -1 means block style everwhere styles - \"tag\" => \"style\" map. Each tag may have own set of styles. schema (default: DEFAULT_SAFE_SCHEMA ) specifies a schema to use. sortKeys (default: false ) - if true , sort keys when dumping YAML. If a function, use the function to sort the keys. lineWidth (default: 80 ) - set max line width. noRefs (default: false ) - if true , don't convert duplicate objects into references noCompatMode (default: false ) - if true don't try to be compatible with older yaml versions. Currently: don't quote \"yes\", \"no\" and so on, as required for YAML 1.1 condenseFlow (default: false ) - if true flow sequences will be condensed, omitting the space between a, b . Eg. '[a,b]' , and omitting the space between key: value and quoting the key. Eg. '{\"a\":b}' Can be useful when using yaml for pretty URL query params as spaces are %-encoded. The following table show availlable styles (e.g. \"canonical\", \"binary\"...) available for each tag (.e.g. !!null, !!int ...). Yaml output is shown on the right side after => (default setting) or -> : !!null \"canonical\" -> \"~\" \"lowercase\" => \"null\" \"uppercase\" -> \"NULL\" \"camelcase\" -> \"Null\" !!int \"binary\" -> \"0b1\", \"0b101010\", \"0b1110001111010\" \"octal\" -> \"01\", \"052\", \"016172\" \"decimal\" => \"1\", \"42\", \"7290\" \"hexadecimal\" -> \"0x1\", \"0x2A\", \"0x1C7A\" !!bool \"lowercase\" => \"true\", \"false\" \"uppercase\" -> \"TRUE\", \"FALSE\" \"camelcase\" -> \"True\", \"False\" !!float \"lowercase\" => \".nan\", '.inf' \"uppercase\" -> \".NAN\", '.INF' \"camelcase\" -> \".NaN\", '.Inf' Example: safeDump ( object , { 'styles' : { '!!null' : 'canonical' // dump null as ~ }, 'sortKeys' : true // sort object keys });","title":"safeDump (object [ , options ])"},{"location":"node_modules/js-yaml/#dump-object-options","text":"Same as safeDump() but without limits (uses DEFAULT_FULL_SCHEMA by default).","title":"dump (object [ , options ])"},{"location":"node_modules/js-yaml/#supported-yaml-types","text":"The list of standard YAML tags and corresponding JavaScipt types. See also YAML tag discussion and YAML types repository . !!null '' # null !!bool 'yes' # bool !!int '3...' # number !!float '3.14...' # number !!binary '...base64...' # buffer !!timestamp 'YYYY-...' # date !!omap [ ... ] # array of key-value pairs !!pairs [ ... ] # array or array pairs !!set { ... } # array of objects with given keys and null values !!str '...' # string !!seq [ ... ] # array !!map { ... } # object JavaScript-specific tags !!js/regexp /pattern/gim # RegExp !!js/undefined '' # Undefined !!js/function 'function () {...}' # Function","title":"Supported YAML types"},{"location":"node_modules/js-yaml/#caveats","text":"Note, that you use arrays or objects as key in JS-YAML. JS does not allow objects or arrays as keys, and stringifies (by calling toString() method) them at the moment of adding them. --- ? [ foo , bar ] : - baz ? { foo : bar } : - baz - baz { \"foo,bar\" : [ \"baz\" ], \"[object Object]\" : [ \"baz\" , \"baz\" ] } Also, reading of properties on implicit block mapping keys is not supported yet. So, the following YAML document cannot be loaded. &anchor foo : foo : bar *anchor : duplicate key baz : bat *anchor : duplicate key","title":"Caveats"},{"location":"node_modules/js-yaml/#js-yaml-for-enterprise","text":"Available as part of the Tidelift Subscription The maintainers of js-yaml and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. Learn more.","title":"js-yaml for enterprise"},{"location":"node_modules/js-yaml/CHANGELOG/","text":"Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . 3.14.1 - 2020-12-07 Security Fix possible code execution in (already unsafe) .load() (in &anchor). 3.14.0 - 2020-05-22 Changed Support safe/loadAll(input, options) variant of call. CI: drop outdated nodejs versions. Dev deps bump. Fixed Quote = in plain scalars #519. Check the node type for !<?> tag in case user manually specifies it. Verify that there are no null-bytes in input. Fix wrong quote position when writing condensed flow, #526. 3.13.1 - 2019-04-05 Security Fix possible code execution in (already unsafe) .load() , #480. 3.13.0 - 2019-03-20 Security Security fix: safeLoad() can hang when arrays with nested refs used as key. Now throws exception for nested arrays. #475. 3.12.2 - 2019-02-26 Fixed Fix noArrayIndent option for root level, #468. 3.12.1 - 2019-01-05 Added Added noArrayIndent option, #432. 3.12.0 - 2018-06-02 Changed Support arrow functions without a block statement, #421. 3.11.0 - 2018-03-05 Added Add arrow functions suport for !!js/function . Fixed Fix dump in bin/octal/hex formats for negative integers, #399. 3.10.0 - 2017-09-10 Fixed Fix condenseFlow output (quote keys for sure, instead of spaces), #371, #370. Dump astrals as codepoints instead of surrogate pair, #368. 3.9.1 - 2017-07-08 Fixed Ensure stack is present for custom errors in node 7.+, #351. 3.9.0 - 2017-07-08 Added Add condenseFlow option (to create pretty URL query params), #346. Fixed Support array return from safeLoadAll/loadAll, #350. 3.8.4 - 2017-05-08 Fixed Dumper: prevent space after dash for arrays that wrap, #343. 3.8.3 - 2017-04-05 Fixed Should not allow numbers to begin and end with underscore, #335. 3.8.2 - 2017-03-02 Fixed Fix !!float 123 (integers) parse, #333. Don't allow leading zeros in floats (except 0, 0.xxx). Allow positive exponent without sign in floats. 3.8.1 - 2017-02-07 Changed Maintenance: update browserified build. 3.8.0 - 2017-02-07 Fixed Fix reported position for duplicated mapping key errors. Now points to block start instead of block end. (#243, thanks to @shockey). 3.7.0 - 2016-11-12 Added Support polymorphism for tags (#300, thanks to @monken). Fixed Fix parsing of quotes followed by newlines (#304, thanks to @dplepage). 3.6.1 - 2016-05-11 Fixed Fix output cut on a pipe, #286. 3.6.0 - 2016-04-16 Fixed Dumper rewrite, fix multiple bugs with trailing \\n . Big thanks to @aepsilon! Loader: fix leading/trailing newlines in block scalars, @aepsilon. 3.5.5 - 2016-03-17 Fixed Date parse fix: don't allow dates with on digit in month and day, #268. 3.5.4 - 2016-03-09 Added noCompatMode for dumper, to disable quoting YAML 1.1 values. 3.5.3 - 2016-02-11 Changed Maintenance release. 3.5.2 - 2016-01-11 Changed Maintenance: missed comma in bower config. 3.5.1 - 2016-01-11 Changed Removed inherit dependency, #239. Better browserify workaround for esprima load. Demo rewrite. 3.5.0 - 2016-01-10 Fixed Dumper. Fold strings only, #217. Dumper. norefs option, to clone linked objects, #229. Loader. Throw a warning for duplicate keys, #166. Improved browserify support (mark esprima & Buffer excluded). 3.4.6 - 2015-11-26 Changed Use standalone inherit to keep browserified files clear. 3.4.5 - 2015-11-23 Added Added lineWidth option to dumper. 3.4.4 - 2015-11-21 Fixed Fixed floats dump (missed dot for scientific format), #220. Allow non-printable characters inside quoted scalars, #192. 3.4.3 - 2015-10-10 Changed Maintenance release - deps bump (esprima, argparse). 3.4.2 - 2015-09-09 Fixed Fixed serialization of duplicated entries in sequences, #205. Thanks to @vogelsgesang. 3.4.1 - 2015-09-05 Fixed Fixed stacktrace handling in generated errors, for browsers (FF/IE). 3.4.0 - 2015-08-23 Changed Don't throw on warnings anymore. Use onWarning option to catch. Throw error on unknown tags (was warning before). Reworked internals of error class. Fixed Fixed multiline keys dump, #197. Thanks to @tcr. Fixed heading line breaks in some scalars (regression). 3.3.1 - 2015-05-13 Added Added .sortKeys dumper option, thanks to @rjmunro. Fixed Fixed astral characters support, #191. 3.3.0 - 2015-04-26 Changed Significantly improved long strings formatting in dumper, thanks to @isaacs. Strip BOM if exists. 3.2.7 - 2015-02-19 Changed Maintenance release. Updated dependencies. HISTORY.md -> CHANGELOG.md 3.2.6 - 2015-02-07 Fixed Fixed encoding of UTF-16 surrogate pairs. (e.g. \"\\U0001F431\" CAT FACE). Fixed demo dates dump (#113, thanks to @Hypercubed). 3.2.5 - 2014-12-28 Fixed Fixed resolving of all built-in types on empty nodes. Fixed invalid warning on empty lines within quoted scalars and flow collections. Fixed bug: Tag on an empty node didn't resolve in some cases. 3.2.4 - 2014-12-19 Fixed Fixed resolving of !!null tag on an empty node. 3.2.3 - 2014-11-08 Fixed Implemented dumping of objects with circular and cross references. Partially fixed aliasing of constructed objects. (see issue #141 for details) 3.2.2 - 2014-09-07 Fixed Fixed infinite loop on unindented block scalars. Rewritten base64 encode/decode in binary type, to keep code licence clear. 3.2.1 - 2014-08-24 Fixed Nothig new. Just fix npm publish error. 3.2.0 - 2014-08-24 Added Added input piping support to CLI. Fixed Fixed typo, that could cause hand on initial indent (#139). 3.1.0 - 2014-07-07 Changed 1.5x-2x speed boost. Removed deprecated require('xxx.yml') support. Significant code cleanup and refactoring. Internal API changed. If you used custom types - see updated examples. Others are not affected. Even if the input string has no trailing line break character, it will be parsed as if it has one. Added benchmark scripts. Moved bower files to /dist folder Bugfixes. 3.0.2 - 2014-02-27 Fixed Fixed bug: \"constructor\" string parsed as null . 3.0.1 - 2013-12-22 Fixed Fixed parsing of literal scalars. (issue #108) Prevented adding unnecessary spaces in object dumps. (issue #68) Fixed dumping of objects with very long (> 1024 in length) keys. 3.0.0 - 2013-12-16 Changed Refactored code. Changed API for custom types. Removed output colors in CLI, dump json by default. Removed big dependencies from browser version (esprima, buffer). Load esprima manually, if !!js/function needed. !!bin now returns Array in browser AMD support. Don't quote dumped strings because of - & ? (if not first char). Deprecated loading yaml files via require() , as not recommended behaviour for node. 2.1.3 - 2013-10-16 Fixed Fix wrong loading of empty block scalars. 2.1.2 - 2013-10-07 Fixed Fix unwanted line breaks in folded scalars. 2.1.1 - 2013-10-02 Fixed Dumper now respects deprecated booleans syntax from YAML 1.0/1.1 Fixed reader bug in JSON-like sequences/mappings. 2.1.0 - 2013-06-05 Added Add standard YAML schemas: Failsafe ( FAILSAFE_SCHEMA ), JSON ( JSON_SCHEMA ) and Core ( CORE_SCHEMA ). Add skipInvalid dumper option. Changed Rename DEFAULT_SCHEMA to DEFAULT_FULL_SCHEMA and SAFE_SCHEMA to DEFAULT_SAFE_SCHEMA . Use safeLoad for require extension. Fixed Bug fix: export NIL constant from the public interface. 2.0.5 - 2013-04-26 Security Close security issue in !!js/function constructor. Big thanks to @nealpoole for security audit. 2.0.4 - 2013-04-08 Changed Updated .npmignore to reduce package size 2.0.3 - 2013-02-26 Fixed Fixed dumping of empty arrays ans objects. ([] and {} instead of null) 2.0.2 - 2013-02-15 Fixed Fixed input validation: tabs are printable characters. 2.0.1 - 2013-02-09 Fixed Fixed error, when options not passed to function cass 2.0.0 - 2013-02-09 Changed Full rewrite. New architecture. Fast one-stage parsing. Changed custom types API. Added YAML dumper. 1.0.3 - 2012-11-05 Fixed Fixed utf-8 files loading. 1.0.2 - 2012-08-02 Fixed Pull out hand-written shims. Use ES5-Shims for old browsers support. See #44. Fix timstamps incorectly parsed in local time when no time part specified. 1.0.1 - 2012-07-07 Fixed Fixes TypeError: 'undefined' is not an object under Safari. Thanks Phuong. Fix timestamps incorrectly parsed in local time. Thanks @caolan. Closes #46. 1.0.0 - 2012-07-01 Changed y , yes , n , no , on , off are not converted to Booleans anymore. Fixes #42. require(filename) now returns a single document and throws an Error if file contains more than one document. CLI was merged back from js-yaml.bin 0.3.7 - 2012-02-28 Fixed Fix export of addConstructor() . Closes #39. 0.3.6 - 2012-02-22 Changed Removed AMD parts - too buggy to use. Need help to rewrite from scratch Fixed Removed YUI compressor warning (renamed double variable). Closes #40. 0.3.5 - 2012-01-10 Fixed Workagound for .npmignore fuckup under windows. Thanks to airportyh. 0.3.4 - 2011-12-24 Fixed Fixes str[] for oldIEs support. Adds better has change support for browserified demo. improves compact output of Error. Closes #33. 0.3.3 - 2011-12-20 Added adds compact stringification of Errors. Changed jsyaml executable moved to separate module. 0.3.2 - 2011-12-16 Added Added jsyaml executable. Added !!js/function support. Closes #12. Fixed Fixes ug with block style scalars. Closes #26. All sources are passing JSLint now. Fixes bug in Safari. Closes #28. Fixes bug in Opers. Closes #29. Improves browser support. Closes #20. 0.3.1 - 2011-11-18 Added Added AMD support for browserified version. Added permalinks for online demo YAML snippets. Now we have YPaste service, lol. Added !!js/regexp and !!js/undefined types. Partially solves #12. Changed Wrapped browserified js-yaml into closure. Fixed Fixed the resolvement of non-specific tags. Closes #17. Fixed !!set mapping. Fixed month parse in dates. Closes #19. 0.3.0 - 2011-11-09 Added Added browserified version. Closes #13. Added live demo of browserified version. Ported some of the PyYAML tests. See #14. Fixed Removed JS.Class dependency. Closes #3. Fixed timestamp bug when fraction was given. 0.2.2 - 2011-11-06 Fixed Fixed crash on docs without ---. Closes #8. Fixed multiline string parse Fixed tests/comments for using array as key 0.2.1 - 2011-11-02 Fixed Fixed short file read (<4k). Closes #9. 0.2.0 - 2011-11-02 Changed First public release","title":"Changelog"},{"location":"node_modules/js-yaml/CHANGELOG/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"node_modules/js-yaml/CHANGELOG/#3141-2020-12-07","text":"","title":"3.14.1 - 2020-12-07"},{"location":"node_modules/js-yaml/CHANGELOG/#security","text":"Fix possible code execution in (already unsafe) .load() (in &anchor).","title":"Security"},{"location":"node_modules/js-yaml/CHANGELOG/#3140-2020-05-22","text":"","title":"3.14.0 - 2020-05-22"},{"location":"node_modules/js-yaml/CHANGELOG/#changed","text":"Support safe/loadAll(input, options) variant of call. CI: drop outdated nodejs versions. Dev deps bump.","title":"Changed"},{"location":"node_modules/js-yaml/CHANGELOG/#fixed","text":"Quote = in plain scalars #519. Check the node type for !<?> tag in case user manually specifies it. Verify that there are no null-bytes in input. Fix wrong quote position when writing condensed flow, #526.","title":"Fixed"},{"location":"node_modules/js-yaml/CHANGELOG/#3131-2019-04-05","text":"","title":"3.13.1 - 2019-04-05"},{"location":"node_modules/js-yaml/CHANGELOG/#security_1","text":"Fix possible code execution in (already unsafe) .load() , #480.","title":"Security"},{"location":"node_modules/js-yaml/CHANGELOG/#3130-2019-03-20","text":"","title":"3.13.0 - 2019-03-20"},{"location":"node_modules/js-yaml/CHANGELOG/#security_2","text":"Security fix: safeLoad() can hang when arrays with nested refs used as key. Now throws exception for nested arrays. #475.","title":"Security"},{"location":"node_modules/js-yaml/CHANGELOG/#3122-2019-02-26","text":"","title":"3.12.2 - 2019-02-26"},{"location":"node_modules/js-yaml/CHANGELOG/#fixed_1","text":"Fix noArrayIndent option for root level, #468.","title":"Fixed"},{"location":"node_modules/js-yaml/CHANGELOG/#3121-2019-01-05","text":"","title":"3.12.1 - 2019-01-05"},{"location":"node_modules/js-yaml/CHANGELOG/#added","text":"Added noArrayIndent option, #432.","title":"Added"},{"location":"node_modules/js-yaml/CHANGELOG/#3120-2018-06-02","text":"","title":"3.12.0 - 2018-06-02"},{"location":"node_modules/js-yaml/CHANGELOG/#changed_1","text":"Support arrow functions without a block statement, #421.","title":"Changed"},{"location":"node_modules/js-yaml/CHANGELOG/#3110-2018-03-05","text":"","title":"3.11.0 - 2018-03-05"},{"location":"node_modules/js-yaml/CHANGELOG/#added_1","text":"Add arrow functions suport for !!js/function .","title":"Added"},{"location":"node_modules/js-yaml/CHANGELOG/#fixed_2","text":"Fix dump in bin/octal/hex formats for negative integers, #399.","title":"Fixed"},{"location":"node_modules/js-yaml/CHANGELOG/#3100-2017-09-10","text":"","title":"3.10.0 - 2017-09-10"},{"location":"node_modules/js-yaml/CHANGELOG/#fixed_3","text":"Fix condenseFlow output (quote keys for sure, instead of spaces), #371, #370. Dump astrals as codepoints instead of surrogate pair, #368.","title":"Fixed"},{"location":"node_modules/js-yaml/CHANGELOG/#391-2017-07-08","text":"","title":"3.9.1 - 2017-07-08"},{"location":"node_modules/js-yaml/CHANGELOG/#fixed_4","text":"Ensure stack is present for custom errors in node 7.+, #351.","title":"Fixed"},{"location":"node_modules/js-yaml/CHANGELOG/#390-2017-07-08","text":"","title":"3.9.0 - 2017-07-08"},{"location":"node_modules/js-yaml/CHANGELOG/#added_2","text":"Add condenseFlow option (to create pretty URL query params), #346.","title":"Added"},{"location":"node_modules/js-yaml/CHANGELOG/#fixed_5","text":"Support array return from safeLoadAll/loadAll, #350.","title":"Fixed"},{"location":"node_modules/js-yaml/CHANGELOG/#384-2017-05-08","text":"","title":"3.8.4 - 2017-05-08"},{"location":"node_modules/js-yaml/CHANGELOG/#fixed_6","text":"Dumper: prevent space after dash for arrays that wrap, #343.","title":"Fixed"},{"location":"node_modules/js-yaml/CHANGELOG/#383-2017-04-05","text":"","title":"3.8.3 - 2017-04-05"},{"location":"node_modules/js-yaml/CHANGELOG/#fixed_7","text":"Should not allow numbers to begin and end with underscore, #335.","title":"Fixed"},{"location":"node_modules/js-yaml/CHANGELOG/#382-2017-03-02","text":"","title":"3.8.2 - 2017-03-02"},{"location":"node_modules/js-yaml/CHANGELOG/#fixed_8","text":"Fix !!float 123 (integers) parse, #333. Don't allow leading zeros in floats (except 0, 0.xxx). Allow positive exponent without sign in floats.","title":"Fixed"},{"location":"node_modules/js-yaml/CHANGELOG/#381-2017-02-07","text":"","title":"3.8.1 - 2017-02-07"},{"location":"node_modules/js-yaml/CHANGELOG/#changed_2","text":"Maintenance: update browserified build.","title":"Changed"},{"location":"node_modules/js-yaml/CHANGELOG/#380-2017-02-07","text":"","title":"3.8.0 - 2017-02-07"},{"location":"node_modules/js-yaml/CHANGELOG/#fixed_9","text":"Fix reported position for duplicated mapping key errors. Now points to block start instead of block end. (#243, thanks to @shockey).","title":"Fixed"},{"location":"node_modules/js-yaml/CHANGELOG/#370-2016-11-12","text":"","title":"3.7.0 - 2016-11-12"},{"location":"node_modules/js-yaml/CHANGELOG/#added_3","text":"Support polymorphism for tags (#300, thanks to @monken).","title":"Added"},{"location":"node_modules/js-yaml/CHANGELOG/#fixed_10","text":"Fix parsing of quotes followed by newlines (#304, thanks to @dplepage).","title":"Fixed"},{"location":"node_modules/js-yaml/CHANGELOG/#361-2016-05-11","text":"","title":"3.6.1 - 2016-05-11"},{"location":"node_modules/js-yaml/CHANGELOG/#fixed_11","text":"Fix output cut on a pipe, #286.","title":"Fixed"},{"location":"node_modules/js-yaml/CHANGELOG/#360-2016-04-16","text":"","title":"3.6.0 - 2016-04-16"},{"location":"node_modules/js-yaml/CHANGELOG/#fixed_12","text":"Dumper rewrite, fix multiple bugs with trailing \\n . Big thanks to @aepsilon! Loader: fix leading/trailing newlines in block scalars, @aepsilon.","title":"Fixed"},{"location":"node_modules/js-yaml/CHANGELOG/#355-2016-03-17","text":"","title":"3.5.5 - 2016-03-17"},{"location":"node_modules/js-yaml/CHANGELOG/#fixed_13","text":"Date parse fix: don't allow dates with on digit in month and day, #268.","title":"Fixed"},{"location":"node_modules/js-yaml/CHANGELOG/#354-2016-03-09","text":"","title":"3.5.4 - 2016-03-09"},{"location":"node_modules/js-yaml/CHANGELOG/#added_4","text":"noCompatMode for dumper, to disable quoting YAML 1.1 values.","title":"Added"},{"location":"node_modules/js-yaml/CHANGELOG/#353-2016-02-11","text":"","title":"3.5.3 - 2016-02-11"},{"location":"node_modules/js-yaml/CHANGELOG/#changed_3","text":"Maintenance release.","title":"Changed"},{"location":"node_modules/js-yaml/CHANGELOG/#352-2016-01-11","text":"","title":"3.5.2 - 2016-01-11"},{"location":"node_modules/js-yaml/CHANGELOG/#changed_4","text":"Maintenance: missed comma in bower config.","title":"Changed"},{"location":"node_modules/js-yaml/CHANGELOG/#351-2016-01-11","text":"","title":"3.5.1 - 2016-01-11"},{"location":"node_modules/js-yaml/CHANGELOG/#changed_5","text":"Removed inherit dependency, #239. Better browserify workaround for esprima load. Demo rewrite.","title":"Changed"},{"location":"node_modules/js-yaml/CHANGELOG/#350-2016-01-10","text":"","title":"3.5.0 - 2016-01-10"},{"location":"node_modules/js-yaml/CHANGELOG/#fixed_14","text":"Dumper. Fold strings only, #217. Dumper. norefs option, to clone linked objects, #229. Loader. Throw a warning for duplicate keys, #166. Improved browserify support (mark esprima & Buffer excluded).","title":"Fixed"},{"location":"node_modules/js-yaml/CHANGELOG/#346-2015-11-26","text":"","title":"3.4.6 - 2015-11-26"},{"location":"node_modules/js-yaml/CHANGELOG/#changed_6","text":"Use standalone inherit to keep browserified files clear.","title":"Changed"},{"location":"node_modules/js-yaml/CHANGELOG/#345-2015-11-23","text":"","title":"3.4.5 - 2015-11-23"},{"location":"node_modules/js-yaml/CHANGELOG/#added_5","text":"Added lineWidth option to dumper.","title":"Added"},{"location":"node_modules/js-yaml/CHANGELOG/#344-2015-11-21","text":"","title":"3.4.4 - 2015-11-21"},{"location":"node_modules/js-yaml/CHANGELOG/#fixed_15","text":"Fixed floats dump (missed dot for scientific format), #220. Allow non-printable characters inside quoted scalars, #192.","title":"Fixed"},{"location":"node_modules/js-yaml/CHANGELOG/#343-2015-10-10","text":"","title":"3.4.3 - 2015-10-10"},{"location":"node_modules/js-yaml/CHANGELOG/#changed_7","text":"Maintenance release - deps bump (esprima, argparse).","title":"Changed"},{"location":"node_modules/js-yaml/CHANGELOG/#342-2015-09-09","text":"","title":"3.4.2 - 2015-09-09"},{"location":"node_modules/js-yaml/CHANGELOG/#fixed_16","text":"Fixed serialization of duplicated entries in sequences, #205. Thanks to @vogelsgesang.","title":"Fixed"},{"location":"node_modules/js-yaml/CHANGELOG/#341-2015-09-05","text":"","title":"3.4.1 - 2015-09-05"},{"location":"node_modules/js-yaml/CHANGELOG/#fixed_17","text":"Fixed stacktrace handling in generated errors, for browsers (FF/IE).","title":"Fixed"},{"location":"node_modules/js-yaml/CHANGELOG/#340-2015-08-23","text":"","title":"3.4.0 - 2015-08-23"},{"location":"node_modules/js-yaml/CHANGELOG/#changed_8","text":"Don't throw on warnings anymore. Use onWarning option to catch. Throw error on unknown tags (was warning before). Reworked internals of error class.","title":"Changed"},{"location":"node_modules/js-yaml/CHANGELOG/#fixed_18","text":"Fixed multiline keys dump, #197. Thanks to @tcr. Fixed heading line breaks in some scalars (regression).","title":"Fixed"},{"location":"node_modules/js-yaml/CHANGELOG/#331-2015-05-13","text":"","title":"3.3.1 - 2015-05-13"},{"location":"node_modules/js-yaml/CHANGELOG/#added_6","text":"Added .sortKeys dumper option, thanks to @rjmunro.","title":"Added"},{"location":"node_modules/js-yaml/CHANGELOG/#fixed_19","text":"Fixed astral characters support, #191.","title":"Fixed"},{"location":"node_modules/js-yaml/CHANGELOG/#330-2015-04-26","text":"","title":"3.3.0 - 2015-04-26"},{"location":"node_modules/js-yaml/CHANGELOG/#changed_9","text":"Significantly improved long strings formatting in dumper, thanks to @isaacs. Strip BOM if exists.","title":"Changed"},{"location":"node_modules/js-yaml/CHANGELOG/#327-2015-02-19","text":"","title":"3.2.7 - 2015-02-19"},{"location":"node_modules/js-yaml/CHANGELOG/#changed_10","text":"Maintenance release. Updated dependencies. HISTORY.md -> CHANGELOG.md","title":"Changed"},{"location":"node_modules/js-yaml/CHANGELOG/#326-2015-02-07","text":"","title":"3.2.6 - 2015-02-07"},{"location":"node_modules/js-yaml/CHANGELOG/#fixed_20","text":"Fixed encoding of UTF-16 surrogate pairs. (e.g. \"\\U0001F431\" CAT FACE). Fixed demo dates dump (#113, thanks to @Hypercubed).","title":"Fixed"},{"location":"node_modules/js-yaml/CHANGELOG/#325-2014-12-28","text":"","title":"3.2.5 - 2014-12-28"},{"location":"node_modules/js-yaml/CHANGELOG/#fixed_21","text":"Fixed resolving of all built-in types on empty nodes. Fixed invalid warning on empty lines within quoted scalars and flow collections. Fixed bug: Tag on an empty node didn't resolve in some cases.","title":"Fixed"},{"location":"node_modules/js-yaml/CHANGELOG/#324-2014-12-19","text":"","title":"3.2.4 - 2014-12-19"},{"location":"node_modules/js-yaml/CHANGELOG/#fixed_22","text":"Fixed resolving of !!null tag on an empty node.","title":"Fixed"},{"location":"node_modules/js-yaml/CHANGELOG/#323-2014-11-08","text":"","title":"3.2.3 - 2014-11-08"},{"location":"node_modules/js-yaml/CHANGELOG/#fixed_23","text":"Implemented dumping of objects with circular and cross references. Partially fixed aliasing of constructed objects. (see issue #141 for details)","title":"Fixed"},{"location":"node_modules/js-yaml/CHANGELOG/#322-2014-09-07","text":"","title":"3.2.2 - 2014-09-07"},{"location":"node_modules/js-yaml/CHANGELOG/#fixed_24","text":"Fixed infinite loop on unindented block scalars. Rewritten base64 encode/decode in binary type, to keep code licence clear.","title":"Fixed"},{"location":"node_modules/js-yaml/CHANGELOG/#321-2014-08-24","text":"","title":"3.2.1 - 2014-08-24"},{"location":"node_modules/js-yaml/CHANGELOG/#fixed_25","text":"Nothig new. Just fix npm publish error.","title":"Fixed"},{"location":"node_modules/js-yaml/CHANGELOG/#320-2014-08-24","text":"","title":"3.2.0 - 2014-08-24"},{"location":"node_modules/js-yaml/CHANGELOG/#added_7","text":"Added input piping support to CLI.","title":"Added"},{"location":"node_modules/js-yaml/CHANGELOG/#fixed_26","text":"Fixed typo, that could cause hand on initial indent (#139).","title":"Fixed"},{"location":"node_modules/js-yaml/CHANGELOG/#310-2014-07-07","text":"","title":"3.1.0 - 2014-07-07"},{"location":"node_modules/js-yaml/CHANGELOG/#changed_11","text":"1.5x-2x speed boost. Removed deprecated require('xxx.yml') support. Significant code cleanup and refactoring. Internal API changed. If you used custom types - see updated examples. Others are not affected. Even if the input string has no trailing line break character, it will be parsed as if it has one. Added benchmark scripts. Moved bower files to /dist folder Bugfixes.","title":"Changed"},{"location":"node_modules/js-yaml/CHANGELOG/#302-2014-02-27","text":"","title":"3.0.2 - 2014-02-27"},{"location":"node_modules/js-yaml/CHANGELOG/#fixed_27","text":"Fixed bug: \"constructor\" string parsed as null .","title":"Fixed"},{"location":"node_modules/js-yaml/CHANGELOG/#301-2013-12-22","text":"","title":"3.0.1 - 2013-12-22"},{"location":"node_modules/js-yaml/CHANGELOG/#fixed_28","text":"Fixed parsing of literal scalars. (issue #108) Prevented adding unnecessary spaces in object dumps. (issue #68) Fixed dumping of objects with very long (> 1024 in length) keys.","title":"Fixed"},{"location":"node_modules/js-yaml/CHANGELOG/#300-2013-12-16","text":"","title":"3.0.0 - 2013-12-16"},{"location":"node_modules/js-yaml/CHANGELOG/#changed_12","text":"Refactored code. Changed API for custom types. Removed output colors in CLI, dump json by default. Removed big dependencies from browser version (esprima, buffer). Load esprima manually, if !!js/function needed. !!bin now returns Array in browser AMD support. Don't quote dumped strings because of - & ? (if not first char). Deprecated loading yaml files via require() , as not recommended behaviour for node.","title":"Changed"},{"location":"node_modules/js-yaml/CHANGELOG/#213-2013-10-16","text":"","title":"2.1.3 - 2013-10-16"},{"location":"node_modules/js-yaml/CHANGELOG/#fixed_29","text":"Fix wrong loading of empty block scalars.","title":"Fixed"},{"location":"node_modules/js-yaml/CHANGELOG/#212-2013-10-07","text":"","title":"2.1.2 - 2013-10-07"},{"location":"node_modules/js-yaml/CHANGELOG/#fixed_30","text":"Fix unwanted line breaks in folded scalars.","title":"Fixed"},{"location":"node_modules/js-yaml/CHANGELOG/#211-2013-10-02","text":"","title":"2.1.1 - 2013-10-02"},{"location":"node_modules/js-yaml/CHANGELOG/#fixed_31","text":"Dumper now respects deprecated booleans syntax from YAML 1.0/1.1 Fixed reader bug in JSON-like sequences/mappings.","title":"Fixed"},{"location":"node_modules/js-yaml/CHANGELOG/#210-2013-06-05","text":"","title":"2.1.0 - 2013-06-05"},{"location":"node_modules/js-yaml/CHANGELOG/#added_8","text":"Add standard YAML schemas: Failsafe ( FAILSAFE_SCHEMA ), JSON ( JSON_SCHEMA ) and Core ( CORE_SCHEMA ). Add skipInvalid dumper option.","title":"Added"},{"location":"node_modules/js-yaml/CHANGELOG/#changed_13","text":"Rename DEFAULT_SCHEMA to DEFAULT_FULL_SCHEMA and SAFE_SCHEMA to DEFAULT_SAFE_SCHEMA . Use safeLoad for require extension.","title":"Changed"},{"location":"node_modules/js-yaml/CHANGELOG/#fixed_32","text":"Bug fix: export NIL constant from the public interface.","title":"Fixed"},{"location":"node_modules/js-yaml/CHANGELOG/#205-2013-04-26","text":"","title":"2.0.5 - 2013-04-26"},{"location":"node_modules/js-yaml/CHANGELOG/#security_3","text":"Close security issue in !!js/function constructor. Big thanks to @nealpoole for security audit.","title":"Security"},{"location":"node_modules/js-yaml/CHANGELOG/#204-2013-04-08","text":"","title":"2.0.4 - 2013-04-08"},{"location":"node_modules/js-yaml/CHANGELOG/#changed_14","text":"Updated .npmignore to reduce package size","title":"Changed"},{"location":"node_modules/js-yaml/CHANGELOG/#203-2013-02-26","text":"","title":"2.0.3 - 2013-02-26"},{"location":"node_modules/js-yaml/CHANGELOG/#fixed_33","text":"Fixed dumping of empty arrays ans objects. ([] and {} instead of null)","title":"Fixed"},{"location":"node_modules/js-yaml/CHANGELOG/#202-2013-02-15","text":"","title":"2.0.2 - 2013-02-15"},{"location":"node_modules/js-yaml/CHANGELOG/#fixed_34","text":"Fixed input validation: tabs are printable characters.","title":"Fixed"},{"location":"node_modules/js-yaml/CHANGELOG/#201-2013-02-09","text":"","title":"2.0.1 - 2013-02-09"},{"location":"node_modules/js-yaml/CHANGELOG/#fixed_35","text":"Fixed error, when options not passed to function cass","title":"Fixed"},{"location":"node_modules/js-yaml/CHANGELOG/#200-2013-02-09","text":"","title":"2.0.0 - 2013-02-09"},{"location":"node_modules/js-yaml/CHANGELOG/#changed_15","text":"Full rewrite. New architecture. Fast one-stage parsing. Changed custom types API. Added YAML dumper.","title":"Changed"},{"location":"node_modules/js-yaml/CHANGELOG/#103-2012-11-05","text":"","title":"1.0.3 - 2012-11-05"},{"location":"node_modules/js-yaml/CHANGELOG/#fixed_36","text":"Fixed utf-8 files loading.","title":"Fixed"},{"location":"node_modules/js-yaml/CHANGELOG/#102-2012-08-02","text":"","title":"1.0.2 - 2012-08-02"},{"location":"node_modules/js-yaml/CHANGELOG/#fixed_37","text":"Pull out hand-written shims. Use ES5-Shims for old browsers support. See #44. Fix timstamps incorectly parsed in local time when no time part specified.","title":"Fixed"},{"location":"node_modules/js-yaml/CHANGELOG/#101-2012-07-07","text":"","title":"1.0.1 - 2012-07-07"},{"location":"node_modules/js-yaml/CHANGELOG/#fixed_38","text":"Fixes TypeError: 'undefined' is not an object under Safari. Thanks Phuong. Fix timestamps incorrectly parsed in local time. Thanks @caolan. Closes #46.","title":"Fixed"},{"location":"node_modules/js-yaml/CHANGELOG/#100-2012-07-01","text":"","title":"1.0.0 - 2012-07-01"},{"location":"node_modules/js-yaml/CHANGELOG/#changed_16","text":"y , yes , n , no , on , off are not converted to Booleans anymore. Fixes #42. require(filename) now returns a single document and throws an Error if file contains more than one document. CLI was merged back from js-yaml.bin","title":"Changed"},{"location":"node_modules/js-yaml/CHANGELOG/#037-2012-02-28","text":"","title":"0.3.7 - 2012-02-28"},{"location":"node_modules/js-yaml/CHANGELOG/#fixed_39","text":"Fix export of addConstructor() . Closes #39.","title":"Fixed"},{"location":"node_modules/js-yaml/CHANGELOG/#036-2012-02-22","text":"","title":"0.3.6 - 2012-02-22"},{"location":"node_modules/js-yaml/CHANGELOG/#changed_17","text":"Removed AMD parts - too buggy to use. Need help to rewrite from scratch","title":"Changed"},{"location":"node_modules/js-yaml/CHANGELOG/#fixed_40","text":"Removed YUI compressor warning (renamed double variable). Closes #40.","title":"Fixed"},{"location":"node_modules/js-yaml/CHANGELOG/#035-2012-01-10","text":"","title":"0.3.5 - 2012-01-10"},{"location":"node_modules/js-yaml/CHANGELOG/#fixed_41","text":"Workagound for .npmignore fuckup under windows. Thanks to airportyh.","title":"Fixed"},{"location":"node_modules/js-yaml/CHANGELOG/#034-2011-12-24","text":"","title":"0.3.4 - 2011-12-24"},{"location":"node_modules/js-yaml/CHANGELOG/#fixed_42","text":"Fixes str[] for oldIEs support. Adds better has change support for browserified demo. improves compact output of Error. Closes #33.","title":"Fixed"},{"location":"node_modules/js-yaml/CHANGELOG/#033-2011-12-20","text":"","title":"0.3.3 - 2011-12-20"},{"location":"node_modules/js-yaml/CHANGELOG/#added_9","text":"adds compact stringification of Errors.","title":"Added"},{"location":"node_modules/js-yaml/CHANGELOG/#changed_18","text":"jsyaml executable moved to separate module.","title":"Changed"},{"location":"node_modules/js-yaml/CHANGELOG/#032-2011-12-16","text":"","title":"0.3.2 - 2011-12-16"},{"location":"node_modules/js-yaml/CHANGELOG/#added_10","text":"Added jsyaml executable. Added !!js/function support. Closes #12.","title":"Added"},{"location":"node_modules/js-yaml/CHANGELOG/#fixed_43","text":"Fixes ug with block style scalars. Closes #26. All sources are passing JSLint now. Fixes bug in Safari. Closes #28. Fixes bug in Opers. Closes #29. Improves browser support. Closes #20.","title":"Fixed"},{"location":"node_modules/js-yaml/CHANGELOG/#031-2011-11-18","text":"","title":"0.3.1 - 2011-11-18"},{"location":"node_modules/js-yaml/CHANGELOG/#added_11","text":"Added AMD support for browserified version. Added permalinks for online demo YAML snippets. Now we have YPaste service, lol. Added !!js/regexp and !!js/undefined types. Partially solves #12.","title":"Added"},{"location":"node_modules/js-yaml/CHANGELOG/#changed_19","text":"Wrapped browserified js-yaml into closure.","title":"Changed"},{"location":"node_modules/js-yaml/CHANGELOG/#fixed_44","text":"Fixed the resolvement of non-specific tags. Closes #17. Fixed !!set mapping. Fixed month parse in dates. Closes #19.","title":"Fixed"},{"location":"node_modules/js-yaml/CHANGELOG/#030-2011-11-09","text":"","title":"0.3.0 - 2011-11-09"},{"location":"node_modules/js-yaml/CHANGELOG/#added_12","text":"Added browserified version. Closes #13. Added live demo of browserified version. Ported some of the PyYAML tests. See #14.","title":"Added"},{"location":"node_modules/js-yaml/CHANGELOG/#fixed_45","text":"Removed JS.Class dependency. Closes #3. Fixed timestamp bug when fraction was given.","title":"Fixed"},{"location":"node_modules/js-yaml/CHANGELOG/#022-2011-11-06","text":"","title":"0.2.2 - 2011-11-06"},{"location":"node_modules/js-yaml/CHANGELOG/#fixed_46","text":"Fixed crash on docs without ---. Closes #8. Fixed multiline string parse Fixed tests/comments for using array as key","title":"Fixed"},{"location":"node_modules/js-yaml/CHANGELOG/#021-2011-11-02","text":"","title":"0.2.1 - 2011-11-02"},{"location":"node_modules/js-yaml/CHANGELOG/#fixed_47","text":"Fixed short file read (<4k). Closes #9.","title":"Fixed"},{"location":"node_modules/js-yaml/CHANGELOG/#020-2011-11-02","text":"","title":"0.2.0 - 2011-11-02"},{"location":"node_modules/js-yaml/CHANGELOG/#changed_20","text":"First public release","title":"Changed"},{"location":"node_modules/json-parse-better-errors/","text":"json-parse-better-errors json-parse-better-errors is a Node.js library for getting nicer errors out of JSON.parse() , including context and position of the parse errors. Install $ npm install --save json-parse-better-errors Table of Contents Example Features Contributing API parse Example const parseJson = require ( 'json-parse-better-errors' ) parseJson ( '\"foo\"' ) parseJson ( 'garbage' ) // more useful error message Features Like JSON.parse, but the errors are better. Contributing The npm team enthusiastically welcomes contributions and project participation! There's a bunch of things you can do if you want to contribute! The Contributor Guide has all the information you need for everything from reporting bugs to contributing entire new features. Please don't hesitate to jump in if you'd like to, or even ask us questions if something isn't clear. All participants and maintainers in this project are expected to follow Code of Conduct , and just generally be excellent to each other. Please refer to the Changelog for project history details, too. Happy hacking! API > parse(txt, ?reviver, ?context=20) Works just like JSON.parse , but will include a bit more information when an error happens.","title":"json-parse-better-errors [![npm version](https://img.shields.io/npm/v/json-parse-better-errors.svg)](https://npm.im/json-parse-better-errors) [![license](https://img.shields.io/npm/l/json-parse-better-errors.svg)](https://npm.im/json-parse-better-errors) [![Travis](https://img.shields.io/travis/zkat/json-parse-better-errors.svg)](https://travis-ci.org/zkat/json-parse-better-errors) [![AppVeyor](https://ci.appveyor.com/api/projects/status/github/zkat/json-parse-better-errors?svg=true)](https://ci.appveyor.com/project/zkat/json-parse-better-errors) [![Coverage Status](https://coveralls.io/repos/github/zkat/json-parse-better-errors/badge.svg?branch=latest)](https://coveralls.io/github/zkat/json-parse-better-errors?branch=latest)"},{"location":"node_modules/json-parse-better-errors/#json-parse-better-errors","text":"json-parse-better-errors is a Node.js library for getting nicer errors out of JSON.parse() , including context and position of the parse errors.","title":"json-parse-better-errors"},{"location":"node_modules/json-parse-better-errors/#install","text":"$ npm install --save json-parse-better-errors","title":"Install"},{"location":"node_modules/json-parse-better-errors/#table-of-contents","text":"Example Features Contributing API parse","title":"Table of Contents"},{"location":"node_modules/json-parse-better-errors/#example","text":"const parseJson = require ( 'json-parse-better-errors' ) parseJson ( '\"foo\"' ) parseJson ( 'garbage' ) // more useful error message","title":"Example"},{"location":"node_modules/json-parse-better-errors/#features","text":"Like JSON.parse, but the errors are better.","title":"Features"},{"location":"node_modules/json-parse-better-errors/#contributing","text":"The npm team enthusiastically welcomes contributions and project participation! There's a bunch of things you can do if you want to contribute! The Contributor Guide has all the information you need for everything from reporting bugs to contributing entire new features. Please don't hesitate to jump in if you'd like to, or even ask us questions if something isn't clear. All participants and maintainers in this project are expected to follow Code of Conduct , and just generally be excellent to each other. Please refer to the Changelog for project history details, too. Happy hacking!","title":"Contributing"},{"location":"node_modules/json-parse-better-errors/#api","text":"","title":"API"},{"location":"node_modules/json-parse-better-errors/#parsetxt-reviver-context20","text":"Works just like JSON.parse , but will include a bit more information when an error happens.","title":" &gt; parse(txt, ?reviver, ?context=20)"},{"location":"node_modules/json-parse-better-errors/CHANGELOG/","text":"Change Log All notable changes to this project will be documented in this file. See standard-version for commit guidelines. 1.0.2 (2018-03-30) Bug Fixes messages: More friendly messages for non-string ( #1 ) ( a476d42 ) 1.0.1 (2017-08-16) Bug Fixes license: oops. Forgot to update license.md ( efe2958 ) 1.0.0 (2017-08-15) Features init: Initial Commit ( 562c977 ) BREAKING CHANGES init: This is the first commit! 0.1.0 (2017-08-15) Features init: Initial Commit ( 9dd1a19 )","title":"Change Log"},{"location":"node_modules/json-parse-better-errors/CHANGELOG/#change-log","text":"All notable changes to this project will be documented in this file. See standard-version for commit guidelines.","title":"Change Log"},{"location":"node_modules/json-parse-better-errors/CHANGELOG/#102-2018-03-30","text":"","title":"1.0.2 (2018-03-30)"},{"location":"node_modules/json-parse-better-errors/CHANGELOG/#bug-fixes","text":"messages: More friendly messages for non-string ( #1 ) ( a476d42 )","title":"Bug Fixes"},{"location":"node_modules/json-parse-better-errors/CHANGELOG/#101-2017-08-16","text":"","title":"1.0.1 (2017-08-16)"},{"location":"node_modules/json-parse-better-errors/CHANGELOG/#bug-fixes_1","text":"license: oops. Forgot to update license.md ( efe2958 )","title":"Bug Fixes"},{"location":"node_modules/json-parse-better-errors/CHANGELOG/#100-2017-08-15","text":"","title":"1.0.0 (2017-08-15)"},{"location":"node_modules/json-parse-better-errors/CHANGELOG/#features","text":"init: Initial Commit ( 562c977 )","title":"Features"},{"location":"node_modules/json-parse-better-errors/CHANGELOG/#breaking-changes","text":"init: This is the first commit!","title":"BREAKING CHANGES"},{"location":"node_modules/json-parse-better-errors/CHANGELOG/#010-2017-08-15","text":"","title":"0.1.0 (2017-08-15)"},{"location":"node_modules/json-parse-better-errors/CHANGELOG/#features_1","text":"init: Initial Commit ( 9dd1a19 )","title":"Features"},{"location":"node_modules/json-parse-better-errors/LICENSE/","text":"Copyright 2017 Kat March\u00e1n Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"LICENSE"},{"location":"node_modules/json-schema-traverse/","text":"json-schema-traverse Traverse JSON Schema passing each schema object to callback Install npm install json-schema-traverse Usage const traverse = require ( 'json-schema-traverse' ); const schema = { properties : { foo : { type : 'string' }, bar : { type : 'integer' } } }; traverse ( schema , { cb }); // cb is called 3 times with: // 1. root schema // 2. {type: 'string'} // 3. {type: 'integer'} // Or: traverse ( schema , { cb : { pre , post }}); // pre is called 3 times with: // 1. root schema // 2. {type: 'string'} // 3. {type: 'integer'} // // post is called 3 times with: // 1. {type: 'string'} // 2. {type: 'integer'} // 3. root schema Callback function cb is called for each schema object (not including draft-06 boolean schemas), including the root schema, in pre-order traversal. Schema references ($ref) are not resolved, they are passed as is. Alternatively, you can pass a {pre, post} object as cb , and then pre will be called before traversing child elements, and post will be called after all child elements have been traversed. Callback is passed these parameters: schema : the current schema object JSON pointer : from the root schema to the current schema object root schema : the schema passed to traverse object parent JSON pointer : from the root schema to the parent schema object (see below) parent keyword : the keyword inside which this schema appears (e.g. properties , anyOf , etc.) parent schema : not necessarily parent object/array; in the example above the parent schema for {type: 'string'} is the root schema index/property : index or property name in the array/object containing multiple schemas; in the example above for {type: 'string'} the property name is 'foo' Traverse objects in all unknown keywords const traverse = require ( 'json-schema-traverse' ); const schema = { mySchema : { minimum : 1 , maximum : 2 } }; traverse ( schema , { allKeys : true , cb }); // cb is called 2 times with: // 1. root schema // 2. mySchema Without option allKeys: true callback will be called only with root schema. Enterprise support json-schema-traverse package is a part of Tidelift enterprise subscription - it provides a centralised commercial support to open-source software users, in addition to the support provided by software maintainers. Security contact To report a security vulnerability, please use the Tidelift security contact . Tidelift will coordinate the fix and disclosure. Please do NOT report security vulnerability via GitHub issues. License MIT","title":"json-schema-traverse"},{"location":"node_modules/json-schema-traverse/#json-schema-traverse","text":"Traverse JSON Schema passing each schema object to callback","title":"json-schema-traverse"},{"location":"node_modules/json-schema-traverse/#install","text":"npm install json-schema-traverse","title":"Install"},{"location":"node_modules/json-schema-traverse/#usage","text":"const traverse = require ( 'json-schema-traverse' ); const schema = { properties : { foo : { type : 'string' }, bar : { type : 'integer' } } }; traverse ( schema , { cb }); // cb is called 3 times with: // 1. root schema // 2. {type: 'string'} // 3. {type: 'integer'} // Or: traverse ( schema , { cb : { pre , post }}); // pre is called 3 times with: // 1. root schema // 2. {type: 'string'} // 3. {type: 'integer'} // // post is called 3 times with: // 1. {type: 'string'} // 2. {type: 'integer'} // 3. root schema Callback function cb is called for each schema object (not including draft-06 boolean schemas), including the root schema, in pre-order traversal. Schema references ($ref) are not resolved, they are passed as is. Alternatively, you can pass a {pre, post} object as cb , and then pre will be called before traversing child elements, and post will be called after all child elements have been traversed. Callback is passed these parameters: schema : the current schema object JSON pointer : from the root schema to the current schema object root schema : the schema passed to traverse object parent JSON pointer : from the root schema to the parent schema object (see below) parent keyword : the keyword inside which this schema appears (e.g. properties , anyOf , etc.) parent schema : not necessarily parent object/array; in the example above the parent schema for {type: 'string'} is the root schema index/property : index or property name in the array/object containing multiple schemas; in the example above for {type: 'string'} the property name is 'foo'","title":"Usage"},{"location":"node_modules/json-schema-traverse/#traverse-objects-in-all-unknown-keywords","text":"const traverse = require ( 'json-schema-traverse' ); const schema = { mySchema : { minimum : 1 , maximum : 2 } }; traverse ( schema , { allKeys : true , cb }); // cb is called 2 times with: // 1. root schema // 2. mySchema Without option allKeys: true callback will be called only with root schema.","title":"Traverse objects in all unknown keywords"},{"location":"node_modules/json-schema-traverse/#enterprise-support","text":"json-schema-traverse package is a part of Tidelift enterprise subscription - it provides a centralised commercial support to open-source software users, in addition to the support provided by software maintainers.","title":"Enterprise support"},{"location":"node_modules/json-schema-traverse/#security-contact","text":"To report a security vulnerability, please use the Tidelift security contact . Tidelift will coordinate the fix and disclosure. Please do NOT report security vulnerability via GitHub issues.","title":"Security contact"},{"location":"node_modules/json-schema-traverse/#license","text":"MIT","title":"License"},{"location":"node_modules/json5/","text":"JSON5 \u2013 JSON for Humans The JSON5 Data Interchange Format (JSON5) is a superset of JSON that aims to alleviate some of the limitations of JSON by expanding its syntax to include some productions from ECMAScript 5.1 . This JavaScript library is the official reference implementation for JSON5 parsing and serialization libraries. Summary of Features The following ECMAScript 5.1 features, which are not supported in JSON, have been extended to JSON5. Objects Object keys may be an ECMAScript 5.1 IdentifierName . Objects may have a single trailing comma. Arrays Arrays may have a single trailing comma. Strings Strings may be single quoted. Strings may span multiple lines by escaping new line characters. Strings may include character escapes. Numbers Numbers may be hexadecimal. Numbers may have a leading or trailing decimal point. Numbers may be IEEE 754 positive infinity, negative infinity, and NaN. Numbers may begin with an explicit plus sign. Comments Single and multi-line comments are allowed. White Space Additional white space characters are allowed. Short Example { // comments unquoted : 'and you can quote me on that' , singleQuotes : 'I can use \"double quotes\" here' , lineBreaks : \"Look, Mom! \\ No \\\\n's!\" , hexadecimal : 0xdecaf , leadingDecimalPoint : .8675309 , andTrailing : 8675309. , positiveSign : + 1 , trailingComma : 'in objects' , andIn : [ 'arrays' ,], \"backwardsCompatible\" : \"with JSON\" , } Specification For a detailed explanation of the JSON5 format, please read the official specification . Installation Node.js npm install json5 const JSON5 = require ( 'json5' ) Browsers < script src = \"https://unpkg.com/json5@^2.0.0/dist/index.min.js\" ></ script > This will create a global JSON5 variable. API The JSON5 API is compatible with the JSON API . JSON5.parse() Parses a JSON5 string, constructing the JavaScript value or object described by the string. An optional reviver function can be provided to perform a transformation on the resulting object before it is returned. Syntax JSON5.parse(text[, reviver]) Parameters text : The string to parse as JSON5. reviver : If a function, this prescribes how the value originally produced by parsing is transformed, before being returned. Return value The object corresponding to the given JSON5 text. JSON5.stringify() Converts a JavaScript value to a JSON5 string, optionally replacing values if a replacer function is specified, or optionally including only the specified properties if a replacer array is specified. Syntax JSON5.stringify(value[, replacer[, space]]) JSON5.stringify(value[, options]) Parameters value : The value to convert to a JSON5 string. replacer : A function that alters the behavior of the stringification process, or an array of String and Number objects that serve as a whitelist for selecting/filtering the properties of the value object to be included in the JSON5 string. If this value is null or not provided, all properties of the object are included in the resulting JSON5 string. space : A String or Number object that's used to insert white space into the output JSON5 string for readability purposes. If this is a Number, it indicates the number of space characters to use as white space; this number is capped at 10 (if it is greater, the value is just 10). Values less than 1 indicate that no space should be used. If this is a String, the string (or the first 10 characters of the string, if it's longer than that) is used as white space. If this parameter is not provided (or is null), no white space is used. If white space is used, trailing commas will be used in objects and arrays. options : An object with the following properties: replacer : Same as the replacer parameter. space : Same as the space parameter. quote : A String representing the quote character to use when serializing strings. Return value A JSON5 string representing the value. Node.js require() JSON5 files When using Node.js, you can require() JSON5 files by adding the following statement. require ( 'json5/lib/register' ) Then you can load a JSON5 file with a Node.js require() statement. For example: const config = require ( './config.json5' ) CLI Since JSON is more widely used than JSON5, this package includes a CLI for converting JSON5 to JSON and for validating the syntax of JSON5 documents. Installation npm install --global json5 Usage json5 [ options ] <file> If <file> is not provided, then STDIN is used. Options: -s , --space : The number of spaces to indent or t for tabs -o , --out-file [file] : Output to the specified file, otherwise STDOUT -v , --validate : Validate JSON5 but do not output JSON -V , --version : Output the version number -h , --help : Output usage information Contributing Development git clone https://github.com/json5/json5 cd json5 npm install When contributing code, please write relevant tests and run npm test and npm run lint before submitting pull requests. Please use an editor that supports EditorConfig . Issues To report bugs or request features regarding the JSON5 data format, please submit an issue to the official specification repository . To report bugs or request features regarding the JavaScript implementation of JSON5, please submit an issue to this repository. License MIT. See LICENSE.md for details. Credits Assem Kishore founded this project. Michael Bolin independently arrived at and published some of these same ideas with awesome explanations and detail. Recommended reading: Suggested Improvements to JSON Douglas Crockford of course designed and built JSON, but his state machine diagrams on the JSON website , as cheesy as it may sound, gave us motivation and confidence that building a new parser to implement these ideas was within reach! The original implementation of JSON5 was also modeled directly off of Doug\u2019s open-source json_parse.js parser. We\u2019re grateful for that clean and well-documented code. Max Nanasy has been an early and prolific supporter, contributing multiple patches and ideas. Andrew Eisenberg contributed the original stringify method. Jordan Tucker has aligned JSON5 more closely with ES5, wrote the official JSON5 specification, completely rewrote the codebase from the ground up, and is actively maintaining this project.","title":"JSON5 \u2013 JSON for Humans"},{"location":"node_modules/json5/#json5-json-for-humans","text":"The JSON5 Data Interchange Format (JSON5) is a superset of JSON that aims to alleviate some of the limitations of JSON by expanding its syntax to include some productions from ECMAScript 5.1 . This JavaScript library is the official reference implementation for JSON5 parsing and serialization libraries.","title":"JSON5 \u2013 JSON for Humans"},{"location":"node_modules/json5/#summary-of-features","text":"The following ECMAScript 5.1 features, which are not supported in JSON, have been extended to JSON5.","title":"Summary of Features"},{"location":"node_modules/json5/#objects","text":"Object keys may be an ECMAScript 5.1 IdentifierName . Objects may have a single trailing comma.","title":"Objects"},{"location":"node_modules/json5/#arrays","text":"Arrays may have a single trailing comma.","title":"Arrays"},{"location":"node_modules/json5/#strings","text":"Strings may be single quoted. Strings may span multiple lines by escaping new line characters. Strings may include character escapes.","title":"Strings"},{"location":"node_modules/json5/#numbers","text":"Numbers may be hexadecimal. Numbers may have a leading or trailing decimal point. Numbers may be IEEE 754 positive infinity, negative infinity, and NaN. Numbers may begin with an explicit plus sign.","title":"Numbers"},{"location":"node_modules/json5/#comments","text":"Single and multi-line comments are allowed.","title":"Comments"},{"location":"node_modules/json5/#white-space","text":"Additional white space characters are allowed.","title":"White Space"},{"location":"node_modules/json5/#short-example","text":"{ // comments unquoted : 'and you can quote me on that' , singleQuotes : 'I can use \"double quotes\" here' , lineBreaks : \"Look, Mom! \\ No \\\\n's!\" , hexadecimal : 0xdecaf , leadingDecimalPoint : .8675309 , andTrailing : 8675309. , positiveSign : + 1 , trailingComma : 'in objects' , andIn : [ 'arrays' ,], \"backwardsCompatible\" : \"with JSON\" , }","title":"Short Example"},{"location":"node_modules/json5/#specification","text":"For a detailed explanation of the JSON5 format, please read the official specification .","title":"Specification"},{"location":"node_modules/json5/#installation","text":"","title":"Installation"},{"location":"node_modules/json5/#nodejs","text":"npm install json5 const JSON5 = require ( 'json5' )","title":"Node.js"},{"location":"node_modules/json5/#browsers","text":"< script src = \"https://unpkg.com/json5@^2.0.0/dist/index.min.js\" ></ script > This will create a global JSON5 variable.","title":"Browsers"},{"location":"node_modules/json5/#api","text":"The JSON5 API is compatible with the JSON API .","title":"API"},{"location":"node_modules/json5/#json5parse","text":"Parses a JSON5 string, constructing the JavaScript value or object described by the string. An optional reviver function can be provided to perform a transformation on the resulting object before it is returned.","title":"JSON5.parse()"},{"location":"node_modules/json5/#syntax","text":"JSON5.parse(text[, reviver])","title":"Syntax"},{"location":"node_modules/json5/#parameters","text":"text : The string to parse as JSON5. reviver : If a function, this prescribes how the value originally produced by parsing is transformed, before being returned.","title":"Parameters"},{"location":"node_modules/json5/#return-value","text":"The object corresponding to the given JSON5 text.","title":"Return value"},{"location":"node_modules/json5/#json5stringify","text":"Converts a JavaScript value to a JSON5 string, optionally replacing values if a replacer function is specified, or optionally including only the specified properties if a replacer array is specified.","title":"JSON5.stringify()"},{"location":"node_modules/json5/#syntax_1","text":"JSON5.stringify(value[, replacer[, space]]) JSON5.stringify(value[, options])","title":"Syntax"},{"location":"node_modules/json5/#parameters_1","text":"value : The value to convert to a JSON5 string. replacer : A function that alters the behavior of the stringification process, or an array of String and Number objects that serve as a whitelist for selecting/filtering the properties of the value object to be included in the JSON5 string. If this value is null or not provided, all properties of the object are included in the resulting JSON5 string. space : A String or Number object that's used to insert white space into the output JSON5 string for readability purposes. If this is a Number, it indicates the number of space characters to use as white space; this number is capped at 10 (if it is greater, the value is just 10). Values less than 1 indicate that no space should be used. If this is a String, the string (or the first 10 characters of the string, if it's longer than that) is used as white space. If this parameter is not provided (or is null), no white space is used. If white space is used, trailing commas will be used in objects and arrays. options : An object with the following properties: replacer : Same as the replacer parameter. space : Same as the space parameter. quote : A String representing the quote character to use when serializing strings.","title":"Parameters"},{"location":"node_modules/json5/#return-value_1","text":"A JSON5 string representing the value.","title":"Return value"},{"location":"node_modules/json5/#nodejs-require-json5-files","text":"When using Node.js, you can require() JSON5 files by adding the following statement. require ( 'json5/lib/register' ) Then you can load a JSON5 file with a Node.js require() statement. For example: const config = require ( './config.json5' )","title":"Node.js require() JSON5 files"},{"location":"node_modules/json5/#cli","text":"Since JSON is more widely used than JSON5, this package includes a CLI for converting JSON5 to JSON and for validating the syntax of JSON5 documents.","title":"CLI"},{"location":"node_modules/json5/#installation_1","text":"npm install --global json5","title":"Installation"},{"location":"node_modules/json5/#usage","text":"json5 [ options ] <file> If <file> is not provided, then STDIN is used.","title":"Usage"},{"location":"node_modules/json5/#options","text":"-s , --space : The number of spaces to indent or t for tabs -o , --out-file [file] : Output to the specified file, otherwise STDOUT -v , --validate : Validate JSON5 but do not output JSON -V , --version : Output the version number -h , --help : Output usage information","title":"Options:"},{"location":"node_modules/json5/#contributing","text":"","title":"Contributing"},{"location":"node_modules/json5/#development","text":"git clone https://github.com/json5/json5 cd json5 npm install When contributing code, please write relevant tests and run npm test and npm run lint before submitting pull requests. Please use an editor that supports EditorConfig .","title":"Development"},{"location":"node_modules/json5/#issues","text":"To report bugs or request features regarding the JSON5 data format, please submit an issue to the official specification repository . To report bugs or request features regarding the JavaScript implementation of JSON5, please submit an issue to this repository.","title":"Issues"},{"location":"node_modules/json5/#license","text":"MIT. See LICENSE.md for details.","title":"License"},{"location":"node_modules/json5/#credits","text":"Assem Kishore founded this project. Michael Bolin independently arrived at and published some of these same ideas with awesome explanations and detail. Recommended reading: Suggested Improvements to JSON Douglas Crockford of course designed and built JSON, but his state machine diagrams on the JSON website , as cheesy as it may sound, gave us motivation and confidence that building a new parser to implement these ideas was within reach! The original implementation of JSON5 was also modeled directly off of Doug\u2019s open-source json_parse.js parser. We\u2019re grateful for that clean and well-documented code. Max Nanasy has been an early and prolific supporter, contributing multiple patches and ideas. Andrew Eisenberg contributed the original stringify method. Jordan Tucker has aligned JSON5 more closely with ES5, wrote the official JSON5 specification, completely rewrote the codebase from the ground up, and is actively maintaining this project.","title":"Credits"},{"location":"node_modules/json5/CHANGELOG/","text":"Unreleased [ code , diff ] v2.2.0 [ code , diff ] New: Accurate and documented TypeScript declarations are now included. There is no need to install @types/json5 . ( #236 , #244 ) v2.1.3 [ code , diff ] Fix: An out of memory bug when parsing numbers has been fixed. ( #228 , #229 ) v2.1.2 [ code , diff ] Fix: Bump minimist to v1.2.5 . ( #222 ) v2.1.1 [ code , diff ] New: package.json and package.json5 include a module property so bundlers like webpack, rollup and parcel can take advantage of the ES Module build. ( #208 ) Fix: stringify outputs \\0 as \\\\x00 when followed by a digit. ( #210 ) Fix: Spelling mistakes have been fixed. ( #196 ) v2.1.0 [ code , diff ] New: The index.mjs and index.min.mjs browser builds in the dist directory support ES6 modules. ( #187 ) v2.0.1 [ code , diff ] Fix: The browser builds in the dist directory support ES5. ( #182 ) v2.0.0 [ code , diff ] Major : JSON5 officially supports Node.js v6 and later. Support for Node.js v4 has been dropped. Since Node.js v6 supports ES5 features, the code has been rewritten in native ES5, and the dependence on Babel has been eliminated. New: Support for Unicode 10 has been added. New: The test framework has been migrated from Mocha to Tap. New: The browser build at dist/index.js is no longer minified by default. A minified version is available at dist/index.min.js . ( #181 ) Fix: The warning has been made clearer when line and paragraph separators are used in strings. Fix: package.json5 has been restored, and it is automatically generated and committed when the version is bumped. A new build-package NPM script has been added to facilitate this. v1.0.1 [ code , diff ] This release includes a bug fix and minor change. Fix: parse throws on unclosed objects and arrays. New: package.json5 has been removed until an easier way to keep it in sync with package.json is found. v1.0.0 [ code , diff ] This release includes major internal changes and public API enhancements. Major : JSON5 officially supports Node.js v4 and later. Support for Node.js v0.10 and v0.12 have been dropped. New: Unicode property names and Unicode escapes in property names are supported. ( #1 ) New: stringify outputs trailing commas in objects and arrays when a space option is provided. ( #66 ) New: JSON5 allows line and paragraph separator characters (U+2028 and U+2029) in strings in order to be compatible with JSON. However, ES5 does not allow these characters in strings, so JSON5 gives a warning when they are parsed and escapes them when they are stringified. ( #70 ) New: stringify accepts an options object as its second argument. The supported options are replacer , space , and a new quote option that specifies the quote character used in strings. ( #71 ) New: The CLI supports STDIN and STDOUT and adds --out-file , --space , and --validate options. See json5 --help for more information. ( #72 , #84 , and #108 ) New: In addition to the white space characters space \\t , \\v , \\f , \\n , \\r , and \\xA0 , the additional white space characters \\u2028 , \\u2029 , and all other characters in the Space Separator Unicode category are allowed. New: In addition to the character escapes \\' , \\\" , \\\\ , \\b , \\f , \\n , \\r , and \\t , the additional character escapes \\v and \\0 , hexadecimal escapes like \\x0F , and unnecessary escapes like \\a are allowed in string values and string property names. New: stringify outputs strings with single quotes by default but intelligently uses double quotes if there are more single quotes than double quotes inside the string. (i.e. stringify('Stay here.') outputs 'Stay here.' while stringify('Let\\'s go.') outputs \"Let's go.\" ) New: When a character is not allowed in a string, stringify outputs a character escape like \\t when available, a hexadecimal escape like \\x0F when the Unicode code point is less than 256, or a Unicode character escape like \\u01FF , in that order. New: stringify checks for a toJSON5 method on objects and, if it exists, stringifies its return value instead of the object. toJSON5 overrides toJSON if they both exist. New: To require or import JSON5 files, use require('json5/lib/register') or import 'json5/lib/register' . Previous versions used json5/lib/require , which still exists for backward compatibility but is deprecated and will give a warning. New: To use JSON5 in browsers, use the file at dist/index.js or https://unpkg.com/json5@^1.0.0 . Fix: stringify properly outputs Infinity and NaN . ( #67 ) Fix: isWord no longer becomes a property of JSON5 after calling stringify . ( #68 and #89 ) Fix: stringify no longer throws when an object does not have a prototype . ( #154 ) Fix: stringify properly handles the key argument of toJSON(key) methods. toJSON5(key) follows this pattern. Fix: stringify accepts Number and String objects as its space argument. Fix: In addition to a function, stringify also accepts an array of keys to include in the output as its replacer argument. Numbers, Number objects, and String objects will be converted to a string if they are given as array values. v0.5.1 [ code , diff ] This release includes a minor fix for indentations when stringifying empty arrays. Fix: Indents no longer appear in empty arrays when stringified. ( #134 ) v0.5.0 [ code , diff ] This release includes major internal changes and public API enhancements. Major: JSON5 officially supports Node.js v4 LTS and v5. Support for Node.js v0.6 and v0.8 have been dropped, while support for v0.10 and v0.12 remain. Fix: YUI Compressor no longer fails when compressing json5.js. ( #97 ) New: parse and the CLI provide line and column numbers when displaying error messages. ( #101 ; awesome work by @amb26 .) v0.4.0 [ code , diff ] Note that v0.3.0 was tagged, but never published to npm, so this v0.4.0 changelog entry includes v0.3.0 features. This is a massive release that adds stringify support, among other things. Major: JSON5.stringify() now exists! This method is analogous to the native JSON.stringify() ; it just avoids quoting keys where possible. See the usage documentation for more. ( #32 ; huge thanks and props @aeisenberg !) New: NaN and -NaN are now allowed number literals. ( #30 ; thanks @rowanhill .) New: Duplicate object keys are now allowed; the last value is used. This is the same behavior as JSON. ( #57 ; thanks @jordanbtucker .) Fix: Properly handle various whitespace and newline cases now. E.g. JSON5 now properly supports escaped CR and CRLF newlines in strings, and JSON5 now accepts the same whitespace as JSON (stricter than ES5). ( #58 , #60 , and #63 ; thanks @jordanbtucker .) New: Negative hexadecimal numbers (e.g. -0xC8 ) are allowed again. (They were disallowed in v0.2.0; see below.) It turns out they are valid in ES5, so JSON5 supports them now too. ( #36 ; thanks @jordanbtucker !) v0.2.0 [ code , diff ] This release fixes some bugs and adds some more utility features to help you express data more easily: Breaking: Negative hexadecimal numbers (e.g. -0xC8 ) are rejected now. While V8 (e.g. Chrome and Node) supported them, it turns out they're invalid in ES5. This has been fixed in V8 (and by extension, Chrome and Node), so JSON5 officially rejects them now, too. ( #36 ) New: Trailing decimal points in decimal numbers are allowed again. (They were disallowed in v0.1.0; see below.) They're allowed by ES5, and differentiating between integers and floats may make sense on some platforms. ( #16 ; thanks @Midar .) New: Infinity and -Infinity are now allowed number literals. ( #30 ; thanks @pepkin88 .) New: Plus signs ( + ) in front of numbers are now allowed, since it can be helpful in some contexts to explicitly mark numbers as positive. (E.g. when a property represents changes or deltas.) Fix: unescaped newlines in strings are rejected now. ( #24 ; thanks @Midar .) v0.1.0 [ code , diff ] This release tightens JSON5 support and adds helpful utility features: New: Support hexadecimal numbers. (Thanks @MaxNanasy .) Fix: Reject octal numbers properly now. Previously, they were accepted but improperly parsed as base-10 numbers. (Thanks @MaxNanasy .) Breaking: Reject \"noctal\" numbers now (base-10 numbers that begin with a leading zero). These are disallowed by both JSON5 and JSON, as well as by ES5's strict mode. (Thanks @MaxNanasy .) New: Support leading decimal points in decimal numbers. (Thanks @MaxNanasy .) Breaking: Reject trailing decimal points in decimal numbers now. These are disallowed by both JSON5 and JSON. (Thanks @MaxNanasy .) Breaking: Reject omitted elements in arrays now. These are disallowed by both JSON5 and JSON. Fix: Throw proper SyntaxError instances on errors now. New: Add Node.js require() hook. Register via json5/lib/require . New: Add Node.js json5 executable to compile JSON5 files to JSON. v0.0.1 [ code , diff ] This was the first implementation of this JSON5 parser. Support unquoted object keys, including reserved words. Unicode characters and escape sequences sequences aren't yet supported. Support single-quoted strings. Support multi-line strings. Support trailing commas in arrays and objects. Support comments, both inline and block. v0.0.0 [ code ] Let's consider this to be Douglas Crockford's original json_parse.js \u2014 a parser for the regular JSON format.","title":"CHANGELOG"},{"location":"node_modules/json5/CHANGELOG/#unreleased-code-diff","text":"","title":"Unreleased [code, diff]"},{"location":"node_modules/json5/CHANGELOG/#v220-code-diff","text":"New: Accurate and documented TypeScript declarations are now included. There is no need to install @types/json5 . ( #236 , #244 )","title":"v2.2.0 [code, diff]"},{"location":"node_modules/json5/CHANGELOG/#v213-code-diff","text":"Fix: An out of memory bug when parsing numbers has been fixed. ( #228 , #229 )","title":"v2.1.3 [code, diff]"},{"location":"node_modules/json5/CHANGELOG/#v212-code-diff","text":"Fix: Bump minimist to v1.2.5 . ( #222 )","title":"v2.1.2 [code, diff]"},{"location":"node_modules/json5/CHANGELOG/#v211-code-diff","text":"New: package.json and package.json5 include a module property so bundlers like webpack, rollup and parcel can take advantage of the ES Module build. ( #208 ) Fix: stringify outputs \\0 as \\\\x00 when followed by a digit. ( #210 ) Fix: Spelling mistakes have been fixed. ( #196 )","title":"v2.1.1 [code, diff]"},{"location":"node_modules/json5/CHANGELOG/#v210-code-diff","text":"New: The index.mjs and index.min.mjs browser builds in the dist directory support ES6 modules. ( #187 )","title":"v2.1.0 [code, diff]"},{"location":"node_modules/json5/CHANGELOG/#v201-code-diff","text":"Fix: The browser builds in the dist directory support ES5. ( #182 )","title":"v2.0.1 [code, diff]"},{"location":"node_modules/json5/CHANGELOG/#v200-code-diff","text":"Major : JSON5 officially supports Node.js v6 and later. Support for Node.js v4 has been dropped. Since Node.js v6 supports ES5 features, the code has been rewritten in native ES5, and the dependence on Babel has been eliminated. New: Support for Unicode 10 has been added. New: The test framework has been migrated from Mocha to Tap. New: The browser build at dist/index.js is no longer minified by default. A minified version is available at dist/index.min.js . ( #181 ) Fix: The warning has been made clearer when line and paragraph separators are used in strings. Fix: package.json5 has been restored, and it is automatically generated and committed when the version is bumped. A new build-package NPM script has been added to facilitate this.","title":"v2.0.0 [code, diff]"},{"location":"node_modules/json5/CHANGELOG/#v101-code-diff","text":"This release includes a bug fix and minor change. Fix: parse throws on unclosed objects and arrays. New: package.json5 has been removed until an easier way to keep it in sync with package.json is found.","title":"v1.0.1 [code, diff]"},{"location":"node_modules/json5/CHANGELOG/#v100-code-diff","text":"This release includes major internal changes and public API enhancements. Major : JSON5 officially supports Node.js v4 and later. Support for Node.js v0.10 and v0.12 have been dropped. New: Unicode property names and Unicode escapes in property names are supported. ( #1 ) New: stringify outputs trailing commas in objects and arrays when a space option is provided. ( #66 ) New: JSON5 allows line and paragraph separator characters (U+2028 and U+2029) in strings in order to be compatible with JSON. However, ES5 does not allow these characters in strings, so JSON5 gives a warning when they are parsed and escapes them when they are stringified. ( #70 ) New: stringify accepts an options object as its second argument. The supported options are replacer , space , and a new quote option that specifies the quote character used in strings. ( #71 ) New: The CLI supports STDIN and STDOUT and adds --out-file , --space , and --validate options. See json5 --help for more information. ( #72 , #84 , and #108 ) New: In addition to the white space characters space \\t , \\v , \\f , \\n , \\r , and \\xA0 , the additional white space characters \\u2028 , \\u2029 , and all other characters in the Space Separator Unicode category are allowed. New: In addition to the character escapes \\' , \\\" , \\\\ , \\b , \\f , \\n , \\r , and \\t , the additional character escapes \\v and \\0 , hexadecimal escapes like \\x0F , and unnecessary escapes like \\a are allowed in string values and string property names. New: stringify outputs strings with single quotes by default but intelligently uses double quotes if there are more single quotes than double quotes inside the string. (i.e. stringify('Stay here.') outputs 'Stay here.' while stringify('Let\\'s go.') outputs \"Let's go.\" ) New: When a character is not allowed in a string, stringify outputs a character escape like \\t when available, a hexadecimal escape like \\x0F when the Unicode code point is less than 256, or a Unicode character escape like \\u01FF , in that order. New: stringify checks for a toJSON5 method on objects and, if it exists, stringifies its return value instead of the object. toJSON5 overrides toJSON if they both exist. New: To require or import JSON5 files, use require('json5/lib/register') or import 'json5/lib/register' . Previous versions used json5/lib/require , which still exists for backward compatibility but is deprecated and will give a warning. New: To use JSON5 in browsers, use the file at dist/index.js or https://unpkg.com/json5@^1.0.0 . Fix: stringify properly outputs Infinity and NaN . ( #67 ) Fix: isWord no longer becomes a property of JSON5 after calling stringify . ( #68 and #89 ) Fix: stringify no longer throws when an object does not have a prototype . ( #154 ) Fix: stringify properly handles the key argument of toJSON(key) methods. toJSON5(key) follows this pattern. Fix: stringify accepts Number and String objects as its space argument. Fix: In addition to a function, stringify also accepts an array of keys to include in the output as its replacer argument. Numbers, Number objects, and String objects will be converted to a string if they are given as array values.","title":"v1.0.0 [code, diff]"},{"location":"node_modules/json5/CHANGELOG/#v051-code-diff","text":"This release includes a minor fix for indentations when stringifying empty arrays. Fix: Indents no longer appear in empty arrays when stringified. ( #134 )","title":"v0.5.1 [code, diff]"},{"location":"node_modules/json5/CHANGELOG/#v050-code-diff","text":"This release includes major internal changes and public API enhancements. Major: JSON5 officially supports Node.js v4 LTS and v5. Support for Node.js v0.6 and v0.8 have been dropped, while support for v0.10 and v0.12 remain. Fix: YUI Compressor no longer fails when compressing json5.js. ( #97 ) New: parse and the CLI provide line and column numbers when displaying error messages. ( #101 ; awesome work by @amb26 .)","title":"v0.5.0 [code, diff]"},{"location":"node_modules/json5/CHANGELOG/#v040-code-diff","text":"Note that v0.3.0 was tagged, but never published to npm, so this v0.4.0 changelog entry includes v0.3.0 features. This is a massive release that adds stringify support, among other things. Major: JSON5.stringify() now exists! This method is analogous to the native JSON.stringify() ; it just avoids quoting keys where possible. See the usage documentation for more. ( #32 ; huge thanks and props @aeisenberg !) New: NaN and -NaN are now allowed number literals. ( #30 ; thanks @rowanhill .) New: Duplicate object keys are now allowed; the last value is used. This is the same behavior as JSON. ( #57 ; thanks @jordanbtucker .) Fix: Properly handle various whitespace and newline cases now. E.g. JSON5 now properly supports escaped CR and CRLF newlines in strings, and JSON5 now accepts the same whitespace as JSON (stricter than ES5). ( #58 , #60 , and #63 ; thanks @jordanbtucker .) New: Negative hexadecimal numbers (e.g. -0xC8 ) are allowed again. (They were disallowed in v0.2.0; see below.) It turns out they are valid in ES5, so JSON5 supports them now too. ( #36 ; thanks @jordanbtucker !)","title":"v0.4.0 [code, diff]"},{"location":"node_modules/json5/CHANGELOG/#v020-code-diff","text":"This release fixes some bugs and adds some more utility features to help you express data more easily: Breaking: Negative hexadecimal numbers (e.g. -0xC8 ) are rejected now. While V8 (e.g. Chrome and Node) supported them, it turns out they're invalid in ES5. This has been fixed in V8 (and by extension, Chrome and Node), so JSON5 officially rejects them now, too. ( #36 ) New: Trailing decimal points in decimal numbers are allowed again. (They were disallowed in v0.1.0; see below.) They're allowed by ES5, and differentiating between integers and floats may make sense on some platforms. ( #16 ; thanks @Midar .) New: Infinity and -Infinity are now allowed number literals. ( #30 ; thanks @pepkin88 .) New: Plus signs ( + ) in front of numbers are now allowed, since it can be helpful in some contexts to explicitly mark numbers as positive. (E.g. when a property represents changes or deltas.) Fix: unescaped newlines in strings are rejected now. ( #24 ; thanks @Midar .)","title":"v0.2.0 [code, diff]"},{"location":"node_modules/json5/CHANGELOG/#v010-code-diff","text":"This release tightens JSON5 support and adds helpful utility features: New: Support hexadecimal numbers. (Thanks @MaxNanasy .) Fix: Reject octal numbers properly now. Previously, they were accepted but improperly parsed as base-10 numbers. (Thanks @MaxNanasy .) Breaking: Reject \"noctal\" numbers now (base-10 numbers that begin with a leading zero). These are disallowed by both JSON5 and JSON, as well as by ES5's strict mode. (Thanks @MaxNanasy .) New: Support leading decimal points in decimal numbers. (Thanks @MaxNanasy .) Breaking: Reject trailing decimal points in decimal numbers now. These are disallowed by both JSON5 and JSON. (Thanks @MaxNanasy .) Breaking: Reject omitted elements in arrays now. These are disallowed by both JSON5 and JSON. Fix: Throw proper SyntaxError instances on errors now. New: Add Node.js require() hook. Register via json5/lib/require . New: Add Node.js json5 executable to compile JSON5 files to JSON.","title":"v0.1.0 [code, diff]"},{"location":"node_modules/json5/CHANGELOG/#v001-code-diff","text":"This was the first implementation of this JSON5 parser. Support unquoted object keys, including reserved words. Unicode characters and escape sequences sequences aren't yet supported. Support single-quoted strings. Support multi-line strings. Support trailing commas in arrays and objects. Support comments, both inline and block.","title":"v0.0.1 [code, diff]"},{"location":"node_modules/json5/CHANGELOG/#v000-code","text":"Let's consider this to be Douglas Crockford's original json_parse.js \u2014 a parser for the regular JSON format.","title":"v0.0.0 [code]"},{"location":"node_modules/json5/LICENSE/","text":"MIT License Copyright (c) 2012-2018 Aseem Kishore, and others . Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"LICENSE"},{"location":"node_modules/levn/","text":"levn Light ECMAScript (JavaScript) Value Notation Levn is a library which allows you to parse a string into a JavaScript value based on an expected type. It is meant for short amounts of human entered data (eg. config files, command line arguments). Levn aims to concisely describe JavaScript values in text, and allow for the extraction and validation of those values. Levn uses type-check for its type format, and to validate the results. MIT license. Version 0.4.1. How is this different than JSON? levn is meant to be written by humans only, is (due to the previous point) much more concise, can be validated against supplied types, has regex and date literals, and can easily be extended with custom types. On the other hand, it is probably slower and thus less efficient at transporting large amounts of data, which is fine since this is not its purpose. npm install levn For updates on levn, follow me on twitter . Quick Examples var parse = require ( 'levn' ). parse ; parse ( 'Number' , '2' ); // 2 parse ( 'String' , '2' ); // '2' parse ( 'String' , 'levn' ); // 'levn' parse ( 'String' , 'a b' ); // 'a b' parse ( 'Boolean' , 'true' ); // true parse ( 'Date' , '#2011-11-11#' ); // (Date object) parse ( 'Date' , '2011-11-11' ); // (Date object) parse ( 'RegExp' , '/[a-z]/gi' ); // /[a-z]/gi parse ( 'RegExp' , 're' ); // /re/ parse ( 'Int' , '2' ); // 2 parse ( 'Number | String' , 'str' ); // 'str' parse ( 'Number | String' , '2' ); // 2 parse ( '[Number]' , '[1,2,3]' ); // [1,2,3] parse ( '(String, Boolean)' , '(hi, false)' ); // ['hi', false] parse ( '{a: String, b: Number}' , '{a: str, b: 2}' ); // {a: 'str', b: 2} // at the top level, you can ommit surrounding delimiters parse ( '[Number]' , '1,2,3' ); // [1,2,3] parse ( '(String, Boolean)' , 'hi, false' ); // ['hi', false] parse ( '{a: String, b: Number}' , 'a: str, b: 2' ); // {a: 'str', b: 2} // wildcard - auto choose type parse ( '*' , '[hi,(null,[42]),{k: true}]' ); // ['hi', [null, [42]], {k: true}] Usage require('levn'); returns an object that exposes three properties. VERSION is the current version of the library as a string. parse and parsedTypeParse are functions. // parse(type, input, options); parse ( '[Number]' , '1,2,3' ); // [1, 2, 3] // parsedTypeParse(parsedType, input, options); var parsedType = require ( 'type-check' ). parseType ( '[Number]' ); parsedTypeParse ( parsedType , '1,2,3' ); // [1, 2, 3] parse(type, input, options) parse casts the string input into a JavaScript value according to the specified type in the type format (and taking account the optional options ) and returns the resulting JavaScript value. arguments type - String - the type written in the type format which to check against input - String - the value written in the levn format options - Maybe Object - an optional parameter specifying additional options returns * - the resulting JavaScript value example parse ( '[Number]' , '1,2,3' ); // [1, 2, 3] parsedTypeParse(parsedType, input, options) parsedTypeParse casts the string input into a JavaScript value according to the specified type which has already been parsed (and taking account the optional options ) and returns the resulting JavaScript value. You can parse a type using the type-check library's parseType function. arguments type - Object - the type in the parsed type format which to check against input - String - the value written in the levn format options - Maybe Object - an optional parameter specifying additional options returns * - the resulting JavaScript value example var parsedType = require ( 'type-check' ). parseType ( '[Number]' ); parsedTypeParse ( parsedType , '1,2,3' ); // [1, 2, 3] Levn Format Levn can use the type information you provide to choose the appropriate value to produce from the input. For the same input, it will choose a different output value depending on the type provided. For example, parse('Number', '2') will produce the number 2 , but parse('String', '2') will produce the string \"2\" . If you do not provide type information, and simply use * , levn will parse the input according the unambiguous \"explicit\" mode, which we will now detail - you can also set the explicit option to true manually in the options . \"string\" , 'string' are parsed as a String, eg. \"a msg\" is \"a msg\" #date# is parsed as a Date, eg. #2011-11-11# is new Date('2011-11-11') /regexp/flags is parsed as a RegExp, eg. /re/gi is /re/gi undefined , null , NaN , true , and false are all their JavaScript equivalents [element1, element2, etc] is an Array, and the casting procedure is recursively applied to each element. Eg. [1,2,3] is [1,2,3] . (element1, element2, etc) is an tuple, and the casting procedure is recursively applied to each element. Eg. (1, a) is (1, a) (is [1, 'a'] ). {key1: val1, key2: val2, ...} is an Object, and the casting procedure is recursively applied to each property. Eg. {a: 1, b: 2} is {a: 1, b: 2} . Any test which does not fall under the above, and which does not contain special characters ( [``]``(``)``{``}``:``, ) is a string, eg. $12- blah is \"$12- blah\" . If you do provide type information, you can make your input more concise as the program already has some information about what it expects. Please see the type format section of type-check for more information about how to specify types. There are some rules about what levn can do with the information: If a String is expected, and only a String, all characters of the input (including any special ones) will become part of the output. Eg. [({})] is \"[({})]\" , and \"hi\" is '\"hi\"' . If a Date is expected, the surrounding # can be omitted from date literals. Eg. 2011-11-11 is new Date('2011-11-11') . If a RegExp is expected, no flags need to be specified, and the regex is not using any of the special characters,the opening and closing / can be omitted - this will have the affect of setting the source of the regex to the input. Eg. regex is /regex/ . If an Array is expected, and it is the root node (at the top level), the opening [ and closing ] can be omitted. Eg. 1,2,3 is [1,2,3] . If a tuple is expected, and it is the root node (at the top level), the opening ( and closing ) can be omitted. Eg. 1, a is (1, a) (is [1, 'a'] ). If an Object is expected, and it is the root node (at the top level), the opening { and closing } can be omitted. Eg a: 1, b: 2 is {a: 1, b: 2} . If you list multiple types (eg. Number | String ), it will first attempt to cast to the first type and then validate - if the validation fails it will move on to the next type and so forth, left to right. You must be careful as some types will succeed with any input, such as String. Thus put String at the end of your list. In non-explicit mode, Date and RegExp will succeed with a large variety of input - also be careful with these and list them near the end if not last in your list. Whitespace between special characters and elements is inconsequential. Options Options is an object. It is an optional parameter to the parse and parsedTypeParse functions. Explicit A Boolean . By default it is false . Example: parse ( 'RegExp' , 're' , { explicit : false }); // /re/ parse ( 'RegExp' , 're' , { explicit : true }); // Error: ... does not type check... parse ( 'RegExp | String' , 're' , { explicit : true }); // 're' explicit sets whether to be in explicit mode or not. Using * automatically activates explicit mode. For more information, read the levn format section. customTypes An Object . Empty {} by default. Example: var options = { customTypes : { Even : { typeOf : 'Number' , validate : function ( x ) { return x % 2 === 0 ; }, cast : function ( x ) { return { type : 'Just' , value : parseInt ( x )}; } } } } parse ( 'Even' , '2' , options ); // 2 parse ( 'Even' , '3' , options ); // Error: Value: \"3\" does not type check... Another Example: function Person ( name , age ){ this . name = name ; this . age = age ; } var options = { customTypes : { Person : { typeOf : 'Object' , validate : function ( x ) { x instanceof Person ; }, cast : function ( value , options , typesCast ) { var name , age ; if ({}. toString . call ( value ). slice ( 8 , - 1 ) !== 'Object' ) { return { type : 'Nothing' }; } name = typesCast ( value . name , [{ type : 'String' }], options ); age = typesCast ( value . age , [{ type : 'Numger' }], options ); return { type : 'Just' , value : new Person ( name , age )}; } } } parse ( 'Person' , '{name: Laura, age: 25}' , options ); // Person {name: 'Laura', age: 25} customTypes is an object whose keys are the name of the types, and whose values are an object with three properties, typeOf , validate , and cast . For more information about typeOf and validate , please see the custom types section of type-check. cast is a function which receives three arguments, the value under question, options, and the typesCast function. In cast , attempt to cast the value into the specified type. If you are successful, return an object in the format {type: 'Just', value: CAST-VALUE} , if you know it won't work, return {type: 'Nothing'} . You can use the typesCast function to cast any child values. Remember to pass options to it. In your function you can also check for options.explicit and act accordingly. Technical About levn is written in LiveScript - a language that compiles to JavaScript. It uses type-check to both parse types and validate values. It also uses the prelude.ls library.","title":"levn [![Build Status](https://travis-ci.org/gkz/levn.png)](https://travis-ci.org/gkz/levn) <a name=\"levn\" />"},{"location":"node_modules/levn/#levn","text":"Light ECMAScript (JavaScript) Value Notation Levn is a library which allows you to parse a string into a JavaScript value based on an expected type. It is meant for short amounts of human entered data (eg. config files, command line arguments). Levn aims to concisely describe JavaScript values in text, and allow for the extraction and validation of those values. Levn uses type-check for its type format, and to validate the results. MIT license. Version 0.4.1. How is this different than JSON? levn is meant to be written by humans only, is (due to the previous point) much more concise, can be validated against supplied types, has regex and date literals, and can easily be extended with custom types. On the other hand, it is probably slower and thus less efficient at transporting large amounts of data, which is fine since this is not its purpose. npm install levn For updates on levn, follow me on twitter .","title":"levn  "},{"location":"node_modules/levn/#quick-examples","text":"var parse = require ( 'levn' ). parse ; parse ( 'Number' , '2' ); // 2 parse ( 'String' , '2' ); // '2' parse ( 'String' , 'levn' ); // 'levn' parse ( 'String' , 'a b' ); // 'a b' parse ( 'Boolean' , 'true' ); // true parse ( 'Date' , '#2011-11-11#' ); // (Date object) parse ( 'Date' , '2011-11-11' ); // (Date object) parse ( 'RegExp' , '/[a-z]/gi' ); // /[a-z]/gi parse ( 'RegExp' , 're' ); // /re/ parse ( 'Int' , '2' ); // 2 parse ( 'Number | String' , 'str' ); // 'str' parse ( 'Number | String' , '2' ); // 2 parse ( '[Number]' , '[1,2,3]' ); // [1,2,3] parse ( '(String, Boolean)' , '(hi, false)' ); // ['hi', false] parse ( '{a: String, b: Number}' , '{a: str, b: 2}' ); // {a: 'str', b: 2} // at the top level, you can ommit surrounding delimiters parse ( '[Number]' , '1,2,3' ); // [1,2,3] parse ( '(String, Boolean)' , 'hi, false' ); // ['hi', false] parse ( '{a: String, b: Number}' , 'a: str, b: 2' ); // {a: 'str', b: 2} // wildcard - auto choose type parse ( '*' , '[hi,(null,[42]),{k: true}]' ); // ['hi', [null, [42]], {k: true}]","title":"Quick Examples"},{"location":"node_modules/levn/#usage","text":"require('levn'); returns an object that exposes three properties. VERSION is the current version of the library as a string. parse and parsedTypeParse are functions. // parse(type, input, options); parse ( '[Number]' , '1,2,3' ); // [1, 2, 3] // parsedTypeParse(parsedType, input, options); var parsedType = require ( 'type-check' ). parseType ( '[Number]' ); parsedTypeParse ( parsedType , '1,2,3' ); // [1, 2, 3]","title":"Usage"},{"location":"node_modules/levn/#parsetype-input-options","text":"parse casts the string input into a JavaScript value according to the specified type in the type format (and taking account the optional options ) and returns the resulting JavaScript value.","title":"parse(type, input, options)"},{"location":"node_modules/levn/#arguments","text":"type - String - the type written in the type format which to check against input - String - the value written in the levn format options - Maybe Object - an optional parameter specifying additional options","title":"arguments"},{"location":"node_modules/levn/#returns","text":"* - the resulting JavaScript value","title":"returns"},{"location":"node_modules/levn/#example","text":"parse ( '[Number]' , '1,2,3' ); // [1, 2, 3]","title":"example"},{"location":"node_modules/levn/#parsedtypeparseparsedtype-input-options","text":"parsedTypeParse casts the string input into a JavaScript value according to the specified type which has already been parsed (and taking account the optional options ) and returns the resulting JavaScript value. You can parse a type using the type-check library's parseType function.","title":"parsedTypeParse(parsedType, input, options)"},{"location":"node_modules/levn/#arguments_1","text":"type - Object - the type in the parsed type format which to check against input - String - the value written in the levn format options - Maybe Object - an optional parameter specifying additional options","title":"arguments"},{"location":"node_modules/levn/#returns_1","text":"* - the resulting JavaScript value","title":"returns"},{"location":"node_modules/levn/#example_1","text":"var parsedType = require ( 'type-check' ). parseType ( '[Number]' ); parsedTypeParse ( parsedType , '1,2,3' ); // [1, 2, 3]","title":"example"},{"location":"node_modules/levn/#levn-format","text":"Levn can use the type information you provide to choose the appropriate value to produce from the input. For the same input, it will choose a different output value depending on the type provided. For example, parse('Number', '2') will produce the number 2 , but parse('String', '2') will produce the string \"2\" . If you do not provide type information, and simply use * , levn will parse the input according the unambiguous \"explicit\" mode, which we will now detail - you can also set the explicit option to true manually in the options . \"string\" , 'string' are parsed as a String, eg. \"a msg\" is \"a msg\" #date# is parsed as a Date, eg. #2011-11-11# is new Date('2011-11-11') /regexp/flags is parsed as a RegExp, eg. /re/gi is /re/gi undefined , null , NaN , true , and false are all their JavaScript equivalents [element1, element2, etc] is an Array, and the casting procedure is recursively applied to each element. Eg. [1,2,3] is [1,2,3] . (element1, element2, etc) is an tuple, and the casting procedure is recursively applied to each element. Eg. (1, a) is (1, a) (is [1, 'a'] ). {key1: val1, key2: val2, ...} is an Object, and the casting procedure is recursively applied to each property. Eg. {a: 1, b: 2} is {a: 1, b: 2} . Any test which does not fall under the above, and which does not contain special characters ( [``]``(``)``{``}``:``, ) is a string, eg. $12- blah is \"$12- blah\" . If you do provide type information, you can make your input more concise as the program already has some information about what it expects. Please see the type format section of type-check for more information about how to specify types. There are some rules about what levn can do with the information: If a String is expected, and only a String, all characters of the input (including any special ones) will become part of the output. Eg. [({})] is \"[({})]\" , and \"hi\" is '\"hi\"' . If a Date is expected, the surrounding # can be omitted from date literals. Eg. 2011-11-11 is new Date('2011-11-11') . If a RegExp is expected, no flags need to be specified, and the regex is not using any of the special characters,the opening and closing / can be omitted - this will have the affect of setting the source of the regex to the input. Eg. regex is /regex/ . If an Array is expected, and it is the root node (at the top level), the opening [ and closing ] can be omitted. Eg. 1,2,3 is [1,2,3] . If a tuple is expected, and it is the root node (at the top level), the opening ( and closing ) can be omitted. Eg. 1, a is (1, a) (is [1, 'a'] ). If an Object is expected, and it is the root node (at the top level), the opening { and closing } can be omitted. Eg a: 1, b: 2 is {a: 1, b: 2} . If you list multiple types (eg. Number | String ), it will first attempt to cast to the first type and then validate - if the validation fails it will move on to the next type and so forth, left to right. You must be careful as some types will succeed with any input, such as String. Thus put String at the end of your list. In non-explicit mode, Date and RegExp will succeed with a large variety of input - also be careful with these and list them near the end if not last in your list. Whitespace between special characters and elements is inconsequential.","title":"Levn Format"},{"location":"node_modules/levn/#options","text":"Options is an object. It is an optional parameter to the parse and parsedTypeParse functions.","title":"Options"},{"location":"node_modules/levn/#explicit","text":"A Boolean . By default it is false . Example: parse ( 'RegExp' , 're' , { explicit : false }); // /re/ parse ( 'RegExp' , 're' , { explicit : true }); // Error: ... does not type check... parse ( 'RegExp | String' , 're' , { explicit : true }); // 're' explicit sets whether to be in explicit mode or not. Using * automatically activates explicit mode. For more information, read the levn format section.","title":"Explicit"},{"location":"node_modules/levn/#customtypes","text":"An Object . Empty {} by default. Example: var options = { customTypes : { Even : { typeOf : 'Number' , validate : function ( x ) { return x % 2 === 0 ; }, cast : function ( x ) { return { type : 'Just' , value : parseInt ( x )}; } } } } parse ( 'Even' , '2' , options ); // 2 parse ( 'Even' , '3' , options ); // Error: Value: \"3\" does not type check... Another Example: function Person ( name , age ){ this . name = name ; this . age = age ; } var options = { customTypes : { Person : { typeOf : 'Object' , validate : function ( x ) { x instanceof Person ; }, cast : function ( value , options , typesCast ) { var name , age ; if ({}. toString . call ( value ). slice ( 8 , - 1 ) !== 'Object' ) { return { type : 'Nothing' }; } name = typesCast ( value . name , [{ type : 'String' }], options ); age = typesCast ( value . age , [{ type : 'Numger' }], options ); return { type : 'Just' , value : new Person ( name , age )}; } } } parse ( 'Person' , '{name: Laura, age: 25}' , options ); // Person {name: 'Laura', age: 25} customTypes is an object whose keys are the name of the types, and whose values are an object with three properties, typeOf , validate , and cast . For more information about typeOf and validate , please see the custom types section of type-check. cast is a function which receives three arguments, the value under question, options, and the typesCast function. In cast , attempt to cast the value into the specified type. If you are successful, return an object in the format {type: 'Just', value: CAST-VALUE} , if you know it won't work, return {type: 'Nothing'} . You can use the typesCast function to cast any child values. Remember to pass options to it. In your function you can also check for options.explicit and act accordingly.","title":"customTypes"},{"location":"node_modules/levn/#technical-about","text":"levn is written in LiveScript - a language that compiles to JavaScript. It uses type-check to both parse types and validate values. It also uses the prelude.ls library.","title":"Technical About"},{"location":"node_modules/load-json-file/readme/","text":"load-json-file Read and parse a JSON file Strips UTF-8 BOM , uses graceful-fs , and throws more helpful JSON errors . Install $ npm install --save load-json-file Usage const loadJsonFile = require ( 'load-json-file' ); loadJsonFile ( 'foo.json' ). then ( json => { console . log ( json ); //=> {foo: true} }); API loadJsonFile(filepath) Returns a promise that resolves to the parsed JSON. loadJsonFile.sync(filepath) Returns the parsed JSON. Related write-json-file - Stringify and write JSON to a file atomically License MIT \u00a9 Sindre Sorhus","title":"load-json-file [![Build Status](https://travis-ci.org/sindresorhus/load-json-file.svg?branch=master)](https://travis-ci.org/sindresorhus/load-json-file)"},{"location":"node_modules/load-json-file/readme/#load-json-file","text":"Read and parse a JSON file Strips UTF-8 BOM , uses graceful-fs , and throws more helpful JSON errors .","title":"load-json-file"},{"location":"node_modules/load-json-file/readme/#install","text":"$ npm install --save load-json-file","title":"Install"},{"location":"node_modules/load-json-file/readme/#usage","text":"const loadJsonFile = require ( 'load-json-file' ); loadJsonFile ( 'foo.json' ). then ( json => { console . log ( json ); //=> {foo: true} });","title":"Usage"},{"location":"node_modules/load-json-file/readme/#api","text":"","title":"API"},{"location":"node_modules/load-json-file/readme/#loadjsonfilefilepath","text":"Returns a promise that resolves to the parsed JSON.","title":"loadJsonFile(filepath)"},{"location":"node_modules/load-json-file/readme/#loadjsonfilesyncfilepath","text":"Returns the parsed JSON.","title":"loadJsonFile.sync(filepath)"},{"location":"node_modules/load-json-file/readme/#related","text":"write-json-file - Stringify and write JSON to a file atomically","title":"Related"},{"location":"node_modules/load-json-file/readme/#license","text":"MIT \u00a9 Sindre Sorhus","title":"License"},{"location":"node_modules/locate-path/readme/","text":"locate-path Get the first path that exists on disk of multiple paths Install $ npm install --save locate-path Usage Here we find the first file that exists on disk, in array order. const locatePath = require ( 'locate-path' ); const files = [ 'unicorn.png' , 'rainbow.png' , // only this one actually exists on disk 'pony.png' ]; locatePath ( files ). then ( foundPath => { console . log ( foundPath ); //=> 'rainbow' }); API locatePath(input, [options]) Returns a Promise for the first path that exists or undefined if none exists. input Type: Iterable<string> Paths to check. options Type: Object concurrency Type: number Default: Infinity Minimum: 1 Number of concurrently pending promises. preserveOrder Type: boolean Default: true Preserve input order when searching. Disable this to improve performance if you don't care about the order. cwd Type: string Default: process.cwd() Current working directory. locatePath.sync(input, [options]) Returns the first path that exists or undefined if none exists. input Type: Iterable<string> Paths to check. options Type: Object cwd Same as above. Related path-exists - Check if a path exists License MIT \u00a9 Sindre Sorhus","title":"locate-path [![Build Status](https://travis-ci.org/sindresorhus/locate-path.svg?branch=master)](https://travis-ci.org/sindresorhus/locate-path)"},{"location":"node_modules/locate-path/readme/#locate-path","text":"Get the first path that exists on disk of multiple paths","title":"locate-path"},{"location":"node_modules/locate-path/readme/#install","text":"$ npm install --save locate-path","title":"Install"},{"location":"node_modules/locate-path/readme/#usage","text":"Here we find the first file that exists on disk, in array order. const locatePath = require ( 'locate-path' ); const files = [ 'unicorn.png' , 'rainbow.png' , // only this one actually exists on disk 'pony.png' ]; locatePath ( files ). then ( foundPath => { console . log ( foundPath ); //=> 'rainbow' });","title":"Usage"},{"location":"node_modules/locate-path/readme/#api","text":"","title":"API"},{"location":"node_modules/locate-path/readme/#locatepathinput-options","text":"Returns a Promise for the first path that exists or undefined if none exists.","title":"locatePath(input, [options])"},{"location":"node_modules/locate-path/readme/#input","text":"Type: Iterable<string> Paths to check.","title":"input"},{"location":"node_modules/locate-path/readme/#options","text":"Type: Object","title":"options"},{"location":"node_modules/locate-path/readme/#concurrency","text":"Type: number Default: Infinity Minimum: 1 Number of concurrently pending promises.","title":"concurrency"},{"location":"node_modules/locate-path/readme/#preserveorder","text":"Type: boolean Default: true Preserve input order when searching. Disable this to improve performance if you don't care about the order.","title":"preserveOrder"},{"location":"node_modules/locate-path/readme/#cwd","text":"Type: string Default: process.cwd() Current working directory.","title":"cwd"},{"location":"node_modules/locate-path/readme/#locatepathsyncinput-options","text":"Returns the first path that exists or undefined if none exists.","title":"locatePath.sync(input, [options])"},{"location":"node_modules/locate-path/readme/#input_1","text":"Type: Iterable<string> Paths to check.","title":"input"},{"location":"node_modules/locate-path/readme/#options_1","text":"Type: Object","title":"options"},{"location":"node_modules/locate-path/readme/#cwd_1","text":"Same as above.","title":"cwd"},{"location":"node_modules/locate-path/readme/#related","text":"path-exists - Check if a path exists","title":"Related"},{"location":"node_modules/locate-path/readme/#license","text":"MIT \u00a9 Sindre Sorhus","title":"License"},{"location":"node_modules/lodash.truncate/","text":"lodash.truncate v4.4.2 The lodash method _.truncate exported as a Node.js module. Installation Using npm: $ { sudo -H } npm i -g npm $ npm i --save lodash.truncate In Node.js: var truncate = require ( 'lodash.truncate' ); See the documentation or package source for more details.","title":"lodash.truncate v4.4.2"},{"location":"node_modules/lodash.truncate/#lodashtruncate-v442","text":"The lodash method _.truncate exported as a Node.js module.","title":"lodash.truncate v4.4.2"},{"location":"node_modules/lodash.truncate/#installation","text":"Using npm: $ { sudo -H } npm i -g npm $ npm i --save lodash.truncate In Node.js: var truncate = require ( 'lodash.truncate' ); See the documentation or package source for more details.","title":"Installation"},{"location":"node_modules/log-symbols/readme/","text":"log-symbols Colored symbols for various log levels Includes fallbacks for Windows CMD which only supports a limited character set . Install $ npm install --save log-symbols Usage var logSymbols = require ( 'log-symbols' ); console . log ( logSymbols . success , 'finished successfully!' ); // On real OSes: \u2714 finished successfully! // On Windows: \u221a finished successfully! API logSymbols info success warning error License MIT \u00a9 Sindre Sorhus","title":"log-symbols [![Build Status](https://travis-ci.org/sindresorhus/log-symbols.svg?branch=master)](https://travis-ci.org/sindresorhus/log-symbols)"},{"location":"node_modules/log-symbols/readme/#log-symbols","text":"Colored symbols for various log levels Includes fallbacks for Windows CMD which only supports a limited character set .","title":"log-symbols"},{"location":"node_modules/log-symbols/readme/#install","text":"$ npm install --save log-symbols","title":"Install"},{"location":"node_modules/log-symbols/readme/#usage","text":"var logSymbols = require ( 'log-symbols' ); console . log ( logSymbols . success , 'finished successfully!' ); // On real OSes: \u2714 finished successfully! // On Windows: \u221a finished successfully!","title":"Usage"},{"location":"node_modules/log-symbols/readme/#api","text":"","title":"API"},{"location":"node_modules/log-symbols/readme/#logsymbols","text":"","title":"logSymbols"},{"location":"node_modules/log-symbols/readme/#info","text":"","title":"info"},{"location":"node_modules/log-symbols/readme/#success","text":"","title":"success"},{"location":"node_modules/log-symbols/readme/#warning","text":"","title":"warning"},{"location":"node_modules/log-symbols/readme/#error","text":"","title":"error"},{"location":"node_modules/log-symbols/readme/#license","text":"MIT \u00a9 Sindre Sorhus","title":"License"},{"location":"node_modules/longest-streak/readme/","text":"longest-streak Count the longest repeating streak of a character. Install npm : npm install longest-streak Use var longestStreak = require ( 'longest-streak' ) longestStreak ( '` foo `` bar `' , '`' ) // => 2 API longestStreak(value, character) Get the count of the longest repeating streak of character in value . Parameters value ( string ) \u2014 Content, coerced to string. character ( string ) \u2014 Single character to look for. Returns number \u2014 Number of characters at the place where character occurs in its longest streak in value . Throws Error \u2014 when character is not a single character string. License MIT \u00a9 Titus Wormer","title":"longest-streak"},{"location":"node_modules/longest-streak/readme/#longest-streak","text":"Count the longest repeating streak of a character.","title":"longest-streak"},{"location":"node_modules/longest-streak/readme/#install","text":"npm : npm install longest-streak","title":"Install"},{"location":"node_modules/longest-streak/readme/#use","text":"var longestStreak = require ( 'longest-streak' ) longestStreak ( '` foo `` bar `' , '`' ) // => 2","title":"Use"},{"location":"node_modules/longest-streak/readme/#api","text":"","title":"API"},{"location":"node_modules/longest-streak/readme/#longeststreakvalue-character","text":"Get the count of the longest repeating streak of character in value .","title":"longestStreak(value, character)"},{"location":"node_modules/longest-streak/readme/#parameters","text":"value ( string ) \u2014 Content, coerced to string. character ( string ) \u2014 Single character to look for.","title":"Parameters"},{"location":"node_modules/longest-streak/readme/#returns","text":"number \u2014 Number of characters at the place where character occurs in its longest streak in value .","title":"Returns"},{"location":"node_modules/longest-streak/readme/#throws","text":"Error \u2014 when character is not a single character string.","title":"Throws"},{"location":"node_modules/longest-streak/readme/#license","text":"MIT \u00a9 Titus Wormer","title":"License"},{"location":"node_modules/markdown-table/readme/","text":"markdown-table Generate fancy Markdown tables. Install npm : npm install markdown-table Use Typical usage (defaults to align left): var table = require ( 'markdown-table' ) table ([ [ 'Branch' , 'Commit' ], [ 'master' , '0123456789abcdef' ], [ 'staging' , 'fedcba9876543210' ] ]) Yields: | Branch | Commit | | ------- | ---------------- | | master | 0123456789abcdef | | staging | fedcba9876543210 | With align: table ( [ [ 'Beep' , 'No.' , 'Boop' ], [ 'beep' , '1024' , 'xyz' ], [ 'boop' , '3388450' , 'tuv' ], [ 'foo' , '10106' , 'qrstuv' ], [ 'bar' , '45' , 'lmno' ] ], { align : [ 'l' , 'c' , 'r' ]} ) Yields: | Beep | No. | Boop | | :--- | :-----: | -----: | | beep | 1024 | xyz | | boop | 3388450 | tuv | | foo | 10106 | qrstuv | | bar | 45 | lmno | API markdownTable(table[, options]) Turns a given matrix of strings (an array of arrays of strings) into a table. options options.align One style for all columns, or styles for their respective columns ( string or Array.<string> ). Each style is either 'l' (left), 'r' (right), or 'c' (center). Other values are treated as '' , which doesn\u2019t place the colon in the alignment row but does align left. Only the lowercased first character is used, so Right is fine. options.padding Whether to add a space of padding between delimiters and cells ( boolean , default: true ). When true , there is padding: | Alpha | B | | ----- | ----- | | C | Delta | When false , there is no padding: |Alpha|B | |-----|-----| |C |Delta| options.delimiterStart Whether to begin each row with the delimiter ( boolean , default: true ). Note: please don\u2019t use this: it could create fragile structures that aren\u2019t understandable to some Markdown parsers. When true , there are starting delimiters: | Alpha | B | | ----- | ----- | | C | Delta | When false , there are no starting delimiters: Alpha | B | ----- | ----- | C | Delta | options.delimiterEnd Whether to end each row with the delimiter ( boolean , default: true ). Note: please don\u2019t use this: it could create fragile structures that aren\u2019t understandable to some Markdown parsers. When true , there are ending delimiters: | Alpha | B | | ----- | ----- | | C | Delta | When false , there are no ending delimiters: | Alpha | B | ----- | ----- | C | Delta options.alignDelimiters Whether to align the delimiters ( boolean , default: true ). By default, they are aligned: | Alpha | B | | ----- | ----- | | C | Delta | Pass false to make them staggered: | Alpha | B | | - | - | | C | Delta | options.stringLength Method to detect the length of a cell ( Function , default: s => s.length ). Full-width characters and ANSI-sequences all mess up delimiter alignment when viewing the Markdown source. To fix this, you have to pass in a stringLength option to detect the \u201cvisible\u201d length of a cell (note that what is and isn\u2019t visible depends on your editor). Without such a function, the following: table ([ [ 'Alpha' , 'Bravo' ], [ '\u4e2d\u6587' , 'Charlie' ], [ '\ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc69' , 'Delta' ] ]) Yields: | Alpha | Bravo | | - | - | | \u4e2d\u6587 | Charlie | | \ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc69 | Delta | With string-width : var width = require ( 'string-width' ) table ( [ [ 'Alpha' , 'Bravo' ], [ '\u4e2d\u6587' , 'Charlie' ], [ '\ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc69' , 'Delta' ] ], { stringLength : width } ) Yields: | Alpha | Bravo | | ----- | ------- | | \u4e2d\u6587 | Charlie | | \ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc69 | Delta | Inspiration The original idea and basic implementation was inspired by James Halliday\u2019s text-table library. License MIT \u00a9 Titus Wormer","title":"markdown-table"},{"location":"node_modules/markdown-table/readme/#markdown-table","text":"Generate fancy Markdown tables.","title":"markdown-table"},{"location":"node_modules/markdown-table/readme/#install","text":"npm : npm install markdown-table","title":"Install"},{"location":"node_modules/markdown-table/readme/#use","text":"Typical usage (defaults to align left): var table = require ( 'markdown-table' ) table ([ [ 'Branch' , 'Commit' ], [ 'master' , '0123456789abcdef' ], [ 'staging' , 'fedcba9876543210' ] ]) Yields: | Branch | Commit | | ------- | ---------------- | | master | 0123456789abcdef | | staging | fedcba9876543210 | With align: table ( [ [ 'Beep' , 'No.' , 'Boop' ], [ 'beep' , '1024' , 'xyz' ], [ 'boop' , '3388450' , 'tuv' ], [ 'foo' , '10106' , 'qrstuv' ], [ 'bar' , '45' , 'lmno' ] ], { align : [ 'l' , 'c' , 'r' ]} ) Yields: | Beep | No. | Boop | | :--- | :-----: | -----: | | beep | 1024 | xyz | | boop | 3388450 | tuv | | foo | 10106 | qrstuv | | bar | 45 | lmno |","title":"Use"},{"location":"node_modules/markdown-table/readme/#api","text":"","title":"API"},{"location":"node_modules/markdown-table/readme/#markdowntabletable-options","text":"Turns a given matrix of strings (an array of arrays of strings) into a table.","title":"markdownTable(table[, options])"},{"location":"node_modules/markdown-table/readme/#options","text":"","title":"options"},{"location":"node_modules/markdown-table/readme/#optionsalign","text":"One style for all columns, or styles for their respective columns ( string or Array.<string> ). Each style is either 'l' (left), 'r' (right), or 'c' (center). Other values are treated as '' , which doesn\u2019t place the colon in the alignment row but does align left. Only the lowercased first character is used, so Right is fine.","title":"options.align"},{"location":"node_modules/markdown-table/readme/#optionspadding","text":"Whether to add a space of padding between delimiters and cells ( boolean , default: true ). When true , there is padding: | Alpha | B | | ----- | ----- | | C | Delta | When false , there is no padding: |Alpha|B | |-----|-----| |C |Delta|","title":"options.padding"},{"location":"node_modules/markdown-table/readme/#optionsdelimiterstart","text":"Whether to begin each row with the delimiter ( boolean , default: true ). Note: please don\u2019t use this: it could create fragile structures that aren\u2019t understandable to some Markdown parsers. When true , there are starting delimiters: | Alpha | B | | ----- | ----- | | C | Delta | When false , there are no starting delimiters: Alpha | B | ----- | ----- | C | Delta |","title":"options.delimiterStart"},{"location":"node_modules/markdown-table/readme/#optionsdelimiterend","text":"Whether to end each row with the delimiter ( boolean , default: true ). Note: please don\u2019t use this: it could create fragile structures that aren\u2019t understandable to some Markdown parsers. When true , there are ending delimiters: | Alpha | B | | ----- | ----- | | C | Delta | When false , there are no ending delimiters: | Alpha | B | ----- | ----- | C | Delta","title":"options.delimiterEnd"},{"location":"node_modules/markdown-table/readme/#optionsaligndelimiters","text":"Whether to align the delimiters ( boolean , default: true ). By default, they are aligned: | Alpha | B | | ----- | ----- | | C | Delta | Pass false to make them staggered: | Alpha | B | | - | - | | C | Delta |","title":"options.alignDelimiters"},{"location":"node_modules/markdown-table/readme/#optionsstringlength","text":"Method to detect the length of a cell ( Function , default: s => s.length ). Full-width characters and ANSI-sequences all mess up delimiter alignment when viewing the Markdown source. To fix this, you have to pass in a stringLength option to detect the \u201cvisible\u201d length of a cell (note that what is and isn\u2019t visible depends on your editor). Without such a function, the following: table ([ [ 'Alpha' , 'Bravo' ], [ '\u4e2d\u6587' , 'Charlie' ], [ '\ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc69' , 'Delta' ] ]) Yields: | Alpha | Bravo | | - | - | | \u4e2d\u6587 | Charlie | | \ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc69 | Delta | With string-width : var width = require ( 'string-width' ) table ( [ [ 'Alpha' , 'Bravo' ], [ '\u4e2d\u6587' , 'Charlie' ], [ '\ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc69' , 'Delta' ] ], { stringLength : width } ) Yields: | Alpha | Bravo | | ----- | ------- | | \u4e2d\u6587 | Charlie | | \ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc69 | Delta |","title":"options.stringLength"},{"location":"node_modules/markdown-table/readme/#inspiration","text":"The original idea and basic implementation was inspired by James Halliday\u2019s text-table library.","title":"Inspiration"},{"location":"node_modules/markdown-table/readme/#license","text":"MIT \u00a9 Titus Wormer","title":"License"},{"location":"node_modules/match-index/","text":"match-index Get index of each capture. Get index of each capture in a JavaScript regex - Stack Overflow tc39/String.prototype.matchAll: ES Proposal, specs, tests, reference implementation, and polyfill/shim for String.prototype.matchAll Why? You want to match a regex like /(a.)(b)(c.)d/ with \"aabccde\", and get the following information back: \"aa\" at index = 0 \"b\" at index = 2 \"cc\" at index = 3 But, it is difficult to write. match-index provide matchCaptureGroupAll function that easy to get this information! const text = \"aabccde\" ; const regExp = /(a.)(b)(c.)d/ ; const captureGroups = matchCaptureGroupAll ( text , regExp ); // array of `MatchCaptureGroup` assert . equal ( captureGroups . length , 3 ); const [ a , b , c ] = captureGroups ; assert . equal ( a . text , \"aa\" ); assert . equal ( a . index , 0 ); assert . equal ( b . text , \"b\" ); assert . equal ( b . index , 2 ); assert . equal ( c . text , \"cc\" ); assert . equal ( c . index , 3 ); Installation npm install match-index Usage match-index provide two functions matchCaptureGroupAll(text, regExp): MatchCaptureGroup Retrieves the captured matches when matching a string against a regular expression. Example of matchCaptureGroupAll() // get \"ABC\" and \"EFC that are captured by ( and ) const captureGroups = matchCaptureGroupAll ( \"ABC EFG\" , /(ABC).*?(EFG)/ ); // captureGroups is array of MatchAllGroup /** * @typedef {Object} MatchAllGroup * @property {Array} all * @property {string} input * @property {number} index * @property {MatchCaptureGroup[]} captureGroups */ assert ( captureGroups . length , 2 ); const [ x , y ] = captureGroups ; assert . equal ( x . text , \"ABC\" ); assert . equal ( x . index , 0 ); assert . equal ( y . text , \"EFG\" ); assert . equal ( y . index , 4 ); matchCaptureGroupAll use matchAll in internal. matchAll(text, regExp): MatchAllGroup Retrieves the matches all when matching a string against a regular expression. Example of matchAll() const text = 'test1test2' ; const regexp = /t(e)(st(\\d?))/g ; const captureGroups = matchAll ( text , regexp ); // captureGroups is array of `MatchAllGroup` /** * @typedef {Object} MatchAllGroup * @property {Array} all * @property {string} input * @property {number} index * @property {MatchCaptureGroup[]} captureGroups */ assert . equal ( captureGroups . length , 2 ); const [ test1 , test2 ] = captureGroups ; assert . equal ( test1 . index , 0 ); assert . equal ( test1 . input , text ); assert . deepEqual ( test1 . all , [ 'test1' , 'e' , 'st1' , '1' ]); assert . deepEqual ( test1 . captureGroups , [ { index : 1 , text : 'e' }, { index : 2 , text : 'st1' }, { index : - 1 , // Limitation of capture nest text : '1' } ]); assert . equal ( test2 . index , 5 ); assert . equal ( test2 . input , text ); assert . deepEqual ( test2 . all , [ 'test2' , 'e' , 'st2' , '2' ]); assert . deepEqual ( test2 . captureGroups , [ { index : 6 , text : 'e' }, { index : 7 , text : 'st2' }, { index : - 1 , // Limitation text : '2' } ]); Notes Limitation :warning: matchAll and matchCaptureGroupAll doesn't support nest capture. e.g.) last captureGroups item's index is wrong result. (st(\\d?)) is nest capture. const text = 'test1test2' ; const regexp = /t(e)(st(\\d?))/g ; const captureGroups = matchAll ( text , regexp ); // captureGroups is array of `MatchAllGroup` /** * @typedef {Object} MatchAllGroup * @property {Array} all * @property {string} input * @property {number} index * @property {MatchCaptureGroup[]} captureGroups */ assert . equal ( captureGroups . length , 2 ); const [ test1 , test2 ] = captureGroups ; assert . equal ( test1 . index , 0 ); assert . equal ( test1 . input , text ); assert . deepEqual ( test1 . all , [ 'test1' , 'e' , 'st1' , '1' ]); assert . deepEqual ( test1 . captureGroups , [ { index : 1 , text : 'e' }, { index : 2 , text : 'st1' }, { index : - 1 , // Limitation of capture nest text : '1' } ]); Welcome to pull request to fix this limitation :) Tests npm test Contributing Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request :D License MIT","title":"match-index [![Build Status](https://travis-ci.org/azu/match-index.svg?branch=master)](https://travis-ci.org/azu/match-index)"},{"location":"node_modules/match-index/#match-index","text":"Get index of each capture. Get index of each capture in a JavaScript regex - Stack Overflow tc39/String.prototype.matchAll: ES Proposal, specs, tests, reference implementation, and polyfill/shim for String.prototype.matchAll","title":"match-index"},{"location":"node_modules/match-index/#why","text":"You want to match a regex like /(a.)(b)(c.)d/ with \"aabccde\", and get the following information back: \"aa\" at index = 0 \"b\" at index = 2 \"cc\" at index = 3 But, it is difficult to write. match-index provide matchCaptureGroupAll function that easy to get this information! const text = \"aabccde\" ; const regExp = /(a.)(b)(c.)d/ ; const captureGroups = matchCaptureGroupAll ( text , regExp ); // array of `MatchCaptureGroup` assert . equal ( captureGroups . length , 3 ); const [ a , b , c ] = captureGroups ; assert . equal ( a . text , \"aa\" ); assert . equal ( a . index , 0 ); assert . equal ( b . text , \"b\" ); assert . equal ( b . index , 2 ); assert . equal ( c . text , \"cc\" ); assert . equal ( c . index , 3 );","title":"Why?"},{"location":"node_modules/match-index/#installation","text":"npm install match-index","title":"Installation"},{"location":"node_modules/match-index/#usage","text":"match-index provide two functions","title":"Usage"},{"location":"node_modules/match-index/#matchcapturegroupalltext-regexp-matchcapturegroup","text":"Retrieves the captured matches when matching a string against a regular expression. Example of matchCaptureGroupAll() // get \"ABC\" and \"EFC that are captured by ( and ) const captureGroups = matchCaptureGroupAll ( \"ABC EFG\" , /(ABC).*?(EFG)/ ); // captureGroups is array of MatchAllGroup /** * @typedef {Object} MatchAllGroup * @property {Array} all * @property {string} input * @property {number} index * @property {MatchCaptureGroup[]} captureGroups */ assert ( captureGroups . length , 2 ); const [ x , y ] = captureGroups ; assert . equal ( x . text , \"ABC\" ); assert . equal ( x . index , 0 ); assert . equal ( y . text , \"EFG\" ); assert . equal ( y . index , 4 ); matchCaptureGroupAll use matchAll in internal.","title":"matchCaptureGroupAll(text, regExp): MatchCaptureGroup"},{"location":"node_modules/match-index/#matchalltext-regexp-matchallgroup","text":"Retrieves the matches all when matching a string against a regular expression. Example of matchAll() const text = 'test1test2' ; const regexp = /t(e)(st(\\d?))/g ; const captureGroups = matchAll ( text , regexp ); // captureGroups is array of `MatchAllGroup` /** * @typedef {Object} MatchAllGroup * @property {Array} all * @property {string} input * @property {number} index * @property {MatchCaptureGroup[]} captureGroups */ assert . equal ( captureGroups . length , 2 ); const [ test1 , test2 ] = captureGroups ; assert . equal ( test1 . index , 0 ); assert . equal ( test1 . input , text ); assert . deepEqual ( test1 . all , [ 'test1' , 'e' , 'st1' , '1' ]); assert . deepEqual ( test1 . captureGroups , [ { index : 1 , text : 'e' }, { index : 2 , text : 'st1' }, { index : - 1 , // Limitation of capture nest text : '1' } ]); assert . equal ( test2 . index , 5 ); assert . equal ( test2 . input , text ); assert . deepEqual ( test2 . all , [ 'test2' , 'e' , 'st2' , '2' ]); assert . deepEqual ( test2 . captureGroups , [ { index : 6 , text : 'e' }, { index : 7 , text : 'st2' }, { index : - 1 , // Limitation text : '2' } ]);","title":"matchAll(text, regExp): MatchAllGroup"},{"location":"node_modules/match-index/#notes","text":"","title":"Notes"},{"location":"node_modules/match-index/#limitation-warning","text":"matchAll and matchCaptureGroupAll doesn't support nest capture. e.g.) last captureGroups item's index is wrong result. (st(\\d?)) is nest capture. const text = 'test1test2' ; const regexp = /t(e)(st(\\d?))/g ; const captureGroups = matchAll ( text , regexp ); // captureGroups is array of `MatchAllGroup` /** * @typedef {Object} MatchAllGroup * @property {Array} all * @property {string} input * @property {number} index * @property {MatchCaptureGroup[]} captureGroups */ assert . equal ( captureGroups . length , 2 ); const [ test1 , test2 ] = captureGroups ; assert . equal ( test1 . index , 0 ); assert . equal ( test1 . input , text ); assert . deepEqual ( test1 . all , [ 'test1' , 'e' , 'st1' , '1' ]); assert . deepEqual ( test1 . captureGroups , [ { index : 1 , text : 'e' }, { index : 2 , text : 'st1' }, { index : - 1 , // Limitation of capture nest text : '1' } ]); Welcome to pull request to fix this limitation :)","title":"Limitation :warning:"},{"location":"node_modules/match-index/#tests","text":"npm test","title":"Tests"},{"location":"node_modules/match-index/#contributing","text":"Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request :D","title":"Contributing"},{"location":"node_modules/match-index/#license","text":"MIT","title":"License"},{"location":"node_modules/md5/","text":"MD5 a JavaScript function for hashing messages with MD5. node-md5 is being sponsored by the following tool; please help to support us by taking a look and signing up to a free trial Installation You can use this package on the server side as well as the client side. Node.js : npm install md5 API md5 ( message ) message -- String , Buffer , Array or Uint8Array returns String Usage var md5 = require ( 'md5' ); console . log ( md5 ( 'message' )); This will print the following 78e731027d8fd50ed642340b7c9a63b3 It supports buffers, too var fs = require ( 'fs' ); var md5 = require ( 'md5' ); fs . readFile ( 'example.txt' , function ( err , buf ) { console . log ( md5 ( buf )); }); Versions Before version 2.0.0 there were two packages called md5 on npm, one lowercase, one uppercase (the one you're looking at). As of version 2.0.0, all new versions of this module will go to lowercase md5 on npm. To use the correct version, users of this module will have to change their code from require('MD5') to require('md5') if they want to use versions >= 2.0.0. Bugs and Issues If you encounter any bugs or issues, feel free to open an issue at github . Credits This package is based on the work of Jeff Mott, who did a pure JS implementation of the MD5 algorithm that was published by Ronald L. Rivest in 1991. I needed a npm package of the algorithm, so I used Jeff\u2019s implementation for this package. The original implementation can be found in the CryptoJS project. License Copyright \u00a9 2011-2015, Paul Vorbach. Copyright \u00a9 2009, Jeff Mott. All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. * Neither the name Crypto-JS nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"MD5"},{"location":"node_modules/md5/#md5","text":"a JavaScript function for hashing messages with MD5. node-md5 is being sponsored by the following tool; please help to support us by taking a look and signing up to a free trial","title":"MD5"},{"location":"node_modules/md5/#installation","text":"You can use this package on the server side as well as the client side.","title":"Installation"},{"location":"node_modules/md5/#nodejs","text":"npm install md5","title":"Node.js:"},{"location":"node_modules/md5/#api","text":"md5 ( message ) message -- String , Buffer , Array or Uint8Array returns String","title":"API"},{"location":"node_modules/md5/#usage","text":"var md5 = require ( 'md5' ); console . log ( md5 ( 'message' )); This will print the following 78e731027d8fd50ed642340b7c9a63b3 It supports buffers, too var fs = require ( 'fs' ); var md5 = require ( 'md5' ); fs . readFile ( 'example.txt' , function ( err , buf ) { console . log ( md5 ( buf )); });","title":"Usage"},{"location":"node_modules/md5/#versions","text":"Before version 2.0.0 there were two packages called md5 on npm, one lowercase, one uppercase (the one you're looking at). As of version 2.0.0, all new versions of this module will go to lowercase md5 on npm. To use the correct version, users of this module will have to change their code from require('MD5') to require('md5') if they want to use versions >= 2.0.0.","title":"Versions"},{"location":"node_modules/md5/#bugs-and-issues","text":"If you encounter any bugs or issues, feel free to open an issue at github .","title":"Bugs and Issues"},{"location":"node_modules/md5/#credits","text":"This package is based on the work of Jeff Mott, who did a pure JS implementation of the MD5 algorithm that was published by Ronald L. Rivest in 1991. I needed a npm package of the algorithm, so I used Jeff\u2019s implementation for this package. The original implementation can be found in the CryptoJS project.","title":"Credits"},{"location":"node_modules/md5/#license","text":"Copyright \u00a9 2011-2015, Paul Vorbach. Copyright \u00a9 2009, Jeff Mott. All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. * Neither the name Crypto-JS nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"License"},{"location":"node_modules/mdast-util-find-and-replace/readme/","text":"mdast-util-find-and-replace mdast utility to find and replace text in a tree . Install npm : npm install mdast-util-find-and-replace Use var u = require ( 'unist-builder' ) var inspect = require ( 'unist-util-inspect' ) var findAndReplace = require ( 'mdast-util-find-and-replace' ) var tree = u ( 'paragraph' , [ u ( 'text' , 'Some ' ), u ( 'emphasis' , [ u ( 'text' , 'emphasis' )]), u ( 'text' , ' and ' ), u ( 'strong' , [ u ( 'text' , 'importance' )]), u ( 'text' , '.' ) ]) findAndReplace ( tree , 'and' , 'or' ) findAndReplace ( tree , { emphasis : 'em' , importance : 'strong' }) findAndReplace ( tree , { Some : function ( $0 ) { return u ( 'link' , { url : '//example.com#' + $0 }, [ u ( 'text' , $0 )]) } }) console . log ( inspect ( tree )) Yields: paragraph[8] \u251c\u2500 link[1] [url=\"//example.com#Some\"] \u2502 \u2514\u2500 text: \"Some\" \u251c\u2500 text: \" \" \u251c\u2500 emphasis[1] \u2502 \u2514\u2500 text: \"em\" \u251c\u2500 text: \" \" \u251c\u2500 text: \"or\" \u251c\u2500 text: \" \" \u251c\u2500 strong[1] \u2502 \u2514\u2500 text: \"strong\" \u2514\u2500 text: \".\" API findAndReplace(tree, find[, replace][, options]) Find and replace text in mdast tree s. The algorithm searches the tree in preorder for complete values in Text nodes. Partial matches are not supported. Signatures findAndReplace(tree, find, replace?[, options]) findAndReplace(tree, search[, options]) Parameters tree ( Node ) \u2014 mdast tree find ( string or RegExp ) \u2014 Value to find and remove. When string , escaped and made into a global RegExp replace ( string or Function ) \u2014 Value to insert. When string , turned into a Text node. When Function , invoked with the results of calling RegExp.exec as arguments, in which case it can return a single or a list of Node , a string (which is wrapped in a Text node), or false to not replace search ( Object or Array ) \u2014 Perform multiple find-and-replaces. When Array , each entry is a tuple ( Array ) of a find (at 0 ) and replace (at 1 ). When Object , each key is a find (in string form) and each value is a replace options.ignore ( Test , default: [] ) \u2014 Any unist-util-is compatible test. Returns The given, modified, tree . Security Use of mdast-util-find-and-replace does not involve hast or user content so there are no openings for cross-site scripting (XSS) attacks. Related hast-util-find-and-replace \u2014 hast utility to find and replace text unist-util-select \u2014 select unist nodes with CSS-like selectors Contribute See contributing.md in syntax-tree/.github for ways to get started. See support.md for ways to get help. This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms. License MIT \u00a9 Titus Wormer","title":"mdast-util-find-and-replace"},{"location":"node_modules/mdast-util-find-and-replace/readme/#mdast-util-find-and-replace","text":"mdast utility to find and replace text in a tree .","title":"mdast-util-find-and-replace"},{"location":"node_modules/mdast-util-find-and-replace/readme/#install","text":"npm : npm install mdast-util-find-and-replace","title":"Install"},{"location":"node_modules/mdast-util-find-and-replace/readme/#use","text":"var u = require ( 'unist-builder' ) var inspect = require ( 'unist-util-inspect' ) var findAndReplace = require ( 'mdast-util-find-and-replace' ) var tree = u ( 'paragraph' , [ u ( 'text' , 'Some ' ), u ( 'emphasis' , [ u ( 'text' , 'emphasis' )]), u ( 'text' , ' and ' ), u ( 'strong' , [ u ( 'text' , 'importance' )]), u ( 'text' , '.' ) ]) findAndReplace ( tree , 'and' , 'or' ) findAndReplace ( tree , { emphasis : 'em' , importance : 'strong' }) findAndReplace ( tree , { Some : function ( $0 ) { return u ( 'link' , { url : '//example.com#' + $0 }, [ u ( 'text' , $0 )]) } }) console . log ( inspect ( tree )) Yields: paragraph[8] \u251c\u2500 link[1] [url=\"//example.com#Some\"] \u2502 \u2514\u2500 text: \"Some\" \u251c\u2500 text: \" \" \u251c\u2500 emphasis[1] \u2502 \u2514\u2500 text: \"em\" \u251c\u2500 text: \" \" \u251c\u2500 text: \"or\" \u251c\u2500 text: \" \" \u251c\u2500 strong[1] \u2502 \u2514\u2500 text: \"strong\" \u2514\u2500 text: \".\"","title":"Use"},{"location":"node_modules/mdast-util-find-and-replace/readme/#api","text":"","title":"API"},{"location":"node_modules/mdast-util-find-and-replace/readme/#findandreplacetree-find-replace-options","text":"Find and replace text in mdast tree s. The algorithm searches the tree in preorder for complete values in Text nodes. Partial matches are not supported.","title":"findAndReplace(tree, find[, replace][, options])"},{"location":"node_modules/mdast-util-find-and-replace/readme/#signatures","text":"findAndReplace(tree, find, replace?[, options]) findAndReplace(tree, search[, options])","title":"Signatures"},{"location":"node_modules/mdast-util-find-and-replace/readme/#parameters","text":"tree ( Node ) \u2014 mdast tree find ( string or RegExp ) \u2014 Value to find and remove. When string , escaped and made into a global RegExp replace ( string or Function ) \u2014 Value to insert. When string , turned into a Text node. When Function , invoked with the results of calling RegExp.exec as arguments, in which case it can return a single or a list of Node , a string (which is wrapped in a Text node), or false to not replace search ( Object or Array ) \u2014 Perform multiple find-and-replaces. When Array , each entry is a tuple ( Array ) of a find (at 0 ) and replace (at 1 ). When Object , each key is a find (in string form) and each value is a replace options.ignore ( Test , default: [] ) \u2014 Any unist-util-is compatible test.","title":"Parameters"},{"location":"node_modules/mdast-util-find-and-replace/readme/#returns","text":"The given, modified, tree .","title":"Returns"},{"location":"node_modules/mdast-util-find-and-replace/readme/#security","text":"Use of mdast-util-find-and-replace does not involve hast or user content so there are no openings for cross-site scripting (XSS) attacks.","title":"Security"},{"location":"node_modules/mdast-util-find-and-replace/readme/#related","text":"hast-util-find-and-replace \u2014 hast utility to find and replace text unist-util-select \u2014 select unist nodes with CSS-like selectors","title":"Related"},{"location":"node_modules/mdast-util-find-and-replace/readme/#contribute","text":"See contributing.md in syntax-tree/.github for ways to get started. See support.md for ways to get help. This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms.","title":"Contribute"},{"location":"node_modules/mdast-util-find-and-replace/readme/#license","text":"MIT \u00a9 Titus Wormer","title":"License"},{"location":"node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/readme/","text":"escape-string-regexp Escape RegExp special characters Install $ npm install escape-string-regexp Usage const escapeStringRegexp = require ( 'escape-string-regexp' ); const escapedString = escapeStringRegexp ( 'How much $ for a \ud83e\udd84?' ); //=> 'How much \\\\$ for a \ud83e\udd84\\\\?' new RegExp ( escapedString ); You can also use this to escape a string that is inserted into the middle of a regex, for example, into a character class. Get professional support for this package with a Tidelift subscription Tidelift helps make open source sustainable for maintainers while giving companies assurances about security, maintenance, and licensing for their dependencies.","title":"escape-string-regexp [![Build Status](https://travis-ci.org/sindresorhus/escape-string-regexp.svg?branch=master)](https://travis-ci.org/sindresorhus/escape-string-regexp)"},{"location":"node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/readme/#escape-string-regexp","text":"Escape RegExp special characters","title":"escape-string-regexp"},{"location":"node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/readme/#install","text":"$ npm install escape-string-regexp","title":"Install"},{"location":"node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/readme/#usage","text":"const escapeStringRegexp = require ( 'escape-string-regexp' ); const escapedString = escapeStringRegexp ( 'How much $ for a \ud83e\udd84?' ); //=> 'How much \\\\$ for a \ud83e\udd84\\\\?' new RegExp ( escapedString ); You can also use this to escape a string that is inserted into the middle of a regex, for example, into a character class. Get professional support for this package with a Tidelift subscription Tidelift helps make open source sustainable for maintainers while giving companies assurances about security, maintenance, and licensing for their dependencies.","title":"Usage"},{"location":"node_modules/mdast-util-footnote/readme/","text":"mdast-util-footnote Extension for mdast-util-from-markdown and/or mdast-util-to-markdown to support footnotes in mdast . When parsing ( from-markdown ), must be combined with micromark-extension-footnote . You probably shouldn\u2019t use this package directly, but instead use remark-footnotes with remark . Install npm : npm install mdast-util-footnote Use Say we have the following file, example.md : Here is a footnote call,[^1] and another.[^longnote] [ ^1 ]: Here is the footnote. [ ^longnote ]: Here\u2019s one with multiple blocks. Subsequent paragraphs are indented to show that they belong to the previous footnote. { some.code } The whole paragraph can be indented, or just the first line. In this way, multi-paragraph footnotes work like multi-paragraph list items. This paragraph won\u2019t be part of the note, because it isn\u2019t indented. Here is an inline note.^[Inlines notes are easier to write, since you don\u2019t have to pick an identifier and move down to type the note.] And our script, example.js , looks as follows: var fs = require ( 'fs' ) var fromMarkdown = require ( 'mdast-util-from-markdown' ) var toMarkdown = require ( 'mdast-util-to-markdown' ) var syntax = require ( 'micromark-extension-footnote' ) var footnote = require ( 'mdast-util-footnote' ) var doc = fs . readFileSync ( 'example.md' ) var tree = fromMarkdown ( doc , { extensions : [ syntax ({ inlineNotes : true })], mdastExtensions : [ footnote . fromMarkdown ] }) console . log ( tree ) var out = toMarkdown ( tree , { extensions : [ footnote . toMarkdown ]}) console . log ( out ) Now, running node example yields: { type : 'root' , children : [ { type : 'paragraph' , children : [ { type : 'text' , value : 'Here is a footnote call,' }, { type : 'footnoteReference' , identifier : '1' , label : '1' }, { type : 'text' , value : ' and another.' }, { type : 'footnoteReference' , identifier : 'longnote' , label : 'longnote' } ] }, { type : 'footnoteDefinition' , identifier : '1' , label : '1' , children : [ { type : 'paragraph' , children : [{ type : 'text' , value : 'Here is the footnote.' }] } ] }, { type : 'footnoteDefinition' , identifier : 'longnote' , label : 'longnote' , children : [ { type : 'paragraph' , children : [{ type : 'text' , value : 'Here\u2019s one with multiple blocks.' }] }, { type : 'paragraph' , children : [ { type : 'text' , value : 'Subsequent paragraphs are indented to show that they\\nbelong to the previous footnote.' } ] }, { type : 'code' , value : '{ some.code }' }, { type : 'paragraph' , children : [ { type : 'text' , value : 'The whole paragraph can be indented, or just the first\\nline. In this way, multi-paragraph footnotes work like\\nmulti-paragraph list items.' } ] } ] }, { type : 'paragraph' , children : [ { type : 'text' , value : 'This paragraph won\u2019t be part of the note, because it\\nisn\u2019t indented.' } ] }, { type : 'paragraph' , children : [ { type : 'text' , value : 'Here is an inline note.' }, { type : 'footnote' , children : [ { type : 'text' , value : 'Inlines notes are easier to write, since\\nyou don\u2019t have to pick an identifier and move down to type the\\nnote.' } ] } ] } ] } Here is a footnote call,[^1] and another.[^longnote] [ ^1 ]: Here is the footnote. [ ^longnote ]: Here\u2019s one with multiple blocks. Subsequent paragraphs are indented to show that they belong to the previous footnote. { some.code } The whole paragraph can be indented, or just the first line. In this way, multi-paragraph footnotes work like multi-paragraph list items. This paragraph won\u2019t be part of the note, because it isn\u2019t indented. Here is an inline note.^[Inlines notes are easier to write, since you don\u2019t have to pick an identifier and move down to type the note.] API footnote.fromMarkdown footnote.toMarkdown Note: the separate extensions are also available at mdast-util-footnote/from-markdown and mdast-util-footnote/to-markdown . Support footnotes. These exports are extensions, respectively for mdast-util-from-markdown and mdast-util-to-markdown . Related remarkjs/remark \u2014 markdown processor powered by plugins remarkjs/remark-footnotes \u2014 remark plugin to support footnotes micromark/micromark \u2014 the smallest commonmark-compliant markdown parser that exists micromark/micromark-extension-footnote \u2014 micromark extension to parse footnotes syntax-tree/mdast-util-from-markdown \u2014 mdast parser using micromark to create mdast from markdown syntax-tree/mdast-util-to-markdown \u2014 mdast serializer to create markdown from mdast Contribute See contributing.md in syntax-tree/.github for ways to get started. See support.md for ways to get help. This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms. License MIT \u00a9 Titus Wormer","title":"mdast-util-footnote"},{"location":"node_modules/mdast-util-footnote/readme/#mdast-util-footnote","text":"Extension for mdast-util-from-markdown and/or mdast-util-to-markdown to support footnotes in mdast . When parsing ( from-markdown ), must be combined with micromark-extension-footnote . You probably shouldn\u2019t use this package directly, but instead use remark-footnotes with remark .","title":"mdast-util-footnote"},{"location":"node_modules/mdast-util-footnote/readme/#install","text":"npm : npm install mdast-util-footnote","title":"Install"},{"location":"node_modules/mdast-util-footnote/readme/#use","text":"Say we have the following file, example.md : Here is a footnote call,[^1] and another.[^longnote] [ ^1 ]: Here is the footnote. [ ^longnote ]: Here\u2019s one with multiple blocks. Subsequent paragraphs are indented to show that they belong to the previous footnote. { some.code } The whole paragraph can be indented, or just the first line. In this way, multi-paragraph footnotes work like multi-paragraph list items. This paragraph won\u2019t be part of the note, because it isn\u2019t indented. Here is an inline note.^[Inlines notes are easier to write, since you don\u2019t have to pick an identifier and move down to type the note.] And our script, example.js , looks as follows: var fs = require ( 'fs' ) var fromMarkdown = require ( 'mdast-util-from-markdown' ) var toMarkdown = require ( 'mdast-util-to-markdown' ) var syntax = require ( 'micromark-extension-footnote' ) var footnote = require ( 'mdast-util-footnote' ) var doc = fs . readFileSync ( 'example.md' ) var tree = fromMarkdown ( doc , { extensions : [ syntax ({ inlineNotes : true })], mdastExtensions : [ footnote . fromMarkdown ] }) console . log ( tree ) var out = toMarkdown ( tree , { extensions : [ footnote . toMarkdown ]}) console . log ( out ) Now, running node example yields: { type : 'root' , children : [ { type : 'paragraph' , children : [ { type : 'text' , value : 'Here is a footnote call,' }, { type : 'footnoteReference' , identifier : '1' , label : '1' }, { type : 'text' , value : ' and another.' }, { type : 'footnoteReference' , identifier : 'longnote' , label : 'longnote' } ] }, { type : 'footnoteDefinition' , identifier : '1' , label : '1' , children : [ { type : 'paragraph' , children : [{ type : 'text' , value : 'Here is the footnote.' }] } ] }, { type : 'footnoteDefinition' , identifier : 'longnote' , label : 'longnote' , children : [ { type : 'paragraph' , children : [{ type : 'text' , value : 'Here\u2019s one with multiple blocks.' }] }, { type : 'paragraph' , children : [ { type : 'text' , value : 'Subsequent paragraphs are indented to show that they\\nbelong to the previous footnote.' } ] }, { type : 'code' , value : '{ some.code }' }, { type : 'paragraph' , children : [ { type : 'text' , value : 'The whole paragraph can be indented, or just the first\\nline. In this way, multi-paragraph footnotes work like\\nmulti-paragraph list items.' } ] } ] }, { type : 'paragraph' , children : [ { type : 'text' , value : 'This paragraph won\u2019t be part of the note, because it\\nisn\u2019t indented.' } ] }, { type : 'paragraph' , children : [ { type : 'text' , value : 'Here is an inline note.' }, { type : 'footnote' , children : [ { type : 'text' , value : 'Inlines notes are easier to write, since\\nyou don\u2019t have to pick an identifier and move down to type the\\nnote.' } ] } ] } ] } Here is a footnote call,[^1] and another.[^longnote] [ ^1 ]: Here is the footnote. [ ^longnote ]: Here\u2019s one with multiple blocks. Subsequent paragraphs are indented to show that they belong to the previous footnote. { some.code } The whole paragraph can be indented, or just the first line. In this way, multi-paragraph footnotes work like multi-paragraph list items. This paragraph won\u2019t be part of the note, because it isn\u2019t indented. Here is an inline note.^[Inlines notes are easier to write, since you don\u2019t have to pick an identifier and move down to type the note.]","title":"Use"},{"location":"node_modules/mdast-util-footnote/readme/#api","text":"","title":"API"},{"location":"node_modules/mdast-util-footnote/readme/#footnotefrommarkdown","text":"","title":"footnote.fromMarkdown"},{"location":"node_modules/mdast-util-footnote/readme/#footnotetomarkdown","text":"Note: the separate extensions are also available at mdast-util-footnote/from-markdown and mdast-util-footnote/to-markdown . Support footnotes. These exports are extensions, respectively for mdast-util-from-markdown and mdast-util-to-markdown .","title":"footnote.toMarkdown"},{"location":"node_modules/mdast-util-footnote/readme/#related","text":"remarkjs/remark \u2014 markdown processor powered by plugins remarkjs/remark-footnotes \u2014 remark plugin to support footnotes micromark/micromark \u2014 the smallest commonmark-compliant markdown parser that exists micromark/micromark-extension-footnote \u2014 micromark extension to parse footnotes syntax-tree/mdast-util-from-markdown \u2014 mdast parser using micromark to create mdast from markdown syntax-tree/mdast-util-to-markdown \u2014 mdast serializer to create markdown from mdast","title":"Related"},{"location":"node_modules/mdast-util-footnote/readme/#contribute","text":"See contributing.md in syntax-tree/.github for ways to get started. See support.md for ways to get help. This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms.","title":"Contribute"},{"location":"node_modules/mdast-util-footnote/readme/#license","text":"MIT \u00a9 Titus Wormer","title":"License"},{"location":"node_modules/mdast-util-from-markdown/readme/","text":"mdast-util-from-markdown mdast utility to parse markdown. Install npm : npm install mdast-util-from-markdown Use Say we have the following markdown file, example.md : ## Hello, *World*! And our script, example.js , looks as follows: var fs = require ( 'fs' ) var fromMarkdown = require ( 'mdast-util-from-markdown' ) var doc = fs . readFileSync ( 'example.md' ) var tree = fromMarkdown ( doc ) console . log ( tree ) Now, running node example yields (positional info removed for brevity): { type : 'root' , children : [ { type : 'heading' , depth : 2 , children : [ { type : 'text' , value : 'Hello, ' }, { type : 'emphasis' , children : [{ type : 'text' , value : 'World' }] }, { type : 'text' , value : '!' } ] } ] } API fromMarkdown(doc[, encoding][, options]) Parse markdown to a mdast tree. Parameters doc Value to parse ( string or Buffer ). encoding Character encoding to understand doc as when it\u2019s a Buffer ( string , default: 'utf8' ). options.extensions Array of syntax extensions ( Array.<MicromarkSyntaxExtension> , default: [] ). Passed to micromark as extensions . options.mdastExtensions Array of mdast extensions ( Array.<MdastExtension> , default: [] ). Returns Root . List of extensions syntax-tree/mdast-util-directive \u2014 parse directives syntax-tree/mdast-util-footnote \u2014 parse footnotes syntax-tree/mdast-util-frontmatter \u2014 parse frontmatter (YAML, TOML, more) syntax-tree/mdast-util-gfm \u2014 parse GFM syntax-tree/mdast-util-gfm-autolink-literal \u2014 parse GFM autolink literals syntax-tree/mdast-util-gfm-strikethrough \u2014 parse GFM strikethrough syntax-tree/mdast-util-gfm-table \u2014 parse GFM tables syntax-tree/mdast-util-gfm-task-list-item \u2014 parse GFM task list items syntax-tree/mdast-util-math \u2014 parse math syntax-tree/mdast-util-mdx \u2014 parse MDX or MDX.js syntax-tree/mdast-util-mdx-expression \u2014 parse MDX or MDX.js expressions syntax-tree/mdast-util-mdx-jsx \u2014 parse MDX or MDX.js JSX syntax-tree/mdast-util-mdxjs-esm \u2014 parse MDX.js ESM Security As Markdown is sometimes used for HTML, and improper use of HTML can open you up to a cross-site scripting (XSS) attack, use of mdast-util-from-markdown can also be unsafe. When going to HTML, use this utility in combination with hast-util-sanitize to make the tree safe. Related micromark/micromark \u2014 the smallest commonmark-compliant markdown parser that exists remarkjs/remark \u2014 markdown processor powered by plugins syntax-tree/mdast-util-to-markdown \u2014 serialize mdast to markdown Contribute See contributing.md in syntax-tree/.github for ways to get started. See support.md for ways to get help. This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms. License MIT \u00a9 Titus Wormer","title":"mdast-util-from-markdown"},{"location":"node_modules/mdast-util-from-markdown/readme/#mdast-util-from-markdown","text":"mdast utility to parse markdown.","title":"mdast-util-from-markdown"},{"location":"node_modules/mdast-util-from-markdown/readme/#install","text":"npm : npm install mdast-util-from-markdown","title":"Install"},{"location":"node_modules/mdast-util-from-markdown/readme/#use","text":"Say we have the following markdown file, example.md : ## Hello, *World*! And our script, example.js , looks as follows: var fs = require ( 'fs' ) var fromMarkdown = require ( 'mdast-util-from-markdown' ) var doc = fs . readFileSync ( 'example.md' ) var tree = fromMarkdown ( doc ) console . log ( tree ) Now, running node example yields (positional info removed for brevity): { type : 'root' , children : [ { type : 'heading' , depth : 2 , children : [ { type : 'text' , value : 'Hello, ' }, { type : 'emphasis' , children : [{ type : 'text' , value : 'World' }] }, { type : 'text' , value : '!' } ] } ] }","title":"Use"},{"location":"node_modules/mdast-util-from-markdown/readme/#api","text":"","title":"API"},{"location":"node_modules/mdast-util-from-markdown/readme/#frommarkdowndoc-encoding-options","text":"Parse markdown to a mdast tree.","title":"fromMarkdown(doc[, encoding][, options])"},{"location":"node_modules/mdast-util-from-markdown/readme/#parameters","text":"","title":"Parameters"},{"location":"node_modules/mdast-util-from-markdown/readme/#doc","text":"Value to parse ( string or Buffer ).","title":"doc"},{"location":"node_modules/mdast-util-from-markdown/readme/#encoding","text":"Character encoding to understand doc as when it\u2019s a Buffer ( string , default: 'utf8' ).","title":"encoding"},{"location":"node_modules/mdast-util-from-markdown/readme/#optionsextensions","text":"Array of syntax extensions ( Array.<MicromarkSyntaxExtension> , default: [] ). Passed to micromark as extensions .","title":"options.extensions"},{"location":"node_modules/mdast-util-from-markdown/readme/#optionsmdastextensions","text":"Array of mdast extensions ( Array.<MdastExtension> , default: [] ).","title":"options.mdastExtensions"},{"location":"node_modules/mdast-util-from-markdown/readme/#returns","text":"Root .","title":"Returns"},{"location":"node_modules/mdast-util-from-markdown/readme/#list-of-extensions","text":"syntax-tree/mdast-util-directive \u2014 parse directives syntax-tree/mdast-util-footnote \u2014 parse footnotes syntax-tree/mdast-util-frontmatter \u2014 parse frontmatter (YAML, TOML, more) syntax-tree/mdast-util-gfm \u2014 parse GFM syntax-tree/mdast-util-gfm-autolink-literal \u2014 parse GFM autolink literals syntax-tree/mdast-util-gfm-strikethrough \u2014 parse GFM strikethrough syntax-tree/mdast-util-gfm-table \u2014 parse GFM tables syntax-tree/mdast-util-gfm-task-list-item \u2014 parse GFM task list items syntax-tree/mdast-util-math \u2014 parse math syntax-tree/mdast-util-mdx \u2014 parse MDX or MDX.js syntax-tree/mdast-util-mdx-expression \u2014 parse MDX or MDX.js expressions syntax-tree/mdast-util-mdx-jsx \u2014 parse MDX or MDX.js JSX syntax-tree/mdast-util-mdxjs-esm \u2014 parse MDX.js ESM","title":"List of extensions"},{"location":"node_modules/mdast-util-from-markdown/readme/#security","text":"As Markdown is sometimes used for HTML, and improper use of HTML can open you up to a cross-site scripting (XSS) attack, use of mdast-util-from-markdown can also be unsafe. When going to HTML, use this utility in combination with hast-util-sanitize to make the tree safe.","title":"Security"},{"location":"node_modules/mdast-util-from-markdown/readme/#related","text":"micromark/micromark \u2014 the smallest commonmark-compliant markdown parser that exists remarkjs/remark \u2014 markdown processor powered by plugins syntax-tree/mdast-util-to-markdown \u2014 serialize mdast to markdown","title":"Related"},{"location":"node_modules/mdast-util-from-markdown/readme/#contribute","text":"See contributing.md in syntax-tree/.github for ways to get started. See support.md for ways to get help. This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms.","title":"Contribute"},{"location":"node_modules/mdast-util-from-markdown/readme/#license","text":"MIT \u00a9 Titus Wormer","title":"License"},{"location":"node_modules/mdast-util-frontmatter/readme/","text":"mdast-util-frontmatter Extension for mdast-util-from-markdown and/or mdast-util-to-markdown to support frontmatter in mdast . When parsing ( from-markdown ), must be combined with micromark-extension-frontmatter . You probably shouldn\u2019t use this package directly, but instead use remark-frontmatter with remark . Install npm : npm install mdast-util-frontmatter Use Say we have the following file, example.md : +++ title = \"New Website\" +++ # Other markdown And our script, example.js , looks as follows: var fs = require ( 'fs' ) var fromMarkdown = require ( 'mdast-util-from-markdown' ) var toMarkdown = require ( 'mdast-util-to-markdown' ) var syntax = require ( 'micromark-extension-frontmatter' ) var frontmatter = require ( 'mdast-util-frontmatter' ) var doc = fs . readFileSync ( 'example.md' ) var tree = fromMarkdown ( doc , { extensions : [ syntax ([ 'yaml' , 'toml' ])], mdastExtensions : [ frontmatter . fromMarkdown ([ 'yaml' , 'toml' ])] }) console . log ( tree ) var out = toMarkdown ({ extensions : [ frontmatter . toMarkdown ([ 'yaml' , 'toml' ])]}) console . log ( out ) Now, running node example yields: { type : 'root' , children : [ { type : 'toml' , value : 'title = \"New Website\"' }, { type : 'heading' , depth : 1 , children : [{ type : 'text' , value : 'Other markdown' }] } ] } +++ title = \"New Website\" +++ # Other markdown API frontmatter.fromMarkdown([options]) frontmatter.toMarkdown([options]) Note: the separate extensions are also available at mdast-util-frontmatter/from-markdown and mdast-util-frontmatter/to-markdown . Support frontmatter (YAML, TOML, and more). These functions can be called with options and return extensions, respectively for mdast-util-from-markdown and mdast-util-to-markdown . Options are the same as micromark-extension-frontmatter . Related remarkjs/remark \u2014 markdown processor powered by plugins remarkjs/remark-frontmatter \u2014 remark plugin to support frontmatter micromark/micromark \u2014 the smallest commonmark-compliant markdown parser that exists micromark/micromark-extension-frontmatter \u2014 micromark extension to parse frontmatter syntax-tree/mdast-util-from-markdown \u2014 mdast parser using micromark to create mdast from markdown syntax-tree/mdast-util-to-markdown \u2014 mdast serializer to create markdown from mdast Contribute See contributing.md in syntax-tree/.github for ways to get started. See support.md for ways to get help. This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms. License MIT \u00a9 Titus Wormer","title":"mdast-util-frontmatter"},{"location":"node_modules/mdast-util-frontmatter/readme/#mdast-util-frontmatter","text":"Extension for mdast-util-from-markdown and/or mdast-util-to-markdown to support frontmatter in mdast . When parsing ( from-markdown ), must be combined with micromark-extension-frontmatter . You probably shouldn\u2019t use this package directly, but instead use remark-frontmatter with remark .","title":"mdast-util-frontmatter"},{"location":"node_modules/mdast-util-frontmatter/readme/#install","text":"npm : npm install mdast-util-frontmatter","title":"Install"},{"location":"node_modules/mdast-util-frontmatter/readme/#use","text":"Say we have the following file, example.md : +++ title = \"New Website\" +++ # Other markdown And our script, example.js , looks as follows: var fs = require ( 'fs' ) var fromMarkdown = require ( 'mdast-util-from-markdown' ) var toMarkdown = require ( 'mdast-util-to-markdown' ) var syntax = require ( 'micromark-extension-frontmatter' ) var frontmatter = require ( 'mdast-util-frontmatter' ) var doc = fs . readFileSync ( 'example.md' ) var tree = fromMarkdown ( doc , { extensions : [ syntax ([ 'yaml' , 'toml' ])], mdastExtensions : [ frontmatter . fromMarkdown ([ 'yaml' , 'toml' ])] }) console . log ( tree ) var out = toMarkdown ({ extensions : [ frontmatter . toMarkdown ([ 'yaml' , 'toml' ])]}) console . log ( out ) Now, running node example yields: { type : 'root' , children : [ { type : 'toml' , value : 'title = \"New Website\"' }, { type : 'heading' , depth : 1 , children : [{ type : 'text' , value : 'Other markdown' }] } ] } +++ title = \"New Website\" +++ # Other markdown","title":"Use"},{"location":"node_modules/mdast-util-frontmatter/readme/#api","text":"","title":"API"},{"location":"node_modules/mdast-util-frontmatter/readme/#frontmatterfrommarkdownoptions","text":"","title":"frontmatter.fromMarkdown([options])"},{"location":"node_modules/mdast-util-frontmatter/readme/#frontmattertomarkdownoptions","text":"Note: the separate extensions are also available at mdast-util-frontmatter/from-markdown and mdast-util-frontmatter/to-markdown . Support frontmatter (YAML, TOML, and more). These functions can be called with options and return extensions, respectively for mdast-util-from-markdown and mdast-util-to-markdown . Options are the same as micromark-extension-frontmatter .","title":"frontmatter.toMarkdown([options])"},{"location":"node_modules/mdast-util-frontmatter/readme/#related","text":"remarkjs/remark \u2014 markdown processor powered by plugins remarkjs/remark-frontmatter \u2014 remark plugin to support frontmatter micromark/micromark \u2014 the smallest commonmark-compliant markdown parser that exists micromark/micromark-extension-frontmatter \u2014 micromark extension to parse frontmatter syntax-tree/mdast-util-from-markdown \u2014 mdast parser using micromark to create mdast from markdown syntax-tree/mdast-util-to-markdown \u2014 mdast serializer to create markdown from mdast","title":"Related"},{"location":"node_modules/mdast-util-frontmatter/readme/#contribute","text":"See contributing.md in syntax-tree/.github for ways to get started. See support.md for ways to get help. This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms.","title":"Contribute"},{"location":"node_modules/mdast-util-frontmatter/readme/#license","text":"MIT \u00a9 Titus Wormer","title":"License"},{"location":"node_modules/mdast-util-gfm/readme/","text":"mdast-util-gfm Extension for mdast-util-from-markdown and/or mdast-util-to-markdown to support GitHub flavored markdown in mdast . When parsing ( from-markdown ), must be combined with micromark-extension-gfm . You probably shouldn\u2019t use this package directly, but instead use remark-gfm with remark . Alternatively, the extensions can be used separately: syntax-tree/mdast-util-gfm-autolink-literal \u2014 support GFM autolink literals syntax-tree/mdast-util-gfm-strikethrough \u2014 support GFM strikethrough syntax-tree/mdast-util-gfm-table \u2014 support GFM tables syntax-tree/mdast-util-gfm-task-list-item \u2014 support GFM tasklists Install npm : npm install mdast-util-gfm Use Say we have the following file, example.md : # GFM ## Autolink literals www.example.com, https://example.com, and contact@example.com. ## Strikethrough ~one~ or ~~two~~ tildes. ## Table | a | b | c | d | | - | :- | -: | :-: | ## Tasklist * [ ] to do * [x] done And our script, example.js , looks as follows: var fs = require ( 'fs' ) var fromMarkdown = require ( 'mdast-util-from-markdown' ) var toMarkdown = require ( 'mdast-util-to-markdown' ) var syntax = require ( 'micromark-extension-gfm' ) var gfm = require ( 'mdast-util-gfm' ) var doc = fs . readFileSync ( 'example.md' ) var tree = fromMarkdown ( doc , { extensions : [ syntax ()], mdastExtensions : [ gfm . fromMarkdown ] }) console . log ( tree ) var out = toMarkdown ( tree , { extensions : [ gfm . toMarkdown ()]}) console . log ( out ) Now, running node example yields: { type : 'root' , children : [ { type : 'heading' , depth : 1 , children : [{ type : 'text' , value : 'GFM' }]}, { type : 'heading' , depth : 2 , children : [{ type : 'text' , value : 'Autolink literals' }] }, { type : 'paragraph' , children : [ { type : 'link' , title : null , url : 'http://www.example.com' , children : [{ type : 'text' , value : 'www.example.com' }] }, { type : 'text' , value : ', ' }, { type : 'link' , title : null , url : 'https://example.com' , children : [{ type : 'text' , value : 'https://example.com' }] }, { type : 'text' , value : ', and ' }, { type : 'link' , title : null , url : 'mailto:contact@example.com' , children : [{ type : 'text' , value : 'contact@example.com' }] }, { type : 'text' , value : '.' } ] }, { type : 'heading' , depth : 2 , children : [{ type : 'text' , value : 'Strikethrough' }] }, { type : 'paragraph' , children : [ { type : 'delete' , children : [{ type : 'text' , value : 'one' }] }, { type : 'text' , value : ' or ' }, { type : 'delete' , children : [{ type : 'text' , value : 'two' }] }, { type : 'text' , value : ' tildes.' } ] }, { type : 'heading' , depth : 2 , children : [{ type : 'text' , value : 'Table' }]}, { type : 'table' , align : [ null , 'left' , 'right' , 'center' ], children : [ { type : 'tableRow' , children : [ { type : 'tableCell' , children : [{ type : 'text' , value : 'a' }]}, { type : 'tableCell' , children : [{ type : 'text' , value : 'b' }]}, { type : 'tableCell' , children : [{ type : 'text' , value : 'c' }]}, { type : 'tableCell' , children : [{ type : 'text' , value : 'd' }]} ] } ] }, { type : 'heading' , depth : 2 , children : [{ type : 'text' , value : 'Tasklist' }]}, { type : 'list' , ordered : false , start : null , spread : false , children : [ { type : 'listItem' , spread : false , checked : false , children : [ { type : 'paragraph' , children : [{ type : 'text' , value : 'to do' }]} ] }, { type : 'listItem' , spread : false , checked : true , children : [ { type : 'paragraph' , children : [{ type : 'text' , value : 'done' }]} ] } ] } ] } # GFM ## Autolink literals [ www.example.com ]( http://www.example.com ), <https://example.com>, and <contact@example.com>. ## Strikethrough ~~one~~ or ~~two~~ tildes. ## Table | a | b | c | d | | - | :- | -: | :-: | ## Tasklist * [ ] to do * [x] done API gfm.fromMarkdown gfm.toMarkdown(options?) Note: the separate extensions are also available at mdast-util-gfm/from-markdown and mdast-util-gfm/to-markdown . Support GFM. The exports of fromMarkdown is an extension for mdast-util-from-markdown . The export of toMarkdown is a function that can be called with options and returns an extension for mdast-util-to-markdown . options Passed as options to mdast-util-gfm-table . The exports are extensions, respectively for mdast-util-from-markdown and mdast-util-to-markdown . Related remarkjs/remark \u2014 markdown processor powered by plugins remarkjs/remark-gfm \u2014 remark plugin to support GFM micromark/micromark \u2014 the smallest commonmark-compliant markdown parser that exists micromark/micromark-extension-gfm \u2014 micromark extension to parse GFM syntax-tree/mdast-util-from-markdown \u2014 mdast parser using micromark to create mdast from markdown syntax-tree/mdast-util-to-markdown \u2014 mdast serializer to create markdown from mdast Contribute See contributing.md in syntax-tree/.github for ways to get started. See support.md for ways to get help. This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms. License MIT \u00a9 Titus Wormer","title":"mdast-util-gfm"},{"location":"node_modules/mdast-util-gfm/readme/#mdast-util-gfm","text":"Extension for mdast-util-from-markdown and/or mdast-util-to-markdown to support GitHub flavored markdown in mdast . When parsing ( from-markdown ), must be combined with micromark-extension-gfm . You probably shouldn\u2019t use this package directly, but instead use remark-gfm with remark . Alternatively, the extensions can be used separately: syntax-tree/mdast-util-gfm-autolink-literal \u2014 support GFM autolink literals syntax-tree/mdast-util-gfm-strikethrough \u2014 support GFM strikethrough syntax-tree/mdast-util-gfm-table \u2014 support GFM tables syntax-tree/mdast-util-gfm-task-list-item \u2014 support GFM tasklists","title":"mdast-util-gfm"},{"location":"node_modules/mdast-util-gfm/readme/#install","text":"npm : npm install mdast-util-gfm","title":"Install"},{"location":"node_modules/mdast-util-gfm/readme/#use","text":"Say we have the following file, example.md : # GFM ## Autolink literals www.example.com, https://example.com, and contact@example.com. ## Strikethrough ~one~ or ~~two~~ tildes. ## Table | a | b | c | d | | - | :- | -: | :-: | ## Tasklist * [ ] to do * [x] done And our script, example.js , looks as follows: var fs = require ( 'fs' ) var fromMarkdown = require ( 'mdast-util-from-markdown' ) var toMarkdown = require ( 'mdast-util-to-markdown' ) var syntax = require ( 'micromark-extension-gfm' ) var gfm = require ( 'mdast-util-gfm' ) var doc = fs . readFileSync ( 'example.md' ) var tree = fromMarkdown ( doc , { extensions : [ syntax ()], mdastExtensions : [ gfm . fromMarkdown ] }) console . log ( tree ) var out = toMarkdown ( tree , { extensions : [ gfm . toMarkdown ()]}) console . log ( out ) Now, running node example yields: { type : 'root' , children : [ { type : 'heading' , depth : 1 , children : [{ type : 'text' , value : 'GFM' }]}, { type : 'heading' , depth : 2 , children : [{ type : 'text' , value : 'Autolink literals' }] }, { type : 'paragraph' , children : [ { type : 'link' , title : null , url : 'http://www.example.com' , children : [{ type : 'text' , value : 'www.example.com' }] }, { type : 'text' , value : ', ' }, { type : 'link' , title : null , url : 'https://example.com' , children : [{ type : 'text' , value : 'https://example.com' }] }, { type : 'text' , value : ', and ' }, { type : 'link' , title : null , url : 'mailto:contact@example.com' , children : [{ type : 'text' , value : 'contact@example.com' }] }, { type : 'text' , value : '.' } ] }, { type : 'heading' , depth : 2 , children : [{ type : 'text' , value : 'Strikethrough' }] }, { type : 'paragraph' , children : [ { type : 'delete' , children : [{ type : 'text' , value : 'one' }] }, { type : 'text' , value : ' or ' }, { type : 'delete' , children : [{ type : 'text' , value : 'two' }] }, { type : 'text' , value : ' tildes.' } ] }, { type : 'heading' , depth : 2 , children : [{ type : 'text' , value : 'Table' }]}, { type : 'table' , align : [ null , 'left' , 'right' , 'center' ], children : [ { type : 'tableRow' , children : [ { type : 'tableCell' , children : [{ type : 'text' , value : 'a' }]}, { type : 'tableCell' , children : [{ type : 'text' , value : 'b' }]}, { type : 'tableCell' , children : [{ type : 'text' , value : 'c' }]}, { type : 'tableCell' , children : [{ type : 'text' , value : 'd' }]} ] } ] }, { type : 'heading' , depth : 2 , children : [{ type : 'text' , value : 'Tasklist' }]}, { type : 'list' , ordered : false , start : null , spread : false , children : [ { type : 'listItem' , spread : false , checked : false , children : [ { type : 'paragraph' , children : [{ type : 'text' , value : 'to do' }]} ] }, { type : 'listItem' , spread : false , checked : true , children : [ { type : 'paragraph' , children : [{ type : 'text' , value : 'done' }]} ] } ] } ] } # GFM ## Autolink literals [ www.example.com ]( http://www.example.com ), <https://example.com>, and <contact@example.com>. ## Strikethrough ~~one~~ or ~~two~~ tildes. ## Table | a | b | c | d | | - | :- | -: | :-: | ## Tasklist * [ ] to do * [x] done","title":"Use"},{"location":"node_modules/mdast-util-gfm/readme/#api","text":"","title":"API"},{"location":"node_modules/mdast-util-gfm/readme/#gfmfrommarkdown","text":"","title":"gfm.fromMarkdown"},{"location":"node_modules/mdast-util-gfm/readme/#gfmtomarkdownoptions","text":"Note: the separate extensions are also available at mdast-util-gfm/from-markdown and mdast-util-gfm/to-markdown . Support GFM. The exports of fromMarkdown is an extension for mdast-util-from-markdown . The export of toMarkdown is a function that can be called with options and returns an extension for mdast-util-to-markdown .","title":"gfm.toMarkdown(options?)"},{"location":"node_modules/mdast-util-gfm/readme/#options","text":"Passed as options to mdast-util-gfm-table . The exports are extensions, respectively for mdast-util-from-markdown and mdast-util-to-markdown .","title":"options"},{"location":"node_modules/mdast-util-gfm/readme/#related","text":"remarkjs/remark \u2014 markdown processor powered by plugins remarkjs/remark-gfm \u2014 remark plugin to support GFM micromark/micromark \u2014 the smallest commonmark-compliant markdown parser that exists micromark/micromark-extension-gfm \u2014 micromark extension to parse GFM syntax-tree/mdast-util-from-markdown \u2014 mdast parser using micromark to create mdast from markdown syntax-tree/mdast-util-to-markdown \u2014 mdast serializer to create markdown from mdast","title":"Related"},{"location":"node_modules/mdast-util-gfm/readme/#contribute","text":"See contributing.md in syntax-tree/.github for ways to get started. See support.md for ways to get help. This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms.","title":"Contribute"},{"location":"node_modules/mdast-util-gfm/readme/#license","text":"MIT \u00a9 Titus Wormer","title":"License"},{"location":"node_modules/mdast-util-gfm-autolink-literal/readme/","text":"mdast-util-gfm-autolink-literal Extension for mdast-util-from-markdown and/or mdast-util-to-markdown to support GitHub flavored markdown autolink literals in mdast . When parsing ( from-markdown ), must be combined with micromark-extension-gfm-autolink-literal . You might want to use this package through remark-gfm with remark . Install npm : npm install mdast-util-gfm-autolink-literal Use Say our script, example.js , looks as follows: var fromMarkdown = require ( 'mdast-util-from-markdown' ) var toMarkdown = require ( 'mdast-util-to-markdown' ) var syntax = require ( 'micromark-extension-gfm-autolink-literal' ) var autolinkLiteral = require ( 'mdast-util-gfm-autolink-literal' ) var doc = 'www.example.com, https://example.com, and contact@example.com.' var tree = fromMarkdown ( doc , { extensions : [ syntax ], mdastExtensions : [ autolinkLiteral . fromMarkdown ] }) console . log ( tree ) var out = toMarkdown ( tree , { extensions : [ autolinkLiteral . toMarkdown ]}) console . log ( out ) Now, running node example yields: { type : 'root' , children : [ { type : 'paragraph' , children : [ { type : 'link' , title : null , url : 'http://www.example.com' , children : [{ type : 'text' , value : 'www.example.com' }] }, { type : 'text' , value : ', ' }, { type : 'link' , title : null , url : 'https://example.com' , children : [{ type : 'text' , value : 'https://example.com' }] }, { type : 'text' , value : ', and ' }, { type : 'link' , title : null , url : 'mailto:contact@example.com' , children : [{ type : 'text' , value : 'contact@example.com' }] }, { type : 'text' , value : '.' } ] } ] } [ www.example.com ]( http://www.example.com ), <https://example.com>, and <contact@example.com>. API autolinkLiteral.fromMarkdown autolinkLiteral.toMarkdown Note: the separate extensions are also available at mdast-util-gfm-autolink-literal/from-markdown and mdast-util-gfm-autolink-literal/to-markdown . Support literal autolinks. The exports are extensions, respectively for mdast-util-from-markdown and mdast-util-to-markdown . Related remarkjs/remark \u2014 markdown processor powered by plugins remarkjs/remark-gfm \u2014 remark plugin to support GFM micromark/micromark \u2014 the smallest commonmark-compliant markdown parser that exists micromark/micromark-extension-gfm-autolink-literal \u2014 micromark extension to parse GFM autolink literals syntax-tree/mdast-util-from-markdown \u2014 mdast parser using micromark to create mdast from markdown syntax-tree/mdast-util-to-markdown \u2014 mdast serializer to create markdown from mdast Contribute See contributing.md in syntax-tree/.github for ways to get started. See support.md for ways to get help. This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms. License MIT \u00a9 Titus Wormer","title":"mdast-util-gfm-autolink-literal"},{"location":"node_modules/mdast-util-gfm-autolink-literal/readme/#mdast-util-gfm-autolink-literal","text":"Extension for mdast-util-from-markdown and/or mdast-util-to-markdown to support GitHub flavored markdown autolink literals in mdast . When parsing ( from-markdown ), must be combined with micromark-extension-gfm-autolink-literal . You might want to use this package through remark-gfm with remark .","title":"mdast-util-gfm-autolink-literal"},{"location":"node_modules/mdast-util-gfm-autolink-literal/readme/#install","text":"npm : npm install mdast-util-gfm-autolink-literal","title":"Install"},{"location":"node_modules/mdast-util-gfm-autolink-literal/readme/#use","text":"Say our script, example.js , looks as follows: var fromMarkdown = require ( 'mdast-util-from-markdown' ) var toMarkdown = require ( 'mdast-util-to-markdown' ) var syntax = require ( 'micromark-extension-gfm-autolink-literal' ) var autolinkLiteral = require ( 'mdast-util-gfm-autolink-literal' ) var doc = 'www.example.com, https://example.com, and contact@example.com.' var tree = fromMarkdown ( doc , { extensions : [ syntax ], mdastExtensions : [ autolinkLiteral . fromMarkdown ] }) console . log ( tree ) var out = toMarkdown ( tree , { extensions : [ autolinkLiteral . toMarkdown ]}) console . log ( out ) Now, running node example yields: { type : 'root' , children : [ { type : 'paragraph' , children : [ { type : 'link' , title : null , url : 'http://www.example.com' , children : [{ type : 'text' , value : 'www.example.com' }] }, { type : 'text' , value : ', ' }, { type : 'link' , title : null , url : 'https://example.com' , children : [{ type : 'text' , value : 'https://example.com' }] }, { type : 'text' , value : ', and ' }, { type : 'link' , title : null , url : 'mailto:contact@example.com' , children : [{ type : 'text' , value : 'contact@example.com' }] }, { type : 'text' , value : '.' } ] } ] } [ www.example.com ]( http://www.example.com ), <https://example.com>, and <contact@example.com>.","title":"Use"},{"location":"node_modules/mdast-util-gfm-autolink-literal/readme/#api","text":"","title":"API"},{"location":"node_modules/mdast-util-gfm-autolink-literal/readme/#autolinkliteralfrommarkdown","text":"","title":"autolinkLiteral.fromMarkdown"},{"location":"node_modules/mdast-util-gfm-autolink-literal/readme/#autolinkliteraltomarkdown","text":"Note: the separate extensions are also available at mdast-util-gfm-autolink-literal/from-markdown and mdast-util-gfm-autolink-literal/to-markdown . Support literal autolinks. The exports are extensions, respectively for mdast-util-from-markdown and mdast-util-to-markdown .","title":"autolinkLiteral.toMarkdown"},{"location":"node_modules/mdast-util-gfm-autolink-literal/readme/#related","text":"remarkjs/remark \u2014 markdown processor powered by plugins remarkjs/remark-gfm \u2014 remark plugin to support GFM micromark/micromark \u2014 the smallest commonmark-compliant markdown parser that exists micromark/micromark-extension-gfm-autolink-literal \u2014 micromark extension to parse GFM autolink literals syntax-tree/mdast-util-from-markdown \u2014 mdast parser using micromark to create mdast from markdown syntax-tree/mdast-util-to-markdown \u2014 mdast serializer to create markdown from mdast","title":"Related"},{"location":"node_modules/mdast-util-gfm-autolink-literal/readme/#contribute","text":"See contributing.md in syntax-tree/.github for ways to get started. See support.md for ways to get help. This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms.","title":"Contribute"},{"location":"node_modules/mdast-util-gfm-autolink-literal/readme/#license","text":"MIT \u00a9 Titus Wormer","title":"License"},{"location":"node_modules/mdast-util-gfm-strikethrough/readme/","text":"mdast-util-gfm-strikethrough Extension for mdast-util-from-markdown and/or mdast-util-to-markdown to support GitHub flavored markdown strikethrough (~~like this~~) in mdast . When parsing ( from-markdown ), must be combined with micromark-extension-gfm-strikethrough . You probably shouldn\u2019t use this package directly, but instead use remark-gfm with remark . Install npm : npm install mdast-util-gfm-strikethrough Use Say our script, example.js , looks as follows: var fromMarkdown = require ( 'mdast-util-from-markdown' ) var toMarkdown = require ( 'mdast-util-to-markdown' ) var syntax = require ( 'micromark-extension-gfm-strikethrough' ) var strikethrough = require ( 'mdast-util-gfm-strikethrough' ) var doc = '*Emphasis*, **importance**, and ~~strikethrough~~.' var tree = fromMarkdown ( doc , { extensions : [ syntax ()], mdastExtensions : [ strikethrough . fromMarkdown ] }) console . log ( tree ) var out = toMarkdown ( tree , { extensions : [ strikethrough . toMarkdown ]}) console . log ( out ) Now, running node example yields: { type : 'root' , children : [ { type : 'paragraph' , children : [ { type : 'emphasis' , children : [{ type : 'text' , value : 'Emphasis' }]}, { type : 'text' , value : ', ' }, { type : 'strong' , children : [{ type : 'text' , value : 'importance' }]}, { type : 'text' , value : ', and ' }, { type : 'delete' , children : [{ type : 'text' , value : 'strikethrough' }]}, { type : 'text' , value : '.' } ] } ] } *Emphasis* , **importance** , and ~~strikethrough~~ . API strikethrough.fromMarkdown strikethrough.toMarkdown Note: the separate extensions are also available at mdast-util-gfm-strikethrough/from-markdown and mdast-util-gfm-strikethrough/to-markdown . Support strikethrough. The exports are extensions, respectively for mdast-util-from-markdown and mdast-util-to-markdown . Related remarkjs/remark \u2014 markdown processor powered by plugins remarkjs/remark-gfm \u2014 remark plugin to support GFM micromark/micromark \u2014 the smallest commonmark-compliant markdown parser that exists micromark/micromark-extension-gfm-strikethrough \u2014 micromark extension to parse GFM strikethrough syntax-tree/mdast-util-from-markdown \u2014 mdast parser using micromark to create mdast from markdown syntax-tree/mdast-util-to-markdown \u2014 mdast serializer to create markdown from mdast Contribute See contributing.md in syntax-tree/.github for ways to get started. See support.md for ways to get help. This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms. License MIT \u00a9 Titus Wormer","title":"mdast-util-gfm-strikethrough"},{"location":"node_modules/mdast-util-gfm-strikethrough/readme/#mdast-util-gfm-strikethrough","text":"Extension for mdast-util-from-markdown and/or mdast-util-to-markdown to support GitHub flavored markdown strikethrough (~~like this~~) in mdast . When parsing ( from-markdown ), must be combined with micromark-extension-gfm-strikethrough . You probably shouldn\u2019t use this package directly, but instead use remark-gfm with remark .","title":"mdast-util-gfm-strikethrough"},{"location":"node_modules/mdast-util-gfm-strikethrough/readme/#install","text":"npm : npm install mdast-util-gfm-strikethrough","title":"Install"},{"location":"node_modules/mdast-util-gfm-strikethrough/readme/#use","text":"Say our script, example.js , looks as follows: var fromMarkdown = require ( 'mdast-util-from-markdown' ) var toMarkdown = require ( 'mdast-util-to-markdown' ) var syntax = require ( 'micromark-extension-gfm-strikethrough' ) var strikethrough = require ( 'mdast-util-gfm-strikethrough' ) var doc = '*Emphasis*, **importance**, and ~~strikethrough~~.' var tree = fromMarkdown ( doc , { extensions : [ syntax ()], mdastExtensions : [ strikethrough . fromMarkdown ] }) console . log ( tree ) var out = toMarkdown ( tree , { extensions : [ strikethrough . toMarkdown ]}) console . log ( out ) Now, running node example yields: { type : 'root' , children : [ { type : 'paragraph' , children : [ { type : 'emphasis' , children : [{ type : 'text' , value : 'Emphasis' }]}, { type : 'text' , value : ', ' }, { type : 'strong' , children : [{ type : 'text' , value : 'importance' }]}, { type : 'text' , value : ', and ' }, { type : 'delete' , children : [{ type : 'text' , value : 'strikethrough' }]}, { type : 'text' , value : '.' } ] } ] } *Emphasis* , **importance** , and ~~strikethrough~~ .","title":"Use"},{"location":"node_modules/mdast-util-gfm-strikethrough/readme/#api","text":"","title":"API"},{"location":"node_modules/mdast-util-gfm-strikethrough/readme/#strikethroughfrommarkdown","text":"","title":"strikethrough.fromMarkdown"},{"location":"node_modules/mdast-util-gfm-strikethrough/readme/#strikethroughtomarkdown","text":"Note: the separate extensions are also available at mdast-util-gfm-strikethrough/from-markdown and mdast-util-gfm-strikethrough/to-markdown . Support strikethrough. The exports are extensions, respectively for mdast-util-from-markdown and mdast-util-to-markdown .","title":"strikethrough.toMarkdown"},{"location":"node_modules/mdast-util-gfm-strikethrough/readme/#related","text":"remarkjs/remark \u2014 markdown processor powered by plugins remarkjs/remark-gfm \u2014 remark plugin to support GFM micromark/micromark \u2014 the smallest commonmark-compliant markdown parser that exists micromark/micromark-extension-gfm-strikethrough \u2014 micromark extension to parse GFM strikethrough syntax-tree/mdast-util-from-markdown \u2014 mdast parser using micromark to create mdast from markdown syntax-tree/mdast-util-to-markdown \u2014 mdast serializer to create markdown from mdast","title":"Related"},{"location":"node_modules/mdast-util-gfm-strikethrough/readme/#contribute","text":"See contributing.md in syntax-tree/.github for ways to get started. See support.md for ways to get help. This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms.","title":"Contribute"},{"location":"node_modules/mdast-util-gfm-strikethrough/readme/#license","text":"MIT \u00a9 Titus Wormer","title":"License"},{"location":"node_modules/mdast-util-gfm-table/readme/","text":"mdast-util-gfm-table Extension for mdast-util-from-markdown and/or mdast-util-to-markdown to support GitHub flavored markdown tables in mdast . When parsing ( from-markdown ), must be combined with micromark-extension-gfm-table . You probably shouldn\u2019t use this package directly, but instead use remark-gfm with remark . Install npm : npm install mdast-util-gfm-table Use Say we have the following file, example.md : | a | b | c | d | | - | :- | -: | :-: | | e | f | | g | h | i | j | k | And our script, example.js , looks as follows: var fs = require ( 'fs' ) var fromMarkdown = require ( 'mdast-util-from-markdown' ) var toMarkdown = require ( 'mdast-util-to-markdown' ) var syntax = require ( 'micromark-extension-gfm-table' ) var table = require ( 'mdast-util-gfm-table' ) var doc = fs . readFileSync ( 'example.md' ) var tree = fromMarkdown ( doc , { extensions : [ syntax ], mdastExtensions : [ table . fromMarkdown ] }) console . log ( tree ) var out = toMarkdown ( tree , { extensions : [ table . toMarkdown ()]}) console . log ( out ) Now, running node example yields (positional info removed for the sake of brevity): { type : 'root' , children : [ { type : 'table' , align : [ null , 'left' , 'right' , 'center' ], children : [ { type : 'tableRow' , children : [ { type : 'tableCell' , children : [{ type : 'text' , value : 'a' }]}, { type : 'tableCell' , children : [{ type : 'text' , value : 'b' }]}, { type : 'tableCell' , children : [{ type : 'text' , value : 'c' }]}, { type : 'tableCell' , children : [{ type : 'text' , value : 'd' }]} ] }, { type : 'tableRow' , children : [ { type : 'tableCell' , children : [{ type : 'text' , value : 'e' }]}, { type : 'tableCell' , children : [{ type : 'text' , value : 'f' }]} ] }, { type : 'tableRow' , children : [ { type : 'tableCell' , children : [{ type : 'text' , value : 'g' }]}, { type : 'tableCell' , children : [{ type : 'text' , value : 'h' }]}, { type : 'tableCell' , children : [{ type : 'text' , value : 'i' }]}, { type : 'tableCell' , children : [{ type : 'text' , value : 'j' }]}, { type : 'tableCell' , children : [{ type : 'text' , value : 'k' }]} ] } ] } ] } | a | b | c | d | | | - | :- | -: | :-: | - | | e | f | | | | | g | h | i | j | k | API table.fromMarkdown table.toMarkdown(options?) Note: the separate extensions are also available at mdast-util-gfm-table/from-markdown and mdast-util-gfm-table/to-markdown . Support tables. The exports of fromMarkdown is an extension for mdast-util-from-markdown . The export of toMarkdown is a function that can be called with options and returns an extension for mdast-util-to-markdown . options options.tableCellPadding Create tables with a space between cell delimiters ( | ) and content ( boolean , default: true ). options.tablePipeAlign Align the delimiters ( | ) between table cells so that they all align nicely and form a grid ( boolean , default: true ). options.stringLength Function passed to markdown-table to detect the length of a table cell ( Function , default: s => s.length ). Used to pad tables. Related remarkjs/remark \u2014 markdown processor powered by plugins remarkjs/remark-gfm \u2014 remark plugin to support GFM micromark/micromark \u2014 the smallest commonmark-compliant markdown parser that exists micromark/micromark-extension-gfm-table \u2014 micromark extension to parse GFM tables syntax-tree/mdast-util-from-markdown \u2014 mdast parser using micromark to create mdast from markdown syntax-tree/mdast-util-to-markdown \u2014 mdast serializer to create markdown from mdast Contribute See contributing.md in syntax-tree/.github for ways to get started. See support.md for ways to get help. This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms. License MIT \u00a9 Titus Wormer","title":"mdast-util-gfm-table"},{"location":"node_modules/mdast-util-gfm-table/readme/#mdast-util-gfm-table","text":"Extension for mdast-util-from-markdown and/or mdast-util-to-markdown to support GitHub flavored markdown tables in mdast . When parsing ( from-markdown ), must be combined with micromark-extension-gfm-table . You probably shouldn\u2019t use this package directly, but instead use remark-gfm with remark .","title":"mdast-util-gfm-table"},{"location":"node_modules/mdast-util-gfm-table/readme/#install","text":"npm : npm install mdast-util-gfm-table","title":"Install"},{"location":"node_modules/mdast-util-gfm-table/readme/#use","text":"Say we have the following file, example.md : | a | b | c | d | | - | :- | -: | :-: | | e | f | | g | h | i | j | k | And our script, example.js , looks as follows: var fs = require ( 'fs' ) var fromMarkdown = require ( 'mdast-util-from-markdown' ) var toMarkdown = require ( 'mdast-util-to-markdown' ) var syntax = require ( 'micromark-extension-gfm-table' ) var table = require ( 'mdast-util-gfm-table' ) var doc = fs . readFileSync ( 'example.md' ) var tree = fromMarkdown ( doc , { extensions : [ syntax ], mdastExtensions : [ table . fromMarkdown ] }) console . log ( tree ) var out = toMarkdown ( tree , { extensions : [ table . toMarkdown ()]}) console . log ( out ) Now, running node example yields (positional info removed for the sake of brevity): { type : 'root' , children : [ { type : 'table' , align : [ null , 'left' , 'right' , 'center' ], children : [ { type : 'tableRow' , children : [ { type : 'tableCell' , children : [{ type : 'text' , value : 'a' }]}, { type : 'tableCell' , children : [{ type : 'text' , value : 'b' }]}, { type : 'tableCell' , children : [{ type : 'text' , value : 'c' }]}, { type : 'tableCell' , children : [{ type : 'text' , value : 'd' }]} ] }, { type : 'tableRow' , children : [ { type : 'tableCell' , children : [{ type : 'text' , value : 'e' }]}, { type : 'tableCell' , children : [{ type : 'text' , value : 'f' }]} ] }, { type : 'tableRow' , children : [ { type : 'tableCell' , children : [{ type : 'text' , value : 'g' }]}, { type : 'tableCell' , children : [{ type : 'text' , value : 'h' }]}, { type : 'tableCell' , children : [{ type : 'text' , value : 'i' }]}, { type : 'tableCell' , children : [{ type : 'text' , value : 'j' }]}, { type : 'tableCell' , children : [{ type : 'text' , value : 'k' }]} ] } ] } ] } | a | b | c | d | | | - | :- | -: | :-: | - | | e | f | | | | | g | h | i | j | k |","title":"Use"},{"location":"node_modules/mdast-util-gfm-table/readme/#api","text":"","title":"API"},{"location":"node_modules/mdast-util-gfm-table/readme/#tablefrommarkdown","text":"","title":"table.fromMarkdown"},{"location":"node_modules/mdast-util-gfm-table/readme/#tabletomarkdownoptions","text":"Note: the separate extensions are also available at mdast-util-gfm-table/from-markdown and mdast-util-gfm-table/to-markdown . Support tables. The exports of fromMarkdown is an extension for mdast-util-from-markdown . The export of toMarkdown is a function that can be called with options and returns an extension for mdast-util-to-markdown .","title":"table.toMarkdown(options?)"},{"location":"node_modules/mdast-util-gfm-table/readme/#options","text":"","title":"options"},{"location":"node_modules/mdast-util-gfm-table/readme/#optionstablecellpadding","text":"Create tables with a space between cell delimiters ( | ) and content ( boolean , default: true ).","title":"options.tableCellPadding"},{"location":"node_modules/mdast-util-gfm-table/readme/#optionstablepipealign","text":"Align the delimiters ( | ) between table cells so that they all align nicely and form a grid ( boolean , default: true ).","title":"options.tablePipeAlign"},{"location":"node_modules/mdast-util-gfm-table/readme/#optionsstringlength","text":"Function passed to markdown-table to detect the length of a table cell ( Function , default: s => s.length ). Used to pad tables.","title":"options.stringLength"},{"location":"node_modules/mdast-util-gfm-table/readme/#related","text":"remarkjs/remark \u2014 markdown processor powered by plugins remarkjs/remark-gfm \u2014 remark plugin to support GFM micromark/micromark \u2014 the smallest commonmark-compliant markdown parser that exists micromark/micromark-extension-gfm-table \u2014 micromark extension to parse GFM tables syntax-tree/mdast-util-from-markdown \u2014 mdast parser using micromark to create mdast from markdown syntax-tree/mdast-util-to-markdown \u2014 mdast serializer to create markdown from mdast","title":"Related"},{"location":"node_modules/mdast-util-gfm-table/readme/#contribute","text":"See contributing.md in syntax-tree/.github for ways to get started. See support.md for ways to get help. This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms.","title":"Contribute"},{"location":"node_modules/mdast-util-gfm-table/readme/#license","text":"MIT \u00a9 Titus Wormer","title":"License"},{"location":"node_modules/mdast-util-gfm-task-list-item/readme/","text":"mdast-util-gfm-task-list-item Extension for mdast-util-from-markdown and/or mdast-util-to-markdown to support GitHub flavored markdown task list items in mdast . When parsing ( from-markdown ), must be combined with micromark-extension-gfm-task-list-item . You probably shouldn\u2019t use this package directly, but instead use remark-gfm with remark . Install npm : npm install mdast-util-gfm-task-list-item Use Say we have the following file, example.md : * [ ] To do * [x] Done 1. Mixed\u2026 2. [x] \u2026messages And our script, example.js , looks as follows: var fs = require ( 'fs' ) var fromMarkdown = require ( 'mdast-util-from-markdown' ) var toMarkdown = require ( 'mdast-util-to-markdown' ) var syntax = require ( 'micromark-extension-gfm-task-list-item' ) var taskListItem = require ( 'mdast-util-gfm-task-list-item' ) var doc = fs . readFileSync ( 'example.md' ) var tree = fromMarkdown ( doc , { extensions : [ syntax ], mdastExtensions : [ taskListItem . fromMarkdown ] }) console . log ( tree ) var out = toMarkdown ( tree , { extensions : [ taskListItem . toMarkdown ]}) console . log ( out ) Now, running node example yields (positional info removed for the sake of brevity): { type : 'root' , children : [ { type : 'list' , ordered : false , start : null , spread : false , children : [ { type : 'listItem' , spread : false , checked : false , children : [ { type : 'paragraph' , children : [{ type : 'text' , value : 'To do' }]} ] }, { type : 'listItem' , spread : false , checked : true , children : [ { type : 'paragraph' , children : [{ type : 'text' , value : 'Done' }]} ] } ] }, { type : 'list' , ordered : true , start : 1 , spread : false , children : [ { type : 'listItem' , spread : false , checked : null , children : [ { type : 'paragraph' , children : [{ type : 'text' , value : 'Mixed\u2026' }]} ] }, { type : 'listItem' , spread : false , checked : true , children : [ { type : 'paragraph' , children : [{ type : 'text' , value : '\u2026messages' }]} ] } ] } ] } * [ ] To do * [x] Done 1. Mixed\u2026 2. [x] \u2026messages API taskListItem.fromMarkdown taskListItem.toMarkdown Note: the separate extensions are also available at mdast-util-gfm-task-list-item/from-markdown and mdast-util-gfm-task-list-item/to-markdown . Support task list items. The exports are extensions, respectively for mdast-util-from-markdown and mdast-util-to-markdown . Related remarkjs/remark \u2014 markdown processor powered by plugins remarkjs/remark-gfm \u2014 remark plugin to support GFM micromark/micromark \u2014 the smallest commonmark-compliant markdown parser that exists micromark/micromark-extension-gfm-task-list-item \u2014 micromark extension to parse GFM task list items syntax-tree/mdast-util-from-markdown \u2014 mdast parser using micromark to create mdast from markdown syntax-tree/mdast-util-to-markdown \u2014 mdast serializer to create markdown from mdast Contribute See contributing.md in syntax-tree/.github for ways to get started. See support.md for ways to get help. This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms. License MIT \u00a9 Titus Wormer","title":"mdast-util-gfm-task-list-item"},{"location":"node_modules/mdast-util-gfm-task-list-item/readme/#mdast-util-gfm-task-list-item","text":"Extension for mdast-util-from-markdown and/or mdast-util-to-markdown to support GitHub flavored markdown task list items in mdast . When parsing ( from-markdown ), must be combined with micromark-extension-gfm-task-list-item . You probably shouldn\u2019t use this package directly, but instead use remark-gfm with remark .","title":"mdast-util-gfm-task-list-item"},{"location":"node_modules/mdast-util-gfm-task-list-item/readme/#install","text":"npm : npm install mdast-util-gfm-task-list-item","title":"Install"},{"location":"node_modules/mdast-util-gfm-task-list-item/readme/#use","text":"Say we have the following file, example.md : * [ ] To do * [x] Done 1. Mixed\u2026 2. [x] \u2026messages And our script, example.js , looks as follows: var fs = require ( 'fs' ) var fromMarkdown = require ( 'mdast-util-from-markdown' ) var toMarkdown = require ( 'mdast-util-to-markdown' ) var syntax = require ( 'micromark-extension-gfm-task-list-item' ) var taskListItem = require ( 'mdast-util-gfm-task-list-item' ) var doc = fs . readFileSync ( 'example.md' ) var tree = fromMarkdown ( doc , { extensions : [ syntax ], mdastExtensions : [ taskListItem . fromMarkdown ] }) console . log ( tree ) var out = toMarkdown ( tree , { extensions : [ taskListItem . toMarkdown ]}) console . log ( out ) Now, running node example yields (positional info removed for the sake of brevity): { type : 'root' , children : [ { type : 'list' , ordered : false , start : null , spread : false , children : [ { type : 'listItem' , spread : false , checked : false , children : [ { type : 'paragraph' , children : [{ type : 'text' , value : 'To do' }]} ] }, { type : 'listItem' , spread : false , checked : true , children : [ { type : 'paragraph' , children : [{ type : 'text' , value : 'Done' }]} ] } ] }, { type : 'list' , ordered : true , start : 1 , spread : false , children : [ { type : 'listItem' , spread : false , checked : null , children : [ { type : 'paragraph' , children : [{ type : 'text' , value : 'Mixed\u2026' }]} ] }, { type : 'listItem' , spread : false , checked : true , children : [ { type : 'paragraph' , children : [{ type : 'text' , value : '\u2026messages' }]} ] } ] } ] } * [ ] To do * [x] Done 1. Mixed\u2026 2. [x] \u2026messages","title":"Use"},{"location":"node_modules/mdast-util-gfm-task-list-item/readme/#api","text":"","title":"API"},{"location":"node_modules/mdast-util-gfm-task-list-item/readme/#tasklistitemfrommarkdown","text":"","title":"taskListItem.fromMarkdown"},{"location":"node_modules/mdast-util-gfm-task-list-item/readme/#tasklistitemtomarkdown","text":"Note: the separate extensions are also available at mdast-util-gfm-task-list-item/from-markdown and mdast-util-gfm-task-list-item/to-markdown . Support task list items. The exports are extensions, respectively for mdast-util-from-markdown and mdast-util-to-markdown .","title":"taskListItem.toMarkdown"},{"location":"node_modules/mdast-util-gfm-task-list-item/readme/#related","text":"remarkjs/remark \u2014 markdown processor powered by plugins remarkjs/remark-gfm \u2014 remark plugin to support GFM micromark/micromark \u2014 the smallest commonmark-compliant markdown parser that exists micromark/micromark-extension-gfm-task-list-item \u2014 micromark extension to parse GFM task list items syntax-tree/mdast-util-from-markdown \u2014 mdast parser using micromark to create mdast from markdown syntax-tree/mdast-util-to-markdown \u2014 mdast serializer to create markdown from mdast","title":"Related"},{"location":"node_modules/mdast-util-gfm-task-list-item/readme/#contribute","text":"See contributing.md in syntax-tree/.github for ways to get started. See support.md for ways to get help. This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms.","title":"Contribute"},{"location":"node_modules/mdast-util-gfm-task-list-item/readme/#license","text":"MIT \u00a9 Titus Wormer","title":"License"},{"location":"node_modules/mdast-util-to-markdown/readme/","text":"mdast-util-to-markdown mdast utility to parse markdown. Install npm : npm install mdast-util-to-markdown Use Say we have the following script, example.js : var toMarkdown = require ( 'mdast-util-to-markdown' ) var tree = { type : 'root' , children : [ { type : 'blockquote' , children : [ { type : 'thematicBreak' }, { type : 'paragraph' , children : [ { type : 'text' , value : '- a\\nb !' }, { type : 'link' , url : 'example.com' , children : [{ type : 'text' , value : 'd' }] } ] } ] } ] } console . log ( toMarkdown ( tree )) Now, running node example yields (note the properly escaped characters which would otherwise turn into a list and image respectively): > *** > > \\- a > b \\![d](example.com) API toMarkdown(tree[, options]) Serialize mdast to markdown. Formatting options options.bullet Marker to use to for bullets of items in unordered lists ( '*' , '+' , or '-' , default: '*' ). options.closeAtx Whether to add the same number of number signs ( # ) at the end of an ATX heading as the opening sequence ( boolean , default: false ). options.emphasis Marker to use to serialize emphasis ( '*' or '_' , default: '*' ). options.fence Marker to use to serialize fenced code ( '`' or '~' , default: '`' ). options.fences Whether to use fenced code always ( boolean , default: false ). The default is to fenced code if there is a language defined, if the code is empty, or if it starts or ends in empty lines. options.incrementListMarker Whether to increment the value of bullets of items in ordered lists ( boolean , default: true ). options.listItemIndent Whether to indent the content of list items with the size of the bullet plus one space (when 'one' ) or a tab stop ( 'tab' ), or depending on the item and its parent list ( 'mixed' , uses 'one' if the item and list are tight and 'tab' otherwise) ( 'one' , 'tab' , or 'mixed' , default: 'tab' ). options.quote Marker to use to serialize titles ( '\"' or \"'\" , default: '\"' ). options.resourceLink Whether to use reference links always ( boolean , default: false ). The default is to use autolinks ( <https://example.com> ) when possible. options.rule Marker to use for thematic breaks ( '*' , '-' , or '_' , default: '*' ). options.ruleRepetition Number of markers to use for thematic breaks ( number , default: 3 , min: 3 ). options.ruleSpaces Whether to add spaces between markers in thematic breaks ( boolean , default: false ). options.setext Whether to use setext headings when possible ( boolean , default: false ). Setext headings are not possible for headings with a rank more than 2 or when they\u2019re empty. options.strong Marker to use to serialize strong ( '*' or '_' , default: '*' ). options.tightDefinitions Whether to join definitions w/o a blank line ( boolean , default: false ). Shortcut for a join function like so: function ( left , right ) { if ( left . type === 'definition' && right . type === 'definition' ) { return 0 } } options.handlers Object mapping node types to custom handlers. Useful for syntax extensions. Take a look at lib/handle for examples. options.join List of functions used to determine what to place between two flow nodes. Often, they are joined by one blank line. In certain cases, it\u2019s nicer to have them next to each other. Or, they can\u2019t occur together. These functions receive two adjacent nodes and their parent and can return number or boolean , referring to how many blank lines to use between them. A return value of true is as passing 1 . A return value of false means the nodes cannot be joined by a blank line, such as two adjacent block quotes or indented code after a list, in which case a comment will be injected to break them up: > Quote 1 <!----> > Quote 2 options.unsafe List of patterns to escape. Useful for syntax extensions. Take a look at lib/unsafe.js for examples. Extension options options.extensions List of extensions ( Array.<ToMarkdownExtension> ). Each ToMarkdownExtension is an object with the same interface as options here. Returns string \u2014 Serialized markdown. List of extensions syntax-tree/mdast-util-directive \u2014 serialize directives syntax-tree/mdast-util-footnote \u2014 serialize footnotes syntax-tree/mdast-util-frontmatter \u2014 serialize frontmatter (YAML, TOML, more) syntax-tree/mdast-util-gfm \u2014 serialize GFM syntax-tree/mdast-util-gfm-autolink-literal \u2014 serialize GFM autolink literals syntax-tree/mdast-util-gfm-strikethrough \u2014 serialize GFM strikethrough syntax-tree/mdast-util-gfm-table \u2014 serialize GFM tables syntax-tree/mdast-util-gfm-task-list-item \u2014 serialize GFM task list items syntax-tree/mdast-util-math \u2014 serialize math syntax-tree/mdast-util-mdx \u2014 serialize MDX or MDX.js syntax-tree/mdast-util-mdx-expression \u2014 serialize MDX or MDX.js expressions syntax-tree/mdast-util-mdx-jsx \u2014 serialize MDX or MDX.js JSX syntax-tree/mdast-util-mdxjs-esm \u2014 serialize MDX.js ESM Security mdast-util-to-markdown will do its best to serialize markdown to match the syntax tree, but there are several cases where that is impossible. It\u2019ll do its best, but complete roundtripping is impossible given that any value could be injected into the tree. As Markdown is sometimes used for HTML, and improper use of HTML can open you up to a cross-site scripting (XSS) attack, use of mdast-util-to-markdown and parsing it again later could potentially be unsafe. When parsing markdown afterwards and then going to HTML, use something like hast-util-sanitize to make the tree safe. Related micromark/micromark \u2014 the smallest commonmark-compliant markdown parser that exists remarkjs/remark \u2014 markdown processor powered by plugins syntax-tree/mdast-util-from-markdown \u2014 parse markdown to mdast Contribute See contributing.md in syntax-tree/.github for ways to get started. See support.md for ways to get help. This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms. License MIT \u00a9 Titus Wormer","title":"mdast-util-to-markdown"},{"location":"node_modules/mdast-util-to-markdown/readme/#mdast-util-to-markdown","text":"mdast utility to parse markdown.","title":"mdast-util-to-markdown"},{"location":"node_modules/mdast-util-to-markdown/readme/#install","text":"npm : npm install mdast-util-to-markdown","title":"Install"},{"location":"node_modules/mdast-util-to-markdown/readme/#use","text":"Say we have the following script, example.js : var toMarkdown = require ( 'mdast-util-to-markdown' ) var tree = { type : 'root' , children : [ { type : 'blockquote' , children : [ { type : 'thematicBreak' }, { type : 'paragraph' , children : [ { type : 'text' , value : '- a\\nb !' }, { type : 'link' , url : 'example.com' , children : [{ type : 'text' , value : 'd' }] } ] } ] } ] } console . log ( toMarkdown ( tree )) Now, running node example yields (note the properly escaped characters which would otherwise turn into a list and image respectively): > *** > > \\- a > b \\![d](example.com)","title":"Use"},{"location":"node_modules/mdast-util-to-markdown/readme/#api","text":"","title":"API"},{"location":"node_modules/mdast-util-to-markdown/readme/#tomarkdowntree-options","text":"Serialize mdast to markdown.","title":"toMarkdown(tree[, options])"},{"location":"node_modules/mdast-util-to-markdown/readme/#formatting-options","text":"","title":"Formatting options"},{"location":"node_modules/mdast-util-to-markdown/readme/#optionsbullet","text":"Marker to use to for bullets of items in unordered lists ( '*' , '+' , or '-' , default: '*' ).","title":"options.bullet"},{"location":"node_modules/mdast-util-to-markdown/readme/#optionscloseatx","text":"Whether to add the same number of number signs ( # ) at the end of an ATX heading as the opening sequence ( boolean , default: false ).","title":"options.closeAtx"},{"location":"node_modules/mdast-util-to-markdown/readme/#optionsemphasis","text":"Marker to use to serialize emphasis ( '*' or '_' , default: '*' ).","title":"options.emphasis"},{"location":"node_modules/mdast-util-to-markdown/readme/#optionsfence","text":"Marker to use to serialize fenced code ( '`' or '~' , default: '`' ).","title":"options.fence"},{"location":"node_modules/mdast-util-to-markdown/readme/#optionsfences","text":"Whether to use fenced code always ( boolean , default: false ). The default is to fenced code if there is a language defined, if the code is empty, or if it starts or ends in empty lines.","title":"options.fences"},{"location":"node_modules/mdast-util-to-markdown/readme/#optionsincrementlistmarker","text":"Whether to increment the value of bullets of items in ordered lists ( boolean , default: true ).","title":"options.incrementListMarker"},{"location":"node_modules/mdast-util-to-markdown/readme/#optionslistitemindent","text":"Whether to indent the content of list items with the size of the bullet plus one space (when 'one' ) or a tab stop ( 'tab' ), or depending on the item and its parent list ( 'mixed' , uses 'one' if the item and list are tight and 'tab' otherwise) ( 'one' , 'tab' , or 'mixed' , default: 'tab' ).","title":"options.listItemIndent"},{"location":"node_modules/mdast-util-to-markdown/readme/#optionsquote","text":"Marker to use to serialize titles ( '\"' or \"'\" , default: '\"' ).","title":"options.quote"},{"location":"node_modules/mdast-util-to-markdown/readme/#optionsresourcelink","text":"Whether to use reference links always ( boolean , default: false ). The default is to use autolinks ( <https://example.com> ) when possible.","title":"options.resourceLink"},{"location":"node_modules/mdast-util-to-markdown/readme/#optionsrule","text":"Marker to use for thematic breaks ( '*' , '-' , or '_' , default: '*' ).","title":"options.rule"},{"location":"node_modules/mdast-util-to-markdown/readme/#optionsrulerepetition","text":"Number of markers to use for thematic breaks ( number , default: 3 , min: 3 ).","title":"options.ruleRepetition"},{"location":"node_modules/mdast-util-to-markdown/readme/#optionsrulespaces","text":"Whether to add spaces between markers in thematic breaks ( boolean , default: false ).","title":"options.ruleSpaces"},{"location":"node_modules/mdast-util-to-markdown/readme/#optionssetext","text":"Whether to use setext headings when possible ( boolean , default: false ). Setext headings are not possible for headings with a rank more than 2 or when they\u2019re empty.","title":"options.setext"},{"location":"node_modules/mdast-util-to-markdown/readme/#optionsstrong","text":"Marker to use to serialize strong ( '*' or '_' , default: '*' ).","title":"options.strong"},{"location":"node_modules/mdast-util-to-markdown/readme/#optionstightdefinitions","text":"Whether to join definitions w/o a blank line ( boolean , default: false ). Shortcut for a join function like so: function ( left , right ) { if ( left . type === 'definition' && right . type === 'definition' ) { return 0 } }","title":"options.tightDefinitions"},{"location":"node_modules/mdast-util-to-markdown/readme/#optionshandlers","text":"Object mapping node types to custom handlers. Useful for syntax extensions. Take a look at lib/handle for examples.","title":"options.handlers"},{"location":"node_modules/mdast-util-to-markdown/readme/#optionsjoin","text":"List of functions used to determine what to place between two flow nodes. Often, they are joined by one blank line. In certain cases, it\u2019s nicer to have them next to each other. Or, they can\u2019t occur together. These functions receive two adjacent nodes and their parent and can return number or boolean , referring to how many blank lines to use between them. A return value of true is as passing 1 . A return value of false means the nodes cannot be joined by a blank line, such as two adjacent block quotes or indented code after a list, in which case a comment will be injected to break them up: > Quote 1 <!----> > Quote 2","title":"options.join"},{"location":"node_modules/mdast-util-to-markdown/readme/#optionsunsafe","text":"List of patterns to escape. Useful for syntax extensions. Take a look at lib/unsafe.js for examples.","title":"options.unsafe"},{"location":"node_modules/mdast-util-to-markdown/readme/#extension-options","text":"","title":"Extension options"},{"location":"node_modules/mdast-util-to-markdown/readme/#optionsextensions","text":"List of extensions ( Array.<ToMarkdownExtension> ). Each ToMarkdownExtension is an object with the same interface as options here.","title":"options.extensions"},{"location":"node_modules/mdast-util-to-markdown/readme/#returns","text":"string \u2014 Serialized markdown.","title":"Returns"},{"location":"node_modules/mdast-util-to-markdown/readme/#list-of-extensions","text":"syntax-tree/mdast-util-directive \u2014 serialize directives syntax-tree/mdast-util-footnote \u2014 serialize footnotes syntax-tree/mdast-util-frontmatter \u2014 serialize frontmatter (YAML, TOML, more) syntax-tree/mdast-util-gfm \u2014 serialize GFM syntax-tree/mdast-util-gfm-autolink-literal \u2014 serialize GFM autolink literals syntax-tree/mdast-util-gfm-strikethrough \u2014 serialize GFM strikethrough syntax-tree/mdast-util-gfm-table \u2014 serialize GFM tables syntax-tree/mdast-util-gfm-task-list-item \u2014 serialize GFM task list items syntax-tree/mdast-util-math \u2014 serialize math syntax-tree/mdast-util-mdx \u2014 serialize MDX or MDX.js syntax-tree/mdast-util-mdx-expression \u2014 serialize MDX or MDX.js expressions syntax-tree/mdast-util-mdx-jsx \u2014 serialize MDX or MDX.js JSX syntax-tree/mdast-util-mdxjs-esm \u2014 serialize MDX.js ESM","title":"List of extensions"},{"location":"node_modules/mdast-util-to-markdown/readme/#security","text":"mdast-util-to-markdown will do its best to serialize markdown to match the syntax tree, but there are several cases where that is impossible. It\u2019ll do its best, but complete roundtripping is impossible given that any value could be injected into the tree. As Markdown is sometimes used for HTML, and improper use of HTML can open you up to a cross-site scripting (XSS) attack, use of mdast-util-to-markdown and parsing it again later could potentially be unsafe. When parsing markdown afterwards and then going to HTML, use something like hast-util-sanitize to make the tree safe.","title":"Security"},{"location":"node_modules/mdast-util-to-markdown/readme/#related","text":"micromark/micromark \u2014 the smallest commonmark-compliant markdown parser that exists remarkjs/remark \u2014 markdown processor powered by plugins syntax-tree/mdast-util-from-markdown \u2014 parse markdown to mdast","title":"Related"},{"location":"node_modules/mdast-util-to-markdown/readme/#contribute","text":"See contributing.md in syntax-tree/.github for ways to get started. See support.md for ways to get help. This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms.","title":"Contribute"},{"location":"node_modules/mdast-util-to-markdown/readme/#license","text":"MIT \u00a9 Titus Wormer","title":"License"},{"location":"node_modules/mdast-util-to-string/readme/","text":"mdast-util-to-string mdast utility to get the plain text content of a node. Install npm : npm install mdast-util-to-string Use var unified = require ( 'unified' ) var parse = require ( 'remark-parse' ) var toString = require ( 'mdast-util-to-string' ) var tree = unified () . use ( parse ) . parse ( 'Some _emphasis_, **importance**, and `code`.' ) console . log ( toString ( tree )) // => 'Some emphasis, importance, and code.' API toString(node) Get the text content of a node or list of nodes. The algorithm checks value of node , then alt , and finally title . If no value is found, the algorithm checks the children of node and joins them (without spaces or newlines). This is not a markdown to plain-text library. Use strip-markdown for that. Security Use of mdast-util-to-string does not involve hast , user content, or change the tree, so there are no openings for cross-site scripting (XSS) attacks. Related nlcst-to-string \u2014 Get text content in nlcst hast-util-to-string \u2014 Get text content in hast hast-util-to-text \u2014 Get text content in hast according to the innerText algorithm hast-util-from-string \u2014 Set text content in hast Contribute See contributing.md in syntax-tree/.github for ways to get started. See support.md for ways to get help. This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms. License MIT \u00a9 Titus Wormer","title":"mdast-util-to-string"},{"location":"node_modules/mdast-util-to-string/readme/#mdast-util-to-string","text":"mdast utility to get the plain text content of a node.","title":"mdast-util-to-string"},{"location":"node_modules/mdast-util-to-string/readme/#install","text":"npm : npm install mdast-util-to-string","title":"Install"},{"location":"node_modules/mdast-util-to-string/readme/#use","text":"var unified = require ( 'unified' ) var parse = require ( 'remark-parse' ) var toString = require ( 'mdast-util-to-string' ) var tree = unified () . use ( parse ) . parse ( 'Some _emphasis_, **importance**, and `code`.' ) console . log ( toString ( tree )) // => 'Some emphasis, importance, and code.'","title":"Use"},{"location":"node_modules/mdast-util-to-string/readme/#api","text":"","title":"API"},{"location":"node_modules/mdast-util-to-string/readme/#tostringnode","text":"Get the text content of a node or list of nodes. The algorithm checks value of node , then alt , and finally title . If no value is found, the algorithm checks the children of node and joins them (without spaces or newlines). This is not a markdown to plain-text library. Use strip-markdown for that.","title":"toString(node)"},{"location":"node_modules/mdast-util-to-string/readme/#security","text":"Use of mdast-util-to-string does not involve hast , user content, or change the tree, so there are no openings for cross-site scripting (XSS) attacks.","title":"Security"},{"location":"node_modules/mdast-util-to-string/readme/#related","text":"nlcst-to-string \u2014 Get text content in nlcst hast-util-to-string \u2014 Get text content in hast hast-util-to-text \u2014 Get text content in hast according to the innerText algorithm hast-util-from-string \u2014 Set text content in hast","title":"Related"},{"location":"node_modules/mdast-util-to-string/readme/#contribute","text":"See contributing.md in syntax-tree/.github for ways to get started. See support.md for ways to get help. This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms.","title":"Contribute"},{"location":"node_modules/mdast-util-to-string/readme/#license","text":"MIT \u00a9 Titus Wormer","title":"License"},{"location":"node_modules/micromark/readme/","text":"The smallest CommonMark compliant markdown parser with positional info and concrete tokens. compliant (100% to CommonMark) extensions ( GFM , directives , footnotes , frontmatter , math , MDX.js ) safe (by default) small (smallest CM parser that exists) robust (1800+ tests, 100% coverage, fuzz testing) Intro micromark is a long awaited markdown parser. It uses a state machine to parse the entirety of markdown into concrete tokens. It\u2019s the smallest 100% CommonMark compliant markdown parser in JavaScript. It was made to replace the internals of remark-parse , the most popular markdown parser. Its API compiles to HTML, but its parts are made to be used separately, so as to generate syntax trees ( mdast-util-from-markdown ) or compile to other output formats. It\u2019s in open beta: up next are CMSM and CSTs. for updates, see Twitter for more about us, see unifiedjs.com for questions, see Discussions to help, see contribute or sponsor below Contents Install Use API micromark(doc[, encoding][, options]) micromarkStream(options?) Extensions SyntaxExtension HtmlExtension List of extensions Syntax tree CommonMark Grammar Test Size & debug Comparison Version Security Contribute Sponsor Origin story License Install npm : npm install micromark Use Typical use (buffering): var micromark = require ( 'micromark' ) console . log ( micromark ( '## Hello, *world*!' )) Yields: < h2 > Hello, < em > world </ em > ! </ h2 > The same can be done with ESM (in Node 10+, browsers that support it, or with a bundler), in an example.mjs file, like so: import micromark from 'micromark' console . log ( micromark ( '## Hello, *world*!' )) You can pass extensions (in this case micromark-extension-gfm ): var micromark = require ( 'micromark' ) var gfmSyntax = require ( 'micromark-extension-gfm' ) var gfmHtml = require ( 'micromark-extension-gfm/html' ) var doc = '* [x] contact@example.com ~~strikethrough~~' var result = micromark ( doc , { extensions : [ gfmSyntax ()], htmlExtensions : [ gfmHtml ] }) console . log ( result ) Yields: < ul > < li >< input checked = \"\" disabled = \"\" type = \"checkbox\" > < a href = \"mailto:contact@example.com\" > contact@example.com </ a > < del > strikethrough </ del ></ li > </ ul > Streaming interface: var fs = require ( 'fs' ) var micromarkStream = require ( 'micromark/stream' ) fs . createReadStream ( 'example.md' ) . on ( 'error' , handleError ) . pipe ( micromarkStream ()) . pipe ( process . stdout ) function handleError ( err ) { // Handle your error here! throw err } API This section documents the API. The parts can be used separately, but this isn\u2019t documented yet. micromark(doc[, encoding][, options]) Compile markdown to HTML. Parameters doc Markdown to parse ( string or Buffer ) encoding Character encoding to understand doc as when it\u2019s a Buffer ( string , default: 'utf8' ). options.defaultLineEnding Value to use for line endings not in doc ( string , default: first line ending or '\\n' ). Generally, micromark copies line endings ( '\\r' , '\\n' , '\\r\\n' ) in the markdown document over to the compiled HTML. In some cases, such as > a , CommonMark requires that extra line endings are added: <blockquote>\\n<p>a</p>\\n</blockquote> . options.allowDangerousHtml Whether to allow embedded HTML ( boolean , default: false ). options.allowDangerousProtocol Whether to allow potentially dangerous protocols in links and images ( boolean , default: false ). URLs relative to the current protocol are always allowed (such as, image.jpg ). For links, the allowed protocols are http , https , irc , ircs , mailto , and xmpp . For images, the allowed protocols are http and https . options.extensions Array of syntax extensions ( Array.<SyntaxExtension> , default: [] ). options.htmlExtensions Array of HTML extensions ( Array.<HtmlExtension> , default: [] ). Returns string \u2014 Compiled HTML. micromarkStream(options?) Streaming interface of micromark. Compiles markdown to HTML. options are the same as the buffering API above. Available at require('micromark/stream') . Note that some of the work to parse markdown can be done streaming, but in the end buffering is required. micromark does not handle errors for you, so you must handle errors on whatever streams you pipe into it. As markdown does not know errors, micromark itself does not emit errors. Extensions There are two types of extensions for micromark: SyntaxExtension and HtmlExtension . They can be passed in extensions or htmlExtensions , respectively. SyntaxExtension A syntax extension is an object whose fields are the names of hooks, referring to where constructs \u201chook\u201d into. content (a block of, well, content: definitions and paragraphs), document (containers such as block quotes and lists), flow (block constructs such as ATX and setext headings, HTML, indented and fenced code, thematic breaks), string (things that work in a few places such as destinations, fenced code info, etc: character escapes and -references), or text (rich inline text: autolinks, character escapes and -references, code, hard breaks, HTML, images, links, emphasis, strong). The fields at such objects are character codes, mapping to constructs as values. The built in constructs are an extension. See it and the existing extensions for inspiration. HtmlExtension An HTML extension is an object whose fields are either enter or exit (reflecting whether a token is entered or exited). The values at such objects are names of tokens mapping to handlers. See the existing extensions for inspiration. List of extensions micromark/micromark-extension-directive \u2014 support directives (generic extensions) micromark/micromark-extension-footnote \u2014 support footnotes micromark/micromark-extension-frontmatter \u2014 support frontmatter (YAML, TOML, etc) micromark/micromark-extension-gfm \u2014 support GFM (GitHub Flavored Markdown) micromark/micromark-extension-gfm-autolink-literal \u2014 support GFM autolink literals micromark/micromark-extension-gfm-strikethrough \u2014 support GFM strikethrough micromark/micromark-extension-gfm-table \u2014 support GFM tables micromark/micromark-extension-gfm-tagfilter \u2014 support GFM tagfilter micromark/micromark-extension-gfm-task-list-item \u2014 support GFM tasklists micromark/micromark-extension-math \u2014 support math micromark/micromark-extension-mdx \u2014 support MDX micromark/micromark-extension-mdxjs \u2014 support MDX.js micromark/micromark-extension-mdx-expression \u2014 support MDX (or MDX.js) expressions micromark/micromark-extension-mdx-jsx \u2014 support MDX (or MDX.js) JSX micromark/micromark-extension-mdx-md \u2014 support misc MDX changes micromark/micromark-extension-mdxjs-esm \u2014 support MDX.js import/exports Syntax tree A higher level project, mdast-util-from-markdown , can give you an AST. var fromMarkdown = require ( 'mdast-util-from-markdown' ) var result = fromMarkdown ( '## Hello, *world*!' ) console . log ( result . children [ 0 ]) Yields: { type : 'heading' , depth : 2 , children : [ { type : 'text' , value : 'Hello, ' , position : [ Object ]}, { type : 'emphasis' , children : [ Array ], position : [ Object ]}, { type : 'text' , value : '!' , position : [ Object ]} ], position : { start : { line : 1 , column : 1 , offset : 0 }, end : { line : 1 , column : 19 , offset : 18 } } } Another level up is remark , which provides a nice interface and hundreds of plugins. CommonMark The first definition of \u201cMarkdown\u201d gave several examples of how it worked, showing input Markdown and output HTML, and came with a reference implementation ( Markdown.pl ). When new implementations followed, they mostly followed the first definition, but deviated from the first implementation, and added extensions, thus making the format a family of formats. Some years later, an attempt was made to standardize the differences between implementations, by specifying how several edge cases should be handled, through more input and output examples. This is known as CommonMark , and many implementations now work towards some degree of CommonMark compliancy. Still, CommonMark describes what the output in HTML should be given some input, which leaves many edge cases up for debate, and does not answer what should happen for other output formats. micromark passes all tests from CommonMark and has many more tests to match the CommonMark reference parsers. Finally, it comes with CMSM , which describes how to parse markup, instead of documenting input and output examples. Grammar The syntax of markdown can be described in Backus\u2013Naur form (BNF) as: markdown = .* No, that\u2019s not a typo : markdown has no syntax errors; anything thrown at it renders something . Test micromark is tested with the \\~650 CommonMark tests and more than 1.2k extra tests confirmed with CM reference parsers. These tests reach all branches in the code, thus this project has 100% coverage. Finally, we use fuzz testing to ensure micromark is stable, reliable, and secure. To build, format, and test the codebase, use $ npm test after clone and install. The $ npm run test-api and $ npm run test-coverage scripts check the unit tests and their coverage, respectively. The $ npm run test-types script checks TypeScript definitions. The $ npm run test-fuzz script does fuzz testing for 15 minutes. The timeout is provided by GNU coreutils timeout(1) , which might not be available on your system. Either install it or remove it from the script. Size & debug micromark is really small. A ton of time went into making sure it minifies well, by the way code is written but also through custom build scripts to pre-evaluate certain expressions. Furthermore, care went into making it compress well with GZip and Brotli. Normally, you\u2019ll use the pre-evaluated version of micromark, which is published in the dist/ folder and has entries in the root. While developing or debugging, you can switch to use the source, which is published in the lib/ folder, and comes instrumented with assertions and debug messages. To see debug messages, run your script with a DEBUG env variable, such as with DEBUG=\"micromark\" node script.js . To generate the codebase, use $ npm run generate after clone and install. The $ npm run generate-dist script specifically takes lib/ and generates dist/ . The $ npm run generate-size script checks the bundle size of dist/ . Comparison There are many other markdown parsers out there, and maybe they\u2019re better suited to your use case! Here is a short comparison of a couple of \u2019em in JavaScript. Note that this list is made by the folks who make micromark and remark , so there is some bias. Note : these are, in fact, not really comparable: micromark (and remark) focus on completely different things than other markdown parsers do. Sure, you can generate HTML from markdown with them, but micromark (and remark) are created for (abstract or concrete) syntax trees\u2014to inspect, transform, and generate content, so that you can make things like MDX , Prettier , or Gatsby . micromark micromark can be used in two different ways. It can either be used, optionally with existing extensions, to get HTML pretty easily. Or, it can give tremendous power, such as access to all tokens with positional info, at the cost of being hard to get into. It\u2019s super small, pretty fast, and has 100% CommonMark compliance. It has syntax extensions, such as supporting 100% GFM compliance (with micromark-extension-gfm ), but they\u2019re rather complex to write. It\u2019s the newest parser on the block. If you\u2019re looking for fine grained control, use micromark. remark remark is the most popular markdown parser. It\u2019s built on top of micromark and boasts syntax trees. For an analogy, it\u2019s like if Babel, ESLint, and more, were one project. It supports the syntax extensions that micromark has (so it\u2019s 100% CM compliant and can be 100% GFM compliant), but most of the work is done in plugins that transform or inspect the tree. Transforming the tree is relatively easy: it\u2019s a JSON object that can be manipulated directly. remark is stable, widely used, and extremely powerful for handling complex data. If you\u2019re looking to inspect or transform lots of content, use remark . marked marked is the oldest markdown parser on the block. It\u2019s been around for ages, is battle tested, small, popular, and has a bunch of extensions, but doesn\u2019t match CommonMark or GFM, and is unsafe by default. If you have markdown you trust and want to turn it into HTML without a fuss, use marked . markdown-it markdown-it is a good, stable, and essentially CommonMark compliant markdown parser, with (optional) support for some GFM features as well. It\u2019s used a lot as a direct dependency in packages, but is rather big. It shines at syntax extensions, where you want to support not just markdown, but your (company\u2019s) version of markdown. If you\u2019re in Node and have CommonMark-compliant (or funky) markdown and want to turn it into HTML, use markdown-it . Others There are lots of other markdown parsers! Some say they\u2019re small, or fast, or that they\u2019re CommonMark compliant \u2014 but that\u2019s not always true. This list is not supposed to be exhaustive. This list of markdown parsers is a snapshot in time of why (not) to use (alternatives to) micromark : they\u2019re all good choices, depending on what your goals are. Version The open beta of micromark starts at version 2.0.0 (there was a different package published on npm as micromark before). micromark will adhere to semver at 3.0.0 . Use tilde ranges for now: \"micromark\": \"~2.10.1\" . Security The typical security aspect discussed for markdown is cross-site scripting (XSS) attacks. It\u2019s safe to compile markdown to HTML if it does not include embedded HTML nor uses dangerous protocols in links (such as javascript: or data: ). micromark is safe by default when embedded HTML or dangerous protocols are used too, as it encodes or drops them. Turning on the allowDangerousHtml or allowDangerousProtocol options for user-provided markdown opens you up to XSS attacks. Another aspect is DDoS attacks. For example, an attacker could throw a 100mb file at micromark, in which case the JavaScript engine will run out of memory and crash. It is also possible to crash micromark with smaller payloads, notably when thousands of links, images, emphasis, or strong are opened but not closed. It is wise to cap the accepted size of input (500kb can hold a big book) and to process content in a different thread or worker so that it can be stopped when needed. Using extensions might also be unsafe, refer to their documentation for more information. For more information on markdown sanitation, see improper-markup-sanitization.md by @chalker . See security.md in micromark/.github for how to submit a security report. Contribute See contributing.md in micromark/.github for ways to get started. See support.md for ways to get help. This project has a code of conduct . By interacting with this repository, organisation, or community you agree to abide by its terms. Sponsor Support this effort and give back by sponsoring on OpenCollective ! Salesforce \ud83c\udfc5 Gatsby \ud83e\udd47 Vercel \ud83e\udd47 Netlify Holloway ThemeIsle Boost Hub Expo You? Origin story Over the summer of 2018, micromark was planned, and the idea shared in August with a couple of friends and potential sponsors. The problem I ( @wooorm ) had was that issues were piling up in remark and other repos, but my day job (teaching) was fun, fulfilling, and deserved time too. It was getting hard to combine the two. The thought was to feed two birds with one scone: fix the issues in remark with a new markdown parser (codename marydown) while being financially supported by sponsors building fancy stuff on top, such as Gatsby, Contentful, and Vercel (ZEIT at the time). @johno was making MDX on top of remark at the time (important historical note: several other folks were working on JSX + markdown too). We bundled our strengths: MDX was getting some traction and we thought together we could perhaps make something sustainable. In November 2018, we launched with the idea for micromark to solve all existing bugs, sustaining the existing hundreds of projects, and furthering the exciting high-level project MDX. We pushed a single name: unified (which back then was a small but essential part of the chain). Gatsby and Vercel were immediate sponsors. We didn\u2019t know whether it would work, and it worked. But now you have a new problem: you are getting some financial support (much more than other open source projects) but it\u2019s not enough money for rent, and too much money to print stickers with. You still have your job and issues are still piling up. At the start of summer 2019, after a couple months of saving up donations, I quit my job and worked on unified through fall. That got the number of open issues down significantly and set up a strong governance and maintenance system for the collective. But when the time came to work on micromark, the money was gone again, so I contracted through winter 2019, and in spring 2020 I could do about half open source, half contracting. One of the contracting gigs was to write a new MDX parser, for which I also documented how to do that with a state machine in prose . That gave me the insight into how the same could be done for markdown: I drafted CMSM , which was some of the core ideas for micromark, but in prose. In May 2020, Salesforce reached out: they saw the bugs in remark, how micromark could help, and the initial work on CMSM. And they had thousands of Markdown files. In a for open source uncharacteristic move, they decided to fund my work on micromark. A large part of what maintaining open source means, is putting out fires, triaging issues, and making sure users and sponsors are happy, so it was amazing to get several months to just focus and make something new. I remember feeling that this project would probably be the hardest thing I\u2019d work on: yeah, parsers are pretty difficult, but markdown is on another level. Markdown is such a giant stack of edge cases on edge cases on even more weirdness, what a mess. On August 20, 2020, I released 2.0.0 , the first working version of micromark. And it\u2019s hard to describe how that moment felt. It was great. License MIT \u00a9 Titus Wormer","title":"Readme"},{"location":"node_modules/micromark/readme/#intro","text":"micromark is a long awaited markdown parser. It uses a state machine to parse the entirety of markdown into concrete tokens. It\u2019s the smallest 100% CommonMark compliant markdown parser in JavaScript. It was made to replace the internals of remark-parse , the most popular markdown parser. Its API compiles to HTML, but its parts are made to be used separately, so as to generate syntax trees ( mdast-util-from-markdown ) or compile to other output formats. It\u2019s in open beta: up next are CMSM and CSTs. for updates, see Twitter for more about us, see unifiedjs.com for questions, see Discussions to help, see contribute or sponsor below","title":"Intro"},{"location":"node_modules/micromark/readme/#contents","text":"Install Use API micromark(doc[, encoding][, options]) micromarkStream(options?) Extensions SyntaxExtension HtmlExtension List of extensions Syntax tree CommonMark Grammar Test Size & debug Comparison Version Security Contribute Sponsor Origin story License","title":"Contents"},{"location":"node_modules/micromark/readme/#install","text":"npm : npm install micromark","title":"Install"},{"location":"node_modules/micromark/readme/#use","text":"Typical use (buffering): var micromark = require ( 'micromark' ) console . log ( micromark ( '## Hello, *world*!' )) Yields: < h2 > Hello, < em > world </ em > ! </ h2 > The same can be done with ESM (in Node 10+, browsers that support it, or with a bundler), in an example.mjs file, like so: import micromark from 'micromark' console . log ( micromark ( '## Hello, *world*!' )) You can pass extensions (in this case micromark-extension-gfm ): var micromark = require ( 'micromark' ) var gfmSyntax = require ( 'micromark-extension-gfm' ) var gfmHtml = require ( 'micromark-extension-gfm/html' ) var doc = '* [x] contact@example.com ~~strikethrough~~' var result = micromark ( doc , { extensions : [ gfmSyntax ()], htmlExtensions : [ gfmHtml ] }) console . log ( result ) Yields: < ul > < li >< input checked = \"\" disabled = \"\" type = \"checkbox\" > < a href = \"mailto:contact@example.com\" > contact@example.com </ a > < del > strikethrough </ del ></ li > </ ul > Streaming interface: var fs = require ( 'fs' ) var micromarkStream = require ( 'micromark/stream' ) fs . createReadStream ( 'example.md' ) . on ( 'error' , handleError ) . pipe ( micromarkStream ()) . pipe ( process . stdout ) function handleError ( err ) { // Handle your error here! throw err }","title":"Use"},{"location":"node_modules/micromark/readme/#api","text":"This section documents the API. The parts can be used separately, but this isn\u2019t documented yet.","title":"API"},{"location":"node_modules/micromark/readme/#micromarkdoc-encoding-options","text":"Compile markdown to HTML.","title":"micromark(doc[, encoding][, options])"},{"location":"node_modules/micromark/readme/#parameters","text":"","title":"Parameters"},{"location":"node_modules/micromark/readme/#doc","text":"Markdown to parse ( string or Buffer )","title":"doc"},{"location":"node_modules/micromark/readme/#encoding","text":"Character encoding to understand doc as when it\u2019s a Buffer ( string , default: 'utf8' ).","title":"encoding"},{"location":"node_modules/micromark/readme/#optionsdefaultlineending","text":"Value to use for line endings not in doc ( string , default: first line ending or '\\n' ). Generally, micromark copies line endings ( '\\r' , '\\n' , '\\r\\n' ) in the markdown document over to the compiled HTML. In some cases, such as > a , CommonMark requires that extra line endings are added: <blockquote>\\n<p>a</p>\\n</blockquote> .","title":"options.defaultLineEnding"},{"location":"node_modules/micromark/readme/#optionsallowdangeroushtml","text":"Whether to allow embedded HTML ( boolean , default: false ).","title":"options.allowDangerousHtml"},{"location":"node_modules/micromark/readme/#optionsallowdangerousprotocol","text":"Whether to allow potentially dangerous protocols in links and images ( boolean , default: false ). URLs relative to the current protocol are always allowed (such as, image.jpg ). For links, the allowed protocols are http , https , irc , ircs , mailto , and xmpp . For images, the allowed protocols are http and https .","title":"options.allowDangerousProtocol"},{"location":"node_modules/micromark/readme/#optionsextensions","text":"Array of syntax extensions ( Array.<SyntaxExtension> , default: [] ).","title":"options.extensions"},{"location":"node_modules/micromark/readme/#optionshtmlextensions","text":"Array of HTML extensions ( Array.<HtmlExtension> , default: [] ).","title":"options.htmlExtensions"},{"location":"node_modules/micromark/readme/#returns","text":"string \u2014 Compiled HTML.","title":"Returns"},{"location":"node_modules/micromark/readme/#micromarkstreamoptions","text":"Streaming interface of micromark. Compiles markdown to HTML. options are the same as the buffering API above. Available at require('micromark/stream') . Note that some of the work to parse markdown can be done streaming, but in the end buffering is required. micromark does not handle errors for you, so you must handle errors on whatever streams you pipe into it. As markdown does not know errors, micromark itself does not emit errors.","title":"micromarkStream(options?)"},{"location":"node_modules/micromark/readme/#extensions","text":"There are two types of extensions for micromark: SyntaxExtension and HtmlExtension . They can be passed in extensions or htmlExtensions , respectively.","title":"Extensions"},{"location":"node_modules/micromark/readme/#syntaxextension","text":"A syntax extension is an object whose fields are the names of hooks, referring to where constructs \u201chook\u201d into. content (a block of, well, content: definitions and paragraphs), document (containers such as block quotes and lists), flow (block constructs such as ATX and setext headings, HTML, indented and fenced code, thematic breaks), string (things that work in a few places such as destinations, fenced code info, etc: character escapes and -references), or text (rich inline text: autolinks, character escapes and -references, code, hard breaks, HTML, images, links, emphasis, strong). The fields at such objects are character codes, mapping to constructs as values. The built in constructs are an extension. See it and the existing extensions for inspiration.","title":"SyntaxExtension"},{"location":"node_modules/micromark/readme/#htmlextension","text":"An HTML extension is an object whose fields are either enter or exit (reflecting whether a token is entered or exited). The values at such objects are names of tokens mapping to handlers. See the existing extensions for inspiration.","title":"HtmlExtension"},{"location":"node_modules/micromark/readme/#list-of-extensions","text":"micromark/micromark-extension-directive \u2014 support directives (generic extensions) micromark/micromark-extension-footnote \u2014 support footnotes micromark/micromark-extension-frontmatter \u2014 support frontmatter (YAML, TOML, etc) micromark/micromark-extension-gfm \u2014 support GFM (GitHub Flavored Markdown) micromark/micromark-extension-gfm-autolink-literal \u2014 support GFM autolink literals micromark/micromark-extension-gfm-strikethrough \u2014 support GFM strikethrough micromark/micromark-extension-gfm-table \u2014 support GFM tables micromark/micromark-extension-gfm-tagfilter \u2014 support GFM tagfilter micromark/micromark-extension-gfm-task-list-item \u2014 support GFM tasklists micromark/micromark-extension-math \u2014 support math micromark/micromark-extension-mdx \u2014 support MDX micromark/micromark-extension-mdxjs \u2014 support MDX.js micromark/micromark-extension-mdx-expression \u2014 support MDX (or MDX.js) expressions micromark/micromark-extension-mdx-jsx \u2014 support MDX (or MDX.js) JSX micromark/micromark-extension-mdx-md \u2014 support misc MDX changes micromark/micromark-extension-mdxjs-esm \u2014 support MDX.js import/exports","title":"List of extensions"},{"location":"node_modules/micromark/readme/#syntax-tree","text":"A higher level project, mdast-util-from-markdown , can give you an AST. var fromMarkdown = require ( 'mdast-util-from-markdown' ) var result = fromMarkdown ( '## Hello, *world*!' ) console . log ( result . children [ 0 ]) Yields: { type : 'heading' , depth : 2 , children : [ { type : 'text' , value : 'Hello, ' , position : [ Object ]}, { type : 'emphasis' , children : [ Array ], position : [ Object ]}, { type : 'text' , value : '!' , position : [ Object ]} ], position : { start : { line : 1 , column : 1 , offset : 0 }, end : { line : 1 , column : 19 , offset : 18 } } } Another level up is remark , which provides a nice interface and hundreds of plugins.","title":"Syntax tree"},{"location":"node_modules/micromark/readme/#commonmark","text":"The first definition of \u201cMarkdown\u201d gave several examples of how it worked, showing input Markdown and output HTML, and came with a reference implementation ( Markdown.pl ). When new implementations followed, they mostly followed the first definition, but deviated from the first implementation, and added extensions, thus making the format a family of formats. Some years later, an attempt was made to standardize the differences between implementations, by specifying how several edge cases should be handled, through more input and output examples. This is known as CommonMark , and many implementations now work towards some degree of CommonMark compliancy. Still, CommonMark describes what the output in HTML should be given some input, which leaves many edge cases up for debate, and does not answer what should happen for other output formats. micromark passes all tests from CommonMark and has many more tests to match the CommonMark reference parsers. Finally, it comes with CMSM , which describes how to parse markup, instead of documenting input and output examples.","title":"CommonMark"},{"location":"node_modules/micromark/readme/#grammar","text":"The syntax of markdown can be described in Backus\u2013Naur form (BNF) as: markdown = .* No, that\u2019s not a typo : markdown has no syntax errors; anything thrown at it renders something .","title":"Grammar"},{"location":"node_modules/micromark/readme/#test","text":"micromark is tested with the \\~650 CommonMark tests and more than 1.2k extra tests confirmed with CM reference parsers. These tests reach all branches in the code, thus this project has 100% coverage. Finally, we use fuzz testing to ensure micromark is stable, reliable, and secure. To build, format, and test the codebase, use $ npm test after clone and install. The $ npm run test-api and $ npm run test-coverage scripts check the unit tests and their coverage, respectively. The $ npm run test-types script checks TypeScript definitions. The $ npm run test-fuzz script does fuzz testing for 15 minutes. The timeout is provided by GNU coreutils timeout(1) , which might not be available on your system. Either install it or remove it from the script.","title":"Test"},{"location":"node_modules/micromark/readme/#size-debug","text":"micromark is really small. A ton of time went into making sure it minifies well, by the way code is written but also through custom build scripts to pre-evaluate certain expressions. Furthermore, care went into making it compress well with GZip and Brotli. Normally, you\u2019ll use the pre-evaluated version of micromark, which is published in the dist/ folder and has entries in the root. While developing or debugging, you can switch to use the source, which is published in the lib/ folder, and comes instrumented with assertions and debug messages. To see debug messages, run your script with a DEBUG env variable, such as with DEBUG=\"micromark\" node script.js . To generate the codebase, use $ npm run generate after clone and install. The $ npm run generate-dist script specifically takes lib/ and generates dist/ . The $ npm run generate-size script checks the bundle size of dist/ .","title":"Size &amp; debug"},{"location":"node_modules/micromark/readme/#comparison","text":"There are many other markdown parsers out there, and maybe they\u2019re better suited to your use case! Here is a short comparison of a couple of \u2019em in JavaScript. Note that this list is made by the folks who make micromark and remark , so there is some bias. Note : these are, in fact, not really comparable: micromark (and remark) focus on completely different things than other markdown parsers do. Sure, you can generate HTML from markdown with them, but micromark (and remark) are created for (abstract or concrete) syntax trees\u2014to inspect, transform, and generate content, so that you can make things like MDX , Prettier , or Gatsby .","title":"Comparison"},{"location":"node_modules/micromark/readme/#micromark","text":"micromark can be used in two different ways. It can either be used, optionally with existing extensions, to get HTML pretty easily. Or, it can give tremendous power, such as access to all tokens with positional info, at the cost of being hard to get into. It\u2019s super small, pretty fast, and has 100% CommonMark compliance. It has syntax extensions, such as supporting 100% GFM compliance (with micromark-extension-gfm ), but they\u2019re rather complex to write. It\u2019s the newest parser on the block. If you\u2019re looking for fine grained control, use micromark.","title":"micromark"},{"location":"node_modules/micromark/readme/#remark","text":"remark is the most popular markdown parser. It\u2019s built on top of micromark and boasts syntax trees. For an analogy, it\u2019s like if Babel, ESLint, and more, were one project. It supports the syntax extensions that micromark has (so it\u2019s 100% CM compliant and can be 100% GFM compliant), but most of the work is done in plugins that transform or inspect the tree. Transforming the tree is relatively easy: it\u2019s a JSON object that can be manipulated directly. remark is stable, widely used, and extremely powerful for handling complex data. If you\u2019re looking to inspect or transform lots of content, use remark .","title":"remark"},{"location":"node_modules/micromark/readme/#marked","text":"marked is the oldest markdown parser on the block. It\u2019s been around for ages, is battle tested, small, popular, and has a bunch of extensions, but doesn\u2019t match CommonMark or GFM, and is unsafe by default. If you have markdown you trust and want to turn it into HTML without a fuss, use marked .","title":"marked"},{"location":"node_modules/micromark/readme/#markdown-it","text":"markdown-it is a good, stable, and essentially CommonMark compliant markdown parser, with (optional) support for some GFM features as well. It\u2019s used a lot as a direct dependency in packages, but is rather big. It shines at syntax extensions, where you want to support not just markdown, but your (company\u2019s) version of markdown. If you\u2019re in Node and have CommonMark-compliant (or funky) markdown and want to turn it into HTML, use markdown-it .","title":"markdown-it"},{"location":"node_modules/micromark/readme/#others","text":"There are lots of other markdown parsers! Some say they\u2019re small, or fast, or that they\u2019re CommonMark compliant \u2014 but that\u2019s not always true. This list is not supposed to be exhaustive. This list of markdown parsers is a snapshot in time of why (not) to use (alternatives to) micromark : they\u2019re all good choices, depending on what your goals are.","title":"Others"},{"location":"node_modules/micromark/readme/#version","text":"The open beta of micromark starts at version 2.0.0 (there was a different package published on npm as micromark before). micromark will adhere to semver at 3.0.0 . Use tilde ranges for now: \"micromark\": \"~2.10.1\" .","title":"Version"},{"location":"node_modules/micromark/readme/#security","text":"The typical security aspect discussed for markdown is cross-site scripting (XSS) attacks. It\u2019s safe to compile markdown to HTML if it does not include embedded HTML nor uses dangerous protocols in links (such as javascript: or data: ). micromark is safe by default when embedded HTML or dangerous protocols are used too, as it encodes or drops them. Turning on the allowDangerousHtml or allowDangerousProtocol options for user-provided markdown opens you up to XSS attacks. Another aspect is DDoS attacks. For example, an attacker could throw a 100mb file at micromark, in which case the JavaScript engine will run out of memory and crash. It is also possible to crash micromark with smaller payloads, notably when thousands of links, images, emphasis, or strong are opened but not closed. It is wise to cap the accepted size of input (500kb can hold a big book) and to process content in a different thread or worker so that it can be stopped when needed. Using extensions might also be unsafe, refer to their documentation for more information. For more information on markdown sanitation, see improper-markup-sanitization.md by @chalker . See security.md in micromark/.github for how to submit a security report.","title":"Security"},{"location":"node_modules/micromark/readme/#contribute","text":"See contributing.md in micromark/.github for ways to get started. See support.md for ways to get help. This project has a code of conduct . By interacting with this repository, organisation, or community you agree to abide by its terms.","title":"Contribute"},{"location":"node_modules/micromark/readme/#sponsor","text":"Support this effort and give back by sponsoring on OpenCollective ! Salesforce \ud83c\udfc5 Gatsby \ud83e\udd47 Vercel \ud83e\udd47 Netlify Holloway ThemeIsle Boost Hub Expo You?","title":"Sponsor"},{"location":"node_modules/micromark/readme/#origin-story","text":"Over the summer of 2018, micromark was planned, and the idea shared in August with a couple of friends and potential sponsors. The problem I ( @wooorm ) had was that issues were piling up in remark and other repos, but my day job (teaching) was fun, fulfilling, and deserved time too. It was getting hard to combine the two. The thought was to feed two birds with one scone: fix the issues in remark with a new markdown parser (codename marydown) while being financially supported by sponsors building fancy stuff on top, such as Gatsby, Contentful, and Vercel (ZEIT at the time). @johno was making MDX on top of remark at the time (important historical note: several other folks were working on JSX + markdown too). We bundled our strengths: MDX was getting some traction and we thought together we could perhaps make something sustainable. In November 2018, we launched with the idea for micromark to solve all existing bugs, sustaining the existing hundreds of projects, and furthering the exciting high-level project MDX. We pushed a single name: unified (which back then was a small but essential part of the chain). Gatsby and Vercel were immediate sponsors. We didn\u2019t know whether it would work, and it worked. But now you have a new problem: you are getting some financial support (much more than other open source projects) but it\u2019s not enough money for rent, and too much money to print stickers with. You still have your job and issues are still piling up. At the start of summer 2019, after a couple months of saving up donations, I quit my job and worked on unified through fall. That got the number of open issues down significantly and set up a strong governance and maintenance system for the collective. But when the time came to work on micromark, the money was gone again, so I contracted through winter 2019, and in spring 2020 I could do about half open source, half contracting. One of the contracting gigs was to write a new MDX parser, for which I also documented how to do that with a state machine in prose . That gave me the insight into how the same could be done for markdown: I drafted CMSM , which was some of the core ideas for micromark, but in prose. In May 2020, Salesforce reached out: they saw the bugs in remark, how micromark could help, and the initial work on CMSM. And they had thousands of Markdown files. In a for open source uncharacteristic move, they decided to fund my work on micromark. A large part of what maintaining open source means, is putting out fires, triaging issues, and making sure users and sponsors are happy, so it was amazing to get several months to just focus and make something new. I remember feeling that this project would probably be the hardest thing I\u2019d work on: yeah, parsers are pretty difficult, but markdown is on another level. Markdown is such a giant stack of edge cases on edge cases on even more weirdness, what a mess. On August 20, 2020, I released 2.0.0 , the first working version of micromark. And it\u2019s hard to describe how that moment felt. It was great.","title":"Origin story"},{"location":"node_modules/micromark/readme/#license","text":"MIT \u00a9 Titus Wormer","title":"License"},{"location":"node_modules/micromark-extension-footnote/readme/","text":"micromark-extension-footnote micromark extension to support footnotes. As there is no spec for footnotes in markdown, this extension stays as close to references and list items in CommonMark, while being inspired by the HTML output of Pandoc notes. This package provides the low-level modules for integrating with the micromark tokenizer and the micromark HTML compiler. You probably shouldn\u2019t use this package directly, but instead use mdast-util-footnote with mdast or remark-footnotes with remark . Install npm : npm install micromark-extension-footnote Use Say we have the following file, example.md : Here is a footnote call,[^1] and another.[^longnote] [ ^1 ]: Here is the footnote. [ ^longnote ]: Here\u2019s one with multiple blocks. Subsequent paragraphs are indented to show that they belong to the previous footnote. { some.code } The whole paragraph can be indented, or just the first line. In this way, multi-paragraph footnotes work like multi-paragraph list items. This paragraph won\u2019t be part of the note, because it isn\u2019t indented. Here is an inline note.^[Inlines notes are easier to write, since you don\u2019t have to pick an identifier and move down to type the note.] And our script, example.js , looks as follows: var fs = require ( 'fs' ) var micromark = require ( 'micromark' ) var footnote = require ( 'micromark-extension-footnote' ) var footnoteHtml = require ( 'micromark-extension-footnote/html' ) var doc = fs . readFileSync ( 'example.md' ) var result = micromark ( doc , { extensions : [ footnote ({ inlineNotes : true })], htmlExtensions : [ footnoteHtml ] }) console . log ( result ) Now, running node example yields: < p > Here is a footnote call, < a href = \"#fn1\" class = \"footnote-ref\" id = \"fnref1\" >< sup > 1 </ sup ></ a > and another. < a href = \"#fn2\" class = \"footnote-ref\" id = \"fnref2\" >< sup > 2 </ sup ></ a ></ p > < p > This paragraph won\u2019t be part of the note, because it isn\u2019t indented. </ p > < p > Here is an inline note. < a href = \"#fn1\" class = \"footnote-ref\" id = \"fnref1\" >< sup > 1 </ sup ></ a ></ p > < div class = \"footnotes\" > < hr /> < ol > < li id = \"fn1\" > < p > Here is the footnote. < a href = \"#fnref1\" class = \"footnote-back\" > \u21a9\ufe0e </ a ></ p > </ li > < li id = \"fn2\" > < p > Here\u2019s one with multiple blocks. </ p > < p > Subsequent paragraphs are indented to show that they belong to the previous footnote. </ p > < pre >< code > { some.code } </ code ></ pre > < p > The whole paragraph can be indented, or just the first line. In this way, multi-paragraph footnotes work like multi-paragraph list items. < a href = \"#fnref2\" class = \"footnote-back\" > \u21a9\ufe0e </ a ></ p > </ li > < li id = \"fn3\" > < p > Inlines notes are easier to write, since you don\u2019t have to pick an identifier and move down to type the note. < a href = \"#fnref3\" class = \"footnote-back\" > \u21a9\ufe0e </ a ></ p > </ li > </ ol > </ div > API html syntax(options?) Note: syntax is the default export of this module, html is available at micromark-extension-footnote/html . Support footnotes. The export of syntax is a function that can be called with options and returns an extension for the micromark parser (to tokenize footnotes; can be passed in extensions ). The export of html is an extension for the default HTML compiler (to compile as HTML; can be passed in htmlExtensions ). options.inlineNotes Whether to support ^[inline notes] ( boolean , default: false ). Related remarkjs/remark \u2014 markdown processor powered by plugins micromark/micromark \u2014 the smallest commonmark-compliant markdown parser that exists remarkjs/remark-footnotes \u2014 remark plugin to support footnotes syntax-tree/mdast-util-footnote \u2014 mdast utility to support footnotes syntax-tree/mdast-util-from-markdown \u2014 mdast parser using micromark to create mdast from markdown syntax-tree/mdast-util-to-markdown \u2014 mdast serializer to create markdown from mdast Contribute See contributing.md in micromark/.github for ways to get started. See support.md for ways to get help. This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms. License MIT \u00a9 Titus Wormer","title":"micromark-extension-footnote"},{"location":"node_modules/micromark-extension-footnote/readme/#micromark-extension-footnote","text":"micromark extension to support footnotes. As there is no spec for footnotes in markdown, this extension stays as close to references and list items in CommonMark, while being inspired by the HTML output of Pandoc notes. This package provides the low-level modules for integrating with the micromark tokenizer and the micromark HTML compiler. You probably shouldn\u2019t use this package directly, but instead use mdast-util-footnote with mdast or remark-footnotes with remark .","title":"micromark-extension-footnote"},{"location":"node_modules/micromark-extension-footnote/readme/#install","text":"npm : npm install micromark-extension-footnote","title":"Install"},{"location":"node_modules/micromark-extension-footnote/readme/#use","text":"Say we have the following file, example.md : Here is a footnote call,[^1] and another.[^longnote] [ ^1 ]: Here is the footnote. [ ^longnote ]: Here\u2019s one with multiple blocks. Subsequent paragraphs are indented to show that they belong to the previous footnote. { some.code } The whole paragraph can be indented, or just the first line. In this way, multi-paragraph footnotes work like multi-paragraph list items. This paragraph won\u2019t be part of the note, because it isn\u2019t indented. Here is an inline note.^[Inlines notes are easier to write, since you don\u2019t have to pick an identifier and move down to type the note.] And our script, example.js , looks as follows: var fs = require ( 'fs' ) var micromark = require ( 'micromark' ) var footnote = require ( 'micromark-extension-footnote' ) var footnoteHtml = require ( 'micromark-extension-footnote/html' ) var doc = fs . readFileSync ( 'example.md' ) var result = micromark ( doc , { extensions : [ footnote ({ inlineNotes : true })], htmlExtensions : [ footnoteHtml ] }) console . log ( result ) Now, running node example yields: < p > Here is a footnote call, < a href = \"#fn1\" class = \"footnote-ref\" id = \"fnref1\" >< sup > 1 </ sup ></ a > and another. < a href = \"#fn2\" class = \"footnote-ref\" id = \"fnref2\" >< sup > 2 </ sup ></ a ></ p > < p > This paragraph won\u2019t be part of the note, because it isn\u2019t indented. </ p > < p > Here is an inline note. < a href = \"#fn1\" class = \"footnote-ref\" id = \"fnref1\" >< sup > 1 </ sup ></ a ></ p > < div class = \"footnotes\" > < hr /> < ol > < li id = \"fn1\" > < p > Here is the footnote. < a href = \"#fnref1\" class = \"footnote-back\" > \u21a9\ufe0e </ a ></ p > </ li > < li id = \"fn2\" > < p > Here\u2019s one with multiple blocks. </ p > < p > Subsequent paragraphs are indented to show that they belong to the previous footnote. </ p > < pre >< code > { some.code } </ code ></ pre > < p > The whole paragraph can be indented, or just the first line. In this way, multi-paragraph footnotes work like multi-paragraph list items. < a href = \"#fnref2\" class = \"footnote-back\" > \u21a9\ufe0e </ a ></ p > </ li > < li id = \"fn3\" > < p > Inlines notes are easier to write, since you don\u2019t have to pick an identifier and move down to type the note. < a href = \"#fnref3\" class = \"footnote-back\" > \u21a9\ufe0e </ a ></ p > </ li > </ ol > </ div >","title":"Use"},{"location":"node_modules/micromark-extension-footnote/readme/#api","text":"","title":"API"},{"location":"node_modules/micromark-extension-footnote/readme/#html","text":"","title":"html"},{"location":"node_modules/micromark-extension-footnote/readme/#syntaxoptions","text":"Note: syntax is the default export of this module, html is available at micromark-extension-footnote/html . Support footnotes. The export of syntax is a function that can be called with options and returns an extension for the micromark parser (to tokenize footnotes; can be passed in extensions ). The export of html is an extension for the default HTML compiler (to compile as HTML; can be passed in htmlExtensions ).","title":"syntax(options?)"},{"location":"node_modules/micromark-extension-footnote/readme/#optionsinlinenotes","text":"Whether to support ^[inline notes] ( boolean , default: false ).","title":"options.inlineNotes"},{"location":"node_modules/micromark-extension-footnote/readme/#related","text":"remarkjs/remark \u2014 markdown processor powered by plugins micromark/micromark \u2014 the smallest commonmark-compliant markdown parser that exists remarkjs/remark-footnotes \u2014 remark plugin to support footnotes syntax-tree/mdast-util-footnote \u2014 mdast utility to support footnotes syntax-tree/mdast-util-from-markdown \u2014 mdast parser using micromark to create mdast from markdown syntax-tree/mdast-util-to-markdown \u2014 mdast serializer to create markdown from mdast","title":"Related"},{"location":"node_modules/micromark-extension-footnote/readme/#contribute","text":"See contributing.md in micromark/.github for ways to get started. See support.md for ways to get help. This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms.","title":"Contribute"},{"location":"node_modules/micromark-extension-footnote/readme/#license","text":"MIT \u00a9 Titus Wormer","title":"License"},{"location":"node_modules/micromark-extension-frontmatter/readme/","text":"micromark-extension-frontmatter micromark extension to support frontmatter (YAML, TOML, etc). As there is no spec for frontmatter in markdown, this extension follows how YAML frontmatter works on github.com. For the HTML part, instead of rendering YAML, it is ignored. Other types of frontmatter can be parsed, which will by default also work the same as on github.com. This package provides the low-level modules for integrating with the micromark tokenizer and the micromark HTML compiler. You probably shouldn\u2019t use this package directly, but instead use mdast-util-frontmatter with mdast or remark-frontmatter with remark . Install npm : npm install micromark-extension-frontmatter API html(options) syntax(options) Note: syntax is the default export of this module, html is available at micromark-extension-frontmatter/html . Support frontmatter (YAML, TOML, and more). The exports are functions that can be called with options and return extensions for the micromark parser (to tokenize frontmatter; can be passed in extensions ) and the default HTML compiler (to ignore frontmatter; can be passed in htmlExtensions ). options One preset or Matter , or an array of them, defining all the supported frontmatters (default: 'yaml' ). preset Either 'yaml' or 'toml' : 'yaml' \u2014 matter defined as {type: 'yaml', marker: '-'} 'toml' \u2014 matter defined as {type: 'toml', marker: '+'} Matter An object with a type and either a marker or a fence : type ( string ) \u2014 Type to tokenize as marker ( string or {open: string, close: string} ) \u2014 Character used to construct fences. By providing an object with open and close . different characters can be used for opening and closing fences. For example the character '-' will result in '---' being used as the fence fence ( string or {open: string, close: string} ) \u2014 String used as the complete fence. By providing an object with open and close different values can be used for opening and closing fences. This can be used too if fences contain different characters or lengths other than 3 anywhere ( boolean , default: false ) \u2013 if true , matter can be found anywhere in the document. If false (default), only matter at the start of the document is recognized Example For {type: 'yaml', marker: '-'} : --- key : value --- For {type: 'custom', marker: {open: '<', close: '>'}} : <<< data >>> For {type: 'custom', fence: '+=+=+=+'} : +=+=+=+ data +=+=+=+ For {type: 'json', fence: {open: '{', close: '}'}} : { \"key\" : \"value\" } Related remarkjs/remark \u2014 markdown processor powered by plugins micromark/micromark \u2014 the smallest commonmark-compliant markdown parser that exists remarkjs/remark-frontmatter \u2014 remark plugin to support frontmatter syntax-tree/mdast-util-frontmatter \u2014 mdast utility to support frontmatter syntax-tree/mdast-util-from-markdown \u2014 mdast parser using micromark to create mdast from markdown syntax-tree/mdast-util-to-markdown \u2014 mdast serializer to create markdown from mdast Contribute See contributing.md in micromark/.github for ways to get started. See support.md for ways to get help. This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms. License MIT \u00a9 Titus Wormer","title":"micromark-extension-frontmatter"},{"location":"node_modules/micromark-extension-frontmatter/readme/#micromark-extension-frontmatter","text":"micromark extension to support frontmatter (YAML, TOML, etc). As there is no spec for frontmatter in markdown, this extension follows how YAML frontmatter works on github.com. For the HTML part, instead of rendering YAML, it is ignored. Other types of frontmatter can be parsed, which will by default also work the same as on github.com. This package provides the low-level modules for integrating with the micromark tokenizer and the micromark HTML compiler. You probably shouldn\u2019t use this package directly, but instead use mdast-util-frontmatter with mdast or remark-frontmatter with remark .","title":"micromark-extension-frontmatter"},{"location":"node_modules/micromark-extension-frontmatter/readme/#install","text":"npm : npm install micromark-extension-frontmatter","title":"Install"},{"location":"node_modules/micromark-extension-frontmatter/readme/#api","text":"","title":"API"},{"location":"node_modules/micromark-extension-frontmatter/readme/#htmloptions","text":"","title":"html(options)"},{"location":"node_modules/micromark-extension-frontmatter/readme/#syntaxoptions","text":"Note: syntax is the default export of this module, html is available at micromark-extension-frontmatter/html . Support frontmatter (YAML, TOML, and more). The exports are functions that can be called with options and return extensions for the micromark parser (to tokenize frontmatter; can be passed in extensions ) and the default HTML compiler (to ignore frontmatter; can be passed in htmlExtensions ).","title":"syntax(options)"},{"location":"node_modules/micromark-extension-frontmatter/readme/#options","text":"One preset or Matter , or an array of them, defining all the supported frontmatters (default: 'yaml' ).","title":"options"},{"location":"node_modules/micromark-extension-frontmatter/readme/#preset","text":"Either 'yaml' or 'toml' : 'yaml' \u2014 matter defined as {type: 'yaml', marker: '-'} 'toml' \u2014 matter defined as {type: 'toml', marker: '+'}","title":"preset"},{"location":"node_modules/micromark-extension-frontmatter/readme/#matter","text":"An object with a type and either a marker or a fence : type ( string ) \u2014 Type to tokenize as marker ( string or {open: string, close: string} ) \u2014 Character used to construct fences. By providing an object with open and close . different characters can be used for opening and closing fences. For example the character '-' will result in '---' being used as the fence fence ( string or {open: string, close: string} ) \u2014 String used as the complete fence. By providing an object with open and close different values can be used for opening and closing fences. This can be used too if fences contain different characters or lengths other than 3 anywhere ( boolean , default: false ) \u2013 if true , matter can be found anywhere in the document. If false (default), only matter at the start of the document is recognized","title":"Matter"},{"location":"node_modules/micromark-extension-frontmatter/readme/#example","text":"For {type: 'yaml', marker: '-'} : --- key : value --- For {type: 'custom', marker: {open: '<', close: '>'}} : <<< data >>> For {type: 'custom', fence: '+=+=+=+'} : +=+=+=+ data +=+=+=+ For {type: 'json', fence: {open: '{', close: '}'}} : { \"key\" : \"value\" }","title":"Example"},{"location":"node_modules/micromark-extension-frontmatter/readme/#related","text":"remarkjs/remark \u2014 markdown processor powered by plugins micromark/micromark \u2014 the smallest commonmark-compliant markdown parser that exists remarkjs/remark-frontmatter \u2014 remark plugin to support frontmatter syntax-tree/mdast-util-frontmatter \u2014 mdast utility to support frontmatter syntax-tree/mdast-util-from-markdown \u2014 mdast parser using micromark to create mdast from markdown syntax-tree/mdast-util-to-markdown \u2014 mdast serializer to create markdown from mdast","title":"Related"},{"location":"node_modules/micromark-extension-frontmatter/readme/#contribute","text":"See contributing.md in micromark/.github for ways to get started. See support.md for ways to get help. This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms.","title":"Contribute"},{"location":"node_modules/micromark-extension-frontmatter/readme/#license","text":"MIT \u00a9 Titus Wormer","title":"License"},{"location":"node_modules/micromark-extension-gfm/readme/","text":"micromark-extension-gfm micromark extension to support GitHub flavored markdown. This extension matches either the GFM spec or github.com (default). This package provides the low-level modules for integrating with the micromark tokenizer and the micromark HTML compiler. You probably shouldn\u2019t use this package directly, but instead use mdast-util-gfm with mdast or remark-gfm with remark . Alternatively, the extensions can be used separately: micromark/micromark-extension-gfm-autolink-literal \u2014 support GFM autolink literals micromark/micromark-extension-gfm-strikethrough \u2014 support GFM strikethrough micromark/micromark-extension-gfm-table \u2014 support GFM tables micromark/micromark-extension-gfm-tagfilter \u2014 support GFM tagfilter micromark/micromark-extension-gfm-task-list-item \u2014 support GFM tasklists Install npm : npm install micromark-extension-gfm Use Say we have the following file, example.md : # GFM ## Autolink literals www.example.com, https://example.com, and contact@example.com. ## Strikethrough ~one~ or ~~two~~ tildes. ## Table | a | b | c | d | | - | :- | -: | :-: | ## Tag filter <plaintext> ## Tasklist * [ ] to do * [x] done And our script, example.js , looks as follows: var fs = require ( 'fs' ) var micromark = require ( 'micromark' ) var gfmSyntax = require ( 'micromark-extension-gfm' ) var gfmHtml = require ( 'micromark-extension-gfm/html' ) var doc = fs . readFileSync ( 'example.md' ) var result = micromark ( doc , { allowDangerousHtml : true , extensions : [ gfmSyntax ()], htmlExtensions : [ gfmHtml ] }) console . log ( result ) Now, running node example yields: < h1 > GFM </ h1 > < h2 > Autolink literals </ h2 > < p >< a href = \"http://www.example.com\" > www.example.com </ a > , < a href = \"https://example.com\" > https://example.com </ a > , and < a href = \"mailto:contact@example.com\" > contact@example.com </ a > . </ p > < h2 > Strikethrough </ h2 > < p >< del > one </ del > or < del > two </ del > tildes. </ p > < h2 > Table </ h2 > < table > < thead > < tr > < th > a </ th > < th align = \"left\" > b </ th > < th align = \"right\" > c </ th > < th align = \"center\" > d </ th > </ tr > </ thead > </ table > < h2 > Tag filter </ h2 > &lt; plaintext> < h2 > Tasklist </ h2 > < ul > < li >< input disabled = \"\" type = \"checkbox\" > to do </ li > < li >< input checked = \"\" disabled = \"\" type = \"checkbox\" > done </ li > </ ul > API html syntax(options?) Note: syntax is the default export of this module, html is available at micromark-extension-gfm/html . Support GFM or markdown on github.com. The export of syntax is a function that can be called with options and returns extension for the micromark parser (to tokenize GFM; can be passed in extensions ). The export of html is an extension for the default HTML compiler (can be passed in htmlExtensions ). options options.singleTilde Passed as singleTilde in micromark-extension-gfm-strikethrough . Related remarkjs/remark \u2014 markdown processor powered by plugins syntax-tree/mdast-util-gfm \u2014 mdast utility to support GFM syntax-tree/mdast-util-from-markdown \u2014 mdast parser using micromark to create mdast from markdown syntax-tree/mdast-util-to-markdown \u2014 mdast serializer to create markdown from mdast micromark/micromark \u2014 the smallest commonmark-compliant markdown parser that exists micromark/micromark-extension-gfm-autolink-literal \u2014 support GFM autolink literals micromark/micromark-extension-gfm-strikethrough \u2014 support GFM strikethrough micromark/micromark-extension-gfm-table \u2014 support GFM tables micromark/micromark-extension-gfm-tagfilter \u2014 support GFM tagfilter micromark/micromark-extension-gfm-task-list-item \u2014 support GFM tasklists Contribute See contributing.md in micromark/.github for ways to get started. See support.md for ways to get help. This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms. License MIT \u00a9 Titus Wormer","title":"micromark-extension-gfm"},{"location":"node_modules/micromark-extension-gfm/readme/#micromark-extension-gfm","text":"micromark extension to support GitHub flavored markdown. This extension matches either the GFM spec or github.com (default). This package provides the low-level modules for integrating with the micromark tokenizer and the micromark HTML compiler. You probably shouldn\u2019t use this package directly, but instead use mdast-util-gfm with mdast or remark-gfm with remark . Alternatively, the extensions can be used separately: micromark/micromark-extension-gfm-autolink-literal \u2014 support GFM autolink literals micromark/micromark-extension-gfm-strikethrough \u2014 support GFM strikethrough micromark/micromark-extension-gfm-table \u2014 support GFM tables micromark/micromark-extension-gfm-tagfilter \u2014 support GFM tagfilter micromark/micromark-extension-gfm-task-list-item \u2014 support GFM tasklists","title":"micromark-extension-gfm"},{"location":"node_modules/micromark-extension-gfm/readme/#install","text":"npm : npm install micromark-extension-gfm","title":"Install"},{"location":"node_modules/micromark-extension-gfm/readme/#use","text":"Say we have the following file, example.md : # GFM ## Autolink literals www.example.com, https://example.com, and contact@example.com. ## Strikethrough ~one~ or ~~two~~ tildes. ## Table | a | b | c | d | | - | :- | -: | :-: | ## Tag filter <plaintext> ## Tasklist * [ ] to do * [x] done And our script, example.js , looks as follows: var fs = require ( 'fs' ) var micromark = require ( 'micromark' ) var gfmSyntax = require ( 'micromark-extension-gfm' ) var gfmHtml = require ( 'micromark-extension-gfm/html' ) var doc = fs . readFileSync ( 'example.md' ) var result = micromark ( doc , { allowDangerousHtml : true , extensions : [ gfmSyntax ()], htmlExtensions : [ gfmHtml ] }) console . log ( result ) Now, running node example yields: < h1 > GFM </ h1 > < h2 > Autolink literals </ h2 > < p >< a href = \"http://www.example.com\" > www.example.com </ a > , < a href = \"https://example.com\" > https://example.com </ a > , and < a href = \"mailto:contact@example.com\" > contact@example.com </ a > . </ p > < h2 > Strikethrough </ h2 > < p >< del > one </ del > or < del > two </ del > tildes. </ p > < h2 > Table </ h2 > < table > < thead > < tr > < th > a </ th > < th align = \"left\" > b </ th > < th align = \"right\" > c </ th > < th align = \"center\" > d </ th > </ tr > </ thead > </ table > < h2 > Tag filter </ h2 > &lt; plaintext> < h2 > Tasklist </ h2 > < ul > < li >< input disabled = \"\" type = \"checkbox\" > to do </ li > < li >< input checked = \"\" disabled = \"\" type = \"checkbox\" > done </ li > </ ul >","title":"Use"},{"location":"node_modules/micromark-extension-gfm/readme/#api","text":"","title":"API"},{"location":"node_modules/micromark-extension-gfm/readme/#html","text":"","title":"html"},{"location":"node_modules/micromark-extension-gfm/readme/#syntaxoptions","text":"Note: syntax is the default export of this module, html is available at micromark-extension-gfm/html . Support GFM or markdown on github.com. The export of syntax is a function that can be called with options and returns extension for the micromark parser (to tokenize GFM; can be passed in extensions ). The export of html is an extension for the default HTML compiler (can be passed in htmlExtensions ).","title":"syntax(options?)"},{"location":"node_modules/micromark-extension-gfm/readme/#options","text":"","title":"options"},{"location":"node_modules/micromark-extension-gfm/readme/#optionssingletilde","text":"Passed as singleTilde in micromark-extension-gfm-strikethrough .","title":"options.singleTilde"},{"location":"node_modules/micromark-extension-gfm/readme/#related","text":"remarkjs/remark \u2014 markdown processor powered by plugins syntax-tree/mdast-util-gfm \u2014 mdast utility to support GFM syntax-tree/mdast-util-from-markdown \u2014 mdast parser using micromark to create mdast from markdown syntax-tree/mdast-util-to-markdown \u2014 mdast serializer to create markdown from mdast micromark/micromark \u2014 the smallest commonmark-compliant markdown parser that exists micromark/micromark-extension-gfm-autolink-literal \u2014 support GFM autolink literals micromark/micromark-extension-gfm-strikethrough \u2014 support GFM strikethrough micromark/micromark-extension-gfm-table \u2014 support GFM tables micromark/micromark-extension-gfm-tagfilter \u2014 support GFM tagfilter micromark/micromark-extension-gfm-task-list-item \u2014 support GFM tasklists","title":"Related"},{"location":"node_modules/micromark-extension-gfm/readme/#contribute","text":"See contributing.md in micromark/.github for ways to get started. See support.md for ways to get help. This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms.","title":"Contribute"},{"location":"node_modules/micromark-extension-gfm/readme/#license","text":"MIT \u00a9 Titus Wormer","title":"License"},{"location":"node_modules/micromark-extension-gfm-autolink-literal/readme/","text":"micromark-extension-gfm-autolink-literal micromark extension to support GitHub flavored markdown literal autolinks . This syntax extension matches the GFM spec and how literal autolinks work in several places on github.com. Do note that GH employs two algorithms to autolink: one at parse time, one at compile time (similar to how @mentions are done at compile time). This difference can be observed because character references and escapes are handled differently. But also because issues/PRs/comments omit (perhaps by accident?) the second algorithm for www. , http:// , and https:// links (but not for email links). As this is a syntax extension, it focuses on the first algorithm. The html part of this extension does not operate on an AST and hence can\u2019t perform the second algorithm. mdast-util-gfm-autolink-literal adds support for the second. This package provides the low-level modules for integrating with the micromark tokenizer and the micromark HTML compiler. You probably should use this package with mdast-util-gfm-autolink-literal . Install npm : npm install micromark-extension-gfm-autolink-literal API html syntax Note: syntax is the default export of this module, html is available at micromark-extension-gfm-autolink-literal/html . Support literal autolinks . The exports are extensions for the micromark parser (to tokenize; can be passed in extensions ) and the default HTML compiler (to compile as <a> elements; can be passed in htmlExtensions ). Related remarkjs/remark \u2014 markdown processor powered by plugins micromark/micromark \u2014 the smallest commonmark-compliant markdown parser that exists syntax-tree/mdast-util-gfm-autolink-literal \u2014 mdast utility to support autolink literals syntax-tree/mdast-util-from-markdown \u2014 mdast parser using micromark to create mdast from markdown syntax-tree/mdast-util-to-markdown \u2014 mdast serializer to create markdown from mdast Contribute See contributing.md in micromark/.github for ways to get started. See support.md for ways to get help. This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms. License MIT \u00a9 Titus Wormer","title":"micromark-extension-gfm-autolink-literal"},{"location":"node_modules/micromark-extension-gfm-autolink-literal/readme/#micromark-extension-gfm-autolink-literal","text":"micromark extension to support GitHub flavored markdown literal autolinks . This syntax extension matches the GFM spec and how literal autolinks work in several places on github.com. Do note that GH employs two algorithms to autolink: one at parse time, one at compile time (similar to how @mentions are done at compile time). This difference can be observed because character references and escapes are handled differently. But also because issues/PRs/comments omit (perhaps by accident?) the second algorithm for www. , http:// , and https:// links (but not for email links). As this is a syntax extension, it focuses on the first algorithm. The html part of this extension does not operate on an AST and hence can\u2019t perform the second algorithm. mdast-util-gfm-autolink-literal adds support for the second. This package provides the low-level modules for integrating with the micromark tokenizer and the micromark HTML compiler. You probably should use this package with mdast-util-gfm-autolink-literal .","title":"micromark-extension-gfm-autolink-literal"},{"location":"node_modules/micromark-extension-gfm-autolink-literal/readme/#install","text":"npm : npm install micromark-extension-gfm-autolink-literal","title":"Install"},{"location":"node_modules/micromark-extension-gfm-autolink-literal/readme/#api","text":"","title":"API"},{"location":"node_modules/micromark-extension-gfm-autolink-literal/readme/#html","text":"","title":"html"},{"location":"node_modules/micromark-extension-gfm-autolink-literal/readme/#syntax","text":"Note: syntax is the default export of this module, html is available at micromark-extension-gfm-autolink-literal/html . Support literal autolinks . The exports are extensions for the micromark parser (to tokenize; can be passed in extensions ) and the default HTML compiler (to compile as <a> elements; can be passed in htmlExtensions ).","title":"syntax"},{"location":"node_modules/micromark-extension-gfm-autolink-literal/readme/#related","text":"remarkjs/remark \u2014 markdown processor powered by plugins micromark/micromark \u2014 the smallest commonmark-compliant markdown parser that exists syntax-tree/mdast-util-gfm-autolink-literal \u2014 mdast utility to support autolink literals syntax-tree/mdast-util-from-markdown \u2014 mdast parser using micromark to create mdast from markdown syntax-tree/mdast-util-to-markdown \u2014 mdast serializer to create markdown from mdast","title":"Related"},{"location":"node_modules/micromark-extension-gfm-autolink-literal/readme/#contribute","text":"See contributing.md in micromark/.github for ways to get started. See support.md for ways to get help. This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms.","title":"Contribute"},{"location":"node_modules/micromark-extension-gfm-autolink-literal/readme/#license","text":"MIT \u00a9 Titus Wormer","title":"License"},{"location":"node_modules/micromark-extension-gfm-strikethrough/readme/","text":"micromark-extension-gfm-strikethrough micromark extension to support GitHub flavored markdown strikethrough (~~like this~~). This syntax extension matches either the GFM spec (only two tildes work) or github.com (both one or two tildes, when they match, work). This package provides the low-level modules for integrating with the micromark tokenizer and the micromark HTML compiler. You probably shouldn\u2019t use this package directly, but instead use mdast-util-gfm-strikethrough with mdast . Install npm : npm install micromark-extension-gfm-strikethrough API html syntax(options?) Note: syntax is the default export of this module, html is available at micromark-extension-gfm-strikethrough/html . Support strikethrough (~~like this~~). The export of syntax is a function that can be called with options and returns an extension for the micromark parser (to tokenize strikethrough; can be passed in extensions ). The export of html is an extension for the default HTML compiler (to compile as <del> elements; can be passed in htmlExtensions ). options options.singleTilde Whether to support strikethrough with a single tilde ( boolean , default: true ). Single tildes work on github.com, but are technically prohibited by the GFM spec. Related remarkjs/remark \u2014 markdown processor powered by plugins micromark/micromark \u2014 the smallest commonmark-compliant markdown parser that exists syntax-tree/mdast-util-gfm-strikethrough \u2014 mdast utility to support strikethrough syntax-tree/mdast-util-from-markdown \u2014 mdast parser using micromark to create mdast from markdown syntax-tree/mdast-util-to-markdown \u2014 mdast serializer to create markdown from mdast Contribute See contributing.md in micromark/.github for ways to get started. See support.md for ways to get help. This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms. License MIT \u00a9 Titus Wormer","title":"micromark-extension-gfm-strikethrough"},{"location":"node_modules/micromark-extension-gfm-strikethrough/readme/#micromark-extension-gfm-strikethrough","text":"micromark extension to support GitHub flavored markdown strikethrough (~~like this~~). This syntax extension matches either the GFM spec (only two tildes work) or github.com (both one or two tildes, when they match, work). This package provides the low-level modules for integrating with the micromark tokenizer and the micromark HTML compiler. You probably shouldn\u2019t use this package directly, but instead use mdast-util-gfm-strikethrough with mdast .","title":"micromark-extension-gfm-strikethrough"},{"location":"node_modules/micromark-extension-gfm-strikethrough/readme/#install","text":"npm : npm install micromark-extension-gfm-strikethrough","title":"Install"},{"location":"node_modules/micromark-extension-gfm-strikethrough/readme/#api","text":"","title":"API"},{"location":"node_modules/micromark-extension-gfm-strikethrough/readme/#html","text":"","title":"html"},{"location":"node_modules/micromark-extension-gfm-strikethrough/readme/#syntaxoptions","text":"Note: syntax is the default export of this module, html is available at micromark-extension-gfm-strikethrough/html . Support strikethrough (~~like this~~). The export of syntax is a function that can be called with options and returns an extension for the micromark parser (to tokenize strikethrough; can be passed in extensions ). The export of html is an extension for the default HTML compiler (to compile as <del> elements; can be passed in htmlExtensions ).","title":"syntax(options?)"},{"location":"node_modules/micromark-extension-gfm-strikethrough/readme/#options","text":"","title":"options"},{"location":"node_modules/micromark-extension-gfm-strikethrough/readme/#optionssingletilde","text":"Whether to support strikethrough with a single tilde ( boolean , default: true ). Single tildes work on github.com, but are technically prohibited by the GFM spec.","title":"options.singleTilde"},{"location":"node_modules/micromark-extension-gfm-strikethrough/readme/#related","text":"remarkjs/remark \u2014 markdown processor powered by plugins micromark/micromark \u2014 the smallest commonmark-compliant markdown parser that exists syntax-tree/mdast-util-gfm-strikethrough \u2014 mdast utility to support strikethrough syntax-tree/mdast-util-from-markdown \u2014 mdast parser using micromark to create mdast from markdown syntax-tree/mdast-util-to-markdown \u2014 mdast serializer to create markdown from mdast","title":"Related"},{"location":"node_modules/micromark-extension-gfm-strikethrough/readme/#contribute","text":"See contributing.md in micromark/.github for ways to get started. See support.md for ways to get help. This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms.","title":"Contribute"},{"location":"node_modules/micromark-extension-gfm-strikethrough/readme/#license","text":"MIT \u00a9 Titus Wormer","title":"License"},{"location":"node_modules/micromark-extension-gfm-table/readme/","text":"micromark-extension-gfm-table micromark extension to support GitHub flavored markdown tables . This syntax extension matches the GFM spec and github.com. This package provides the low-level modules for integrating with the micromark tokenizer and the micromark HTML compiler. You probably should use this package with mdast-util-gfm-table . Install npm : npm install micromark-extension-gfm-table API html syntax Note: syntax is the default export of this module, html is available at micromark-extension-gfm-table/html . Support tables . The exports are extensions for the micromark parser (to tokenize tables; can be passed in extensions ) and the default HTML compiler (to compile as <table> elements; can be passed in htmlExtensions ). Related remarkjs/remark \u2014 markdown processor powered by plugins micromark/micromark \u2014 the smallest commonmark-compliant markdown parser that exists syntax-tree/mdast-util-gfm-table \u2014 mdast utility to support tables syntax-tree/mdast-util-from-markdown \u2014 mdast parser using micromark to create mdast from markdown syntax-tree/mdast-util-to-markdown \u2014 mdast serializer to create markdown from mdast Contribute See contributing.md in micromark/.github for ways to get started. See support.md for ways to get help. This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms. License MIT \u00a9 Titus Wormer","title":"micromark-extension-gfm-table"},{"location":"node_modules/micromark-extension-gfm-table/readme/#micromark-extension-gfm-table","text":"micromark extension to support GitHub flavored markdown tables . This syntax extension matches the GFM spec and github.com. This package provides the low-level modules for integrating with the micromark tokenizer and the micromark HTML compiler. You probably should use this package with mdast-util-gfm-table .","title":"micromark-extension-gfm-table"},{"location":"node_modules/micromark-extension-gfm-table/readme/#install","text":"npm : npm install micromark-extension-gfm-table","title":"Install"},{"location":"node_modules/micromark-extension-gfm-table/readme/#api","text":"","title":"API"},{"location":"node_modules/micromark-extension-gfm-table/readme/#html","text":"","title":"html"},{"location":"node_modules/micromark-extension-gfm-table/readme/#syntax","text":"Note: syntax is the default export of this module, html is available at micromark-extension-gfm-table/html . Support tables . The exports are extensions for the micromark parser (to tokenize tables; can be passed in extensions ) and the default HTML compiler (to compile as <table> elements; can be passed in htmlExtensions ).","title":"syntax"},{"location":"node_modules/micromark-extension-gfm-table/readme/#related","text":"remarkjs/remark \u2014 markdown processor powered by plugins micromark/micromark \u2014 the smallest commonmark-compliant markdown parser that exists syntax-tree/mdast-util-gfm-table \u2014 mdast utility to support tables syntax-tree/mdast-util-from-markdown \u2014 mdast parser using micromark to create mdast from markdown syntax-tree/mdast-util-to-markdown \u2014 mdast serializer to create markdown from mdast","title":"Related"},{"location":"node_modules/micromark-extension-gfm-table/readme/#contribute","text":"See contributing.md in micromark/.github for ways to get started. See support.md for ways to get help. This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms.","title":"Contribute"},{"location":"node_modules/micromark-extension-gfm-table/readme/#license","text":"MIT \u00a9 Titus Wormer","title":"License"},{"location":"node_modules/micromark-extension-gfm-tagfilter/readme/","text":"micromark-extension-gfm-tagfilter micromark extension to support GitHub flavored markdown tag filter . This syntax extension matches the GFM spec and github.com. The tag filter is a rather na\u00efve attempt at XSS protection. It\u2019s much better to use a proper HTML sanitizing algorithm. This package provides the low-level modules for integrating with the micromark tokenizer and the micromark HTML compiler. Install npm : npm install micromark-extension-gfm-tagfilter API html Note: html is the default export. Support a tag filter (protection against script, plaintext, etc). The export is an extension for the default HTML compiler (to escape certain tag names; can be passed in htmlExtensions ). Related remarkjs/remark \u2014 markdown processor powered by plugins micromark/micromark \u2014 the smallest commonmark-compliant markdown parser that exists syntax-tree/mdast-util-from-markdown \u2014 mdast parser using micromark to create mdast from markdown syntax-tree/mdast-util-to-markdown \u2014 mdast serializer to create markdown from mdast Contribute See contributing.md in micromark/.github for ways to get started. See support.md for ways to get help. This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms. License MIT \u00a9 Titus Wormer","title":"micromark-extension-gfm-tagfilter"},{"location":"node_modules/micromark-extension-gfm-tagfilter/readme/#micromark-extension-gfm-tagfilter","text":"micromark extension to support GitHub flavored markdown tag filter . This syntax extension matches the GFM spec and github.com. The tag filter is a rather na\u00efve attempt at XSS protection. It\u2019s much better to use a proper HTML sanitizing algorithm. This package provides the low-level modules for integrating with the micromark tokenizer and the micromark HTML compiler.","title":"micromark-extension-gfm-tagfilter"},{"location":"node_modules/micromark-extension-gfm-tagfilter/readme/#install","text":"npm : npm install micromark-extension-gfm-tagfilter","title":"Install"},{"location":"node_modules/micromark-extension-gfm-tagfilter/readme/#api","text":"","title":"API"},{"location":"node_modules/micromark-extension-gfm-tagfilter/readme/#html","text":"Note: html is the default export. Support a tag filter (protection against script, plaintext, etc). The export is an extension for the default HTML compiler (to escape certain tag names; can be passed in htmlExtensions ).","title":"html"},{"location":"node_modules/micromark-extension-gfm-tagfilter/readme/#related","text":"remarkjs/remark \u2014 markdown processor powered by plugins micromark/micromark \u2014 the smallest commonmark-compliant markdown parser that exists syntax-tree/mdast-util-from-markdown \u2014 mdast parser using micromark to create mdast from markdown syntax-tree/mdast-util-to-markdown \u2014 mdast serializer to create markdown from mdast","title":"Related"},{"location":"node_modules/micromark-extension-gfm-tagfilter/readme/#contribute","text":"See contributing.md in micromark/.github for ways to get started. See support.md for ways to get help. This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms.","title":"Contribute"},{"location":"node_modules/micromark-extension-gfm-tagfilter/readme/#license","text":"MIT \u00a9 Titus Wormer","title":"License"},{"location":"node_modules/micromark-extension-gfm-task-list-item/readme/","text":"micromark-extension-gfm-task-list-item micromark extension to support GitHub flavored markdown task list items . This extension matches the GFM spec for the few things it defines and otherwise matches github.com. This package provides the low-level modules for integrating with the micromark tokenizer and the micromark HTML compiler. You probably shouldn\u2019t use this package directly, but instead use mdast-util-gfm-task-list-item with mdast . Install npm : npm install micromark-extension-gfm-task-list-item API html syntax Note: syntax is the default export of this module, html is available at micromark-extension-gfm-task-list-item/html . Support task list items . The exports are extensions for the micromark parser (to tokenize checks; can be passed in extensions ) and the default HTML compiler (to compile as <input> elements; can be passed in htmlExtensions ). Related remarkjs/remark \u2014 markdown processor powered by plugins micromark/micromark \u2014 the smallest commonmark-compliant markdown parser that exists syntax-tree/mdast-util-gfm-task-list-item \u2014 mdast utility to support task lists syntax-tree/mdast-util-from-markdown \u2014 mdast parser using micromark to create mdast from markdown syntax-tree/mdast-util-to-markdown \u2014 mdast serializer to create markdown from mdast Contribute See contributing.md in micromark/.github for ways to get started. See support.md for ways to get help. This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms. License MIT \u00a9 Titus Wormer","title":"micromark-extension-gfm-task-list-item"},{"location":"node_modules/micromark-extension-gfm-task-list-item/readme/#micromark-extension-gfm-task-list-item","text":"micromark extension to support GitHub flavored markdown task list items . This extension matches the GFM spec for the few things it defines and otherwise matches github.com. This package provides the low-level modules for integrating with the micromark tokenizer and the micromark HTML compiler. You probably shouldn\u2019t use this package directly, but instead use mdast-util-gfm-task-list-item with mdast .","title":"micromark-extension-gfm-task-list-item"},{"location":"node_modules/micromark-extension-gfm-task-list-item/readme/#install","text":"npm : npm install micromark-extension-gfm-task-list-item","title":"Install"},{"location":"node_modules/micromark-extension-gfm-task-list-item/readme/#api","text":"","title":"API"},{"location":"node_modules/micromark-extension-gfm-task-list-item/readme/#html","text":"","title":"html"},{"location":"node_modules/micromark-extension-gfm-task-list-item/readme/#syntax","text":"Note: syntax is the default export of this module, html is available at micromark-extension-gfm-task-list-item/html . Support task list items . The exports are extensions for the micromark parser (to tokenize checks; can be passed in extensions ) and the default HTML compiler (to compile as <input> elements; can be passed in htmlExtensions ).","title":"syntax"},{"location":"node_modules/micromark-extension-gfm-task-list-item/readme/#related","text":"remarkjs/remark \u2014 markdown processor powered by plugins micromark/micromark \u2014 the smallest commonmark-compliant markdown parser that exists syntax-tree/mdast-util-gfm-task-list-item \u2014 mdast utility to support task lists syntax-tree/mdast-util-from-markdown \u2014 mdast parser using micromark to create mdast from markdown syntax-tree/mdast-util-to-markdown \u2014 mdast serializer to create markdown from mdast","title":"Related"},{"location":"node_modules/micromark-extension-gfm-task-list-item/readme/#contribute","text":"See contributing.md in micromark/.github for ways to get started. See support.md for ways to get help. This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms.","title":"Contribute"},{"location":"node_modules/micromark-extension-gfm-task-list-item/readme/#license","text":"MIT \u00a9 Titus Wormer","title":"License"},{"location":"node_modules/minimatch/","text":"minimatch A minimal matching utility. This is the matching library used internally by npm. It works by converting glob expressions into JavaScript RegExp objects. Usage var minimatch = require ( \"minimatch\" ) minimatch ( \"bar.foo\" , \"*.foo\" ) // true! minimatch ( \"bar.foo\" , \"*.bar\" ) // false! minimatch ( \"bar.foo\" , \"*.+(bar|foo)\" , { debug : true }) // true, and noisy! Features Supports these glob features: Brace Expansion Extended glob matching \"Globstar\" ** matching See: man sh man bash man 3 fnmatch man 5 gitignore Minimatch Class Create a minimatch object by instantiating the minimatch.Minimatch class. var Minimatch = require ( \"minimatch\" ). Minimatch var mm = new Minimatch ( pattern , options ) Properties pattern The original pattern the minimatch object represents. options The options supplied to the constructor. set A 2-dimensional array of regexp or string expressions. Each row in the array corresponds to a brace-expanded pattern. Each item in the row corresponds to a single path-part. For example, the pattern {a,b/c}/d would expand to a set of patterns like: [ [ a, d ] , [ b, c, d ] ] If a portion of the pattern doesn't have any \"magic\" in it (that is, it's something like \"foo\" rather than fo*o? ), then it will be left as a string rather than converted to a regular expression. regexp Created by the makeRe method. A single regular expression expressing the entire pattern. This is useful in cases where you wish to use the pattern somewhat like fnmatch(3) with FNM_PATH enabled. negate True if the pattern is negated. comment True if the pattern is a comment. empty True if the pattern is \"\" . Methods makeRe Generate the regexp member if necessary, and return it. Will return false if the pattern is invalid. match(fname) Return true if the filename matches the pattern, or false otherwise. matchOne(fileArray, patternArray, partial) Take a / -split filename, and match it against a single row in the regExpSet . This method is mainly for internal use, but is exposed so that it can be used by a glob-walker that needs to avoid excessive filesystem calls. All other methods are internal, and will be called as necessary. minimatch(path, pattern, options) Main export. Tests a path against the pattern using the options. var isJS = minimatch ( file , \"*.js\" , { matchBase : true }) minimatch.filter(pattern, options) Returns a function that tests its supplied argument, suitable for use with Array.filter . Example: var javascripts = fileList . filter ( minimatch . filter ( \"*.js\" , { matchBase : true })) minimatch.match(list, pattern, options) Match against the list of files, in the style of fnmatch or glob. If nothing is matched, and options.nonull is set, then return a list containing the pattern itself. var javascripts = minimatch . match ( fileList , \"*.js\" , { matchBase : true })) minimatch.makeRe(pattern, options) Make a regular expression object from the pattern. Options All options are false by default. debug Dump a ton of stuff to stderr. nobrace Do not expand {a,b} and {1..3} brace sets. noglobstar Disable ** matching against multiple folder names. dot Allow patterns to match filenames starting with a period, even if the pattern does not explicitly have a period in that spot. Note that by default, a/**/b will not match a/.d/b , unless dot is set. noext Disable \"extglob\" style patterns like +(a|b) . nocase Perform a case-insensitive match. nonull When a match is not found by minimatch.match , return a list containing the pattern itself if this option is set. When not set, an empty list is returned if there are no matches. matchBase If set, then patterns without slashes will be matched against the basename of the path if it contains slashes. For example, a?b would match the path /xyz/123/acb , but not /xyz/acb/123 . nocomment Suppress the behavior of treating # at the start of a pattern as a comment. nonegate Suppress the behavior of treating a leading ! character as negation. flipNegate Returns from negate expressions the same as if they were not negated. (Ie, true on a hit, false on a miss.) partial Compare a partial path to a pattern. As long as the parts of the path that are present are not contradicted by the pattern, it will be treated as a match. This is useful in applications where you're walking through a folder structure, and don't yet have the full path, but want to ensure that you do not walk down paths that can never be a match. For example, minimatch ( '/a/b' , '/a/*/c/d' , { partial : true }) // true, might be /a/b/c/d minimatch ( '/a/b' , '/**/d' , { partial : true }) // true, might be /a/b/.../d minimatch ( '/x/y/z' , '/a/**/z' , { partial : true }) // false, because x !== a allowWindowsEscape Windows path separator \\ is by default converted to / , which prohibits the usage of \\ as a escape character. This flag skips that behavior and allows using the escape character. Comparisons to other fnmatch/glob implementations While strict compliance with the existing standards is a worthwhile goal, some discrepancies exist between minimatch and other implementations, and are intentional. If the pattern starts with a ! character, then it is negated. Set the nonegate flag to suppress this behavior, and treat leading ! characters normally. This is perhaps relevant if you wish to start the pattern with a negative extglob pattern like !(a|B) . Multiple ! characters at the start of a pattern will negate the pattern multiple times. If a pattern starts with # , then it is treated as a comment, and will not match anything. Use \\# to match a literal # at the start of a line, or set the nocomment flag to suppress this behavior. The double-star character ** is supported by default, unless the noglobstar flag is set. This is supported in the manner of bsdglob and bash 4.1, where ** only has special significance if it is the only thing in a path part. That is, a/**/b will match a/x/y/b , but a/**b will not. If an escaped pattern has no matches, and the nonull flag is set, then minimatch.match returns the pattern as-provided, rather than interpreting the character escapes. For example, minimatch.match([], \"\\\\*a\\\\?\") will return \"\\\\*a\\\\?\" rather than \"*a?\" . This is akin to setting the nullglob option in bash, except that it does not resolve escaped pattern characters. If brace expansion is not disabled, then it is performed before any other interpretation of the glob pattern. Thus, a pattern like +(a|{b),c)} , which would not be valid in bash or zsh, is expanded first into the set of +(a|b) and +(a|c) , and those patterns are checked for validity. Since those two are valid, matching proceeds.","title":"minimatch"},{"location":"node_modules/minimatch/#minimatch","text":"A minimal matching utility. This is the matching library used internally by npm. It works by converting glob expressions into JavaScript RegExp objects.","title":"minimatch"},{"location":"node_modules/minimatch/#usage","text":"var minimatch = require ( \"minimatch\" ) minimatch ( \"bar.foo\" , \"*.foo\" ) // true! minimatch ( \"bar.foo\" , \"*.bar\" ) // false! minimatch ( \"bar.foo\" , \"*.+(bar|foo)\" , { debug : true }) // true, and noisy!","title":"Usage"},{"location":"node_modules/minimatch/#features","text":"Supports these glob features: Brace Expansion Extended glob matching \"Globstar\" ** matching See: man sh man bash man 3 fnmatch man 5 gitignore","title":"Features"},{"location":"node_modules/minimatch/#minimatch-class","text":"Create a minimatch object by instantiating the minimatch.Minimatch class. var Minimatch = require ( \"minimatch\" ). Minimatch var mm = new Minimatch ( pattern , options )","title":"Minimatch Class"},{"location":"node_modules/minimatch/#properties","text":"pattern The original pattern the minimatch object represents. options The options supplied to the constructor. set A 2-dimensional array of regexp or string expressions. Each row in the array corresponds to a brace-expanded pattern. Each item in the row corresponds to a single path-part. For example, the pattern {a,b/c}/d would expand to a set of patterns like: [ [ a, d ] , [ b, c, d ] ] If a portion of the pattern doesn't have any \"magic\" in it (that is, it's something like \"foo\" rather than fo*o? ), then it will be left as a string rather than converted to a regular expression. regexp Created by the makeRe method. A single regular expression expressing the entire pattern. This is useful in cases where you wish to use the pattern somewhat like fnmatch(3) with FNM_PATH enabled. negate True if the pattern is negated. comment True if the pattern is a comment. empty True if the pattern is \"\" .","title":"Properties"},{"location":"node_modules/minimatch/#methods","text":"makeRe Generate the regexp member if necessary, and return it. Will return false if the pattern is invalid. match(fname) Return true if the filename matches the pattern, or false otherwise. matchOne(fileArray, patternArray, partial) Take a / -split filename, and match it against a single row in the regExpSet . This method is mainly for internal use, but is exposed so that it can be used by a glob-walker that needs to avoid excessive filesystem calls. All other methods are internal, and will be called as necessary.","title":"Methods"},{"location":"node_modules/minimatch/#minimatchpath-pattern-options","text":"Main export. Tests a path against the pattern using the options. var isJS = minimatch ( file , \"*.js\" , { matchBase : true })","title":"minimatch(path, pattern, options)"},{"location":"node_modules/minimatch/#minimatchfilterpattern-options","text":"Returns a function that tests its supplied argument, suitable for use with Array.filter . Example: var javascripts = fileList . filter ( minimatch . filter ( \"*.js\" , { matchBase : true }))","title":"minimatch.filter(pattern, options)"},{"location":"node_modules/minimatch/#minimatchmatchlist-pattern-options","text":"Match against the list of files, in the style of fnmatch or glob. If nothing is matched, and options.nonull is set, then return a list containing the pattern itself. var javascripts = minimatch . match ( fileList , \"*.js\" , { matchBase : true }))","title":"minimatch.match(list, pattern, options)"},{"location":"node_modules/minimatch/#minimatchmakerepattern-options","text":"Make a regular expression object from the pattern.","title":"minimatch.makeRe(pattern, options)"},{"location":"node_modules/minimatch/#options","text":"All options are false by default.","title":"Options"},{"location":"node_modules/minimatch/#debug","text":"Dump a ton of stuff to stderr.","title":"debug"},{"location":"node_modules/minimatch/#nobrace","text":"Do not expand {a,b} and {1..3} brace sets.","title":"nobrace"},{"location":"node_modules/minimatch/#noglobstar","text":"Disable ** matching against multiple folder names.","title":"noglobstar"},{"location":"node_modules/minimatch/#dot","text":"Allow patterns to match filenames starting with a period, even if the pattern does not explicitly have a period in that spot. Note that by default, a/**/b will not match a/.d/b , unless dot is set.","title":"dot"},{"location":"node_modules/minimatch/#noext","text":"Disable \"extglob\" style patterns like +(a|b) .","title":"noext"},{"location":"node_modules/minimatch/#nocase","text":"Perform a case-insensitive match.","title":"nocase"},{"location":"node_modules/minimatch/#nonull","text":"When a match is not found by minimatch.match , return a list containing the pattern itself if this option is set. When not set, an empty list is returned if there are no matches.","title":"nonull"},{"location":"node_modules/minimatch/#matchbase","text":"If set, then patterns without slashes will be matched against the basename of the path if it contains slashes. For example, a?b would match the path /xyz/123/acb , but not /xyz/acb/123 .","title":"matchBase"},{"location":"node_modules/minimatch/#nocomment","text":"Suppress the behavior of treating # at the start of a pattern as a comment.","title":"nocomment"},{"location":"node_modules/minimatch/#nonegate","text":"Suppress the behavior of treating a leading ! character as negation.","title":"nonegate"},{"location":"node_modules/minimatch/#flipnegate","text":"Returns from negate expressions the same as if they were not negated. (Ie, true on a hit, false on a miss.)","title":"flipNegate"},{"location":"node_modules/minimatch/#partial","text":"Compare a partial path to a pattern. As long as the parts of the path that are present are not contradicted by the pattern, it will be treated as a match. This is useful in applications where you're walking through a folder structure, and don't yet have the full path, but want to ensure that you do not walk down paths that can never be a match. For example, minimatch ( '/a/b' , '/a/*/c/d' , { partial : true }) // true, might be /a/b/c/d minimatch ( '/a/b' , '/**/d' , { partial : true }) // true, might be /a/b/.../d minimatch ( '/x/y/z' , '/a/**/z' , { partial : true }) // false, because x !== a","title":"partial"},{"location":"node_modules/minimatch/#allowwindowsescape","text":"Windows path separator \\ is by default converted to / , which prohibits the usage of \\ as a escape character. This flag skips that behavior and allows using the escape character.","title":"allowWindowsEscape"},{"location":"node_modules/minimatch/#comparisons-to-other-fnmatchglob-implementations","text":"While strict compliance with the existing standards is a worthwhile goal, some discrepancies exist between minimatch and other implementations, and are intentional. If the pattern starts with a ! character, then it is negated. Set the nonegate flag to suppress this behavior, and treat leading ! characters normally. This is perhaps relevant if you wish to start the pattern with a negative extglob pattern like !(a|B) . Multiple ! characters at the start of a pattern will negate the pattern multiple times. If a pattern starts with # , then it is treated as a comment, and will not match anything. Use \\# to match a literal # at the start of a line, or set the nocomment flag to suppress this behavior. The double-star character ** is supported by default, unless the noglobstar flag is set. This is supported in the manner of bsdglob and bash 4.1, where ** only has special significance if it is the only thing in a path part. That is, a/**/b will match a/x/y/b , but a/**b will not. If an escaped pattern has no matches, and the nonull flag is set, then minimatch.match returns the pattern as-provided, rather than interpreting the character escapes. For example, minimatch.match([], \"\\\\*a\\\\?\") will return \"\\\\*a\\\\?\" rather than \"*a?\" . This is akin to setting the nullglob option in bash, except that it does not resolve escaped pattern characters. If brace expansion is not disabled, then it is performed before any other interpretation of the glob pattern. Thus, a pattern like +(a|{b),c)} , which would not be valid in bash or zsh, is expanded first into the set of +(a|b) and +(a|c) , and those patterns are checked for validity. Since those two are valid, matching proceeds.","title":"Comparisons to other fnmatch/glob implementations"},{"location":"node_modules/minimist/readme/","text":"minimist parse argument options This module is the guts of optimist's argument parser without all the fanciful decoration. example var argv = require ( 'minimist' )( process . argv . slice ( 2 )); console . log ( argv ); $ node example/parse.js -a beep -b boop { _: [], a: 'beep', b: 'boop' } $ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz { _: [ 'foo', 'bar', 'baz' ], x: 3, y: 4, n: 5, a: true, b: true, c: true, beep: 'boop' } security Previous versions had a prototype pollution bug that could cause privilege escalation in some circumstances when handling untrusted user input. Please use version 1.2.3 or later: https://snyk.io/vuln/SNYK-JS-MINIMIST-559764 methods var parseArgs = require ( 'minimist' ) var argv = parseArgs(args, opts={}) Return an argument object argv populated with the array arguments from args . argv._ contains all the arguments that didn't have an option associated with them. Numeric-looking arguments will be returned as numbers unless opts.string or opts.boolean is set for that argument name. Any arguments after '--' will not be parsed and will end up in argv._ . options can be: opts.string - a string or array of strings argument names to always treat as strings opts.boolean - a boolean, string or array of strings to always treat as booleans. if true will treat all double hyphenated arguments without equal signs as boolean (e.g. affects --foo , not -f or --foo=bar ) opts.alias - an object mapping string names to strings or arrays of string argument names to use as aliases opts.default - an object mapping string argument names to default values opts.stopEarly - when true, populate argv._ with everything after the first non-option opts['--'] - when true, populate argv._ with everything before the -- and argv['--'] with everything after the -- . Here's an example: > require('./')('one two three -- four five --six'.split(' '), { '--': true }) { _: [ 'one', 'two', 'three' ], '--': [ 'four', 'five', '--six' ] } Note that with opts['--'] set, parsing for arguments still stops after the -- . opts.unknown - a function which is invoked with a command line parameter not defined in the opts configuration object. If the function returns false , the unknown option is not added to argv . install With npm do: npm install minimist license MIT","title":"minimist"},{"location":"node_modules/minimist/readme/#minimist","text":"parse argument options This module is the guts of optimist's argument parser without all the fanciful decoration.","title":"minimist"},{"location":"node_modules/minimist/readme/#example","text":"var argv = require ( 'minimist' )( process . argv . slice ( 2 )); console . log ( argv ); $ node example/parse.js -a beep -b boop { _: [], a: 'beep', b: 'boop' } $ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz { _: [ 'foo', 'bar', 'baz' ], x: 3, y: 4, n: 5, a: true, b: true, c: true, beep: 'boop' }","title":"example"},{"location":"node_modules/minimist/readme/#security","text":"Previous versions had a prototype pollution bug that could cause privilege escalation in some circumstances when handling untrusted user input. Please use version 1.2.3 or later: https://snyk.io/vuln/SNYK-JS-MINIMIST-559764","title":"security"},{"location":"node_modules/minimist/readme/#methods","text":"var parseArgs = require ( 'minimist' )","title":"methods"},{"location":"node_modules/minimist/readme/#var-argv-parseargsargs-opts","text":"Return an argument object argv populated with the array arguments from args . argv._ contains all the arguments that didn't have an option associated with them. Numeric-looking arguments will be returned as numbers unless opts.string or opts.boolean is set for that argument name. Any arguments after '--' will not be parsed and will end up in argv._ . options can be: opts.string - a string or array of strings argument names to always treat as strings opts.boolean - a boolean, string or array of strings to always treat as booleans. if true will treat all double hyphenated arguments without equal signs as boolean (e.g. affects --foo , not -f or --foo=bar ) opts.alias - an object mapping string names to strings or arrays of string argument names to use as aliases opts.default - an object mapping string argument names to default values opts.stopEarly - when true, populate argv._ with everything after the first non-option opts['--'] - when true, populate argv._ with everything before the -- and argv['--'] with everything after the -- . Here's an example: > require('./')('one two three -- four five --six'.split(' '), { '--': true }) { _: [ 'one', 'two', 'three' ], '--': [ 'four', 'five', '--six' ] } Note that with opts['--'] set, parsing for arguments still stops after the -- . opts.unknown - a function which is invoked with a command line parameter not defined in the opts configuration object. If the function returns false , the unknown option is not added to argv .","title":"var argv = parseArgs(args, opts={})"},{"location":"node_modules/minimist/readme/#install","text":"With npm do: npm install minimist","title":"install"},{"location":"node_modules/minimist/readme/#license","text":"MIT","title":"license"},{"location":"node_modules/mkdirp/readme/","text":"mkdirp Like mkdir -p , but in node.js! example pow.js var mkdirp = require ( 'mkdirp' ); mkdirp ( '/tmp/foo/bar/baz' , function ( err ) { if ( err ) console . error ( err ) else console . log ( 'pow!' ) }); Output pow! And now /tmp/foo/bar/baz exists, huzzah! methods var mkdirp = require ( 'mkdirp' ); mkdirp(dir, opts, cb) Create a new directory and any necessary subdirectories at dir with octal permission string opts.mode . If opts is a non-object, it will be treated as the opts.mode . If opts.mode isn't specified, it defaults to 0777 . cb(err, made) fires with the error or the first directory made that had to be created, if any. You can optionally pass in an alternate fs implementation by passing in opts.fs . Your implementation should have opts.fs.mkdir(path, mode, cb) and opts.fs.stat(path, cb) . mkdirp.sync(dir, opts) Synchronously create a new directory and any necessary subdirectories at dir with octal permission string opts.mode . If opts is a non-object, it will be treated as the opts.mode . If opts.mode isn't specified, it defaults to 0777 . Returns the first directory that had to be created, if any. You can optionally pass in an alternate fs implementation by passing in opts.fs . Your implementation should have opts.fs.mkdirSync(path, mode) and opts.fs.statSync(path) . usage This package also ships with a mkdirp command. usage: mkdirp [DIR1,DIR2..] {OPTIONS} Create each supplied directory including any necessary parent directories that don't yet exist. If the directory already exists, do nothing. OPTIONS are: -m, --mode If a directory needs to be created, set the mode as an octal permission string. install With npm do: npm install mkdirp to get the library, or npm install -g mkdirp to get the command. license MIT","title":"mkdirp"},{"location":"node_modules/mkdirp/readme/#mkdirp","text":"Like mkdir -p , but in node.js!","title":"mkdirp"},{"location":"node_modules/mkdirp/readme/#example","text":"","title":"example"},{"location":"node_modules/mkdirp/readme/#powjs","text":"var mkdirp = require ( 'mkdirp' ); mkdirp ( '/tmp/foo/bar/baz' , function ( err ) { if ( err ) console . error ( err ) else console . log ( 'pow!' ) }); Output pow! And now /tmp/foo/bar/baz exists, huzzah!","title":"pow.js"},{"location":"node_modules/mkdirp/readme/#methods","text":"var mkdirp = require ( 'mkdirp' );","title":"methods"},{"location":"node_modules/mkdirp/readme/#mkdirpdir-opts-cb","text":"Create a new directory and any necessary subdirectories at dir with octal permission string opts.mode . If opts is a non-object, it will be treated as the opts.mode . If opts.mode isn't specified, it defaults to 0777 . cb(err, made) fires with the error or the first directory made that had to be created, if any. You can optionally pass in an alternate fs implementation by passing in opts.fs . Your implementation should have opts.fs.mkdir(path, mode, cb) and opts.fs.stat(path, cb) .","title":"mkdirp(dir, opts, cb)"},{"location":"node_modules/mkdirp/readme/#mkdirpsyncdir-opts","text":"Synchronously create a new directory and any necessary subdirectories at dir with octal permission string opts.mode . If opts is a non-object, it will be treated as the opts.mode . If opts.mode isn't specified, it defaults to 0777 . Returns the first directory that had to be created, if any. You can optionally pass in an alternate fs implementation by passing in opts.fs . Your implementation should have opts.fs.mkdirSync(path, mode) and opts.fs.statSync(path) .","title":"mkdirp.sync(dir, opts)"},{"location":"node_modules/mkdirp/readme/#usage","text":"This package also ships with a mkdirp command. usage: mkdirp [DIR1,DIR2..] {OPTIONS} Create each supplied directory including any necessary parent directories that don't yet exist. If the directory already exists, do nothing. OPTIONS are: -m, --mode If a directory needs to be created, set the mode as an octal permission string.","title":"usage"},{"location":"node_modules/mkdirp/readme/#install","text":"With npm do: npm install mkdirp to get the library, or npm install -g mkdirp to get the command.","title":"install"},{"location":"node_modules/mkdirp/readme/#license","text":"MIT","title":"license"},{"location":"node_modules/ms/license/","text":"The MIT License (MIT) Copyright (c) 2016 Zeit, Inc. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"node_modules/ms/readme/","text":"ms Use this package to easily convert various time formats to milliseconds. Examples ms ( '2 days' ) // 172800000 ms ( '1d' ) // 86400000 ms ( '10h' ) // 36000000 ms ( '2.5 hrs' ) // 9000000 ms ( '2h' ) // 7200000 ms ( '1m' ) // 60000 ms ( '5s' ) // 5000 ms ( '1y' ) // 31557600000 ms ( '100' ) // 100 ms ( '-3 days' ) // -259200000 ms ( '-1h' ) // -3600000 ms ( '-200' ) // -200 Convert from Milliseconds ms ( 60000 ) // \"1m\" ms ( 2 * 60000 ) // \"2m\" ms ( - 3 * 60000 ) // \"-3m\" ms ( ms ( '10 hours' )) // \"10h\" Time Format Written-Out ms ( 60000 , { long : true }) // \"1 minute\" ms ( 2 * 60000 , { long : true }) // \"2 minutes\" ms ( - 3 * 60000 , { long : true }) // \"-3 minutes\" ms ( ms ( '10 hours' ), { long : true }) // \"10 hours\" Features Works both in Node.js and in the browser If a number is supplied to ms , a string with a unit is returned If a string that contains the number is supplied, it returns it as a number (e.g.: it returns 100 for '100' ) If you pass a string with a number and a valid unit, the number of equivalent milliseconds is returned Related Packages ms.macro - Run ms as a macro at build-time. Caught a Bug? Fork this repository to your own GitHub account and then clone it to your local device Link the package to the global module directory: npm link Within the module you want to test your local development instance of ms, just link it to the dependencies: npm link ms . Instead of the default one from npm, Node.js will now use your clone of ms! As always, you can run the tests using: npm test","title":"ms"},{"location":"node_modules/ms/readme/#ms","text":"Use this package to easily convert various time formats to milliseconds.","title":"ms"},{"location":"node_modules/ms/readme/#examples","text":"ms ( '2 days' ) // 172800000 ms ( '1d' ) // 86400000 ms ( '10h' ) // 36000000 ms ( '2.5 hrs' ) // 9000000 ms ( '2h' ) // 7200000 ms ( '1m' ) // 60000 ms ( '5s' ) // 5000 ms ( '1y' ) // 31557600000 ms ( '100' ) // 100 ms ( '-3 days' ) // -259200000 ms ( '-1h' ) // -3600000 ms ( '-200' ) // -200","title":"Examples"},{"location":"node_modules/ms/readme/#convert-from-milliseconds","text":"ms ( 60000 ) // \"1m\" ms ( 2 * 60000 ) // \"2m\" ms ( - 3 * 60000 ) // \"-3m\" ms ( ms ( '10 hours' )) // \"10h\"","title":"Convert from Milliseconds"},{"location":"node_modules/ms/readme/#time-format-written-out","text":"ms ( 60000 , { long : true }) // \"1 minute\" ms ( 2 * 60000 , { long : true }) // \"2 minutes\" ms ( - 3 * 60000 , { long : true }) // \"-3 minutes\" ms ( ms ( '10 hours' ), { long : true }) // \"10 hours\"","title":"Time Format Written-Out"},{"location":"node_modules/ms/readme/#features","text":"Works both in Node.js and in the browser If a number is supplied to ms , a string with a unit is returned If a string that contains the number is supplied, it returns it as a number (e.g.: it returns 100 for '100' ) If you pass a string with a number and a valid unit, the number of equivalent milliseconds is returned","title":"Features"},{"location":"node_modules/ms/readme/#related-packages","text":"ms.macro - Run ms as a macro at build-time.","title":"Related Packages"},{"location":"node_modules/ms/readme/#caught-a-bug","text":"Fork this repository to your own GitHub account and then clone it to your local device Link the package to the global module directory: npm link Within the module you want to test your local development instance of ms, just link it to the dependencies: npm link ms . Instead of the default one from npm, Node.js will now use your clone of ms! As always, you can run the tests using: npm test","title":"Caught a Bug?"},{"location":"node_modules/normalize-package-data/","text":"normalize-package-data normalize-package-data exports a function that normalizes package metadata. This data is typically found in a package.json file, but in principle could come from any source - for example the npm registry. normalize-package-data is used by read-package-json to normalize the data it reads from a package.json file. In turn, read-package-json is used by npm and various npm-related tools. Installation npm install normalize-package-data Usage Basic usage is really simple. You call the function that normalize-package-data exports. Let's call it normalizeData . normalizeData = require ( 'normalize-package-data' ) packageData = require ( \"./package.json\" ) normalizeData ( packageData ) // packageData is now normalized Strict mode You may activate strict validation by passing true as the second argument. normalizeData = require ( 'normalize-package-data' ) packageData = require ( \"./package.json\" ) normalizeData ( packageData , true ) // packageData is now normalized If strict mode is activated, only Semver 2.0 version strings are accepted. Otherwise, Semver 1.0 strings are accepted as well. Packages must have a name, and the name field must not have contain leading or trailing whitespace. Warnings Optionally, you may pass a \"warning\" function. It gets called whenever the normalizeData function encounters something that doesn't look right. It indicates less than perfect input data. normalizeData = require ( 'normalize-package-data' ) packageData = require ( \"./package.json\" ) warnFn = function ( msg ) { console . error ( msg ) } normalizeData ( packageData , warnFn ) // packageData is now normalized. Any number of warnings may have been logged. You may combine strict validation with warnings by passing true as the second argument, and warnFn as third. When private field is set to true , warnings will be suppressed. Potential exceptions If the supplied data has an invalid name or version vield, normalizeData will throw an error. Depending on where you call normalizeData , you may want to catch these errors so can pass them to a callback. What normalization (currently) entails The value of name field gets trimmed (unless in strict mode). The value of the version field gets cleaned by semver.clean . See documentation for the semver module . If name and/or version fields are missing, they are set to empty strings. If files field is not an array, it will be removed. If bin field is a string, then bin field will become an object with name set to the value of the name field, and bin set to the original string value. If man field is a string, it will become an array with the original string as its sole member. If keywords field is string, it is considered to be a list of keywords separated by one or more white-space characters. It gets converted to an array by splitting on \\s+ . All people fields ( author , maintainers , contributors ) get converted into objects with name, email and url properties. If bundledDependencies field (a typo) exists and bundleDependencies field does not, bundledDependencies will get renamed to bundleDependencies . If the value of any of the dependencies fields ( dependencies , devDependencies , optionalDependencies ) is a string, it gets converted into an object with familiar name=>value pairs. The values in optionalDependencies get added to dependencies . The optionalDependencies array is left untouched. As of v2: Dependencies that point at known hosted git providers (currently: github, bitbucket, gitlab) will have their URLs canonicalized, but protocols will be preserved. As of v2: Dependencies that use shortcuts for hosted git providers ( org/proj , github:org/proj , bitbucket:org/proj , gitlab:org/proj , gist:docid ) will have the shortcut left in place. (In the case of github, the org/proj form will be expanded to github:org/proj .) THIS MARKS A BREAKING CHANGE FROM V1, where the shorcut was previously expanded to a URL. If description field does not exist, but readme field does, then (more or less) the first paragraph of text that's found in the readme is taken as value for description . If repository field is a string, it will become an object with url set to the original string value, and type set to \"git\" . If repository.url is not a valid url, but in the style of \"[owner-name]/[repo-name]\", repository.url will be set to git+https://github.com/[owner-name]/[repo-name].git If bugs field is a string, the value of bugs field is changed into an object with url set to the original string value. If bugs field does not exist, but repository field points to a repository hosted on GitHub, the value of the bugs field gets set to an url in the form of https://github.com/[owner-name]/[repo-name]/issues . If the repository field points to a GitHub Gist repo url, the associated http url is chosen. If bugs field is an object, the resulting value only has email and url properties. If email and url properties are not strings, they are ignored. If no valid values for either email or url is found, bugs field will be removed. If homepage field is not a string, it will be removed. If the url in the homepage field does not specify a protocol, then http is assumed. For example, myproject.org will be changed to http://myproject.org . If homepage field does not exist, but repository field points to a repository hosted on GitHub, the value of the homepage field gets set to an url in the form of https://github.com/[owner-name]/[repo-name]#readme . If the repository field points to a GitHub Gist repo url, the associated http url is chosen. Rules for name field If name field is given, the value of the name field must be a string. The string may not: start with a period. contain the following characters: /@\\s+% contain any characters that would need to be encoded for use in urls. resemble the word node_modules or favicon.ico (case doesn't matter). Rules for version field If version field is given, the value of the version field must be a valid semver string, as determined by the semver.valid method. See documentation for the semver module . Rules for license field The license field should be a valid SPDX license expression or one of the special values allowed by validate-npm-package-license . See documentation for the license field in package.json . Credits This package contains code based on read-package-json written by Isaac Z. Schlueter. Used with permisson. License normalize-package-data is released under the BSD 2-Clause License . Copyright (c) 2013 Meryn Stol","title":"normalize-package-data [![Build Status](https://travis-ci.org/npm/normalize-package-data.png?branch=master)](https://travis-ci.org/npm/normalize-package-data)"},{"location":"node_modules/normalize-package-data/#normalize-package-data","text":"normalize-package-data exports a function that normalizes package metadata. This data is typically found in a package.json file, but in principle could come from any source - for example the npm registry. normalize-package-data is used by read-package-json to normalize the data it reads from a package.json file. In turn, read-package-json is used by npm and various npm-related tools.","title":"normalize-package-data"},{"location":"node_modules/normalize-package-data/#installation","text":"npm install normalize-package-data","title":"Installation"},{"location":"node_modules/normalize-package-data/#usage","text":"Basic usage is really simple. You call the function that normalize-package-data exports. Let's call it normalizeData . normalizeData = require ( 'normalize-package-data' ) packageData = require ( \"./package.json\" ) normalizeData ( packageData ) // packageData is now normalized","title":"Usage"},{"location":"node_modules/normalize-package-data/#strict-mode","text":"You may activate strict validation by passing true as the second argument. normalizeData = require ( 'normalize-package-data' ) packageData = require ( \"./package.json\" ) normalizeData ( packageData , true ) // packageData is now normalized If strict mode is activated, only Semver 2.0 version strings are accepted. Otherwise, Semver 1.0 strings are accepted as well. Packages must have a name, and the name field must not have contain leading or trailing whitespace.","title":"Strict mode"},{"location":"node_modules/normalize-package-data/#warnings","text":"Optionally, you may pass a \"warning\" function. It gets called whenever the normalizeData function encounters something that doesn't look right. It indicates less than perfect input data. normalizeData = require ( 'normalize-package-data' ) packageData = require ( \"./package.json\" ) warnFn = function ( msg ) { console . error ( msg ) } normalizeData ( packageData , warnFn ) // packageData is now normalized. Any number of warnings may have been logged. You may combine strict validation with warnings by passing true as the second argument, and warnFn as third. When private field is set to true , warnings will be suppressed.","title":"Warnings"},{"location":"node_modules/normalize-package-data/#potential-exceptions","text":"If the supplied data has an invalid name or version vield, normalizeData will throw an error. Depending on where you call normalizeData , you may want to catch these errors so can pass them to a callback.","title":"Potential exceptions"},{"location":"node_modules/normalize-package-data/#what-normalization-currently-entails","text":"The value of name field gets trimmed (unless in strict mode). The value of the version field gets cleaned by semver.clean . See documentation for the semver module . If name and/or version fields are missing, they are set to empty strings. If files field is not an array, it will be removed. If bin field is a string, then bin field will become an object with name set to the value of the name field, and bin set to the original string value. If man field is a string, it will become an array with the original string as its sole member. If keywords field is string, it is considered to be a list of keywords separated by one or more white-space characters. It gets converted to an array by splitting on \\s+ . All people fields ( author , maintainers , contributors ) get converted into objects with name, email and url properties. If bundledDependencies field (a typo) exists and bundleDependencies field does not, bundledDependencies will get renamed to bundleDependencies . If the value of any of the dependencies fields ( dependencies , devDependencies , optionalDependencies ) is a string, it gets converted into an object with familiar name=>value pairs. The values in optionalDependencies get added to dependencies . The optionalDependencies array is left untouched. As of v2: Dependencies that point at known hosted git providers (currently: github, bitbucket, gitlab) will have their URLs canonicalized, but protocols will be preserved. As of v2: Dependencies that use shortcuts for hosted git providers ( org/proj , github:org/proj , bitbucket:org/proj , gitlab:org/proj , gist:docid ) will have the shortcut left in place. (In the case of github, the org/proj form will be expanded to github:org/proj .) THIS MARKS A BREAKING CHANGE FROM V1, where the shorcut was previously expanded to a URL. If description field does not exist, but readme field does, then (more or less) the first paragraph of text that's found in the readme is taken as value for description . If repository field is a string, it will become an object with url set to the original string value, and type set to \"git\" . If repository.url is not a valid url, but in the style of \"[owner-name]/[repo-name]\", repository.url will be set to git+https://github.com/[owner-name]/[repo-name].git If bugs field is a string, the value of bugs field is changed into an object with url set to the original string value. If bugs field does not exist, but repository field points to a repository hosted on GitHub, the value of the bugs field gets set to an url in the form of https://github.com/[owner-name]/[repo-name]/issues . If the repository field points to a GitHub Gist repo url, the associated http url is chosen. If bugs field is an object, the resulting value only has email and url properties. If email and url properties are not strings, they are ignored. If no valid values for either email or url is found, bugs field will be removed. If homepage field is not a string, it will be removed. If the url in the homepage field does not specify a protocol, then http is assumed. For example, myproject.org will be changed to http://myproject.org . If homepage field does not exist, but repository field points to a repository hosted on GitHub, the value of the homepage field gets set to an url in the form of https://github.com/[owner-name]/[repo-name]#readme . If the repository field points to a GitHub Gist repo url, the associated http url is chosen.","title":"What normalization (currently) entails"},{"location":"node_modules/normalize-package-data/#rules-for-name-field","text":"If name field is given, the value of the name field must be a string. The string may not: start with a period. contain the following characters: /@\\s+% contain any characters that would need to be encoded for use in urls. resemble the word node_modules or favicon.ico (case doesn't matter).","title":"Rules for name field"},{"location":"node_modules/normalize-package-data/#rules-for-version-field","text":"If version field is given, the value of the version field must be a valid semver string, as determined by the semver.valid method. See documentation for the semver module .","title":"Rules for version field"},{"location":"node_modules/normalize-package-data/#rules-for-license-field","text":"The license field should be a valid SPDX license expression or one of the special values allowed by validate-npm-package-license . See documentation for the license field in package.json .","title":"Rules for license field"},{"location":"node_modules/normalize-package-data/#credits","text":"This package contains code based on read-package-json written by Isaac Z. Schlueter. Used with permisson.","title":"Credits"},{"location":"node_modules/normalize-package-data/#license","text":"normalize-package-data is released under the BSD 2-Clause License . Copyright (c) 2013 Meryn Stol","title":"License"},{"location":"node_modules/number-is-nan/readme/","text":"number-is-nan ES2015 Number.isNaN() ponyfill Install $ npm install --save number-is-nan Usage var numberIsNan = require ( 'number-is-nan' ); numberIsNan ( NaN ); //=> true numberIsNan ( 'unicorn' ); //=> false License MIT \u00a9 Sindre Sorhus","title":"number-is-nan [![Build Status](https://travis-ci.org/sindresorhus/number-is-nan.svg?branch=master)](https://travis-ci.org/sindresorhus/number-is-nan)"},{"location":"node_modules/number-is-nan/readme/#number-is-nan","text":"ES2015 Number.isNaN() ponyfill","title":"number-is-nan"},{"location":"node_modules/number-is-nan/readme/#install","text":"$ npm install --save number-is-nan","title":"Install"},{"location":"node_modules/number-is-nan/readme/#usage","text":"var numberIsNan = require ( 'number-is-nan' ); numberIsNan ( NaN ); //=> true numberIsNan ( 'unicorn' ); //=> false","title":"Usage"},{"location":"node_modules/number-is-nan/readme/#license","text":"MIT \u00a9 Sindre Sorhus","title":"License"},{"location":"node_modules/object-is/","text":"object-is ES2015-compliant shim for Object.is - differentiates between -0 and +0, and can compare to NaN. Essentially, Object.is returns the same value as === - but true for NaN, and false for -0 and +0. This package implements the es-shim API interface. It works in an ES3-supported environment and complies with the spec . Example Object . is = require ( 'object-is' ); var assert = require ( 'assert' ); assert . ok ( Object . is ()); assert . ok ( Object . is ( undefined )); assert . ok ( Object . is ( undefined , undefined )); assert . ok ( Object . is ( null , null )); assert . ok ( Object . is ( true , true )); assert . ok ( Object . is ( false , false )); assert . ok ( Object . is ( 'foo' , 'foo' )); var arr = [ 1 , 2 ]; assert . ok ( Object . is ( arr , arr )); assert . notOk ( Object . is ( arr , [ 1 , 2 ])); assert . ok ( Object . is ( 0 , 0 )); assert . ok ( Object . is ( - 0 , - 0 )); assert . notOk ( Object . is ( 0 , - 0 )); assert . ok ( Object . is ( NaN , NaN )); assert . ok ( Object . is ( Infinity , Infinity )); assert . ok ( Object . is ( - Infinity , - Infinity )); Tests Simply clone the repo, npm install , and run npm test","title":"Index"},{"location":"node_modules/object-is/#object-is","text":"ES2015-compliant shim for Object.is - differentiates between -0 and +0, and can compare to NaN. Essentially, Object.is returns the same value as === - but true for NaN, and false for -0 and +0. This package implements the es-shim API interface. It works in an ES3-supported environment and complies with the spec .","title":"object-is "},{"location":"node_modules/object-is/#example","text":"Object . is = require ( 'object-is' ); var assert = require ( 'assert' ); assert . ok ( Object . is ()); assert . ok ( Object . is ( undefined )); assert . ok ( Object . is ( undefined , undefined )); assert . ok ( Object . is ( null , null )); assert . ok ( Object . is ( true , true )); assert . ok ( Object . is ( false , false )); assert . ok ( Object . is ( 'foo' , 'foo' )); var arr = [ 1 , 2 ]; assert . ok ( Object . is ( arr , arr )); assert . notOk ( Object . is ( arr , [ 1 , 2 ])); assert . ok ( Object . is ( 0 , 0 )); assert . ok ( Object . is ( - 0 , - 0 )); assert . notOk ( Object . is ( 0 , - 0 )); assert . ok ( Object . is ( NaN , NaN )); assert . ok ( Object . is ( Infinity , Infinity )); assert . ok ( Object . is ( - Infinity , - Infinity ));","title":"Example"},{"location":"node_modules/object-is/#tests","text":"Simply clone the repo, npm install , and run npm test","title":"Tests"},{"location":"node_modules/object-is/CHANGELOG/","text":"Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning . v1.1.5 - 2021-02-20 Commits [meta] do not publish github action workflow files ec00b0f [Dev Deps] update eslint , @ljharb/eslint-config , aud , tape 279645e [actions] update workflows 6b4ef5a [Dev Deps] update eslint , functions-have-names , tape f5fd32a [Deps] update call-bind 0fafc13 [Deps] update call-bind e28a929 [readme] Add note about es-shim API f903cc1 v1.1.4 - 2020-11-26 Commits [Tests] migrate tests to Github Actions 958ab26 [Tests] add shimmed and implementation and index tests; run es-shim-api in postlint; use tape runner b918fb8 [Tests] run nyc on all tests 8f62816 [actions] add \"Allow Edits\" workflow aa419f0 [Deps] use call-bind instead of es-abstract 4991728 [Dev Deps] update eslint , @ljharb/eslint-config , aud 3ce2ef5 [meta] ignore coverage output d778383 [actions] switch Automatic Rebase workflow to pull_request_target event e0d9b41 v1.1.3 - 2020-09-30 Commits [Dev Deps] update eslint , @ljharb/eslint-config , aud , auto-changelog , tape 6f1217f [Dev Deps] update eslint , @ljharb/eslint-config , auto-changelog 68d8ab0 [Deps] update es-abstract d665d57 [Deps] update es-abstract 61b4d08 v1.1.2 - 2020-04-14 Commits [Fix] avoid mutating the builtin Object.is in the main entry point 5988702 v1.1.1 - 2020-04-14 Fixed [Deps] add missing define-properties #10 v1.1.0 - 2020-04-14 Commits [New] convert to es-shim-api interface c8b6e9f [Dev Deps] update eslint , @ljharb/eslint-config , tape ; add safe-publish-latest 222a2a9 [Dev Deps] update auto-changelog , tape 1ea6a92 [Dev Deps] update auto-changelog ; add aud 1d129e0 [Tests] only audit prod deps ad12386 v1.0.2 - 2019-12-15 Commits [Tests] use shared travis-ci configs eb56ddf [Tests] up to node v12.6 , v11.15 , v10.16 , v9.11 , v8.16 , v7.10 , v6.17 , v5.12 , 4.9 ; use nvm install-latest-npm a5bb4e3 [Tests] remove jscs 1929690 Using my standard jscs.json file. a7621dc [meta] run auto-changelog 5c551c4 Update tape , covert , jscs bd84112 [meta] move repo to es-shims org 15d3cdc Test up to io.js v2.2 d1d2de4 Update tape , jscs b40e85f Add npm run eslint a80ee81 Only apps should have lockfiles f70677a [actions] add automatic rebasing / merge commit blocking 27780d3 [Tests] use npx aud instead of nsp or npm audit with hoops cf886ce [Dev Deps] update eslint , @ljharb/eslint-config , has-symbols b70e146 [meta] add version scripts 25a5308 [Tests] up to node v12.10 b6e934c [Dev Deps] update tape , jscs df38b5a Adding license and downloads badges c743f09 [Dev Deps] update eslint , @ljharb/eslint-config , covert , tape 41d1c5b Add tests for Symbols. 8189ca7 [Tests] up to io.js v3.3 , node v4.1 698c449 Add npm run security 1fe530a Test up to io.js v3.0 cd6ac03 [Refactor] no-else-return a590382 [docs] clean up some links 422df90 All grade A-supported node / iojs versions now ship with an npm that understands ^ . 8684418 Run travis-ci tests on iojs and node v0.12; speed up builds; allow 0.8 failures. 6b618ac [readme] prefer ES2015 over ES6 9aae9f9 [meta] use keepachangelog with auto-changelog 3abdcd9 [Dev Deps] update eslint , @ljharb/eslint-config 65da8bb [Tests] use has-symbols 9c88ec7 Update tape , jscs abc6021 Update jscs f85f0ba Update tape , jscs 9c8b28b Using single quotes. 46a566e [meta] add funding field f71e665 [Dev Deps] update tape 694a94e Switch from vb.teelaun.ch to versionbadg.es for the npm version badge SVG. 4b29a71 Update jscs 204e6fe Lock covert to v1.0.0. efc5a21 Updating tape d1ff721 Updating jscs 35b4df9 Updating jscs 46c3b9d Updating jscs 75c9b8b v1.0.1 - 2014-08-27 Merged Use svg instead of png to get better image quality #2 Commits Adding npm run lint af5dedd Using an easier isNaN check 89474ae Oops, run quiet coverage as part of tests 5149e18 Run linter as part of tests d5eee8a Updating covert 0b862da Updating tape 484e6ca v1.0.0 - 2014-08-01 Commits Make sure old and unstable nodes don't break Travis c8d3dfe Bumping to v1.0.0. 8811835 Updating tape 0767579 Updating covert 6b67a0b Run code coverage in tests 8b5d70d Updating tape 57b019c Updating tape 91d94f9 v0.0.0 - 2014-02-17 Commits package.json b724e50 read me 62470f5 Tests. 639e212 Initial commit 8e95b37 Implementation. 47780bc Travis CI baaf8c7 Covert is broken in node 0.6 ee040b2","title":"Changelog"},{"location":"node_modules/object-is/CHANGELOG/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"node_modules/object-is/CHANGELOG/#v115-2021-02-20","text":"","title":"v1.1.5 - 2021-02-20"},{"location":"node_modules/object-is/CHANGELOG/#commits","text":"[meta] do not publish github action workflow files ec00b0f [Dev Deps] update eslint , @ljharb/eslint-config , aud , tape 279645e [actions] update workflows 6b4ef5a [Dev Deps] update eslint , functions-have-names , tape f5fd32a [Deps] update call-bind 0fafc13 [Deps] update call-bind e28a929 [readme] Add note about es-shim API f903cc1","title":"Commits"},{"location":"node_modules/object-is/CHANGELOG/#v114-2020-11-26","text":"","title":"v1.1.4 - 2020-11-26"},{"location":"node_modules/object-is/CHANGELOG/#commits_1","text":"[Tests] migrate tests to Github Actions 958ab26 [Tests] add shimmed and implementation and index tests; run es-shim-api in postlint; use tape runner b918fb8 [Tests] run nyc on all tests 8f62816 [actions] add \"Allow Edits\" workflow aa419f0 [Deps] use call-bind instead of es-abstract 4991728 [Dev Deps] update eslint , @ljharb/eslint-config , aud 3ce2ef5 [meta] ignore coverage output d778383 [actions] switch Automatic Rebase workflow to pull_request_target event e0d9b41","title":"Commits"},{"location":"node_modules/object-is/CHANGELOG/#v113-2020-09-30","text":"","title":"v1.1.3 - 2020-09-30"},{"location":"node_modules/object-is/CHANGELOG/#commits_2","text":"[Dev Deps] update eslint , @ljharb/eslint-config , aud , auto-changelog , tape 6f1217f [Dev Deps] update eslint , @ljharb/eslint-config , auto-changelog 68d8ab0 [Deps] update es-abstract d665d57 [Deps] update es-abstract 61b4d08","title":"Commits"},{"location":"node_modules/object-is/CHANGELOG/#v112-2020-04-14","text":"","title":"v1.1.2 - 2020-04-14"},{"location":"node_modules/object-is/CHANGELOG/#commits_3","text":"[Fix] avoid mutating the builtin Object.is in the main entry point 5988702","title":"Commits"},{"location":"node_modules/object-is/CHANGELOG/#v111-2020-04-14","text":"","title":"v1.1.1 - 2020-04-14"},{"location":"node_modules/object-is/CHANGELOG/#fixed","text":"[Deps] add missing define-properties #10","title":"Fixed"},{"location":"node_modules/object-is/CHANGELOG/#v110-2020-04-14","text":"","title":"v1.1.0 - 2020-04-14"},{"location":"node_modules/object-is/CHANGELOG/#commits_4","text":"[New] convert to es-shim-api interface c8b6e9f [Dev Deps] update eslint , @ljharb/eslint-config , tape ; add safe-publish-latest 222a2a9 [Dev Deps] update auto-changelog , tape 1ea6a92 [Dev Deps] update auto-changelog ; add aud 1d129e0 [Tests] only audit prod deps ad12386","title":"Commits"},{"location":"node_modules/object-is/CHANGELOG/#v102-2019-12-15","text":"","title":"v1.0.2 - 2019-12-15"},{"location":"node_modules/object-is/CHANGELOG/#commits_5","text":"[Tests] use shared travis-ci configs eb56ddf [Tests] up to node v12.6 , v11.15 , v10.16 , v9.11 , v8.16 , v7.10 , v6.17 , v5.12 , 4.9 ; use nvm install-latest-npm a5bb4e3 [Tests] remove jscs 1929690 Using my standard jscs.json file. a7621dc [meta] run auto-changelog 5c551c4 Update tape , covert , jscs bd84112 [meta] move repo to es-shims org 15d3cdc Test up to io.js v2.2 d1d2de4 Update tape , jscs b40e85f Add npm run eslint a80ee81 Only apps should have lockfiles f70677a [actions] add automatic rebasing / merge commit blocking 27780d3 [Tests] use npx aud instead of nsp or npm audit with hoops cf886ce [Dev Deps] update eslint , @ljharb/eslint-config , has-symbols b70e146 [meta] add version scripts 25a5308 [Tests] up to node v12.10 b6e934c [Dev Deps] update tape , jscs df38b5a Adding license and downloads badges c743f09 [Dev Deps] update eslint , @ljharb/eslint-config , covert , tape 41d1c5b Add tests for Symbols. 8189ca7 [Tests] up to io.js v3.3 , node v4.1 698c449 Add npm run security 1fe530a Test up to io.js v3.0 cd6ac03 [Refactor] no-else-return a590382 [docs] clean up some links 422df90 All grade A-supported node / iojs versions now ship with an npm that understands ^ . 8684418 Run travis-ci tests on iojs and node v0.12; speed up builds; allow 0.8 failures. 6b618ac [readme] prefer ES2015 over ES6 9aae9f9 [meta] use keepachangelog with auto-changelog 3abdcd9 [Dev Deps] update eslint , @ljharb/eslint-config 65da8bb [Tests] use has-symbols 9c88ec7 Update tape , jscs abc6021 Update jscs f85f0ba Update tape , jscs 9c8b28b Using single quotes. 46a566e [meta] add funding field f71e665 [Dev Deps] update tape 694a94e Switch from vb.teelaun.ch to versionbadg.es for the npm version badge SVG. 4b29a71 Update jscs 204e6fe Lock covert to v1.0.0. efc5a21 Updating tape d1ff721 Updating jscs 35b4df9 Updating jscs 46c3b9d Updating jscs 75c9b8b","title":"Commits"},{"location":"node_modules/object-is/CHANGELOG/#v101-2014-08-27","text":"","title":"v1.0.1 - 2014-08-27"},{"location":"node_modules/object-is/CHANGELOG/#merged","text":"Use svg instead of png to get better image quality #2","title":"Merged"},{"location":"node_modules/object-is/CHANGELOG/#commits_6","text":"Adding npm run lint af5dedd Using an easier isNaN check 89474ae Oops, run quiet coverage as part of tests 5149e18 Run linter as part of tests d5eee8a Updating covert 0b862da Updating tape 484e6ca","title":"Commits"},{"location":"node_modules/object-is/CHANGELOG/#v100-2014-08-01","text":"","title":"v1.0.0 - 2014-08-01"},{"location":"node_modules/object-is/CHANGELOG/#commits_7","text":"Make sure old and unstable nodes don't break Travis c8d3dfe Bumping to v1.0.0. 8811835 Updating tape 0767579 Updating covert 6b67a0b Run code coverage in tests 8b5d70d Updating tape 57b019c Updating tape 91d94f9","title":"Commits"},{"location":"node_modules/object-is/CHANGELOG/#v000-2014-02-17","text":"","title":"v0.0.0 - 2014-02-17"},{"location":"node_modules/object-is/CHANGELOG/#commits_8","text":"package.json b724e50 read me 62470f5 Tests. 639e212 Initial commit 8e95b37 Implementation. 47780bc Travis CI baaf8c7 Covert is broken in node 0.6 ee040b2","title":"Commits"},{"location":"node_modules/object-keys/","text":"object-keys An Object.keys shim. Invoke its \"shim\" method to shim Object.keys if it is unavailable. Most common usage: var keys = Object . keys || require ( 'object-keys' ); Example var keys = require ( 'object-keys' ); var assert = require ( 'assert' ); var obj = { a : true , b : true , c : true }; assert . deepEqual ( keys ( obj ), [ 'a' , 'b' , 'c' ]); var keys = require ( 'object-keys' ); var assert = require ( 'assert' ); /* when Object.keys is not present */ delete Object . keys ; var shimmedKeys = keys . shim (); assert . equal ( shimmedKeys , keys ); assert . deepEqual ( Object . keys ( obj ), keys ( obj )); var keys = require ( 'object-keys' ); var assert = require ( 'assert' ); /* when Object.keys is present */ var shimmedKeys = keys . shim (); assert . equal ( shimmedKeys , Object . keys ); assert . deepEqual ( Object . keys ( obj ), keys ( obj )); Source Implementation taken directly from es5-shim , with modifications, including from lodash . Tests Simply clone the repo, npm install , and run npm test","title":"Index"},{"location":"node_modules/object-keys/#object-keys","text":"An Object.keys shim. Invoke its \"shim\" method to shim Object.keys if it is unavailable. Most common usage: var keys = Object . keys || require ( 'object-keys' );","title":"object-keys "},{"location":"node_modules/object-keys/#example","text":"var keys = require ( 'object-keys' ); var assert = require ( 'assert' ); var obj = { a : true , b : true , c : true }; assert . deepEqual ( keys ( obj ), [ 'a' , 'b' , 'c' ]); var keys = require ( 'object-keys' ); var assert = require ( 'assert' ); /* when Object.keys is not present */ delete Object . keys ; var shimmedKeys = keys . shim (); assert . equal ( shimmedKeys , keys ); assert . deepEqual ( Object . keys ( obj ), keys ( obj )); var keys = require ( 'object-keys' ); var assert = require ( 'assert' ); /* when Object.keys is present */ var shimmedKeys = keys . shim (); assert . equal ( shimmedKeys , Object . keys ); assert . deepEqual ( Object . keys ( obj ), keys ( obj ));","title":"Example"},{"location":"node_modules/object-keys/#source","text":"Implementation taken directly from es5-shim , with modifications, including from lodash .","title":"Source"},{"location":"node_modules/object-keys/#tests","text":"Simply clone the repo, npm install , and run npm test","title":"Tests"},{"location":"node_modules/object-keys/CHANGELOG/","text":"1.1.1 / 2019-04-06 [Fix] exclude deprecated Firefox keys (#53) 1.1.0 / 2019-02-10 [New] [Refactor] move full implementation to implementation entry point [Refactor] only evaluate the implementation if Object.keys is not present [Tests] up to node v11.8 , v10.15 , v8.15 , v6.16 [Tests] remove jscs [Tests] switch to npm audit from nsp 1.0.12 / 2018-06-18 [Fix] avoid accessing window.applicationCache , to avoid issues with latest Chrome on HTTP (#46) 1.0.11 / 2016-07-05 [Fix] exclude keys regarding the style (eg. pageYOffset ) on window to avoid reflow (#32) 1.0.10 / 2016-07-04 [Fix] exclude height and width keys on window to avoid reflow (#31) [Fix] In IE 6, window.external makes Object.keys throw [Tests] up to node v6.2 , v5.10 , v4.4 [Tests] use pretest/posttest for linting/security [Dev Deps] update tape , jscs , nsp , eslint , @ljharb/eslint-config [Dev Deps] remove unused eccheck script + dep 1.0.9 / 2015-10-19 [Fix] Blacklist 'frame' property on window (#16, #17) [Dev Deps] update jscs , eslint , @ljharb/eslint-config 1.0.8 / 2015-10-14 [Fix] wrap automation equality bug checking in try/catch, per es5-shim#327 [Fix] Blacklist 'window.frameElement' per es5-shim#322 [Docs] Switch from vb.teelaun.ch to versionbadg.es for the npm version badge SVG [Tests] up to io.js v3.3 , node v4.2 [Dev Deps] update eslint , tape , @ljharb/eslint-config , jscs 1.0.7 / 2015-07-18 [Fix] A proper fix for 176f03335e90d5c8d0d8125a99f27819c9b9cdad / https://github.com/es-shims/es5-shim/issues/275 that doesn't break dontEnum/constructor fixes in IE 8. [Fix] Remove deprecation message in Chrome by touching deprecated window properties (#15) [Tests] Improve test output for automation equality bugfix [Tests] Test on io.js v2.4 1.0.6 / 2015-07-09 [Fix] Use an object lookup rather than ES5's indexOf (#14) [Tests] ES3 browsers don't have Array.isArray [Tests] Fix no-shadow rule, as well as an IE 8 bug caused by engine NFE shadowing bugs. 1.0.5 / 2015-07-03 [Fix] Fix a flabbergasting IE 8 bug where localStorage.constructor.prototype === localStorage throws [Tests] Test up to io.js v2.3 [Dev Deps] Update nsp , eslint 1.0.4 / 2015-05-23 Fix a Safari 5.0 bug with Object.keys not working with arguments Test on latest node and io.js Update jscs , tape , eslint , nsp , is , editorconfig-tools , covert 1.0.3 / 2015-01-06 Revert \"Make object-keys more robust against later environment tampering\" to maintain ES3 compliance 1.0.2 / 2014-12-28 Update lots of dev dependencies Tweaks to README Make object-keys more robust against later environment tampering 1.0.1 / 2014-09-03 Update URLs and badges in README 1.0.0 / 2014-08-26 v1.0.0 0.6.1 / 2014-08-25 v0.6.1 Updating dependencies (tape, covert, is) Update badges in readme Use separate var statements 0.6.0 / 2014-04-23 v0.6.0 Updating dependencies (tape, covert) Make sure boxed primitives, and arguments objects, work properly in ES3 browsers Improve test matrix: test all node versions, but only latest two stables are a failure Remove internal foreach shim. 0.5.1 / 2014-03-09 0.5.1 Updating dependencies (tape, covert, is) Removing forEach from the module (but keeping it in tests) 0.5.0 / 2014-01-30 0.5.0 Explicitly returning the shim, instead of returning native Object.keys when present Adding a changelog. Cleaning up IIFE wrapping Testing on node 0.4 through 0.11 0.4.0 / 2013-08-14 v0.4.0 In Chrome 4-10 and Safari 4, typeof (new RegExp) === 'function' If it's a string, make sure to use charAt instead of brackets. Only use Function#call if necessary. Making sure the context tests actually run. Better function detection Adding the android browser Fixing testling files Updating tape Removing the \"is\" dependency. Making an isArguments shim. Adding a local forEach shim and tests. Updating paths. Moving the shim test. v0.3.0 0.3.0 / 2013-05-18 README tweak. Fixing constructor enum issue. Fixes #5 . Adding a test for #5 Updating readme. Updating dependencies. Giving credit to lodash. Make sure that a prototype's constructor property is not enumerable. Fixes #3 . Adding additional tests to handle arguments objects, and to skip \"prototype\" in functions. Fixes #2 . Fixing a typo on this test for #3 . Adding node 0.10 to travis. Adding an IE < 9 test per #3 Adding an iOS 5 mobile Safari test per #2 Moving \"indexof\" and \"is\" to be dev dependencies. Making sure the shim works with functions. Flattening the tests. 0.2.0 / 2013-05-10 v0.2.0 Object.keys should work with arrays. 0.1.8 / 2013-05-10 v0.1.8 Upgrading dependencies. Using a simpler check. Fixing a bug in hasDontEnumBug browsers. Using the newest tape! Fixing this error test. \"undefined\" is probably a reserved word in ES3. Better test message. 0.1.7 / 2013-04-17 Upgrading \"is\" once more. The key \"null\" is breaking some browsers. 0.1.6 / 2013-04-17 v0.1.6 Upgrading \"is\" 0.1.5 / 2013-04-14 Bumping version. Adding more testling browsers. Updating \"is\" 0.1.4 / 2013-04-08 Using \"is\" instead of \"is-extended\". 0.1.3 / 2013-04-07 Using \"foreach\" instead of my own shim. Removing \"tap\"; I'll just wait for \"tape\" to fix its node 0.10 bug. 0.1.2 / 2013-04-03 Adding dependency status; moving links to an index at the bottom. Upgrading is-extended; version 0.1.2 Adding an npm version badge. 0.1.1 / 2013-04-01 Adding Travis CI. Bumping the version. Adding indexOf since IE sucks. Adding a forEach shim since older browsers don't have Array#forEach. Upgrading tape - 0.3.2 uses Array#map Using explicit end instead of plan. Can't test with Array.isArray in older browsers. Using is-extended. Fixing testling files. JSHint/JSLint-ing. Removing an unused object. Using strict mode. 0.1.0 / 2013-03-30 Changing the exports should have meant a higher version bump. Oops, fixing the repo URL. Adding more tests. 0.0.2 Merge branch 'export_one_thing'; closes #1 Move shim export to a separate file.","title":"CHANGELOG"},{"location":"node_modules/object-keys/CHANGELOG/#111-2019-04-06","text":"[Fix] exclude deprecated Firefox keys (#53)","title":"1.1.1 / 2019-04-06"},{"location":"node_modules/object-keys/CHANGELOG/#110-2019-02-10","text":"[New] [Refactor] move full implementation to implementation entry point [Refactor] only evaluate the implementation if Object.keys is not present [Tests] up to node v11.8 , v10.15 , v8.15 , v6.16 [Tests] remove jscs [Tests] switch to npm audit from nsp","title":"1.1.0 / 2019-02-10"},{"location":"node_modules/object-keys/CHANGELOG/#1012-2018-06-18","text":"[Fix] avoid accessing window.applicationCache , to avoid issues with latest Chrome on HTTP (#46)","title":"1.0.12 / 2018-06-18"},{"location":"node_modules/object-keys/CHANGELOG/#1011-2016-07-05","text":"[Fix] exclude keys regarding the style (eg. pageYOffset ) on window to avoid reflow (#32)","title":"1.0.11 / 2016-07-05"},{"location":"node_modules/object-keys/CHANGELOG/#1010-2016-07-04","text":"[Fix] exclude height and width keys on window to avoid reflow (#31) [Fix] In IE 6, window.external makes Object.keys throw [Tests] up to node v6.2 , v5.10 , v4.4 [Tests] use pretest/posttest for linting/security [Dev Deps] update tape , jscs , nsp , eslint , @ljharb/eslint-config [Dev Deps] remove unused eccheck script + dep","title":"1.0.10 / 2016-07-04"},{"location":"node_modules/object-keys/CHANGELOG/#109-2015-10-19","text":"[Fix] Blacklist 'frame' property on window (#16, #17) [Dev Deps] update jscs , eslint , @ljharb/eslint-config","title":"1.0.9 / 2015-10-19"},{"location":"node_modules/object-keys/CHANGELOG/#108-2015-10-14","text":"[Fix] wrap automation equality bug checking in try/catch, per es5-shim#327 [Fix] Blacklist 'window.frameElement' per es5-shim#322 [Docs] Switch from vb.teelaun.ch to versionbadg.es for the npm version badge SVG [Tests] up to io.js v3.3 , node v4.2 [Dev Deps] update eslint , tape , @ljharb/eslint-config , jscs","title":"1.0.8 / 2015-10-14"},{"location":"node_modules/object-keys/CHANGELOG/#107-2015-07-18","text":"[Fix] A proper fix for 176f03335e90d5c8d0d8125a99f27819c9b9cdad / https://github.com/es-shims/es5-shim/issues/275 that doesn't break dontEnum/constructor fixes in IE 8. [Fix] Remove deprecation message in Chrome by touching deprecated window properties (#15) [Tests] Improve test output for automation equality bugfix [Tests] Test on io.js v2.4","title":"1.0.7 / 2015-07-18"},{"location":"node_modules/object-keys/CHANGELOG/#106-2015-07-09","text":"[Fix] Use an object lookup rather than ES5's indexOf (#14) [Tests] ES3 browsers don't have Array.isArray [Tests] Fix no-shadow rule, as well as an IE 8 bug caused by engine NFE shadowing bugs.","title":"1.0.6 / 2015-07-09"},{"location":"node_modules/object-keys/CHANGELOG/#105-2015-07-03","text":"[Fix] Fix a flabbergasting IE 8 bug where localStorage.constructor.prototype === localStorage throws [Tests] Test up to io.js v2.3 [Dev Deps] Update nsp , eslint","title":"1.0.5 / 2015-07-03"},{"location":"node_modules/object-keys/CHANGELOG/#104-2015-05-23","text":"Fix a Safari 5.0 bug with Object.keys not working with arguments Test on latest node and io.js Update jscs , tape , eslint , nsp , is , editorconfig-tools , covert","title":"1.0.4 / 2015-05-23"},{"location":"node_modules/object-keys/CHANGELOG/#103-2015-01-06","text":"Revert \"Make object-keys more robust against later environment tampering\" to maintain ES3 compliance","title":"1.0.3 / 2015-01-06"},{"location":"node_modules/object-keys/CHANGELOG/#102-2014-12-28","text":"Update lots of dev dependencies Tweaks to README Make object-keys more robust against later environment tampering","title":"1.0.2 / 2014-12-28"},{"location":"node_modules/object-keys/CHANGELOG/#101-2014-09-03","text":"Update URLs and badges in README","title":"1.0.1 / 2014-09-03"},{"location":"node_modules/object-keys/CHANGELOG/#100-2014-08-26","text":"v1.0.0","title":"1.0.0 / 2014-08-26"},{"location":"node_modules/object-keys/CHANGELOG/#061-2014-08-25","text":"v0.6.1 Updating dependencies (tape, covert, is) Update badges in readme Use separate var statements","title":"0.6.1 / 2014-08-25"},{"location":"node_modules/object-keys/CHANGELOG/#060-2014-04-23","text":"v0.6.0 Updating dependencies (tape, covert) Make sure boxed primitives, and arguments objects, work properly in ES3 browsers Improve test matrix: test all node versions, but only latest two stables are a failure Remove internal foreach shim.","title":"0.6.0 / 2014-04-23"},{"location":"node_modules/object-keys/CHANGELOG/#051-2014-03-09","text":"0.5.1 Updating dependencies (tape, covert, is) Removing forEach from the module (but keeping it in tests)","title":"0.5.1 / 2014-03-09"},{"location":"node_modules/object-keys/CHANGELOG/#050-2014-01-30","text":"0.5.0 Explicitly returning the shim, instead of returning native Object.keys when present Adding a changelog. Cleaning up IIFE wrapping Testing on node 0.4 through 0.11","title":"0.5.0 / 2014-01-30"},{"location":"node_modules/object-keys/CHANGELOG/#040-2013-08-14","text":"v0.4.0 In Chrome 4-10 and Safari 4, typeof (new RegExp) === 'function' If it's a string, make sure to use charAt instead of brackets. Only use Function#call if necessary. Making sure the context tests actually run. Better function detection Adding the android browser Fixing testling files Updating tape Removing the \"is\" dependency. Making an isArguments shim. Adding a local forEach shim and tests. Updating paths. Moving the shim test. v0.3.0","title":"0.4.0 / 2013-08-14"},{"location":"node_modules/object-keys/CHANGELOG/#030-2013-05-18","text":"README tweak. Fixing constructor enum issue. Fixes #5 . Adding a test for #5 Updating readme. Updating dependencies. Giving credit to lodash. Make sure that a prototype's constructor property is not enumerable. Fixes #3 . Adding additional tests to handle arguments objects, and to skip \"prototype\" in functions. Fixes #2 . Fixing a typo on this test for #3 . Adding node 0.10 to travis. Adding an IE < 9 test per #3 Adding an iOS 5 mobile Safari test per #2 Moving \"indexof\" and \"is\" to be dev dependencies. Making sure the shim works with functions. Flattening the tests.","title":"0.3.0 / 2013-05-18"},{"location":"node_modules/object-keys/CHANGELOG/#020-2013-05-10","text":"v0.2.0 Object.keys should work with arrays.","title":"0.2.0 / 2013-05-10"},{"location":"node_modules/object-keys/CHANGELOG/#018-2013-05-10","text":"v0.1.8 Upgrading dependencies. Using a simpler check. Fixing a bug in hasDontEnumBug browsers. Using the newest tape! Fixing this error test. \"undefined\" is probably a reserved word in ES3. Better test message.","title":"0.1.8 / 2013-05-10"},{"location":"node_modules/object-keys/CHANGELOG/#017-2013-04-17","text":"Upgrading \"is\" once more. The key \"null\" is breaking some browsers.","title":"0.1.7 / 2013-04-17"},{"location":"node_modules/object-keys/CHANGELOG/#016-2013-04-17","text":"v0.1.6 Upgrading \"is\"","title":"0.1.6 / 2013-04-17"},{"location":"node_modules/object-keys/CHANGELOG/#015-2013-04-14","text":"Bumping version. Adding more testling browsers. Updating \"is\"","title":"0.1.5 / 2013-04-14"},{"location":"node_modules/object-keys/CHANGELOG/#014-2013-04-08","text":"Using \"is\" instead of \"is-extended\".","title":"0.1.4 / 2013-04-08"},{"location":"node_modules/object-keys/CHANGELOG/#013-2013-04-07","text":"Using \"foreach\" instead of my own shim. Removing \"tap\"; I'll just wait for \"tape\" to fix its node 0.10 bug.","title":"0.1.3 / 2013-04-07"},{"location":"node_modules/object-keys/CHANGELOG/#012-2013-04-03","text":"Adding dependency status; moving links to an index at the bottom. Upgrading is-extended; version 0.1.2 Adding an npm version badge.","title":"0.1.2 / 2013-04-03"},{"location":"node_modules/object-keys/CHANGELOG/#011-2013-04-01","text":"Adding Travis CI. Bumping the version. Adding indexOf since IE sucks. Adding a forEach shim since older browsers don't have Array#forEach. Upgrading tape - 0.3.2 uses Array#map Using explicit end instead of plan. Can't test with Array.isArray in older browsers. Using is-extended. Fixing testling files. JSHint/JSLint-ing. Removing an unused object. Using strict mode.","title":"0.1.1 / 2013-04-01"},{"location":"node_modules/object-keys/CHANGELOG/#010-2013-03-30","text":"Changing the exports should have meant a higher version bump. Oops, fixing the repo URL. Adding more tests. 0.0.2 Merge branch 'export_one_thing'; closes #1 Move shim export to a separate file.","title":"0.1.0 / 2013-03-30"},{"location":"node_modules/once/","text":"once Only call a function once. usage var once = require ( 'once' ) function load ( file , cb ) { cb = once ( cb ) loader . load ( 'file' ) loader . once ( 'load' , cb ) loader . once ( 'error' , cb ) } Or add to the Function.prototype in a responsible way: // only has to be done once require ( 'once' ). proto () function load ( file , cb ) { cb = cb . once () loader . load ( 'file' ) loader . once ( 'load' , cb ) loader . once ( 'error' , cb ) } Ironically, the prototype feature makes this module twice as complicated as necessary. To check whether you function has been called, use fn.called . Once the function is called for the first time the return value of the original function is saved in fn.value and subsequent calls will continue to return this value. var once = require ( 'once' ) function load ( cb ) { cb = once ( cb ) var stream = createStream () stream . once ( 'data' , cb ) stream . once ( 'end' , function () { if ( ! cb . called ) cb ( new Error ( 'not found' )) }) } once.strict(func) Throw an error if the function is called twice. Some functions are expected to be called only once. Using once for them would potentially hide logical errors. In the example below, the greet function has to call the callback only once: function greet ( name , cb ) { // return is missing from the if statement // when no name is passed, the callback is called twice if ( ! name ) cb ( 'Hello anonymous' ) cb ( 'Hello ' + name ) } function log ( msg ) { console . log ( msg ) } // this will print 'Hello anonymous' but the logical error will be missed greet ( null , once ( msg )) // once.strict will print 'Hello anonymous' and throw an error when the callback will be called the second time greet ( null , once . strict ( msg ))","title":"once"},{"location":"node_modules/once/#once","text":"Only call a function once.","title":"once"},{"location":"node_modules/once/#usage","text":"var once = require ( 'once' ) function load ( file , cb ) { cb = once ( cb ) loader . load ( 'file' ) loader . once ( 'load' , cb ) loader . once ( 'error' , cb ) } Or add to the Function.prototype in a responsible way: // only has to be done once require ( 'once' ). proto () function load ( file , cb ) { cb = cb . once () loader . load ( 'file' ) loader . once ( 'load' , cb ) loader . once ( 'error' , cb ) } Ironically, the prototype feature makes this module twice as complicated as necessary. To check whether you function has been called, use fn.called . Once the function is called for the first time the return value of the original function is saved in fn.value and subsequent calls will continue to return this value. var once = require ( 'once' ) function load ( cb ) { cb = once ( cb ) var stream = createStream () stream . once ( 'data' , cb ) stream . once ( 'end' , function () { if ( ! cb . called ) cb ( new Error ( 'not found' )) }) }","title":"usage"},{"location":"node_modules/once/#oncestrictfunc","text":"Throw an error if the function is called twice. Some functions are expected to be called only once. Using once for them would potentially hide logical errors. In the example below, the greet function has to call the callback only once: function greet ( name , cb ) { // return is missing from the if statement // when no name is passed, the callback is called twice if ( ! name ) cb ( 'Hello anonymous' ) cb ( 'Hello ' + name ) } function log ( msg ) { console . log ( msg ) } // this will print 'Hello anonymous' but the logical error will be missed greet ( null , once ( msg )) // once.strict will print 'Hello anonymous' and throw an error when the callback will be called the second time greet ( null , once . strict ( msg ))","title":"once.strict(func)"},{"location":"node_modules/optionator/","text":"Optionator Optionator is a JavaScript/Node.js option parsing and help generation library used by eslint , Grasp , LiveScript , esmangle , escodegen , and many more . For an online demo, check out the Grasp online demo . About \u00b7 Usage \u00b7 Settings Format \u00b7 Argument Format Why? The problem with other option parsers, such as yargs or minimist , is they just accept all input, valid or not. With Optionator, if you mistype an option, it will give you an error (with a suggestion for what you meant). If you give the wrong type of argument for an option, it will give you an error rather than supplying the wrong input to your application. $ cmd --halp Invalid option '--halp' - perhaps you meant '--help'? $ cmd --count str Invalid value for option 'count' - expected type Int, received value: str. Other helpful features include reformatting the help text based on the size of the console, so that it fits even if the console is narrow, and accepting not just an array (eg. process.argv), but a string or object as well, making things like testing much easier. About Optionator uses type-check and levn behind the scenes to cast and verify input according the specified types. MIT license. Version 0.9.1 npm install optionator For updates on Optionator, follow me on twitter . Optionator is a Node.js module, but can be used in the browser as well if packed with webpack/browserify. Usage require('optionator'); returns a function. It has one property, VERSION , the current version of the library as a string. This function is called with an object specifying your options and other information, see the settings format section . This in turn returns an object with three properties, parse , parseArgv , generateHelp , and generateHelpForOption , which are all functions. var optionator = require ( 'optionator' )({ prepend : 'Usage: cmd [options]' , append : 'Version 1.0.0' , options : [{ option : 'help' , alias : 'h' , type : 'Boolean' , description : 'displays help' }, { option : 'count' , alias : 'c' , type : 'Int' , description : 'number of things' , example : 'cmd --count 2' }] }); var options = optionator . parseArgv ( process . argv ); if ( options . help ) { console . log ( optionator . generateHelp ()); } ... parse(input, parseOptions) parse processes the input according to your settings, and returns an object with the results. arguments input - [String] | Object | String - the input you wish to parse parseOptions - {slice: Int} - all options optional slice specifies how much to slice away from the beginning if the input is an array or string - by default 0 for string, 2 for array (works with process.argv ) returns Object - the parsed options, each key is a camelCase version of the option name (specified in dash-case), and each value is the processed value for that option. Positional values are in an array under the _ key. example parse ([ 'node' , 't.js' , '--count' , '2' , 'positional' ]); // {count: 2, _: ['positional']} parse ( '--count 2 positional' ); // {count: 2, _: ['positional']} parse ({ count : 2 , _ : [ 'positional' ]}); // {count: 2, _: ['positional']} parseArgv(input) parseArgv works exactly like parse , but only for array input and it slices off the first two elements. arguments input - [String] - the input you wish to parse returns See \"returns\" section in \"parse\" example parseArgv ( process . argv ); generateHelp(helpOptions) generateHelp produces help text based on your settings. arguments helpOptions - {showHidden: Boolean, interpolate: Object} - all options optional showHidden specifies whether to show options with hidden: true specified, by default it is false interpolate specify data to be interpolated in prepend and append text, {{key}} is the format - eg. generateHelp({interpolate:{version: '0.4.2'}}) , will change this append text: Version {{version}} to Version 0.4.2 returns String - the generated help text example generateHelp (); /* \"Usage: cmd [options] positional -h, --help displays help -c, --count Int number of things Version 1.0.0 \"*/ generateHelpForOption(optionName) generateHelpForOption produces expanded help text for the specified with optionName option. If an example was specified for the option, it will be displayed, and if a longDescription was specified, it will display that instead of the description . arguments optionName - String - the name of the option to display returns String - the generated help text for the option example generateHelpForOption ( 'count' ); /* \"-c, --count Int description: number of things example: cmd --count 2 \"*/ Settings Format When your require('optionator') , you get a function that takes in a settings object. This object has the type: { prepend: String, append: String, options: [{heading: String} | { option: String, alias: [String] | String, type: String, enum: [String], default: String, restPositional: Boolean, required: Boolean, overrideRequired: Boolean, dependsOn: [String] | String, concatRepeatedArrays: Boolean | (Boolean, Object), mergeRepeatedObjects: Boolean, description: String, longDescription: String, example: [String] | String }], helpStyle: { aliasSeparator: String, typeSeparator: String, descriptionSeparator: String, initialIndent: Int, secondaryIndent: Int, maxPadFactor: Number }, mutuallyExclusive: [[String | [String]]], concatRepeatedArrays: Boolean | (Boolean, Object), // deprecated, set in defaults object mergeRepeatedObjects: Boolean, // deprecated, set in defaults object positionalAnywhere: Boolean, typeAliases: Object, defaults: Object } All of the properties are optional (the Maybe has been excluded for brevities sake), except for having either heading: String or option: String in each object in the options array. Top Level Properties prepend is an optional string to be placed before the options in the help text append is an optional string to be placed after the options in the help text options is a required array specifying your options and headings, the options and headings will be displayed in the order specified helpStyle is an optional object which enables you to change the default appearance of some aspects of the help text mutuallyExclusive is an optional array of arrays of either strings or arrays of strings. The top level array is a list of rules, each rule is a list of elements - each element can be either a string (the name of an option), or a list of strings (a group of option names) - there will be an error if more than one element is present concatRepeatedArrays see description under the \"Option Properties\" heading - use at the top level is deprecated, if you want to set this for all options, use the defaults property mergeRepeatedObjects see description under the \"Option Properties\" heading - use at the top level is deprecated, if you want to set this for all options, use the defaults property positionalAnywhere is an optional boolean (defaults to true ) - when true it allows positional arguments anywhere, when false , all arguments after the first positional one are taken to be positional as well, even if they look like a flag. For example, with positionalAnywhere: false , the arguments --flag --boom 12 --crack would have two positional arguments: 12 and --crack typeAliases is an optional object, it allows you to set aliases for types, eg. {Path: 'String'} would allow you to use the type Path as an alias for the type String defaults is an optional object following the option properties format, which specifies default values for all options. A default will be overridden if manually set. For example, you can do default: { type: \"String\" } to set the default type of all options to String , and then override that default in an individual option by setting the type property Heading Properties heading a required string, the name of the heading Option Properties option the required name of the option - use dash-case, without the leading dashes alias is an optional string or array of strings which specify any aliases for the option type is a required string in the type check format , this will be used to cast the inputted value and validate it enum is an optional array of strings, each string will be parsed by levn - the argument value must be one of the resulting values - each potential value must validate against the specified type default is a optional string, which will be parsed by levn and used as the default value if none is set - the value must validate against the specified type restPositional is an optional boolean - if set to true , everything after the option will be taken to be a positional argument, even if it looks like a named argument required is an optional boolean - if set to true , the option parsing will fail if the option is not defined overrideRequired is a optional boolean - if set to true and the option is used, and there is another option which is required but not set, it will override the need for the required option and there will be no error - this is useful if you have required options and want to use --help or --version flags concatRepeatedArrays is an optional boolean or tuple with boolean and options object (defaults to false ) - when set to true and an option contains an array value and is repeated, the subsequent values for the flag will be appended rather than overwriting the original value - eg. option g of type [String] : -g a -g b -g c,d will result in ['a','b','c','d'] You can supply an options object by giving the following value: [true, options] . The one currently supported option is oneValuePerFlag , this only allows one array value per flag. This is useful if your potential values contain a comma. * mergeRepeatedObjects is an optional boolean (defaults to false ) - when set to true and an option contains an object value and is repeated, the subsequent values for the flag will be merged rather than overwriting the original value - eg. option g of type Object : -g a:1 -g b:2 -g c:3,d:4 will result in {a: 1, b: 2, c: 3, d: 4} * dependsOn is an optional string or array of strings - if simply a string (the name of another option), it will make sure that that other option is set, if an array of strings, depending on whether 'and' or 'or' is first, it will either check whether all ( ['and', 'option-a', 'option-b'] ), or at least one ( ['or', 'option-a', 'option-b'] ) other options are set * description is an optional string, which will be displayed next to the option in the help text * longDescription is an optional string, it will be displayed instead of the description when generateHelpForOption is used * example is an optional string or array of strings with example(s) for the option - these will be displayed when generateHelpForOption is used Help Style Properties aliasSeparator is an optional string, separates multiple names from each other - default: ' ,' typeSeparator is an optional string, separates the type from the names - default: ' ' descriptionSeparator is an optional string , separates the description from the padded name and type - default: ' ' initialIndent is an optional int - the amount of indent for options - default: 2 secondaryIndent is an optional int - the amount of indent if wrapped fully (in addition to the initial indent) - default: 4 maxPadFactor is an optional number - affects the default level of padding for the names/type, it is multiplied by the average of the length of the names/type - default: 1.5 Argument Format At the highest level there are two types of arguments: named, and positional. Name arguments of any length are prefixed with -- (eg. --go ), and those of one character may be prefixed with either -- or - (eg. -g ). There are two types of named arguments: boolean flags (eg. --problemo , -p ) which take no value and result in a true if they are present, the falsey undefined if they are not present, or false if present and explicitly prefixed with no (eg. --no-problemo ). Named arguments with values (eg. --tseries 800 , -t 800 ) are the other type. If the option has a type Boolean it will automatically be made into a boolean flag. Any other type results in a named argument that takes a value. For more information about how to properly set types to get the value you want, take a look at the type check and levn pages. You can group single character arguments that use a single - , however all except the last must be boolean flags (which take no value). The last may be a boolean flag, or an argument which takes a value - eg. -ba 2 is equivalent to -b -a 2 . Positional arguments are all those values which do not fall under the above - they can be anywhere, not just at the end. For example, in cmd -b one -a 2 two where b is a boolean flag, and a has the type Number , there are two positional arguments, one and two . Everything after an -- is positional, even if it looks like a named argument. You may optionally use = to separate option names from values, for example: --count=2 . If you specify the option NUM , then any argument using a single - followed by a number will be valid and will set the value of NUM . Eg. -2 will be parsed into NUM: 2 . If duplicate named arguments are present, the last one will be taken. Technical About optionator is written in LiveScript - a language that compiles to JavaScript. It uses levn to cast arguments to their specified type, and uses type-check to validate values. It also uses the prelude.ls library.","title":"Optionator"},{"location":"node_modules/optionator/#optionator","text":"Optionator is a JavaScript/Node.js option parsing and help generation library used by eslint , Grasp , LiveScript , esmangle , escodegen , and many more . For an online demo, check out the Grasp online demo . About \u00b7 Usage \u00b7 Settings Format \u00b7 Argument Format","title":"Optionator"},{"location":"node_modules/optionator/#why","text":"The problem with other option parsers, such as yargs or minimist , is they just accept all input, valid or not. With Optionator, if you mistype an option, it will give you an error (with a suggestion for what you meant). If you give the wrong type of argument for an option, it will give you an error rather than supplying the wrong input to your application. $ cmd --halp Invalid option '--halp' - perhaps you meant '--help'? $ cmd --count str Invalid value for option 'count' - expected type Int, received value: str. Other helpful features include reformatting the help text based on the size of the console, so that it fits even if the console is narrow, and accepting not just an array (eg. process.argv), but a string or object as well, making things like testing much easier.","title":"Why?"},{"location":"node_modules/optionator/#about","text":"Optionator uses type-check and levn behind the scenes to cast and verify input according the specified types. MIT license. Version 0.9.1 npm install optionator For updates on Optionator, follow me on twitter . Optionator is a Node.js module, but can be used in the browser as well if packed with webpack/browserify.","title":"About"},{"location":"node_modules/optionator/#usage","text":"require('optionator'); returns a function. It has one property, VERSION , the current version of the library as a string. This function is called with an object specifying your options and other information, see the settings format section . This in turn returns an object with three properties, parse , parseArgv , generateHelp , and generateHelpForOption , which are all functions. var optionator = require ( 'optionator' )({ prepend : 'Usage: cmd [options]' , append : 'Version 1.0.0' , options : [{ option : 'help' , alias : 'h' , type : 'Boolean' , description : 'displays help' }, { option : 'count' , alias : 'c' , type : 'Int' , description : 'number of things' , example : 'cmd --count 2' }] }); var options = optionator . parseArgv ( process . argv ); if ( options . help ) { console . log ( optionator . generateHelp ()); } ...","title":"Usage"},{"location":"node_modules/optionator/#parseinput-parseoptions","text":"parse processes the input according to your settings, and returns an object with the results.","title":"parse(input, parseOptions)"},{"location":"node_modules/optionator/#arguments","text":"input - [String] | Object | String - the input you wish to parse parseOptions - {slice: Int} - all options optional slice specifies how much to slice away from the beginning if the input is an array or string - by default 0 for string, 2 for array (works with process.argv )","title":"arguments"},{"location":"node_modules/optionator/#returns","text":"Object - the parsed options, each key is a camelCase version of the option name (specified in dash-case), and each value is the processed value for that option. Positional values are in an array under the _ key.","title":"returns"},{"location":"node_modules/optionator/#example","text":"parse ([ 'node' , 't.js' , '--count' , '2' , 'positional' ]); // {count: 2, _: ['positional']} parse ( '--count 2 positional' ); // {count: 2, _: ['positional']} parse ({ count : 2 , _ : [ 'positional' ]}); // {count: 2, _: ['positional']}","title":"example"},{"location":"node_modules/optionator/#parseargvinput","text":"parseArgv works exactly like parse , but only for array input and it slices off the first two elements.","title":"parseArgv(input)"},{"location":"node_modules/optionator/#arguments_1","text":"input - [String] - the input you wish to parse","title":"arguments"},{"location":"node_modules/optionator/#returns_1","text":"See \"returns\" section in \"parse\"","title":"returns"},{"location":"node_modules/optionator/#example_1","text":"parseArgv ( process . argv );","title":"example"},{"location":"node_modules/optionator/#generatehelphelpoptions","text":"generateHelp produces help text based on your settings.","title":"generateHelp(helpOptions)"},{"location":"node_modules/optionator/#arguments_2","text":"helpOptions - {showHidden: Boolean, interpolate: Object} - all options optional showHidden specifies whether to show options with hidden: true specified, by default it is false interpolate specify data to be interpolated in prepend and append text, {{key}} is the format - eg. generateHelp({interpolate:{version: '0.4.2'}}) , will change this append text: Version {{version}} to Version 0.4.2","title":"arguments"},{"location":"node_modules/optionator/#returns_2","text":"String - the generated help text","title":"returns"},{"location":"node_modules/optionator/#example_2","text":"generateHelp (); /* \"Usage: cmd [options] positional -h, --help displays help -c, --count Int number of things Version 1.0.0 \"*/","title":"example"},{"location":"node_modules/optionator/#generatehelpforoptionoptionname","text":"generateHelpForOption produces expanded help text for the specified with optionName option. If an example was specified for the option, it will be displayed, and if a longDescription was specified, it will display that instead of the description .","title":"generateHelpForOption(optionName)"},{"location":"node_modules/optionator/#arguments_3","text":"optionName - String - the name of the option to display","title":"arguments"},{"location":"node_modules/optionator/#returns_3","text":"String - the generated help text for the option","title":"returns"},{"location":"node_modules/optionator/#example_3","text":"generateHelpForOption ( 'count' ); /* \"-c, --count Int description: number of things example: cmd --count 2 \"*/","title":"example"},{"location":"node_modules/optionator/#settings-format","text":"When your require('optionator') , you get a function that takes in a settings object. This object has the type: { prepend: String, append: String, options: [{heading: String} | { option: String, alias: [String] | String, type: String, enum: [String], default: String, restPositional: Boolean, required: Boolean, overrideRequired: Boolean, dependsOn: [String] | String, concatRepeatedArrays: Boolean | (Boolean, Object), mergeRepeatedObjects: Boolean, description: String, longDescription: String, example: [String] | String }], helpStyle: { aliasSeparator: String, typeSeparator: String, descriptionSeparator: String, initialIndent: Int, secondaryIndent: Int, maxPadFactor: Number }, mutuallyExclusive: [[String | [String]]], concatRepeatedArrays: Boolean | (Boolean, Object), // deprecated, set in defaults object mergeRepeatedObjects: Boolean, // deprecated, set in defaults object positionalAnywhere: Boolean, typeAliases: Object, defaults: Object } All of the properties are optional (the Maybe has been excluded for brevities sake), except for having either heading: String or option: String in each object in the options array.","title":"Settings Format"},{"location":"node_modules/optionator/#top-level-properties","text":"prepend is an optional string to be placed before the options in the help text append is an optional string to be placed after the options in the help text options is a required array specifying your options and headings, the options and headings will be displayed in the order specified helpStyle is an optional object which enables you to change the default appearance of some aspects of the help text mutuallyExclusive is an optional array of arrays of either strings or arrays of strings. The top level array is a list of rules, each rule is a list of elements - each element can be either a string (the name of an option), or a list of strings (a group of option names) - there will be an error if more than one element is present concatRepeatedArrays see description under the \"Option Properties\" heading - use at the top level is deprecated, if you want to set this for all options, use the defaults property mergeRepeatedObjects see description under the \"Option Properties\" heading - use at the top level is deprecated, if you want to set this for all options, use the defaults property positionalAnywhere is an optional boolean (defaults to true ) - when true it allows positional arguments anywhere, when false , all arguments after the first positional one are taken to be positional as well, even if they look like a flag. For example, with positionalAnywhere: false , the arguments --flag --boom 12 --crack would have two positional arguments: 12 and --crack typeAliases is an optional object, it allows you to set aliases for types, eg. {Path: 'String'} would allow you to use the type Path as an alias for the type String defaults is an optional object following the option properties format, which specifies default values for all options. A default will be overridden if manually set. For example, you can do default: { type: \"String\" } to set the default type of all options to String , and then override that default in an individual option by setting the type property","title":"Top Level Properties"},{"location":"node_modules/optionator/#heading-properties","text":"heading a required string, the name of the heading","title":"Heading Properties"},{"location":"node_modules/optionator/#option-properties","text":"option the required name of the option - use dash-case, without the leading dashes alias is an optional string or array of strings which specify any aliases for the option type is a required string in the type check format , this will be used to cast the inputted value and validate it enum is an optional array of strings, each string will be parsed by levn - the argument value must be one of the resulting values - each potential value must validate against the specified type default is a optional string, which will be parsed by levn and used as the default value if none is set - the value must validate against the specified type restPositional is an optional boolean - if set to true , everything after the option will be taken to be a positional argument, even if it looks like a named argument required is an optional boolean - if set to true , the option parsing will fail if the option is not defined overrideRequired is a optional boolean - if set to true and the option is used, and there is another option which is required but not set, it will override the need for the required option and there will be no error - this is useful if you have required options and want to use --help or --version flags concatRepeatedArrays is an optional boolean or tuple with boolean and options object (defaults to false ) - when set to true and an option contains an array value and is repeated, the subsequent values for the flag will be appended rather than overwriting the original value - eg. option g of type [String] : -g a -g b -g c,d will result in ['a','b','c','d'] You can supply an options object by giving the following value: [true, options] . The one currently supported option is oneValuePerFlag , this only allows one array value per flag. This is useful if your potential values contain a comma. * mergeRepeatedObjects is an optional boolean (defaults to false ) - when set to true and an option contains an object value and is repeated, the subsequent values for the flag will be merged rather than overwriting the original value - eg. option g of type Object : -g a:1 -g b:2 -g c:3,d:4 will result in {a: 1, b: 2, c: 3, d: 4} * dependsOn is an optional string or array of strings - if simply a string (the name of another option), it will make sure that that other option is set, if an array of strings, depending on whether 'and' or 'or' is first, it will either check whether all ( ['and', 'option-a', 'option-b'] ), or at least one ( ['or', 'option-a', 'option-b'] ) other options are set * description is an optional string, which will be displayed next to the option in the help text * longDescription is an optional string, it will be displayed instead of the description when generateHelpForOption is used * example is an optional string or array of strings with example(s) for the option - these will be displayed when generateHelpForOption is used","title":"Option Properties"},{"location":"node_modules/optionator/#help-style-properties","text":"aliasSeparator is an optional string, separates multiple names from each other - default: ' ,' typeSeparator is an optional string, separates the type from the names - default: ' ' descriptionSeparator is an optional string , separates the description from the padded name and type - default: ' ' initialIndent is an optional int - the amount of indent for options - default: 2 secondaryIndent is an optional int - the amount of indent if wrapped fully (in addition to the initial indent) - default: 4 maxPadFactor is an optional number - affects the default level of padding for the names/type, it is multiplied by the average of the length of the names/type - default: 1.5","title":"Help Style Properties"},{"location":"node_modules/optionator/#argument-format","text":"At the highest level there are two types of arguments: named, and positional. Name arguments of any length are prefixed with -- (eg. --go ), and those of one character may be prefixed with either -- or - (eg. -g ). There are two types of named arguments: boolean flags (eg. --problemo , -p ) which take no value and result in a true if they are present, the falsey undefined if they are not present, or false if present and explicitly prefixed with no (eg. --no-problemo ). Named arguments with values (eg. --tseries 800 , -t 800 ) are the other type. If the option has a type Boolean it will automatically be made into a boolean flag. Any other type results in a named argument that takes a value. For more information about how to properly set types to get the value you want, take a look at the type check and levn pages. You can group single character arguments that use a single - , however all except the last must be boolean flags (which take no value). The last may be a boolean flag, or an argument which takes a value - eg. -ba 2 is equivalent to -b -a 2 . Positional arguments are all those values which do not fall under the above - they can be anywhere, not just at the end. For example, in cmd -b one -a 2 two where b is a boolean flag, and a has the type Number , there are two positional arguments, one and two . Everything after an -- is positional, even if it looks like a named argument. You may optionally use = to separate option names from values, for example: --count=2 . If you specify the option NUM , then any argument using a single - followed by a number will be valid and will set the value of NUM . Eg. -2 will be parsed into NUM: 2 . If duplicate named arguments are present, the last one will be taken.","title":"Argument Format"},{"location":"node_modules/optionator/#technical-about","text":"optionator is written in LiveScript - a language that compiles to JavaScript. It uses levn to cast arguments to their specified type, and uses type-check to validate values. It also uses the prelude.ls library.","title":"Technical About"},{"location":"node_modules/optionator/CHANGELOG/","text":"0.9.0 update dependencies, in particular levn and type-check - this could affect behaviour of argument parsing 0.8.3 changes dependency from wordwrap to word-wrap due to license issue update dependencies 0.8.2 fix bug #18 - detect missing value when flag is last item update dependencies 0.8.1 update fast-levenshtein dependency 0.8.0 update levn dependency - supplying a float value to an option with type Int now throws an error, instead of silently converting to an Int 0.7.1 fix bug with use of defaults and concatRepeatedArrays or mergeRepeatedObjects 0.7.0 added concatrepeatedarrays option: oneValuePerFlag , only allows one array value per flag added typeAliases option added parseArgv which takes an array and parses with the first two items sliced off changed enum help style bug fixes (#12) use of concatRepeatedArrays and mergeRepeatedObjects at the top level is deprecated, use it as either a per-option option, or set them in the defaults object to set them for all objects 0.6.0 added defaults lib-option flag, allowing one to set default properties for all options added concatRepeatedArrays and mergeRepeatedObjects as option level properties, allowing you to turn this feature on for specific options only 0.5.0 Boolean flags with default: 'true' , and no short aliases, will by default show the --no version in help 0.4.0 add mergeRepeatedObjects setting 0.3.0 add concatRepeatedArrays setting add overrideRequired option setting use just Levenshtein string compare algo rather than Levenshtein Damerau to due dependency license issue 0.2.2 bug fixes 0.2.1 improved interpolation added changelog 0.2.0 add dependency checks to options - added dependsOn as an option property add interpolation for prepend and append text with new generateHelp option, interpolate 0.1.1 update dependencies 0.1.0 initial release","title":"0.9.0"},{"location":"node_modules/optionator/CHANGELOG/#090","text":"update dependencies, in particular levn and type-check - this could affect behaviour of argument parsing","title":"0.9.0"},{"location":"node_modules/optionator/CHANGELOG/#083","text":"changes dependency from wordwrap to word-wrap due to license issue update dependencies","title":"0.8.3"},{"location":"node_modules/optionator/CHANGELOG/#082","text":"fix bug #18 - detect missing value when flag is last item update dependencies","title":"0.8.2"},{"location":"node_modules/optionator/CHANGELOG/#081","text":"update fast-levenshtein dependency","title":"0.8.1"},{"location":"node_modules/optionator/CHANGELOG/#080","text":"update levn dependency - supplying a float value to an option with type Int now throws an error, instead of silently converting to an Int","title":"0.8.0"},{"location":"node_modules/optionator/CHANGELOG/#071","text":"fix bug with use of defaults and concatRepeatedArrays or mergeRepeatedObjects","title":"0.7.1"},{"location":"node_modules/optionator/CHANGELOG/#070","text":"added concatrepeatedarrays option: oneValuePerFlag , only allows one array value per flag added typeAliases option added parseArgv which takes an array and parses with the first two items sliced off changed enum help style bug fixes (#12) use of concatRepeatedArrays and mergeRepeatedObjects at the top level is deprecated, use it as either a per-option option, or set them in the defaults object to set them for all objects","title":"0.7.0"},{"location":"node_modules/optionator/CHANGELOG/#060","text":"added defaults lib-option flag, allowing one to set default properties for all options added concatRepeatedArrays and mergeRepeatedObjects as option level properties, allowing you to turn this feature on for specific options only","title":"0.6.0"},{"location":"node_modules/optionator/CHANGELOG/#050","text":"Boolean flags with default: 'true' , and no short aliases, will by default show the --no version in help","title":"0.5.0"},{"location":"node_modules/optionator/CHANGELOG/#040","text":"add mergeRepeatedObjects setting","title":"0.4.0"},{"location":"node_modules/optionator/CHANGELOG/#030","text":"add concatRepeatedArrays setting add overrideRequired option setting use just Levenshtein string compare algo rather than Levenshtein Damerau to due dependency license issue","title":"0.3.0"},{"location":"node_modules/optionator/CHANGELOG/#022","text":"bug fixes","title":"0.2.2"},{"location":"node_modules/optionator/CHANGELOG/#021","text":"improved interpolation added changelog","title":"0.2.1"},{"location":"node_modules/optionator/CHANGELOG/#020","text":"add dependency checks to options - added dependsOn as an option property add interpolation for prepend and append text with new generateHelp option, interpolate","title":"0.2.0"},{"location":"node_modules/optionator/CHANGELOG/#011","text":"update dependencies","title":"0.1.1"},{"location":"node_modules/optionator/CHANGELOG/#010","text":"initial release","title":"0.1.0"},{"location":"node_modules/p-limit/readme/","text":"p-limit Run multiple promise-returning & async functions with limited concurrency Install $ npm install p-limit Usage const pLimit = require ( 'p-limit' ); const limit = pLimit ( 1 ); const input = [ limit (() => fetchSomething ( 'foo' )), limit (() => fetchSomething ( 'bar' )), limit (() => doSomething ()) ]; ( async () => { // Only one promise is run at once const result = await Promise . all ( input ); console . log ( result ); })(); API pLimit(concurrency) Returns a limit function. concurrency Type: number Minimum: 1 Concurrency limit. limit(fn) Returns the promise returned by calling fn . fn Type: Function Promise-returning/async function. Related p-queue - Promise queue with concurrency control p-throttle - Throttle promise-returning & async functions p-debounce - Debounce promise-returning & async functions p-all - Run promise-returning & async functions concurrently with optional limited concurrency More\u2026 License MIT \u00a9 Sindre Sorhus","title":"p-limit [![Build Status](https://travis-ci.org/sindresorhus/p-limit.svg?branch=master)](https://travis-ci.org/sindresorhus/p-limit)"},{"location":"node_modules/p-limit/readme/#p-limit","text":"Run multiple promise-returning & async functions with limited concurrency","title":"p-limit"},{"location":"node_modules/p-limit/readme/#install","text":"$ npm install p-limit","title":"Install"},{"location":"node_modules/p-limit/readme/#usage","text":"const pLimit = require ( 'p-limit' ); const limit = pLimit ( 1 ); const input = [ limit (() => fetchSomething ( 'foo' )), limit (() => fetchSomething ( 'bar' )), limit (() => doSomething ()) ]; ( async () => { // Only one promise is run at once const result = await Promise . all ( input ); console . log ( result ); })();","title":"Usage"},{"location":"node_modules/p-limit/readme/#api","text":"","title":"API"},{"location":"node_modules/p-limit/readme/#plimitconcurrency","text":"Returns a limit function.","title":"pLimit(concurrency)"},{"location":"node_modules/p-limit/readme/#concurrency","text":"Type: number Minimum: 1 Concurrency limit.","title":"concurrency"},{"location":"node_modules/p-limit/readme/#limitfn","text":"Returns the promise returned by calling fn .","title":"limit(fn)"},{"location":"node_modules/p-limit/readme/#fn","text":"Type: Function Promise-returning/async function.","title":"fn"},{"location":"node_modules/p-limit/readme/#related","text":"p-queue - Promise queue with concurrency control p-throttle - Throttle promise-returning & async functions p-debounce - Debounce promise-returning & async functions p-all - Run promise-returning & async functions concurrently with optional limited concurrency More\u2026","title":"Related"},{"location":"node_modules/p-limit/readme/#license","text":"MIT \u00a9 Sindre Sorhus","title":"License"},{"location":"node_modules/p-locate/readme/","text":"p-locate Get the first fulfilled promise that satisfies the provided testing function Think of it like an async version of Array#find . Install $ npm install --save p-locate Usage Here we find the first file that exists on disk, in array order. const pathExists = require ( 'path-exists' ); const pLocate = require ( 'p-locate' ); const files = [ 'unicorn.png' , 'rainbow.png' , // only this one actually exists on disk 'pony.png' ]; pLocate ( files , file => pathExists ( file )). then ( foundPath => { console . log ( foundPath ); //=> 'rainbow' }); The above is just an example. Use locate-path if you need this. API pLocate(input, tester, [options]) Returns a Promise that is fulfilled when tester resolves to true or the iterable is done, or rejects if any of the promises reject. The fulfilled value is the current iterable value or undefined if tester never resolved to true . input Type: Iterable<Promise|any> tester(element) Type: Function Expected to return a Promise<boolean> or boolean. options Type: Object concurrency Type: number Default: Infinity Minimum: 1 Number of concurrently pending promises returned by tester . preserveOrder Type: boolean Default: true Preserve input order when searching. Disable this to improve performance if you don't care about the order. Related p-map - Map over promises concurrently p-filter - Filter promises concurrently p-any - Wait for any promise to be fulfilled More\u2026 License MIT \u00a9 Sindre Sorhus","title":"p-locate [![Build Status](https://travis-ci.org/sindresorhus/p-locate.svg?branch=master)](https://travis-ci.org/sindresorhus/p-locate)"},{"location":"node_modules/p-locate/readme/#p-locate","text":"Get the first fulfilled promise that satisfies the provided testing function Think of it like an async version of Array#find .","title":"p-locate"},{"location":"node_modules/p-locate/readme/#install","text":"$ npm install --save p-locate","title":"Install"},{"location":"node_modules/p-locate/readme/#usage","text":"Here we find the first file that exists on disk, in array order. const pathExists = require ( 'path-exists' ); const pLocate = require ( 'p-locate' ); const files = [ 'unicorn.png' , 'rainbow.png' , // only this one actually exists on disk 'pony.png' ]; pLocate ( files , file => pathExists ( file )). then ( foundPath => { console . log ( foundPath ); //=> 'rainbow' }); The above is just an example. Use locate-path if you need this.","title":"Usage"},{"location":"node_modules/p-locate/readme/#api","text":"","title":"API"},{"location":"node_modules/p-locate/readme/#plocateinput-tester-options","text":"Returns a Promise that is fulfilled when tester resolves to true or the iterable is done, or rejects if any of the promises reject. The fulfilled value is the current iterable value or undefined if tester never resolved to true .","title":"pLocate(input, tester, [options])"},{"location":"node_modules/p-locate/readme/#input","text":"Type: Iterable<Promise|any>","title":"input"},{"location":"node_modules/p-locate/readme/#testerelement","text":"Type: Function Expected to return a Promise<boolean> or boolean.","title":"tester(element)"},{"location":"node_modules/p-locate/readme/#options","text":"Type: Object","title":"options"},{"location":"node_modules/p-locate/readme/#concurrency","text":"Type: number Default: Infinity Minimum: 1 Number of concurrently pending promises returned by tester .","title":"concurrency"},{"location":"node_modules/p-locate/readme/#preserveorder","text":"Type: boolean Default: true Preserve input order when searching. Disable this to improve performance if you don't care about the order.","title":"preserveOrder"},{"location":"node_modules/p-locate/readme/#related","text":"p-map - Map over promises concurrently p-filter - Filter promises concurrently p-any - Wait for any promise to be fulfilled More\u2026","title":"Related"},{"location":"node_modules/p-locate/readme/#license","text":"MIT \u00a9 Sindre Sorhus","title":"License"},{"location":"node_modules/p-try/readme/","text":"p-try Promise#try() ponyfill - Starts a promise chain How is it useful? Install $ npm install --save p-try Usage const pTry = require ( 'p-try' ); pTry (() => { return synchronousFunctionThatMightThrow (); }). then ( value => { console . log ( value ); }). catch ( error => { console . error ( error ); }); Related p-finally - Promise#finally() ponyfill - Invoked when the promise is settled regardless of outcome More\u2026 License MIT \u00a9 Sindre Sorhus","title":"p-try [![Build Status](https://travis-ci.org/sindresorhus/p-try.svg?branch=master)](https://travis-ci.org/sindresorhus/p-try)"},{"location":"node_modules/p-try/readme/#p-try","text":"Promise#try() ponyfill - Starts a promise chain How is it useful?","title":"p-try"},{"location":"node_modules/p-try/readme/#install","text":"$ npm install --save p-try","title":"Install"},{"location":"node_modules/p-try/readme/#usage","text":"const pTry = require ( 'p-try' ); pTry (() => { return synchronousFunctionThatMightThrow (); }). then ( value => { console . log ( value ); }). catch ( error => { console . error ( error ); });","title":"Usage"},{"location":"node_modules/p-try/readme/#related","text":"p-finally - Promise#finally() ponyfill - Invoked when the promise is settled regardless of outcome More\u2026","title":"Related"},{"location":"node_modules/p-try/readme/#license","text":"MIT \u00a9 Sindre Sorhus","title":"License"},{"location":"node_modules/parse-entities/readme/","text":"parse-entities Parse HTML character references: fast, spec-compliant, positional information. Install npm : npm install parse-entities Use var decode = require ( 'parse-entities' ) decode ( 'alpha &amp bravo' ) // => alpha & bravo decode ( 'charlie &copycat; delta' ) // => charlie \u00a9cat; delta decode ( 'echo &copy; foxtrot &#8800; golf &#x1D306; hotel' ) // => echo \u00a9 foxtrot \u2260 golf \ud834\udf06 hotel API parseEntities(value[, options]) options options.additional Additional character to accept ( string? , default: '' ). This allows other characters, without error, when following an ampersand. options.attribute Whether to parse value as an attribute value ( boolean? , default: false ). options.nonTerminated Whether to allow non-terminated entities ( boolean , default: true ). For example, &copycat for \u00a9cat . This behaviour is spec-compliant but can lead to unexpected results. options.warning Error handler ( Function? ). options.text Text handler ( Function? ). options.reference Reference handler ( Function? ). options.warningContext Context used when invoking warning ( '*' , optional). options.textContext Context used when invoking text ( '*' , optional). options.referenceContext Context used when invoking reference ( '*' , optional) options.position Starting position of value ( Location or Position , optional). Useful when dealing with values nested in some sort of syntax tree. The default is: { start : { line : 1 , column : 1 , offset : 0 }, indent : [] } Returns string \u2014 Decoded value . function warning(reason, position, code) Error handler. Context this refers to warningContext when given to parseEntities . Parameters reason Human-readable reason for triggering a parse error ( string ). position Place at which the parse error occurred ( Position ). code Identifier of reason for triggering a parse error ( number ). The following codes are used: Code Example Note 1 foo &amp bar Missing semicolon (named) 2 foo &#123; bar Missing semicolon (numeric) 3 Foo &bar baz Ampersand did not start a reference 4 Foo &# Empty reference 5 Foo &bar; baz Unknown entity 6 Foo &#128; baz Disallowed reference 7 Foo &#xD800; baz Prohibited: outside permissible unicode range function text(value, location) Text handler. Context this refers to textContext when given to parseEntities . Parameters value String of content ( string ). location Location at which value starts and ends ( Location ). function reference(value, location, source) Character reference handler. Context this refers to referenceContext when given to parseEntities . Parameters value Encoded character reference ( string ). location Location at which value starts and ends ( Location ). source Source of character reference ( Location ). Related stringify-entities \u2014 Encode HTML character references character-entities \u2014 Info on character entities character-entities-html4 \u2014 Info on HTML4 character entities character-entities-legacy \u2014 Info on legacy character entities character-reference-invalid \u2014 Info on invalid numeric character references License MIT \u00a9 Titus Wormer","title":"parse-entities"},{"location":"node_modules/parse-entities/readme/#parse-entities","text":"Parse HTML character references: fast, spec-compliant, positional information.","title":"parse-entities"},{"location":"node_modules/parse-entities/readme/#install","text":"npm : npm install parse-entities","title":"Install"},{"location":"node_modules/parse-entities/readme/#use","text":"var decode = require ( 'parse-entities' ) decode ( 'alpha &amp bravo' ) // => alpha & bravo decode ( 'charlie &copycat; delta' ) // => charlie \u00a9cat; delta decode ( 'echo &copy; foxtrot &#8800; golf &#x1D306; hotel' ) // => echo \u00a9 foxtrot \u2260 golf \ud834\udf06 hotel","title":"Use"},{"location":"node_modules/parse-entities/readme/#api","text":"","title":"API"},{"location":"node_modules/parse-entities/readme/#parseentitiesvalue-options","text":"","title":"parseEntities(value[, options])"},{"location":"node_modules/parse-entities/readme/#options","text":"","title":"options"},{"location":"node_modules/parse-entities/readme/#optionsadditional","text":"Additional character to accept ( string? , default: '' ). This allows other characters, without error, when following an ampersand.","title":"options.additional"},{"location":"node_modules/parse-entities/readme/#optionsattribute","text":"Whether to parse value as an attribute value ( boolean? , default: false ).","title":"options.attribute"},{"location":"node_modules/parse-entities/readme/#optionsnonterminated","text":"Whether to allow non-terminated entities ( boolean , default: true ). For example, &copycat for \u00a9cat . This behaviour is spec-compliant but can lead to unexpected results.","title":"options.nonTerminated"},{"location":"node_modules/parse-entities/readme/#optionswarning","text":"Error handler ( Function? ).","title":"options.warning"},{"location":"node_modules/parse-entities/readme/#optionstext","text":"Text handler ( Function? ).","title":"options.text"},{"location":"node_modules/parse-entities/readme/#optionsreference","text":"Reference handler ( Function? ).","title":"options.reference"},{"location":"node_modules/parse-entities/readme/#optionswarningcontext","text":"Context used when invoking warning ( '*' , optional).","title":"options.warningContext"},{"location":"node_modules/parse-entities/readme/#optionstextcontext","text":"Context used when invoking text ( '*' , optional).","title":"options.textContext"},{"location":"node_modules/parse-entities/readme/#optionsreferencecontext","text":"Context used when invoking reference ( '*' , optional)","title":"options.referenceContext"},{"location":"node_modules/parse-entities/readme/#optionsposition","text":"Starting position of value ( Location or Position , optional). Useful when dealing with values nested in some sort of syntax tree. The default is: { start : { line : 1 , column : 1 , offset : 0 }, indent : [] }","title":"options.position"},{"location":"node_modules/parse-entities/readme/#returns","text":"string \u2014 Decoded value .","title":"Returns"},{"location":"node_modules/parse-entities/readme/#function-warningreason-position-code","text":"Error handler.","title":"function warning(reason, position, code)"},{"location":"node_modules/parse-entities/readme/#context","text":"this refers to warningContext when given to parseEntities .","title":"Context"},{"location":"node_modules/parse-entities/readme/#parameters","text":"","title":"Parameters"},{"location":"node_modules/parse-entities/readme/#reason","text":"Human-readable reason for triggering a parse error ( string ).","title":"reason"},{"location":"node_modules/parse-entities/readme/#position","text":"Place at which the parse error occurred ( Position ).","title":"position"},{"location":"node_modules/parse-entities/readme/#code","text":"Identifier of reason for triggering a parse error ( number ). The following codes are used: Code Example Note 1 foo &amp bar Missing semicolon (named) 2 foo &#123; bar Missing semicolon (numeric) 3 Foo &bar baz Ampersand did not start a reference 4 Foo &# Empty reference 5 Foo &bar; baz Unknown entity 6 Foo &#128; baz Disallowed reference 7 Foo &#xD800; baz Prohibited: outside permissible unicode range","title":"code"},{"location":"node_modules/parse-entities/readme/#function-textvalue-location","text":"Text handler.","title":"function text(value, location)"},{"location":"node_modules/parse-entities/readme/#context_1","text":"this refers to textContext when given to parseEntities .","title":"Context"},{"location":"node_modules/parse-entities/readme/#parameters_1","text":"","title":"Parameters"},{"location":"node_modules/parse-entities/readme/#value","text":"String of content ( string ).","title":"value"},{"location":"node_modules/parse-entities/readme/#location","text":"Location at which value starts and ends ( Location ).","title":"location"},{"location":"node_modules/parse-entities/readme/#function-referencevalue-location-source","text":"Character reference handler.","title":"function reference(value, location, source)"},{"location":"node_modules/parse-entities/readme/#context_2","text":"this refers to referenceContext when given to parseEntities .","title":"Context"},{"location":"node_modules/parse-entities/readme/#parameters_2","text":"","title":"Parameters"},{"location":"node_modules/parse-entities/readme/#value_1","text":"Encoded character reference ( string ).","title":"value"},{"location":"node_modules/parse-entities/readme/#location_1","text":"Location at which value starts and ends ( Location ).","title":"location"},{"location":"node_modules/parse-entities/readme/#source","text":"Source of character reference ( Location ).","title":"source"},{"location":"node_modules/parse-entities/readme/#related","text":"stringify-entities \u2014 Encode HTML character references character-entities \u2014 Info on character entities character-entities-html4 \u2014 Info on HTML4 character entities character-entities-legacy \u2014 Info on legacy character entities character-reference-invalid \u2014 Info on invalid numeric character references","title":"Related"},{"location":"node_modules/parse-entities/readme/#license","text":"MIT \u00a9 Titus Wormer","title":"License"},{"location":"node_modules/parse-json/readme/","text":"parse-json Parse JSON with more helpful errors Install $ npm install --save parse-json Usage var parseJson = require ( 'parse-json' ); var json = '{\\n\\t\"foo\": true,\\n}' ; JSON . parse ( json ); /* undefined:3 } ^ SyntaxError: Unexpected token } */ parseJson ( json ); /* JSONError: Trailing comma in object at 3:1 } ^ */ parseJson ( json , 'foo.json' ); /* JSONError: Trailing comma in object at 3:1 in foo.json } ^ */ // you can also add the filename at a later point try { parseJson ( json ); } catch ( err ) { err . fileName = 'foo.json' ; throw err ; } /* JSONError: Trailing comma in object at 3:1 in foo.json } ^ */ API parseJson(input, [reviver], [filename]) input Type: string reviver Type: function Prescribes how the value originally produced by parsing is transformed, before being returned. See JSON.parse docs for more. filename Type: string Filename displayed in the error message. License MIT \u00a9 Sindre Sorhus","title":"parse-json [![Build Status](https://travis-ci.org/sindresorhus/parse-json.svg?branch=master)](https://travis-ci.org/sindresorhus/parse-json)"},{"location":"node_modules/parse-json/readme/#parse-json","text":"Parse JSON with more helpful errors","title":"parse-json"},{"location":"node_modules/parse-json/readme/#install","text":"$ npm install --save parse-json","title":"Install"},{"location":"node_modules/parse-json/readme/#usage","text":"var parseJson = require ( 'parse-json' ); var json = '{\\n\\t\"foo\": true,\\n}' ; JSON . parse ( json ); /* undefined:3 } ^ SyntaxError: Unexpected token } */ parseJson ( json ); /* JSONError: Trailing comma in object at 3:1 } ^ */ parseJson ( json , 'foo.json' ); /* JSONError: Trailing comma in object at 3:1 in foo.json } ^ */ // you can also add the filename at a later point try { parseJson ( json ); } catch ( err ) { err . fileName = 'foo.json' ; throw err ; } /* JSONError: Trailing comma in object at 3:1 in foo.json } ^ */","title":"Usage"},{"location":"node_modules/parse-json/readme/#api","text":"","title":"API"},{"location":"node_modules/parse-json/readme/#parsejsoninput-reviver-filename","text":"","title":"parseJson(input, [reviver], [filename])"},{"location":"node_modules/parse-json/readme/#input","text":"Type: string","title":"input"},{"location":"node_modules/parse-json/readme/#reviver","text":"Type: function Prescribes how the value originally produced by parsing is transformed, before being returned. See JSON.parse docs for more.","title":"reviver"},{"location":"node_modules/parse-json/readme/#filename","text":"Type: string Filename displayed in the error message.","title":"filename"},{"location":"node_modules/parse-json/readme/#license","text":"MIT \u00a9 Sindre Sorhus","title":"License"},{"location":"node_modules/path-exists/readme/","text":"path-exists Check if a path exists Because fs.exists() is being deprecated , but there's still a genuine use-case of being able to check if a path exists for other purposes than doing IO with it. Never use this before handling a file though: In particular, checking if a file exists before opening it is an anti-pattern that leaves you vulnerable to race conditions: another process may remove the file between the calls to fs.exists() and fs.open() . Just open the file and handle the error when it's not there. Install $ npm install --save path-exists Usage // foo.js const pathExists = require ( 'path-exists' ); pathExists ( 'foo.js' ). then ( exists => { console . log ( exists ); //=> true }); API pathExists(path) Returns a promise for a boolean of whether the path exists. pathExists.sync(path) Returns a boolean of whether the path exists. Related path-exists-cli - CLI for this module License MIT \u00a9 Sindre Sorhus","title":"path-exists [![Build Status](https://travis-ci.org/sindresorhus/path-exists.svg?branch=master)](https://travis-ci.org/sindresorhus/path-exists)"},{"location":"node_modules/path-exists/readme/#path-exists","text":"Check if a path exists Because fs.exists() is being deprecated , but there's still a genuine use-case of being able to check if a path exists for other purposes than doing IO with it. Never use this before handling a file though: In particular, checking if a file exists before opening it is an anti-pattern that leaves you vulnerable to race conditions: another process may remove the file between the calls to fs.exists() and fs.open() . Just open the file and handle the error when it's not there.","title":"path-exists"},{"location":"node_modules/path-exists/readme/#install","text":"$ npm install --save path-exists","title":"Install"},{"location":"node_modules/path-exists/readme/#usage","text":"// foo.js const pathExists = require ( 'path-exists' ); pathExists ( 'foo.js' ). then ( exists => { console . log ( exists ); //=> true });","title":"Usage"},{"location":"node_modules/path-exists/readme/#api","text":"","title":"API"},{"location":"node_modules/path-exists/readme/#pathexistspath","text":"Returns a promise for a boolean of whether the path exists.","title":"pathExists(path)"},{"location":"node_modules/path-exists/readme/#pathexistssyncpath","text":"Returns a boolean of whether the path exists.","title":"pathExists.sync(path)"},{"location":"node_modules/path-exists/readme/#related","text":"path-exists-cli - CLI for this module","title":"Related"},{"location":"node_modules/path-exists/readme/#license","text":"MIT \u00a9 Sindre Sorhus","title":"License"},{"location":"node_modules/path-is-absolute/readme/","text":"path-is-absolute Node.js 0.12 path.isAbsolute() ponyfill Install $ npm install --save path-is-absolute Usage const pathIsAbsolute = require ( 'path-is-absolute' ); // Running on Linux pathIsAbsolute ( '/home/foo' ); //=> true pathIsAbsolute ( 'C:/Users/foo' ); //=> false // Running on Windows pathIsAbsolute ( 'C:/Users/foo' ); //=> true pathIsAbsolute ( '/home/foo' ); //=> false // Running on any OS pathIsAbsolute . posix ( '/home/foo' ); //=> true pathIsAbsolute . posix ( 'C:/Users/foo' ); //=> false pathIsAbsolute . win32 ( 'C:/Users/foo' ); //=> true pathIsAbsolute . win32 ( '/home/foo' ); //=> false API See the path.isAbsolute() docs . pathIsAbsolute(path) pathIsAbsolute.posix(path) POSIX specific version. pathIsAbsolute.win32(path) Windows specific version. License MIT \u00a9 Sindre Sorhus","title":"path-is-absolute [![Build Status](https://travis-ci.org/sindresorhus/path-is-absolute.svg?branch=master)](https://travis-ci.org/sindresorhus/path-is-absolute)"},{"location":"node_modules/path-is-absolute/readme/#path-is-absolute","text":"Node.js 0.12 path.isAbsolute() ponyfill","title":"path-is-absolute"},{"location":"node_modules/path-is-absolute/readme/#install","text":"$ npm install --save path-is-absolute","title":"Install"},{"location":"node_modules/path-is-absolute/readme/#usage","text":"const pathIsAbsolute = require ( 'path-is-absolute' ); // Running on Linux pathIsAbsolute ( '/home/foo' ); //=> true pathIsAbsolute ( 'C:/Users/foo' ); //=> false // Running on Windows pathIsAbsolute ( 'C:/Users/foo' ); //=> true pathIsAbsolute ( '/home/foo' ); //=> false // Running on any OS pathIsAbsolute . posix ( '/home/foo' ); //=> true pathIsAbsolute . posix ( 'C:/Users/foo' ); //=> false pathIsAbsolute . win32 ( 'C:/Users/foo' ); //=> true pathIsAbsolute . win32 ( '/home/foo' ); //=> false","title":"Usage"},{"location":"node_modules/path-is-absolute/readme/#api","text":"See the path.isAbsolute() docs .","title":"API"},{"location":"node_modules/path-is-absolute/readme/#pathisabsolutepath","text":"","title":"pathIsAbsolute(path)"},{"location":"node_modules/path-is-absolute/readme/#pathisabsoluteposixpath","text":"POSIX specific version.","title":"pathIsAbsolute.posix(path)"},{"location":"node_modules/path-is-absolute/readme/#pathisabsolutewin32path","text":"Windows specific version.","title":"pathIsAbsolute.win32(path)"},{"location":"node_modules/path-is-absolute/readme/#license","text":"MIT \u00a9 Sindre Sorhus","title":"License"},{"location":"node_modules/path-parse/","text":"path-parse Node.js path.parse(pathString) ponyfill . Install $ npm install --save path-parse Usage var pathParse = require ( 'path-parse' ); pathParse ( '/home/user/dir/file.txt' ); //=> { // root : \"/\", // dir : \"/home/user/dir\", // base : \"file.txt\", // ext : \".txt\", // name : \"file\" // } API See path.parse(pathString) docs. pathParse(path) pathParse.posix(path) The Posix specific version. pathParse.win32(path) The Windows specific version. License MIT \u00a9 Javier Blanco","title":"path-parse [![Build Status](https://travis-ci.org/jbgutierrez/path-parse.svg?branch=master)](https://travis-ci.org/jbgutierrez/path-parse)"},{"location":"node_modules/path-parse/#path-parse","text":"Node.js path.parse(pathString) ponyfill .","title":"path-parse"},{"location":"node_modules/path-parse/#install","text":"$ npm install --save path-parse","title":"Install"},{"location":"node_modules/path-parse/#usage","text":"var pathParse = require ( 'path-parse' ); pathParse ( '/home/user/dir/file.txt' ); //=> { // root : \"/\", // dir : \"/home/user/dir\", // base : \"file.txt\", // ext : \".txt\", // name : \"file\" // }","title":"Usage"},{"location":"node_modules/path-parse/#api","text":"See path.parse(pathString) docs.","title":"API"},{"location":"node_modules/path-parse/#pathparsepath","text":"","title":"pathParse(path)"},{"location":"node_modules/path-parse/#pathparseposixpath","text":"The Posix specific version.","title":"pathParse.posix(path)"},{"location":"node_modules/path-parse/#pathparsewin32path","text":"The Windows specific version.","title":"pathParse.win32(path)"},{"location":"node_modules/path-parse/#license","text":"MIT \u00a9 Javier Blanco","title":"License"},{"location":"node_modules/path-to-glob-pattern/","text":"path-to-glob-pattern Convert file/directory path to glob pattern. For example, src/ => src/**/* Install Install with npm : npm install path-to-glob-pattern Usage pathToGlobPattern return process function. ```js const pathToGlobPattern = require(\"path-to-glob-pattern\"); const processPatternJs = pathToGlobPattern({ extensions: [\"js\"], cwd: __dirname }); / ## Pass directory / console.log(processPatternJs(\"src\")); // => src/* / .js / ## Pass file path / console.log(processPatternJs(\"src/path-to-glob-pattern.js\")); // => src/path-to-glob-pattern.js / ## Pass not match file path / console.log(processPatternJs(\"src/unknown.ext\")); // => src/unknown.ext / ## Multiple extensions / const processPatternMultiple = pathToGlobPattern({ extensions: [\"js\", \"md\"], cwd: __dirname }); console.log(processPatternMultiple(\".\")); // => * / .{js,md} ```` Changelog See Releases page . Running tests Install devDependencies and Run npm test : npm i -d && npm test Contributing Pull requests and stars are always welcome. For bugs and feature requests, please create an issue . Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request :D Author github/azu twitter/azu_re License MIT \u00a9 azu and ESLint Copyright JS Foundation and other contributors, https://js.foundation https://github.com/eslint/eslint/blob/master/tests/lib/util/glob-util.js","title":"path-to-glob-pattern [![Build Status](https://travis-ci.org/azu/path-to-glob-pattern.svg?branch=master)](https://travis-ci.org/azu/path-to-glob-pattern)"},{"location":"node_modules/path-to-glob-pattern/#path-to-glob-pattern","text":"Convert file/directory path to glob pattern. For example, src/ => src/**/*","title":"path-to-glob-pattern"},{"location":"node_modules/path-to-glob-pattern/#install","text":"Install with npm : npm install path-to-glob-pattern","title":"Install"},{"location":"node_modules/path-to-glob-pattern/#usage","text":"pathToGlobPattern return process function. ```js const pathToGlobPattern = require(\"path-to-glob-pattern\"); const processPatternJs = pathToGlobPattern({ extensions: [\"js\"], cwd: __dirname }); / ## Pass directory / console.log(processPatternJs(\"src\")); // => src/* / .js / ## Pass file path / console.log(processPatternJs(\"src/path-to-glob-pattern.js\")); // => src/path-to-glob-pattern.js / ## Pass not match file path / console.log(processPatternJs(\"src/unknown.ext\")); // => src/unknown.ext / ## Multiple extensions / const processPatternMultiple = pathToGlobPattern({ extensions: [\"js\", \"md\"], cwd: __dirname }); console.log(processPatternMultiple(\".\")); // => * / .{js,md} ````","title":"Usage"},{"location":"node_modules/path-to-glob-pattern/#changelog","text":"See Releases page .","title":"Changelog"},{"location":"node_modules/path-to-glob-pattern/#running-tests","text":"Install devDependencies and Run npm test : npm i -d && npm test","title":"Running tests"},{"location":"node_modules/path-to-glob-pattern/#contributing","text":"Pull requests and stars are always welcome. For bugs and feature requests, please create an issue . Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request :D","title":"Contributing"},{"location":"node_modules/path-to-glob-pattern/#author","text":"github/azu twitter/azu_re","title":"Author"},{"location":"node_modules/path-to-glob-pattern/#license","text":"MIT \u00a9 azu and ESLint Copyright JS Foundation and other contributors, https://js.foundation https://github.com/eslint/eslint/blob/master/tests/lib/util/glob-util.js","title":"License"},{"location":"node_modules/path-type/readme/","text":"path-type Check if a path is a file, directory, or symlink Install $ npm install --save path-type Usage var pathType = require ( 'path-type' ); pathType . file ( 'package.json' ). then ( function ( isFile ) { console . log ( isFile ); //=> true }) API .file(path) .dir(path) .symlink(path) Returns a promise that resolves to a boolean of whether the path is the checked type. .fileSync(path) .dirSync(path) .symlinkSync(path) Returns a boolean of whether the path is the checked type. License MIT \u00a9 Sindre Sorhus","title":"path-type [![Build Status](https://travis-ci.org/sindresorhus/path-type.svg?branch=master)](https://travis-ci.org/sindresorhus/path-type)"},{"location":"node_modules/path-type/readme/#path-type","text":"Check if a path is a file, directory, or symlink","title":"path-type"},{"location":"node_modules/path-type/readme/#install","text":"$ npm install --save path-type","title":"Install"},{"location":"node_modules/path-type/readme/#usage","text":"var pathType = require ( 'path-type' ); pathType . file ( 'package.json' ). then ( function ( isFile ) { console . log ( isFile ); //=> true })","title":"Usage"},{"location":"node_modules/path-type/readme/#api","text":"","title":"API"},{"location":"node_modules/path-type/readme/#filepath","text":"","title":".file(path)"},{"location":"node_modules/path-type/readme/#dirpath","text":"","title":".dir(path)"},{"location":"node_modules/path-type/readme/#symlinkpath","text":"Returns a promise that resolves to a boolean of whether the path is the checked type.","title":".symlink(path)"},{"location":"node_modules/path-type/readme/#filesyncpath","text":"","title":".fileSync(path)"},{"location":"node_modules/path-type/readme/#dirsyncpath","text":"","title":".dirSync(path)"},{"location":"node_modules/path-type/readme/#symlinksyncpath","text":"Returns a boolean of whether the path is the checked type.","title":".symlinkSync(path)"},{"location":"node_modules/path-type/readme/#license","text":"MIT \u00a9 Sindre Sorhus","title":"License"},{"location":"node_modules/pify/readme/","text":"pify Promisify a callback-style function Install $ npm install --save pify Usage const fs = require ( 'fs' ); const pify = require ( 'pify' ); // promisify a single function pify ( fs . readFile )( 'package.json' , 'utf8' ). then ( data => { console . log ( JSON . parse ( data ). name ); //=> 'pify' }); // or promisify all methods in a module pify ( fs ). readFile ( 'package.json' , 'utf8' ). then ( data => { console . log ( JSON . parse ( data ). name ); //=> 'pify' }); API pify(input, [promiseModule], [options]) Returns a promise wrapped version of the supplied function or module. input Type: function , object Callback-style function or module whose methods you want to promisify. promiseModule Type: function Custom promise module to use instead of the native one. Check out pinkie-promise if you need a tiny promise polyfill. options multiArgs Type: boolean Default: false By default, the promisified function will only return the second argument from the callback, which works fine for most APIs. This option can be useful for modules like request that return multiple arguments. Turning this on will make it return an array of all arguments from the callback, excluding the error argument, instead of just the second argument. const request = require ( 'request' ); const pify = require ( 'pify' ); pify ( request , { multiArgs : true })( 'https://sindresorhus.com' ). then ( result => { const [ httpResponse , body ] = result ; }); include Type: array of ( string | regex ) Methods in a module to promisify. Remaining methods will be left untouched. exclude Type: array of ( string | regex ) Default: [/.+Sync$/] Methods in a module not to promisify. Methods with names ending with 'Sync' are excluded by default. excludeMain Type: boolean Default: false By default, if given module is a function itself, this function will be promisified. Turn this option on if you want to promisify only methods of the module. const pify = require ( 'pify' ); function fn () { return true ; } fn . method = ( data , callback ) => { setImmediate (() => { callback ( data , null ); }); }; // promisify methods but not fn() const promiseFn = pify ( fn , { excludeMain : true }); if ( promiseFn ()) { promiseFn . method ( 'hi' ). then ( data => { console . log ( data ); }); } License MIT \u00a9 Sindre Sorhus","title":"pify [![Build Status](https://travis-ci.org/sindresorhus/pify.svg?branch=master)](https://travis-ci.org/sindresorhus/pify)"},{"location":"node_modules/pify/readme/#pify","text":"Promisify a callback-style function","title":"pify"},{"location":"node_modules/pify/readme/#install","text":"$ npm install --save pify","title":"Install"},{"location":"node_modules/pify/readme/#usage","text":"const fs = require ( 'fs' ); const pify = require ( 'pify' ); // promisify a single function pify ( fs . readFile )( 'package.json' , 'utf8' ). then ( data => { console . log ( JSON . parse ( data ). name ); //=> 'pify' }); // or promisify all methods in a module pify ( fs ). readFile ( 'package.json' , 'utf8' ). then ( data => { console . log ( JSON . parse ( data ). name ); //=> 'pify' });","title":"Usage"},{"location":"node_modules/pify/readme/#api","text":"","title":"API"},{"location":"node_modules/pify/readme/#pifyinput-promisemodule-options","text":"Returns a promise wrapped version of the supplied function or module.","title":"pify(input, [promiseModule], [options])"},{"location":"node_modules/pify/readme/#input","text":"Type: function , object Callback-style function or module whose methods you want to promisify.","title":"input"},{"location":"node_modules/pify/readme/#promisemodule","text":"Type: function Custom promise module to use instead of the native one. Check out pinkie-promise if you need a tiny promise polyfill.","title":"promiseModule"},{"location":"node_modules/pify/readme/#options","text":"","title":"options"},{"location":"node_modules/pify/readme/#multiargs","text":"Type: boolean Default: false By default, the promisified function will only return the second argument from the callback, which works fine for most APIs. This option can be useful for modules like request that return multiple arguments. Turning this on will make it return an array of all arguments from the callback, excluding the error argument, instead of just the second argument. const request = require ( 'request' ); const pify = require ( 'pify' ); pify ( request , { multiArgs : true })( 'https://sindresorhus.com' ). then ( result => { const [ httpResponse , body ] = result ; });","title":"multiArgs"},{"location":"node_modules/pify/readme/#include","text":"Type: array of ( string | regex ) Methods in a module to promisify. Remaining methods will be left untouched.","title":"include"},{"location":"node_modules/pify/readme/#exclude","text":"Type: array of ( string | regex ) Default: [/.+Sync$/] Methods in a module not to promisify. Methods with names ending with 'Sync' are excluded by default.","title":"exclude"},{"location":"node_modules/pify/readme/#excludemain","text":"Type: boolean Default: false By default, if given module is a function itself, this function will be promisified. Turn this option on if you want to promisify only methods of the module. const pify = require ( 'pify' ); function fn () { return true ; } fn . method = ( data , callback ) => { setImmediate (() => { callback ( data , null ); }); }; // promisify methods but not fn() const promiseFn = pify ( fn , { excludeMain : true }); if ( promiseFn ()) { promiseFn . method ( 'hi' ). then ( data => { console . log ( data ); }); }","title":"excludeMain"},{"location":"node_modules/pify/readme/#license","text":"MIT \u00a9 Sindre Sorhus","title":"License"},{"location":"node_modules/pinkie/readme/","text":"Itty bitty little widdle twinkie pinkie ES2015 Promise implementation There are tons of Promise implementations out there, but all of them focus on browser compatibility and are often bloated with functionality. This module is an exact Promise specification polyfill (like native-promise-only ), but in Node.js land (it should be browserify-able though). Install $ npm install --save pinkie Usage var fs = require ( 'fs' ); var Promise = require ( 'pinkie' ); new Promise ( function ( resolve , reject ) { fs . readFile ( 'foo.json' , 'utf8' , function ( err , data ) { if ( err ) { reject ( err ); return ; } resolve ( data ); }); }); //=> Promise API pinkie exports bare ES2015 Promise implementation and polyfills Node.js rejection events . In case you forgot: new Promise(executor) Returns new instance of Promise . executor Required Type: function Function with two arguments resolve and reject . The first argument fulfills the promise, the second argument rejects it. pinkie.all(promises) Returns a promise that resolves when all of the promises in the promises Array argument have resolved. pinkie.race(promises) Returns a promise that resolves or rejects as soon as one of the promises in the promises Array resolves or rejects, with the value or reason from that promise. pinkie.reject(reason) Returns a Promise object that is rejected with the given reason . pinkie.resolve(value) Returns a Promise object that is resolved with the given value . If the value is a thenable (i.e. has a then method), the returned promise will \"follow\" that thenable, adopting its eventual state; otherwise the returned promise will be fulfilled with the value . Related pinkie-promise - Returns the native Promise or this module License MIT \u00a9 Vsevolod Strukchinsky","title":"Readme"},{"location":"node_modules/pinkie/readme/#install","text":"$ npm install --save pinkie","title":"Install"},{"location":"node_modules/pinkie/readme/#usage","text":"var fs = require ( 'fs' ); var Promise = require ( 'pinkie' ); new Promise ( function ( resolve , reject ) { fs . readFile ( 'foo.json' , 'utf8' , function ( err , data ) { if ( err ) { reject ( err ); return ; } resolve ( data ); }); }); //=> Promise","title":"Usage"},{"location":"node_modules/pinkie/readme/#api","text":"pinkie exports bare ES2015 Promise implementation and polyfills Node.js rejection events . In case you forgot:","title":"API"},{"location":"node_modules/pinkie/readme/#new-promiseexecutor","text":"Returns new instance of Promise .","title":"new Promise(executor)"},{"location":"node_modules/pinkie/readme/#executor","text":"Required Type: function Function with two arguments resolve and reject . The first argument fulfills the promise, the second argument rejects it.","title":"executor"},{"location":"node_modules/pinkie/readme/#pinkieallpromises","text":"Returns a promise that resolves when all of the promises in the promises Array argument have resolved.","title":"pinkie.all(promises)"},{"location":"node_modules/pinkie/readme/#pinkieracepromises","text":"Returns a promise that resolves or rejects as soon as one of the promises in the promises Array resolves or rejects, with the value or reason from that promise.","title":"pinkie.race(promises)"},{"location":"node_modules/pinkie/readme/#pinkierejectreason","text":"Returns a Promise object that is rejected with the given reason .","title":"pinkie.reject(reason)"},{"location":"node_modules/pinkie/readme/#pinkieresolvevalue","text":"Returns a Promise object that is resolved with the given value . If the value is a thenable (i.e. has a then method), the returned promise will \"follow\" that thenable, adopting its eventual state; otherwise the returned promise will be fulfilled with the value .","title":"pinkie.resolve(value)"},{"location":"node_modules/pinkie/readme/#related","text":"pinkie-promise - Returns the native Promise or this module","title":"Related"},{"location":"node_modules/pinkie/readme/#license","text":"MIT \u00a9 Vsevolod Strukchinsky","title":"License"},{"location":"node_modules/pinkie-promise/readme/","text":"pinkie-promise ES2015 Promise ponyfill Module exports global Promise object (if available) or pinkie Promise polyfill. Install $ npm install --save pinkie-promise Usage var Promise = require ( 'pinkie-promise' ); new Promise ( function ( resolve ) { resolve ( 'unicorns' ); }); //=> Promise { 'unicorns' } Related pify - Promisify a callback-style function License MIT \u00a9 Vsevolod Strukchinsky","title":"pinkie-promise [![Build Status](https://travis-ci.org/floatdrop/pinkie-promise.svg?branch=master)](https://travis-ci.org/floatdrop/pinkie-promise)"},{"location":"node_modules/pinkie-promise/readme/#pinkie-promise","text":"ES2015 Promise ponyfill Module exports global Promise object (if available) or pinkie Promise polyfill.","title":"pinkie-promise"},{"location":"node_modules/pinkie-promise/readme/#install","text":"$ npm install --save pinkie-promise","title":"Install"},{"location":"node_modules/pinkie-promise/readme/#usage","text":"var Promise = require ( 'pinkie-promise' ); new Promise ( function ( resolve ) { resolve ( 'unicorns' ); }); //=> Promise { 'unicorns' }","title":"Usage"},{"location":"node_modules/pinkie-promise/readme/#related","text":"pify - Promisify a callback-style function","title":"Related"},{"location":"node_modules/pinkie-promise/readme/#license","text":"MIT \u00a9 Vsevolod Strukchinsky","title":"License"},{"location":"node_modules/pluralize/Readme/","text":"Pluralize Pluralize and singularize any word. Installation npm install pluralize --save bower install pluralize --save Node var pluralize = require ( 'pluralize' ) AMD define ( function ( require , exports , module ) { var pluralize = require ( 'pluralize' ) }) <script> tag < script src = \"pluralize.js\" ></ script > Why? This module uses a pre-defined list of rules, applied in order, to singularize or pluralize a given word. There are many cases where this is useful, such as any automation based on user input. For applications where the word(s) are known ahead of time, you can use a simple ternary (or function) which would be a much lighter alternative. Usage pluralize ( 'test' ) //=> \"tests\" pluralize ( 'test' , 1 ) //=> \"test\" pluralize ( 'test' , 5 ) //=> \"tests\" pluralize ( 'test' , 1 , true ) //=> \"1 test\" pluralize ( 'test' , 5 , true ) //=> \"5 tests\" pluralize . plural ( 'regex' ) //=> \"regexes\" pluralize . addPluralRule ( /gex$/i , 'gexii' ) pluralize . plural ( 'regex' ) //=> \"regexii\" pluralize . plural ( 'singles' , 1 ) //=> \"single\" pluralize . addSingularRule ( /singles$/i , 'singular' ) pluralize . plural ( 'singles' , 1 ) //=> \"singular\" pluralize . plural ( 'irregular' ) //=> \"irregulars\" pluralize . addIrregularRule ( 'irregular' , 'regular' ) pluralize . plural ( 'irregular' ) //=> \"regular\" pluralize . plural ( 'paper' ) //=> \"papers\" pluralize . addUncountableRule ( 'paper' ) pluralize . plural ( 'paper' ) //=> \"paper\" License MIT","title":"Pluralize"},{"location":"node_modules/pluralize/Readme/#pluralize","text":"Pluralize and singularize any word.","title":"Pluralize"},{"location":"node_modules/pluralize/Readme/#installation","text":"npm install pluralize --save bower install pluralize --save","title":"Installation"},{"location":"node_modules/pluralize/Readme/#node","text":"var pluralize = require ( 'pluralize' )","title":"Node"},{"location":"node_modules/pluralize/Readme/#amd","text":"define ( function ( require , exports , module ) { var pluralize = require ( 'pluralize' ) })","title":"AMD"},{"location":"node_modules/pluralize/Readme/#script-tag","text":"< script src = \"pluralize.js\" ></ script >","title":"&lt;script&gt; tag"},{"location":"node_modules/pluralize/Readme/#why","text":"This module uses a pre-defined list of rules, applied in order, to singularize or pluralize a given word. There are many cases where this is useful, such as any automation based on user input. For applications where the word(s) are known ahead of time, you can use a simple ternary (or function) which would be a much lighter alternative.","title":"Why?"},{"location":"node_modules/pluralize/Readme/#usage","text":"pluralize ( 'test' ) //=> \"tests\" pluralize ( 'test' , 1 ) //=> \"test\" pluralize ( 'test' , 5 ) //=> \"tests\" pluralize ( 'test' , 1 , true ) //=> \"1 test\" pluralize ( 'test' , 5 , true ) //=> \"5 tests\" pluralize . plural ( 'regex' ) //=> \"regexes\" pluralize . addPluralRule ( /gex$/i , 'gexii' ) pluralize . plural ( 'regex' ) //=> \"regexii\" pluralize . plural ( 'singles' , 1 ) //=> \"single\" pluralize . addSingularRule ( /singles$/i , 'singular' ) pluralize . plural ( 'singles' , 1 ) //=> \"singular\" pluralize . plural ( 'irregular' ) //=> \"irregulars\" pluralize . addIrregularRule ( 'irregular' , 'regular' ) pluralize . plural ( 'irregular' ) //=> \"regular\" pluralize . plural ( 'paper' ) //=> \"papers\" pluralize . addUncountableRule ( 'paper' ) pluralize . plural ( 'paper' ) //=> \"paper\"","title":"Usage"},{"location":"node_modules/pluralize/Readme/#license","text":"MIT","title":"License"},{"location":"node_modules/prelude-ls/","text":"prelude.ls is a functionally oriented utility library. It is powerful and flexible. Almost all of its functions are curried. It is written in, and is the recommended base library for, LiveScript . See the prelude.ls site for examples, a reference, and more. You can install via npm npm install prelude-ls Development make test to test make build to build lib from src make build-browser to build browser versions","title":"prelude.ls [![Build Status](https://travis-ci.org/gkz/prelude-ls.png?branch=master)](https://travis-ci.org/gkz/prelude-ls)"},{"location":"node_modules/prelude-ls/#preludels","text":"is a functionally oriented utility library. It is powerful and flexible. Almost all of its functions are curried. It is written in, and is the recommended base library for, LiveScript . See the prelude.ls site for examples, a reference, and more. You can install via npm npm install prelude-ls","title":"prelude.ls"},{"location":"node_modules/prelude-ls/#development","text":"make test to test make build to build lib from src make build-browser to build browser versions","title":"Development"},{"location":"node_modules/prelude-ls/CHANGELOG/","text":"1.2.1 fix version 1.2.0 add List.remove build with LiveScript 1.6.0 update dependencies remove coverage calculation 1.1.2 add Func.memoize fix zip-all and zip-with-all corner case (no input) build with LiveScript 1.4.0 1.1.1 curry unique-by , minimum-by 1.1.0 added List functions: maximum-by , minimum-by , unique-by added List functions: at , elem-index , elem-indices , find-index , find-indices added Str functions: capitalize , camelize , dasherize added Func function: over - eg. same-length = (==) `over` (.length) exported Str.repeat through main prelude object fixed definition of foldr and foldr1 , the new correct definition is backwards incompatible with the old, incorrect one fixed issue with fix improved code coverage 1.0.3 build browser versions 1.0.2 bug fix for flatten - slight change with bug fix, flattens arrays only, not array-like objects 1.0.1 bug fixes for drop-while and take-while 1.0.0 massive update - separated functions into separate modules functions do not accept multiple types anymore - use different versions in their respective modules in some cases (eg. Obj.map ), or use chars or values in other cases to transform into a list objects are no longer transformed into functions, simply use (obj.) in LiveScript to do that browser version now using browserify - use prelude = require('prelude-ls') added compact , split , flatten , difference , intersection , union , count-by , group-by , chars , unchars , apply added lists-to-obj which takes a list of keys and list of values and zips them up into an object, and the converse obj-to-lists added pairs-to-obj which takes a list of pairs (2 element lists) and creates an object, and the converse obj-to-pairs removed cons , append - use the concat operator removed compose - use the compose operator removed obj-to-func - use partially applied access (eg. (obj.) ) removed length - use (.length) sort-by renamed to sort-with added new sort-by removed compare - just use the new sort-by break-it renamed break-list , ( Str.break-str for the string version) added Str.repeat which creates a new string by repeating the input n times unfold as alias to unfoldr is no longer used fixed up style and compiled with LiveScript 1.1.1 use Make instead of Slake greatly improved tests 0.6.0 fixed various bugs added fix , a fixpoint (Y combinator) for anonymous recursive functions added unfoldr (alias unfold ) calling replicate with a string now returns a list of strings removed partial , just use native partial application in LiveScript using the _ placeholder, or currying added sort , sortBy , and compare 0.5.0 removed lookup - use (.prop) removed call - use (.func arg1, arg2) removed pluck - use map (.prop), xs fixed buys wtih head and last added non-minifed browser version, as prelude-browser.js renamed prelude-min.js to prelude-browser-min.js renamed zip to zipAll renamed zipWith to zipAllWith added zip , a curried zip that takes only two arguments added zipWith , a curried zipWith that takes only two arguments 0.4.0 added parition function added curry function removed elem function (use in ) removed notElem function (use not in ) 0.3.0 added listToObject added unique added objToFunc added support for using strings in map and the like added support for using objects in map and the like added ability to use objects instead of functions in certain cases removed error (just use throw) added tau constant added join added values added keys added partial renamed log to ln added alias to head : first added installPrelude helper 0.2.0 removed functions that simply warp operators as you can now use operators as functions in LiveScript min/max are now curried and take only 2 arguments added call 0.1.0 initial public release","title":"1.2.1"},{"location":"node_modules/prelude-ls/CHANGELOG/#121","text":"fix version","title":"1.2.1"},{"location":"node_modules/prelude-ls/CHANGELOG/#120","text":"add List.remove build with LiveScript 1.6.0 update dependencies remove coverage calculation","title":"1.2.0"},{"location":"node_modules/prelude-ls/CHANGELOG/#112","text":"add Func.memoize fix zip-all and zip-with-all corner case (no input) build with LiveScript 1.4.0","title":"1.1.2"},{"location":"node_modules/prelude-ls/CHANGELOG/#111","text":"curry unique-by , minimum-by","title":"1.1.1"},{"location":"node_modules/prelude-ls/CHANGELOG/#110","text":"added List functions: maximum-by , minimum-by , unique-by added List functions: at , elem-index , elem-indices , find-index , find-indices added Str functions: capitalize , camelize , dasherize added Func function: over - eg. same-length = (==) `over` (.length) exported Str.repeat through main prelude object fixed definition of foldr and foldr1 , the new correct definition is backwards incompatible with the old, incorrect one fixed issue with fix improved code coverage","title":"1.1.0"},{"location":"node_modules/prelude-ls/CHANGELOG/#103","text":"build browser versions","title":"1.0.3"},{"location":"node_modules/prelude-ls/CHANGELOG/#102","text":"bug fix for flatten - slight change with bug fix, flattens arrays only, not array-like objects","title":"1.0.2"},{"location":"node_modules/prelude-ls/CHANGELOG/#101","text":"bug fixes for drop-while and take-while","title":"1.0.1"},{"location":"node_modules/prelude-ls/CHANGELOG/#100","text":"massive update - separated functions into separate modules functions do not accept multiple types anymore - use different versions in their respective modules in some cases (eg. Obj.map ), or use chars or values in other cases to transform into a list objects are no longer transformed into functions, simply use (obj.) in LiveScript to do that browser version now using browserify - use prelude = require('prelude-ls') added compact , split , flatten , difference , intersection , union , count-by , group-by , chars , unchars , apply added lists-to-obj which takes a list of keys and list of values and zips them up into an object, and the converse obj-to-lists added pairs-to-obj which takes a list of pairs (2 element lists) and creates an object, and the converse obj-to-pairs removed cons , append - use the concat operator removed compose - use the compose operator removed obj-to-func - use partially applied access (eg. (obj.) ) removed length - use (.length) sort-by renamed to sort-with added new sort-by removed compare - just use the new sort-by break-it renamed break-list , ( Str.break-str for the string version) added Str.repeat which creates a new string by repeating the input n times unfold as alias to unfoldr is no longer used fixed up style and compiled with LiveScript 1.1.1 use Make instead of Slake greatly improved tests","title":"1.0.0"},{"location":"node_modules/prelude-ls/CHANGELOG/#060","text":"fixed various bugs added fix , a fixpoint (Y combinator) for anonymous recursive functions added unfoldr (alias unfold ) calling replicate with a string now returns a list of strings removed partial , just use native partial application in LiveScript using the _ placeholder, or currying added sort , sortBy , and compare","title":"0.6.0"},{"location":"node_modules/prelude-ls/CHANGELOG/#050","text":"removed lookup - use (.prop) removed call - use (.func arg1, arg2) removed pluck - use map (.prop), xs fixed buys wtih head and last added non-minifed browser version, as prelude-browser.js renamed prelude-min.js to prelude-browser-min.js renamed zip to zipAll renamed zipWith to zipAllWith added zip , a curried zip that takes only two arguments added zipWith , a curried zipWith that takes only two arguments","title":"0.5.0"},{"location":"node_modules/prelude-ls/CHANGELOG/#040","text":"added parition function added curry function removed elem function (use in ) removed notElem function (use not in )","title":"0.4.0"},{"location":"node_modules/prelude-ls/CHANGELOG/#030","text":"added listToObject added unique added objToFunc added support for using strings in map and the like added support for using objects in map and the like added ability to use objects instead of functions in certain cases removed error (just use throw) added tau constant added join added values added keys added partial renamed log to ln added alias to head : first added installPrelude helper","title":"0.3.0"},{"location":"node_modules/prelude-ls/CHANGELOG/#020","text":"removed functions that simply warp operators as you can now use operators as functions in LiveScript min/max are now curried and take only 2 arguments added call","title":"0.2.0"},{"location":"node_modules/prelude-ls/CHANGELOG/#010","text":"initial public release","title":"0.1.0"},{"location":"node_modules/punycode/","text":"Punycode.js Punycode.js is a robust Punycode converter that fully complies to RFC 3492 and RFC 5891 . This JavaScript library is the result of comparing, optimizing and documenting different open-source implementations of the Punycode algorithm: The C example code from RFC 3492 punycode.c by Markus W. Scherer (IBM) punycode.c by Ben Noordhuis JavaScript implementation by some punycode.js by Ben Noordhuis (note: not fully compliant ) This project was bundled with Node.js from v0.6.2+ until v7 (soft-deprecated). The current version supports recent versions of Node.js only. It provides a CommonJS module and an ES6 module. For the old version that offers the same functionality with broader support, including Rhino, Ringo, Narwhal, and web browsers, see v1.4.1 . Installation Via npm : npm install punycode --save In Node.js : const punycode = require ( 'punycode' ); API punycode.decode(string) Converts a Punycode string of ASCII symbols to a string of Unicode symbols. // decode domain name parts punycode . decode ( 'maana-pta' ); // 'ma\u00f1ana' punycode . decode ( '--dqo34k' ); // '\u2603-\u2318' punycode.encode(string) Converts a string of Unicode symbols to a Punycode string of ASCII symbols. // encode domain name parts punycode . encode ( 'ma\u00f1ana' ); // 'maana-pta' punycode . encode ( '\u2603-\u2318' ); // '--dqo34k' punycode.toUnicode(input) Converts a Punycode string representing a domain name or an email address to Unicode. Only the Punycoded parts of the input will be converted, i.e. it doesn\u2019t matter if you call it on a string that has already been converted to Unicode. // decode domain names punycode . toUnicode ( 'xn--maana-pta.com' ); // \u2192 'ma\u00f1ana.com' punycode . toUnicode ( 'xn----dqo34k.com' ); // \u2192 '\u2603-\u2318.com' // decode email addresses punycode . toUnicode ( '\u0434\u0436\u0443\u043c\u043b\u0430@xn--p-8sbkgc5ag7bhce.xn--ba-lmcq' ); // \u2192 '\u0434\u0436\u0443\u043c\u043b\u0430@\u0434\u0436p\u0443\u043c\u043b\u0430\u0442\u0435\u0441\u0442.b\u0440\u0444a' punycode.toASCII(input) Converts a lowercased Unicode string representing a domain name or an email address to Punycode. Only the non-ASCII parts of the input will be converted, i.e. it doesn\u2019t matter if you call it with a domain that\u2019s already in ASCII. // encode domain names punycode . toASCII ( 'ma\u00f1ana.com' ); // \u2192 'xn--maana-pta.com' punycode . toASCII ( '\u2603-\u2318.com' ); // \u2192 'xn----dqo34k.com' // encode email addresses punycode . toASCII ( '\u0434\u0436\u0443\u043c\u043b\u0430@\u0434\u0436p\u0443\u043c\u043b\u0430\u0442\u0435\u0441\u0442.b\u0440\u0444a' ); // \u2192 '\u0434\u0436\u0443\u043c\u043b\u0430@xn--p-8sbkgc5ag7bhce.xn--ba-lmcq' punycode.ucs2 punycode.ucs2.decode(string) Creates an array containing the numeric code point values of each Unicode symbol in the string. While JavaScript uses UCS-2 internally , this function will convert a pair of surrogate halves (each of which UCS-2 exposes as separate characters) into a single code point, matching UTF-16. punycode . ucs2 . decode ( 'abc' ); // \u2192 [0x61, 0x62, 0x63] // surrogate pair for U+1D306 TETRAGRAM FOR CENTRE: punycode . ucs2 . decode ( '\\uD834\\uDF06' ); // \u2192 [0x1D306] punycode.ucs2.encode(codePoints) Creates a string based on an array of numeric code point values. punycode . ucs2 . encode ([ 0x61 , 0x62 , 0x63 ]); // \u2192 'abc' punycode . ucs2 . encode ([ 0x1D306 ]); // \u2192 '\\uD834\\uDF06' punycode.version A string representing the current Punycode.js version number. Author Mathias Bynens License Punycode.js is available under the MIT license.","title":"Punycode.js [![Build status](https://travis-ci.org/bestiejs/punycode.js.svg?branch=master)](https://travis-ci.org/bestiejs/punycode.js) [![Code coverage status](http://img.shields.io/codecov/c/github/bestiejs/punycode.js.svg)](https://codecov.io/gh/bestiejs/punycode.js) [![Dependency status](https://gemnasium.com/bestiejs/punycode.js.svg)](https://gemnasium.com/bestiejs/punycode.js)"},{"location":"node_modules/punycode/#punycodejs","text":"Punycode.js is a robust Punycode converter that fully complies to RFC 3492 and RFC 5891 . This JavaScript library is the result of comparing, optimizing and documenting different open-source implementations of the Punycode algorithm: The C example code from RFC 3492 punycode.c by Markus W. Scherer (IBM) punycode.c by Ben Noordhuis JavaScript implementation by some punycode.js by Ben Noordhuis (note: not fully compliant ) This project was bundled with Node.js from v0.6.2+ until v7 (soft-deprecated). The current version supports recent versions of Node.js only. It provides a CommonJS module and an ES6 module. For the old version that offers the same functionality with broader support, including Rhino, Ringo, Narwhal, and web browsers, see v1.4.1 .","title":"Punycode.js"},{"location":"node_modules/punycode/#installation","text":"Via npm : npm install punycode --save In Node.js : const punycode = require ( 'punycode' );","title":"Installation"},{"location":"node_modules/punycode/#api","text":"","title":"API"},{"location":"node_modules/punycode/#punycodedecodestring","text":"Converts a Punycode string of ASCII symbols to a string of Unicode symbols. // decode domain name parts punycode . decode ( 'maana-pta' ); // 'ma\u00f1ana' punycode . decode ( '--dqo34k' ); // '\u2603-\u2318'","title":"punycode.decode(string)"},{"location":"node_modules/punycode/#punycodeencodestring","text":"Converts a string of Unicode symbols to a Punycode string of ASCII symbols. // encode domain name parts punycode . encode ( 'ma\u00f1ana' ); // 'maana-pta' punycode . encode ( '\u2603-\u2318' ); // '--dqo34k'","title":"punycode.encode(string)"},{"location":"node_modules/punycode/#punycodetounicodeinput","text":"Converts a Punycode string representing a domain name or an email address to Unicode. Only the Punycoded parts of the input will be converted, i.e. it doesn\u2019t matter if you call it on a string that has already been converted to Unicode. // decode domain names punycode . toUnicode ( 'xn--maana-pta.com' ); // \u2192 'ma\u00f1ana.com' punycode . toUnicode ( 'xn----dqo34k.com' ); // \u2192 '\u2603-\u2318.com' // decode email addresses punycode . toUnicode ( '\u0434\u0436\u0443\u043c\u043b\u0430@xn--p-8sbkgc5ag7bhce.xn--ba-lmcq' ); // \u2192 '\u0434\u0436\u0443\u043c\u043b\u0430@\u0434\u0436p\u0443\u043c\u043b\u0430\u0442\u0435\u0441\u0442.b\u0440\u0444a'","title":"punycode.toUnicode(input)"},{"location":"node_modules/punycode/#punycodetoasciiinput","text":"Converts a lowercased Unicode string representing a domain name or an email address to Punycode. Only the non-ASCII parts of the input will be converted, i.e. it doesn\u2019t matter if you call it with a domain that\u2019s already in ASCII. // encode domain names punycode . toASCII ( 'ma\u00f1ana.com' ); // \u2192 'xn--maana-pta.com' punycode . toASCII ( '\u2603-\u2318.com' ); // \u2192 'xn----dqo34k.com' // encode email addresses punycode . toASCII ( '\u0434\u0436\u0443\u043c\u043b\u0430@\u0434\u0436p\u0443\u043c\u043b\u0430\u0442\u0435\u0441\u0442.b\u0440\u0444a' ); // \u2192 '\u0434\u0436\u0443\u043c\u043b\u0430@xn--p-8sbkgc5ag7bhce.xn--ba-lmcq'","title":"punycode.toASCII(input)"},{"location":"node_modules/punycode/#punycodeucs2","text":"","title":"punycode.ucs2"},{"location":"node_modules/punycode/#punycodeucs2decodestring","text":"Creates an array containing the numeric code point values of each Unicode symbol in the string. While JavaScript uses UCS-2 internally , this function will convert a pair of surrogate halves (each of which UCS-2 exposes as separate characters) into a single code point, matching UTF-16. punycode . ucs2 . decode ( 'abc' ); // \u2192 [0x61, 0x62, 0x63] // surrogate pair for U+1D306 TETRAGRAM FOR CENTRE: punycode . ucs2 . decode ( '\\uD834\\uDF06' ); // \u2192 [0x1D306]","title":"punycode.ucs2.decode(string)"},{"location":"node_modules/punycode/#punycodeucs2encodecodepoints","text":"Creates a string based on an array of numeric code point values. punycode . ucs2 . encode ([ 0x61 , 0x62 , 0x63 ]); // \u2192 'abc' punycode . ucs2 . encode ([ 0x1D306 ]); // \u2192 '\\uD834\\uDF06'","title":"punycode.ucs2.encode(codePoints)"},{"location":"node_modules/punycode/#punycodeversion","text":"A string representing the current Punycode.js version number.","title":"punycode.version"},{"location":"node_modules/punycode/#author","text":"Mathias Bynens","title":"Author"},{"location":"node_modules/punycode/#license","text":"Punycode.js is available under the MIT license.","title":"License"},{"location":"node_modules/rc-config-loader/","text":"rc-config-loader Load config from .{product}rc.{json,yml,js} file. It is a Node.js library for loading .textlintrc , .eslintrc , .stylelintrc etc... Features Find and load a configuration object from: a package.json property if it is needed a JSON or YAML, JS \"rc file\" .<product>rc or .<product>rc.json or .<product>rc.js or .<product>rc.yml , .<product>rc.yaml TypeScript support Includes .d.ts Difference with MoOx/rc-loader Safe API rc contains shabang in .js file Enhance Error message with cosmiconfig Sync loading cosmiconfig@3+ support sync option Built-in TypeScript support If you want to async support and customize loader, recommenced to use cosmiconfig . Install Install with npm : npm install rc-config-loader Usage API export interface rcConfigLoaderOption { // does look for `package.json` packageJSON ?: | boolean | { fieldName : string ; }; // if config file name is not same with packageName, set the name configFileName? : string ; // treat default(no ext file) as some extension defaultExtension? : string | string []; // where start to load cwd? : string ; } /** * Find and load rcfile, return { config, filePath } * If not found any rcfile, throw an Error. * @param {string} pkgName * @param {rcConfigLoaderOption} [opts] * @returns {{ config: Object, filePath:string } | undefined} */ export declare function rcFile < R extends {} > ( pkgName : string , opts? : rcConfigLoaderOption ) : { config : R ; filePath : string ; } | undefined ; rcFile return { config, filePath } object. config : it is config object filePath : absolute path to config file Note: rcFile function return undefined if the config file is not found rcFile throw an Error if the config file content is malformed (causing a parsing error) Recommenced usage: import { rcFile } from \"rc-config-loader\" function loadRcFile ( rcFileName ){ try { const results = rcFile ( rcFileName ); // Not Found if ( ! results ) { return {}; } return config ; } catch ( error ) { // Found it, but it is parsing error return {} ; // default value } } // load config const config = loadRcFile ( \"your-application\" ); console . log ( config ); // => rcfile content Example \"use strict\" ; import { rcFile } from \"rc-config-loader\" // load .eslintrc from current dir console . log ( rcFile ( \"eslint\" )); // load .eslintrc from specific path console . log ( rcFile ( \"eslint\" , { configFileName : ` ${ __dirname } /test/fixtures/.eslintrc` })); /* config: { extends: 'standard', rules: { 'comma-dangle': [ 2, 'always-multiline' ], 'arrow-parens': [ 2, 'as-needed' ] } } filePath: ${__dirname}/test/fixtures/.eslintrc */ // load property from pacakge.json console . log ( rcFile ( \"rc-config-loader\" , { packageJSON : { fieldName : \"directories\" } })); /* config: { test: 'test' } filePath: /path/to/package.json */ // load .eslintrc from specific dir console . log ( rcFile ( \"eslint\" , { cwd : ` ${ __dirname } /test/fixtures` })); // load specific filename from current dir console . log ( rcFile ( \"travis\" , { configFileName : \".travis\" })); /* config: { sudo: false, language: 'node_js', node_js: 'stable' } filePath: /path/to/.travis */ // try to load as .json, .yml, js console . log ( rcFile ( \"bar\" , { configFileName : ` ${ __dirname } /test/fixtures/.barrc` , defaultExtension : [ \".json\" , \".yml\" , \".js\" ] })); // try to load as foobar, but .foobarrc is not found console . log ( rcFile ( \"foorbar\" )); // => undefined // try to load as .json, but it is not json // throw SyntaxError try { rcFile ( \"unknown\" , { // This is not json configFileName : ` ${ __dirname } /test/fixtures/.unknownrc` , defaultExtension : \".json\" }) } catch ( error ) { console . log ( error ); /* SyntaxError: Cannot read config file: /test/fixtures/.unknownrc */ } Users textlint Changelog See Releases page . Running tests Install devDependencies and Run npm test : npm i -d && npm test Contributing Pull requests and stars are always welcome. For bugs and feature requests, please create an issue . Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request :D Author github/azu twitter/azu_re License MIT \u00a9 azu Acknowledgement zkochan/rcfile: Loads library configuration in all possible ways Difference support multiple defaultExtension","title":"rc-config-loader [![Build Status](https://travis-ci.org/azu/rc-config-loader.svg?branch=master)](https://travis-ci.org/azu/rc-config-loader)"},{"location":"node_modules/rc-config-loader/#rc-config-loader","text":"Load config from .{product}rc.{json,yml,js} file. It is a Node.js library for loading .textlintrc , .eslintrc , .stylelintrc etc...","title":"rc-config-loader"},{"location":"node_modules/rc-config-loader/#features","text":"Find and load a configuration object from: a package.json property if it is needed a JSON or YAML, JS \"rc file\" .<product>rc or .<product>rc.json or .<product>rc.js or .<product>rc.yml , .<product>rc.yaml TypeScript support Includes .d.ts","title":"Features"},{"location":"node_modules/rc-config-loader/#difference","text":"","title":"Difference"},{"location":"node_modules/rc-config-loader/#with-mooxrc-loader","text":"Safe API rc contains shabang in .js file Enhance Error message","title":"with MoOx/rc-loader"},{"location":"node_modules/rc-config-loader/#with-cosmiconfig","text":"Sync loading cosmiconfig@3+ support sync option Built-in TypeScript support If you want to async support and customize loader, recommenced to use cosmiconfig .","title":"with cosmiconfig"},{"location":"node_modules/rc-config-loader/#install","text":"Install with npm : npm install rc-config-loader","title":"Install"},{"location":"node_modules/rc-config-loader/#usage","text":"","title":"Usage"},{"location":"node_modules/rc-config-loader/#api","text":"export interface rcConfigLoaderOption { // does look for `package.json` packageJSON ?: | boolean | { fieldName : string ; }; // if config file name is not same with packageName, set the name configFileName? : string ; // treat default(no ext file) as some extension defaultExtension? : string | string []; // where start to load cwd? : string ; } /** * Find and load rcfile, return { config, filePath } * If not found any rcfile, throw an Error. * @param {string} pkgName * @param {rcConfigLoaderOption} [opts] * @returns {{ config: Object, filePath:string } | undefined} */ export declare function rcFile < R extends {} > ( pkgName : string , opts? : rcConfigLoaderOption ) : { config : R ; filePath : string ; } | undefined ; rcFile return { config, filePath } object. config : it is config object filePath : absolute path to config file Note: rcFile function return undefined if the config file is not found rcFile throw an Error if the config file content is malformed (causing a parsing error) Recommenced usage: import { rcFile } from \"rc-config-loader\" function loadRcFile ( rcFileName ){ try { const results = rcFile ( rcFileName ); // Not Found if ( ! results ) { return {}; } return config ; } catch ( error ) { // Found it, but it is parsing error return {} ; // default value } } // load config const config = loadRcFile ( \"your-application\" ); console . log ( config ); // => rcfile content","title":"API"},{"location":"node_modules/rc-config-loader/#example","text":"\"use strict\" ; import { rcFile } from \"rc-config-loader\" // load .eslintrc from current dir console . log ( rcFile ( \"eslint\" )); // load .eslintrc from specific path console . log ( rcFile ( \"eslint\" , { configFileName : ` ${ __dirname } /test/fixtures/.eslintrc` })); /* config: { extends: 'standard', rules: { 'comma-dangle': [ 2, 'always-multiline' ], 'arrow-parens': [ 2, 'as-needed' ] } } filePath: ${__dirname}/test/fixtures/.eslintrc */ // load property from pacakge.json console . log ( rcFile ( \"rc-config-loader\" , { packageJSON : { fieldName : \"directories\" } })); /* config: { test: 'test' } filePath: /path/to/package.json */ // load .eslintrc from specific dir console . log ( rcFile ( \"eslint\" , { cwd : ` ${ __dirname } /test/fixtures` })); // load specific filename from current dir console . log ( rcFile ( \"travis\" , { configFileName : \".travis\" })); /* config: { sudo: false, language: 'node_js', node_js: 'stable' } filePath: /path/to/.travis */ // try to load as .json, .yml, js console . log ( rcFile ( \"bar\" , { configFileName : ` ${ __dirname } /test/fixtures/.barrc` , defaultExtension : [ \".json\" , \".yml\" , \".js\" ] })); // try to load as foobar, but .foobarrc is not found console . log ( rcFile ( \"foorbar\" )); // => undefined // try to load as .json, but it is not json // throw SyntaxError try { rcFile ( \"unknown\" , { // This is not json configFileName : ` ${ __dirname } /test/fixtures/.unknownrc` , defaultExtension : \".json\" }) } catch ( error ) { console . log ( error ); /* SyntaxError: Cannot read config file: /test/fixtures/.unknownrc */ }","title":"Example"},{"location":"node_modules/rc-config-loader/#users","text":"textlint","title":"Users"},{"location":"node_modules/rc-config-loader/#changelog","text":"See Releases page .","title":"Changelog"},{"location":"node_modules/rc-config-loader/#running-tests","text":"Install devDependencies and Run npm test : npm i -d && npm test","title":"Running tests"},{"location":"node_modules/rc-config-loader/#contributing","text":"Pull requests and stars are always welcome. For bugs and feature requests, please create an issue . Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request :D","title":"Contributing"},{"location":"node_modules/rc-config-loader/#author","text":"github/azu twitter/azu_re","title":"Author"},{"location":"node_modules/rc-config-loader/#license","text":"MIT \u00a9 azu","title":"License"},{"location":"node_modules/rc-config-loader/#acknowledgement","text":"zkochan/rcfile: Loads library configuration in all possible ways Difference support multiple defaultExtension","title":"Acknowledgement"},{"location":"node_modules/read-pkg/readme/","text":"read-pkg Read a package.json file Why Gracefully handles filesystem issues Strips UTF-8 BOM Throws more helpful JSON errors Normalizes the data Install $ npm install --save read-pkg Usage var readPkg = require ( 'read-pkg' ); readPkg (). then ( function ( pkg ) { console . log ( pkg ); //=> {name: 'read-pkg', ...} }); readPkg ( __dirname ). then ( function ( pkg ) { console . log ( pkg ); //=> {name: 'read-pkg', ...} }); readPkg ( path . join ( 'unicorn' , 'package.json' )). then ( function ( pkg ) { console . log ( pkg ); //=> {name: 'read-pkg', ...} }); API readPkg([path], [options]) Returns a promise that resolves to the parsed JSON. readPkg.sync([path], [options]) Returns the parsed JSON. path Type: string Default: . Path to a package.json file or its directory. options normalize Type: boolean Default: true Normalize the package data. Related read-pkg-up - Read the closest package.json file write-pkg - Write a package.json file load-json-file - Read and parse a JSON file License MIT \u00a9 Sindre Sorhus","title":"read-pkg [![Build Status](https://travis-ci.org/sindresorhus/read-pkg.svg?branch=master)](https://travis-ci.org/sindresorhus/read-pkg)"},{"location":"node_modules/read-pkg/readme/#read-pkg","text":"Read a package.json file","title":"read-pkg"},{"location":"node_modules/read-pkg/readme/#why","text":"Gracefully handles filesystem issues Strips UTF-8 BOM Throws more helpful JSON errors Normalizes the data","title":"Why"},{"location":"node_modules/read-pkg/readme/#install","text":"$ npm install --save read-pkg","title":"Install"},{"location":"node_modules/read-pkg/readme/#usage","text":"var readPkg = require ( 'read-pkg' ); readPkg (). then ( function ( pkg ) { console . log ( pkg ); //=> {name: 'read-pkg', ...} }); readPkg ( __dirname ). then ( function ( pkg ) { console . log ( pkg ); //=> {name: 'read-pkg', ...} }); readPkg ( path . join ( 'unicorn' , 'package.json' )). then ( function ( pkg ) { console . log ( pkg ); //=> {name: 'read-pkg', ...} });","title":"Usage"},{"location":"node_modules/read-pkg/readme/#api","text":"","title":"API"},{"location":"node_modules/read-pkg/readme/#readpkgpath-options","text":"Returns a promise that resolves to the parsed JSON.","title":"readPkg([path], [options])"},{"location":"node_modules/read-pkg/readme/#readpkgsyncpath-options","text":"Returns the parsed JSON.","title":"readPkg.sync([path], [options])"},{"location":"node_modules/read-pkg/readme/#path","text":"Type: string Default: . Path to a package.json file or its directory.","title":"path"},{"location":"node_modules/read-pkg/readme/#options","text":"","title":"options"},{"location":"node_modules/read-pkg/readme/#normalize","text":"Type: boolean Default: true Normalize the package data.","title":"normalize"},{"location":"node_modules/read-pkg/readme/#related","text":"read-pkg-up - Read the closest package.json file write-pkg - Write a package.json file load-json-file - Read and parse a JSON file","title":"Related"},{"location":"node_modules/read-pkg/readme/#license","text":"MIT \u00a9 Sindre Sorhus","title":"License"},{"location":"node_modules/read-pkg-up/readme/","text":"read-pkg-up Read the closest package.json file Why Finds the closest package.json Gracefully handles filesystem issues Strips UTF-8 BOM Throws more helpful JSON errors Normalizes the data Install $ npm install read-pkg-up Usage const readPkgUp = require ( 'read-pkg-up' ); readPkgUp (). then ( result => { console . log ( result ); /* { pkg: { name: 'awesome-package', version: '1.0.0', \u2026 }, path: '/Users/sindresorhus/dev/awesome-package/package.json' } */ }); API readPkgUp([options]) Returns a Promise for the result object. readPkgUp.sync([options]) Returns the result object. options cwd Type: string Default: process.cwd() Directory to start looking for a package.json file. normalize Type: boolean Default: true Normalize the package data. Related read-pkg - Read a package.json file pkg-up - Find the closest package.json file find-up - Find a file by walking up parent directories pkg-conf - Get namespaced config from the closest package.json License MIT \u00a9 Sindre Sorhus","title":"read-pkg-up [![Build Status](https://travis-ci.org/sindresorhus/read-pkg-up.svg?branch=master)](https://travis-ci.org/sindresorhus/read-pkg-up)"},{"location":"node_modules/read-pkg-up/readme/#read-pkg-up","text":"Read the closest package.json file","title":"read-pkg-up"},{"location":"node_modules/read-pkg-up/readme/#why","text":"Finds the closest package.json Gracefully handles filesystem issues Strips UTF-8 BOM Throws more helpful JSON errors Normalizes the data","title":"Why"},{"location":"node_modules/read-pkg-up/readme/#install","text":"$ npm install read-pkg-up","title":"Install"},{"location":"node_modules/read-pkg-up/readme/#usage","text":"const readPkgUp = require ( 'read-pkg-up' ); readPkgUp (). then ( result => { console . log ( result ); /* { pkg: { name: 'awesome-package', version: '1.0.0', \u2026 }, path: '/Users/sindresorhus/dev/awesome-package/package.json' } */ });","title":"Usage"},{"location":"node_modules/read-pkg-up/readme/#api","text":"","title":"API"},{"location":"node_modules/read-pkg-up/readme/#readpkgupoptions","text":"Returns a Promise for the result object.","title":"readPkgUp([options])"},{"location":"node_modules/read-pkg-up/readme/#readpkgupsyncoptions","text":"Returns the result object.","title":"readPkgUp.sync([options])"},{"location":"node_modules/read-pkg-up/readme/#options","text":"","title":"options"},{"location":"node_modules/read-pkg-up/readme/#cwd","text":"Type: string Default: process.cwd() Directory to start looking for a package.json file.","title":"cwd"},{"location":"node_modules/read-pkg-up/readme/#normalize","text":"Type: boolean Default: true Normalize the package data.","title":"normalize"},{"location":"node_modules/read-pkg-up/readme/#related","text":"read-pkg - Read a package.json file pkg-up - Find the closest package.json file find-up - Find a file by walking up parent directories pkg-conf - Get namespaced config from the closest package.json","title":"Related"},{"location":"node_modules/read-pkg-up/readme/#license","text":"MIT \u00a9 Sindre Sorhus","title":"License"},{"location":"node_modules/read-pkg-up/node_modules/load-json-file/readme/","text":"load-json-file Read and parse a JSON file Strips UTF-8 BOM , uses graceful-fs , and throws more helpful JSON errors . Install $ npm install --save load-json-file Usage const loadJsonFile = require ( 'load-json-file' ); loadJsonFile ( 'foo.json' ). then ( json => { console . log ( json ); //=> {foo: true} }); API loadJsonFile(filepath) Returns a promise for the parsed JSON. loadJsonFile.sync(filepath) Returns the parsed JSON. Related write-json-file - Stringify and write JSON to a file atomically License MIT \u00a9 Sindre Sorhus","title":"load-json-file [![Build Status](https://travis-ci.org/sindresorhus/load-json-file.svg?branch=master)](https://travis-ci.org/sindresorhus/load-json-file)"},{"location":"node_modules/read-pkg-up/node_modules/load-json-file/readme/#load-json-file","text":"Read and parse a JSON file Strips UTF-8 BOM , uses graceful-fs , and throws more helpful JSON errors .","title":"load-json-file"},{"location":"node_modules/read-pkg-up/node_modules/load-json-file/readme/#install","text":"$ npm install --save load-json-file","title":"Install"},{"location":"node_modules/read-pkg-up/node_modules/load-json-file/readme/#usage","text":"const loadJsonFile = require ( 'load-json-file' ); loadJsonFile ( 'foo.json' ). then ( json => { console . log ( json ); //=> {foo: true} });","title":"Usage"},{"location":"node_modules/read-pkg-up/node_modules/load-json-file/readme/#api","text":"","title":"API"},{"location":"node_modules/read-pkg-up/node_modules/load-json-file/readme/#loadjsonfilefilepath","text":"Returns a promise for the parsed JSON.","title":"loadJsonFile(filepath)"},{"location":"node_modules/read-pkg-up/node_modules/load-json-file/readme/#loadjsonfilesyncfilepath","text":"Returns the parsed JSON.","title":"loadJsonFile.sync(filepath)"},{"location":"node_modules/read-pkg-up/node_modules/load-json-file/readme/#related","text":"write-json-file - Stringify and write JSON to a file atomically","title":"Related"},{"location":"node_modules/read-pkg-up/node_modules/load-json-file/readme/#license","text":"MIT \u00a9 Sindre Sorhus","title":"License"},{"location":"node_modules/read-pkg-up/node_modules/parse-json/readme/","text":"parse-json Parse JSON with more helpful errors Install $ npm install parse-json Usage const parseJson = require ( 'parse-json' ); const json = '{\\n\\t\"foo\": true,\\n}' ; JSON . parse ( json ); /* undefined:3 } ^ SyntaxError: Unexpected token } */ parseJson ( json ); /* JSONError: Trailing comma in object at 3:1 } ^ */ parseJson ( json , 'foo.json' ); /* JSONError: Trailing comma in object in foo.json:3:1 } ^ */ // You can also add the filename at a later point try { parseJson ( json ); } catch ( err ) { err . fileName = 'foo.json' ; throw err ; } /* JSONError: Trailing comma in object in foo.json:3:1 } ^ */ API parseJson(input, [reviver], [filename]) input Type: string reviver Type: Function Prescribes how the value originally produced by parsing is transformed, before being returned. See JSON.parse docs for more. filename Type: string Filename displayed in the error message. License MIT \u00a9 Sindre Sorhus","title":"parse-json [![Build Status](https://travis-ci.org/sindresorhus/parse-json.svg?branch=master)](https://travis-ci.org/sindresorhus/parse-json)"},{"location":"node_modules/read-pkg-up/node_modules/parse-json/readme/#parse-json","text":"Parse JSON with more helpful errors","title":"parse-json"},{"location":"node_modules/read-pkg-up/node_modules/parse-json/readme/#install","text":"$ npm install parse-json","title":"Install"},{"location":"node_modules/read-pkg-up/node_modules/parse-json/readme/#usage","text":"const parseJson = require ( 'parse-json' ); const json = '{\\n\\t\"foo\": true,\\n}' ; JSON . parse ( json ); /* undefined:3 } ^ SyntaxError: Unexpected token } */ parseJson ( json ); /* JSONError: Trailing comma in object at 3:1 } ^ */ parseJson ( json , 'foo.json' ); /* JSONError: Trailing comma in object in foo.json:3:1 } ^ */ // You can also add the filename at a later point try { parseJson ( json ); } catch ( err ) { err . fileName = 'foo.json' ; throw err ; } /* JSONError: Trailing comma in object in foo.json:3:1 } ^ */","title":"Usage"},{"location":"node_modules/read-pkg-up/node_modules/parse-json/readme/#api","text":"","title":"API"},{"location":"node_modules/read-pkg-up/node_modules/parse-json/readme/#parsejsoninput-reviver-filename","text":"","title":"parseJson(input, [reviver], [filename])"},{"location":"node_modules/read-pkg-up/node_modules/parse-json/readme/#input","text":"Type: string","title":"input"},{"location":"node_modules/read-pkg-up/node_modules/parse-json/readme/#reviver","text":"Type: Function Prescribes how the value originally produced by parsing is transformed, before being returned. See JSON.parse docs for more.","title":"reviver"},{"location":"node_modules/read-pkg-up/node_modules/parse-json/readme/#filename","text":"Type: string Filename displayed in the error message.","title":"filename"},{"location":"node_modules/read-pkg-up/node_modules/parse-json/readme/#license","text":"MIT \u00a9 Sindre Sorhus","title":"License"},{"location":"node_modules/read-pkg-up/node_modules/path-type/readme/","text":"path-type Check if a path is a file, directory, or symlink Install $ npm install path-type Usage const pathType = require ( 'path-type' ); pathType . file ( 'package.json' ). then ( isFile => { console . log ( isFile ); //=> true }) API .file(path) .dir(path) .symlink(path) Returns a Promise for a boolean of whether the path is the checked type. .fileSync(path) .dirSync(path) .symlinkSync(path) Returns a boolean of whether the path is the checked type. License MIT \u00a9 Sindre Sorhus","title":"path-type [![Build Status](https://travis-ci.org/sindresorhus/path-type.svg?branch=master)](https://travis-ci.org/sindresorhus/path-type)"},{"location":"node_modules/read-pkg-up/node_modules/path-type/readme/#path-type","text":"Check if a path is a file, directory, or symlink","title":"path-type"},{"location":"node_modules/read-pkg-up/node_modules/path-type/readme/#install","text":"$ npm install path-type","title":"Install"},{"location":"node_modules/read-pkg-up/node_modules/path-type/readme/#usage","text":"const pathType = require ( 'path-type' ); pathType . file ( 'package.json' ). then ( isFile => { console . log ( isFile ); //=> true })","title":"Usage"},{"location":"node_modules/read-pkg-up/node_modules/path-type/readme/#api","text":"","title":"API"},{"location":"node_modules/read-pkg-up/node_modules/path-type/readme/#filepath","text":"","title":".file(path)"},{"location":"node_modules/read-pkg-up/node_modules/path-type/readme/#dirpath","text":"","title":".dir(path)"},{"location":"node_modules/read-pkg-up/node_modules/path-type/readme/#symlinkpath","text":"Returns a Promise for a boolean of whether the path is the checked type.","title":".symlink(path)"},{"location":"node_modules/read-pkg-up/node_modules/path-type/readme/#filesyncpath","text":"","title":".fileSync(path)"},{"location":"node_modules/read-pkg-up/node_modules/path-type/readme/#dirsyncpath","text":"","title":".dirSync(path)"},{"location":"node_modules/read-pkg-up/node_modules/path-type/readme/#symlinksyncpath","text":"Returns a boolean of whether the path is the checked type.","title":".symlinkSync(path)"},{"location":"node_modules/read-pkg-up/node_modules/path-type/readme/#license","text":"MIT \u00a9 Sindre Sorhus","title":"License"},{"location":"node_modules/read-pkg-up/node_modules/pify/readme/","text":"pify Promisify a callback-style function Install $ npm install --save pify Usage const fs = require ( 'fs' ); const pify = require ( 'pify' ); // Promisify a single function pify ( fs . readFile )( 'package.json' , 'utf8' ). then ( data => { console . log ( JSON . parse ( data ). name ); //=> 'pify' }); // Promisify all methods in a module pify ( fs ). readFile ( 'package.json' , 'utf8' ). then ( data => { console . log ( JSON . parse ( data ). name ); //=> 'pify' }); API pify(input, [options]) Returns a Promise wrapped version of the supplied function or module. input Type: Function Object Callback-style function or module whose methods you want to promisify. options multiArgs Type: boolean Default: false By default, the promisified function will only return the second argument from the callback, which works fine for most APIs. This option can be useful for modules like request that return multiple arguments. Turning this on will make it return an array of all arguments from the callback, excluding the error argument, instead of just the second argument. This also applies to rejections, where it returns an array of all the callback arguments, including the error. const request = require ( 'request' ); const pify = require ( 'pify' ); pify ( request , { multiArgs : true })( 'https://sindresorhus.com' ). then ( result => { const [ httpResponse , body ] = result ; }); include Type: string[] RegExp[] Methods in a module to promisify. Remaining methods will be left untouched. exclude Type: string[] RegExp[] Default: [/.+(Sync|Stream)$/] Methods in a module not to promisify. Methods with names ending with 'Sync' are excluded by default. excludeMain Type: boolean Default: false If given module is a function itself, it will be promisified. Turn this option on if you want to promisify only methods of the module. const pify = require ( 'pify' ); function fn () { return true ; } fn . method = ( data , callback ) => { setImmediate (() => { callback ( null , data ); }); }; // Promisify methods but not `fn()` const promiseFn = pify ( fn , { excludeMain : true }); if ( promiseFn ()) { promiseFn . method ( 'hi' ). then ( data => { console . log ( data ); }); } errorFirst Type: boolean Default: true Whether the callback has an error as the first argument. You'll want to set this to false if you're dealing with an API that doesn't have an error as the first argument, like fs.exists() , some browser APIs, Chrome Extension APIs, etc. promiseModule Type: Function Custom promise module to use instead of the native one. Check out pinkie-promise if you need a tiny promise polyfill. Related p-event - Promisify an event by waiting for it to be emitted p-map - Map over promises concurrently More\u2026 License MIT \u00a9 Sindre Sorhus","title":"pify [![Build Status](https://travis-ci.org/sindresorhus/pify.svg?branch=master)](https://travis-ci.org/sindresorhus/pify)"},{"location":"node_modules/read-pkg-up/node_modules/pify/readme/#pify","text":"Promisify a callback-style function","title":"pify"},{"location":"node_modules/read-pkg-up/node_modules/pify/readme/#install","text":"$ npm install --save pify","title":"Install"},{"location":"node_modules/read-pkg-up/node_modules/pify/readme/#usage","text":"const fs = require ( 'fs' ); const pify = require ( 'pify' ); // Promisify a single function pify ( fs . readFile )( 'package.json' , 'utf8' ). then ( data => { console . log ( JSON . parse ( data ). name ); //=> 'pify' }); // Promisify all methods in a module pify ( fs ). readFile ( 'package.json' , 'utf8' ). then ( data => { console . log ( JSON . parse ( data ). name ); //=> 'pify' });","title":"Usage"},{"location":"node_modules/read-pkg-up/node_modules/pify/readme/#api","text":"","title":"API"},{"location":"node_modules/read-pkg-up/node_modules/pify/readme/#pifyinput-options","text":"Returns a Promise wrapped version of the supplied function or module.","title":"pify(input, [options])"},{"location":"node_modules/read-pkg-up/node_modules/pify/readme/#input","text":"Type: Function Object Callback-style function or module whose methods you want to promisify.","title":"input"},{"location":"node_modules/read-pkg-up/node_modules/pify/readme/#options","text":"","title":"options"},{"location":"node_modules/read-pkg-up/node_modules/pify/readme/#multiargs","text":"Type: boolean Default: false By default, the promisified function will only return the second argument from the callback, which works fine for most APIs. This option can be useful for modules like request that return multiple arguments. Turning this on will make it return an array of all arguments from the callback, excluding the error argument, instead of just the second argument. This also applies to rejections, where it returns an array of all the callback arguments, including the error. const request = require ( 'request' ); const pify = require ( 'pify' ); pify ( request , { multiArgs : true })( 'https://sindresorhus.com' ). then ( result => { const [ httpResponse , body ] = result ; });","title":"multiArgs"},{"location":"node_modules/read-pkg-up/node_modules/pify/readme/#include","text":"Type: string[] RegExp[] Methods in a module to promisify. Remaining methods will be left untouched.","title":"include"},{"location":"node_modules/read-pkg-up/node_modules/pify/readme/#exclude","text":"Type: string[] RegExp[] Default: [/.+(Sync|Stream)$/] Methods in a module not to promisify. Methods with names ending with 'Sync' are excluded by default.","title":"exclude"},{"location":"node_modules/read-pkg-up/node_modules/pify/readme/#excludemain","text":"Type: boolean Default: false If given module is a function itself, it will be promisified. Turn this option on if you want to promisify only methods of the module. const pify = require ( 'pify' ); function fn () { return true ; } fn . method = ( data , callback ) => { setImmediate (() => { callback ( null , data ); }); }; // Promisify methods but not `fn()` const promiseFn = pify ( fn , { excludeMain : true }); if ( promiseFn ()) { promiseFn . method ( 'hi' ). then ( data => { console . log ( data ); }); }","title":"excludeMain"},{"location":"node_modules/read-pkg-up/node_modules/pify/readme/#errorfirst","text":"Type: boolean Default: true Whether the callback has an error as the first argument. You'll want to set this to false if you're dealing with an API that doesn't have an error as the first argument, like fs.exists() , some browser APIs, Chrome Extension APIs, etc.","title":"errorFirst"},{"location":"node_modules/read-pkg-up/node_modules/pify/readme/#promisemodule","text":"Type: Function Custom promise module to use instead of the native one. Check out pinkie-promise if you need a tiny promise polyfill.","title":"promiseModule"},{"location":"node_modules/read-pkg-up/node_modules/pify/readme/#related","text":"p-event - Promisify an event by waiting for it to be emitted p-map - Map over promises concurrently More\u2026","title":"Related"},{"location":"node_modules/read-pkg-up/node_modules/pify/readme/#license","text":"MIT \u00a9 Sindre Sorhus","title":"License"},{"location":"node_modules/read-pkg-up/node_modules/read-pkg/readme/","text":"read-pkg Read a package.json file Why Gracefully handles filesystem issues Strips UTF-8 BOM Throws more helpful JSON errors Normalizes the data Install $ npm install read-pkg Usage const readPkg = require ( 'read-pkg' ); readPkg (). then ( pkg => { console . log ( pkg ); //=> {name: 'read-pkg', ...} }); readPkg ( __dirname ). then ( pkg => { console . log ( pkg ); //=> {name: 'read-pkg', ...} }); readPkg ( path . join ( 'unicorn' , 'package.json' )). then ( pkg => { console . log ( pkg ); //=> {name: 'read-pkg', ...} }); API readPkg([path], [options]) Returns a Promise for the parsed JSON. readPkg.sync([path], [options]) Returns the parsed JSON. path Type: string Default: process.cwd() Path to a package.json file or its directory. options normalize Type: boolean Default: true Normalize the package data. Related read-pkg-up - Read the closest package.json file write-pkg - Write a package.json file load-json-file - Read and parse a JSON file License MIT \u00a9 Sindre Sorhus","title":"read-pkg [![Build Status](https://travis-ci.org/sindresorhus/read-pkg.svg?branch=master)](https://travis-ci.org/sindresorhus/read-pkg)"},{"location":"node_modules/read-pkg-up/node_modules/read-pkg/readme/#read-pkg","text":"Read a package.json file","title":"read-pkg"},{"location":"node_modules/read-pkg-up/node_modules/read-pkg/readme/#why","text":"Gracefully handles filesystem issues Strips UTF-8 BOM Throws more helpful JSON errors Normalizes the data","title":"Why"},{"location":"node_modules/read-pkg-up/node_modules/read-pkg/readme/#install","text":"$ npm install read-pkg","title":"Install"},{"location":"node_modules/read-pkg-up/node_modules/read-pkg/readme/#usage","text":"const readPkg = require ( 'read-pkg' ); readPkg (). then ( pkg => { console . log ( pkg ); //=> {name: 'read-pkg', ...} }); readPkg ( __dirname ). then ( pkg => { console . log ( pkg ); //=> {name: 'read-pkg', ...} }); readPkg ( path . join ( 'unicorn' , 'package.json' )). then ( pkg => { console . log ( pkg ); //=> {name: 'read-pkg', ...} });","title":"Usage"},{"location":"node_modules/read-pkg-up/node_modules/read-pkg/readme/#api","text":"","title":"API"},{"location":"node_modules/read-pkg-up/node_modules/read-pkg/readme/#readpkgpath-options","text":"Returns a Promise for the parsed JSON.","title":"readPkg([path], [options])"},{"location":"node_modules/read-pkg-up/node_modules/read-pkg/readme/#readpkgsyncpath-options","text":"Returns the parsed JSON.","title":"readPkg.sync([path], [options])"},{"location":"node_modules/read-pkg-up/node_modules/read-pkg/readme/#path","text":"Type: string Default: process.cwd() Path to a package.json file or its directory.","title":"path"},{"location":"node_modules/read-pkg-up/node_modules/read-pkg/readme/#options","text":"","title":"options"},{"location":"node_modules/read-pkg-up/node_modules/read-pkg/readme/#normalize","text":"Type: boolean Default: true Normalize the package data.","title":"normalize"},{"location":"node_modules/read-pkg-up/node_modules/read-pkg/readme/#related","text":"read-pkg-up - Read the closest package.json file write-pkg - Write a package.json file load-json-file - Read and parse a JSON file","title":"Related"},{"location":"node_modules/read-pkg-up/node_modules/read-pkg/readme/#license","text":"MIT \u00a9 Sindre Sorhus","title":"License"},{"location":"node_modules/read-pkg-up/node_modules/strip-bom/readme/","text":"strip-bom Strip UTF-8 byte order mark (BOM) from a string From Wikipedia: The Unicode Standard permits the BOM in UTF-8, but does not require nor recommend its use. Byte order has no meaning in UTF-8. Install $ npm install --save strip-bom Usage const stripBom = require ( 'strip-bom' ); stripBom ( '\\uFEFFunicorn' ); //=> 'unicorn' Related strip-bom-cli - CLI for this module strip-bom-buf - Buffer version of this module strip-bom-stream - Stream version of this module License MIT \u00a9 Sindre Sorhus","title":"strip-bom [![Build Status](https://travis-ci.org/sindresorhus/strip-bom.svg?branch=master)](https://travis-ci.org/sindresorhus/strip-bom)"},{"location":"node_modules/read-pkg-up/node_modules/strip-bom/readme/#strip-bom","text":"Strip UTF-8 byte order mark (BOM) from a string From Wikipedia: The Unicode Standard permits the BOM in UTF-8, but does not require nor recommend its use. Byte order has no meaning in UTF-8.","title":"strip-bom"},{"location":"node_modules/read-pkg-up/node_modules/strip-bom/readme/#install","text":"$ npm install --save strip-bom","title":"Install"},{"location":"node_modules/read-pkg-up/node_modules/strip-bom/readme/#usage","text":"const stripBom = require ( 'strip-bom' ); stripBom ( '\\uFEFFunicorn' ); //=> 'unicorn'","title":"Usage"},{"location":"node_modules/read-pkg-up/node_modules/strip-bom/readme/#related","text":"strip-bom-cli - CLI for this module strip-bom-buf - Buffer version of this module strip-bom-stream - Stream version of this module","title":"Related"},{"location":"node_modules/read-pkg-up/node_modules/strip-bom/readme/#license","text":"MIT \u00a9 Sindre Sorhus","title":"License"},{"location":"node_modules/regenerator-runtime/","text":"regenerator-runtime Standalone runtime for Regenerator -compiled generator and async functions. To import the runtime as a module (recommended), either of the following import styles will work: // CommonJS const regeneratorRuntime = require ( \"regenerator-runtime\" ); // ECMAScript 2015 import regeneratorRuntime from \"regenerator-runtime\" ; To ensure that regeneratorRuntime is defined globally, either of the following styles will work: // CommonJS require ( \"regenerator-runtime/runtime\" ); // ECMAScript 2015 import \"regenerator-runtime/runtime.js\" ; To get the absolute file system path of runtime.js , evaluate the following expression: require ( \"regenerator-runtime/path\" ). path","title":"regenerator-runtime"},{"location":"node_modules/regenerator-runtime/#regenerator-runtime","text":"Standalone runtime for Regenerator -compiled generator and async functions. To import the runtime as a module (recommended), either of the following import styles will work: // CommonJS const regeneratorRuntime = require ( \"regenerator-runtime\" ); // ECMAScript 2015 import regeneratorRuntime from \"regenerator-runtime\" ; To ensure that regeneratorRuntime is defined globally, either of the following styles will work: // CommonJS require ( \"regenerator-runtime/runtime\" ); // ECMAScript 2015 import \"regenerator-runtime/runtime.js\" ; To get the absolute file system path of runtime.js , evaluate the following expression: require ( \"regenerator-runtime/path\" ). path","title":"regenerator-runtime"},{"location":"node_modules/regexp.prototype.flags/","text":"RegExp.prototype.flags An ES6 spec-compliant RegExp.prototype.flags shim. Invoke its \"shim\" method to shim RegExp.prototype.flags if it is unavailable. Note : RegExp#flags requires a true ES5 environment - specifically, one with ES5 getters. This package implements the es-shim API interface. It works in an ES5-supported environment and complies with the spec . Most common usage: var flags = require ( 'regexp.prototype.flags' ); assert ( flags ( /a/ ) === '' ); assert ( flags ( new RegExp ( 'a' ) === '' ); assert ( flags ( /a/mig ) === 'gim' ); assert ( flags ( new RegExp ( 'a' , 'mig' )) === 'gim' ); if ( ! RegExp . prototype . flags ) { flags . shim (); } assert ( flags ( /a/ ) === /a/ . flags ); assert ( flags ( new RegExp ( 'a' ) === new RegExp ( 'a' ). flags ); assert ( flags ( /a/mig ) === /a/mig . flags ); assert ( flags ( new RegExp ( 'a' , 'mig' )) === new RegExp ( 'a' , 'mig' ). flags ); Tests Simply clone the repo, npm install , and run npm test","title":"Index"},{"location":"node_modules/regexp.prototype.flags/#tests","text":"Simply clone the repo, npm install , and run npm test","title":"Tests"},{"location":"node_modules/regexp.prototype.flags/CHANGELOG/","text":"Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning . v1.4.1 - 2022-01-13 Commits [Fix] polyfill : do not throw in a descriptorless environment e2d24e7 v1.4.0 - 2022-01-13 Commits [Tests] use available-regexp-flags 95af246 [New] add hasIndices / d flag 89959ca v1.3.2 - 2022-01-13 Commits [actions] reuse common workflows 6665b5d [actions] use node/install instead of node/run ; use codecov action babce94 [Dev Deps] update eslint , @ljharb/eslint-config , @es-shims/api , object-inspect , safe-publish-latest , tape 52132d9 [Dev Deps] update eslint , @ljharb/eslint-config , @es-shims/api , aud , auto-changelog , object-inspect , tape c16687c [actions] update codecov uploader 0a3c904 [Dev Deps] update eslint , @ljharb/eslint-config , aud , object-inspect , tape 3fce7f2 [Dev Deps] update eslint , @ljharb/eslint-config , aud , tape 75ca498 [actions] update workflows 300f321 [meta] better eccheck command 5f735ab [Dev Deps] update eslint , tape 3059637 [actions] update workflows [ dbd8ab4`](https://github.com/es-shims/RegExp.prototype.flags/commit/dbd8ab49fa2196dd74791107825c43e4481cdfd2) [meta] use prepublishOnly script for npm 7+ 5cc8652 [Fix] use polyfill, not implementation, in main export 15ab4b8 [meta] remove audit-level config, which breaks npm 7 installs 1cb98ae v1.3.1 - 2021-01-15 Commits [Tests] run nyc on all tests; use tape runner; add full es-shims test suite 047a1e8 [Tests] migrate tests to Github Actions e4e391f [meta] use auto-changelog for changelog afbcd06 [actions] add Require Allow Edits workflow 0db5d50 [meta] do not publish github action workflow files 53f2902 [Dev Deps] update eslint , @ljharb/eslint-config , tape ; add aud 05f2a85 [Dev Deps] update eslint , @ljharb/eslint-config , aud , tape 2a197b8 [Dev Deps] update eslint , @ljharb/eslint-config , tape ; add safe-publish-latest e40bd37 [Refactor] use call-bind instead of es-abstract e6eac90 [Deps] update es-abstract f198075 [actions] switch Automatic Rebase workflow to pull_request_target event 2d21727 [Deps] update es-abstract 7e7ddc6 v1.3.0 - 2019-12-14 Commits [Tests] remove jscs 4a09ab4 [Tests] use shared travis-ci configs 8afa6a9 [Dev Deps] update eslint , @ljharb/eslint-config , covert , has , tape 13a9fc9 [Refactor] use callBind helper from es-abstract c3a3727 [actions] add automatic rebasing / merge commit blocking 51e3f93 [Tests] use npx aud instead of nsp or npm audit with hoops 7e1ee50 [meta] add funding field c99cbec [New] add auto entry point 1e53e85 [Tests] use eclint instead of editorconfig-tools 8600bfe [Deps] update define-properties ad221fa v1.2.0 - 2017-10-24 Commits [Tests] up to node v8.8 , v7.10 , v6.11 , v4.8 ; improve matrix; use nvm install-latest-npm so new npm doesn\u2019t break old node 5a9653d [Dev Deps] update tape , jscs , nsp , eslint , @ljharb/eslint-config ; add has 556de86 [Dev Deps] update tape , jscs , nsp , eslint , @ljharb/eslint-config 726772c [New] add support for dotAll regex flag. fcbd64f [Dev Deps] update eslint , jscs , nsp , tape , @ljharb/eslint-config , @es-shims/api 0272934 [Dev Deps] update jscs , nsp , eslint e4cd264 [Dev Deps] update jscs , nsp , eslint , @es-shims/api baf5169 [Dev Deps] update tape , nsp , eslint , @ljharb/eslint-config 97cea15 [Dev Deps] update tape , discs , eslint , @ljharb/eslint-config b6872f4 [Dev Deps] update tape , jscs , nsp , eslint , @ljharb/eslint-config 14702cc [Dev Deps] update jscs , @es-shims/api cd060a6 [Tests] up to node v6.2 , v5.11 14638bd [Tests] up to io.js v3.3 , node v4.1 b0a5ffb [Tests] npm run silently 35804d4 [Tests] up to node v5.9 , v4.4 e0fe80d [Tests] up to node v5.7 , v4.3 9739c42 [Dev Deps] update jscs 4aa1699 [Dev Deps] update tape , jscs , nsp , @ljharb/eslint-config 8bc5e6b [Tests] fix npm upgrades on older nodes ae00bb9 Only apps should have lockfiles. 6d14965 [Tests] use pretest/posttest for better organization 0520cfd [Tests] up to node v5.5 810f62b [Tests] on node v5.3 f839662 [Dev Deps] update eslint , @ljharb/eslint-config 78ecaa5 [Tests] up to node v5.2 c04d762 [Tests] up to node v5.0 7c0d5b9 [Tests] on node v5.10 40ddafd [Deps] update define-properties 98ea89d v1.1.1 - 2015-08-16 Commits [Fix] cover the case where there is no descriptor on the prototype 67014c3 v1.1.0 - 2015-08-16 Commits Update jscs , eslint ; use my personal shared eslint config. 37ca379 Update eslint , tape , editorconfig-tools , nsp cb92d6e Implement the es-shim API . 15eb821 Refactoring to reduce complexity. aeb4785 Move implementation to implementation.js a698925 Update eslint , jscs 277a4a1 Update nsp , eslint c9f3866 Update tape , eslint a08795b Make some things a bit more robust. 450abb4 Update eslint 25d898f Test on latest two io.js versions. 2e17ca3 All grade A-supported node / iojs versions now ship with an npm that understands ^ . 4a2a548 Update eslint 64df4e0 Update eslint ac05ae5 Clean up supportsDescriptors check. e44d0de [Dev Deps] Update jscs 8741758 Update tape , jscs , nsp , eslint db1f658 Test on io.js v2.3 18c948f Run travis-ci tests on iojs and node v0.12; speed up builds; allow 0.8 failures. c37e79f Update tape , jscs , eslint 4b652bf [Dev Deps] Update tape , eslint 29d4ac0 Test up to io.js v2.1 9f9e342 Update covert , jscs c98f3b4 Update jscs 9e5e220 [Dev Deps] update tape cdd3af2 [Dev Deps] update tape d42d0bf Switch from vb.teelaun.ch to versionbadg.es for the npm version badge SVG. a5e7453 Update tape 2a675ec Test on io.js v2.5 448cbdb Test on io.js v2.4 948e511 Test on io.js v2.2 4793278 Update eslint 0f463da Update eslint 5a16967 Test on io.js v3.0 7ba8706 Test on iojs-v1.2 b521e09 v1.0.1 - 2014-12-13 Merged Match the spec properly: throw when not an object; make getter generic. #3 Fixed Match the spec properly #1 Commits Speed up the \u201cis object\u201d check in case of null or undefined 77137f9 v1.0.0 - 2014-12-10 Commits Adding dotfiles 313812e Tests 625a042 Add package.json 8b98257 Adding the README 884798b Implementation. 4186cc9 Adding LICENSE and CHANGELOG f87fa81 Fixing README URLs b821703 Clean up dependencies; update tape , jscs , nsp 0e13fc1 Initial commit. 8a9e35e","title":"Changelog"},{"location":"node_modules/regexp.prototype.flags/CHANGELOG/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"node_modules/regexp.prototype.flags/CHANGELOG/#v141-2022-01-13","text":"","title":"v1.4.1 - 2022-01-13"},{"location":"node_modules/regexp.prototype.flags/CHANGELOG/#commits","text":"[Fix] polyfill : do not throw in a descriptorless environment e2d24e7","title":"Commits"},{"location":"node_modules/regexp.prototype.flags/CHANGELOG/#v140-2022-01-13","text":"","title":"v1.4.0 - 2022-01-13"},{"location":"node_modules/regexp.prototype.flags/CHANGELOG/#commits_1","text":"[Tests] use available-regexp-flags 95af246 [New] add hasIndices / d flag 89959ca","title":"Commits"},{"location":"node_modules/regexp.prototype.flags/CHANGELOG/#v132-2022-01-13","text":"","title":"v1.3.2 - 2022-01-13"},{"location":"node_modules/regexp.prototype.flags/CHANGELOG/#commits_2","text":"[actions] reuse common workflows 6665b5d [actions] use node/install instead of node/run ; use codecov action babce94 [Dev Deps] update eslint , @ljharb/eslint-config , @es-shims/api , object-inspect , safe-publish-latest , tape 52132d9 [Dev Deps] update eslint , @ljharb/eslint-config , @es-shims/api , aud , auto-changelog , object-inspect , tape c16687c [actions] update codecov uploader 0a3c904 [Dev Deps] update eslint , @ljharb/eslint-config , aud , object-inspect , tape 3fce7f2 [Dev Deps] update eslint , @ljharb/eslint-config , aud , tape 75ca498 [actions] update workflows 300f321 [meta] better eccheck command 5f735ab [Dev Deps] update eslint , tape 3059637 [actions] update workflows [ dbd8ab4`](https://github.com/es-shims/RegExp.prototype.flags/commit/dbd8ab49fa2196dd74791107825c43e4481cdfd2) [meta] use prepublishOnly script for npm 7+ 5cc8652 [Fix] use polyfill, not implementation, in main export 15ab4b8 [meta] remove audit-level config, which breaks npm 7 installs 1cb98ae","title":"Commits"},{"location":"node_modules/regexp.prototype.flags/CHANGELOG/#v131-2021-01-15","text":"","title":"v1.3.1 - 2021-01-15"},{"location":"node_modules/regexp.prototype.flags/CHANGELOG/#commits_3","text":"[Tests] run nyc on all tests; use tape runner; add full es-shims test suite 047a1e8 [Tests] migrate tests to Github Actions e4e391f [meta] use auto-changelog for changelog afbcd06 [actions] add Require Allow Edits workflow 0db5d50 [meta] do not publish github action workflow files 53f2902 [Dev Deps] update eslint , @ljharb/eslint-config , tape ; add aud 05f2a85 [Dev Deps] update eslint , @ljharb/eslint-config , aud , tape 2a197b8 [Dev Deps] update eslint , @ljharb/eslint-config , tape ; add safe-publish-latest e40bd37 [Refactor] use call-bind instead of es-abstract e6eac90 [Deps] update es-abstract f198075 [actions] switch Automatic Rebase workflow to pull_request_target event 2d21727 [Deps] update es-abstract 7e7ddc6","title":"Commits"},{"location":"node_modules/regexp.prototype.flags/CHANGELOG/#v130-2019-12-14","text":"","title":"v1.3.0 - 2019-12-14"},{"location":"node_modules/regexp.prototype.flags/CHANGELOG/#commits_4","text":"[Tests] remove jscs 4a09ab4 [Tests] use shared travis-ci configs 8afa6a9 [Dev Deps] update eslint , @ljharb/eslint-config , covert , has , tape 13a9fc9 [Refactor] use callBind helper from es-abstract c3a3727 [actions] add automatic rebasing / merge commit blocking 51e3f93 [Tests] use npx aud instead of nsp or npm audit with hoops 7e1ee50 [meta] add funding field c99cbec [New] add auto entry point 1e53e85 [Tests] use eclint instead of editorconfig-tools 8600bfe [Deps] update define-properties ad221fa","title":"Commits"},{"location":"node_modules/regexp.prototype.flags/CHANGELOG/#v120-2017-10-24","text":"","title":"v1.2.0 - 2017-10-24"},{"location":"node_modules/regexp.prototype.flags/CHANGELOG/#commits_5","text":"[Tests] up to node v8.8 , v7.10 , v6.11 , v4.8 ; improve matrix; use nvm install-latest-npm so new npm doesn\u2019t break old node 5a9653d [Dev Deps] update tape , jscs , nsp , eslint , @ljharb/eslint-config ; add has 556de86 [Dev Deps] update tape , jscs , nsp , eslint , @ljharb/eslint-config 726772c [New] add support for dotAll regex flag. fcbd64f [Dev Deps] update eslint , jscs , nsp , tape , @ljharb/eslint-config , @es-shims/api 0272934 [Dev Deps] update jscs , nsp , eslint e4cd264 [Dev Deps] update jscs , nsp , eslint , @es-shims/api baf5169 [Dev Deps] update tape , nsp , eslint , @ljharb/eslint-config 97cea15 [Dev Deps] update tape , discs , eslint , @ljharb/eslint-config b6872f4 [Dev Deps] update tape , jscs , nsp , eslint , @ljharb/eslint-config 14702cc [Dev Deps] update jscs , @es-shims/api cd060a6 [Tests] up to node v6.2 , v5.11 14638bd [Tests] up to io.js v3.3 , node v4.1 b0a5ffb [Tests] npm run silently 35804d4 [Tests] up to node v5.9 , v4.4 e0fe80d [Tests] up to node v5.7 , v4.3 9739c42 [Dev Deps] update jscs 4aa1699 [Dev Deps] update tape , jscs , nsp , @ljharb/eslint-config 8bc5e6b [Tests] fix npm upgrades on older nodes ae00bb9 Only apps should have lockfiles. 6d14965 [Tests] use pretest/posttest for better organization 0520cfd [Tests] up to node v5.5 810f62b [Tests] on node v5.3 f839662 [Dev Deps] update eslint , @ljharb/eslint-config 78ecaa5 [Tests] up to node v5.2 c04d762 [Tests] up to node v5.0 7c0d5b9 [Tests] on node v5.10 40ddafd [Deps] update define-properties 98ea89d","title":"Commits"},{"location":"node_modules/regexp.prototype.flags/CHANGELOG/#v111-2015-08-16","text":"","title":"v1.1.1 - 2015-08-16"},{"location":"node_modules/regexp.prototype.flags/CHANGELOG/#commits_6","text":"[Fix] cover the case where there is no descriptor on the prototype 67014c3","title":"Commits"},{"location":"node_modules/regexp.prototype.flags/CHANGELOG/#v110-2015-08-16","text":"","title":"v1.1.0 - 2015-08-16"},{"location":"node_modules/regexp.prototype.flags/CHANGELOG/#commits_7","text":"Update jscs , eslint ; use my personal shared eslint config. 37ca379 Update eslint , tape , editorconfig-tools , nsp cb92d6e Implement the es-shim API . 15eb821 Refactoring to reduce complexity. aeb4785 Move implementation to implementation.js a698925 Update eslint , jscs 277a4a1 Update nsp , eslint c9f3866 Update tape , eslint a08795b Make some things a bit more robust. 450abb4 Update eslint 25d898f Test on latest two io.js versions. 2e17ca3 All grade A-supported node / iojs versions now ship with an npm that understands ^ . 4a2a548 Update eslint 64df4e0 Update eslint ac05ae5 Clean up supportsDescriptors check. e44d0de [Dev Deps] Update jscs 8741758 Update tape , jscs , nsp , eslint db1f658 Test on io.js v2.3 18c948f Run travis-ci tests on iojs and node v0.12; speed up builds; allow 0.8 failures. c37e79f Update tape , jscs , eslint 4b652bf [Dev Deps] Update tape , eslint 29d4ac0 Test up to io.js v2.1 9f9e342 Update covert , jscs c98f3b4 Update jscs 9e5e220 [Dev Deps] update tape cdd3af2 [Dev Deps] update tape d42d0bf Switch from vb.teelaun.ch to versionbadg.es for the npm version badge SVG. a5e7453 Update tape 2a675ec Test on io.js v2.5 448cbdb Test on io.js v2.4 948e511 Test on io.js v2.2 4793278 Update eslint 0f463da Update eslint 5a16967 Test on io.js v3.0 7ba8706 Test on iojs-v1.2 b521e09","title":"Commits"},{"location":"node_modules/regexp.prototype.flags/CHANGELOG/#v101-2014-12-13","text":"","title":"v1.0.1 - 2014-12-13"},{"location":"node_modules/regexp.prototype.flags/CHANGELOG/#merged","text":"Match the spec properly: throw when not an object; make getter generic. #3","title":"Merged"},{"location":"node_modules/regexp.prototype.flags/CHANGELOG/#fixed","text":"Match the spec properly #1","title":"Fixed"},{"location":"node_modules/regexp.prototype.flags/CHANGELOG/#commits_8","text":"Speed up the \u201cis object\u201d check in case of null or undefined 77137f9","title":"Commits"},{"location":"node_modules/regexp.prototype.flags/CHANGELOG/#v100-2014-12-10","text":"","title":"v1.0.0 - 2014-12-10"},{"location":"node_modules/regexp.prototype.flags/CHANGELOG/#commits_9","text":"Adding dotfiles 313812e Tests 625a042 Add package.json 8b98257 Adding the README 884798b Implementation. 4186cc9 Adding LICENSE and CHANGELOG f87fa81 Fixing README URLs b821703 Clean up dependencies; update tape , jscs , nsp 0e13fc1 Initial commit. 8a9e35e","title":"Commits"},{"location":"node_modules/remark-footnotes/readme/","text":"remark-footnotes remark plugin to add support for footnotes. Important! This plugin is affected by the new parser in remark ( micromark , see remarkjs/remark#536 ). Use version 2 while you\u2019re still on remark 12. Use version 3 for remark 13+. Install npm : npm install remark-footnotes Use Say we have the following file, example.md : Here is a footnote reference,[^1] another,[^longnote], and optionally there are inline notes.^[you can type them inline, which may be easier, since you don\u2019t have to pick an identifier and move down to type the note.] [ ^1 ]: Here is the footnote. [ ^longnote ]: Here\u2019s one with multiple blocks. Subsequent paragraphs are indented to show that they belong to the previous footnote. { some.code } The whole paragraph can be indented, or just the first line. In this way, multi-paragraph footnotes work like multi-paragraph list items. This paragraph won\u2019t be part of the note, because it isn\u2019t indented. And our script, example.js , looks as follows: var vfile = require ( 'to-vfile' ) var unified = require ( 'unified' ) var markdown = require ( 'remark-parse' ) var remark2rehype = require ( 'remark-rehype' ) var format = require ( 'rehype-format' ) var html = require ( 'rehype-stringify' ) var footnotes = require ( 'remark-footnotes' ) unified () . use ( markdown ) . use ( footnotes , { inlineNotes : true }) . use ( remark2rehype ) . use ( format ) . use ( html ) . process ( vfile . readSync ( 'example.md' ), function ( err , file ) { if ( err ) throw err console . log ( String ( file )) }) Now, running node example yields: < p > Here is a footnote reference, < sup id = \"fnref-1\" >< a href = \"#fn-1\" class = \"footnote-ref\" > 1 </ a ></ sup > another, < sup id = \"fnref-longnote\" >< a href = \"#fn-longnote\" class = \"footnote-ref\" > longnote </ a ></ sup > , and optionally there are inline notes. < sup id = \"fnref-2\" >< a href = \"#fn-2\" class = \"footnote-ref\" > 2 </ a ></ sup > </ p > < p > This paragraph won\u2019t be part of the note, because it isn\u2019t indented. </ p > < div class = \"footnotes\" > < hr > < ol > < li id = \"fn-1\" > < p > Here is the footnote. < a href = \"#fnref-1\" class = \"footnote-backref\" > \u21a9 </ a ></ p > </ li > < li id = \"fn-longnote\" > < p > Here\u2019s one with multiple blocks. </ p > < p > Subsequent paragraphs are indented to show that they belong to the previous footnote. </ p > < pre >< code > { some.code } </ code ></ pre > < p > The whole paragraph can be indented, or just the first line. In this way, multi-paragraph footnotes work like multi-paragraph list items. < a href = \"#fnref-longnote\" class = \"footnote-backref\" > \u21a9 </ a > </ p > </ li > < li id = \"fn-2\" > < p > you can type them inline, which may be easier, since you don\u2019t have to pick an identifier and move down to type the note. < a href = \"#fnref-2\" class = \"footnote-backref\" > \u21a9 </ a > </ p > </ li > </ ol > </ div > API remark().use(footnotes[, options]) Plugin to add support for footnotes. options.inlineNotes Whether to support ^[inline notes] ( boolean , default: false ). Passed to micromark-extension-footnote . Notes Labels, such as [^this] (in a footnote reference) or [^this]: (in a footnote definition) work like link references Footnote definitions work like lists Image and link references cannot start with carets, so ![^this doesn\u2019t work][] Security Use of remark-footnotes does not involve rehype ( hast ) or user content so there are no openings for cross-site scripting (XSS) attacks. Related remark-gfm \u2014 GitHub Flavored Markdown remark-frontmatter \u2014 Frontmatter (YAML, TOML, and more) remark-math \u2014 Math remark-github \u2014 Auto-link references like in GitHub issues, PRs, and comments Contribute See contributing.md in remarkjs/.github for ways to get started. See support.md for ways to get help. This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms. License MIT \u00a9 Titus Wormer","title":"remark-footnotes"},{"location":"node_modules/remark-footnotes/readme/#remark-footnotes","text":"remark plugin to add support for footnotes.","title":"remark-footnotes"},{"location":"node_modules/remark-footnotes/readme/#important","text":"This plugin is affected by the new parser in remark ( micromark , see remarkjs/remark#536 ). Use version 2 while you\u2019re still on remark 12. Use version 3 for remark 13+.","title":"Important!"},{"location":"node_modules/remark-footnotes/readme/#install","text":"npm : npm install remark-footnotes","title":"Install"},{"location":"node_modules/remark-footnotes/readme/#use","text":"Say we have the following file, example.md : Here is a footnote reference,[^1] another,[^longnote], and optionally there are inline notes.^[you can type them inline, which may be easier, since you don\u2019t have to pick an identifier and move down to type the note.] [ ^1 ]: Here is the footnote. [ ^longnote ]: Here\u2019s one with multiple blocks. Subsequent paragraphs are indented to show that they belong to the previous footnote. { some.code } The whole paragraph can be indented, or just the first line. In this way, multi-paragraph footnotes work like multi-paragraph list items. This paragraph won\u2019t be part of the note, because it isn\u2019t indented. And our script, example.js , looks as follows: var vfile = require ( 'to-vfile' ) var unified = require ( 'unified' ) var markdown = require ( 'remark-parse' ) var remark2rehype = require ( 'remark-rehype' ) var format = require ( 'rehype-format' ) var html = require ( 'rehype-stringify' ) var footnotes = require ( 'remark-footnotes' ) unified () . use ( markdown ) . use ( footnotes , { inlineNotes : true }) . use ( remark2rehype ) . use ( format ) . use ( html ) . process ( vfile . readSync ( 'example.md' ), function ( err , file ) { if ( err ) throw err console . log ( String ( file )) }) Now, running node example yields: < p > Here is a footnote reference, < sup id = \"fnref-1\" >< a href = \"#fn-1\" class = \"footnote-ref\" > 1 </ a ></ sup > another, < sup id = \"fnref-longnote\" >< a href = \"#fn-longnote\" class = \"footnote-ref\" > longnote </ a ></ sup > , and optionally there are inline notes. < sup id = \"fnref-2\" >< a href = \"#fn-2\" class = \"footnote-ref\" > 2 </ a ></ sup > </ p > < p > This paragraph won\u2019t be part of the note, because it isn\u2019t indented. </ p > < div class = \"footnotes\" > < hr > < ol > < li id = \"fn-1\" > < p > Here is the footnote. < a href = \"#fnref-1\" class = \"footnote-backref\" > \u21a9 </ a ></ p > </ li > < li id = \"fn-longnote\" > < p > Here\u2019s one with multiple blocks. </ p > < p > Subsequent paragraphs are indented to show that they belong to the previous footnote. </ p > < pre >< code > { some.code } </ code ></ pre > < p > The whole paragraph can be indented, or just the first line. In this way, multi-paragraph footnotes work like multi-paragraph list items. < a href = \"#fnref-longnote\" class = \"footnote-backref\" > \u21a9 </ a > </ p > </ li > < li id = \"fn-2\" > < p > you can type them inline, which may be easier, since you don\u2019t have to pick an identifier and move down to type the note. < a href = \"#fnref-2\" class = \"footnote-backref\" > \u21a9 </ a > </ p > </ li > </ ol > </ div >","title":"Use"},{"location":"node_modules/remark-footnotes/readme/#api","text":"","title":"API"},{"location":"node_modules/remark-footnotes/readme/#remarkusefootnotes-options","text":"Plugin to add support for footnotes.","title":"remark().use(footnotes[, options])"},{"location":"node_modules/remark-footnotes/readme/#optionsinlinenotes","text":"Whether to support ^[inline notes] ( boolean , default: false ). Passed to micromark-extension-footnote .","title":"options.inlineNotes"},{"location":"node_modules/remark-footnotes/readme/#notes","text":"Labels, such as [^this] (in a footnote reference) or [^this]: (in a footnote definition) work like link references Footnote definitions work like lists Image and link references cannot start with carets, so ![^this doesn\u2019t work][]","title":"Notes"},{"location":"node_modules/remark-footnotes/readme/#security","text":"Use of remark-footnotes does not involve rehype ( hast ) or user content so there are no openings for cross-site scripting (XSS) attacks.","title":"Security"},{"location":"node_modules/remark-footnotes/readme/#related","text":"remark-gfm \u2014 GitHub Flavored Markdown remark-frontmatter \u2014 Frontmatter (YAML, TOML, and more) remark-math \u2014 Math remark-github \u2014 Auto-link references like in GitHub issues, PRs, and comments","title":"Related"},{"location":"node_modules/remark-footnotes/readme/#contribute","text":"See contributing.md in remarkjs/.github for ways to get started. See support.md for ways to get help. This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms.","title":"Contribute"},{"location":"node_modules/remark-footnotes/readme/#license","text":"MIT \u00a9 Titus Wormer","title":"License"},{"location":"node_modules/remark-frontmatter/readme/","text":"remark-frontmatter remark plugin to support frontmatter (YAML, TOML, and more). Important! This plugin is affected by the new parser in remark ( micromark , see remarkjs/remark#536 ). Use version 2 while you\u2019re still on remark 12. Use version 3 for remark 13+. Install npm : npm install remark-frontmatter Use Say we have the following file, example.md : +++ title = \"New Website\" +++ # Other markdown And our script, example.js , looks as follows: var vfile = require ( 'to-vfile' ) var report = require ( 'vfile-reporter' ) var unified = require ( 'unified' ) var parse = require ( 'remark-parse' ) var stringify = require ( 'remark-stringify' ) var frontmatter = require ( 'remark-frontmatter' ) unified () . use ( parse ) . use ( stringify ) . use ( frontmatter , [ 'yaml' , 'toml' ]) . use ( logger ) . process ( vfile . readSync ( 'example.md' ), function ( err , file ) { console . error ( report ( err || file )) console . log ( String ( file )) }) function logger () { return console . dir } Now, running node example yields: { type : 'root' , children : [ { type : 'toml' , value : 'title = \"New Website\"' , position : [ Object ]}, { type : 'heading' , depth : 1 , children : [ Array ], position : [ Object ]} ], position : { start : { line : 1 , column : 1 , offset : 0 }, end : { line : 6 , column : 1 , offset : 48 } } } example.md: no issues found +++ title = \"New Website\" +++ # Other markdown API remark().use(frontmatter[, options]) Configures remark so that it can parse and serialize frontmatter (YAML, TOML, and more). options See micromark-extension-frontmatter for a description of options . Security Use of remark-frontmatter does not involve rehype ( hast ) or user content so there are no openings for cross-site scripting (XSS) attacks. Related remark-gfm \u2014 GitHub Flavored Markdown remark-footnotes \u2014 Footnotes remark-math \u2014 Math remark-github \u2014 Auto-link references like in GitHub issues, PRs, and comments remark-yaml-config \u2014 Configure remark from YAML configuration Contribute See contributing.md in remarkjs/.github for ways to get started. See support.md for ways to get help. This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms. License MIT \u00a9 Titus Wormer","title":"remark-frontmatter"},{"location":"node_modules/remark-frontmatter/readme/#remark-frontmatter","text":"remark plugin to support frontmatter (YAML, TOML, and more).","title":"remark-frontmatter"},{"location":"node_modules/remark-frontmatter/readme/#important","text":"This plugin is affected by the new parser in remark ( micromark , see remarkjs/remark#536 ). Use version 2 while you\u2019re still on remark 12. Use version 3 for remark 13+.","title":"Important!"},{"location":"node_modules/remark-frontmatter/readme/#install","text":"npm : npm install remark-frontmatter","title":"Install"},{"location":"node_modules/remark-frontmatter/readme/#use","text":"Say we have the following file, example.md : +++ title = \"New Website\" +++ # Other markdown And our script, example.js , looks as follows: var vfile = require ( 'to-vfile' ) var report = require ( 'vfile-reporter' ) var unified = require ( 'unified' ) var parse = require ( 'remark-parse' ) var stringify = require ( 'remark-stringify' ) var frontmatter = require ( 'remark-frontmatter' ) unified () . use ( parse ) . use ( stringify ) . use ( frontmatter , [ 'yaml' , 'toml' ]) . use ( logger ) . process ( vfile . readSync ( 'example.md' ), function ( err , file ) { console . error ( report ( err || file )) console . log ( String ( file )) }) function logger () { return console . dir } Now, running node example yields: { type : 'root' , children : [ { type : 'toml' , value : 'title = \"New Website\"' , position : [ Object ]}, { type : 'heading' , depth : 1 , children : [ Array ], position : [ Object ]} ], position : { start : { line : 1 , column : 1 , offset : 0 }, end : { line : 6 , column : 1 , offset : 48 } } } example.md: no issues found +++ title = \"New Website\" +++ # Other markdown","title":"Use"},{"location":"node_modules/remark-frontmatter/readme/#api","text":"","title":"API"},{"location":"node_modules/remark-frontmatter/readme/#remarkusefrontmatter-options","text":"Configures remark so that it can parse and serialize frontmatter (YAML, TOML, and more).","title":"remark().use(frontmatter[, options])"},{"location":"node_modules/remark-frontmatter/readme/#options","text":"See micromark-extension-frontmatter for a description of options .","title":"options"},{"location":"node_modules/remark-frontmatter/readme/#security","text":"Use of remark-frontmatter does not involve rehype ( hast ) or user content so there are no openings for cross-site scripting (XSS) attacks.","title":"Security"},{"location":"node_modules/remark-frontmatter/readme/#related","text":"remark-gfm \u2014 GitHub Flavored Markdown remark-footnotes \u2014 Footnotes remark-math \u2014 Math remark-github \u2014 Auto-link references like in GitHub issues, PRs, and comments remark-yaml-config \u2014 Configure remark from YAML configuration","title":"Related"},{"location":"node_modules/remark-frontmatter/readme/#contribute","text":"See contributing.md in remarkjs/.github for ways to get started. See support.md for ways to get help. This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms.","title":"Contribute"},{"location":"node_modules/remark-frontmatter/readme/#license","text":"MIT \u00a9 Titus Wormer","title":"License"},{"location":"node_modules/remark-gfm/readme/","text":"remark-gfm remark plugin to support GitHub Flavored Markdown . Important! This plugin is made for the new parser in remark ( micromark , see remarkjs/remark#536 ). While you\u2019re still on remark 12, use the gfm option for remark. Use this plugin for remark 13+. Install npm : npm install remark-gfm Use Say we have the following file, example.md : # GFM ## Autolink literals www.example.com, https://example.com, and contact@example.com. ## Strikethrough ~one~ or ~~two~~ tildes. ## Table | a | b | c | d | | - | :- | -: | :-: | ## Tasklist * [ ] to do * [x] done And our script, example.js , looks as follows: var vfile = require ( 'to-vfile' ) var report = require ( 'vfile-reporter' ) var unified = require ( 'unified' ) var parse = require ( 'remark-parse' ) var gfm = require ( 'remark-gfm' ) var remark2rehype = require ( 'remark-rehype' ) var stringify = require ( 'rehype-stringify' ) unified () . use ( parse ) . use ( gfm ) . use ( remark2rehype ) . use ( stringify ) . process ( vfile . readSync ( 'example.md' ), function ( err , file ) { console . error ( report ( err || file )) console . log ( String ( file )) }) Now, running node example yields: example.md: no issues found < h1 > GFM </ h1 > < h2 > Autolink literals </ h2 > < p >< a href = \"http://www.example.com\" > www.example.com </ a > , < a href = \"https://example.com\" > https://example.com </ a > , and < a href = \"mailto:contact@example.com\" > contact@example.com </ a > . </ p > < h2 > Strikethrough </ h2 > < p >< del > one </ del > or < del > two </ del > tildes. </ p > < h2 > Table </ h2 > < table > < thead > < tr > < th > a </ th > < th align = \"left\" > b </ th > < th align = \"right\" > c </ th > < th align = \"center\" > d </ th > </ tr > </ thead > </ table > < h2 > Tasklist </ h2 > < ul class = \"contains-task-list\" > < li class = \"task-list-item\" >< input type = \"checkbox\" disabled > to do </ li > < li class = \"task-list-item\" >< input type = \"checkbox\" checked disabled > done </ li > </ ul > API remark().use(gfm[, options]) Configures remark so that it can parse and serialize GFM (autolink literals, strikethrough, tables, tasklists). options options.singleTilde Whether to support strikethrough with a single tilde ( boolean , default: true ). Single tildes work on github.com, but are technically prohibited by the GFM spec. Passed as singleTilde to micromark-extension-gfm-strikethrough . options.tableCellPadding Create tables with a space between cell delimiters ( | ) and content ( boolean , default: true ). Passed to mdast-util-gfm-table . options.tablePipeAlign Align the delimiters ( | ) between table cells so that they all align nicely and form a grid ( boolean , default: true ). Passed to mdast-util-gfm-table . options.stringLength Function passed to markdown-table to detect the length of a table cell ( Function , default: s => s.length ). Used to align table cells. Passed to mdast-util-gfm-table . Security Use of remark-gfm does not involve rehype ( hast ) or user content so there are no openings for cross-site scripting (XSS) attacks. Related remark-github \u2014 Autolink references like in GitHub issues, PRs, and comments remark-footnotes \u2014 Footnotes remark-frontmatter \u2014 Frontmatter (YAML, TOML, and more) remark-math \u2014 Math Contribute See contributing.md in remarkjs/.github for ways to get started. See support.md for ways to get help. This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms. License MIT \u00a9 Titus Wormer","title":"remark-gfm"},{"location":"node_modules/remark-gfm/readme/#remark-gfm","text":"remark plugin to support GitHub Flavored Markdown .","title":"remark-gfm"},{"location":"node_modules/remark-gfm/readme/#important","text":"This plugin is made for the new parser in remark ( micromark , see remarkjs/remark#536 ). While you\u2019re still on remark 12, use the gfm option for remark. Use this plugin for remark 13+.","title":"Important!"},{"location":"node_modules/remark-gfm/readme/#install","text":"npm : npm install remark-gfm","title":"Install"},{"location":"node_modules/remark-gfm/readme/#use","text":"Say we have the following file, example.md : # GFM ## Autolink literals www.example.com, https://example.com, and contact@example.com. ## Strikethrough ~one~ or ~~two~~ tildes. ## Table | a | b | c | d | | - | :- | -: | :-: | ## Tasklist * [ ] to do * [x] done And our script, example.js , looks as follows: var vfile = require ( 'to-vfile' ) var report = require ( 'vfile-reporter' ) var unified = require ( 'unified' ) var parse = require ( 'remark-parse' ) var gfm = require ( 'remark-gfm' ) var remark2rehype = require ( 'remark-rehype' ) var stringify = require ( 'rehype-stringify' ) unified () . use ( parse ) . use ( gfm ) . use ( remark2rehype ) . use ( stringify ) . process ( vfile . readSync ( 'example.md' ), function ( err , file ) { console . error ( report ( err || file )) console . log ( String ( file )) }) Now, running node example yields: example.md: no issues found < h1 > GFM </ h1 > < h2 > Autolink literals </ h2 > < p >< a href = \"http://www.example.com\" > www.example.com </ a > , < a href = \"https://example.com\" > https://example.com </ a > , and < a href = \"mailto:contact@example.com\" > contact@example.com </ a > . </ p > < h2 > Strikethrough </ h2 > < p >< del > one </ del > or < del > two </ del > tildes. </ p > < h2 > Table </ h2 > < table > < thead > < tr > < th > a </ th > < th align = \"left\" > b </ th > < th align = \"right\" > c </ th > < th align = \"center\" > d </ th > </ tr > </ thead > </ table > < h2 > Tasklist </ h2 > < ul class = \"contains-task-list\" > < li class = \"task-list-item\" >< input type = \"checkbox\" disabled > to do </ li > < li class = \"task-list-item\" >< input type = \"checkbox\" checked disabled > done </ li > </ ul >","title":"Use"},{"location":"node_modules/remark-gfm/readme/#api","text":"","title":"API"},{"location":"node_modules/remark-gfm/readme/#remarkusegfm-options","text":"Configures remark so that it can parse and serialize GFM (autolink literals, strikethrough, tables, tasklists).","title":"remark().use(gfm[, options])"},{"location":"node_modules/remark-gfm/readme/#options","text":"","title":"options"},{"location":"node_modules/remark-gfm/readme/#optionssingletilde","text":"Whether to support strikethrough with a single tilde ( boolean , default: true ). Single tildes work on github.com, but are technically prohibited by the GFM spec. Passed as singleTilde to micromark-extension-gfm-strikethrough .","title":"options.singleTilde"},{"location":"node_modules/remark-gfm/readme/#optionstablecellpadding","text":"Create tables with a space between cell delimiters ( | ) and content ( boolean , default: true ). Passed to mdast-util-gfm-table .","title":"options.tableCellPadding"},{"location":"node_modules/remark-gfm/readme/#optionstablepipealign","text":"Align the delimiters ( | ) between table cells so that they all align nicely and form a grid ( boolean , default: true ). Passed to mdast-util-gfm-table .","title":"options.tablePipeAlign"},{"location":"node_modules/remark-gfm/readme/#optionsstringlength","text":"Function passed to markdown-table to detect the length of a table cell ( Function , default: s => s.length ). Used to align table cells. Passed to mdast-util-gfm-table .","title":"options.stringLength"},{"location":"node_modules/remark-gfm/readme/#security","text":"Use of remark-gfm does not involve rehype ( hast ) or user content so there are no openings for cross-site scripting (XSS) attacks.","title":"Security"},{"location":"node_modules/remark-gfm/readme/#related","text":"remark-github \u2014 Autolink references like in GitHub issues, PRs, and comments remark-footnotes \u2014 Footnotes remark-frontmatter \u2014 Frontmatter (YAML, TOML, and more) remark-math \u2014 Math","title":"Related"},{"location":"node_modules/remark-gfm/readme/#contribute","text":"See contributing.md in remarkjs/.github for ways to get started. See support.md for ways to get help. This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms.","title":"Contribute"},{"location":"node_modules/remark-gfm/readme/#license","text":"MIT \u00a9 Titus Wormer","title":"License"},{"location":"node_modules/remark-parse/readme/","text":"remark-parse Parser for unified . Parses Markdown to mdast syntax trees. Built on micromark and mdast-util-from-markdown . Used in the remark processor but can be used on its own as well. Can be extended to change how Markdown is parsed. Install npm : npm install remark-parse Use var unified = require ( 'unified' ) var createStream = require ( 'unified-stream' ) var markdown = require ( 'remark-parse' ) var remark2rehype = require ( 'remark-rehype' ) var html = require ( 'rehype-stringify' ) var processor = unified (). use ( markdown ). use ( remark2rehype ). use ( html ) process . stdin . pipe ( createStream ( processor )). pipe ( process . stdout ) See unified for more examples \u00bb API See unified for API docs \u00bb processor().use(parse) Configure the processor to read Markdown as input and process mdast syntax trees. Extending the parser See micromark and mdast-util-from-markdown . Then create a wrapper plugin such as remark-gfm . Security As Markdown is sometimes used for HTML, and improper use of HTML can open you up to a cross-site scripting (XSS) attack, use of remark can also be unsafe. When going to HTML, use remark in combination with the rehype ecosystem, and use rehype-sanitize to make the tree safe. Use of remark plugins could also open you up to other attacks. Carefully assess each plugin and the risks involved in using them. Contribute See contributing.md in remarkjs/.github for ways to get started. See support.md for ways to get help. Ideas for new plugins and tools can be posted in remarkjs/ideas . A curated list of awesome remark resources can be found in awesome remark . This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms. Sponsor Support this effort and give back by sponsoring on OpenCollective ! Gatsby \ud83e\udd47 Vercel \ud83e\udd47 Netlify Holloway ThemeIsle Boost Hub Expo You? License MIT \u00a9 Titus Wormer","title":"remark-parse"},{"location":"node_modules/remark-parse/readme/#remark-parse","text":"Parser for unified . Parses Markdown to mdast syntax trees. Built on micromark and mdast-util-from-markdown . Used in the remark processor but can be used on its own as well. Can be extended to change how Markdown is parsed.","title":"remark-parse"},{"location":"node_modules/remark-parse/readme/#install","text":"npm : npm install remark-parse","title":"Install"},{"location":"node_modules/remark-parse/readme/#use","text":"var unified = require ( 'unified' ) var createStream = require ( 'unified-stream' ) var markdown = require ( 'remark-parse' ) var remark2rehype = require ( 'remark-rehype' ) var html = require ( 'rehype-stringify' ) var processor = unified (). use ( markdown ). use ( remark2rehype ). use ( html ) process . stdin . pipe ( createStream ( processor )). pipe ( process . stdout ) See unified for more examples \u00bb","title":"Use"},{"location":"node_modules/remark-parse/readme/#api","text":"See unified for API docs \u00bb","title":"API"},{"location":"node_modules/remark-parse/readme/#processoruseparse","text":"Configure the processor to read Markdown as input and process mdast syntax trees.","title":"processor().use(parse)"},{"location":"node_modules/remark-parse/readme/#extending-the-parser","text":"See micromark and mdast-util-from-markdown . Then create a wrapper plugin such as remark-gfm .","title":"Extending the parser"},{"location":"node_modules/remark-parse/readme/#security","text":"As Markdown is sometimes used for HTML, and improper use of HTML can open you up to a cross-site scripting (XSS) attack, use of remark can also be unsafe. When going to HTML, use remark in combination with the rehype ecosystem, and use rehype-sanitize to make the tree safe. Use of remark plugins could also open you up to other attacks. Carefully assess each plugin and the risks involved in using them.","title":"Security"},{"location":"node_modules/remark-parse/readme/#contribute","text":"See contributing.md in remarkjs/.github for ways to get started. See support.md for ways to get help. Ideas for new plugins and tools can be posted in remarkjs/ideas . A curated list of awesome remark resources can be found in awesome remark . This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms.","title":"Contribute"},{"location":"node_modules/remark-parse/readme/#sponsor","text":"Support this effort and give back by sponsoring on OpenCollective ! Gatsby \ud83e\udd47 Vercel \ud83e\udd47 Netlify Holloway ThemeIsle Boost Hub Expo You?","title":"Sponsor"},{"location":"node_modules/remark-parse/readme/#license","text":"MIT \u00a9 Titus Wormer","title":"License"},{"location":"node_modules/repeat-string/","text":"repeat-string Repeat the given string n times. Fastest implementation for repeating a string. Install Install with npm : $ npm install --save repeat-string Usage repeat Repeat the given string the specified number of times. Example: Example var repeat = require ( 'repeat-string' ); repeat ( 'A' , 5 ); //=> AAAAA Params string {String} : The string to repeat number {Number} : The number of times to repeat the string returns {String} : Repeated string Benchmarks Repeat string is significantly faster than the native method (which is itself faster than repeating ): # 2x repeat-string \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 ( 26 ,953,977 ops/sec ) repeating \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 ( 9 ,855,695 ops/sec ) native \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 ( 19 ,453,895 ops/sec ) # 3x repeat-string \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 ( 19 ,445,252 ops/sec ) repeating \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 ( 8 ,661,565 ops/sec ) native \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 ( 16 ,020,598 ops/sec ) # 10x repeat-string \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 ( 23 ,792,521 ops/sec ) repeating \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 ( 8 ,571,332 ops/sec ) native \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 ( 14 ,582,955 ops/sec ) # 50x repeat-string \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 ( 23 ,640,179 ops/sec ) repeating \u2588\u2588\u2588\u2588\u2588 ( 5 ,505,509 ops/sec ) native \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 ( 10 ,085,557 ops/sec ) # 250x repeat-string \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 ( 23 ,489,618 ops/sec ) repeating \u2588\u2588\u2588\u2588 ( 3 ,962,937 ops/sec ) native \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 ( 7 ,724,892 ops/sec ) # 2000x repeat-string \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 ( 20 ,315,172 ops/sec ) repeating \u2588\u2588\u2588\u2588 ( 3 ,297,079 ops/sec ) native \u2588\u2588\u2588\u2588\u2588\u2588\u2588 ( 6 ,203,331 ops/sec ) # 20000x repeat-string \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 ( 23 ,382,915 ops/sec ) repeating \u2588\u2588\u2588 ( 2 ,980,058 ops/sec ) native \u2588\u2588\u2588\u2588\u2588 ( 5 ,578,808 ops/sec ) Run the benchmarks Install dev dependencies: npm i -d && node benchmark About Related projects repeat-element : Create an array by repeating the given value n times. | homepage Contributing Pull requests and stars are always welcome. For bugs and feature requests, please create an issue . Contributors Commits Contributor 51 jonschlinkert 2 LinusU 2 tbusser 1 doowb 1 wooorm Building docs (This document was generated by verb-generate-readme (a verb generator), please don't edit the readme directly. Any changes to the readme must be made in .verb.md .) To generate the readme and API documentation with verb : $ npm install -g verb verb-generate-readme && verb Running tests Install dev dependencies: $ npm install -d && npm test Author Jon Schlinkert github/jonschlinkert twitter/jonschlinkert License Copyright \u00a9 2016, Jon Schlinkert . Released under the MIT license . This file was generated by verb-generate-readme , v0.2.0, on October 23, 2016.","title":"repeat-string [![NPM version](https://img.shields.io/npm/v/repeat-string.svg?style=flat)](https://www.npmjs.com/package/repeat-string) [![NPM monthly downloads](https://img.shields.io/npm/dm/repeat-string.svg?style=flat)](https://npmjs.org/package/repeat-string)  [![NPM total downloads](https://img.shields.io/npm/dt/repeat-string.svg?style=flat)](https://npmjs.org/package/repeat-string) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/repeat-string.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/repeat-string)"},{"location":"node_modules/repeat-string/#repeat-string","text":"Repeat the given string n times. Fastest implementation for repeating a string.","title":"repeat-string"},{"location":"node_modules/repeat-string/#install","text":"Install with npm : $ npm install --save repeat-string","title":"Install"},{"location":"node_modules/repeat-string/#usage","text":"","title":"Usage"},{"location":"node_modules/repeat-string/#repeat","text":"Repeat the given string the specified number of times. Example: Example var repeat = require ( 'repeat-string' ); repeat ( 'A' , 5 ); //=> AAAAA Params string {String} : The string to repeat number {Number} : The number of times to repeat the string returns {String} : Repeated string","title":"repeat"},{"location":"node_modules/repeat-string/#benchmarks","text":"Repeat string is significantly faster than the native method (which is itself faster than repeating ): # 2x repeat-string \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 ( 26 ,953,977 ops/sec ) repeating \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 ( 9 ,855,695 ops/sec ) native \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 ( 19 ,453,895 ops/sec ) # 3x repeat-string \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 ( 19 ,445,252 ops/sec ) repeating \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 ( 8 ,661,565 ops/sec ) native \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 ( 16 ,020,598 ops/sec ) # 10x repeat-string \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 ( 23 ,792,521 ops/sec ) repeating \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 ( 8 ,571,332 ops/sec ) native \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 ( 14 ,582,955 ops/sec ) # 50x repeat-string \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 ( 23 ,640,179 ops/sec ) repeating \u2588\u2588\u2588\u2588\u2588 ( 5 ,505,509 ops/sec ) native \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 ( 10 ,085,557 ops/sec ) # 250x repeat-string \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 ( 23 ,489,618 ops/sec ) repeating \u2588\u2588\u2588\u2588 ( 3 ,962,937 ops/sec ) native \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 ( 7 ,724,892 ops/sec ) # 2000x repeat-string \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 ( 20 ,315,172 ops/sec ) repeating \u2588\u2588\u2588\u2588 ( 3 ,297,079 ops/sec ) native \u2588\u2588\u2588\u2588\u2588\u2588\u2588 ( 6 ,203,331 ops/sec ) # 20000x repeat-string \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 ( 23 ,382,915 ops/sec ) repeating \u2588\u2588\u2588 ( 2 ,980,058 ops/sec ) native \u2588\u2588\u2588\u2588\u2588 ( 5 ,578,808 ops/sec ) Run the benchmarks Install dev dependencies: npm i -d && node benchmark","title":"Benchmarks"},{"location":"node_modules/repeat-string/#about","text":"","title":"About"},{"location":"node_modules/repeat-string/#related-projects","text":"repeat-element : Create an array by repeating the given value n times. | homepage","title":"Related projects"},{"location":"node_modules/repeat-string/#contributing","text":"Pull requests and stars are always welcome. For bugs and feature requests, please create an issue .","title":"Contributing"},{"location":"node_modules/repeat-string/#contributors","text":"Commits Contributor 51 jonschlinkert 2 LinusU 2 tbusser 1 doowb 1 wooorm","title":"Contributors"},{"location":"node_modules/repeat-string/#building-docs","text":"(This document was generated by verb-generate-readme (a verb generator), please don't edit the readme directly. Any changes to the readme must be made in .verb.md .) To generate the readme and API documentation with verb : $ npm install -g verb verb-generate-readme && verb","title":"Building docs"},{"location":"node_modules/repeat-string/#running-tests","text":"Install dev dependencies: $ npm install -d && npm test","title":"Running tests"},{"location":"node_modules/repeat-string/#author","text":"Jon Schlinkert github/jonschlinkert twitter/jonschlinkert","title":"Author"},{"location":"node_modules/repeat-string/#license","text":"Copyright \u00a9 2016, Jon Schlinkert . Released under the MIT license . This file was generated by verb-generate-readme , v0.2.0, on October 23, 2016.","title":"License"},{"location":"node_modules/require-from-string/readme/","text":"require-from-string Load module from string in Node. Install $ npm install --save require-from-string Usage var requireFromString = require ( 'require-from-string' ); requireFromString ( 'module.exports = 1' ); //=> 1 API requireFromString(code, [filename], [options]) code Required Type: string Module code. filename Type: string Default: '' Optional filename. options Type: object appendPaths Type: Array List of paths , that will be appended to module paths . Useful, when you want to be able require modules from these paths. prependPaths Type: Array Same as appendPaths , but paths will be prepended. License MIT \u00a9 Vsevolod Strukchinsky","title":"require-from-string [![Build Status](https://travis-ci.org/floatdrop/require-from-string.svg?branch=master)](https://travis-ci.org/floatdrop/require-from-string)"},{"location":"node_modules/require-from-string/readme/#require-from-string","text":"Load module from string in Node.","title":"require-from-string"},{"location":"node_modules/require-from-string/readme/#install","text":"$ npm install --save require-from-string","title":"Install"},{"location":"node_modules/require-from-string/readme/#usage","text":"var requireFromString = require ( 'require-from-string' ); requireFromString ( 'module.exports = 1' ); //=> 1","title":"Usage"},{"location":"node_modules/require-from-string/readme/#api","text":"","title":"API"},{"location":"node_modules/require-from-string/readme/#requirefromstringcode-filename-options","text":"","title":"requireFromString(code, [filename], [options])"},{"location":"node_modules/require-from-string/readme/#code","text":"Required Type: string Module code.","title":"code"},{"location":"node_modules/require-from-string/readme/#filename","text":"Type: string Default: '' Optional filename.","title":"filename"},{"location":"node_modules/require-from-string/readme/#options","text":"Type: object","title":"options"},{"location":"node_modules/require-from-string/readme/#appendpaths","text":"Type: Array List of paths , that will be appended to module paths . Useful, when you want to be able require modules from these paths.","title":"appendPaths"},{"location":"node_modules/require-from-string/readme/#prependpaths","text":"Type: Array Same as appendPaths , but paths will be prepended.","title":"prependPaths"},{"location":"node_modules/require-from-string/readme/#license","text":"MIT \u00a9 Vsevolod Strukchinsky","title":"License"},{"location":"node_modules/resolve/SECURITY/","text":"Security Please email @ljharb or see https://tidelift.com/security if you have a potential security vulnerability to report.","title":"Security"},{"location":"node_modules/resolve/SECURITY/#security","text":"Please email @ljharb or see https://tidelift.com/security if you have a potential security vulnerability to report.","title":"Security"},{"location":"node_modules/resolve/readme/","text":"resolve implements the node require.resolve() algorithm such that you can require.resolve() on behalf of a file asynchronously and synchronously example asynchronously resolve: var resolve = require ( 'resolve/async' ); // or, require('resolve') resolve ( 'tap' , { basedir : __dirname }, function ( err , res ) { if ( err ) console . error ( err ); else console . log ( res ); }); $ node example/async.js /home/substack/projects/node-resolve/node_modules/tap/lib/main.js synchronously resolve: var resolve = require ( 'resolve/sync' ); // or, `require('resolve').sync var res = resolve ( 'tap' , { basedir : __dirname }); console . log ( res ); $ node example/sync.js /home/substack/projects/node-resolve/node_modules/tap/lib/main.js methods var resolve = require ( 'resolve' ); var async = require ( 'resolve/async' ); var sync = require ( 'resolve/sync' ); For both the synchronous and asynchronous methods, errors may have any of the following err.code values: MODULE_NOT_FOUND : the given path string ( id ) could not be resolved to a module INVALID_BASEDIR : the specified opts.basedir doesn't exist, or is not a directory INVALID_PACKAGE_MAIN : a package.json was encountered with an invalid main property (eg. not a string) resolve(id, opts={}, cb) Asynchronously resolve the module path string id into cb(err, res [, pkg]) , where pkg (if defined) is the data from package.json . options are: opts.basedir - directory to begin resolving from opts.package - package.json data applicable to the module being loaded opts.extensions - array of file extensions to search in order opts.includeCoreModules - set to false to exclude node core modules (e.g. fs ) from the search opts.readFile - how to read files asynchronously opts.isFile - function to asynchronously test whether a file exists opts.isDirectory - function to asynchronously test whether a file exists and is a directory opts.realpath - function to asynchronously resolve a potential symlink to its real path opts.readPackage(readFile, pkgfile, cb) - function to asynchronously read and parse a package.json file readFile - the passed opts.readFile or fs.readFile if not specified pkgfile - path to package.json cb - callback opts.packageFilter(pkg, pkgfile, dir) - transform the parsed package.json contents before looking at the \"main\" field pkg - package data pkgfile - path to package.json dir - directory that contains package.json opts.pathFilter(pkg, path, relativePath) - transform a path within a package pkg - package data path - the path being resolved relativePath - the path relative from the package.json location returns - a relative path that will be joined from the package.json location opts.paths - require.paths array to use if nothing is found on the normal node_modules recursive walk (probably don't use this) For advanced users, paths can also be a opts.paths(request, start, opts) function * request - the import specifier being resolved * start - lookup path * getNodeModulesDirs - a thunk (no-argument function) that returns the paths using standard node_modules resolution * opts - the resolution options opts.packageIterator(request, start, opts) - return the list of candidate paths where the packages sources may be found (probably don't use this) request - the import specifier being resolved start - lookup path getPackageCandidates - a thunk (no-argument function) that returns the paths using standard node_modules resolution opts - the resolution options opts.moduleDirectory - directory (or directories) in which to recursively look for modules. default: \"node_modules\" opts.preserveSymlinks - if true, doesn't resolve basedir to real path before resolving. This is the way Node resolves dependencies when executed with the --preserve-symlinks flag. Note: this property is currently true by default but it will be changed to false in the next major version because Node's resolution algorithm does not preserve symlinks by default . default opts values: { paths : [], basedir : __dirname , extensions : [ '.js' ], includeCoreModules : true , readFile : fs . readFile , isFile : function isFile ( file , cb ) { fs . stat ( file , function ( err , stat ) { if ( ! err ) { return cb ( null , stat . isFile () || stat . isFIFO ()); } if ( err . code === 'ENOENT' || err . code === 'ENOTDIR' ) return cb ( null , false ); return cb ( err ); }); }, isDirectory : function isDirectory ( dir , cb ) { fs . stat ( dir , function ( err , stat ) { if ( ! err ) { return cb ( null , stat . isDirectory ()); } if ( err . code === 'ENOENT' || err . code === 'ENOTDIR' ) return cb ( null , false ); return cb ( err ); }); }, realpath : function realpath ( file , cb ) { var realpath = typeof fs . realpath . native === 'function' ? fs . realpath . native : fs . realpath ; realpath ( file , function ( realPathErr , realPath ) { if ( realPathErr && realPathErr . code !== 'ENOENT' ) cb ( realPathErr ); else cb ( null , realPathErr ? file : realPath ); }); }, readPackage : function defaultReadPackage ( readFile , pkgfile , cb ) { readFile ( pkgfile , function ( readFileErr , body ) { if ( readFileErr ) cb ( readFileErr ); else { try { var pkg = JSON . parse ( body ); cb ( null , pkg ); } catch ( jsonErr ) { cb ( null ); } } }); }, moduleDirectory : 'node_modules' , preserveSymlinks : true } resolve.sync(id, opts) Synchronously resolve the module path string id , returning the result and throwing an error when id can't be resolved. options are: opts.basedir - directory to begin resolving from opts.extensions - array of file extensions to search in order opts.includeCoreModules - set to false to exclude node core modules (e.g. fs ) from the search opts.readFileSync - how to read files synchronously opts.isFile - function to synchronously test whether a file exists opts.isDirectory - function to synchronously test whether a file exists and is a directory opts.realpathSync - function to synchronously resolve a potential symlink to its real path opts.readPackageSync(readFileSync, pkgfile) - function to synchronously read and parse a package.json file readFileSync - the passed opts.readFileSync or fs.readFileSync if not specified pkgfile - path to package.json opts.packageFilter(pkg, dir) - transform the parsed package.json contents before looking at the \"main\" field pkg - package data dir - directory that contains package.json (Note: the second argument will change to \"pkgfile\" in v2) opts.pathFilter(pkg, path, relativePath) - transform a path within a package pkg - package data path - the path being resolved relativePath - the path relative from the package.json location returns - a relative path that will be joined from the package.json location opts.paths - require.paths array to use if nothing is found on the normal node_modules recursive walk (probably don't use this) For advanced users, paths can also be a opts.paths(request, start, opts) function * request - the import specifier being resolved * start - lookup path * getNodeModulesDirs - a thunk (no-argument function) that returns the paths using standard node_modules resolution * opts - the resolution options opts.packageIterator(request, start, opts) - return the list of candidate paths where the packages sources may be found (probably don't use this) request - the import specifier being resolved start - lookup path getPackageCandidates - a thunk (no-argument function) that returns the paths using standard node_modules resolution opts - the resolution options opts.moduleDirectory - directory (or directories) in which to recursively look for modules. default: \"node_modules\" opts.preserveSymlinks - if true, doesn't resolve basedir to real path before resolving. This is the way Node resolves dependencies when executed with the --preserve-symlinks flag. Note: this property is currently true by default but it will be changed to false in the next major version because Node's resolution algorithm does not preserve symlinks by default . default opts values: { paths : [], basedir : __dirname , extensions : [ '.js' ], includeCoreModules : true , readFileSync : fs . readFileSync , isFile : function isFile ( file ) { try { var stat = fs . statSync ( file ); } catch ( e ) { if ( e && ( e . code === 'ENOENT' || e . code === 'ENOTDIR' )) return false ; throw e ; } return stat . isFile () || stat . isFIFO (); }, isDirectory : function isDirectory ( dir ) { try { var stat = fs . statSync ( dir ); } catch ( e ) { if ( e && ( e . code === 'ENOENT' || e . code === 'ENOTDIR' )) return false ; throw e ; } return stat . isDirectory (); }, realpathSync : function realpathSync ( file ) { try { var realpath = typeof fs . realpathSync . native === 'function' ? fs . realpathSync . native : fs . realpathSync ; return realpath ( file ); } catch ( realPathErr ) { if ( realPathErr . code !== 'ENOENT' ) { throw realPathErr ; } } return file ; }, readPackageSync : function defaultReadPackageSync ( readFileSync , pkgfile ) { var body = readFileSync ( pkgfile ); try { var pkg = JSON . parse ( body ); return pkg ; } catch ( jsonErr ) {} }, moduleDirectory : 'node_modules' , preserveSymlinks : true } install With npm do: npm install resolve license MIT","title":"resolve <sup>[![Version Badge][2]][1]</sup>"},{"location":"node_modules/resolve/readme/#resolve","text":"implements the node require.resolve() algorithm such that you can require.resolve() on behalf of a file asynchronously and synchronously","title":"resolve "},{"location":"node_modules/resolve/readme/#example","text":"asynchronously resolve: var resolve = require ( 'resolve/async' ); // or, require('resolve') resolve ( 'tap' , { basedir : __dirname }, function ( err , res ) { if ( err ) console . error ( err ); else console . log ( res ); }); $ node example/async.js /home/substack/projects/node-resolve/node_modules/tap/lib/main.js synchronously resolve: var resolve = require ( 'resolve/sync' ); // or, `require('resolve').sync var res = resolve ( 'tap' , { basedir : __dirname }); console . log ( res ); $ node example/sync.js /home/substack/projects/node-resolve/node_modules/tap/lib/main.js","title":"example"},{"location":"node_modules/resolve/readme/#methods","text":"var resolve = require ( 'resolve' ); var async = require ( 'resolve/async' ); var sync = require ( 'resolve/sync' ); For both the synchronous and asynchronous methods, errors may have any of the following err.code values: MODULE_NOT_FOUND : the given path string ( id ) could not be resolved to a module INVALID_BASEDIR : the specified opts.basedir doesn't exist, or is not a directory INVALID_PACKAGE_MAIN : a package.json was encountered with an invalid main property (eg. not a string)","title":"methods"},{"location":"node_modules/resolve/readme/#resolveid-opts-cb","text":"Asynchronously resolve the module path string id into cb(err, res [, pkg]) , where pkg (if defined) is the data from package.json . options are: opts.basedir - directory to begin resolving from opts.package - package.json data applicable to the module being loaded opts.extensions - array of file extensions to search in order opts.includeCoreModules - set to false to exclude node core modules (e.g. fs ) from the search opts.readFile - how to read files asynchronously opts.isFile - function to asynchronously test whether a file exists opts.isDirectory - function to asynchronously test whether a file exists and is a directory opts.realpath - function to asynchronously resolve a potential symlink to its real path opts.readPackage(readFile, pkgfile, cb) - function to asynchronously read and parse a package.json file readFile - the passed opts.readFile or fs.readFile if not specified pkgfile - path to package.json cb - callback opts.packageFilter(pkg, pkgfile, dir) - transform the parsed package.json contents before looking at the \"main\" field pkg - package data pkgfile - path to package.json dir - directory that contains package.json opts.pathFilter(pkg, path, relativePath) - transform a path within a package pkg - package data path - the path being resolved relativePath - the path relative from the package.json location returns - a relative path that will be joined from the package.json location opts.paths - require.paths array to use if nothing is found on the normal node_modules recursive walk (probably don't use this) For advanced users, paths can also be a opts.paths(request, start, opts) function * request - the import specifier being resolved * start - lookup path * getNodeModulesDirs - a thunk (no-argument function) that returns the paths using standard node_modules resolution * opts - the resolution options opts.packageIterator(request, start, opts) - return the list of candidate paths where the packages sources may be found (probably don't use this) request - the import specifier being resolved start - lookup path getPackageCandidates - a thunk (no-argument function) that returns the paths using standard node_modules resolution opts - the resolution options opts.moduleDirectory - directory (or directories) in which to recursively look for modules. default: \"node_modules\" opts.preserveSymlinks - if true, doesn't resolve basedir to real path before resolving. This is the way Node resolves dependencies when executed with the --preserve-symlinks flag. Note: this property is currently true by default but it will be changed to false in the next major version because Node's resolution algorithm does not preserve symlinks by default . default opts values: { paths : [], basedir : __dirname , extensions : [ '.js' ], includeCoreModules : true , readFile : fs . readFile , isFile : function isFile ( file , cb ) { fs . stat ( file , function ( err , stat ) { if ( ! err ) { return cb ( null , stat . isFile () || stat . isFIFO ()); } if ( err . code === 'ENOENT' || err . code === 'ENOTDIR' ) return cb ( null , false ); return cb ( err ); }); }, isDirectory : function isDirectory ( dir , cb ) { fs . stat ( dir , function ( err , stat ) { if ( ! err ) { return cb ( null , stat . isDirectory ()); } if ( err . code === 'ENOENT' || err . code === 'ENOTDIR' ) return cb ( null , false ); return cb ( err ); }); }, realpath : function realpath ( file , cb ) { var realpath = typeof fs . realpath . native === 'function' ? fs . realpath . native : fs . realpath ; realpath ( file , function ( realPathErr , realPath ) { if ( realPathErr && realPathErr . code !== 'ENOENT' ) cb ( realPathErr ); else cb ( null , realPathErr ? file : realPath ); }); }, readPackage : function defaultReadPackage ( readFile , pkgfile , cb ) { readFile ( pkgfile , function ( readFileErr , body ) { if ( readFileErr ) cb ( readFileErr ); else { try { var pkg = JSON . parse ( body ); cb ( null , pkg ); } catch ( jsonErr ) { cb ( null ); } } }); }, moduleDirectory : 'node_modules' , preserveSymlinks : true }","title":"resolve(id, opts={}, cb)"},{"location":"node_modules/resolve/readme/#resolvesyncid-opts","text":"Synchronously resolve the module path string id , returning the result and throwing an error when id can't be resolved. options are: opts.basedir - directory to begin resolving from opts.extensions - array of file extensions to search in order opts.includeCoreModules - set to false to exclude node core modules (e.g. fs ) from the search opts.readFileSync - how to read files synchronously opts.isFile - function to synchronously test whether a file exists opts.isDirectory - function to synchronously test whether a file exists and is a directory opts.realpathSync - function to synchronously resolve a potential symlink to its real path opts.readPackageSync(readFileSync, pkgfile) - function to synchronously read and parse a package.json file readFileSync - the passed opts.readFileSync or fs.readFileSync if not specified pkgfile - path to package.json opts.packageFilter(pkg, dir) - transform the parsed package.json contents before looking at the \"main\" field pkg - package data dir - directory that contains package.json (Note: the second argument will change to \"pkgfile\" in v2) opts.pathFilter(pkg, path, relativePath) - transform a path within a package pkg - package data path - the path being resolved relativePath - the path relative from the package.json location returns - a relative path that will be joined from the package.json location opts.paths - require.paths array to use if nothing is found on the normal node_modules recursive walk (probably don't use this) For advanced users, paths can also be a opts.paths(request, start, opts) function * request - the import specifier being resolved * start - lookup path * getNodeModulesDirs - a thunk (no-argument function) that returns the paths using standard node_modules resolution * opts - the resolution options opts.packageIterator(request, start, opts) - return the list of candidate paths where the packages sources may be found (probably don't use this) request - the import specifier being resolved start - lookup path getPackageCandidates - a thunk (no-argument function) that returns the paths using standard node_modules resolution opts - the resolution options opts.moduleDirectory - directory (or directories) in which to recursively look for modules. default: \"node_modules\" opts.preserveSymlinks - if true, doesn't resolve basedir to real path before resolving. This is the way Node resolves dependencies when executed with the --preserve-symlinks flag. Note: this property is currently true by default but it will be changed to false in the next major version because Node's resolution algorithm does not preserve symlinks by default . default opts values: { paths : [], basedir : __dirname , extensions : [ '.js' ], includeCoreModules : true , readFileSync : fs . readFileSync , isFile : function isFile ( file ) { try { var stat = fs . statSync ( file ); } catch ( e ) { if ( e && ( e . code === 'ENOENT' || e . code === 'ENOTDIR' )) return false ; throw e ; } return stat . isFile () || stat . isFIFO (); }, isDirectory : function isDirectory ( dir ) { try { var stat = fs . statSync ( dir ); } catch ( e ) { if ( e && ( e . code === 'ENOENT' || e . code === 'ENOTDIR' )) return false ; throw e ; } return stat . isDirectory (); }, realpathSync : function realpathSync ( file ) { try { var realpath = typeof fs . realpathSync . native === 'function' ? fs . realpathSync . native : fs . realpathSync ; return realpath ( file ); } catch ( realPathErr ) { if ( realPathErr . code !== 'ENOENT' ) { throw realPathErr ; } } return file ; }, readPackageSync : function defaultReadPackageSync ( readFileSync , pkgfile ) { var body = readFileSync ( pkgfile ); try { var pkg = JSON . parse ( body ); return pkg ; } catch ( jsonErr ) {} }, moduleDirectory : 'node_modules' , preserveSymlinks : true }","title":"resolve.sync(id, opts)"},{"location":"node_modules/resolve/readme/#install","text":"With npm do: npm install resolve","title":"install"},{"location":"node_modules/resolve/readme/#license","text":"MIT","title":"license"},{"location":"node_modules/rimraf/","text":"The UNIX command rm -rf for node. Install with npm install rimraf , or just drop rimraf.js somewhere. API rimraf(f, [opts], callback) The first parameter will be interpreted as a globbing pattern for files. If you want to disable globbing you can do so with opts.disableGlob (defaults to false ). This might be handy, for instance, if you have filenames that contain globbing wildcard characters. The callback will be called with an error if there is one. Certain errors are handled for you: Windows: EBUSY and ENOTEMPTY - rimraf will back off a maximum of opts.maxBusyTries times before giving up, adding 100ms of wait between each attempt. The default maxBusyTries is 3. ENOENT - If the file doesn't exist, rimraf will return successfully, since your desired outcome is already the case. EMFILE - Since readdir requires opening a file descriptor, it's possible to hit EMFILE if too many file descriptors are in use. In the sync case, there's nothing to be done for this. But in the async case, rimraf will gradually back off with timeouts up to opts.emfileWait ms, which defaults to 1000. options unlink, chmod, stat, lstat, rmdir, readdir, unlinkSync, chmodSync, statSync, lstatSync, rmdirSync, readdirSync In order to use a custom file system library, you can override specific fs functions on the options object. If any of these functions are present on the options object, then the supplied function will be used instead of the default fs method. Sync methods are only relevant for rimraf.sync() , of course. For example: var myCustomFS = require ( 'some-custom-fs' ) rimraf ( 'some-thing' , myCustomFS , callback ) maxBusyTries If an EBUSY , ENOTEMPTY , or EPERM error code is encountered on Windows systems, then rimraf will retry with a linear backoff wait of 100ms longer on each try. The default maxBusyTries is 3. Only relevant for async usage. emfileWait If an EMFILE error is encountered, then rimraf will retry repeatedly with a linear backoff of 1ms longer on each try, until the timeout counter hits this max. The default limit is 1000. If you repeatedly encounter EMFILE errors, then consider using graceful-fs in your program. Only relevant for async usage. glob Set to false to disable glob pattern matching. Set to an object to pass options to the glob module. The default glob options are { nosort: true, silent: true } . Glob version 6 is used in this module. Relevant for both sync and async usage. disableGlob Set to any non-falsey value to disable globbing entirely. (Equivalent to setting glob: false .) rimraf.sync It can remove stuff synchronously, too. But that's not so good. Use the async API. It's better. CLI If installed with npm install rimraf -g it can be used as a global command rimraf <path> [<path> ...] which is useful for cross platform support. mkdirp If you need to create a directory recursively, check out mkdirp .","title":"Index"},{"location":"node_modules/rimraf/#api","text":"rimraf(f, [opts], callback) The first parameter will be interpreted as a globbing pattern for files. If you want to disable globbing you can do so with opts.disableGlob (defaults to false ). This might be handy, for instance, if you have filenames that contain globbing wildcard characters. The callback will be called with an error if there is one. Certain errors are handled for you: Windows: EBUSY and ENOTEMPTY - rimraf will back off a maximum of opts.maxBusyTries times before giving up, adding 100ms of wait between each attempt. The default maxBusyTries is 3. ENOENT - If the file doesn't exist, rimraf will return successfully, since your desired outcome is already the case. EMFILE - Since readdir requires opening a file descriptor, it's possible to hit EMFILE if too many file descriptors are in use. In the sync case, there's nothing to be done for this. But in the async case, rimraf will gradually back off with timeouts up to opts.emfileWait ms, which defaults to 1000.","title":"API"},{"location":"node_modules/rimraf/#options","text":"unlink, chmod, stat, lstat, rmdir, readdir, unlinkSync, chmodSync, statSync, lstatSync, rmdirSync, readdirSync In order to use a custom file system library, you can override specific fs functions on the options object. If any of these functions are present on the options object, then the supplied function will be used instead of the default fs method. Sync methods are only relevant for rimraf.sync() , of course. For example: var myCustomFS = require ( 'some-custom-fs' ) rimraf ( 'some-thing' , myCustomFS , callback ) maxBusyTries If an EBUSY , ENOTEMPTY , or EPERM error code is encountered on Windows systems, then rimraf will retry with a linear backoff wait of 100ms longer on each try. The default maxBusyTries is 3. Only relevant for async usage. emfileWait If an EMFILE error is encountered, then rimraf will retry repeatedly with a linear backoff of 1ms longer on each try, until the timeout counter hits this max. The default limit is 1000. If you repeatedly encounter EMFILE errors, then consider using graceful-fs in your program. Only relevant for async usage. glob Set to false to disable glob pattern matching. Set to an object to pass options to the glob module. The default glob options are { nosort: true, silent: true } . Glob version 6 is used in this module. Relevant for both sync and async usage. disableGlob Set to any non-falsey value to disable globbing entirely. (Equivalent to setting glob: false .)","title":"options"},{"location":"node_modules/rimraf/#rimrafsync","text":"It can remove stuff synchronously, too. But that's not so good. Use the async API. It's better.","title":"rimraf.sync"},{"location":"node_modules/rimraf/#cli","text":"If installed with npm install rimraf -g it can be used as a global command rimraf <path> [<path> ...] which is useful for cross platform support.","title":"CLI"},{"location":"node_modules/rimraf/#mkdirp","text":"If you need to create a directory recursively, check out mkdirp .","title":"mkdirp"},{"location":"node_modules/semver/","text":"semver(1) -- The semantic versioner for npm Install npm install --save semver ```` ## Usage As a node module: ``` js const semver = require ( 'semver' ) semver.valid ( '1.2.3' ) // '1.2.3' semver.valid ( 'a.b.c' ) // null semver.clean ( ' =v1.2.3 ' ) // '1.2.3' semver.satisfies ( '1.2.3' , '1.x || >=2.5.0 || 5.0.0 - 7.2.3' ) // true semver.gt ( '1.2.3' , '9.8.7' ) // false semver.lt ( '1.2.3' , '9.8.7' ) // true semver.minVersion ( '>=1.0.0' ) // '1.0.0' semver.valid ( semver.coerce ( 'v2' )) // '2.0.0' semver.valid ( semver.coerce ( '42.6.7.9.3-alpha' )) // '42.6.7' As a command-line utility: $ semver -h A JavaScript implementation of the https://semver.org/ specification Copyright Isaac Z. Schlueter Usage: semver [options] <version> [<version> [...]] Prints valid versions sorted by SemVer precedence Options: -r --range <range> Print versions that match the specified range. -i --increment [<level>] Increment a version by the specified level. Level can be one of: major, minor, patch, premajor, preminor, prepatch, or prerelease. Default level is 'patch'. Only one version may be specified. --preid <identifier> Identifier to be used to prefix premajor, preminor, prepatch or prerelease version increments. -l --loose Interpret versions and ranges loosely -p --include-prerelease Always include prerelease versions in range matching -c --coerce Coerce a string into SemVer if possible (does not imply --loose) Program exits successfully if any valid version satisfies all supplied ranges, and prints all satisfying versions. If no satisfying versions are found, then exits failure. Versions are printed in ascending order, so supplying multiple versions to the utility will just sort them. Versions A \"version\" is described by the v2.0.0 specification found at https://semver.org/ . A leading \"=\" or \"v\" character is stripped off and ignored. Ranges A version range is a set of comparators which specify versions that satisfy the range. A comparator is composed of an operator and a version . The set of primitive operators is: < Less than <= Less than or equal to > Greater than >= Greater than or equal to = Equal. If no operator is specified, then equality is assumed, so this operator is optional, but MAY be included. For example, the comparator >=1.2.7 would match the versions 1.2.7 , 1.2.8 , 2.5.3 , and 1.3.9 , but not the versions 1.2.6 or 1.1.0 . Comparators can be joined by whitespace to form a comparator set , which is satisfied by the intersection of all of the comparators it includes. A range is composed of one or more comparator sets, joined by || . A version matches a range if and only if every comparator in at least one of the || -separated comparator sets is satisfied by the version. For example, the range >=1.2.7 <1.3.0 would match the versions 1.2.7 , 1.2.8 , and 1.2.99 , but not the versions 1.2.6 , 1.3.0 , or 1.1.0 . The range 1.2.7 || >=1.2.9 <2.0.0 would match the versions 1.2.7 , 1.2.9 , and 1.4.6 , but not the versions 1.2.8 or 2.0.0 . Prerelease Tags If a version has a prerelease tag (for example, 1.2.3-alpha.3 ) then it will only be allowed to satisfy comparator sets if at least one comparator with the same [major, minor, patch] tuple also has a prerelease tag. For example, the range >1.2.3-alpha.3 would be allowed to match the version 1.2.3-alpha.7 , but it would not be satisfied by 3.4.5-alpha.9 , even though 3.4.5-alpha.9 is technically \"greater than\" 1.2.3-alpha.3 according to the SemVer sort rules. The version range only accepts prerelease tags on the 1.2.3 version. The version 3.4.5 would satisfy the range, because it does not have a prerelease flag, and 3.4.5 is greater than 1.2.3-alpha.7 . The purpose for this behavior is twofold. First, prerelease versions frequently are updated very quickly, and contain many breaking changes that are (by the author's design) not yet fit for public consumption. Therefore, by default, they are excluded from range matching semantics. Second, a user who has opted into using a prerelease version has clearly indicated the intent to use that specific set of alpha/beta/rc versions. By including a prerelease tag in the range, the user is indicating that they are aware of the risk. However, it is still not appropriate to assume that they have opted into taking a similar risk on the next set of prerelease versions. Note that this behavior can be suppressed (treating all prerelease versions as if they were normal versions, for the purpose of range matching) by setting the includePrerelease flag on the options object to any functions that do range matching. Prerelease Identifiers The method .inc takes an additional identifier string argument that will append the value of the string as a prerelease identifier: semver . inc ( '1.2.3' , 'prerelease' , 'beta' ) // '1.2.4-beta.0' command-line example: $ semver 1 .2.3 -i prerelease --preid beta 1 .2.4-beta.0 Which then can be used to increment further: $ semver 1 .2.4-beta.0 -i prerelease 1 .2.4-beta.1 Advanced Range Syntax Advanced range syntax desugars to primitive comparators in deterministic ways. Advanced ranges may be combined in the same way as primitive comparators using white space or || . Hyphen Ranges X.Y.Z - A.B.C Specifies an inclusive set. 1.2.3 - 2.3.4 := >=1.2.3 <=2.3.4 If a partial version is provided as the first version in the inclusive range, then the missing pieces are replaced with zeroes. 1.2 - 2.3.4 := >=1.2.0 <=2.3.4 If a partial version is provided as the second version in the inclusive range, then all versions that start with the supplied parts of the tuple are accepted, but nothing that would be greater than the provided tuple parts. 1.2.3 - 2.3 := >=1.2.3 <2.4.0 1.2.3 - 2 := >=1.2.3 <3.0.0 X-Ranges 1.2.x 1.X 1.2.* * Any of X , x , or * may be used to \"stand in\" for one of the numeric values in the [major, minor, patch] tuple. * := >=0.0.0 (Any version satisfies) 1.x := >=1.0.0 <2.0.0 (Matching major version) 1.2.x := >=1.2.0 <1.3.0 (Matching major and minor versions) A partial version range is treated as an X-Range, so the special character is in fact optional. \"\" (empty string) := * := >=0.0.0 1 := 1.x.x := >=1.0.0 <2.0.0 1.2 := 1.2.x := >=1.2.0 <1.3.0 Tilde Ranges ~1.2.3 ~1.2 ~1 Allows patch-level changes if a minor version is specified on the comparator. Allows minor-level changes if not. ~1.2.3 := >=1.2.3 <1.(2+1).0 := >=1.2.3 <1.3.0 ~1.2 := >=1.2.0 <1.(2+1).0 := >=1.2.0 <1.3.0 (Same as 1.2.x ) ~1 := >=1.0.0 <(1+1).0.0 := >=1.0.0 <2.0.0 (Same as 1.x ) ~0.2.3 := >=0.2.3 <0.(2+1).0 := >=0.2.3 <0.3.0 ~0.2 := >=0.2.0 <0.(2+1).0 := >=0.2.0 <0.3.0 (Same as 0.2.x ) ~0 := >=0.0.0 <(0+1).0.0 := >=0.0.0 <1.0.0 (Same as 0.x ) ~1.2.3-beta.2 := >=1.2.3-beta.2 <1.3.0 Note that prereleases in the 1.2.3 version will be allowed, if they are greater than or equal to beta.2 . So, 1.2.3-beta.4 would be allowed, but 1.2.4-beta.2 would not, because it is a prerelease of a different [major, minor, patch] tuple. Caret Ranges ^1.2.3 ^0.2.5 ^0.0.4 Allows changes that do not modify the left-most non-zero digit in the [major, minor, patch] tuple. In other words, this allows patch and minor updates for versions 1.0.0 and above, patch updates for versions 0.X >=0.1.0 , and no updates for versions 0.0.X . Many authors treat a 0.x version as if the x were the major \"breaking-change\" indicator. Caret ranges are ideal when an author may make breaking changes between 0.2.4 and 0.3.0 releases, which is a common practice. However, it presumes that there will not be breaking changes between 0.2.4 and 0.2.5 . It allows for changes that are presumed to be additive (but non-breaking), according to commonly observed practices. ^1.2.3 := >=1.2.3 <2.0.0 ^0.2.3 := >=0.2.3 <0.3.0 ^0.0.3 := >=0.0.3 <0.0.4 ^1.2.3-beta.2 := >=1.2.3-beta.2 <2.0.0 Note that prereleases in the 1.2.3 version will be allowed, if they are greater than or equal to beta.2 . So, 1.2.3-beta.4 would be allowed, but 1.2.4-beta.2 would not, because it is a prerelease of a different [major, minor, patch] tuple. ^0.0.3-beta := >=0.0.3-beta <0.0.4 Note that prereleases in the 0.0.3 version only will be allowed, if they are greater than or equal to beta . So, 0.0.3-pr.2 would be allowed. When parsing caret ranges, a missing patch value desugars to the number 0 , but will allow flexibility within that value, even if the major and minor versions are both 0 . ^1.2.x := >=1.2.0 <2.0.0 ^0.0.x := >=0.0.0 <0.1.0 ^0.0 := >=0.0.0 <0.1.0 A missing minor and patch values will desugar to zero, but also allow flexibility within those values, even if the major version is zero. ^1.x := >=1.0.0 <2.0.0 ^0.x := >=0.0.0 <1.0.0 Range Grammar Putting all this together, here is a Backus-Naur grammar for ranges, for the benefit of parser authors: range-set ::= range ( logical-or range ) * logical-or ::= ( ' ' ) * '||' ( ' ' ) * range ::= hyphen | simple ( ' ' simple ) * | '' hyphen ::= partial ' - ' partial simple ::= primitive | partial | tilde | caret primitive ::= ( ' < ' | ' > ' | '>=' | '<=' | '=' ) partial partial ::= xr ( '.' xr ( '.' xr qualifier ? )? )? xr ::= 'x' | 'X' | '*' | nr nr ::= '0' | ['1'-'9'] ( ['0'-'9'] ) * tilde ::= '~' partial caret ::= '^' partial qualifier ::= ( '-' pre )? ( '+' build )? pre ::= parts build ::= parts parts ::= part ( '.' part ) * part ::= nr | [-0-9A-Za-z]+ Functions All methods and classes take a final options object argument. All options in this object are false by default. The options supported are: loose Be more forgiving about not-quite-valid semver strings. (Any resulting output will always be 100% strict compliant, of course.) For backwards compatibility reasons, if the options argument is a boolean value instead of an object, it is interpreted to be the loose param. includePrerelease Set to suppress the default behavior of excluding prerelease tagged versions from ranges unless they are explicitly opted into. Strict-mode Comparators and Ranges will be strict about the SemVer strings that they parse. valid(v) : Return the parsed version, or null if it's not valid. inc(v, release) : Return the version incremented by the release type ( major , premajor , minor , preminor , patch , prepatch , or prerelease ), or null if it's not valid premajor in one call will bump the version up to the next major version and down to a prerelease of that major version. preminor , and prepatch work the same way. If called from a non-prerelease version, the prerelease will work the same as prepatch . It increments the patch version, then makes a prerelease. If the input version is already a prerelease it simply increments it. prerelease(v) : Returns an array of prerelease components, or null if none exist. Example: prerelease('1.2.3-alpha.1') -> ['alpha', 1] major(v) : Return the major version number. minor(v) : Return the minor version number. patch(v) : Return the patch version number. intersects(r1, r2, loose) : Return true if the two supplied ranges or comparators intersect. parse(v) : Attempt to parse a string as a semantic version, returning either a SemVer object or null . Comparison gt(v1, v2) : v1 > v2 gte(v1, v2) : v1 >= v2 lt(v1, v2) : v1 < v2 lte(v1, v2) : v1 <= v2 eq(v1, v2) : v1 == v2 This is true if they're logically equivalent, even if they're not the exact same string. You already know how to compare strings. neq(v1, v2) : v1 != v2 The opposite of eq . cmp(v1, comparator, v2) : Pass in a comparison string, and it'll call the corresponding function above. \"===\" and \"!==\" do simple string comparison, but are included for completeness. Throws if an invalid comparison string is provided. compare(v1, v2) : Return 0 if v1 == v2 , or 1 if v1 is greater, or -1 if v2 is greater. Sorts in ascending order if passed to Array.sort() . rcompare(v1, v2) : The reverse of compare. Sorts an array of versions in descending order when passed to Array.sort() . diff(v1, v2) : Returns difference between two versions by the release type ( major , premajor , minor , preminor , patch , prepatch , or prerelease ), or null if the versions are the same. Comparators intersects(comparator) : Return true if the comparators intersect Ranges validRange(range) : Return the valid range or null if it's not valid satisfies(version, range) : Return true if the version satisfies the range. maxSatisfying(versions, range) : Return the highest version in the list that satisfies the range, or null if none of them do. minSatisfying(versions, range) : Return the lowest version in the list that satisfies the range, or null if none of them do. minVersion(range) : Return the lowest version that can possibly match the given range. gtr(version, range) : Return true if version is greater than all the versions possible in the range. ltr(version, range) : Return true if version is less than all the versions possible in the range. outside(version, range, hilo) : Return true if the version is outside the bounds of the range in either the high or low direction. The hilo argument must be either the string '>' or '<' . (This is the function called by gtr and ltr .) intersects(range) : Return true if any of the ranges comparators intersect Note that, since ranges may be non-contiguous, a version might not be greater than a range, less than a range, or satisfy a range! For example, the range 1.2 <1.2.9 || >2.0.0 would have a hole from 1.2.9 until 2.0.0 , so the version 1.2.10 would not be greater than the range (because 2.0.1 satisfies, which is higher), nor less than the range (since 1.2.8 satisfies, which is lower), and it also does not satisfy the range. If you want to know if a version satisfies or does not satisfy a range, use the satisfies(version, range) function. Coercion coerce(version) : Coerces a string to semver if possible This aims to provide a very forgiving translation of a non-semver string to semver. It looks for the first digit in a string, and consumes all remaining characters which satisfy at least a partial semver (e.g., 1 , 1.2 , 1.2.3 ) up to the max permitted length (256 characters). Longer versions are simply truncated ( 4.6.3.9.2-alpha2 becomes 4.6.3 ). All surrounding text is simply ignored ( v3.4 replaces v3.3.1 becomes 3.4.0 ). Only text which lacks digits will fail coercion ( version one is not valid). The maximum length for any semver component considered for coercion is 16 characters; longer components will be ignored ( 10000000000000000.4.7.4 becomes 4.7.4 ). The maximum value for any semver component is Number.MAX_SAFE_INTEGER || (2**53 - 1) ; higher value components are invalid ( 9999999999999999.4.7.4 is likely invalid).","title":"Index"},{"location":"node_modules/semver/#semver1-the-semantic-versioner-for-npm","text":"","title":"semver(1) -- The semantic versioner for npm"},{"location":"node_modules/semver/#install","text":"npm install --save semver ```` ## Usage As a node module: ``` js const semver = require ( 'semver' ) semver.valid ( '1.2.3' ) // '1.2.3' semver.valid ( 'a.b.c' ) // null semver.clean ( ' =v1.2.3 ' ) // '1.2.3' semver.satisfies ( '1.2.3' , '1.x || >=2.5.0 || 5.0.0 - 7.2.3' ) // true semver.gt ( '1.2.3' , '9.8.7' ) // false semver.lt ( '1.2.3' , '9.8.7' ) // true semver.minVersion ( '>=1.0.0' ) // '1.0.0' semver.valid ( semver.coerce ( 'v2' )) // '2.0.0' semver.valid ( semver.coerce ( '42.6.7.9.3-alpha' )) // '42.6.7' As a command-line utility: $ semver -h A JavaScript implementation of the https://semver.org/ specification Copyright Isaac Z. Schlueter Usage: semver [options] <version> [<version> [...]] Prints valid versions sorted by SemVer precedence Options: -r --range <range> Print versions that match the specified range. -i --increment [<level>] Increment a version by the specified level. Level can be one of: major, minor, patch, premajor, preminor, prepatch, or prerelease. Default level is 'patch'. Only one version may be specified. --preid <identifier> Identifier to be used to prefix premajor, preminor, prepatch or prerelease version increments. -l --loose Interpret versions and ranges loosely -p --include-prerelease Always include prerelease versions in range matching -c --coerce Coerce a string into SemVer if possible (does not imply --loose) Program exits successfully if any valid version satisfies all supplied ranges, and prints all satisfying versions. If no satisfying versions are found, then exits failure. Versions are printed in ascending order, so supplying multiple versions to the utility will just sort them.","title":"Install"},{"location":"node_modules/semver/#versions","text":"A \"version\" is described by the v2.0.0 specification found at https://semver.org/ . A leading \"=\" or \"v\" character is stripped off and ignored.","title":"Versions"},{"location":"node_modules/semver/#ranges","text":"A version range is a set of comparators which specify versions that satisfy the range. A comparator is composed of an operator and a version . The set of primitive operators is: < Less than <= Less than or equal to > Greater than >= Greater than or equal to = Equal. If no operator is specified, then equality is assumed, so this operator is optional, but MAY be included. For example, the comparator >=1.2.7 would match the versions 1.2.7 , 1.2.8 , 2.5.3 , and 1.3.9 , but not the versions 1.2.6 or 1.1.0 . Comparators can be joined by whitespace to form a comparator set , which is satisfied by the intersection of all of the comparators it includes. A range is composed of one or more comparator sets, joined by || . A version matches a range if and only if every comparator in at least one of the || -separated comparator sets is satisfied by the version. For example, the range >=1.2.7 <1.3.0 would match the versions 1.2.7 , 1.2.8 , and 1.2.99 , but not the versions 1.2.6 , 1.3.0 , or 1.1.0 . The range 1.2.7 || >=1.2.9 <2.0.0 would match the versions 1.2.7 , 1.2.9 , and 1.4.6 , but not the versions 1.2.8 or 2.0.0 .","title":"Ranges"},{"location":"node_modules/semver/#prerelease-tags","text":"If a version has a prerelease tag (for example, 1.2.3-alpha.3 ) then it will only be allowed to satisfy comparator sets if at least one comparator with the same [major, minor, patch] tuple also has a prerelease tag. For example, the range >1.2.3-alpha.3 would be allowed to match the version 1.2.3-alpha.7 , but it would not be satisfied by 3.4.5-alpha.9 , even though 3.4.5-alpha.9 is technically \"greater than\" 1.2.3-alpha.3 according to the SemVer sort rules. The version range only accepts prerelease tags on the 1.2.3 version. The version 3.4.5 would satisfy the range, because it does not have a prerelease flag, and 3.4.5 is greater than 1.2.3-alpha.7 . The purpose for this behavior is twofold. First, prerelease versions frequently are updated very quickly, and contain many breaking changes that are (by the author's design) not yet fit for public consumption. Therefore, by default, they are excluded from range matching semantics. Second, a user who has opted into using a prerelease version has clearly indicated the intent to use that specific set of alpha/beta/rc versions. By including a prerelease tag in the range, the user is indicating that they are aware of the risk. However, it is still not appropriate to assume that they have opted into taking a similar risk on the next set of prerelease versions. Note that this behavior can be suppressed (treating all prerelease versions as if they were normal versions, for the purpose of range matching) by setting the includePrerelease flag on the options object to any functions that do range matching.","title":"Prerelease Tags"},{"location":"node_modules/semver/#prerelease-identifiers","text":"The method .inc takes an additional identifier string argument that will append the value of the string as a prerelease identifier: semver . inc ( '1.2.3' , 'prerelease' , 'beta' ) // '1.2.4-beta.0' command-line example: $ semver 1 .2.3 -i prerelease --preid beta 1 .2.4-beta.0 Which then can be used to increment further: $ semver 1 .2.4-beta.0 -i prerelease 1 .2.4-beta.1","title":"Prerelease Identifiers"},{"location":"node_modules/semver/#advanced-range-syntax","text":"Advanced range syntax desugars to primitive comparators in deterministic ways. Advanced ranges may be combined in the same way as primitive comparators using white space or || .","title":"Advanced Range Syntax"},{"location":"node_modules/semver/#hyphen-ranges-xyz-abc","text":"Specifies an inclusive set. 1.2.3 - 2.3.4 := >=1.2.3 <=2.3.4 If a partial version is provided as the first version in the inclusive range, then the missing pieces are replaced with zeroes. 1.2 - 2.3.4 := >=1.2.0 <=2.3.4 If a partial version is provided as the second version in the inclusive range, then all versions that start with the supplied parts of the tuple are accepted, but nothing that would be greater than the provided tuple parts. 1.2.3 - 2.3 := >=1.2.3 <2.4.0 1.2.3 - 2 := >=1.2.3 <3.0.0","title":"Hyphen Ranges X.Y.Z - A.B.C"},{"location":"node_modules/semver/#x-ranges-12x-1x-12","text":"Any of X , x , or * may be used to \"stand in\" for one of the numeric values in the [major, minor, patch] tuple. * := >=0.0.0 (Any version satisfies) 1.x := >=1.0.0 <2.0.0 (Matching major version) 1.2.x := >=1.2.0 <1.3.0 (Matching major and minor versions) A partial version range is treated as an X-Range, so the special character is in fact optional. \"\" (empty string) := * := >=0.0.0 1 := 1.x.x := >=1.0.0 <2.0.0 1.2 := 1.2.x := >=1.2.0 <1.3.0","title":"X-Ranges 1.2.x 1.X 1.2.* *"},{"location":"node_modules/semver/#tilde-ranges-123-12-1","text":"Allows patch-level changes if a minor version is specified on the comparator. Allows minor-level changes if not. ~1.2.3 := >=1.2.3 <1.(2+1).0 := >=1.2.3 <1.3.0 ~1.2 := >=1.2.0 <1.(2+1).0 := >=1.2.0 <1.3.0 (Same as 1.2.x ) ~1 := >=1.0.0 <(1+1).0.0 := >=1.0.0 <2.0.0 (Same as 1.x ) ~0.2.3 := >=0.2.3 <0.(2+1).0 := >=0.2.3 <0.3.0 ~0.2 := >=0.2.0 <0.(2+1).0 := >=0.2.0 <0.3.0 (Same as 0.2.x ) ~0 := >=0.0.0 <(0+1).0.0 := >=0.0.0 <1.0.0 (Same as 0.x ) ~1.2.3-beta.2 := >=1.2.3-beta.2 <1.3.0 Note that prereleases in the 1.2.3 version will be allowed, if they are greater than or equal to beta.2 . So, 1.2.3-beta.4 would be allowed, but 1.2.4-beta.2 would not, because it is a prerelease of a different [major, minor, patch] tuple.","title":"Tilde Ranges ~1.2.3 ~1.2 ~1"},{"location":"node_modules/semver/#caret-ranges-123-025-004","text":"Allows changes that do not modify the left-most non-zero digit in the [major, minor, patch] tuple. In other words, this allows patch and minor updates for versions 1.0.0 and above, patch updates for versions 0.X >=0.1.0 , and no updates for versions 0.0.X . Many authors treat a 0.x version as if the x were the major \"breaking-change\" indicator. Caret ranges are ideal when an author may make breaking changes between 0.2.4 and 0.3.0 releases, which is a common practice. However, it presumes that there will not be breaking changes between 0.2.4 and 0.2.5 . It allows for changes that are presumed to be additive (but non-breaking), according to commonly observed practices. ^1.2.3 := >=1.2.3 <2.0.0 ^0.2.3 := >=0.2.3 <0.3.0 ^0.0.3 := >=0.0.3 <0.0.4 ^1.2.3-beta.2 := >=1.2.3-beta.2 <2.0.0 Note that prereleases in the 1.2.3 version will be allowed, if they are greater than or equal to beta.2 . So, 1.2.3-beta.4 would be allowed, but 1.2.4-beta.2 would not, because it is a prerelease of a different [major, minor, patch] tuple. ^0.0.3-beta := >=0.0.3-beta <0.0.4 Note that prereleases in the 0.0.3 version only will be allowed, if they are greater than or equal to beta . So, 0.0.3-pr.2 would be allowed. When parsing caret ranges, a missing patch value desugars to the number 0 , but will allow flexibility within that value, even if the major and minor versions are both 0 . ^1.2.x := >=1.2.0 <2.0.0 ^0.0.x := >=0.0.0 <0.1.0 ^0.0 := >=0.0.0 <0.1.0 A missing minor and patch values will desugar to zero, but also allow flexibility within those values, even if the major version is zero. ^1.x := >=1.0.0 <2.0.0 ^0.x := >=0.0.0 <1.0.0","title":"Caret Ranges ^1.2.3 ^0.2.5 ^0.0.4"},{"location":"node_modules/semver/#range-grammar","text":"Putting all this together, here is a Backus-Naur grammar for ranges, for the benefit of parser authors: range-set ::= range ( logical-or range ) * logical-or ::= ( ' ' ) * '||' ( ' ' ) * range ::= hyphen | simple ( ' ' simple ) * | '' hyphen ::= partial ' - ' partial simple ::= primitive | partial | tilde | caret primitive ::= ( ' < ' | ' > ' | '>=' | '<=' | '=' ) partial partial ::= xr ( '.' xr ( '.' xr qualifier ? )? )? xr ::= 'x' | 'X' | '*' | nr nr ::= '0' | ['1'-'9'] ( ['0'-'9'] ) * tilde ::= '~' partial caret ::= '^' partial qualifier ::= ( '-' pre )? ( '+' build )? pre ::= parts build ::= parts parts ::= part ( '.' part ) * part ::= nr | [-0-9A-Za-z]+","title":"Range Grammar"},{"location":"node_modules/semver/#functions","text":"All methods and classes take a final options object argument. All options in this object are false by default. The options supported are: loose Be more forgiving about not-quite-valid semver strings. (Any resulting output will always be 100% strict compliant, of course.) For backwards compatibility reasons, if the options argument is a boolean value instead of an object, it is interpreted to be the loose param. includePrerelease Set to suppress the default behavior of excluding prerelease tagged versions from ranges unless they are explicitly opted into. Strict-mode Comparators and Ranges will be strict about the SemVer strings that they parse. valid(v) : Return the parsed version, or null if it's not valid. inc(v, release) : Return the version incremented by the release type ( major , premajor , minor , preminor , patch , prepatch , or prerelease ), or null if it's not valid premajor in one call will bump the version up to the next major version and down to a prerelease of that major version. preminor , and prepatch work the same way. If called from a non-prerelease version, the prerelease will work the same as prepatch . It increments the patch version, then makes a prerelease. If the input version is already a prerelease it simply increments it. prerelease(v) : Returns an array of prerelease components, or null if none exist. Example: prerelease('1.2.3-alpha.1') -> ['alpha', 1] major(v) : Return the major version number. minor(v) : Return the minor version number. patch(v) : Return the patch version number. intersects(r1, r2, loose) : Return true if the two supplied ranges or comparators intersect. parse(v) : Attempt to parse a string as a semantic version, returning either a SemVer object or null .","title":"Functions"},{"location":"node_modules/semver/#comparison","text":"gt(v1, v2) : v1 > v2 gte(v1, v2) : v1 >= v2 lt(v1, v2) : v1 < v2 lte(v1, v2) : v1 <= v2 eq(v1, v2) : v1 == v2 This is true if they're logically equivalent, even if they're not the exact same string. You already know how to compare strings. neq(v1, v2) : v1 != v2 The opposite of eq . cmp(v1, comparator, v2) : Pass in a comparison string, and it'll call the corresponding function above. \"===\" and \"!==\" do simple string comparison, but are included for completeness. Throws if an invalid comparison string is provided. compare(v1, v2) : Return 0 if v1 == v2 , or 1 if v1 is greater, or -1 if v2 is greater. Sorts in ascending order if passed to Array.sort() . rcompare(v1, v2) : The reverse of compare. Sorts an array of versions in descending order when passed to Array.sort() . diff(v1, v2) : Returns difference between two versions by the release type ( major , premajor , minor , preminor , patch , prepatch , or prerelease ), or null if the versions are the same.","title":"Comparison"},{"location":"node_modules/semver/#comparators","text":"intersects(comparator) : Return true if the comparators intersect","title":"Comparators"},{"location":"node_modules/semver/#ranges_1","text":"validRange(range) : Return the valid range or null if it's not valid satisfies(version, range) : Return true if the version satisfies the range. maxSatisfying(versions, range) : Return the highest version in the list that satisfies the range, or null if none of them do. minSatisfying(versions, range) : Return the lowest version in the list that satisfies the range, or null if none of them do. minVersion(range) : Return the lowest version that can possibly match the given range. gtr(version, range) : Return true if version is greater than all the versions possible in the range. ltr(version, range) : Return true if version is less than all the versions possible in the range. outside(version, range, hilo) : Return true if the version is outside the bounds of the range in either the high or low direction. The hilo argument must be either the string '>' or '<' . (This is the function called by gtr and ltr .) intersects(range) : Return true if any of the ranges comparators intersect Note that, since ranges may be non-contiguous, a version might not be greater than a range, less than a range, or satisfy a range! For example, the range 1.2 <1.2.9 || >2.0.0 would have a hole from 1.2.9 until 2.0.0 , so the version 1.2.10 would not be greater than the range (because 2.0.1 satisfies, which is higher), nor less than the range (since 1.2.8 satisfies, which is lower), and it also does not satisfy the range. If you want to know if a version satisfies or does not satisfy a range, use the satisfies(version, range) function.","title":"Ranges"},{"location":"node_modules/semver/#coercion","text":"coerce(version) : Coerces a string to semver if possible This aims to provide a very forgiving translation of a non-semver string to semver. It looks for the first digit in a string, and consumes all remaining characters which satisfy at least a partial semver (e.g., 1 , 1.2 , 1.2.3 ) up to the max permitted length (256 characters). Longer versions are simply truncated ( 4.6.3.9.2-alpha2 becomes 4.6.3 ). All surrounding text is simply ignored ( v3.4 replaces v3.3.1 becomes 3.4.0 ). Only text which lacks digits will fail coercion ( version one is not valid). The maximum length for any semver component considered for coercion is 16 characters; longer components will be ignored ( 10000000000000000.4.7.4 becomes 4.7.4 ). The maximum value for any semver component is Number.MAX_SAFE_INTEGER || (2**53 - 1) ; higher value components are invalid ( 9999999999999999.4.7.4 is likely invalid).","title":"Coercion"},{"location":"node_modules/semver/CHANGELOG/","text":"changes log 5.7 Add minVersion method 5.6 Move boolean loose param to an options object, with backwards-compatibility protection. Add ability to opt out of special prerelease version handling with the includePrerelease option flag. 5.5 Add version coercion capabilities 5.4 Add intersection checking 5.3 Add minSatisfying method 5.2 Add prerelease(v) that returns prerelease components 5.1 Add Backus-Naur for ranges Remove excessively cute inspection methods 5.0 Remove AMD/Browserified build artifacts Fix ltr and gtr when using the * range Fix for range * with a prerelease identifier","title":"changes log"},{"location":"node_modules/semver/CHANGELOG/#changes-log","text":"","title":"changes log"},{"location":"node_modules/semver/CHANGELOG/#57","text":"Add minVersion method","title":"5.7"},{"location":"node_modules/semver/CHANGELOG/#56","text":"Move boolean loose param to an options object, with backwards-compatibility protection. Add ability to opt out of special prerelease version handling with the includePrerelease option flag.","title":"5.6"},{"location":"node_modules/semver/CHANGELOG/#55","text":"Add version coercion capabilities","title":"5.5"},{"location":"node_modules/semver/CHANGELOG/#54","text":"Add intersection checking","title":"5.4"},{"location":"node_modules/semver/CHANGELOG/#53","text":"Add minSatisfying method","title":"5.3"},{"location":"node_modules/semver/CHANGELOG/#52","text":"Add prerelease(v) that returns prerelease components","title":"5.2"},{"location":"node_modules/semver/CHANGELOG/#51","text":"Add Backus-Naur for ranges Remove excessively cute inspection methods","title":"5.1"},{"location":"node_modules/semver/CHANGELOG/#50","text":"Remove AMD/Browserified build artifacts Fix ltr and gtr when using the * range Fix for range * with a prerelease identifier","title":"5.0"},{"location":"node_modules/slice-ansi/readme/","text":"slice-ansi Slice a string with ANSI escape codes Install $ npm install slice-ansi Usage const chalk = require ( 'chalk' ); const sliceAnsi = require ( 'slice-ansi' ); const string = 'The quick brown ' + chalk . red ( 'fox jumped over ' ) + 'the lazy ' + chalk . green ( 'dog and then ran away with the unicorn.' ); console . log ( sliceAnsi ( string , 20 , 30 )); API sliceAnsi(string, beginSlice, endSlice?) string Type: string String with ANSI escape codes. Like one styled by chalk . beginSlice Type: number Zero-based index at which to begin the slice. endSlice Type: number Zero-based index at which to end the slice. Related wrap-ansi - Wordwrap a string with ANSI escape codes cli-truncate - Truncate a string to a specific width in the terminal chalk - Terminal string styling done right Maintainers Sindre Sorhus Josh Junon Get professional support for this package with a Tidelift subscription Tidelift helps make open source sustainable for maintainers while giving companies assurances about security, maintenance, and licensing for their dependencies.","title":"slice-ansi [![Build Status](https://travis-ci.org/chalk/slice-ansi.svg?branch=master)](https://travis-ci.org/chalk/slice-ansi) [![XO: Linted](https://img.shields.io/badge/xo-linted-blue.svg)](https://github.com/xojs/xo)"},{"location":"node_modules/slice-ansi/readme/#slice-ansi","text":"Slice a string with ANSI escape codes","title":"slice-ansi"},{"location":"node_modules/slice-ansi/readme/#install","text":"$ npm install slice-ansi","title":"Install"},{"location":"node_modules/slice-ansi/readme/#usage","text":"const chalk = require ( 'chalk' ); const sliceAnsi = require ( 'slice-ansi' ); const string = 'The quick brown ' + chalk . red ( 'fox jumped over ' ) + 'the lazy ' + chalk . green ( 'dog and then ran away with the unicorn.' ); console . log ( sliceAnsi ( string , 20 , 30 ));","title":"Usage"},{"location":"node_modules/slice-ansi/readme/#api","text":"","title":"API"},{"location":"node_modules/slice-ansi/readme/#sliceansistring-beginslice-endslice","text":"","title":"sliceAnsi(string, beginSlice, endSlice?)"},{"location":"node_modules/slice-ansi/readme/#string","text":"Type: string String with ANSI escape codes. Like one styled by chalk .","title":"string"},{"location":"node_modules/slice-ansi/readme/#beginslice","text":"Type: number Zero-based index at which to begin the slice.","title":"beginSlice"},{"location":"node_modules/slice-ansi/readme/#endslice","text":"Type: number Zero-based index at which to end the slice.","title":"endSlice"},{"location":"node_modules/slice-ansi/readme/#related","text":"wrap-ansi - Wordwrap a string with ANSI escape codes cli-truncate - Truncate a string to a specific width in the terminal chalk - Terminal string styling done right","title":"Related"},{"location":"node_modules/slice-ansi/readme/#maintainers","text":"Sindre Sorhus Josh Junon Get professional support for this package with a Tidelift subscription Tidelift helps make open source sustainable for maintainers while giving companies assurances about security, maintenance, and licensing for their dependencies.","title":"Maintainers"},{"location":"node_modules/slice-ansi/node_modules/ansi-styles/readme/","text":"ansi-styles ANSI escape codes for styling strings in the terminal You probably want the higher-level chalk module for styling your strings. Install $ npm install ansi-styles Usage const style = require ( 'ansi-styles' ); console . log ( ` ${ style . green . open } Hello world! ${ style . green . close } ` ); // Color conversion between 16/256/truecolor // NOTE: If conversion goes to 16 colors or 256 colors, the original color // may be degraded to fit that color palette. This means terminals // that do not support 16 million colors will best-match the // original color. console . log ( style . bgColor . ansi . hsl ( 120 , 80 , 72 ) + 'Hello world!' + style . bgColor . close ); console . log ( style . color . ansi256 . rgb ( 199 , 20 , 250 ) + 'Hello world!' + style . color . close ); console . log ( style . color . ansi16m . hex ( '#abcdef' ) + 'Hello world!' + style . color . close ); API Each style has an open and close property. Styles Modifiers reset bold dim italic (Not widely supported) underline inverse hidden strikethrough (Not widely supported) Colors black red green yellow blue magenta cyan white blackBright (alias: gray , grey ) redBright greenBright yellowBright blueBright magentaBright cyanBright whiteBright Background colors bgBlack bgRed bgGreen bgYellow bgBlue bgMagenta bgCyan bgWhite bgBlackBright (alias: bgGray , bgGrey ) bgRedBright bgGreenBright bgYellowBright bgBlueBright bgMagentaBright bgCyanBright bgWhiteBright Advanced usage By default, you get a map of styles, but the styles are also available as groups. They are non-enumerable so they don't show up unless you access them explicitly. This makes it easier to expose only a subset in a higher-level module. style.modifier style.color style.bgColor Example console . log ( style . color . green . open ); Raw escape codes (i.e. without the CSI escape prefix \\u001B[ and render mode postfix m ) are available under style.codes , which returns a Map with the open codes as keys and close codes as values. Example console . log ( style . codes . get ( 36 )); //=> 39 256 / 16 million (TrueColor) support ansi-styles uses the color-convert package to allow for converting between various colors and ANSI escapes, with support for 256 and 16 million colors. The following color spaces from color-convert are supported: rgb hex keyword hsl hsv hwb ansi ansi256 To use these, call the associated conversion function with the intended output, for example: style . color . ansi . rgb ( 100 , 200 , 15 ); // RGB to 16 color ansi foreground code style . bgColor . ansi . rgb ( 100 , 200 , 15 ); // RGB to 16 color ansi background code style . color . ansi256 . hsl ( 120 , 100 , 60 ); // HSL to 256 color ansi foreground code style . bgColor . ansi256 . hsl ( 120 , 100 , 60 ); // HSL to 256 color ansi foreground code style . color . ansi16m . hex ( '#C0FFEE' ); // Hex (RGB) to 16 million color foreground code style . bgColor . ansi16m . hex ( '#C0FFEE' ); // Hex (RGB) to 16 million color background code Related ansi-escapes - ANSI escape codes for manipulating the terminal Maintainers Sindre Sorhus Josh Junon For enterprise Available as part of the Tidelift Subscription. The maintainers of ansi-styles and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. Learn more.","title":"ansi-styles [![Build Status](https://travis-ci.org/chalk/ansi-styles.svg?branch=master)](https://travis-ci.org/chalk/ansi-styles)"},{"location":"node_modules/slice-ansi/node_modules/ansi-styles/readme/#ansi-styles","text":"ANSI escape codes for styling strings in the terminal You probably want the higher-level chalk module for styling your strings.","title":"ansi-styles"},{"location":"node_modules/slice-ansi/node_modules/ansi-styles/readme/#install","text":"$ npm install ansi-styles","title":"Install"},{"location":"node_modules/slice-ansi/node_modules/ansi-styles/readme/#usage","text":"const style = require ( 'ansi-styles' ); console . log ( ` ${ style . green . open } Hello world! ${ style . green . close } ` ); // Color conversion between 16/256/truecolor // NOTE: If conversion goes to 16 colors or 256 colors, the original color // may be degraded to fit that color palette. This means terminals // that do not support 16 million colors will best-match the // original color. console . log ( style . bgColor . ansi . hsl ( 120 , 80 , 72 ) + 'Hello world!' + style . bgColor . close ); console . log ( style . color . ansi256 . rgb ( 199 , 20 , 250 ) + 'Hello world!' + style . color . close ); console . log ( style . color . ansi16m . hex ( '#abcdef' ) + 'Hello world!' + style . color . close );","title":"Usage"},{"location":"node_modules/slice-ansi/node_modules/ansi-styles/readme/#api","text":"Each style has an open and close property.","title":"API"},{"location":"node_modules/slice-ansi/node_modules/ansi-styles/readme/#styles","text":"","title":"Styles"},{"location":"node_modules/slice-ansi/node_modules/ansi-styles/readme/#modifiers","text":"reset bold dim italic (Not widely supported) underline inverse hidden strikethrough (Not widely supported)","title":"Modifiers"},{"location":"node_modules/slice-ansi/node_modules/ansi-styles/readme/#colors","text":"black red green yellow blue magenta cyan white blackBright (alias: gray , grey ) redBright greenBright yellowBright blueBright magentaBright cyanBright whiteBright","title":"Colors"},{"location":"node_modules/slice-ansi/node_modules/ansi-styles/readme/#background-colors","text":"bgBlack bgRed bgGreen bgYellow bgBlue bgMagenta bgCyan bgWhite bgBlackBright (alias: bgGray , bgGrey ) bgRedBright bgGreenBright bgYellowBright bgBlueBright bgMagentaBright bgCyanBright bgWhiteBright","title":"Background colors"},{"location":"node_modules/slice-ansi/node_modules/ansi-styles/readme/#advanced-usage","text":"By default, you get a map of styles, but the styles are also available as groups. They are non-enumerable so they don't show up unless you access them explicitly. This makes it easier to expose only a subset in a higher-level module. style.modifier style.color style.bgColor","title":"Advanced usage"},{"location":"node_modules/slice-ansi/node_modules/ansi-styles/readme/#example","text":"console . log ( style . color . green . open ); Raw escape codes (i.e. without the CSI escape prefix \\u001B[ and render mode postfix m ) are available under style.codes , which returns a Map with the open codes as keys and close codes as values.","title":"Example"},{"location":"node_modules/slice-ansi/node_modules/ansi-styles/readme/#example_1","text":"console . log ( style . codes . get ( 36 )); //=> 39","title":"Example"},{"location":"node_modules/slice-ansi/node_modules/ansi-styles/readme/#256-16-million-truecolor-support","text":"ansi-styles uses the color-convert package to allow for converting between various colors and ANSI escapes, with support for 256 and 16 million colors. The following color spaces from color-convert are supported: rgb hex keyword hsl hsv hwb ansi ansi256 To use these, call the associated conversion function with the intended output, for example: style . color . ansi . rgb ( 100 , 200 , 15 ); // RGB to 16 color ansi foreground code style . bgColor . ansi . rgb ( 100 , 200 , 15 ); // RGB to 16 color ansi background code style . color . ansi256 . hsl ( 120 , 100 , 60 ); // HSL to 256 color ansi foreground code style . bgColor . ansi256 . hsl ( 120 , 100 , 60 ); // HSL to 256 color ansi foreground code style . color . ansi16m . hex ( '#C0FFEE' ); // Hex (RGB) to 16 million color foreground code style . bgColor . ansi16m . hex ( '#C0FFEE' ); // Hex (RGB) to 16 million color background code","title":"256 / 16 million (TrueColor) support"},{"location":"node_modules/slice-ansi/node_modules/ansi-styles/readme/#related","text":"ansi-escapes - ANSI escape codes for manipulating the terminal","title":"Related"},{"location":"node_modules/slice-ansi/node_modules/ansi-styles/readme/#maintainers","text":"Sindre Sorhus Josh Junon","title":"Maintainers"},{"location":"node_modules/slice-ansi/node_modules/ansi-styles/readme/#for-enterprise","text":"Available as part of the Tidelift Subscription. The maintainers of ansi-styles and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. Learn more.","title":"For enterprise"},{"location":"node_modules/slice-ansi/node_modules/is-fullwidth-code-point/readme/","text":"is-fullwidth-code-point Check if the character represented by a given Unicode code point is fullwidth Install $ npm install is-fullwidth-code-point Usage const isFullwidthCodePoint = require ( 'is-fullwidth-code-point' ); isFullwidthCodePoint ( '\u8c22' . codePointAt ( 0 )); //=> true isFullwidthCodePoint ( 'a' . codePointAt ( 0 )); //=> false API isFullwidthCodePoint(codePoint) codePoint Type: number The code point of a character. License MIT \u00a9 Sindre Sorhus","title":"is-fullwidth-code-point [![Build Status](https://travis-ci.org/sindresorhus/is-fullwidth-code-point.svg?branch=master)](https://travis-ci.org/sindresorhus/is-fullwidth-code-point)"},{"location":"node_modules/slice-ansi/node_modules/is-fullwidth-code-point/readme/#is-fullwidth-code-point","text":"Check if the character represented by a given Unicode code point is fullwidth","title":"is-fullwidth-code-point"},{"location":"node_modules/slice-ansi/node_modules/is-fullwidth-code-point/readme/#install","text":"$ npm install is-fullwidth-code-point","title":"Install"},{"location":"node_modules/slice-ansi/node_modules/is-fullwidth-code-point/readme/#usage","text":"const isFullwidthCodePoint = require ( 'is-fullwidth-code-point' ); isFullwidthCodePoint ( '\u8c22' . codePointAt ( 0 )); //=> true isFullwidthCodePoint ( 'a' . codePointAt ( 0 )); //=> false","title":"Usage"},{"location":"node_modules/slice-ansi/node_modules/is-fullwidth-code-point/readme/#api","text":"","title":"API"},{"location":"node_modules/slice-ansi/node_modules/is-fullwidth-code-point/readme/#isfullwidthcodepointcodepoint","text":"","title":"isFullwidthCodePoint(codePoint)"},{"location":"node_modules/slice-ansi/node_modules/is-fullwidth-code-point/readme/#codepoint","text":"Type: number The code point of a character.","title":"codePoint"},{"location":"node_modules/slice-ansi/node_modules/is-fullwidth-code-point/readme/#license","text":"MIT \u00a9 Sindre Sorhus","title":"License"},{"location":"node_modules/spdx-correct/","text":"var correct = require ( 'spdx-correct' ) var assert = require ( 'assert' ) assert . equal ( correct ( 'mit' ), 'MIT' ) assert . equal ( correct ( 'Apache 2' ), 'Apache-2.0' ) assert ( correct ( 'No idea what license' ) === null ) // disable upgrade option assert ( correct ( 'GPL-3.0' ), 'GPL-3.0-or-later' ) assert ( correct ( 'GPL-3.0' , { upgrade : false }), 'GPL-3.0' )","title":"Index"},{"location":"node_modules/spdx-exceptions/","text":"The package exports an array of strings. Each string is an identifier for a license exception under the Software Package Data Exchange (SPDX) software license metadata standard. Copyright and Licensing SPDX \"SPDX\" is a federally registered United States trademark of The Linux Foundation Corporation. From version 2.0 of the SPDX specification: Copyright \u00a9 2010-2015 Linux Foundation and its Contributors. Licensed under the Creative Commons Attribution License 3.0 Unported. All other rights are expressly reserved. The Linux Foundation and the SPDX working groups are good people. Only they decide what \"SPDX\" means, as a standard and otherwise. I respect their work and their rights. You should, too. This Package I created this package by copying exception identifiers out of the SPDX specification. That work was mechanical, routine, and required no creativity whatsoever. - Kyle Mitchell, package author United States users concerned about intellectual property may wish to discuss the following Supreme Court decisions with their attorneys: Baker v. Selden , 101 U.S. 99 (1879) Feist Publications, Inc., v. Rural Telephone Service Co. , 499 U.S. 340 (1991)","title":"Index"},{"location":"node_modules/spdx-exceptions/#copyright-and-licensing","text":"","title":"Copyright and Licensing"},{"location":"node_modules/spdx-exceptions/#spdx","text":"\"SPDX\" is a federally registered United States trademark of The Linux Foundation Corporation. From version 2.0 of the SPDX specification: Copyright \u00a9 2010-2015 Linux Foundation and its Contributors. Licensed under the Creative Commons Attribution License 3.0 Unported. All other rights are expressly reserved. The Linux Foundation and the SPDX working groups are good people. Only they decide what \"SPDX\" means, as a standard and otherwise. I respect their work and their rights. You should, too.","title":"SPDX"},{"location":"node_modules/spdx-exceptions/#this-package","text":"I created this package by copying exception identifiers out of the SPDX specification. That work was mechanical, routine, and required no creativity whatsoever. - Kyle Mitchell, package author United States users concerned about intellectual property may wish to discuss the following Supreme Court decisions with their attorneys: Baker v. Selden , 101 U.S. 99 (1879) Feist Publications, Inc., v. Rural Telephone Service Co. , 499 U.S. 340 (1991)","title":"This Package"},{"location":"node_modules/spdx-expression-parse/","text":"This package parses SPDX license expression strings describing license terms, like package.json license strings , into consistently structured ECMAScript objects. The npm command-line interface depends on this package, as do many automatic license-audit tools. In a nutshell: var parse = require ( 'spdx-expression-parse' ) var assert = require ( 'assert' ) assert . deepEqual ( // Licensed under the terms of the Two-Clause BSD License. parse ( 'BSD-2-Clause' ), { license : 'BSD-2-Clause' } ) assert . throws ( function () { // An invalid SPDX license expression. // Should be `Apache-2.0`. parse ( 'Apache 2' ) }) assert . deepEqual ( // Dual licensed under either: // - LGPL 2.1 // - a combination of Three-Clause BSD and MIT parse ( '(LGPL-2.1 OR BSD-3-Clause AND MIT)' ), { left : { license : 'LGPL-2.1' }, conjunction : 'or' , right : { left : { license : 'BSD-3-Clause' }, conjunction : 'and' , right : { license : 'MIT' } } } ) The syntax comes from the Software Package Data eXchange (SPDX) , a standard from the Linux Foundation for shareable data about software package license terms. SPDX aims to make sharing and auditing license data easy, especially for users of open-source software. The bulk of the SPDX standard describes syntax and semantics of XML metadata files. This package implements two lightweight, plain-text components of that larger standard: The license list , a mapping from specific string identifiers, like Apache-2.0 , to standard form license texts and bolt-on license exceptions. The spdx-license-ids and spdx-exceptions packages implement the license list. spdx-expression-parse depends on and require() s them. Any license identifier from the license list is a valid license expression: var identifiers = [] . concat ( require ( 'spdx-license-ids' )) . concat ( require ( 'spdx-license-ids/deprecated' )) identifiers . forEach ( function ( id ) { assert . deepEqual ( parse ( id ), { license : id }) }) So is any license identifier WITH a standardized license exception: identifiers . forEach ( function ( id ) { require ( 'spdx-exceptions' ). forEach ( function ( e ) { assert . deepEqual ( parse ( id + ' WITH ' + e ), { license : id , exception : e } ) }) }) The license expression language, for describing simple and complex license terms, like MIT for MIT-licensed and (GPL-2.0 OR Apache-2.0) for dual-licensing under GPL 2.0 and Apache 2.0. spdx-expression-parse itself implements license expression language, exporting a parser. assert . deepEqual ( // Licensed under a combination of: // - the MIT License AND // - a combination of: // - LGPL 2.1 (or a later version) AND // - Three-Clause BSD parse ( '(MIT AND (LGPL-2.1+ AND BSD-3-Clause))' ), { left : { license : 'MIT' }, conjunction : 'and' , right : { left : { license : 'LGPL-2.1' , plus : true }, conjunction : 'and' , right : { license : 'BSD-3-Clause' } } } ) The Linux Foundation and its contributors license the SPDX standard under the terms of the Creative Commons Attribution License 3.0 Unported (SPDX: \"CC-BY-3.0\") . \"SPDX\" is a United States federally registered trademark of the Linux Foundation. The authors of this package license their work under the terms of the MIT License.","title":"Index"},{"location":"node_modules/spdx-license-ids/","text":"spdx-license-ids A list of SPDX license identifiers Installation Download JSON directly , or use npm : npm install spdx-license-ids Node.js API require('spdx-license-ids') Type: string[] All license IDs except for the currently deprecated ones. const ids = require ( 'spdx-license-ids' ); //=> ['0BSD', 'AAL', 'ADSL', 'AFL-1.1', 'AFL-1.2', 'AFL-2.0', 'AFL-2.1', 'AFL-3.0', 'AGPL-1.0-only', ...] ids . includes ( 'BSD-3-Clause' ); //=> true ids . includes ( 'CC-BY-1.0' ); //=> true ids . includes ( 'GPL-3.0' ); //=> false require('spdx-license-ids/deprecated') Type: string[] Deprecated license IDs. const deprecatedIds = require ( 'spdx-license-ids/deprecated' ); //=> ['AGPL-1.0', 'AGPL-3.0', 'GFDL-1.1', 'GFDL-1.2', 'GFDL-1.3', 'GPL-1.0', 'GPL-2.0', ...] deprecatedIds . includes ( 'BSD-3-Clause' ); //=> false deprecatedIds . includes ( 'CC-BY-1.0' ); //=> false deprecatedIds . includes ( 'GPL-3.0' ); //=> true License Creative Commons Zero v1.0 Universal","title":"spdx-license-ids"},{"location":"node_modules/spdx-license-ids/#spdx-license-ids","text":"A list of SPDX license identifiers","title":"spdx-license-ids"},{"location":"node_modules/spdx-license-ids/#installation","text":"Download JSON directly , or use npm : npm install spdx-license-ids","title":"Installation"},{"location":"node_modules/spdx-license-ids/#nodejs-api","text":"","title":"Node.js API"},{"location":"node_modules/spdx-license-ids/#requirespdx-license-ids","text":"Type: string[] All license IDs except for the currently deprecated ones. const ids = require ( 'spdx-license-ids' ); //=> ['0BSD', 'AAL', 'ADSL', 'AFL-1.1', 'AFL-1.2', 'AFL-2.0', 'AFL-2.1', 'AFL-3.0', 'AGPL-1.0-only', ...] ids . includes ( 'BSD-3-Clause' ); //=> true ids . includes ( 'CC-BY-1.0' ); //=> true ids . includes ( 'GPL-3.0' ); //=> false","title":"require('spdx-license-ids')"},{"location":"node_modules/spdx-license-ids/#requirespdx-license-idsdeprecated","text":"Type: string[] Deprecated license IDs. const deprecatedIds = require ( 'spdx-license-ids/deprecated' ); //=> ['AGPL-1.0', 'AGPL-3.0', 'GFDL-1.1', 'GFDL-1.2', 'GFDL-1.3', 'GPL-1.0', 'GPL-2.0', ...] deprecatedIds . includes ( 'BSD-3-Clause' ); //=> false deprecatedIds . includes ( 'CC-BY-1.0' ); //=> false deprecatedIds . includes ( 'GPL-3.0' ); //=> true","title":"require('spdx-license-ids/deprecated')"},{"location":"node_modules/spdx-license-ids/#license","text":"Creative Commons Zero v1.0 Universal","title":"License"},{"location":"node_modules/sprintf-js/","text":"sprintf.js sprintf.js is a complete open source JavaScript sprintf implementation for the browser and node.js . Its prototype is simple: string sprintf(string format , [mixed arg1 [, mixed arg2 [ ,...]]]) The placeholders in the format string are marked by % and are followed by one or more of these elements, in this order: An optional number followed by a $ sign that selects which argument index to use for the value. If not specified, arguments will be placed in the same order as the placeholders in the input string. An optional + sign that forces to preceed the result with a plus or minus sign on numeric values. By default, only the - sign is used on negative numbers. An optional padding specifier that says what character to use for padding (if specified). Possible values are 0 or any other character precedeed by a ' (single quote). The default is to pad with spaces . An optional - sign, that causes sprintf to left-align the result of this placeholder. The default is to right-align the result. An optional number, that says how many characters the result should have. If the value to be returned is shorter than this number, the result will be padded. When used with the j (JSON) type specifier, the padding length specifies the tab size used for indentation. An optional precision modifier, consisting of a . (dot) followed by a number, that says how many digits should be displayed for floating point numbers. When used with the g type specifier, it specifies the number of significant digits. When used on a string, it causes the result to be truncated. A type specifier that can be any of: % \u2014 yields a literal % character b \u2014 yields an integer as a binary number c \u2014 yields an integer as the character with that ASCII value d or i \u2014 yields an integer as a signed decimal number e \u2014 yields a float using scientific notation u \u2014 yields an integer as an unsigned decimal number f \u2014 yields a float as is; see notes on precision above g \u2014 yields a float as is; see notes on precision above o \u2014 yields an integer as an octal number s \u2014 yields a string as is x \u2014 yields an integer as a hexadecimal number (lower-case) X \u2014 yields an integer as a hexadecimal number (upper-case) j \u2014 yields a JavaScript object or array as a JSON encoded string JavaScript vsprintf vsprintf is the same as sprintf except that it accepts an array of arguments, rather than a variable number of arguments: vsprintf(\"The first 4 letters of the english alphabet are: %s, %s, %s and %s\", [\"a\", \"b\", \"c\", \"d\"]) Argument swapping You can also swap the arguments. That is, the order of the placeholders doesn't have to match the order of the arguments. You can do that by simply indicating in the format string which arguments the placeholders refer to: sprintf(\"%2$s %3$s a %1$s\", \"cracker\", \"Polly\", \"wants\") And, of course, you can repeat the placeholders without having to increase the number of arguments. Named arguments Format strings may contain replacement fields rather than positional placeholders. Instead of referring to a certain argument, you can now refer to a certain key within an object. Replacement fields are surrounded by rounded parentheses - ( and ) - and begin with a keyword that refers to a key: var user = { name: \"Dolly\" } sprintf(\"Hello %(name)s\", user) // Hello Dolly Keywords in replacement fields can be optionally followed by any number of keywords or indexes: var users = [ {name: \"Dolly\"}, {name: \"Molly\"}, {name: \"Polly\"} ] sprintf(\"Hello %(users[0].name)s, %(users[1].name)s and %(users[2].name)s\", {users: users}) // Hello Dolly, Molly and Polly Note: mixing positional and named placeholders is not (yet) supported Computed values You can pass in a function as a dynamic value and it will be invoked (with no arguments) in order to compute the value on-the-fly. sprintf(\"Current timestamp: %d\", Date.now) // Current timestamp: 1398005382890 sprintf(\"Current date and time: %s\", function() { return new Date().toString() }) AngularJS You can now use sprintf and vsprintf (also aliased as fmt and vfmt respectively) in your AngularJS projects. See demo/ . Installation Via Bower bower install sprintf Or as a node.js module npm install sprintf-js Usage var sprintf = require(\"sprintf-js\").sprintf, vsprintf = require(\"sprintf-js\").vsprintf sprintf(\"%2$s %3$s a %1$s\", \"cracker\", \"Polly\", \"wants\") vsprintf(\"The first 4 letters of the english alphabet are: %s, %s, %s and %s\", [\"a\", \"b\", \"c\", \"d\"]) License sprintf.js is licensed under the terms of the 3-clause BSD license.","title":"sprintf.js"},{"location":"node_modules/sprintf-js/#sprintfjs","text":"sprintf.js is a complete open source JavaScript sprintf implementation for the browser and node.js . Its prototype is simple: string sprintf(string format , [mixed arg1 [, mixed arg2 [ ,...]]]) The placeholders in the format string are marked by % and are followed by one or more of these elements, in this order: An optional number followed by a $ sign that selects which argument index to use for the value. If not specified, arguments will be placed in the same order as the placeholders in the input string. An optional + sign that forces to preceed the result with a plus or minus sign on numeric values. By default, only the - sign is used on negative numbers. An optional padding specifier that says what character to use for padding (if specified). Possible values are 0 or any other character precedeed by a ' (single quote). The default is to pad with spaces . An optional - sign, that causes sprintf to left-align the result of this placeholder. The default is to right-align the result. An optional number, that says how many characters the result should have. If the value to be returned is shorter than this number, the result will be padded. When used with the j (JSON) type specifier, the padding length specifies the tab size used for indentation. An optional precision modifier, consisting of a . (dot) followed by a number, that says how many digits should be displayed for floating point numbers. When used with the g type specifier, it specifies the number of significant digits. When used on a string, it causes the result to be truncated. A type specifier that can be any of: % \u2014 yields a literal % character b \u2014 yields an integer as a binary number c \u2014 yields an integer as the character with that ASCII value d or i \u2014 yields an integer as a signed decimal number e \u2014 yields a float using scientific notation u \u2014 yields an integer as an unsigned decimal number f \u2014 yields a float as is; see notes on precision above g \u2014 yields a float as is; see notes on precision above o \u2014 yields an integer as an octal number s \u2014 yields a string as is x \u2014 yields an integer as a hexadecimal number (lower-case) X \u2014 yields an integer as a hexadecimal number (upper-case) j \u2014 yields a JavaScript object or array as a JSON encoded string","title":"sprintf.js"},{"location":"node_modules/sprintf-js/#javascript-vsprintf","text":"vsprintf is the same as sprintf except that it accepts an array of arguments, rather than a variable number of arguments: vsprintf(\"The first 4 letters of the english alphabet are: %s, %s, %s and %s\", [\"a\", \"b\", \"c\", \"d\"])","title":"JavaScript vsprintf"},{"location":"node_modules/sprintf-js/#argument-swapping","text":"You can also swap the arguments. That is, the order of the placeholders doesn't have to match the order of the arguments. You can do that by simply indicating in the format string which arguments the placeholders refer to: sprintf(\"%2$s %3$s a %1$s\", \"cracker\", \"Polly\", \"wants\") And, of course, you can repeat the placeholders without having to increase the number of arguments.","title":"Argument swapping"},{"location":"node_modules/sprintf-js/#named-arguments","text":"Format strings may contain replacement fields rather than positional placeholders. Instead of referring to a certain argument, you can now refer to a certain key within an object. Replacement fields are surrounded by rounded parentheses - ( and ) - and begin with a keyword that refers to a key: var user = { name: \"Dolly\" } sprintf(\"Hello %(name)s\", user) // Hello Dolly Keywords in replacement fields can be optionally followed by any number of keywords or indexes: var users = [ {name: \"Dolly\"}, {name: \"Molly\"}, {name: \"Polly\"} ] sprintf(\"Hello %(users[0].name)s, %(users[1].name)s and %(users[2].name)s\", {users: users}) // Hello Dolly, Molly and Polly Note: mixing positional and named placeholders is not (yet) supported","title":"Named arguments"},{"location":"node_modules/sprintf-js/#computed-values","text":"You can pass in a function as a dynamic value and it will be invoked (with no arguments) in order to compute the value on-the-fly. sprintf(\"Current timestamp: %d\", Date.now) // Current timestamp: 1398005382890 sprintf(\"Current date and time: %s\", function() { return new Date().toString() })","title":"Computed values"},{"location":"node_modules/sprintf-js/#angularjs","text":"You can now use sprintf and vsprintf (also aliased as fmt and vfmt respectively) in your AngularJS projects. See demo/ .","title":"AngularJS"},{"location":"node_modules/sprintf-js/#installation","text":"","title":"Installation"},{"location":"node_modules/sprintf-js/#via-bower","text":"bower install sprintf","title":"Via Bower"},{"location":"node_modules/sprintf-js/#or-as-a-nodejs-module","text":"npm install sprintf-js","title":"Or as a node.js module"},{"location":"node_modules/sprintf-js/#usage","text":"var sprintf = require(\"sprintf-js\").sprintf, vsprintf = require(\"sprintf-js\").vsprintf sprintf(\"%2$s %3$s a %1$s\", \"cracker\", \"Polly\", \"wants\") vsprintf(\"The first 4 letters of the english alphabet are: %s, %s, %s and %s\", [\"a\", \"b\", \"c\", \"d\"])","title":"Usage"},{"location":"node_modules/sprintf-js/#license","text":"sprintf.js is licensed under the terms of the 3-clause BSD license.","title":"License"},{"location":"node_modules/string-width/readme/","text":"string-width Get the visual width of a string - the number of columns required to display it Some Unicode characters are fullwidth and use double the normal width. ANSI escape codes are stripped and doesn't affect the width. Useful to be able to measure the actual width of command-line output. Install $ npm install --save string-width Usage const stringWidth = require ( 'string-width' ); stringWidth ( '\u53e4' ); //=> 2 stringWidth ( '\\u001b[1m\u53e4\\u001b[22m' ); //=> 2 stringWidth ( 'a' ); //=> 1 Related string-width-cli - CLI for this module string-length - Get the real length of a string widest-line - Get the visual width of the widest line in a string License MIT \u00a9 Sindre Sorhus","title":"string-width [![Build Status](https://travis-ci.org/sindresorhus/string-width.svg?branch=master)](https://travis-ci.org/sindresorhus/string-width)"},{"location":"node_modules/string-width/readme/#string-width","text":"Get the visual width of a string - the number of columns required to display it Some Unicode characters are fullwidth and use double the normal width. ANSI escape codes are stripped and doesn't affect the width. Useful to be able to measure the actual width of command-line output.","title":"string-width"},{"location":"node_modules/string-width/readme/#install","text":"$ npm install --save string-width","title":"Install"},{"location":"node_modules/string-width/readme/#usage","text":"const stringWidth = require ( 'string-width' ); stringWidth ( '\u53e4' ); //=> 2 stringWidth ( '\\u001b[1m\u53e4\\u001b[22m' ); //=> 2 stringWidth ( 'a' ); //=> 1","title":"Usage"},{"location":"node_modules/string-width/readme/#related","text":"string-width-cli - CLI for this module string-length - Get the real length of a string widest-line - Get the visual width of the widest line in a string","title":"Related"},{"location":"node_modules/string-width/readme/#license","text":"MIT \u00a9 Sindre Sorhus","title":"License"},{"location":"node_modules/string-width/node_modules/strip-ansi/readme/","text":"strip-ansi Strip ANSI escape codes Install $ npm install --save strip-ansi Usage var stripAnsi = require ( 'strip-ansi' ); stripAnsi ( '\\u001b[4mcake\\u001b[0m' ); //=> 'cake' Related strip-ansi-cli - CLI for this module has-ansi - Check if a string has ANSI escape codes ansi-regex - Regular expression for matching ANSI escape codes chalk - Terminal string styling done right License MIT \u00a9 Sindre Sorhus","title":"strip-ansi [![Build Status](https://travis-ci.org/chalk/strip-ansi.svg?branch=master)](https://travis-ci.org/chalk/strip-ansi)"},{"location":"node_modules/string-width/node_modules/strip-ansi/readme/#strip-ansi","text":"Strip ANSI escape codes","title":"strip-ansi"},{"location":"node_modules/string-width/node_modules/strip-ansi/readme/#install","text":"$ npm install --save strip-ansi","title":"Install"},{"location":"node_modules/string-width/node_modules/strip-ansi/readme/#usage","text":"var stripAnsi = require ( 'strip-ansi' ); stripAnsi ( '\\u001b[4mcake\\u001b[0m' ); //=> 'cake'","title":"Usage"},{"location":"node_modules/string-width/node_modules/strip-ansi/readme/#related","text":"strip-ansi-cli - CLI for this module has-ansi - Check if a string has ANSI escape codes ansi-regex - Regular expression for matching ANSI escape codes chalk - Terminal string styling done right","title":"Related"},{"location":"node_modules/string-width/node_modules/strip-ansi/readme/#license","text":"MIT \u00a9 Sindre Sorhus","title":"License"},{"location":"node_modules/strip-ansi/readme/","text":"strip-ansi Strip ANSI escape codes from a string Install $ npm install strip-ansi Usage const stripAnsi = require ( 'strip-ansi' ); stripAnsi ( '\\u001B[4mUnicorn\\u001B[0m' ); //=> 'Unicorn' stripAnsi ( '\\u001B]8;;https://github.com\\u0007Click\\u001B]8;;\\u0007' ); //=> 'Click' strip-ansi for enterprise Available as part of the Tidelift Subscription. The maintainers of strip-ansi and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. Learn more. Related strip-ansi-cli - CLI for this module strip-ansi-stream - Streaming version of this module has-ansi - Check if a string has ANSI escape codes ansi-regex - Regular expression for matching ANSI escape codes chalk - Terminal string styling done right Maintainers Sindre Sorhus Josh Junon","title":"strip-ansi [![Build Status](https://travis-ci.org/chalk/strip-ansi.svg?branch=master)](https://travis-ci.org/chalk/strip-ansi)"},{"location":"node_modules/strip-ansi/readme/#strip-ansi","text":"Strip ANSI escape codes from a string","title":"strip-ansi"},{"location":"node_modules/strip-ansi/readme/#install","text":"$ npm install strip-ansi","title":"Install"},{"location":"node_modules/strip-ansi/readme/#usage","text":"const stripAnsi = require ( 'strip-ansi' ); stripAnsi ( '\\u001B[4mUnicorn\\u001B[0m' ); //=> 'Unicorn' stripAnsi ( '\\u001B]8;;https://github.com\\u0007Click\\u001B]8;;\\u0007' ); //=> 'Click'","title":"Usage"},{"location":"node_modules/strip-ansi/readme/#strip-ansi-for-enterprise","text":"Available as part of the Tidelift Subscription. The maintainers of strip-ansi and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. Learn more.","title":"strip-ansi for enterprise"},{"location":"node_modules/strip-ansi/readme/#related","text":"strip-ansi-cli - CLI for this module strip-ansi-stream - Streaming version of this module has-ansi - Check if a string has ANSI escape codes ansi-regex - Regular expression for matching ANSI escape codes chalk - Terminal string styling done right","title":"Related"},{"location":"node_modules/strip-ansi/readme/#maintainers","text":"Sindre Sorhus Josh Junon","title":"Maintainers"},{"location":"node_modules/strip-ansi/node_modules/ansi-regex/readme/","text":"ansi-regex Regular expression for matching ANSI escape codes Install $ npm install ansi-regex Usage const ansiRegex = require ( 'ansi-regex' ); ansiRegex (). test ( '\\u001B[4mcake\\u001B[0m' ); //=> true ansiRegex (). test ( 'cake' ); //=> false '\\u001B[4mcake\\u001B[0m' . match ( ansiRegex ()); //=> ['\\u001B[4m', '\\u001B[0m'] '\\u001B[4mcake\\u001B[0m' . match ( ansiRegex ({ onlyFirst : true })); //=> ['\\u001B[4m'] '\\u001B]8;;https://github.com\\u0007click\\u001B]8;;\\u0007' . match ( ansiRegex ()); //=> ['\\u001B]8;;https://github.com\\u0007', '\\u001B]8;;\\u0007'] API ansiRegex(options?) Returns a regex for matching ANSI escape codes. options Type: object onlyFirst Type: boolean Default: false (Matches any ANSI escape codes in a string) Match only the first ANSI escape. FAQ Why do you test for codes not in the ECMA 48 standard? Some of the codes we run as a test are codes that we acquired finding various lists of non-standard or manufacturer specific codes. We test for both standard and non-standard codes, as most of them follow the same or similar format and can be safely matched in strings without the risk of removing actual string content. There are a few non-standard control codes that do not follow the traditional format (i.e. they end in numbers) thus forcing us to exclude them from the test because we cannot reliably match them. On the historical side, those ECMA standards were established in the early 90's whereas the VT100, for example, was designed in the mid/late 70's. At that point in time, control codes were still pretty ungoverned and engineers used them for a multitude of things, namely to activate hardware ports that may have been proprietary. Somewhere else you see a similar 'anarchy' of codes is in the x86 architecture for processors; there are a ton of \"interrupts\" that can mean different things on certain brands of processors, most of which have been phased out. Maintainers Sindre Sorhus Josh Junon Get professional support for this package with a Tidelift subscription Tidelift helps make open source sustainable for maintainers while giving companies assurances about security, maintenance, and licensing for their dependencies.","title":"ansi-regex"},{"location":"node_modules/strip-ansi/node_modules/ansi-regex/readme/#ansi-regex","text":"Regular expression for matching ANSI escape codes","title":"ansi-regex"},{"location":"node_modules/strip-ansi/node_modules/ansi-regex/readme/#install","text":"$ npm install ansi-regex","title":"Install"},{"location":"node_modules/strip-ansi/node_modules/ansi-regex/readme/#usage","text":"const ansiRegex = require ( 'ansi-regex' ); ansiRegex (). test ( '\\u001B[4mcake\\u001B[0m' ); //=> true ansiRegex (). test ( 'cake' ); //=> false '\\u001B[4mcake\\u001B[0m' . match ( ansiRegex ()); //=> ['\\u001B[4m', '\\u001B[0m'] '\\u001B[4mcake\\u001B[0m' . match ( ansiRegex ({ onlyFirst : true })); //=> ['\\u001B[4m'] '\\u001B]8;;https://github.com\\u0007click\\u001B]8;;\\u0007' . match ( ansiRegex ()); //=> ['\\u001B]8;;https://github.com\\u0007', '\\u001B]8;;\\u0007']","title":"Usage"},{"location":"node_modules/strip-ansi/node_modules/ansi-regex/readme/#api","text":"","title":"API"},{"location":"node_modules/strip-ansi/node_modules/ansi-regex/readme/#ansiregexoptions","text":"Returns a regex for matching ANSI escape codes.","title":"ansiRegex(options?)"},{"location":"node_modules/strip-ansi/node_modules/ansi-regex/readme/#options","text":"Type: object","title":"options"},{"location":"node_modules/strip-ansi/node_modules/ansi-regex/readme/#onlyfirst","text":"Type: boolean Default: false (Matches any ANSI escape codes in a string) Match only the first ANSI escape.","title":"onlyFirst"},{"location":"node_modules/strip-ansi/node_modules/ansi-regex/readme/#faq","text":"","title":"FAQ"},{"location":"node_modules/strip-ansi/node_modules/ansi-regex/readme/#why-do-you-test-for-codes-not-in-the-ecma-48-standard","text":"Some of the codes we run as a test are codes that we acquired finding various lists of non-standard or manufacturer specific codes. We test for both standard and non-standard codes, as most of them follow the same or similar format and can be safely matched in strings without the risk of removing actual string content. There are a few non-standard control codes that do not follow the traditional format (i.e. they end in numbers) thus forcing us to exclude them from the test because we cannot reliably match them. On the historical side, those ECMA standards were established in the early 90's whereas the VT100, for example, was designed in the mid/late 70's. At that point in time, control codes were still pretty ungoverned and engineers used them for a multitude of things, namely to activate hardware ports that may have been proprietary. Somewhere else you see a similar 'anarchy' of codes is in the x86 architecture for processors; there are a ton of \"interrupts\" that can mean different things on certain brands of processors, most of which have been phased out.","title":"Why do you test for codes not in the ECMA 48 standard?"},{"location":"node_modules/strip-ansi/node_modules/ansi-regex/readme/#maintainers","text":"Sindre Sorhus Josh Junon Get professional support for this package with a Tidelift subscription Tidelift helps make open source sustainable for maintainers while giving companies assurances about security, maintenance, and licensing for their dependencies.","title":"Maintainers"},{"location":"node_modules/strip-bom/readme/","text":"strip-bom Strip UTF-8 byte order mark (BOM) from a string/buffer From Wikipedia: The Unicode Standard permits the BOM in UTF-8, but does not require nor recommend its use. Byte order has no meaning in UTF-8. Install $ npm install --save strip-bom Usage var fs = require ( 'fs' ); var stripBom = require ( 'strip-bom' ); stripBom ( '\\uFEFFunicorn' ); //=> 'unicorn' stripBom ( fs . readFileSync ( 'unicorn.txt' )); //=> 'unicorn' Related strip-bom-cli - CLI for this module strip-bom-stream - Stream version of this module License MIT \u00a9 Sindre Sorhus","title":"strip-bom [![Build Status](https://travis-ci.org/sindresorhus/strip-bom.svg?branch=master)](https://travis-ci.org/sindresorhus/strip-bom)"},{"location":"node_modules/strip-bom/readme/#strip-bom","text":"Strip UTF-8 byte order mark (BOM) from a string/buffer From Wikipedia: The Unicode Standard permits the BOM in UTF-8, but does not require nor recommend its use. Byte order has no meaning in UTF-8.","title":"strip-bom"},{"location":"node_modules/strip-bom/readme/#install","text":"$ npm install --save strip-bom","title":"Install"},{"location":"node_modules/strip-bom/readme/#usage","text":"var fs = require ( 'fs' ); var stripBom = require ( 'strip-bom' ); stripBom ( '\\uFEFFunicorn' ); //=> 'unicorn' stripBom ( fs . readFileSync ( 'unicorn.txt' )); //=> 'unicorn'","title":"Usage"},{"location":"node_modules/strip-bom/readme/#related","text":"strip-bom-cli - CLI for this module strip-bom-stream - Stream version of this module","title":"Related"},{"location":"node_modules/strip-bom/readme/#license","text":"MIT \u00a9 Sindre Sorhus","title":"License"},{"location":"node_modules/structured-source/","text":"StructuredSource About Provides StructuredSource and functionality for converting range and loc vice versa. Installation npm install structured-source Usage const StructuredSource = require ( 'structured-source' ); let src = new StructuredSource ( 'aaa\\u2028aaaa\\u2029aaaaa\\n' ); // positionToIndex({ line: number, column: number) -> number assert ( src . positionToIndex ({ line : 1 , column : 2 }) === 2 ); // indexToPosition(number) -> { line: number, column: number } assert . deepEqual ( src . indexToPosition ( 2 ), { line : 1 , column : 2 }); // rangeToLocation([ number, number ]) -> { start: { line: number, column: number}, end: { line: number, column: number } } assert . deepEqual ( src . rangeToLocation ([ 0 , 2 ]), { start : { line : 1 , column : 0 }, end : { line : 1 , column : 2 } }); // locationToRange({ start: { line: number, column: number}, end: { line: number, column: number } }) -> [ number, number ] assert . deepEqual ( src . locationToRange ({ start : { line : 1 , column : 0 }, end : { line : 1 , column : 2 } }), [ 0 , 2 ]); License Copyright (C) 2012-2014 Yusuke Suzuki (twitter: @Constellation ) and other contributors. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Index"},{"location":"node_modules/structured-source/#structuredsource","text":"","title":"StructuredSource"},{"location":"node_modules/structured-source/#about","text":"Provides StructuredSource and functionality for converting range and loc vice versa.","title":"About"},{"location":"node_modules/structured-source/#installation","text":"npm install structured-source","title":"Installation"},{"location":"node_modules/structured-source/#usage","text":"const StructuredSource = require ( 'structured-source' ); let src = new StructuredSource ( 'aaa\\u2028aaaa\\u2029aaaaa\\n' ); // positionToIndex({ line: number, column: number) -> number assert ( src . positionToIndex ({ line : 1 , column : 2 }) === 2 ); // indexToPosition(number) -> { line: number, column: number } assert . deepEqual ( src . indexToPosition ( 2 ), { line : 1 , column : 2 }); // rangeToLocation([ number, number ]) -> { start: { line: number, column: number}, end: { line: number, column: number } } assert . deepEqual ( src . rangeToLocation ([ 0 , 2 ]), { start : { line : 1 , column : 0 }, end : { line : 1 , column : 2 } }); // locationToRange({ start: { line: number, column: number}, end: { line: number, column: number } }) -> [ number, number ] assert . deepEqual ( src . locationToRange ({ start : { line : 1 , column : 0 }, end : { line : 1 , column : 2 } }), [ 0 , 2 ]);","title":"Usage"},{"location":"node_modules/structured-source/#license","text":"Copyright (C) 2012-2014 Yusuke Suzuki (twitter: @Constellation ) and other contributors. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"License"},{"location":"node_modules/supports-color/readme/","text":"supports-color Detect whether a terminal supports color Install $ npm install --save supports-color Usage var supportsColor = require ( 'supports-color' ); if ( supportsColor ) { console . log ( 'Terminal supports color' ); } It obeys the --color and --no-color CLI flags. For situations where using --color is not possible, add an environment variable FORCE_COLOR with any value to force color. Trumps --no-color . Related supports-color-cli - CLI for this module chalk - Terminal string styling done right License MIT \u00a9 Sindre Sorhus","title":"supports-color [![Build Status](https://travis-ci.org/chalk/supports-color.svg?branch=master)](https://travis-ci.org/chalk/supports-color)"},{"location":"node_modules/supports-color/readme/#supports-color","text":"Detect whether a terminal supports color","title":"supports-color"},{"location":"node_modules/supports-color/readme/#install","text":"$ npm install --save supports-color","title":"Install"},{"location":"node_modules/supports-color/readme/#usage","text":"var supportsColor = require ( 'supports-color' ); if ( supportsColor ) { console . log ( 'Terminal supports color' ); } It obeys the --color and --no-color CLI flags. For situations where using --color is not possible, add an environment variable FORCE_COLOR with any value to force color. Trumps --no-color .","title":"Usage"},{"location":"node_modules/supports-color/readme/#related","text":"supports-color-cli - CLI for this module chalk - Terminal string styling done right","title":"Related"},{"location":"node_modules/supports-color/readme/#license","text":"MIT \u00a9 Sindre Sorhus","title":"License"},{"location":"node_modules/supports-preserve-symlinks-flag/","text":"node-supports-preserve-symlinks-flag Determine if the current node version supports the --preserve-symlinks flag. Example var supportsPreserveSymlinks = require ( 'node-supports-preserve-symlinks-flag' ); var assert = require ( 'assert' ); assert . equal ( supportsPreserveSymlinks , null ); // in a browser assert . equal ( supportsPreserveSymlinks , false ); // in node < v6.2 assert . equal ( supportsPreserveSymlinks , true ); // in node v6.2+ Tests Simply clone the repo, npm install , and run npm test","title":"node-supports-preserve-symlinks-flag <sup>[![Version Badge][npm-version-svg]][package-url]</sup>"},{"location":"node_modules/supports-preserve-symlinks-flag/#node-supports-preserve-symlinks-flag","text":"Determine if the current node version supports the --preserve-symlinks flag.","title":"node-supports-preserve-symlinks-flag "},{"location":"node_modules/supports-preserve-symlinks-flag/#example","text":"var supportsPreserveSymlinks = require ( 'node-supports-preserve-symlinks-flag' ); var assert = require ( 'assert' ); assert . equal ( supportsPreserveSymlinks , null ); // in a browser assert . equal ( supportsPreserveSymlinks , false ); // in node < v6.2 assert . equal ( supportsPreserveSymlinks , true ); // in node v6.2+","title":"Example"},{"location":"node_modules/supports-preserve-symlinks-flag/#tests","text":"Simply clone the repo, npm install , and run npm test","title":"Tests"},{"location":"node_modules/supports-preserve-symlinks-flag/CHANGELOG/","text":"Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning . v1.0.0 - 2022-01-02 Commits Tests e2f59ad Initial commit dc222aa [meta] do not publish workflow files 5ef77f7 npm init 992b068 read me 6c9afa9 Initial implementation 2f98925 [meta] add auto-changelog 6c476ae [Dev Deps] add eslint , @ljharb/eslint-config d0fffc8 Only apps should have lockfiles ab318ed [meta] add safe-publish-latest 2bb23b3 [meta] add sideEffects flag 600223b","title":"Changelog"},{"location":"node_modules/supports-preserve-symlinks-flag/CHANGELOG/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"node_modules/supports-preserve-symlinks-flag/CHANGELOG/#v100-2022-01-02","text":"","title":"v1.0.0 - 2022-01-02"},{"location":"node_modules/supports-preserve-symlinks-flag/CHANGELOG/#commits","text":"Tests e2f59ad Initial commit dc222aa [meta] do not publish workflow files 5ef77f7 npm init 992b068 read me 6c9afa9 Initial implementation 2f98925 [meta] add auto-changelog 6c476ae [Dev Deps] add eslint , @ljharb/eslint-config d0fffc8 Only apps should have lockfiles ab318ed [meta] add safe-publish-latest 2bb23b3 [meta] add sideEffects flag 600223b","title":"Commits"},{"location":"node_modules/table/","text":"Table Produces a string that represents array data in a text table. Table Features Install Usage API table createStream getBorderCharacters Features Works with strings containing fullwidth characters. Works with strings containing ANSI escape codes . Configurable border characters. Configurable content alignment per column. Configurable content padding per column. Configurable column width. Text wrapping. Install npm install table Usage import { table } from 'table' ; // Using commonjs? // const { table } = require('table'); const data = [ [ '0A' , '0B' , '0C' ], [ '1A' , '1B' , '1C' ], [ '2A' , '2B' , '2C' ] ]; console . log ( table ( data )); \u2554\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2557 \u2551 0A \u2502 0B \u2502 0C \u2551 \u255f\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2562 \u2551 1A \u2502 1B \u2502 1C \u2551 \u255f\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2562 \u2551 2A \u2502 2B \u2502 2C \u2551 \u255a\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u255d API table Returns the string in the table format Parameters: - data : The data to display - Type: any[][] - Required: true config : Table configuration Type: object Required: false config.border Type: { [type: string]: string } \\ Default: honeywell template Custom borders. The keys are any of: - topLeft , topRight , topBody , topJoin - bottomLeft , bottomRight , bottomBody , bottomJoin - joinLeft , joinRight , joinBody , joinJoin - bodyLeft , bodyRight , bodyJoin - headerJoin const data = [ [ '0A' , '0B' , '0C' ], [ '1A' , '1B' , '1C' ], [ '2A' , '2B' , '2C' ] ]; const config = { border : { topBody : `\u2500` , topJoin : `\u252c` , topLeft : `\u250c` , topRight : `\u2510` , bottomBody : `\u2500` , bottomJoin : `\u2534` , bottomLeft : `\u2514` , bottomRight : `\u2518` , bodyLeft : `\u2502` , bodyRight : `\u2502` , bodyJoin : `\u2502` , joinBody : `\u2500` , joinLeft : `\u251c` , joinRight : `\u2524` , joinJoin : `\u253c` } }; console . log ( table ( data , config )); \u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510 \u2502 0A \u2502 0B \u2502 0C \u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2524 \u2502 1A \u2502 1B \u2502 1C \u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2524 \u2502 2A \u2502 2B \u2502 2C \u2502 \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518 config.drawVerticalLine Type: (lineIndex: number, columnCount: number) => boolean \\ Default: () => true It is used to tell whether to draw a vertical line. This callback is called for each vertical border of the table. If the table has n columns, then the index parameter is alternatively received all numbers in range [0, n] inclusively. const data = [ [ '0A' , '0B' , '0C' ], [ '1A' , '1B' , '1C' ], [ '2A' , '2B' , '2C' ], [ '3A' , '3B' , '3C' ], [ '4A' , '4B' , '4C' ] ]; const config = { drawVerticalLine : ( lineIndex , columnCount ) => { return lineIndex === 0 || lineIndex === columnCount ; } }; console . log ( table ( data , config )); \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557 \u2551 0A 0B 0C \u2551 \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562 \u2551 1A 1B 1C \u2551 \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562 \u2551 2A 2B 2C \u2551 \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562 \u2551 3A 3B 3C \u2551 \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562 \u2551 4A 4B 4C \u2551 \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d config.drawHorizontalLine Type: (lineIndex: number, rowCount: number) => boolean \\ Default: () => true It is used to tell whether to draw a horizontal line. This callback is called for each horizontal border of the table. If the table has n rows, then the index parameter is alternatively received all numbers in range [0, n] inclusively. If the table has n rows and contains the header, then the range will be [0, n+1] inclusively. const data = [ [ '0A' , '0B' , '0C' ], [ '1A' , '1B' , '1C' ], [ '2A' , '2B' , '2C' ], [ '3A' , '3B' , '3C' ], [ '4A' , '4B' , '4C' ] ]; const config = { drawHorizontalLine : ( lineIndex , rowCount ) => { return lineIndex === 0 || lineIndex === 1 || lineIndex === rowCount - 1 || lineIndex === rowCount ; } }; console . log ( table ( data , config )); \u2554\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2557 \u2551 0A \u2502 0B \u2502 0C \u2551 \u255f\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2562 \u2551 1A \u2502 1B \u2502 1C \u2551 \u2551 2A \u2502 2B \u2502 2C \u2551 \u2551 3A \u2502 3B \u2502 3C \u2551 \u255f\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2562 \u2551 4A \u2502 4B \u2502 4C \u2551 \u255a\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u255d config.singleLine Type: boolean \\ Default: false If true , horizontal lines inside the table are not drawn. This option also overrides the config.drawHorizontalLine if specified. const data = [ [ '-rw-r--r--' , '1' , 'pandorym' , 'staff' , '1529' , 'May 23 11:25' , 'LICENSE' ], [ '-rw-r--r--' , '1' , 'pandorym' , 'staff' , '16327' , 'May 23 11:58' , 'README.md' ], [ 'drwxr-xr-x' , '76' , 'pandorym' , 'staff' , '2432' , 'May 23 12:02' , 'dist' ], [ 'drwxr-xr-x' , '634' , 'pandorym' , 'staff' , '20288' , 'May 23 11:54' , 'node_modules' ], [ '-rw-r--r--' , '1,' , 'pandorym' , 'staff' , '525688' , 'May 23 11:52' , 'package-lock.json' ], [ '-rw-r--r--@' , '1' , 'pandorym' , 'staff' , '2440' , 'May 23 11:25' , 'package.json' ], [ 'drwxr-xr-x' , '27' , 'pandorym' , 'staff' , '864' , 'May 23 11:25' , 'src' ], [ 'drwxr-xr-x' , '20' , 'pandorym' , 'staff' , '640' , 'May 23 11:25' , 'test' ], ]; const config = { singleLine : true }; console . log ( table ( data , config )); \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557 \u2551 -rw-r--r-- \u2502 1 \u2502 pandorym \u2502 staff \u2502 1529 \u2502 May 23 11:25 \u2502 LICENSE \u2551 \u2551 -rw-r--r-- \u2502 1 \u2502 pandorym \u2502 staff \u2502 16327 \u2502 May 23 11:58 \u2502 README.md \u2551 \u2551 drwxr-xr-x \u2502 76 \u2502 pandorym \u2502 staff \u2502 2432 \u2502 May 23 12:02 \u2502 dist \u2551 \u2551 drwxr-xr-x \u2502 634 \u2502 pandorym \u2502 staff \u2502 20288 \u2502 May 23 11:54 \u2502 node_modules \u2551 \u2551 -rw-r--r-- \u2502 1, \u2502 pandorym \u2502 staff \u2502 525688 \u2502 May 23 11:52 \u2502 package-lock.json \u2551 \u2551 -rw-r--r--@ \u2502 1 \u2502 pandorym \u2502 staff \u2502 2440 \u2502 May 23 11:25 \u2502 package.json \u2551 \u2551 drwxr-xr-x \u2502 27 \u2502 pandorym \u2502 staff \u2502 864 \u2502 May 23 11:25 \u2502 src \u2551 \u2551 drwxr-xr-x \u2502 20 \u2502 pandorym \u2502 staff \u2502 640 \u2502 May 23 11:25 \u2502 test \u2551 \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d config.columns Type: Column[] | { [columnIndex: number]: Column } Column specific configurations. config.columns[*].width Type: number \\ Default: the maximum cell widths of the column Column width (excluding the paddings). const data = [ [ '0A' , '0B' , '0C' ], [ '1A' , '1B' , '1C' ], [ '2A' , '2B' , '2C' ] ]; const config = { columns : { 1 : { width : 10 } } }; console . log ( table ( data , config )); \u2554\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2557 \u2551 0A \u2502 0B \u2502 0C \u2551 \u255f\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2562 \u2551 1A \u2502 1B \u2502 1C \u2551 \u255f\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2562 \u2551 2A \u2502 2B \u2502 2C \u2551 \u255a\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u255d config.columns[*].alignment Type: 'center' | 'justify' | 'left' | 'right' \\ Default: 'left' Cell content horizontal alignment const data = [ [ '0A' , '0B' , '0C' , '0D 0E 0F' ], [ '1A' , '1B' , '1C' , '1D 1E 1F' ], [ '2A' , '2B' , '2C' , '2D 2E 2F' ], ]; const config = { columnDefault : { width : 10 , }, columns : [ { alignment : 'left' }, { alignment : 'center' }, { alignment : 'right' }, { alignment : 'justify' } ], }; console . log ( table ( data , config )); \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557 \u2551 0A \u2502 0B \u2502 0C \u2502 0D 0E 0F \u2551 \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562 \u2551 1A \u2502 1B \u2502 1C \u2502 1D 1E 1F \u2551 \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562 \u2551 2A \u2502 2B \u2502 2C \u2502 2D 2E 2F \u2551 \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d config.columns[*].verticalAlignment Type: 'top' | 'middle' | 'bottom' \\ Default: 'top' Cell content vertical alignment const data = [ [ 'A' , 'B' , 'C' , 'DEF' ], ]; const config = { columnDefault : { width : 1 , }, columns : [ { verticalAlignment : 'top' }, { verticalAlignment : 'middle' }, { verticalAlignment : 'bottom' }, ], }; console . log ( table ( data , config )); \u2554\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2557 \u2551 A \u2502 \u2502 \u2502 D \u2551 \u2551 \u2502 B \u2502 \u2502 E \u2551 \u2551 \u2502 \u2502 C \u2502 F \u2551 \u255a\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u255d config.columns[*].paddingLeft Type: number \\ Default: 1 The number of whitespaces used to pad the content on the left. config.columns[*].paddingRight Type: number \\ Default: 1 The number of whitespaces used to pad the content on the right. The paddingLeft and paddingRight options do not count on the column width. So the column has width = 5 , paddingLeft = 2 and paddingRight = 2 will have the total width is 9 . const data = [ [ '0A' , 'AABBCC' , '0C' ], [ '1A' , '1B' , '1C' ], [ '2A' , '2B' , '2C' ] ]; const config = { columns : [ { paddingLeft : 3 }, { width : 2 , paddingRight : 3 } ] }; console . log ( table ( data , config )); \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2557 \u2551 0A \u2502 AA \u2502 0C \u2551 \u2551 \u2502 BB \u2502 \u2551 \u2551 \u2502 CC \u2502 \u2551 \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2562 \u2551 1A \u2502 1B \u2502 1C \u2551 \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2562 \u2551 2A \u2502 2B \u2502 2C \u2551 \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u255d config.columns[*].truncate Type: number \\ Default: Infinity The number of characters is which the content will be truncated. To handle a content that overflows the container width, table package implements text wrapping . However, sometimes you may want to truncate content that is too long to be displayed in the table. const data = [ [ 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus pulvinar nibh sed mauris convallis dapibus. Nunc venenatis tempus nulla sit amet viverra.' ] ]; const config = { columns : [ { width : 20 , truncate : 100 } ] }; console . log ( table ( data , config )); \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557 \u2551 Lorem ipsum dolor si \u2551 \u2551 t amet, consectetur \u2551 \u2551 adipiscing elit. Pha \u2551 \u2551 sellus pulvinar nibh \u2551 \u2551 sed mauris convall\u2026 \u2551 \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d config.columns[*].wrapWord Type: boolean \\ Default: false The table package implements auto text wrapping, i.e., text that has the width greater than the container width will be separated into multiple lines at the nearest space or one of the special characters: \\|/_.,;- . When wrapWord is false : const data = [ [ 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus pulvinar nibh sed mauris convallis dapibus. Nunc venenatis tempus nulla sit amet viverra.' ] ]; const config = { columns : [ { width : 20 } ] }; console . log ( table ( data , config )); \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557 \u2551 Lorem ipsum dolor si \u2551 \u2551 t amet, consectetur \u2551 \u2551 adipiscing elit. Pha \u2551 \u2551 sellus pulvinar nibh \u2551 \u2551 sed mauris convallis \u2551 \u2551 dapibus. Nunc venena \u2551 \u2551 tis tempus nulla sit \u2551 \u2551 amet viverra. \u2551 \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d When wrapWord is true : \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557 \u2551 Lorem ipsum dolor \u2551 \u2551 sit amet, \u2551 \u2551 consectetur \u2551 \u2551 adipiscing elit. \u2551 \u2551 Phasellus pulvinar \u2551 \u2551 nibh sed mauris \u2551 \u2551 convallis dapibus. \u2551 \u2551 Nunc venenatis \u2551 \u2551 tempus nulla sit \u2551 \u2551 amet viverra. \u2551 \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d config.columnDefault Type: Column \\ Default: {} The default configuration for all columns. Column-specific settings will overwrite the default values. config.header Type: object Header configuration. Deprecated in favor of the new spanning cells API. The header configuration inherits the most of the column's, except: - content {string} : the header content. - width: calculate based on the content width automatically. - alignment: center be default. - verticalAlignment: is not supported. - config.border.topJoin will be config.border.topBody for prettier. const data = [ [ '0A' , '0B' , '0C' ], [ '1A' , '1B' , '1C' ], [ '2A' , '2B' , '2C' ], ]; const config = { columnDefault : { width : 10 , }, header : { alignment : 'center' , content : 'THE HEADER\\nThis is the table about something' , }, } console . log ( table ( data , config )); \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557 \u2551 THE HEADER \u2551 \u2551 This is the table about something \u2551 \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562 \u2551 0A \u2502 0B \u2502 0C \u2551 \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562 \u2551 1A \u2502 1B \u2502 1C \u2551 \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562 \u2551 2A \u2502 2B \u2502 2C \u2551 \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d config.spanningCells Type: SpanningCellConfig[] Spanning cells configuration. The configuration should be straightforward: just specify an array of minimal cell configurations including the position of top-left cell and the number of columns and/or rows will be expanded from it. The content of overlap cells will be ignored to make the data shape be consistent. By default, the configuration of column that the top-left cell belongs to will be applied to the whole spanning cell, except: * The width will be summed up of all spanning columns. * The paddingRight will be received from the right-most column intentionally. Advances customized column-like styles can be configurable to each spanning cell to overwrite the default behavior. const data = [ [ 'Test Coverage Report' , '' , '' , '' , '' , '' ], [ 'Module' , 'Component' , 'Test Cases' , 'Failures' , 'Durations' , 'Success Rate' ], [ 'Services' , 'User' , '50' , '30' , '3m 7s' , '60.0%' ], [ '' , 'Payment' , '100' , '80' , '7m 15s' , '80.0%' ], [ 'Subtotal' , '' , '150' , '110' , '10m 22s' , '73.3%' ], [ 'Controllers' , 'User' , '24' , '18' , '1m 30s' , '75.0%' ], [ '' , 'Payment' , '30' , '24' , '50s' , '80.0%' ], [ 'Subtotal' , '' , '54' , '42' , '2m 20s' , '77.8%' ], [ 'Total' , '' , '204' , '152' , '12m 42s' , '74.5%' ], ]; const config = { columns : [ { alignment : 'center' , width : 12 }, { alignment : 'center' , width : 10 }, { alignment : 'right' }, { alignment : 'right' }, { alignment : 'right' }, { alignment : 'right' } ], spanningCells : [ { col : 0 , row : 0 , colSpan : 6 }, { col : 0 , row : 2 , rowSpan : 2 , verticalAlignment : 'middle' }, { col : 0 , row : 4 , colSpan : 2 , alignment : 'right' }, { col : 0 , row : 5 , rowSpan : 2 , verticalAlignment : 'middle' }, { col : 0 , row : 7 , colSpan : 2 , alignment : 'right' }, { col : 0 , row : 8 , colSpan : 2 , alignment : 'right' } ], }; console . log ( table ( data , config )); \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557 \u2551 Test Coverage Report \u2551 \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562 \u2551 Module \u2502 Component \u2502 Test Cases \u2502 Failures \u2502 Durations \u2502 Success Rate \u2551 \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562 \u2551 \u2502 User \u2502 50 \u2502 30 \u2502 3m 7s \u2502 60.0% \u2551 \u2551 Services \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562 \u2551 \u2502 Payment \u2502 100 \u2502 80 \u2502 7m 15s \u2502 80.0% \u2551 \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562 \u2551 Subtotal \u2502 150 \u2502 110 \u2502 10m 22s \u2502 73.3% \u2551 \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562 \u2551 \u2502 User \u2502 24 \u2502 18 \u2502 1m 30s \u2502 75.0% \u2551 \u2551 Controllers \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562 \u2551 \u2502 Payment \u2502 30 \u2502 24 \u2502 50s \u2502 80.0% \u2551 \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562 \u2551 Subtotal \u2502 54 \u2502 42 \u2502 2m 20s \u2502 77.8% \u2551 \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562 \u2551 Total \u2502 204 \u2502 152 \u2502 12m 42s \u2502 74.5% \u2551 \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d createStream table package exports createStream function used to draw a table and append rows. Parameter: - config: the same as table 's, except config.columnDefault.width and config.columnCount must be provided. import { createStream } from 'table' ; const config = { columnDefault : { width : 50 }, columnCount : 1 }; const stream = createStream ( config ); setInterval (() => { stream . write ([ new Date ()]); }, 500 ); table package uses ANSI escape codes to overwrite the output of the last line when a new row is printed. The underlying implementation is explained in this Stack Overflow answer . Streaming supports all of the configuration properties and functionality of a static table (such as auto text wrapping, alignment and padding), e.g. import { createStream } from 'table' ; import _ from 'lodash' ; const config = { columnDefault : { width : 50 }, columnCount : 3 , columns : [ { width : 10 , alignment : 'right' }, { alignment : 'center' }, { width : 10 } ] }; const stream = createStream ( config ); let i = 0 ; setInterval (() => { let random ; random = _ . sample ( 'abcdefghijklmnopqrstuvwxyz' , _ . random ( 1 , 30 )). join ( '' ); stream . write ([ i ++ , new Date (), random ]); }, 500 ); getBorderCharacters Parameter: - template - Type: 'honeywell' | 'norc' | 'ramac' | 'void' - Required: true You can load one of the predefined border templates using getBorderCharacters function. import { table , getBorderCharacters } from 'table' ; const data = [ [ '0A' , '0B' , '0C' ], [ '1A' , '1B' , '1C' ], [ '2A' , '2B' , '2C' ] ]; const config = { border : getBorderCharacters ( `name of the template` ) }; console . log ( table ( data , config )); # honeywell \u2554\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2557 \u2551 0A \u2502 0B \u2502 0C \u2551 \u255f\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2562 \u2551 1A \u2502 1B \u2502 1C \u2551 \u255f\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2562 \u2551 2A \u2502 2B \u2502 2C \u2551 \u255a\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u255d # norc \u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510 \u2502 0A \u2502 0B \u2502 0C \u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2524 \u2502 1A \u2502 1B \u2502 1C \u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2524 \u2502 2A \u2502 2B \u2502 2C \u2502 \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518 # ramac (ASCII; for use in terminals that do not support Unicode characters) +----+----+----+ | 0A | 0B | 0C | |----|----|----| | 1A | 1B | 1C | |----|----|----| | 2A | 2B | 2C | +----+----+----+ # void (no borders; see \"borderless table\" section of the documentation) 0A 0B 0C 1A 1B 1C 2A 2B 2C Raise an issue if you'd like to contribute a new border template. Borderless Table Simply using void border character template creates a table with a lot of unnecessary spacing. To create a more pleasant to the eye table, reset the padding and remove the joining rows, e.g. const output = table ( data , { border : getBorderCharacters ( 'void' ), columnDefault : { paddingLeft : 0 , paddingRight : 1 }, drawHorizontalLine : () => false } ); console . log ( output ); 0A 0B 0C 1A 1B 1C 2A 2B 2C","title":"Index"},{"location":"node_modules/table/#table","text":"Produces a string that represents array data in a text table. Table Features Install Usage API table createStream getBorderCharacters","title":"Table"},{"location":"node_modules/table/#features","text":"Works with strings containing fullwidth characters. Works with strings containing ANSI escape codes . Configurable border characters. Configurable content alignment per column. Configurable content padding per column. Configurable column width. Text wrapping.","title":"Features"},{"location":"node_modules/table/#install","text":"npm install table","title":"Install"},{"location":"node_modules/table/#usage","text":"import { table } from 'table' ; // Using commonjs? // const { table } = require('table'); const data = [ [ '0A' , '0B' , '0C' ], [ '1A' , '1B' , '1C' ], [ '2A' , '2B' , '2C' ] ]; console . log ( table ( data )); \u2554\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2557 \u2551 0A \u2502 0B \u2502 0C \u2551 \u255f\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2562 \u2551 1A \u2502 1B \u2502 1C \u2551 \u255f\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2562 \u2551 2A \u2502 2B \u2502 2C \u2551 \u255a\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u255d","title":"Usage"},{"location":"node_modules/table/#api","text":"","title":"API"},{"location":"node_modules/table/#table_1","text":"Returns the string in the table format Parameters: - data : The data to display - Type: any[][] - Required: true config : Table configuration Type: object Required: false","title":"table"},{"location":"node_modules/table/#configborder","text":"Type: { [type: string]: string } \\ Default: honeywell template Custom borders. The keys are any of: - topLeft , topRight , topBody , topJoin - bottomLeft , bottomRight , bottomBody , bottomJoin - joinLeft , joinRight , joinBody , joinJoin - bodyLeft , bodyRight , bodyJoin - headerJoin const data = [ [ '0A' , '0B' , '0C' ], [ '1A' , '1B' , '1C' ], [ '2A' , '2B' , '2C' ] ]; const config = { border : { topBody : `\u2500` , topJoin : `\u252c` , topLeft : `\u250c` , topRight : `\u2510` , bottomBody : `\u2500` , bottomJoin : `\u2534` , bottomLeft : `\u2514` , bottomRight : `\u2518` , bodyLeft : `\u2502` , bodyRight : `\u2502` , bodyJoin : `\u2502` , joinBody : `\u2500` , joinLeft : `\u251c` , joinRight : `\u2524` , joinJoin : `\u253c` } }; console . log ( table ( data , config )); \u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510 \u2502 0A \u2502 0B \u2502 0C \u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2524 \u2502 1A \u2502 1B \u2502 1C \u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2524 \u2502 2A \u2502 2B \u2502 2C \u2502 \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518","title":"config.border"},{"location":"node_modules/table/#configdrawverticalline","text":"Type: (lineIndex: number, columnCount: number) => boolean \\ Default: () => true It is used to tell whether to draw a vertical line. This callback is called for each vertical border of the table. If the table has n columns, then the index parameter is alternatively received all numbers in range [0, n] inclusively. const data = [ [ '0A' , '0B' , '0C' ], [ '1A' , '1B' , '1C' ], [ '2A' , '2B' , '2C' ], [ '3A' , '3B' , '3C' ], [ '4A' , '4B' , '4C' ] ]; const config = { drawVerticalLine : ( lineIndex , columnCount ) => { return lineIndex === 0 || lineIndex === columnCount ; } }; console . log ( table ( data , config )); \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557 \u2551 0A 0B 0C \u2551 \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562 \u2551 1A 1B 1C \u2551 \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562 \u2551 2A 2B 2C \u2551 \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562 \u2551 3A 3B 3C \u2551 \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562 \u2551 4A 4B 4C \u2551 \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d","title":"config.drawVerticalLine"},{"location":"node_modules/table/#configdrawhorizontalline","text":"Type: (lineIndex: number, rowCount: number) => boolean \\ Default: () => true It is used to tell whether to draw a horizontal line. This callback is called for each horizontal border of the table. If the table has n rows, then the index parameter is alternatively received all numbers in range [0, n] inclusively. If the table has n rows and contains the header, then the range will be [0, n+1] inclusively. const data = [ [ '0A' , '0B' , '0C' ], [ '1A' , '1B' , '1C' ], [ '2A' , '2B' , '2C' ], [ '3A' , '3B' , '3C' ], [ '4A' , '4B' , '4C' ] ]; const config = { drawHorizontalLine : ( lineIndex , rowCount ) => { return lineIndex === 0 || lineIndex === 1 || lineIndex === rowCount - 1 || lineIndex === rowCount ; } }; console . log ( table ( data , config )); \u2554\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2557 \u2551 0A \u2502 0B \u2502 0C \u2551 \u255f\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2562 \u2551 1A \u2502 1B \u2502 1C \u2551 \u2551 2A \u2502 2B \u2502 2C \u2551 \u2551 3A \u2502 3B \u2502 3C \u2551 \u255f\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2562 \u2551 4A \u2502 4B \u2502 4C \u2551 \u255a\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u255d","title":"config.drawHorizontalLine"},{"location":"node_modules/table/#configsingleline","text":"Type: boolean \\ Default: false If true , horizontal lines inside the table are not drawn. This option also overrides the config.drawHorizontalLine if specified. const data = [ [ '-rw-r--r--' , '1' , 'pandorym' , 'staff' , '1529' , 'May 23 11:25' , 'LICENSE' ], [ '-rw-r--r--' , '1' , 'pandorym' , 'staff' , '16327' , 'May 23 11:58' , 'README.md' ], [ 'drwxr-xr-x' , '76' , 'pandorym' , 'staff' , '2432' , 'May 23 12:02' , 'dist' ], [ 'drwxr-xr-x' , '634' , 'pandorym' , 'staff' , '20288' , 'May 23 11:54' , 'node_modules' ], [ '-rw-r--r--' , '1,' , 'pandorym' , 'staff' , '525688' , 'May 23 11:52' , 'package-lock.json' ], [ '-rw-r--r--@' , '1' , 'pandorym' , 'staff' , '2440' , 'May 23 11:25' , 'package.json' ], [ 'drwxr-xr-x' , '27' , 'pandorym' , 'staff' , '864' , 'May 23 11:25' , 'src' ], [ 'drwxr-xr-x' , '20' , 'pandorym' , 'staff' , '640' , 'May 23 11:25' , 'test' ], ]; const config = { singleLine : true }; console . log ( table ( data , config )); \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557 \u2551 -rw-r--r-- \u2502 1 \u2502 pandorym \u2502 staff \u2502 1529 \u2502 May 23 11:25 \u2502 LICENSE \u2551 \u2551 -rw-r--r-- \u2502 1 \u2502 pandorym \u2502 staff \u2502 16327 \u2502 May 23 11:58 \u2502 README.md \u2551 \u2551 drwxr-xr-x \u2502 76 \u2502 pandorym \u2502 staff \u2502 2432 \u2502 May 23 12:02 \u2502 dist \u2551 \u2551 drwxr-xr-x \u2502 634 \u2502 pandorym \u2502 staff \u2502 20288 \u2502 May 23 11:54 \u2502 node_modules \u2551 \u2551 -rw-r--r-- \u2502 1, \u2502 pandorym \u2502 staff \u2502 525688 \u2502 May 23 11:52 \u2502 package-lock.json \u2551 \u2551 -rw-r--r--@ \u2502 1 \u2502 pandorym \u2502 staff \u2502 2440 \u2502 May 23 11:25 \u2502 package.json \u2551 \u2551 drwxr-xr-x \u2502 27 \u2502 pandorym \u2502 staff \u2502 864 \u2502 May 23 11:25 \u2502 src \u2551 \u2551 drwxr-xr-x \u2502 20 \u2502 pandorym \u2502 staff \u2502 640 \u2502 May 23 11:25 \u2502 test \u2551 \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d","title":"config.singleLine"},{"location":"node_modules/table/#configcolumns","text":"Type: Column[] | { [columnIndex: number]: Column } Column specific configurations.","title":"config.columns"},{"location":"node_modules/table/#configcolumnswidth","text":"Type: number \\ Default: the maximum cell widths of the column Column width (excluding the paddings). const data = [ [ '0A' , '0B' , '0C' ], [ '1A' , '1B' , '1C' ], [ '2A' , '2B' , '2C' ] ]; const config = { columns : { 1 : { width : 10 } } }; console . log ( table ( data , config )); \u2554\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2557 \u2551 0A \u2502 0B \u2502 0C \u2551 \u255f\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2562 \u2551 1A \u2502 1B \u2502 1C \u2551 \u255f\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2562 \u2551 2A \u2502 2B \u2502 2C \u2551 \u255a\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u255d","title":"config.columns[*].width"},{"location":"node_modules/table/#configcolumnsalignment","text":"Type: 'center' | 'justify' | 'left' | 'right' \\ Default: 'left' Cell content horizontal alignment const data = [ [ '0A' , '0B' , '0C' , '0D 0E 0F' ], [ '1A' , '1B' , '1C' , '1D 1E 1F' ], [ '2A' , '2B' , '2C' , '2D 2E 2F' ], ]; const config = { columnDefault : { width : 10 , }, columns : [ { alignment : 'left' }, { alignment : 'center' }, { alignment : 'right' }, { alignment : 'justify' } ], }; console . log ( table ( data , config )); \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557 \u2551 0A \u2502 0B \u2502 0C \u2502 0D 0E 0F \u2551 \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562 \u2551 1A \u2502 1B \u2502 1C \u2502 1D 1E 1F \u2551 \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562 \u2551 2A \u2502 2B \u2502 2C \u2502 2D 2E 2F \u2551 \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d","title":"config.columns[*].alignment"},{"location":"node_modules/table/#configcolumnsverticalalignment","text":"Type: 'top' | 'middle' | 'bottom' \\ Default: 'top' Cell content vertical alignment const data = [ [ 'A' , 'B' , 'C' , 'DEF' ], ]; const config = { columnDefault : { width : 1 , }, columns : [ { verticalAlignment : 'top' }, { verticalAlignment : 'middle' }, { verticalAlignment : 'bottom' }, ], }; console . log ( table ( data , config )); \u2554\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2557 \u2551 A \u2502 \u2502 \u2502 D \u2551 \u2551 \u2502 B \u2502 \u2502 E \u2551 \u2551 \u2502 \u2502 C \u2502 F \u2551 \u255a\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u255d","title":"config.columns[*].verticalAlignment"},{"location":"node_modules/table/#configcolumnspaddingleft","text":"Type: number \\ Default: 1 The number of whitespaces used to pad the content on the left.","title":"config.columns[*].paddingLeft"},{"location":"node_modules/table/#configcolumnspaddingright","text":"Type: number \\ Default: 1 The number of whitespaces used to pad the content on the right. The paddingLeft and paddingRight options do not count on the column width. So the column has width = 5 , paddingLeft = 2 and paddingRight = 2 will have the total width is 9 . const data = [ [ '0A' , 'AABBCC' , '0C' ], [ '1A' , '1B' , '1C' ], [ '2A' , '2B' , '2C' ] ]; const config = { columns : [ { paddingLeft : 3 }, { width : 2 , paddingRight : 3 } ] }; console . log ( table ( data , config )); \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2557 \u2551 0A \u2502 AA \u2502 0C \u2551 \u2551 \u2502 BB \u2502 \u2551 \u2551 \u2502 CC \u2502 \u2551 \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2562 \u2551 1A \u2502 1B \u2502 1C \u2551 \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2562 \u2551 2A \u2502 2B \u2502 2C \u2551 \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u255d","title":"config.columns[*].paddingRight"},{"location":"node_modules/table/#configcolumnstruncate","text":"Type: number \\ Default: Infinity The number of characters is which the content will be truncated. To handle a content that overflows the container width, table package implements text wrapping . However, sometimes you may want to truncate content that is too long to be displayed in the table. const data = [ [ 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus pulvinar nibh sed mauris convallis dapibus. Nunc venenatis tempus nulla sit amet viverra.' ] ]; const config = { columns : [ { width : 20 , truncate : 100 } ] }; console . log ( table ( data , config )); \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557 \u2551 Lorem ipsum dolor si \u2551 \u2551 t amet, consectetur \u2551 \u2551 adipiscing elit. Pha \u2551 \u2551 sellus pulvinar nibh \u2551 \u2551 sed mauris convall\u2026 \u2551 \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d","title":"config.columns[*].truncate"},{"location":"node_modules/table/#configcolumnswrapword","text":"Type: boolean \\ Default: false The table package implements auto text wrapping, i.e., text that has the width greater than the container width will be separated into multiple lines at the nearest space or one of the special characters: \\|/_.,;- . When wrapWord is false : const data = [ [ 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus pulvinar nibh sed mauris convallis dapibus. Nunc venenatis tempus nulla sit amet viverra.' ] ]; const config = { columns : [ { width : 20 } ] }; console . log ( table ( data , config )); \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557 \u2551 Lorem ipsum dolor si \u2551 \u2551 t amet, consectetur \u2551 \u2551 adipiscing elit. Pha \u2551 \u2551 sellus pulvinar nibh \u2551 \u2551 sed mauris convallis \u2551 \u2551 dapibus. Nunc venena \u2551 \u2551 tis tempus nulla sit \u2551 \u2551 amet viverra. \u2551 \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d When wrapWord is true : \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557 \u2551 Lorem ipsum dolor \u2551 \u2551 sit amet, \u2551 \u2551 consectetur \u2551 \u2551 adipiscing elit. \u2551 \u2551 Phasellus pulvinar \u2551 \u2551 nibh sed mauris \u2551 \u2551 convallis dapibus. \u2551 \u2551 Nunc venenatis \u2551 \u2551 tempus nulla sit \u2551 \u2551 amet viverra. \u2551 \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d","title":"config.columns[*].wrapWord"},{"location":"node_modules/table/#configcolumndefault","text":"Type: Column \\ Default: {} The default configuration for all columns. Column-specific settings will overwrite the default values.","title":"config.columnDefault"},{"location":"node_modules/table/#configheader","text":"Type: object Header configuration. Deprecated in favor of the new spanning cells API. The header configuration inherits the most of the column's, except: - content {string} : the header content. - width: calculate based on the content width automatically. - alignment: center be default. - verticalAlignment: is not supported. - config.border.topJoin will be config.border.topBody for prettier. const data = [ [ '0A' , '0B' , '0C' ], [ '1A' , '1B' , '1C' ], [ '2A' , '2B' , '2C' ], ]; const config = { columnDefault : { width : 10 , }, header : { alignment : 'center' , content : 'THE HEADER\\nThis is the table about something' , }, } console . log ( table ( data , config )); \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557 \u2551 THE HEADER \u2551 \u2551 This is the table about something \u2551 \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562 \u2551 0A \u2502 0B \u2502 0C \u2551 \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562 \u2551 1A \u2502 1B \u2502 1C \u2551 \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562 \u2551 2A \u2502 2B \u2502 2C \u2551 \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d","title":"config.header"},{"location":"node_modules/table/#configspanningcells","text":"Type: SpanningCellConfig[] Spanning cells configuration. The configuration should be straightforward: just specify an array of minimal cell configurations including the position of top-left cell and the number of columns and/or rows will be expanded from it. The content of overlap cells will be ignored to make the data shape be consistent. By default, the configuration of column that the top-left cell belongs to will be applied to the whole spanning cell, except: * The width will be summed up of all spanning columns. * The paddingRight will be received from the right-most column intentionally. Advances customized column-like styles can be configurable to each spanning cell to overwrite the default behavior. const data = [ [ 'Test Coverage Report' , '' , '' , '' , '' , '' ], [ 'Module' , 'Component' , 'Test Cases' , 'Failures' , 'Durations' , 'Success Rate' ], [ 'Services' , 'User' , '50' , '30' , '3m 7s' , '60.0%' ], [ '' , 'Payment' , '100' , '80' , '7m 15s' , '80.0%' ], [ 'Subtotal' , '' , '150' , '110' , '10m 22s' , '73.3%' ], [ 'Controllers' , 'User' , '24' , '18' , '1m 30s' , '75.0%' ], [ '' , 'Payment' , '30' , '24' , '50s' , '80.0%' ], [ 'Subtotal' , '' , '54' , '42' , '2m 20s' , '77.8%' ], [ 'Total' , '' , '204' , '152' , '12m 42s' , '74.5%' ], ]; const config = { columns : [ { alignment : 'center' , width : 12 }, { alignment : 'center' , width : 10 }, { alignment : 'right' }, { alignment : 'right' }, { alignment : 'right' }, { alignment : 'right' } ], spanningCells : [ { col : 0 , row : 0 , colSpan : 6 }, { col : 0 , row : 2 , rowSpan : 2 , verticalAlignment : 'middle' }, { col : 0 , row : 4 , colSpan : 2 , alignment : 'right' }, { col : 0 , row : 5 , rowSpan : 2 , verticalAlignment : 'middle' }, { col : 0 , row : 7 , colSpan : 2 , alignment : 'right' }, { col : 0 , row : 8 , colSpan : 2 , alignment : 'right' } ], }; console . log ( table ( data , config )); \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557 \u2551 Test Coverage Report \u2551 \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562 \u2551 Module \u2502 Component \u2502 Test Cases \u2502 Failures \u2502 Durations \u2502 Success Rate \u2551 \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562 \u2551 \u2502 User \u2502 50 \u2502 30 \u2502 3m 7s \u2502 60.0% \u2551 \u2551 Services \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562 \u2551 \u2502 Payment \u2502 100 \u2502 80 \u2502 7m 15s \u2502 80.0% \u2551 \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562 \u2551 Subtotal \u2502 150 \u2502 110 \u2502 10m 22s \u2502 73.3% \u2551 \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562 \u2551 \u2502 User \u2502 24 \u2502 18 \u2502 1m 30s \u2502 75.0% \u2551 \u2551 Controllers \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562 \u2551 \u2502 Payment \u2502 30 \u2502 24 \u2502 50s \u2502 80.0% \u2551 \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562 \u2551 Subtotal \u2502 54 \u2502 42 \u2502 2m 20s \u2502 77.8% \u2551 \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562 \u2551 Total \u2502 204 \u2502 152 \u2502 12m 42s \u2502 74.5% \u2551 \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d","title":"config.spanningCells"},{"location":"node_modules/table/#createstream","text":"table package exports createStream function used to draw a table and append rows. Parameter: - config: the same as table 's, except config.columnDefault.width and config.columnCount must be provided. import { createStream } from 'table' ; const config = { columnDefault : { width : 50 }, columnCount : 1 }; const stream = createStream ( config ); setInterval (() => { stream . write ([ new Date ()]); }, 500 ); table package uses ANSI escape codes to overwrite the output of the last line when a new row is printed. The underlying implementation is explained in this Stack Overflow answer . Streaming supports all of the configuration properties and functionality of a static table (such as auto text wrapping, alignment and padding), e.g. import { createStream } from 'table' ; import _ from 'lodash' ; const config = { columnDefault : { width : 50 }, columnCount : 3 , columns : [ { width : 10 , alignment : 'right' }, { alignment : 'center' }, { width : 10 } ] }; const stream = createStream ( config ); let i = 0 ; setInterval (() => { let random ; random = _ . sample ( 'abcdefghijklmnopqrstuvwxyz' , _ . random ( 1 , 30 )). join ( '' ); stream . write ([ i ++ , new Date (), random ]); }, 500 );","title":"createStream"},{"location":"node_modules/table/#getbordercharacters","text":"Parameter: - template - Type: 'honeywell' | 'norc' | 'ramac' | 'void' - Required: true You can load one of the predefined border templates using getBorderCharacters function. import { table , getBorderCharacters } from 'table' ; const data = [ [ '0A' , '0B' , '0C' ], [ '1A' , '1B' , '1C' ], [ '2A' , '2B' , '2C' ] ]; const config = { border : getBorderCharacters ( `name of the template` ) }; console . log ( table ( data , config )); # honeywell \u2554\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2557 \u2551 0A \u2502 0B \u2502 0C \u2551 \u255f\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2562 \u2551 1A \u2502 1B \u2502 1C \u2551 \u255f\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2562 \u2551 2A \u2502 2B \u2502 2C \u2551 \u255a\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u255d # norc \u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510 \u2502 0A \u2502 0B \u2502 0C \u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2524 \u2502 1A \u2502 1B \u2502 1C \u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2524 \u2502 2A \u2502 2B \u2502 2C \u2502 \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518 # ramac (ASCII; for use in terminals that do not support Unicode characters) +----+----+----+ | 0A | 0B | 0C | |----|----|----| | 1A | 1B | 1C | |----|----|----| | 2A | 2B | 2C | +----+----+----+ # void (no borders; see \"borderless table\" section of the documentation) 0A 0B 0C 1A 1B 1C 2A 2B 2C Raise an issue if you'd like to contribute a new border template.","title":"getBorderCharacters"},{"location":"node_modules/table/#borderless-table","text":"Simply using void border character template creates a table with a lot of unnecessary spacing. To create a more pleasant to the eye table, reset the padding and remove the joining rows, e.g. const output = table ( data , { border : getBorderCharacters ( 'void' ), columnDefault : { paddingLeft : 0 , paddingRight : 1 }, drawHorizontalLine : () => false } ); console . log ( output ); 0A 0B 0C 1A 1B 1C 2A 2B 2C","title":"Borderless Table"},{"location":"node_modules/table/node_modules/is-fullwidth-code-point/readme/","text":"is-fullwidth-code-point Check if the character represented by a given Unicode code point is fullwidth Install $ npm install is-fullwidth-code-point Usage const isFullwidthCodePoint = require ( 'is-fullwidth-code-point' ); isFullwidthCodePoint ( '\u8c22' . codePointAt ( 0 )); //=> true isFullwidthCodePoint ( 'a' . codePointAt ( 0 )); //=> false API isFullwidthCodePoint(codePoint) codePoint Type: number The code point of a character. License MIT \u00a9 Sindre Sorhus","title":"is-fullwidth-code-point [![Build Status](https://travis-ci.org/sindresorhus/is-fullwidth-code-point.svg?branch=master)](https://travis-ci.org/sindresorhus/is-fullwidth-code-point)"},{"location":"node_modules/table/node_modules/is-fullwidth-code-point/readme/#is-fullwidth-code-point","text":"Check if the character represented by a given Unicode code point is fullwidth","title":"is-fullwidth-code-point"},{"location":"node_modules/table/node_modules/is-fullwidth-code-point/readme/#install","text":"$ npm install is-fullwidth-code-point","title":"Install"},{"location":"node_modules/table/node_modules/is-fullwidth-code-point/readme/#usage","text":"const isFullwidthCodePoint = require ( 'is-fullwidth-code-point' ); isFullwidthCodePoint ( '\u8c22' . codePointAt ( 0 )); //=> true isFullwidthCodePoint ( 'a' . codePointAt ( 0 )); //=> false","title":"Usage"},{"location":"node_modules/table/node_modules/is-fullwidth-code-point/readme/#api","text":"","title":"API"},{"location":"node_modules/table/node_modules/is-fullwidth-code-point/readme/#isfullwidthcodepointcodepoint","text":"","title":"isFullwidthCodePoint(codePoint)"},{"location":"node_modules/table/node_modules/is-fullwidth-code-point/readme/#codepoint","text":"Type: number The code point of a character.","title":"codePoint"},{"location":"node_modules/table/node_modules/is-fullwidth-code-point/readme/#license","text":"MIT \u00a9 Sindre Sorhus","title":"License"},{"location":"node_modules/table/node_modules/string-width/readme/","text":"string-width Get the visual width of a string - the number of columns required to display it Some Unicode characters are fullwidth and use double the normal width. ANSI escape codes are stripped and doesn't affect the width. Useful to be able to measure the actual width of command-line output. Install $ npm install string-width Usage const stringWidth = require ( 'string-width' ); stringWidth ( 'a' ); //=> 1 stringWidth ( '\u53e4' ); //=> 2 stringWidth ( '\\u001B[1m\u53e4\\u001B[22m' ); //=> 2 Related string-width-cli - CLI for this module string-length - Get the real length of a string widest-line - Get the visual width of the widest line in a string Get professional support for this package with a Tidelift subscription Tidelift helps make open source sustainable for maintainers while giving companies assurances about security, maintenance, and licensing for their dependencies.","title":"string-width"},{"location":"node_modules/table/node_modules/string-width/readme/#string-width","text":"Get the visual width of a string - the number of columns required to display it Some Unicode characters are fullwidth and use double the normal width. ANSI escape codes are stripped and doesn't affect the width. Useful to be able to measure the actual width of command-line output.","title":"string-width"},{"location":"node_modules/table/node_modules/string-width/readme/#install","text":"$ npm install string-width","title":"Install"},{"location":"node_modules/table/node_modules/string-width/readme/#usage","text":"const stringWidth = require ( 'string-width' ); stringWidth ( 'a' ); //=> 1 stringWidth ( '\u53e4' ); //=> 2 stringWidth ( '\\u001B[1m\u53e4\\u001B[22m' ); //=> 2","title":"Usage"},{"location":"node_modules/table/node_modules/string-width/readme/#related","text":"string-width-cli - CLI for this module string-length - Get the real length of a string widest-line - Get the visual width of the widest line in a string Get professional support for this package with a Tidelift subscription Tidelift helps make open source sustainable for maintainers while giving companies assurances about security, maintenance, and licensing for their dependencies.","title":"Related"},{"location":"node_modules/text-table/readme/","text":"text-table generate borderless text table strings suitable for printing to stdout example default align var table = require ( 'text-table' ); var t = table ([ [ 'master' , '0123456789abcdef' ], [ 'staging' , 'fedcba9876543210' ] ]); console . log ( t ); master 0123456789abcdef staging fedcba9876543210 left-right align var table = require ( 'text-table' ); var t = table ([ [ 'beep' , '1024' ], [ 'boop' , '33450' ], [ 'foo' , '1006' ], [ 'bar' , '45' ] ], { align : [ 'l' , 'r' ] }); console . log ( t ); beep 1024 boop 33450 foo 1006 bar 45 dotted align var table = require ( 'text-table' ); var t = table ([ [ 'beep' , '1024' ], [ 'boop' , '334.212' ], [ 'foo' , '1006' ], [ 'bar' , '45.6' ], [ 'baz' , '123.' ] ], { align : [ 'l' , '.' ] }); console . log ( t ); beep 1024 boop 334.212 foo 1006 bar 45.6 baz 123. centered var table = require ( 'text-table' ); var t = table ([ [ 'beep' , '1024' , 'xyz' ], [ 'boop' , '3388450' , 'tuv' ], [ 'foo' , '10106' , 'qrstuv' ], [ 'bar' , '45' , 'lmno' ] ], { align : [ 'l' , 'c' , 'l' ] }); console . log ( t ); beep 1024 xyz boop 3388450 tuv foo 10106 qrstuv bar 45 lmno methods var table = require ( 'text-table' ) var s = table(rows, opts={}) Return a formatted table string s from an array of rows and some options opts . rows should be an array of arrays containing strings, numbers, or other printable values. options can be: opts.hsep - separator to use between columns, default ' ' opts.align - array of alignment types for each column, default ['l','l',...] opts.stringLength - callback function to use when calculating the string length alignment types are: 'l' - left 'r' - right 'c' - center '.' - decimal install With npm do: npm install text-table Use with ANSI-colors Since the string length of ANSI color schemes does not equal the length JavaScript sees internally it is necessary to pass the a custom string length calculator during the main function call. See the test/ansi-colors.js file for an example. license MIT","title":"text-table"},{"location":"node_modules/text-table/readme/#text-table","text":"generate borderless text table strings suitable for printing to stdout","title":"text-table"},{"location":"node_modules/text-table/readme/#example","text":"","title":"example"},{"location":"node_modules/text-table/readme/#default-align","text":"var table = require ( 'text-table' ); var t = table ([ [ 'master' , '0123456789abcdef' ], [ 'staging' , 'fedcba9876543210' ] ]); console . log ( t ); master 0123456789abcdef staging fedcba9876543210","title":"default align"},{"location":"node_modules/text-table/readme/#left-right-align","text":"var table = require ( 'text-table' ); var t = table ([ [ 'beep' , '1024' ], [ 'boop' , '33450' ], [ 'foo' , '1006' ], [ 'bar' , '45' ] ], { align : [ 'l' , 'r' ] }); console . log ( t ); beep 1024 boop 33450 foo 1006 bar 45","title":"left-right align"},{"location":"node_modules/text-table/readme/#dotted-align","text":"var table = require ( 'text-table' ); var t = table ([ [ 'beep' , '1024' ], [ 'boop' , '334.212' ], [ 'foo' , '1006' ], [ 'bar' , '45.6' ], [ 'baz' , '123.' ] ], { align : [ 'l' , '.' ] }); console . log ( t ); beep 1024 boop 334.212 foo 1006 bar 45.6 baz 123.","title":"dotted align"},{"location":"node_modules/text-table/readme/#centered","text":"var table = require ( 'text-table' ); var t = table ([ [ 'beep' , '1024' , 'xyz' ], [ 'boop' , '3388450' , 'tuv' ], [ 'foo' , '10106' , 'qrstuv' ], [ 'bar' , '45' , 'lmno' ] ], { align : [ 'l' , 'c' , 'l' ] }); console . log ( t ); beep 1024 xyz boop 3388450 tuv foo 10106 qrstuv bar 45 lmno","title":"centered"},{"location":"node_modules/text-table/readme/#methods","text":"var table = require ( 'text-table' )","title":"methods"},{"location":"node_modules/text-table/readme/#var-s-tablerows-opts","text":"Return a formatted table string s from an array of rows and some options opts . rows should be an array of arrays containing strings, numbers, or other printable values. options can be: opts.hsep - separator to use between columns, default ' ' opts.align - array of alignment types for each column, default ['l','l',...] opts.stringLength - callback function to use when calculating the string length alignment types are: 'l' - left 'r' - right 'c' - center '.' - decimal","title":"var s = table(rows, opts={})"},{"location":"node_modules/text-table/readme/#install","text":"With npm do: npm install text-table","title":"install"},{"location":"node_modules/text-table/readme/#use-with-ansi-colors","text":"Since the string length of ANSI color schemes does not equal the length JavaScript sees internally it is necessary to pass the a custom string length calculator during the main function call. See the test/ansi-colors.js file for an example.","title":"Use with ANSI-colors"},{"location":"node_modules/text-table/readme/#license","text":"MIT","title":"license"},{"location":"node_modules/textlint/","text":"textlint The pluggable linting tool for text. Website: https://textlint.github.io/ Repository: https://github.com/textlint/textlint","title":"textlint"},{"location":"node_modules/textlint/#textlint","text":"The pluggable linting tool for text. Website: https://textlint.github.io/ Repository: https://github.com/textlint/textlint","title":"textlint"},{"location":"node_modules/textlint/src/","text":"Architecture Overview title: Architecture CLI->Engine: file*s* Engine->Core: file Core->Kernel: text Kernel->Kernel: Linting text Kernel-->Core: Message Core-->Engine: Results Engine-->CLI: output CLI know Engine Engine know Core Core know kernel textlint apply Separation of Concern . CLI options.ts Parse cli options cli.ts create config run engine output result Concern Parse command line options Run Engine Receive results output to stdout/stderr Engine Process file s are wanted to lint/fix and prepare configuration of rules and plugins. After all, return a array of TextLintResult or TextLintFixResult engine/ directory textlint-engine.js rule-manager.js textlint-module-resolver.js These are shared between config and engine. Don't shared between engine and core. Concern Prepare rules from config Pass rules and configs to Core Could handle multiple files Core Process file/text wanted to lint/fix. After all, return a TextLintResult or TextLintFixResult core/ directory textlint-core.js source-code.js rule-creator-set.js task/ linter/ fixer/ To be clear about difference of linter and fixer. Linter process in parallel. Fixer process in series. Concern Handle AST of the text Do linting to the AST Create fixable messages from the result Could handle a single files Terms Ignore: a rule request to ignore range Filter: textlint filter requested range that is reported by rule a rule can't filter.","title":"Architecture"},{"location":"node_modules/textlint/src/#architecture","text":"","title":"Architecture"},{"location":"node_modules/textlint/src/#overview","text":"title: Architecture CLI->Engine: file*s* Engine->Core: file Core->Kernel: text Kernel->Kernel: Linting text Kernel-->Core: Message Core-->Engine: Results Engine-->CLI: output CLI know Engine Engine know Core Core know kernel textlint apply Separation of Concern .","title":"Overview"},{"location":"node_modules/textlint/src/#cli","text":"options.ts Parse cli options cli.ts create config run engine output result","title":"CLI"},{"location":"node_modules/textlint/src/#concern","text":"Parse command line options Run Engine Receive results output to stdout/stderr","title":"Concern"},{"location":"node_modules/textlint/src/#engine","text":"Process file s are wanted to lint/fix and prepare configuration of rules and plugins. After all, return a array of TextLintResult or TextLintFixResult engine/ directory textlint-engine.js rule-manager.js textlint-module-resolver.js These are shared between config and engine. Don't shared between engine and core.","title":"Engine"},{"location":"node_modules/textlint/src/#concern_1","text":"Prepare rules from config Pass rules and configs to Core Could handle multiple files","title":"Concern"},{"location":"node_modules/textlint/src/#core","text":"Process file/text wanted to lint/fix. After all, return a TextLintResult or TextLintFixResult core/ directory textlint-core.js source-code.js rule-creator-set.js task/ linter/ fixer/ To be clear about difference of linter and fixer. Linter process in parallel. Fixer process in series.","title":"Core"},{"location":"node_modules/textlint/src/#concern_2","text":"Handle AST of the text Do linting to the AST Create fixable messages from the result Could handle a single files","title":"Concern"},{"location":"node_modules/textlint/src/#terms","text":"Ignore: a rule request to ignore range Filter: textlint filter requested range that is reported by rule a rule can't filter.","title":"Terms"},{"location":"node_modules/textlint/src/engine/execute-file-backers/","text":"execute-file-backers These are exeuteFile middleware function. Each backer vote YES or No to process exeuteFile . Each backer should be implemented these methods. shouldExecute({filePath}): boolean Should the filePath be executed? If anyone opposed( return false ) backer exist, does't executeFile . didExecute({filePath, results}): results After process.","title":"execute-file-backers"},{"location":"node_modules/textlint/src/engine/execute-file-backers/#execute-file-backers","text":"These are exeuteFile middleware function. Each backer vote YES or No to process exeuteFile . Each backer should be implemented these methods.","title":"execute-file-backers"},{"location":"node_modules/textlint/src/engine/execute-file-backers/#shouldexecutefilepath-boolean","text":"Should the filePath be executed? If anyone opposed( return false ) backer exist, does't executeFile .","title":"shouldExecute({filePath}): boolean"},{"location":"node_modules/textlint/src/engine/execute-file-backers/#didexecutefilepath-results-results","text":"After process.","title":"didExecute({filePath, results}): results"},{"location":"node_modules/textlint/src/shared/","text":"THIS DIRECTORY WILL BE REMOVED NOT USE IT IN TEXTLINT. These file are copied to textlint-kernel.","title":"THIS DIRECTORY WILL BE REMOVED"},{"location":"node_modules/textlint/src/shared/#this-directory-will-be-removed","text":"NOT USE IT IN TEXTLINT. These file are copied to textlint-kernel.","title":"THIS DIRECTORY WILL BE REMOVED"},{"location":"node_modules/textlint-rule-helper/","text":"textlint-rule-helper This is helper library for creating textlint rule. Installation npm install textlint-rule-helper API class RuleHelper Helper for traversing TxtAST. ruleHelper.getParents(node) : TxtNode[] Get parents of node. The parent nodes are returned in order from the closest parent to the outer ones. node is not contained in the results. Params node TxtNode - the node is start point. ruleHelper.isChildNode(node, types): boolean Return true if node is wrapped any one of node types . Params node TxtNode - is target node types Array.<string> - are wrapped target node ruleHelper.isPlainStrNode(node): boolean isPlainStrNode() return true if the node is Str node and fill following conditions: the node is Str node the node is under the Paragraph node the node is not under the BlockQuote Params node TxtNode - is target node This function is useful for the common use case. If you want to lint Str node, but you do not want to lint styled node, this function is useful. The styled node is Link , Strong , BlockQuote , Header , and it may be written by other people. For example, you have added a link to your document, the link's title is written by other people. Opposite of it, The plain Str node is just under the Paragraph node, and it was written by you. Examples Return true str str str - list text Return false # Header ![ alt text ]( https://example.com ) [ link title ]( https://example.com ) > BlockQuote text **Strong text** [ linkReference ][] [^footnote text] use case refactor: use isPlainStrNode helper by azu \u00b7 Pull Request #29 \u00b7 textlint-ja/textlint-rule-preset-ja-spacing class IgnoreNodeManager You can manager ignoring range in texts. ignore(node): void Add the range of node to ignoring range list. Params node TxtNode - target node ignoreRange(range): void Add the range to ignoring range list Params range [number, number] ignoreChildrenByTypes(targetNode, ignoredNodeTypes): void if the children node has the type that is included in ignoredNodeTypes , Add range of children node of node to ignoring range list, Params targetNode TxtNode - target node ignoredNodeTypes Array.<string> - are node types for ignoring isIgnoredIndex(index): boolean If the index is included in ignoring range list, return true. index should be absolute position. Params index number - index value start with 0 isIgnoredRange(range): boolean If the range is included in ignoring range list, return true. range should includes absolute positions. Params range [number, number] isIgnored(node): boolean If the range of node is included in ignoring range list, return true. Params node TxtNode - target node RuleHelper and IgnoreNodeManager Example A rule for textlint . import { RuleHelper } from \"textlint-rule-helper\" ; import { IgnoreNodeManager } from \"textlint-rule-helper\" ; export default function ( context ) { var helper = new RuleHelper ( context ); var ignoreNodeManager = new IgnoreNodeManager (); var exports = {}; var reportingErrors = []; exports [ context . Syntax . Paragraph ] = function ( node ) { // Add `Code` node to ignoring list ignoreNodeManager . ignoreChildrenByTypes ( node , [ context . Syntax . Code ]); // do something reportingErrors . push ( node , ruleError ); }; exports [ context . Syntax . Str ] = function ( node ) { // parent nodes is any one Link or Image. if ( helper . isChildNode ( node , [ context . Syntax . Link , context . Syntax . Image ])) { return ; } // get Parents var parents = helper . getParents ( node ); }; exports [ Syntax . Document + \":exit\" ] = function ( node ) { reportingErrors . forEach ( function ( node , ruleError ) { // if the error is ignored, don't report if ( ignoreNodeManager . isIgnored ( node )) { return ; } // report actual }); }; return exports ; }; wrapReportHandler(context, options, handler): TextlintRuleReportHandler Params context TextlintRuleContent - rule context object options {{ignoreNodeTypes: TxtNodeType[]}} - options handler (report: (node: AnyTxtNode, ruleError: TextlintRuleError) => void) => any - handler should return a object wrapReportHandler is high level API that use RuleHelper and IgnoreNodeManager . It aim to easy to ignore some Node type for preventing unnecessary error report. Example: ignore BlockQuote and Code node. import { wrapReportHandler } from \"textlint-rule-helper\" ; const reporter = function ( context ) { const { Syntax , getSource } = context ; return wrapReportHandler ( context , { ignoreNodeTypes : [ Syntax . BlockQuote , Syntax . Code ] }, report => { // <= wrap version of context.report // handler should return a rule handler object return { [ Syntax . Paragraph ]( node ) { const text = getSource ( node ); const index = text . search ( \"code\" ); /* * Following text is matched, but it will not reported. * ---- * This is `code`. * > code * ---- */ if ( index === - 1 ){ return ; } report ( node , new context . RuleError ( item . name , { index })); } } }); }; export default reporter ; The Mechanism of wrapReportHandler : ` Ignore all parent nodes that are matched with ignoreNodeTypes . Ignore all children nodes that are matched with ignoreNodeTypes . wrapReportHandler create custom report function that ignore matched node Use-Case You can see real use-case of this helper library. textlint/rule-advanced.md at master \u00b7 textlint/textlint textlint-rule-no-mix-dearu-desumasu ChangeLog Releases \u00b7 textlint/textlint-rule-helper Development # watch npm run watch # build npm run build # test npm run test Contributing Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request :D License MIT","title":"textlint-rule-helper [![Actions Status: test](https://github.com/textlint/textlint-rule-helper/workflows/test/badge.svg)](https://github.com/textlint/textlint-rule-helper/actions?query=workflow%3A\"test\")"},{"location":"node_modules/textlint-rule-helper/#textlint-rule-helper","text":"This is helper library for creating textlint rule.","title":"textlint-rule-helper"},{"location":"node_modules/textlint-rule-helper/#installation","text":"npm install textlint-rule-helper","title":"Installation"},{"location":"node_modules/textlint-rule-helper/#api","text":"","title":"API"},{"location":"node_modules/textlint-rule-helper/#class-rulehelper","text":"Helper for traversing TxtAST.","title":"class RuleHelper"},{"location":"node_modules/textlint-rule-helper/#rulehelpergetparentsnode-txtnode","text":"Get parents of node. The parent nodes are returned in order from the closest parent to the outer ones. node is not contained in the results. Params node TxtNode - the node is start point.","title":"ruleHelper.getParents(node) : TxtNode[]"},{"location":"node_modules/textlint-rule-helper/#rulehelperischildnodenode-types-boolean","text":"Return true if node is wrapped any one of node types . Params node TxtNode - is target node types Array.<string> - are wrapped target node","title":"ruleHelper.isChildNode(node, types): boolean"},{"location":"node_modules/textlint-rule-helper/#rulehelperisplainstrnodenode-boolean","text":"isPlainStrNode() return true if the node is Str node and fill following conditions: the node is Str node the node is under the Paragraph node the node is not under the BlockQuote Params node TxtNode - is target node This function is useful for the common use case. If you want to lint Str node, but you do not want to lint styled node, this function is useful. The styled node is Link , Strong , BlockQuote , Header , and it may be written by other people. For example, you have added a link to your document, the link's title is written by other people. Opposite of it, The plain Str node is just under the Paragraph node, and it was written by you. Examples Return true str str str - list text Return false # Header ![ alt text ]( https://example.com ) [ link title ]( https://example.com ) > BlockQuote text **Strong text** [ linkReference ][] [^footnote text] use case refactor: use isPlainStrNode helper by azu \u00b7 Pull Request #29 \u00b7 textlint-ja/textlint-rule-preset-ja-spacing","title":"ruleHelper.isPlainStrNode(node): boolean"},{"location":"node_modules/textlint-rule-helper/#class-ignorenodemanager","text":"You can manager ignoring range in texts.","title":"class IgnoreNodeManager"},{"location":"node_modules/textlint-rule-helper/#ignorenode-void","text":"Add the range of node to ignoring range list. Params node TxtNode - target node","title":"ignore(node): void"},{"location":"node_modules/textlint-rule-helper/#ignorerangerange-void","text":"Add the range to ignoring range list Params range [number, number]","title":"ignoreRange(range): void"},{"location":"node_modules/textlint-rule-helper/#ignorechildrenbytypestargetnode-ignorednodetypes-void","text":"if the children node has the type that is included in ignoredNodeTypes , Add range of children node of node to ignoring range list, Params targetNode TxtNode - target node ignoredNodeTypes Array.<string> - are node types for ignoring","title":"ignoreChildrenByTypes(targetNode, ignoredNodeTypes): void"},{"location":"node_modules/textlint-rule-helper/#isignoredindexindex-boolean","text":"If the index is included in ignoring range list, return true. index should be absolute position. Params index number - index value start with 0","title":"isIgnoredIndex(index): boolean"},{"location":"node_modules/textlint-rule-helper/#isignoredrangerange-boolean","text":"If the range is included in ignoring range list, return true. range should includes absolute positions. Params range [number, number]","title":"isIgnoredRange(range): boolean"},{"location":"node_modules/textlint-rule-helper/#isignorednode-boolean","text":"If the range of node is included in ignoring range list, return true. Params node TxtNode - target node","title":"isIgnored(node): boolean"},{"location":"node_modules/textlint-rule-helper/#rulehelper-and-ignorenodemanager-example","text":"A rule for textlint . import { RuleHelper } from \"textlint-rule-helper\" ; import { IgnoreNodeManager } from \"textlint-rule-helper\" ; export default function ( context ) { var helper = new RuleHelper ( context ); var ignoreNodeManager = new IgnoreNodeManager (); var exports = {}; var reportingErrors = []; exports [ context . Syntax . Paragraph ] = function ( node ) { // Add `Code` node to ignoring list ignoreNodeManager . ignoreChildrenByTypes ( node , [ context . Syntax . Code ]); // do something reportingErrors . push ( node , ruleError ); }; exports [ context . Syntax . Str ] = function ( node ) { // parent nodes is any one Link or Image. if ( helper . isChildNode ( node , [ context . Syntax . Link , context . Syntax . Image ])) { return ; } // get Parents var parents = helper . getParents ( node ); }; exports [ Syntax . Document + \":exit\" ] = function ( node ) { reportingErrors . forEach ( function ( node , ruleError ) { // if the error is ignored, don't report if ( ignoreNodeManager . isIgnored ( node )) { return ; } // report actual }); }; return exports ; };","title":"RuleHelper and IgnoreNodeManager Example"},{"location":"node_modules/textlint-rule-helper/#wrapreporthandlercontext-options-handler-textlintrulereporthandler","text":"Params context TextlintRuleContent - rule context object options {{ignoreNodeTypes: TxtNodeType[]}} - options handler (report: (node: AnyTxtNode, ruleError: TextlintRuleError) => void) => any - handler should return a object wrapReportHandler is high level API that use RuleHelper and IgnoreNodeManager . It aim to easy to ignore some Node type for preventing unnecessary error report. Example: ignore BlockQuote and Code node. import { wrapReportHandler } from \"textlint-rule-helper\" ; const reporter = function ( context ) { const { Syntax , getSource } = context ; return wrapReportHandler ( context , { ignoreNodeTypes : [ Syntax . BlockQuote , Syntax . Code ] }, report => { // <= wrap version of context.report // handler should return a rule handler object return { [ Syntax . Paragraph ]( node ) { const text = getSource ( node ); const index = text . search ( \"code\" ); /* * Following text is matched, but it will not reported. * ---- * This is `code`. * > code * ---- */ if ( index === - 1 ){ return ; } report ( node , new context . RuleError ( item . name , { index })); } } }); }; export default reporter ; The Mechanism of wrapReportHandler : ` Ignore all parent nodes that are matched with ignoreNodeTypes . Ignore all children nodes that are matched with ignoreNodeTypes . wrapReportHandler create custom report function that ignore matched node","title":"wrapReportHandler(context, options, handler): TextlintRuleReportHandler"},{"location":"node_modules/textlint-rule-helper/#use-case","text":"You can see real use-case of this helper library. textlint/rule-advanced.md at master \u00b7 textlint/textlint textlint-rule-no-mix-dearu-desumasu","title":"Use-Case"},{"location":"node_modules/textlint-rule-helper/#changelog","text":"Releases \u00b7 textlint/textlint-rule-helper","title":"ChangeLog"},{"location":"node_modules/textlint-rule-helper/#development","text":"# watch npm run watch # build npm run build # test npm run test","title":"Development"},{"location":"node_modules/textlint-rule-helper/#contributing","text":"Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request :D","title":"Contributing"},{"location":"node_modules/textlint-rule-helper/#license","text":"MIT","title":"License"},{"location":"node_modules/textlint-rule-ja-space-between-half-and-full-width/","text":"textlint-rule-ja-space-between-half-and-full-width \u534a\u89d2\u6587\u5b57\u3068\u5168\u89d2\u6587\u5b57\u306e\u30b9\u30da\u30fc\u30b9\u306b\u3064\u3044\u3066\u306etextlint\u30eb\u30fc\u30eb \u534a\u89d2\u6587\u5b57\u3068\u5168\u89d2\u6587\u5b57\u306b\u30b9\u30da\u30fc\u30b9\u3092\u5165\u308c\u308b\u304b\u3069\u3046\u304b\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002 \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u3001\u534a\u89d2\u6587\u5b57\u3068\u5168\u89d2\u6587\u5b57\u306e\u9593\u306b\u30b9\u30da\u30fc\u30b9\u3092\u5165\u308c\u307e\u305b\u3093\u3002( \"never\" ) OK: \u3053\u308c\u306fUnicode NG: \u3053\u308c\u306f Unicode \u5168\u89d2\u6587\u5b57\u306b\u306f\u3001\u53e5\u8aad\u70b9\uff08\u3001\u3002\uff09\u3082\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u3001 exceptPunctuation: true \u3067\u3042\u308b\u305f\u3081\u7121\u8996\u3055\u308c\u307e\u3059\u3002 OK: \u3053\u308c\u3082\u3001Unicode\u3002 Install Install with npm : npm install textlint-rule-ja-space-between-half-and-full-width Usage Via .textlintrc (Recommended) { \"rules\" : { \"ja-space-between-half-and-full-width\" : { \"space\" : \"never\" } } } Via CLI textlint --rule ja-space-between-half-and-full-width README.md Options space : \"always\" || \"never\" \u30c7\u30d5\u30a9\u30eb\u30c8: \"never\" \u30b9\u30da\u30fc\u30b9\u3092\u5e38\u306b \u5165\u308c\u308b( \"always\" ) or \u5165\u308c\u306a\u3044( \"never\" ) exceptPunctuation : boolean \u30c7\u30d5\u30a9\u30eb\u30c8: true \u53e5\u8aad\u70b9\uff08\u3001\u3002\uff09\u3092\u4f8b\u5916\u3068\u3057\u3066\u6271\u3046\u304b\u3069\u3046\u304b lintStyledNode : boolean \u30c7\u30d5\u30a9\u30eb\u30c8: false \u30d7\u30ec\u30fc\u30f3\u30c6\u30ad\u30b9\u30c8\u4ee5\u5916(\u30ea\u30f3\u30af\u3084\u753b\u50cf\u306e\u30ad\u30e3\u30d7\u30b7\u30e7\u30f3\u306a\u3069)\u3092 lint \u306e\u5bfe\u8c61\u3068\u3059\u308b\u304b\u3069\u3046\u304b (\u30d7\u30ec\u30fc\u30f3\u30c6\u30ad\u30b9\u30c8\u306e\u5224\u65ad\u57fa\u6e96\u306f textlint/textlint-rule-helper: This is helper library for creating textlint rule \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044) { \"rules\" : { \"ja-space-between-half-and-full-width\" : { \"space\" : \"always\" } } } exceptPunctuation: true \u3068\u3057\u305f\u5834\u5408\u306f\u3001\u53e5\u8aad\u70b9\u306b\u95a2\u3057\u3066\u306f\u7121\u8996\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u30b9\u30da\u30fc\u30b9\u306f\u5fc5\u9808\u3060\u304c\u3001 \u65e5\u672c\u8a9e\u3001[alphabet]\u3002 \u306f\u8a31\u53ef\u3059\u308b text: \"\u3053\u308c\u306f\u3001Exception\u3002\", options: { space: \"always\", exceptPunctuation: true } \u30b9\u30da\u30fc\u30b9\u306f\u4e0d\u8981\u3060\u304c\u3001 \u65e5\u672c\u8a9e\u3001 [alphabet] \u3002 \u306f\u8a31\u53ef\u3059\u308b\u3002 text: \"\u3053\u308c\u306f\u3001 Exception \u3002\", options: { space: \"never\", exceptPunctuation: true } Changelog See Releases page . Running tests Install devDependencies and Run npm test : npm i -d && npm test Contributing Pull requests and stars are always welcome. For bugs and feature requests, please create an issue . Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request :D Author github/azu twitter/azu_re License MIT \u00a9 azu","title":"textlint-rule-ja-space-between-half-and-full-width"},{"location":"node_modules/textlint-rule-ja-space-between-half-and-full-width/#textlint-rule-ja-space-between-half-and-full-width","text":"\u534a\u89d2\u6587\u5b57\u3068\u5168\u89d2\u6587\u5b57\u306e\u30b9\u30da\u30fc\u30b9\u306b\u3064\u3044\u3066\u306etextlint\u30eb\u30fc\u30eb \u534a\u89d2\u6587\u5b57\u3068\u5168\u89d2\u6587\u5b57\u306b\u30b9\u30da\u30fc\u30b9\u3092\u5165\u308c\u308b\u304b\u3069\u3046\u304b\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002 \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u3001\u534a\u89d2\u6587\u5b57\u3068\u5168\u89d2\u6587\u5b57\u306e\u9593\u306b\u30b9\u30da\u30fc\u30b9\u3092\u5165\u308c\u307e\u305b\u3093\u3002( \"never\" ) OK: \u3053\u308c\u306fUnicode NG: \u3053\u308c\u306f Unicode \u5168\u89d2\u6587\u5b57\u306b\u306f\u3001\u53e5\u8aad\u70b9\uff08\u3001\u3002\uff09\u3082\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u3001 exceptPunctuation: true \u3067\u3042\u308b\u305f\u3081\u7121\u8996\u3055\u308c\u307e\u3059\u3002 OK: \u3053\u308c\u3082\u3001Unicode\u3002","title":"textlint-rule-ja-space-between-half-and-full-width"},{"location":"node_modules/textlint-rule-ja-space-between-half-and-full-width/#install","text":"Install with npm : npm install textlint-rule-ja-space-between-half-and-full-width","title":"Install"},{"location":"node_modules/textlint-rule-ja-space-between-half-and-full-width/#usage","text":"Via .textlintrc (Recommended) { \"rules\" : { \"ja-space-between-half-and-full-width\" : { \"space\" : \"never\" } } } Via CLI textlint --rule ja-space-between-half-and-full-width README.md","title":"Usage"},{"location":"node_modules/textlint-rule-ja-space-between-half-and-full-width/#options","text":"space : \"always\" || \"never\" \u30c7\u30d5\u30a9\u30eb\u30c8: \"never\" \u30b9\u30da\u30fc\u30b9\u3092\u5e38\u306b \u5165\u308c\u308b( \"always\" ) or \u5165\u308c\u306a\u3044( \"never\" ) exceptPunctuation : boolean \u30c7\u30d5\u30a9\u30eb\u30c8: true \u53e5\u8aad\u70b9\uff08\u3001\u3002\uff09\u3092\u4f8b\u5916\u3068\u3057\u3066\u6271\u3046\u304b\u3069\u3046\u304b lintStyledNode : boolean \u30c7\u30d5\u30a9\u30eb\u30c8: false \u30d7\u30ec\u30fc\u30f3\u30c6\u30ad\u30b9\u30c8\u4ee5\u5916(\u30ea\u30f3\u30af\u3084\u753b\u50cf\u306e\u30ad\u30e3\u30d7\u30b7\u30e7\u30f3\u306a\u3069)\u3092 lint \u306e\u5bfe\u8c61\u3068\u3059\u308b\u304b\u3069\u3046\u304b (\u30d7\u30ec\u30fc\u30f3\u30c6\u30ad\u30b9\u30c8\u306e\u5224\u65ad\u57fa\u6e96\u306f textlint/textlint-rule-helper: This is helper library for creating textlint rule \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044) { \"rules\" : { \"ja-space-between-half-and-full-width\" : { \"space\" : \"always\" } } } exceptPunctuation: true \u3068\u3057\u305f\u5834\u5408\u306f\u3001\u53e5\u8aad\u70b9\u306b\u95a2\u3057\u3066\u306f\u7121\u8996\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u30b9\u30da\u30fc\u30b9\u306f\u5fc5\u9808\u3060\u304c\u3001 \u65e5\u672c\u8a9e\u3001[alphabet]\u3002 \u306f\u8a31\u53ef\u3059\u308b text: \"\u3053\u308c\u306f\u3001Exception\u3002\", options: { space: \"always\", exceptPunctuation: true } \u30b9\u30da\u30fc\u30b9\u306f\u4e0d\u8981\u3060\u304c\u3001 \u65e5\u672c\u8a9e\u3001 [alphabet] \u3002 \u306f\u8a31\u53ef\u3059\u308b\u3002 text: \"\u3053\u308c\u306f\u3001 Exception \u3002\", options: { space: \"never\", exceptPunctuation: true }","title":"Options"},{"location":"node_modules/textlint-rule-ja-space-between-half-and-full-width/#changelog","text":"See Releases page .","title":"Changelog"},{"location":"node_modules/textlint-rule-ja-space-between-half-and-full-width/#running-tests","text":"Install devDependencies and Run npm test : npm i -d && npm test","title":"Running tests"},{"location":"node_modules/textlint-rule-ja-space-between-half-and-full-width/#contributing","text":"Pull requests and stars are always welcome. For bugs and feature requests, please create an issue . Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request :D","title":"Contributing"},{"location":"node_modules/textlint-rule-ja-space-between-half-and-full-width/#author","text":"github/azu twitter/azu_re","title":"Author"},{"location":"node_modules/textlint-rule-ja-space-between-half-and-full-width/#license","text":"MIT \u00a9 azu","title":"License"},{"location":"node_modules/textlint-rule-zh-half-and-full-width-bracket/","text":"textlint-rule-zh-half-and-full-width-bracket textlint rule to check if correct full-width or half-width brackets are used. \u68c0\u6d4b\u662f\u5426\u6b63\u786e\u5730\u4f7f\u7528\u4e86\u5168\u89d2\u6216\u534a\u89d2\u62ec\u53f7\u3002 \u5b89\u88c5 Install Install with npm : npm install textlint-rule-zh-half-and-full-width-bracket \u4f7f\u7528 Usage Via .textlintrc (Recommended) \u5728 .textlintrc \u4e2d\u6dfb\u52a0\uff08\u63a8\u8350\uff09 { \"rules\" : { \"zh-half-and-full-width-bracket\" : true } } Via CLI \u901a\u8fc7\u547d\u4ee4\u884c\u8c03\u7528 textlint --rule zh-half-and-full-width-bracket README.md \u9009\u9879 Options bracket \u53ef\u914d\u7f6e bracket \u9009\u9879\uff0c\u53ef\u9009\u7684\u503c\u5305\u62ec \"halfWidth\" \uff0c \"fullWidth\" , \"mixed\" \uff08\u9ed8\u8ba4\uff09\u3002 \"halfWidth\" \uff0c \"fullWidth\" , \"mixed\" (default) is available for bracket option. \"halfWidth\" \uff1a\u4e00\u5f8b\u4f7f\u7528\u534a\u89d2\u62ec\u53f7 Always use half-width brackets \"fullWidth\" \uff1a\u4e00\u5f8b\u4f7f\u7528\u5168\u89d2\u62ec\u53f7 Always use full-width brackets \"mixed\" \uff1a\u62ec\u53f7\u5185\u6709\u4e2d\u6587\u7684\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\u4e2d\u6587\u5168\u89d2\u62ec\u53f7\uff1b\u62ec\u53f7\u5185\u662f\u5168\u82f1\u6587\u3001\u6570\u5b57\u7684\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\u82f1\u6587\u534a\u89d2\u62ec\u53f7 Using full-width brackets when all the text in brackets is in Chinese characters; otherwise using half-width brackets { \"rules\" : { \"zh-half-and-full-width-bracket\" : { // t ype o f bracke ts you wa nt // \u9009\u62e9\u4f60\u9700\u8981\u7684\u62ec\u53f7\u7c7b\u578b \"bracket\" : \"halfWidth\" } } } ignoredHtmlTags \u642d\u914d textlint-plugin-html \u4f7f\u7528\u65f6\uff0c\u53ef\u4ee5\u914d\u7f6e ignoredHtmlTags \u9009\u9879\uff0c\u5b83\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u8868\u793a\u5ffd\u7565\u54ea\u4e9b HTML \u6807\u7b7e\u5185\u7684\u5185\u5bb9\u3002\u9ed8\u8ba4\u4e3a [\"code\", \"pre\"] \u3002 When using with textlint-plugin-html , add this option to ignore contents of some tags. Default Value is [\"code\", \"pre\"] . \u5f00\u53d1 Development Build Builds source codes for publish to the lib folder. You can write ES2015+ source codes in src/ folder. npm run build Tests Run test code in test folder. Test textlint rule by textlint-tester . npm test License MIT \u00a9 chenyulu","title":"textlint-rule-zh-half-and-full-width-bracket [![textlint rule](https://img.shields.io/badge/textlint-fixable-green.svg?style=social)](https://textlint.github.io/)"},{"location":"node_modules/textlint-rule-zh-half-and-full-width-bracket/#textlint-rule-zh-half-and-full-width-bracket","text":"textlint rule to check if correct full-width or half-width brackets are used. \u68c0\u6d4b\u662f\u5426\u6b63\u786e\u5730\u4f7f\u7528\u4e86\u5168\u89d2\u6216\u534a\u89d2\u62ec\u53f7\u3002","title":"textlint-rule-zh-half-and-full-width-bracket"},{"location":"node_modules/textlint-rule-zh-half-and-full-width-bracket/#install","text":"Install with npm : npm install textlint-rule-zh-half-and-full-width-bracket","title":"\u5b89\u88c5 Install"},{"location":"node_modules/textlint-rule-zh-half-and-full-width-bracket/#usage","text":"Via .textlintrc (Recommended) \u5728 .textlintrc \u4e2d\u6dfb\u52a0\uff08\u63a8\u8350\uff09 { \"rules\" : { \"zh-half-and-full-width-bracket\" : true } } Via CLI \u901a\u8fc7\u547d\u4ee4\u884c\u8c03\u7528 textlint --rule zh-half-and-full-width-bracket README.md","title":"\u4f7f\u7528 Usage"},{"location":"node_modules/textlint-rule-zh-half-and-full-width-bracket/#options","text":"","title":"\u9009\u9879 Options"},{"location":"node_modules/textlint-rule-zh-half-and-full-width-bracket/#bracket","text":"\u53ef\u914d\u7f6e bracket \u9009\u9879\uff0c\u53ef\u9009\u7684\u503c\u5305\u62ec \"halfWidth\" \uff0c \"fullWidth\" , \"mixed\" \uff08\u9ed8\u8ba4\uff09\u3002 \"halfWidth\" \uff0c \"fullWidth\" , \"mixed\" (default) is available for bracket option. \"halfWidth\" \uff1a\u4e00\u5f8b\u4f7f\u7528\u534a\u89d2\u62ec\u53f7 Always use half-width brackets \"fullWidth\" \uff1a\u4e00\u5f8b\u4f7f\u7528\u5168\u89d2\u62ec\u53f7 Always use full-width brackets \"mixed\" \uff1a\u62ec\u53f7\u5185\u6709\u4e2d\u6587\u7684\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\u4e2d\u6587\u5168\u89d2\u62ec\u53f7\uff1b\u62ec\u53f7\u5185\u662f\u5168\u82f1\u6587\u3001\u6570\u5b57\u7684\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\u82f1\u6587\u534a\u89d2\u62ec\u53f7 Using full-width brackets when all the text in brackets is in Chinese characters; otherwise using half-width brackets { \"rules\" : { \"zh-half-and-full-width-bracket\" : { // t ype o f bracke ts you wa nt // \u9009\u62e9\u4f60\u9700\u8981\u7684\u62ec\u53f7\u7c7b\u578b \"bracket\" : \"halfWidth\" } } }","title":"bracket"},{"location":"node_modules/textlint-rule-zh-half-and-full-width-bracket/#ignoredhtmltags","text":"\u642d\u914d textlint-plugin-html \u4f7f\u7528\u65f6\uff0c\u53ef\u4ee5\u914d\u7f6e ignoredHtmlTags \u9009\u9879\uff0c\u5b83\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u8868\u793a\u5ffd\u7565\u54ea\u4e9b HTML \u6807\u7b7e\u5185\u7684\u5185\u5bb9\u3002\u9ed8\u8ba4\u4e3a [\"code\", \"pre\"] \u3002 When using with textlint-plugin-html , add this option to ignore contents of some tags. Default Value is [\"code\", \"pre\"] .","title":"ignoredHtmlTags"},{"location":"node_modules/textlint-rule-zh-half-and-full-width-bracket/#development","text":"","title":"\u5f00\u53d1 Development"},{"location":"node_modules/textlint-rule-zh-half-and-full-width-bracket/#build","text":"Builds source codes for publish to the lib folder. You can write ES2015+ source codes in src/ folder. npm run build","title":"Build"},{"location":"node_modules/textlint-rule-zh-half-and-full-width-bracket/#tests","text":"Run test code in test folder. Test textlint rule by textlint-tester . npm test","title":"Tests"},{"location":"node_modules/textlint-rule-zh-half-and-full-width-bracket/#license","text":"MIT \u00a9 chenyulu","title":"License"},{"location":"node_modules/traverse/readme/","text":"traverse Traverse and transform objects by visiting every node on a recursive walk. examples transform negative numbers in-place negative.js var traverse = require ( 'traverse' ); var obj = [ 5 , 6 , - 3 , [ 7 , 8 , - 2 , 1 ], { f : 10 , g : - 13 } ]; traverse ( obj ). forEach ( function ( x ) { if ( x < 0 ) this . update ( x + 128 ); }); console . dir ( obj ); Output: [ 5, 6, 125, [ 7, 8, 126, 1 ], { f: 10, g: 115 } ] collect leaf nodes leaves.js var traverse = require ( 'traverse' ); var obj = { a : [ 1 , 2 , 3 ], b : 4 , c : [ 5 , 6 ], d : { e : [ 7 , 8 ], f : 9 }, }; var leaves = traverse ( obj ). reduce ( function ( acc , x ) { if ( this . isLeaf ) acc . push ( x ); return acc ; }, []); console . dir ( leaves ); Output: [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ] scrub circular references scrub.js: var traverse = require ( 'traverse' ); var obj = { a : 1 , b : 2 , c : [ 3 , 4 ] }; obj . c . push ( obj ); var scrubbed = traverse ( obj ). map ( function ( x ) { if ( this . circular ) this . remove () }); console . dir ( scrubbed ); output: { a: 1, b: 2, c: [ 3, 4 ] } methods Each method that takes an fn uses the context documented below in the context section. .map(fn) Execute fn for each node in the object and return a new object with the results of the walk. To update nodes in the result use this.update(value) . .forEach(fn) Execute fn for each node in the object but unlike .map() , when this.update() is called it updates the object in-place. .reduce(fn, acc) For each node in the object, perform a left-fold with the return value of fn(acc, node) . If acc isn't specified, acc is set to the root object for the first step and the root element is skipped. .paths() Return an Array of every possible non-cyclic path in the object. Paths are Array s of string keys. .nodes() Return an Array of every node in the object. .clone() Create a deep clone of the object. .get(path) Get the element at the array path . .set(path, value) Set the element at the array path to value . .has(path) Return whether the element at the array path exists. context Each method that takes a callback has a context (its this object) with these attributes: this.node The present node on the recursive walk this.path An array of string keys from the root to the present node this.parent The context of the node's parent. This is undefined for the root node. this.key The name of the key of the present node in its parent. This is undefined for the root node. this.isRoot, this.notRoot Whether the present node is the root node this.isLeaf, this.notLeaf Whether or not the present node is a leaf node (has no children) this.level Depth of the node within the traversal this.circular If the node equals one of its parents, the circular attribute is set to the context of that parent and the traversal progresses no deeper. this.update(value, stopHere=false) Set a new value for the present node. All the elements in value will be recursively traversed unless stopHere is true. this.remove(stopHere=false) Remove the current element from the output. If the node is in an Array it will be spliced off. Otherwise it will be deleted from its parent. this.delete(stopHere=false) Delete the current element from its parent in the output. Calls delete even on Arrays. this.before(fn) Call this function before any of the children are traversed. You can assign into this.keys here to traverse in a custom order. this.after(fn) Call this function after any of the children are traversed. this.pre(fn) Call this function before each of the children are traversed. this.post(fn) Call this function after each of the children are traversed. install Using npm do: $ npm install traverse license MIT","title":"traverse"},{"location":"node_modules/traverse/readme/#traverse","text":"Traverse and transform objects by visiting every node on a recursive walk.","title":"traverse"},{"location":"node_modules/traverse/readme/#examples","text":"","title":"examples"},{"location":"node_modules/traverse/readme/#transform-negative-numbers-in-place","text":"negative.js var traverse = require ( 'traverse' ); var obj = [ 5 , 6 , - 3 , [ 7 , 8 , - 2 , 1 ], { f : 10 , g : - 13 } ]; traverse ( obj ). forEach ( function ( x ) { if ( x < 0 ) this . update ( x + 128 ); }); console . dir ( obj ); Output: [ 5, 6, 125, [ 7, 8, 126, 1 ], { f: 10, g: 115 } ]","title":"transform negative numbers in-place"},{"location":"node_modules/traverse/readme/#collect-leaf-nodes","text":"leaves.js var traverse = require ( 'traverse' ); var obj = { a : [ 1 , 2 , 3 ], b : 4 , c : [ 5 , 6 ], d : { e : [ 7 , 8 ], f : 9 }, }; var leaves = traverse ( obj ). reduce ( function ( acc , x ) { if ( this . isLeaf ) acc . push ( x ); return acc ; }, []); console . dir ( leaves ); Output: [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]","title":"collect leaf nodes"},{"location":"node_modules/traverse/readme/#scrub-circular-references","text":"scrub.js: var traverse = require ( 'traverse' ); var obj = { a : 1 , b : 2 , c : [ 3 , 4 ] }; obj . c . push ( obj ); var scrubbed = traverse ( obj ). map ( function ( x ) { if ( this . circular ) this . remove () }); console . dir ( scrubbed ); output: { a: 1, b: 2, c: [ 3, 4 ] }","title":"scrub circular references"},{"location":"node_modules/traverse/readme/#methods","text":"Each method that takes an fn uses the context documented below in the context section.","title":"methods"},{"location":"node_modules/traverse/readme/#mapfn","text":"Execute fn for each node in the object and return a new object with the results of the walk. To update nodes in the result use this.update(value) .","title":".map(fn)"},{"location":"node_modules/traverse/readme/#foreachfn","text":"Execute fn for each node in the object but unlike .map() , when this.update() is called it updates the object in-place.","title":".forEach(fn)"},{"location":"node_modules/traverse/readme/#reducefn-acc","text":"For each node in the object, perform a left-fold with the return value of fn(acc, node) . If acc isn't specified, acc is set to the root object for the first step and the root element is skipped.","title":".reduce(fn, acc)"},{"location":"node_modules/traverse/readme/#paths","text":"Return an Array of every possible non-cyclic path in the object. Paths are Array s of string keys.","title":".paths()"},{"location":"node_modules/traverse/readme/#nodes","text":"Return an Array of every node in the object.","title":".nodes()"},{"location":"node_modules/traverse/readme/#clone","text":"Create a deep clone of the object.","title":".clone()"},{"location":"node_modules/traverse/readme/#getpath","text":"Get the element at the array path .","title":".get(path)"},{"location":"node_modules/traverse/readme/#setpath-value","text":"Set the element at the array path to value .","title":".set(path, value)"},{"location":"node_modules/traverse/readme/#haspath","text":"Return whether the element at the array path exists.","title":".has(path)"},{"location":"node_modules/traverse/readme/#context","text":"Each method that takes a callback has a context (its this object) with these attributes:","title":"context"},{"location":"node_modules/traverse/readme/#thisnode","text":"The present node on the recursive walk","title":"this.node"},{"location":"node_modules/traverse/readme/#thispath","text":"An array of string keys from the root to the present node","title":"this.path"},{"location":"node_modules/traverse/readme/#thisparent","text":"The context of the node's parent. This is undefined for the root node.","title":"this.parent"},{"location":"node_modules/traverse/readme/#thiskey","text":"The name of the key of the present node in its parent. This is undefined for the root node.","title":"this.key"},{"location":"node_modules/traverse/readme/#thisisroot-thisnotroot","text":"Whether the present node is the root node","title":"this.isRoot, this.notRoot"},{"location":"node_modules/traverse/readme/#thisisleaf-thisnotleaf","text":"Whether or not the present node is a leaf node (has no children)","title":"this.isLeaf, this.notLeaf"},{"location":"node_modules/traverse/readme/#thislevel","text":"Depth of the node within the traversal","title":"this.level"},{"location":"node_modules/traverse/readme/#thiscircular","text":"If the node equals one of its parents, the circular attribute is set to the context of that parent and the traversal progresses no deeper.","title":"this.circular"},{"location":"node_modules/traverse/readme/#thisupdatevalue-stopherefalse","text":"Set a new value for the present node. All the elements in value will be recursively traversed unless stopHere is true.","title":"this.update(value, stopHere=false)"},{"location":"node_modules/traverse/readme/#thisremovestopherefalse","text":"Remove the current element from the output. If the node is in an Array it will be spliced off. Otherwise it will be deleted from its parent.","title":"this.remove(stopHere=false)"},{"location":"node_modules/traverse/readme/#thisdeletestopherefalse","text":"Delete the current element from its parent in the output. Calls delete even on Arrays.","title":"this.delete(stopHere=false)"},{"location":"node_modules/traverse/readme/#thisbeforefn","text":"Call this function before any of the children are traversed. You can assign into this.keys here to traverse in a custom order.","title":"this.before(fn)"},{"location":"node_modules/traverse/readme/#thisafterfn","text":"Call this function after any of the children are traversed.","title":"this.after(fn)"},{"location":"node_modules/traverse/readme/#thisprefn","text":"Call this function before each of the children are traversed.","title":"this.pre(fn)"},{"location":"node_modules/traverse/readme/#thispostfn","text":"Call this function after each of the children are traversed.","title":"this.post(fn)"},{"location":"node_modules/traverse/readme/#install","text":"Using npm do: $ npm install traverse","title":"install"},{"location":"node_modules/traverse/readme/#license","text":"MIT","title":"license"},{"location":"node_modules/trough/readme/","text":"trough trough /tr\u00f4f/ \u2014 a channel used to convey a liquid. trough is like ware with less sugar, and middleware functions can change the input of the next. Install npm : npm install trough Use var fs = require ( 'fs' ) var path = require ( 'path' ) var trough = require ( 'trough' ) var pipeline = trough () . use ( function ( fileName ) { console . log ( 'Checking\u2026 ' + fileName ) }) . use ( function ( fileName ) { return path . join ( process . cwd (), fileName ) }) . use ( function ( filePath , next ) { fs . stat ( filePath , function ( err , stats ) { next ( err , { filePath , stats }) }) }) . use ( function ( ctx , next ) { if ( ctx . stats . isFile ()) { fs . readFile ( ctx . filePath , next ) } else { next ( new Error ( 'Expected file' )) } }) pipeline . run ( 'readme.md' , console . log ) pipeline . run ( 'node_modules' , console . log ) Yields: Checking\u2026 readme.md Checking\u2026 node_modules Error: Expected file at ~/example.js:21:12 at wrapped (~/node_modules/trough/index.js:93:19) at next (~/node_modules/trough/index.js:56:24) at done (~/node_modules/trough/index.js:124:12) at ~/node_modules/example.js:14:7 at FSReqWrap.oncomplete (fs.js:153:5) null <Buffer 23 20 74 72 6f 75 67 68 20 5b 21 5b 42 75 69 6c 64 20 53 74 61 74 75 73 5d 5b 74 72 61 76 69 73 2d 62 61 64 67 65 5d 5d 5b 74 72 61 76 69 73 5d 20 5b ... > API trough() Create a new Trough . trough.wrap(middleware, callback[, \u2026input]) Call middleware with all input. If middleware accepts more arguments than given in input, and extra done function is passed in after the input when calling it. It must be called. The first value in input is called the main input value. All other input values are called the rest input values. The values given to callback are the input values, merged with every non-nully output value. If middleware throws an error, returns a promise that is rejected, or calls the given done function with an error, callback is invoked with that error If middleware returns a value or returns a promise that is resolved, that value is the main output value If middleware calls done , all non-nully values except for the first one (the error) overwrite the output values Trough A pipeline. Trough#run([input\u2026, ]done) Run the pipeline (all use() d middleware). Invokes done on completion with either an error or the output of the last middleware. Note! as the length of input defines whether async functions get a next function, it\u2019s recommended to keep input at one value normally. function done(err?, [output\u2026]) The final handler passed to run() , invoked with an error if a middleware function rejected, passed, or threw one, or the output of the last middleware function. Trough#use(fn) Add fn , a middleware function , to the pipeline. function fn([input\u2026, ][next]) A middleware function invoked with the output of its predecessor. Synchronous If fn returns or throws an error, the pipeline fails and done is invoked with that error. If fn returns a value (neither null nor undefined ), the first input of the next function is set to that value (all other input is passed through). The following example shows how returning an error stops the pipeline: var trough = require ( 'trough' ) trough () . use ( function ( val ) { return new Error ( 'Got: ' + val ) }) . run ( 'some value' , console . log ) Yields: Error: Got: some value at ~/example.js:5:12 \u2026 The following example shows how throwing an error stops the pipeline: var trough = require ( 'trough' ) trough () . use ( function ( val ) { throw new Error ( 'Got: ' + val ) }) . run ( 'more value' , console . log ) Yields: Error: Got: more value at ~/example.js:5:11 \u2026 The following example shows how the first output can be modified: var trough = require ( 'trough' ) trough () . use ( function ( val ) { return 'even ' + val }) . run ( 'more value' , 'untouched' , console . log ) Yields: null 'even more value' 'untouched' Promise If fn returns a promise, and that promise rejects, the pipeline fails and done is invoked with the rejected value. If fn returns a promise, and that promise resolves with a value (neither null nor undefined ), the first input of the next function is set to that value (all other input is passed through). The following example shows how rejecting a promise stops the pipeline: var trough = require ( 'trough' ) trough () . use ( function ( val ) { return new Promise ( function ( resolve , reject ) { reject ( 'Got: ' + val ) }) }) . run ( 'val' , console . log ) Yields: Got: val The following example shows how the input isn\u2019t touched by resolving to null . var trough = require ( 'trough' ) trough () . use ( function () { return new Promise ( function ( resolve ) { setTimeout ( function () { resolve ( null ) }, 100 ) }) }) . run ( 'Input' , console . log ) Yields: null 'Input' Asynchronous If fn accepts one more argument than the given input , a next function is given (after the input). next must be called, but doesn\u2019t have to be called async. If next is given a value (neither null nor undefined ) as its first argument, the pipeline fails and done is invoked with that value. If next is given no value (either null or undefined ) as the first argument, all following non-nully values change the input of the following function, and all nully values default to the input . The following example shows how passing a first argument stops the pipeline: var trough = require ( 'trough' ) trough () . use ( function ( val , next ) { next ( new Error ( 'Got: ' + val )) }) . run ( 'val' , console . log ) Yields: Error: Got: val at ~/example.js:5:10 The following example shows how more values than the input are passed. var trough = require ( 'trough' ) trough () . use ( function ( val , next ) { setTimeout ( function () { next ( null , null , 'values' ) }, 100 ) }) . run ( 'some' , console . log ) Yields: null 'some' 'values' License MIT \u00a9 Titus Wormer","title":"trough"},{"location":"node_modules/trough/readme/#trough","text":"trough /tr\u00f4f/ \u2014 a channel used to convey a liquid. trough is like ware with less sugar, and middleware functions can change the input of the next.","title":"trough"},{"location":"node_modules/trough/readme/#install","text":"npm : npm install trough","title":"Install"},{"location":"node_modules/trough/readme/#use","text":"var fs = require ( 'fs' ) var path = require ( 'path' ) var trough = require ( 'trough' ) var pipeline = trough () . use ( function ( fileName ) { console . log ( 'Checking\u2026 ' + fileName ) }) . use ( function ( fileName ) { return path . join ( process . cwd (), fileName ) }) . use ( function ( filePath , next ) { fs . stat ( filePath , function ( err , stats ) { next ( err , { filePath , stats }) }) }) . use ( function ( ctx , next ) { if ( ctx . stats . isFile ()) { fs . readFile ( ctx . filePath , next ) } else { next ( new Error ( 'Expected file' )) } }) pipeline . run ( 'readme.md' , console . log ) pipeline . run ( 'node_modules' , console . log ) Yields: Checking\u2026 readme.md Checking\u2026 node_modules Error: Expected file at ~/example.js:21:12 at wrapped (~/node_modules/trough/index.js:93:19) at next (~/node_modules/trough/index.js:56:24) at done (~/node_modules/trough/index.js:124:12) at ~/node_modules/example.js:14:7 at FSReqWrap.oncomplete (fs.js:153:5) null <Buffer 23 20 74 72 6f 75 67 68 20 5b 21 5b 42 75 69 6c 64 20 53 74 61 74 75 73 5d 5b 74 72 61 76 69 73 2d 62 61 64 67 65 5d 5d 5b 74 72 61 76 69 73 5d 20 5b ... >","title":"Use"},{"location":"node_modules/trough/readme/#api","text":"","title":"API"},{"location":"node_modules/trough/readme/#trough_1","text":"Create a new Trough .","title":"trough()"},{"location":"node_modules/trough/readme/#troughwrapmiddleware-callback-input","text":"Call middleware with all input. If middleware accepts more arguments than given in input, and extra done function is passed in after the input when calling it. It must be called. The first value in input is called the main input value. All other input values are called the rest input values. The values given to callback are the input values, merged with every non-nully output value. If middleware throws an error, returns a promise that is rejected, or calls the given done function with an error, callback is invoked with that error If middleware returns a value or returns a promise that is resolved, that value is the main output value If middleware calls done , all non-nully values except for the first one (the error) overwrite the output values","title":"trough.wrap(middleware, callback[, \u2026input])"},{"location":"node_modules/trough/readme/#trough_2","text":"A pipeline.","title":"Trough"},{"location":"node_modules/trough/readme/#troughruninput-done","text":"Run the pipeline (all use() d middleware). Invokes done on completion with either an error or the output of the last middleware. Note! as the length of input defines whether async functions get a next function, it\u2019s recommended to keep input at one value normally.","title":"Trough#run([input\u2026, ]done)"},{"location":"node_modules/trough/readme/#function-doneerr-output","text":"The final handler passed to run() , invoked with an error if a middleware function rejected, passed, or threw one, or the output of the last middleware function.","title":"function done(err?, [output\u2026])"},{"location":"node_modules/trough/readme/#troughusefn","text":"Add fn , a middleware function , to the pipeline.","title":"Trough#use(fn)"},{"location":"node_modules/trough/readme/#function-fninput-next","text":"A middleware function invoked with the output of its predecessor.","title":"function fn([input\u2026, ][next])"},{"location":"node_modules/trough/readme/#synchronous","text":"If fn returns or throws an error, the pipeline fails and done is invoked with that error. If fn returns a value (neither null nor undefined ), the first input of the next function is set to that value (all other input is passed through). The following example shows how returning an error stops the pipeline: var trough = require ( 'trough' ) trough () . use ( function ( val ) { return new Error ( 'Got: ' + val ) }) . run ( 'some value' , console . log ) Yields: Error: Got: some value at ~/example.js:5:12 \u2026 The following example shows how throwing an error stops the pipeline: var trough = require ( 'trough' ) trough () . use ( function ( val ) { throw new Error ( 'Got: ' + val ) }) . run ( 'more value' , console . log ) Yields: Error: Got: more value at ~/example.js:5:11 \u2026 The following example shows how the first output can be modified: var trough = require ( 'trough' ) trough () . use ( function ( val ) { return 'even ' + val }) . run ( 'more value' , 'untouched' , console . log ) Yields: null 'even more value' 'untouched'","title":"Synchronous"},{"location":"node_modules/trough/readme/#promise","text":"If fn returns a promise, and that promise rejects, the pipeline fails and done is invoked with the rejected value. If fn returns a promise, and that promise resolves with a value (neither null nor undefined ), the first input of the next function is set to that value (all other input is passed through). The following example shows how rejecting a promise stops the pipeline: var trough = require ( 'trough' ) trough () . use ( function ( val ) { return new Promise ( function ( resolve , reject ) { reject ( 'Got: ' + val ) }) }) . run ( 'val' , console . log ) Yields: Got: val The following example shows how the input isn\u2019t touched by resolving to null . var trough = require ( 'trough' ) trough () . use ( function () { return new Promise ( function ( resolve ) { setTimeout ( function () { resolve ( null ) }, 100 ) }) }) . run ( 'Input' , console . log ) Yields: null 'Input'","title":"Promise"},{"location":"node_modules/trough/readme/#asynchronous","text":"If fn accepts one more argument than the given input , a next function is given (after the input). next must be called, but doesn\u2019t have to be called async. If next is given a value (neither null nor undefined ) as its first argument, the pipeline fails and done is invoked with that value. If next is given no value (either null or undefined ) as the first argument, all following non-nully values change the input of the following function, and all nully values default to the input . The following example shows how passing a first argument stops the pipeline: var trough = require ( 'trough' ) trough () . use ( function ( val , next ) { next ( new Error ( 'Got: ' + val )) }) . run ( 'val' , console . log ) Yields: Error: Got: val at ~/example.js:5:10 The following example shows how more values than the input are passed. var trough = require ( 'trough' ) trough () . use ( function ( val , next ) { setTimeout ( function () { next ( null , null , 'values' ) }, 100 ) }) . run ( 'some' , console . log ) Yields: null 'some' 'values'","title":"Asynchronous"},{"location":"node_modules/trough/readme/#license","text":"MIT \u00a9 Titus Wormer","title":"License"},{"location":"node_modules/try-resolve/","text":"try-resolve Installation $ npm install try-resolve Usage var resolve = require(\"try-resolve\"); resolve(filename, [require]) filename is a filename to be resolved. require is an optional instance of the require function from any file. Returns null if the file can't be required, otherwise it returns an absolute filename string. Example if ( require ( \"try-resolve\" )( \"/home/sebastian/file\" )) { // this file can be required } else { // it can't } resolve.relative(filename) Resolve a filename relative to the cwd.","title":"try-resolve"},{"location":"node_modules/try-resolve/#try-resolve","text":"","title":"try-resolve"},{"location":"node_modules/try-resolve/#installation","text":"$ npm install try-resolve","title":"Installation"},{"location":"node_modules/try-resolve/#usage","text":"var resolve = require(\"try-resolve\");","title":"Usage"},{"location":"node_modules/try-resolve/#resolvefilename-require","text":"filename is a filename to be resolved. require is an optional instance of the require function from any file. Returns null if the file can't be required, otherwise it returns an absolute filename string.","title":"resolve(filename, [require])"},{"location":"node_modules/try-resolve/#example","text":"if ( require ( \"try-resolve\" )( \"/home/sebastian/file\" )) { // this file can be required } else { // it can't }","title":"Example"},{"location":"node_modules/try-resolve/#resolverelativefilename","text":"Resolve a filename relative to the cwd.","title":"resolve.relative(filename)"},{"location":"node_modules/type-check/","text":"type-check type-check is a library which allows you to check the types of JavaScript values at runtime with a Haskell like type syntax. It is great for checking external input, for testing, or even for adding a bit of safety to your internal code. It is a major component of levn . MIT license. Version 0.4.0. Check out the demo . For updates on type-check , follow me on twitter . npm install type-check Quick Examples // Basic types: var typeCheck = require ( 'type-check' ). typeCheck ; typeCheck ( 'Number' , 1 ); // true typeCheck ( 'Number' , 'str' ); // false typeCheck ( 'Error' , new Error ); // true typeCheck ( 'Undefined' , undefined ); // true // Comment typeCheck ( 'count::Number' , 1 ); // true // One type OR another type: typeCheck ( 'Number | String' , 2 ); // true typeCheck ( 'Number | String' , 'str' ); // true // Wildcard, matches all types: typeCheck ( '*' , 2 ) // true // Array, all elements of a single type: typeCheck ( '[Number]' , [ 1 , 2 , 3 ]); // true typeCheck ( '[Number]' , [ 1 , 'str' , 3 ]); // false // Tuples, or fixed length arrays with elements of different types: typeCheck ( '(String, Number)' , [ 'str' , 2 ]); // true typeCheck ( '(String, Number)' , [ 'str' ]); // false typeCheck ( '(String, Number)' , [ 'str' , 2 , 5 ]); // false // Object properties: typeCheck ( '{x: Number, y: Boolean}' , { x : 2 , y : false }); // true typeCheck ( '{x: Number, y: Boolean}' , { x : 2 }); // false typeCheck ( '{x: Number, y: Maybe Boolean}' , { x : 2 }); // true typeCheck ( '{x: Number, y: Boolean}' , { x : 2 , y : false , z : 3 }); // false typeCheck ( '{x: Number, y: Boolean, ...}' , { x : 2 , y : false , z : 3 }); // true // A particular type AND object properties: typeCheck ( 'RegExp{source: String, ...}' , /re/i ); // true typeCheck ( 'RegExp{source: String, ...}' , { source : 're' }); // false // Custom types: var opt = { customTypes : { Even : { typeOf : 'Number' , validate : function ( x ) { return x % 2 === 0 ; }}}}; typeCheck ( 'Even' , 2 , opt ); // true // Nested: var type = '{a: (String, [Number], {y: Array, ...}), b: Error{message: String, ...}}' typeCheck ( type , { a : [ 'hi' , [ 1 , 2 , 3 ], { y : [ 1 , 'ms' ]}], b : new Error ( 'oh no' )}); // true Check out the type syntax format and guide . Usage require('type-check'); returns an object that exposes four properties. VERSION is the current version of the library as a string. typeCheck , parseType , and parsedTypeCheck are functions. // typeCheck(type, input, options); typeCheck ( 'Number' , 2 ); // true // parseType(type); var parsedType = parseType ( 'Number' ); // object // parsedTypeCheck(parsedType, input, options); parsedTypeCheck ( parsedType , 2 ); // true typeCheck(type, input, options) typeCheck checks a JavaScript value input against type written in the type format (and taking account the optional options ) and returns whether the input matches the type . arguments type - String - the type written in the type format which to check against input - * - any JavaScript value, which is to be checked against the type options - Maybe Object - an optional parameter specifying additional options, currently the only available option is specifying custom types returns Boolean - whether the input matches the type example typeCheck ( 'Number' , 2 ); // true parseType(type) parseType parses string type written in the type format into an object representing the parsed type. arguments type - String - the type written in the type format which to parse returns Object - an object in the parsed type format representing the parsed type example parseType ( 'Number' ); // [{type: 'Number'}] parsedTypeCheck(parsedType, input, options) parsedTypeCheck checks a JavaScript value input against parsed type in the parsed type format (and taking account the optional options ) and returns whether the input matches the type . Use this in conjunction with parseType if you are going to use a type more than once. arguments type - Object - the type in the parsed type format which to check against input - * - any JavaScript value, which is to be checked against the type options - Maybe Object - an optional parameter specifying additional options, currently the only available option is specifying custom types returns Boolean - whether the input matches the type example parsedTypeCheck ([{ type : 'Number' }], 2 ); // true var parsedType = parseType ( 'String' ); parsedTypeCheck ( parsedType , 'str' ); // true Type Format Syntax White space is ignored. The root node is a Types . Identifier = [\\$\\w]+ - a group of any lower or upper case letters, numbers, underscores, or dollar signs - eg. String Type = an Identifier , an Identifier followed by a Structure , just a Structure , or a wildcard * - eg. String , Object{x: Number} , {x: Number} , Array{0: String, 1: Boolean, length: Number} , * Types = optionally a comment (an Identifier followed by a :: ), optionally the identifier Maybe , one or more Type , separated by | - eg. Number , String | Date , Maybe Number , Maybe Boolean | String Structure = Fields , or a Tuple , or an Array - eg. {x: Number} , (String, Number) , [Date] Fields = a { , followed one or more Field separated by a comma , (trailing comma , is permitted), optionally an ... (always preceded by a comma , ), followed by a } - eg. {x: Number, y: String} , {k: Function, ...} Field = an Identifier , followed by a colon : , followed by Types - eg. x: Date | String , y: Boolean Tuple = a ( , followed by one or more Types separated by a comma , (trailing comma , is permitted), followed by a ) - eg (Date) , (Number, Date) Array = a [ followed by exactly one Types followed by a ] - eg. [Boolean] , [Boolean | Null] Guide type-check uses Object.toString to find out the basic type of a value. Specifically, {}. toString . call ( VALUE ). slice ( 8 , - 1 ) {}. toString . call ( true ). slice ( 8 , - 1 ) // 'Boolean' A basic type, eg. Number , uses this check. This is much more versatile than using typeof - for example, with document , typeof produces 'object' which isn't that useful, and our technique produces 'HTMLDocument' . You may check for multiple types by separating types with a | . The checker proceeds from left to right, and passes if the value is any of the types - eg. String | Boolean first checks if the value is a string, and then if it is a boolean. If it is none of those, then it returns false. Adding a Maybe in front of a list of multiple types is the same as also checking for Null and Undefined - eg. Maybe String is equivalent to Undefined | Null | String . You may add a comment to remind you of what the type is for by following an identifier with a :: before a type (or multiple types). The comment is simply thrown out. The wildcard * matches all types. There are three types of structures for checking the contents of a value: 'fields', 'tuple', and 'array'. If used by itself, a 'fields' structure will pass with any type of object as long as it is an instance of Object and the properties pass - this allows for duck typing - eg. {x: Boolean} . To check if the properties pass, and the value is of a certain type, you can specify the type - eg. Error{message: String} . If you want to make a field optional, you can simply use Maybe - eg. {x: Boolean, y: Maybe String} will still pass if y is undefined (or null). If you don't care if the value has properties beyond what you have specified, you can use the 'etc' operator ... - eg. {x: Boolean, ...} will match an object with an x property that is a boolean, and with zero or more other properties. For an array, you must specify one or more types (separated by | ) - it will pass for something of any length as long as each element passes the types provided - eg. [Number] , [Number | String] . A tuple checks for a fixed number of elements, each of a potentially different type. Each element is separated by a comma - eg. (String, Number) . An array and tuple structure check that the value is of type Array by default, but if another type is specified, they will check for that instead - eg. Int32Array[Number] . You can use the wildcard * to search for any type at all. Check out the type precedence library for type-check. Options Options is an object. It is an optional parameter to the typeCheck and parsedTypeCheck functions. The only current option is customTypes . Custom Types Example: var options = { customTypes : { Even : { typeOf : 'Number' , validate : function ( x ) { return x % 2 === 0 ; } } } }; typeCheck ( 'Even' , 2 , options ); // true typeCheck ( 'Even' , 3 , options ); // false customTypes allows you to set up custom types for validation. The value of this is an object. The keys of the object are the types you will be matching. Each value of the object will be an object having a typeOf property - a string, and validate property - a function. The typeOf property is the type the value should be (optional - if not set only validate will be used), and validate is a function which should return true if the value is of that type. validate receives one parameter, which is the value that we are checking. Technical About type-check is written in LiveScript - a language that compiles to JavaScript. It also uses the prelude.ls library.","title":"type-check [![Build Status](https://travis-ci.org/gkz/type-check.png?branch=master)](https://travis-ci.org/gkz/type-check)"},{"location":"node_modules/type-check/#type-check","text":"type-check is a library which allows you to check the types of JavaScript values at runtime with a Haskell like type syntax. It is great for checking external input, for testing, or even for adding a bit of safety to your internal code. It is a major component of levn . MIT license. Version 0.4.0. Check out the demo . For updates on type-check , follow me on twitter . npm install type-check","title":"type-check"},{"location":"node_modules/type-check/#quick-examples","text":"// Basic types: var typeCheck = require ( 'type-check' ). typeCheck ; typeCheck ( 'Number' , 1 ); // true typeCheck ( 'Number' , 'str' ); // false typeCheck ( 'Error' , new Error ); // true typeCheck ( 'Undefined' , undefined ); // true // Comment typeCheck ( 'count::Number' , 1 ); // true // One type OR another type: typeCheck ( 'Number | String' , 2 ); // true typeCheck ( 'Number | String' , 'str' ); // true // Wildcard, matches all types: typeCheck ( '*' , 2 ) // true // Array, all elements of a single type: typeCheck ( '[Number]' , [ 1 , 2 , 3 ]); // true typeCheck ( '[Number]' , [ 1 , 'str' , 3 ]); // false // Tuples, or fixed length arrays with elements of different types: typeCheck ( '(String, Number)' , [ 'str' , 2 ]); // true typeCheck ( '(String, Number)' , [ 'str' ]); // false typeCheck ( '(String, Number)' , [ 'str' , 2 , 5 ]); // false // Object properties: typeCheck ( '{x: Number, y: Boolean}' , { x : 2 , y : false }); // true typeCheck ( '{x: Number, y: Boolean}' , { x : 2 }); // false typeCheck ( '{x: Number, y: Maybe Boolean}' , { x : 2 }); // true typeCheck ( '{x: Number, y: Boolean}' , { x : 2 , y : false , z : 3 }); // false typeCheck ( '{x: Number, y: Boolean, ...}' , { x : 2 , y : false , z : 3 }); // true // A particular type AND object properties: typeCheck ( 'RegExp{source: String, ...}' , /re/i ); // true typeCheck ( 'RegExp{source: String, ...}' , { source : 're' }); // false // Custom types: var opt = { customTypes : { Even : { typeOf : 'Number' , validate : function ( x ) { return x % 2 === 0 ; }}}}; typeCheck ( 'Even' , 2 , opt ); // true // Nested: var type = '{a: (String, [Number], {y: Array, ...}), b: Error{message: String, ...}}' typeCheck ( type , { a : [ 'hi' , [ 1 , 2 , 3 ], { y : [ 1 , 'ms' ]}], b : new Error ( 'oh no' )}); // true Check out the type syntax format and guide .","title":"Quick Examples"},{"location":"node_modules/type-check/#usage","text":"require('type-check'); returns an object that exposes four properties. VERSION is the current version of the library as a string. typeCheck , parseType , and parsedTypeCheck are functions. // typeCheck(type, input, options); typeCheck ( 'Number' , 2 ); // true // parseType(type); var parsedType = parseType ( 'Number' ); // object // parsedTypeCheck(parsedType, input, options); parsedTypeCheck ( parsedType , 2 ); // true","title":"Usage"},{"location":"node_modules/type-check/#typechecktype-input-options","text":"typeCheck checks a JavaScript value input against type written in the type format (and taking account the optional options ) and returns whether the input matches the type .","title":"typeCheck(type, input, options)"},{"location":"node_modules/type-check/#arguments","text":"type - String - the type written in the type format which to check against input - * - any JavaScript value, which is to be checked against the type options - Maybe Object - an optional parameter specifying additional options, currently the only available option is specifying custom types","title":"arguments"},{"location":"node_modules/type-check/#returns","text":"Boolean - whether the input matches the type","title":"returns"},{"location":"node_modules/type-check/#example","text":"typeCheck ( 'Number' , 2 ); // true","title":"example"},{"location":"node_modules/type-check/#parsetypetype","text":"parseType parses string type written in the type format into an object representing the parsed type.","title":"parseType(type)"},{"location":"node_modules/type-check/#arguments_1","text":"type - String - the type written in the type format which to parse","title":"arguments"},{"location":"node_modules/type-check/#returns_1","text":"Object - an object in the parsed type format representing the parsed type","title":"returns"},{"location":"node_modules/type-check/#example_1","text":"parseType ( 'Number' ); // [{type: 'Number'}]","title":"example"},{"location":"node_modules/type-check/#parsedtypecheckparsedtype-input-options","text":"parsedTypeCheck checks a JavaScript value input against parsed type in the parsed type format (and taking account the optional options ) and returns whether the input matches the type . Use this in conjunction with parseType if you are going to use a type more than once.","title":"parsedTypeCheck(parsedType, input, options)"},{"location":"node_modules/type-check/#arguments_2","text":"type - Object - the type in the parsed type format which to check against input - * - any JavaScript value, which is to be checked against the type options - Maybe Object - an optional parameter specifying additional options, currently the only available option is specifying custom types","title":"arguments"},{"location":"node_modules/type-check/#returns_2","text":"Boolean - whether the input matches the type","title":"returns"},{"location":"node_modules/type-check/#example_2","text":"parsedTypeCheck ([{ type : 'Number' }], 2 ); // true var parsedType = parseType ( 'String' ); parsedTypeCheck ( parsedType , 'str' ); // true","title":"example"},{"location":"node_modules/type-check/#type-format","text":"","title":"Type Format"},{"location":"node_modules/type-check/#syntax","text":"White space is ignored. The root node is a Types . Identifier = [\\$\\w]+ - a group of any lower or upper case letters, numbers, underscores, or dollar signs - eg. String Type = an Identifier , an Identifier followed by a Structure , just a Structure , or a wildcard * - eg. String , Object{x: Number} , {x: Number} , Array{0: String, 1: Boolean, length: Number} , * Types = optionally a comment (an Identifier followed by a :: ), optionally the identifier Maybe , one or more Type , separated by | - eg. Number , String | Date , Maybe Number , Maybe Boolean | String Structure = Fields , or a Tuple , or an Array - eg. {x: Number} , (String, Number) , [Date] Fields = a { , followed one or more Field separated by a comma , (trailing comma , is permitted), optionally an ... (always preceded by a comma , ), followed by a } - eg. {x: Number, y: String} , {k: Function, ...} Field = an Identifier , followed by a colon : , followed by Types - eg. x: Date | String , y: Boolean Tuple = a ( , followed by one or more Types separated by a comma , (trailing comma , is permitted), followed by a ) - eg (Date) , (Number, Date) Array = a [ followed by exactly one Types followed by a ] - eg. [Boolean] , [Boolean | Null]","title":"Syntax"},{"location":"node_modules/type-check/#guide","text":"type-check uses Object.toString to find out the basic type of a value. Specifically, {}. toString . call ( VALUE ). slice ( 8 , - 1 ) {}. toString . call ( true ). slice ( 8 , - 1 ) // 'Boolean' A basic type, eg. Number , uses this check. This is much more versatile than using typeof - for example, with document , typeof produces 'object' which isn't that useful, and our technique produces 'HTMLDocument' . You may check for multiple types by separating types with a | . The checker proceeds from left to right, and passes if the value is any of the types - eg. String | Boolean first checks if the value is a string, and then if it is a boolean. If it is none of those, then it returns false. Adding a Maybe in front of a list of multiple types is the same as also checking for Null and Undefined - eg. Maybe String is equivalent to Undefined | Null | String . You may add a comment to remind you of what the type is for by following an identifier with a :: before a type (or multiple types). The comment is simply thrown out. The wildcard * matches all types. There are three types of structures for checking the contents of a value: 'fields', 'tuple', and 'array'. If used by itself, a 'fields' structure will pass with any type of object as long as it is an instance of Object and the properties pass - this allows for duck typing - eg. {x: Boolean} . To check if the properties pass, and the value is of a certain type, you can specify the type - eg. Error{message: String} . If you want to make a field optional, you can simply use Maybe - eg. {x: Boolean, y: Maybe String} will still pass if y is undefined (or null). If you don't care if the value has properties beyond what you have specified, you can use the 'etc' operator ... - eg. {x: Boolean, ...} will match an object with an x property that is a boolean, and with zero or more other properties. For an array, you must specify one or more types (separated by | ) - it will pass for something of any length as long as each element passes the types provided - eg. [Number] , [Number | String] . A tuple checks for a fixed number of elements, each of a potentially different type. Each element is separated by a comma - eg. (String, Number) . An array and tuple structure check that the value is of type Array by default, but if another type is specified, they will check for that instead - eg. Int32Array[Number] . You can use the wildcard * to search for any type at all. Check out the type precedence library for type-check.","title":"Guide"},{"location":"node_modules/type-check/#options","text":"Options is an object. It is an optional parameter to the typeCheck and parsedTypeCheck functions. The only current option is customTypes .","title":"Options"},{"location":"node_modules/type-check/#custom-types","text":"Example: var options = { customTypes : { Even : { typeOf : 'Number' , validate : function ( x ) { return x % 2 === 0 ; } } } }; typeCheck ( 'Even' , 2 , options ); // true typeCheck ( 'Even' , 3 , options ); // false customTypes allows you to set up custom types for validation. The value of this is an object. The keys of the object are the types you will be matching. Each value of the object will be an object having a typeOf property - a string, and validate property - a function. The typeOf property is the type the value should be (optional - if not set only validate will be used), and validate is a function which should return true if the value is of that type. validate receives one parameter, which is the value that we are checking.","title":"Custom Types"},{"location":"node_modules/type-check/#technical-about","text":"type-check is written in LiveScript - a language that compiles to JavaScript. It also uses the prelude.ls library.","title":"Technical About"},{"location":"node_modules/unified/readme/","text":"unified is an interface for processing text using syntax trees. It\u2019s what powers remark (Markdown), retext (natural language), and rehype (HTML), and allows for processing between formats. Intro unified enables new exciting projects like Gatsby to pull in Markdown, MDX to embed JSX , and Prettier to format it. It\u2019s used in about 500k projects on GitHub and has about 25m downloads each month on npm: you\u2019re probably using it. Some notable users are Node.js , Vercel , Netlify , GitHub , Mozilla , WordPress , Adobe , Facebook , Google , and many more. To read about what we are up to, follow us Twitter For a less technical and more practical introduction to unified, visit unifiedjs.com and peruse its Learn section Browse awesome unified to find out more about the ecosystem Questions? Get help on Discussions ! Check out Contribute below to find out how to help out, or become a backer or sponsor on OpenCollective Sponsors Support this effort and give back by sponsoring on OpenCollective ! Gatsby \ud83e\udd47 Vercel \ud83e\udd47 Netlify Holloway ThemeIsle Boost Hub Expo You? Install npm : npm install unified This package comes with types. If you\u2019re using TypeScript, make sure to also install @types/unist . Use var unified = require ( 'unified' ) var markdown = require ( 'remark-parse' ) var remark2rehype = require ( 'remark-rehype' ) var doc = require ( 'rehype-document' ) var format = require ( 'rehype-format' ) var html = require ( 'rehype-stringify' ) var report = require ( 'vfile-reporter' ) unified () . use ( markdown ) . use ( remark2rehype ) . use ( doc , { title : '\ud83d\udc4b\ud83c\udf0d' }) . use ( format ) . use ( html ) . process ( '# Hello world!' , function ( err , file ) { console . error ( report ( err || file )) console . log ( String ( file )) }) Yields: no issues found <!doctype html> < html lang = \"en\" > < head > < meta charset = \"utf-8\" > < title > \ud83d\udc4b\ud83c\udf0d </ title > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > </ head > < body > < h1 > Hello world! </ h1 > </ body > </ html > Contents Description API processor() processor.use(plugin[, options]) processor.parse(file) processor.stringify(node[, file]) processor.run(node[, file][, done]) processor.runSync(node[, file]) processor.process(file[, done]) processor.processSync(file|value) processor.data([key[, value]]) processor.freeze() Plugin function attacher([options]) function transformer(node, file[, next]) Preset Contribute Acknowledgments License Description unified is an interface for processing text using syntax trees. Syntax trees are a representation of text understandable to programs. Those programs, called plugin s, take these trees and inspect and modify them. To get to the syntax tree from text, there is a parser . To get from that back to text, there is a compiler . This is the process of a processor . | ........................ process ........................... | | .......... parse ... | ... run ... | ... stringify ..........| +--------+ +----------+ Input ->- | Parser | ->- Syntax Tree ->- | Compiler | ->- Output +--------+ | +----------+ X | +--------------+ | Transformers | +--------------+ Processors Every processor implements another processor. To create a processor, call another processor. The new processor is configured to work the same as its ancestor. But when the descendant processor is configured in the future it does not affect the ancestral processor. When processors are exposed from a module (for example, unified itself) they should not be configured directly, as that would change their behavior for all module users. Those processors are frozen and they should be called to create a new processor before they are used. Syntax trees The syntax trees used in unified are unist nodes. A node is a plain JavaScript objects with a type field. The semantics of nodes and format of syntax trees is defined by other projects. There are several utilities for working with nodes. hast \u2014 HTML mdast \u2014 Markdown nlcst \u2014 Natural language xast \u2014 XML List of processors The following projects process different syntax tree formats. They parse text to a syntax tree and compile that back to text. These processors can be used as is, or their parser and compiler can be mixed and matched with unified and plugins to process between different syntaxes. rehype ( hast ) \u2014 HTML remark ( mdast ) \u2014 Markdown retext ( nlcst ) \u2014 Natural language List of plugins The below plugins work with unified , on all syntax tree formats: unified-diff \u2014 Ignore messages for unchanged lines in Travis unified-message-control \u2014 Enable, disable, and ignore messages See remark , rehype , and retext for their lists of plugins. File When processing a document, metadata is often gathered about that document. vfile is a virtual file format that stores data, metadata, and messages about files for unified and its plugins. There are several utilities for working with these files. Configuration Processors are configured with plugin s or with the data method. Integrations unified can integrate with the file system with unified-engine . CLI apps can be created with unified-args , Gulp plugins with unified-engine-gulp , and Atom Linters with unified-engine-atom . unified-stream provides a streaming interface. Programming interface The API provided by unified allows multiple files to be processed and gives access to metadata (such as lint messages): var unified = require ( 'unified' ) var markdown = require ( 'remark-parse' ) var styleGuide = require ( 'remark-preset-lint-markdown-style-guide' ) var remark2retext = require ( 'remark-retext' ) var english = require ( 'retext-english' ) var equality = require ( 'retext-equality' ) var remark2rehype = require ( 'remark-rehype' ) var html = require ( 'rehype-stringify' ) var report = require ( 'vfile-reporter' ) unified () . use ( markdown ) . use ( styleGuide ) . use ( remark2retext , unified (). use ( english ). use ( equality )) . use ( remark2rehype ) . use ( html ) . process ( '*Emphasis* and _stress_, you guys!' , function ( err , file ) { console . error ( report ( err || file )) console . log ( String ( file )) }) Yields: 1:16-1:24 warning Emphasis should use `*` as a marker emphasis-marker remark-lint 1:30-1:34 warning `guys` may be insensitive, use `people`, `persons`, `folks` instead gals-men retext-equality \u26a0 2 warnings < p >< em > Emphasis </ em > and < em > stress </ em > , you guys! </ p > Processing between syntaxes Processors can be combined in two modes. Bridge mode transforms the syntax tree from one format ( origin ) to another ( destination ). Another processor runs on the destination tree. Finally, the original processor continues transforming the origin tree. Mutate mode also transforms the syntax tree from one format to another. But the original processor continues transforming the destination tree. In the previous example (\u201cProgramming interface\u201d), remark-retext is used in bridge mode: the origin syntax tree is kept after retext is done; whereas remark-rehype is used in mutate mode: it sets a new syntax tree and discards the origin tree. remark-retext remark-rehype rehype-retext rehype-remark API processor() Processor describing how to process text. Returns Function \u2014 New unfrozen processor that is configured to work the same as its ancestor. When the descendant processor is configured in the future it does not affect the ancestral processor. Example The following example shows how a new processor can be created (from the remark processor) and linked to stdin (4) and stdout (4). var remark = require ( 'remark' ) var concat = require ( 'concat-stream' ) process . stdin . pipe ( concat ( onconcat )) function onconcat ( buf ) { var doc = remark (). processSync ( buf ). toString () process . stdout . write ( doc ) } processor.use(plugin[, options]) Configure the processor to use a plugin and optionally configure that plugin with options. If the processor is already using this plugin, the previous plugin configuration is changed based on the options that are passed in. The plugin is not added a second time. Signatures processor.use(plugin[, options]) processor.use(preset) processor.use(list) Parameters plugin ( Attacher ) options ( * , optional) \u2014 Configuration for plugin preset ( Object ) \u2014 Object with an optional plugins (set to list ), and/or an optional settings object list ( Array ) \u2014 List of plugins, presets, and pairs ( plugin and options in an array) Returns processor \u2014 The processor that use was called on. Note use cannot be called on frozen processors. Call the processor first to create a new unfrozen processor. Example There are many ways to pass plugins to .use() . The below example gives an overview. var unified = require ( 'unified' ) unified () // Plugin with options: . use ( pluginA , { x : true , y : true }) // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`): . use ( pluginA , { y : false , z : true }) // Plugins: . use ([ pluginB , pluginC ]) // Two plugins, the second with options: . use ([ pluginD , [ pluginE , {}]]) // Preset with plugins and settings: . use ({ plugins : [ pluginF , [ pluginG , {}]], settings : { position : false }}) // Settings only: . use ({ settings : { position : false }}) processor.parse(file) Parse text to a syntax tree . Parameters file ( VFile ) \u2014 File , any value accepted by vfile() Returns Node \u2014 Parsed syntax tree representing file . Note parse freezes the processor if not already frozen . parse performs the parse phase , not the run phase or other phases. Example The below example shows how parse can be used to create a syntax tree from a file. var unified = require ( 'unified' ) var markdown = require ( 'remark-parse' ) var tree = unified (). use ( markdown ). parse ( '# Hello world!' ) console . log ( tree ) Yields: { type : 'root' , children : [ { type : 'heading' , depth : 1 , children : [ Array ], position : [ Position ]} ], position : { start : { line : 1 , column : 1 , offset : 0 }, end : { line : 1 , column : 15 , offset : 14 } } } processor.Parser A parser handles the parsing of text to a syntax tree . Used in the parse phase and called with a string and VFile representation of the text to parse. Parser can be a function, in which case it must return a Node : the syntax tree representation of the given file. Parser can also be a constructor function (a function with a parse field, or other fields, in its prototype ), in which case it\u2019s constructed with new . Instances must have a parse method that is called without arguments and must return a Node . processor.stringify(node[, file]) Compile a syntax tree . Parameters node ( Node ) \u2014 Syntax tree to compile file ( VFile , optional) \u2014 File , any value accepted by vfile() Returns string or Buffer (see notes) \u2014 Textual representation of the syntax tree Note stringify freezes the processor if not already frozen . stringify performs the stringify phase , not the run phase or other phases. unified typically compiles by serializing: most compiler s return string (or Buffer ). Some compilers, such as the one configured with rehype-react , return other values (in this case, a React tree). If you\u2019re using a compiler doesn\u2019t serialize, expect different result values. When using TypeScript, cast the type on your side. Example The below example shows how stringify can be used to serialize a syntax tree. var unified = require ( 'unified' ) var html = require ( 'rehype-stringify' ) var h = require ( 'hastscript' ) var tree = h ( 'h1' , 'Hello world!' ) var doc = unified (). use ( html ). stringify ( tree ) console . log ( doc ) Yields: < h1 > Hello world! </ h1 > processor.Compiler A compiler handles the compiling of a syntax tree to text. Used in the stringify phase and called with a Node and VFile representation of syntax tree to compile. Compiler can be a function, in which case it should return a string : the textual representation of the syntax tree. Compiler can also be a constructor function (a function with a compile field, or other fields, in its prototype ), in which case it\u2019s constructed with new . Instances must have a compile method that is called without arguments and should return a string . processor.run(node[, file][, done]) Run transformers on a syntax tree . Parameters node ( Node ) \u2014 Syntax tree to run on file ( VFile , optional) \u2014 File , any value accepted by vfile() done ( Function , optional) \u2014 Callback Returns Promise if done is not given. The returned promise is rejected with a fatal error, or resolved with the transformed syntax tree . Note run freezes the processor if not already frozen . run performs the run phase , not other phases. function done(err[, node, file]) Callback called when transformers are done. Called with either an error or results. Parameters err ( Error , optional) \u2014 Fatal error node ( Node , optional) \u2014 Transformed syntax tree file ( VFile , optional) \u2014 File Example The below example shows how run can be used to transform a syntax tree. var unified = require ( 'unified' ) var references = require ( 'remark-reference-links' ) var u = require ( 'unist-builder' ) var tree = u ( 'root' , [ u ( 'paragraph' , [ u ( 'link' , { href : 'https://example.com' }, [ u ( 'text' , 'Example Domain' )]) ]) ]) unified () . use ( references ) . run ( tree , function ( err , tree ) { if ( err ) throw err console . log ( tree ) }) Yields: { type : 'root' , children : [ { type : 'paragraph' , children : [ Array ]}, { type : 'definition' , identifier : '1' , title : undefined , url : undefined } ] } processor.runSync(node[, file]) Run transformers on a syntax tree . An error is thrown if asynchronous plugin s are configured. Parameters node ( Node ) \u2014 Syntax tree to run on file ( VFile , optional) \u2014 File , any value accepted by vfile() Returns Node \u2014 Transformed syntax tree . Note runSync freezes the processor if not already frozen . runSync performs the run phase , not other phases. processor.process(file[, done]) Process the given file as configured on the processor. Parameters file ( VFile ) \u2014 File , any value accepted by vfile() done ( Function , optional) \u2014 Callback Returns Promise if done is not given. The returned promise is rejected with a fatal error, or resolved with the processed file . The parsed, transformed, and compiled value is exposed on file.contents or file.result (see notes). Note process freezes the processor if not already frozen . process performs the parse , run , and stringify phases . unified typically compiles by serializing: most compiler s return string (or Buffer ). Some compilers, such as the one configured with rehype-react , return other values (in this case, a React tree). If you\u2019re using a compiler that serializes, the result is available at file.contents . Otherwise, the result is available at file.result . Example The below example shows how process can be used to process a file, whether transformers are asynchronous or not, with promises. var unified = require ( 'unified' ) var markdown = require ( 'remark-parse' ) var remark2rehype = require ( 'remark-rehype' ) var doc = require ( 'rehype-document' ) var format = require ( 'rehype-format' ) var html = require ( 'rehype-stringify' ) unified () . use ( markdown ) . use ( remark2rehype ) . use ( doc , { title : '\ud83d\udc4b\ud83c\udf0d' }) . use ( format ) . use ( html ) . process ( '# Hello world!' ) . then ( function ( file ) { console . log ( String ( file )) }, function ( err ) { console . error ( String ( err )) } ) Yields: <!doctype html> < html lang = \"en\" > < head > < meta charset = \"utf-8\" > < title > \ud83d\udc4b\ud83c\udf0d </ title > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > </ head > < body > < h1 > Hello world! </ h1 > </ body > </ html > function done(err, file) Callback called when the process is done. Called with a fatal error, if any, and a file . Parameters err ( Error , optional) \u2014 Fatal error file ( VFile ) \u2014 Processed file Example The below example shows how process can be used to process a file, whether transformers are asynchronous or not, with a callback. var unified = require ( 'unified' ) var parse = require ( 'remark-parse' ) var stringify = require ( 'remark-stringify' ) var github = require ( 'remark-github' ) var report = require ( 'vfile-reporter' ) unified () . use ( parse ) . use ( github ) . use ( stringify ) . process ( '@wooorm' , function ( err , file ) { console . error ( report ( err || file )) console . log ( String ( file )) }) Yields: no issues found [ **@wooorm** ](https://github.com/wooorm) processor.processSync(file|value) Process the given file as configured on the processor. An error is thrown if asynchronous plugin s are configured. Parameters file ( VFile ) \u2014 File , any value accepted by vfile() Returns ( VFile ) \u2014 Processed file The parsed, transformed, and compiled value is exposed on file.contents or file.result (see notes). Note processSync freezes the processor if not already frozen . processSync performs the parse , run , and stringify phases . unified typically compiles by serializing: most compiler s return string (or Buffer ). Some compilers, such as the one configured with rehype-react , return other values (in this case, a React tree). If you\u2019re using a compiler that serializes, the result is available at file.contents . Otherwise, the result is available at file.result . Example The below example shows how processSync can be used to process a file, if all transformers are synchronous. var unified = require ( 'unified' ) var markdown = require ( 'remark-parse' ) var remark2rehype = require ( 'remark-rehype' ) var doc = require ( 'rehype-document' ) var format = require ( 'rehype-format' ) var html = require ( 'rehype-stringify' ) var processor = unified () . use ( markdown ) . use ( remark2rehype ) . use ( doc , { title : '\ud83d\udc4b\ud83c\udf0d' }) . use ( format ) . use ( html ) console . log ( processor . processSync ( '# Hello world!' ). toString ()) Yields: <!doctype html> < html lang = \"en\" > < head > < meta charset = \"utf-8\" > < title > \ud83d\udc4b\ud83c\udf0d </ title > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > </ head > < body > < h1 > Hello world! </ h1 > </ body > </ html > processor.data([key[, value]]) Configure the processor with information available to all plugin s. Information is stored in an in-memory key-value store. Typically, options can be given to a specific plugin, but sometimes it makes sense to have information shared with several plugins. For example, a list of HTML elements that are self-closing, which is needed during all phases of the process . Signatures processor = processor.data(key, value) processor = processor.data(values) value = processor.data(key) info = processor.data() Parameters key ( string , optional) \u2014 Identifier value ( * , optional) \u2014 Value to set values ( Object , optional) \u2014 Values to set Returns processor \u2014 If setting, the processor that data is called on value ( * ) \u2014 If getting, the value at key info ( Object ) \u2014 Without arguments, the key-value store Note Setting information cannot occur on frozen processors. Call the processor first to create a new unfrozen processor. Example The following example show how to get and set information: var unified = require ( 'unified' ) var processor = unified (). data ( 'alpha' , 'bravo' ) processor . data ( 'alpha' ) // => 'bravo' processor . data () // {alpha: 'bravo'} processor . data ({ charlie : 'delta' }) processor . data () // {charlie: 'delta'} processor.freeze() Freeze a processor. Frozen processors are meant to be extended and not to be configured directly. Once a processor is frozen it cannot be unfrozen . New processors working the same way can be created by calling the processor. It\u2019s possible to freeze processors explicitly by calling .freeze() . Processors freeze implicitly when .parse() , .run() , .runSync() , .stringify() , .process() , or .processSync() are called. Returns processor \u2014 The processor that freeze was called on. Example The following example, index.js , shows how rehype prevents extensions to itself: var unified = require ( 'unified' ) var parse = require ( 'rehype-parse' ) var stringify = require ( 'rehype-stringify' ) module . exports = unified (). use ( parse ). use ( stringify ). freeze () The below example, a.js , shows how that processor can be used and configured. var rehype = require ( 'rehype' ) var format = require ( 'rehype-format' ) // \u2026 rehype () . use ( format ) // \u2026 The below example, b.js , shows a similar looking example that operates on the frozen rehype interface because it does not call rehype . If this behavior was allowed it would result in unexpected behavior so an error is thrown. This is invalid : var rehype = require ( 'rehype' ) var format = require ( 'rehype-format' ) // \u2026 rehype . use ( format ) // \u2026 Yields: ~/node_modules/unified/index.js:440 throw new Error( ^ Error: Cannot invoke `use` on a frozen processor. Create a new processor first, by invoking it: use `processor()` instead of `processor`. at assertUnfrozen (~/node_modules/unified/index.js:440:11) at Function.use (~/node_modules/unified/index.js:172:5) at Object.<anonymous> (~/b.js:6:4) Plugin Plugins configure the processors they are applied on in the following ways: They change the processor: such as the parser , the compiler , or configuring data They specify how to handle syntax trees and files Plugins are a concept. They materialize as attacher s. Example move.js : module . exports = move function move ( options ) { var expected = ( options || {}). extname if ( ! expected ) { throw new Error ( 'Missing `extname` in options' ) } return transformer function transformer ( tree , file ) { if ( file . extname && file . extname !== expected ) { file . extname = expected } } } index.md : # Hello, world! index.js : var unified = require ( 'unified' ) var parse = require ( 'remark-parse' ) var remark2rehype = require ( 'remark-rehype' ) var stringify = require ( 'rehype-stringify' ) var vfile = require ( 'to-vfile' ) var report = require ( 'vfile-reporter' ) var move = require ( './move' ) unified () . use ( parse ) . use ( remark2rehype ) . use ( move , { extname : '.html' }) . use ( stringify ) . process ( vfile . readSync ( 'index.md' ), function ( err , file ) { console . error ( report ( err || file )) if ( file ) { vfile . writeSync ( file ) // Written to `index.html`. } }) Yields: index.md: no issues found index.html : < h1 > Hello, world! </ h1 > function attacher([options]) Attachers are materialized plugin s. An attacher is a function that can receive options and configures the processor. Attachers change the processor, such as the parser , the compiler , configuring data , or by specifying how the syntax tree or file are handled. Context The context object ( this ) is set to the processor the attacher is applied on. Parameters options ( * , optional) \u2014 Configuration Returns transformer \u2014 Optional. Note Attachers are called when the processor is frozen , not when they are applied. function transformer(node, file[, next]) Transformers handle syntax tree s and file s. A transformer is a function that is called each time a syntax tree and file are passed through the run phase . If an error occurs (either because it\u2019s thrown, returned, rejected, or passed to next ), the process stops. The run phase is handled by trough , see its documentation for the exact semantics of these functions. Parameters node ( Node ) \u2014 Syntax tree to handle file ( VFile ) \u2014 File to handle next ( Function , optional) Returns void \u2014 If nothing is returned, the next transformer keeps using same tree. Error \u2014 Fatal error to stop the process node ( Node ) \u2014 New syntax tree . If returned, the next transformer is given this new tree Promise \u2014 Returned to perform an asynchronous operation. The promise must be resolved (optionally with a Node ) or rejected (optionally with an Error ) function next(err[, tree[, file]]) If the signature of a transformer includes next (the third argument), the transformer may perform asynchronous operations, and must call next() . Parameters err ( Error , optional) \u2014 Fatal error to stop the process node ( Node , optional) \u2014 New syntax tree . If given, the next transformer is given this new tree file ( VFile , optional) \u2014 New file . If given, the next transformer is given this new file Preset Presets are sharable configuration . They can contain plugins and settings. Example preset.js : exports . settings = { bullet : '*' , emphasis : '*' , fences : true } exports . plugins = [ require ( 'remark-preset-lint-recommended' ), require ( 'remark-preset-lint-consistent' ), require ( 'remark-comment-config' ), [ require ( 'remark-toc' ), { maxDepth : 3 , tight : true }], require ( 'remark-license' ) ] readme.md : # Hello, world! _Emphasis_ and **importance** . ## Table of contents ## API ## License index.js : var remark = require ( 'remark' ) var vfile = require ( 'to-vfile' ) var report = require ( 'vfile-reporter' ) var preset = require ( './preset' ) remark () . use ( preset ) . process ( vfile . readSync ( 'readme.md' ), function ( err , file ) { console . error ( report ( err || file )) if ( file ) { vfile . writeSync ( file ) } }) Yields: readme.md: no issues found readme.md now contains: # Hello, world! *Emphasis* and **importance** . ## Table of contents * [ API ]( #api ) * [ License ]( #license ) ## API ## License [ MIT ]( license ) \u00a9 [ Titus Wormer ]( https://wooorm.com ) Contribute See contributing.md in unifiedjs/.github for ways to get started. See support.md for ways to get help. Ideas for new plugins and tools can be posted in unifiedjs/ideas . A curated list of awesome unified resources can be found in awesome unified . This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms. Acknowledgments Preliminary work for unified was done in 2014 for retext and inspired by ware . Further incubation happened in remark . The project was finally externalised in 2015 and published as unified . The project was authored by @wooorm . Although unified since moved its plugin architecture to trough , thanks to @calvinfo , @ianstormtaylor , and others for their work on ware , as it was a huge initial inspiration. License MIT \u00a9 Titus Wormer","title":"[![unified][logo]][site]"},{"location":"node_modules/unified/readme/#_1","text":"unified is an interface for processing text using syntax trees. It\u2019s what powers remark (Markdown), retext (natural language), and rehype (HTML), and allows for processing between formats.","title":""},{"location":"node_modules/unified/readme/#intro","text":"unified enables new exciting projects like Gatsby to pull in Markdown, MDX to embed JSX , and Prettier to format it. It\u2019s used in about 500k projects on GitHub and has about 25m downloads each month on npm: you\u2019re probably using it. Some notable users are Node.js , Vercel , Netlify , GitHub , Mozilla , WordPress , Adobe , Facebook , Google , and many more. To read about what we are up to, follow us Twitter For a less technical and more practical introduction to unified, visit unifiedjs.com and peruse its Learn section Browse awesome unified to find out more about the ecosystem Questions? Get help on Discussions ! Check out Contribute below to find out how to help out, or become a backer or sponsor on OpenCollective","title":"Intro"},{"location":"node_modules/unified/readme/#sponsors","text":"Support this effort and give back by sponsoring on OpenCollective ! Gatsby \ud83e\udd47 Vercel \ud83e\udd47 Netlify Holloway ThemeIsle Boost Hub Expo You?","title":"Sponsors"},{"location":"node_modules/unified/readme/#install","text":"npm : npm install unified This package comes with types. If you\u2019re using TypeScript, make sure to also install @types/unist .","title":"Install"},{"location":"node_modules/unified/readme/#use","text":"var unified = require ( 'unified' ) var markdown = require ( 'remark-parse' ) var remark2rehype = require ( 'remark-rehype' ) var doc = require ( 'rehype-document' ) var format = require ( 'rehype-format' ) var html = require ( 'rehype-stringify' ) var report = require ( 'vfile-reporter' ) unified () . use ( markdown ) . use ( remark2rehype ) . use ( doc , { title : '\ud83d\udc4b\ud83c\udf0d' }) . use ( format ) . use ( html ) . process ( '# Hello world!' , function ( err , file ) { console . error ( report ( err || file )) console . log ( String ( file )) }) Yields: no issues found <!doctype html> < html lang = \"en\" > < head > < meta charset = \"utf-8\" > < title > \ud83d\udc4b\ud83c\udf0d </ title > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > </ head > < body > < h1 > Hello world! </ h1 > </ body > </ html >","title":"Use"},{"location":"node_modules/unified/readme/#contents","text":"Description API processor() processor.use(plugin[, options]) processor.parse(file) processor.stringify(node[, file]) processor.run(node[, file][, done]) processor.runSync(node[, file]) processor.process(file[, done]) processor.processSync(file|value) processor.data([key[, value]]) processor.freeze() Plugin function attacher([options]) function transformer(node, file[, next]) Preset Contribute Acknowledgments License","title":"Contents"},{"location":"node_modules/unified/readme/#description","text":"unified is an interface for processing text using syntax trees. Syntax trees are a representation of text understandable to programs. Those programs, called plugin s, take these trees and inspect and modify them. To get to the syntax tree from text, there is a parser . To get from that back to text, there is a compiler . This is the process of a processor . | ........................ process ........................... | | .......... parse ... | ... run ... | ... stringify ..........| +--------+ +----------+ Input ->- | Parser | ->- Syntax Tree ->- | Compiler | ->- Output +--------+ | +----------+ X | +--------------+ | Transformers | +--------------+","title":"Description"},{"location":"node_modules/unified/readme/#processors","text":"Every processor implements another processor. To create a processor, call another processor. The new processor is configured to work the same as its ancestor. But when the descendant processor is configured in the future it does not affect the ancestral processor. When processors are exposed from a module (for example, unified itself) they should not be configured directly, as that would change their behavior for all module users. Those processors are frozen and they should be called to create a new processor before they are used.","title":"Processors"},{"location":"node_modules/unified/readme/#syntax-trees","text":"The syntax trees used in unified are unist nodes. A node is a plain JavaScript objects with a type field. The semantics of nodes and format of syntax trees is defined by other projects. There are several utilities for working with nodes. hast \u2014 HTML mdast \u2014 Markdown nlcst \u2014 Natural language xast \u2014 XML","title":"Syntax trees"},{"location":"node_modules/unified/readme/#list-of-processors","text":"The following projects process different syntax tree formats. They parse text to a syntax tree and compile that back to text. These processors can be used as is, or their parser and compiler can be mixed and matched with unified and plugins to process between different syntaxes. rehype ( hast ) \u2014 HTML remark ( mdast ) \u2014 Markdown retext ( nlcst ) \u2014 Natural language","title":"List of processors"},{"location":"node_modules/unified/readme/#list-of-plugins","text":"The below plugins work with unified , on all syntax tree formats: unified-diff \u2014 Ignore messages for unchanged lines in Travis unified-message-control \u2014 Enable, disable, and ignore messages See remark , rehype , and retext for their lists of plugins.","title":"List of plugins"},{"location":"node_modules/unified/readme/#file","text":"When processing a document, metadata is often gathered about that document. vfile is a virtual file format that stores data, metadata, and messages about files for unified and its plugins. There are several utilities for working with these files.","title":"File"},{"location":"node_modules/unified/readme/#configuration","text":"Processors are configured with plugin s or with the data method.","title":"Configuration"},{"location":"node_modules/unified/readme/#integrations","text":"unified can integrate with the file system with unified-engine . CLI apps can be created with unified-args , Gulp plugins with unified-engine-gulp , and Atom Linters with unified-engine-atom . unified-stream provides a streaming interface.","title":"Integrations"},{"location":"node_modules/unified/readme/#programming-interface","text":"The API provided by unified allows multiple files to be processed and gives access to metadata (such as lint messages): var unified = require ( 'unified' ) var markdown = require ( 'remark-parse' ) var styleGuide = require ( 'remark-preset-lint-markdown-style-guide' ) var remark2retext = require ( 'remark-retext' ) var english = require ( 'retext-english' ) var equality = require ( 'retext-equality' ) var remark2rehype = require ( 'remark-rehype' ) var html = require ( 'rehype-stringify' ) var report = require ( 'vfile-reporter' ) unified () . use ( markdown ) . use ( styleGuide ) . use ( remark2retext , unified (). use ( english ). use ( equality )) . use ( remark2rehype ) . use ( html ) . process ( '*Emphasis* and _stress_, you guys!' , function ( err , file ) { console . error ( report ( err || file )) console . log ( String ( file )) }) Yields: 1:16-1:24 warning Emphasis should use `*` as a marker emphasis-marker remark-lint 1:30-1:34 warning `guys` may be insensitive, use `people`, `persons`, `folks` instead gals-men retext-equality \u26a0 2 warnings < p >< em > Emphasis </ em > and < em > stress </ em > , you guys! </ p >","title":"Programming interface"},{"location":"node_modules/unified/readme/#processing-between-syntaxes","text":"Processors can be combined in two modes. Bridge mode transforms the syntax tree from one format ( origin ) to another ( destination ). Another processor runs on the destination tree. Finally, the original processor continues transforming the origin tree. Mutate mode also transforms the syntax tree from one format to another. But the original processor continues transforming the destination tree. In the previous example (\u201cProgramming interface\u201d), remark-retext is used in bridge mode: the origin syntax tree is kept after retext is done; whereas remark-rehype is used in mutate mode: it sets a new syntax tree and discards the origin tree. remark-retext remark-rehype rehype-retext rehype-remark","title":"Processing between syntaxes"},{"location":"node_modules/unified/readme/#api","text":"","title":"API"},{"location":"node_modules/unified/readme/#processor","text":"Processor describing how to process text.","title":"processor()"},{"location":"node_modules/unified/readme/#returns","text":"Function \u2014 New unfrozen processor that is configured to work the same as its ancestor. When the descendant processor is configured in the future it does not affect the ancestral processor.","title":"Returns"},{"location":"node_modules/unified/readme/#example","text":"The following example shows how a new processor can be created (from the remark processor) and linked to stdin (4) and stdout (4). var remark = require ( 'remark' ) var concat = require ( 'concat-stream' ) process . stdin . pipe ( concat ( onconcat )) function onconcat ( buf ) { var doc = remark (). processSync ( buf ). toString () process . stdout . write ( doc ) }","title":"Example"},{"location":"node_modules/unified/readme/#processoruseplugin-options","text":"Configure the processor to use a plugin and optionally configure that plugin with options. If the processor is already using this plugin, the previous plugin configuration is changed based on the options that are passed in. The plugin is not added a second time.","title":"processor.use(plugin[, options])"},{"location":"node_modules/unified/readme/#signatures","text":"processor.use(plugin[, options]) processor.use(preset) processor.use(list)","title":"Signatures"},{"location":"node_modules/unified/readme/#parameters","text":"plugin ( Attacher ) options ( * , optional) \u2014 Configuration for plugin preset ( Object ) \u2014 Object with an optional plugins (set to list ), and/or an optional settings object list ( Array ) \u2014 List of plugins, presets, and pairs ( plugin and options in an array)","title":"Parameters"},{"location":"node_modules/unified/readme/#returns_1","text":"processor \u2014 The processor that use was called on.","title":"Returns"},{"location":"node_modules/unified/readme/#note","text":"use cannot be called on frozen processors. Call the processor first to create a new unfrozen processor.","title":"Note"},{"location":"node_modules/unified/readme/#example_1","text":"There are many ways to pass plugins to .use() . The below example gives an overview. var unified = require ( 'unified' ) unified () // Plugin with options: . use ( pluginA , { x : true , y : true }) // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`): . use ( pluginA , { y : false , z : true }) // Plugins: . use ([ pluginB , pluginC ]) // Two plugins, the second with options: . use ([ pluginD , [ pluginE , {}]]) // Preset with plugins and settings: . use ({ plugins : [ pluginF , [ pluginG , {}]], settings : { position : false }}) // Settings only: . use ({ settings : { position : false }})","title":"Example"},{"location":"node_modules/unified/readme/#processorparsefile","text":"Parse text to a syntax tree .","title":"processor.parse(file)"},{"location":"node_modules/unified/readme/#parameters_1","text":"file ( VFile ) \u2014 File , any value accepted by vfile()","title":"Parameters"},{"location":"node_modules/unified/readme/#returns_2","text":"Node \u2014 Parsed syntax tree representing file .","title":"Returns"},{"location":"node_modules/unified/readme/#note_1","text":"parse freezes the processor if not already frozen . parse performs the parse phase , not the run phase or other phases.","title":"Note"},{"location":"node_modules/unified/readme/#example_2","text":"The below example shows how parse can be used to create a syntax tree from a file. var unified = require ( 'unified' ) var markdown = require ( 'remark-parse' ) var tree = unified (). use ( markdown ). parse ( '# Hello world!' ) console . log ( tree ) Yields: { type : 'root' , children : [ { type : 'heading' , depth : 1 , children : [ Array ], position : [ Position ]} ], position : { start : { line : 1 , column : 1 , offset : 0 }, end : { line : 1 , column : 15 , offset : 14 } } }","title":"Example"},{"location":"node_modules/unified/readme/#processorparser","text":"A parser handles the parsing of text to a syntax tree . Used in the parse phase and called with a string and VFile representation of the text to parse. Parser can be a function, in which case it must return a Node : the syntax tree representation of the given file. Parser can also be a constructor function (a function with a parse field, or other fields, in its prototype ), in which case it\u2019s constructed with new . Instances must have a parse method that is called without arguments and must return a Node .","title":"processor.Parser"},{"location":"node_modules/unified/readme/#processorstringifynode-file","text":"Compile a syntax tree .","title":"processor.stringify(node[, file])"},{"location":"node_modules/unified/readme/#parameters_2","text":"node ( Node ) \u2014 Syntax tree to compile file ( VFile , optional) \u2014 File , any value accepted by vfile()","title":"Parameters"},{"location":"node_modules/unified/readme/#returns_3","text":"string or Buffer (see notes) \u2014 Textual representation of the syntax tree","title":"Returns"},{"location":"node_modules/unified/readme/#note_2","text":"stringify freezes the processor if not already frozen . stringify performs the stringify phase , not the run phase or other phases. unified typically compiles by serializing: most compiler s return string (or Buffer ). Some compilers, such as the one configured with rehype-react , return other values (in this case, a React tree). If you\u2019re using a compiler doesn\u2019t serialize, expect different result values. When using TypeScript, cast the type on your side.","title":"Note"},{"location":"node_modules/unified/readme/#example_3","text":"The below example shows how stringify can be used to serialize a syntax tree. var unified = require ( 'unified' ) var html = require ( 'rehype-stringify' ) var h = require ( 'hastscript' ) var tree = h ( 'h1' , 'Hello world!' ) var doc = unified (). use ( html ). stringify ( tree ) console . log ( doc ) Yields: < h1 > Hello world! </ h1 >","title":"Example"},{"location":"node_modules/unified/readme/#processorcompiler","text":"A compiler handles the compiling of a syntax tree to text. Used in the stringify phase and called with a Node and VFile representation of syntax tree to compile. Compiler can be a function, in which case it should return a string : the textual representation of the syntax tree. Compiler can also be a constructor function (a function with a compile field, or other fields, in its prototype ), in which case it\u2019s constructed with new . Instances must have a compile method that is called without arguments and should return a string .","title":"processor.Compiler"},{"location":"node_modules/unified/readme/#processorrunnode-file-done","text":"Run transformers on a syntax tree .","title":"processor.run(node[, file][, done])"},{"location":"node_modules/unified/readme/#parameters_3","text":"node ( Node ) \u2014 Syntax tree to run on file ( VFile , optional) \u2014 File , any value accepted by vfile() done ( Function , optional) \u2014 Callback","title":"Parameters"},{"location":"node_modules/unified/readme/#returns_4","text":"Promise if done is not given. The returned promise is rejected with a fatal error, or resolved with the transformed syntax tree .","title":"Returns"},{"location":"node_modules/unified/readme/#note_3","text":"run freezes the processor if not already frozen . run performs the run phase , not other phases.","title":"Note"},{"location":"node_modules/unified/readme/#function-doneerr-node-file","text":"Callback called when transformers are done. Called with either an error or results.","title":"function done(err[, node, file])"},{"location":"node_modules/unified/readme/#parameters_4","text":"err ( Error , optional) \u2014 Fatal error node ( Node , optional) \u2014 Transformed syntax tree file ( VFile , optional) \u2014 File","title":"Parameters"},{"location":"node_modules/unified/readme/#example_4","text":"The below example shows how run can be used to transform a syntax tree. var unified = require ( 'unified' ) var references = require ( 'remark-reference-links' ) var u = require ( 'unist-builder' ) var tree = u ( 'root' , [ u ( 'paragraph' , [ u ( 'link' , { href : 'https://example.com' }, [ u ( 'text' , 'Example Domain' )]) ]) ]) unified () . use ( references ) . run ( tree , function ( err , tree ) { if ( err ) throw err console . log ( tree ) }) Yields: { type : 'root' , children : [ { type : 'paragraph' , children : [ Array ]}, { type : 'definition' , identifier : '1' , title : undefined , url : undefined } ] }","title":"Example"},{"location":"node_modules/unified/readme/#processorrunsyncnode-file","text":"Run transformers on a syntax tree . An error is thrown if asynchronous plugin s are configured.","title":"processor.runSync(node[, file])"},{"location":"node_modules/unified/readme/#parameters_5","text":"node ( Node ) \u2014 Syntax tree to run on file ( VFile , optional) \u2014 File , any value accepted by vfile()","title":"Parameters"},{"location":"node_modules/unified/readme/#returns_5","text":"Node \u2014 Transformed syntax tree .","title":"Returns"},{"location":"node_modules/unified/readme/#note_4","text":"runSync freezes the processor if not already frozen . runSync performs the run phase , not other phases.","title":"Note"},{"location":"node_modules/unified/readme/#processorprocessfile-done","text":"Process the given file as configured on the processor.","title":"processor.process(file[, done])"},{"location":"node_modules/unified/readme/#parameters_6","text":"file ( VFile ) \u2014 File , any value accepted by vfile() done ( Function , optional) \u2014 Callback","title":"Parameters"},{"location":"node_modules/unified/readme/#returns_6","text":"Promise if done is not given. The returned promise is rejected with a fatal error, or resolved with the processed file . The parsed, transformed, and compiled value is exposed on file.contents or file.result (see notes).","title":"Returns"},{"location":"node_modules/unified/readme/#note_5","text":"process freezes the processor if not already frozen . process performs the parse , run , and stringify phases . unified typically compiles by serializing: most compiler s return string (or Buffer ). Some compilers, such as the one configured with rehype-react , return other values (in this case, a React tree). If you\u2019re using a compiler that serializes, the result is available at file.contents . Otherwise, the result is available at file.result .","title":"Note"},{"location":"node_modules/unified/readme/#example_5","text":"The below example shows how process can be used to process a file, whether transformers are asynchronous or not, with promises. var unified = require ( 'unified' ) var markdown = require ( 'remark-parse' ) var remark2rehype = require ( 'remark-rehype' ) var doc = require ( 'rehype-document' ) var format = require ( 'rehype-format' ) var html = require ( 'rehype-stringify' ) unified () . use ( markdown ) . use ( remark2rehype ) . use ( doc , { title : '\ud83d\udc4b\ud83c\udf0d' }) . use ( format ) . use ( html ) . process ( '# Hello world!' ) . then ( function ( file ) { console . log ( String ( file )) }, function ( err ) { console . error ( String ( err )) } ) Yields: <!doctype html> < html lang = \"en\" > < head > < meta charset = \"utf-8\" > < title > \ud83d\udc4b\ud83c\udf0d </ title > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > </ head > < body > < h1 > Hello world! </ h1 > </ body > </ html >","title":"Example"},{"location":"node_modules/unified/readme/#function-doneerr-file","text":"Callback called when the process is done. Called with a fatal error, if any, and a file .","title":"function done(err, file)"},{"location":"node_modules/unified/readme/#parameters_7","text":"err ( Error , optional) \u2014 Fatal error file ( VFile ) \u2014 Processed file","title":"Parameters"},{"location":"node_modules/unified/readme/#example_6","text":"The below example shows how process can be used to process a file, whether transformers are asynchronous or not, with a callback. var unified = require ( 'unified' ) var parse = require ( 'remark-parse' ) var stringify = require ( 'remark-stringify' ) var github = require ( 'remark-github' ) var report = require ( 'vfile-reporter' ) unified () . use ( parse ) . use ( github ) . use ( stringify ) . process ( '@wooorm' , function ( err , file ) { console . error ( report ( err || file )) console . log ( String ( file )) }) Yields: no issues found [ **@wooorm** ](https://github.com/wooorm)","title":"Example"},{"location":"node_modules/unified/readme/#processorprocesssyncfilevalue","text":"Process the given file as configured on the processor. An error is thrown if asynchronous plugin s are configured.","title":"processor.processSync(file|value)"},{"location":"node_modules/unified/readme/#parameters_8","text":"file ( VFile ) \u2014 File , any value accepted by vfile()","title":"Parameters"},{"location":"node_modules/unified/readme/#returns_7","text":"( VFile ) \u2014 Processed file The parsed, transformed, and compiled value is exposed on file.contents or file.result (see notes).","title":"Returns"},{"location":"node_modules/unified/readme/#note_6","text":"processSync freezes the processor if not already frozen . processSync performs the parse , run , and stringify phases . unified typically compiles by serializing: most compiler s return string (or Buffer ). Some compilers, such as the one configured with rehype-react , return other values (in this case, a React tree). If you\u2019re using a compiler that serializes, the result is available at file.contents . Otherwise, the result is available at file.result .","title":"Note"},{"location":"node_modules/unified/readme/#example_7","text":"The below example shows how processSync can be used to process a file, if all transformers are synchronous. var unified = require ( 'unified' ) var markdown = require ( 'remark-parse' ) var remark2rehype = require ( 'remark-rehype' ) var doc = require ( 'rehype-document' ) var format = require ( 'rehype-format' ) var html = require ( 'rehype-stringify' ) var processor = unified () . use ( markdown ) . use ( remark2rehype ) . use ( doc , { title : '\ud83d\udc4b\ud83c\udf0d' }) . use ( format ) . use ( html ) console . log ( processor . processSync ( '# Hello world!' ). toString ()) Yields: <!doctype html> < html lang = \"en\" > < head > < meta charset = \"utf-8\" > < title > \ud83d\udc4b\ud83c\udf0d </ title > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > </ head > < body > < h1 > Hello world! </ h1 > </ body > </ html >","title":"Example"},{"location":"node_modules/unified/readme/#processordatakey-value","text":"Configure the processor with information available to all plugin s. Information is stored in an in-memory key-value store. Typically, options can be given to a specific plugin, but sometimes it makes sense to have information shared with several plugins. For example, a list of HTML elements that are self-closing, which is needed during all phases of the process .","title":"processor.data([key[, value]])"},{"location":"node_modules/unified/readme/#signatures_1","text":"processor = processor.data(key, value) processor = processor.data(values) value = processor.data(key) info = processor.data()","title":"Signatures"},{"location":"node_modules/unified/readme/#parameters_9","text":"key ( string , optional) \u2014 Identifier value ( * , optional) \u2014 Value to set values ( Object , optional) \u2014 Values to set","title":"Parameters"},{"location":"node_modules/unified/readme/#returns_8","text":"processor \u2014 If setting, the processor that data is called on value ( * ) \u2014 If getting, the value at key info ( Object ) \u2014 Without arguments, the key-value store","title":"Returns"},{"location":"node_modules/unified/readme/#note_7","text":"Setting information cannot occur on frozen processors. Call the processor first to create a new unfrozen processor.","title":"Note"},{"location":"node_modules/unified/readme/#example_8","text":"The following example show how to get and set information: var unified = require ( 'unified' ) var processor = unified (). data ( 'alpha' , 'bravo' ) processor . data ( 'alpha' ) // => 'bravo' processor . data () // {alpha: 'bravo'} processor . data ({ charlie : 'delta' }) processor . data () // {charlie: 'delta'}","title":"Example"},{"location":"node_modules/unified/readme/#processorfreeze","text":"Freeze a processor. Frozen processors are meant to be extended and not to be configured directly. Once a processor is frozen it cannot be unfrozen . New processors working the same way can be created by calling the processor. It\u2019s possible to freeze processors explicitly by calling .freeze() . Processors freeze implicitly when .parse() , .run() , .runSync() , .stringify() , .process() , or .processSync() are called.","title":"processor.freeze()"},{"location":"node_modules/unified/readme/#returns_9","text":"processor \u2014 The processor that freeze was called on.","title":"Returns"},{"location":"node_modules/unified/readme/#example_9","text":"The following example, index.js , shows how rehype prevents extensions to itself: var unified = require ( 'unified' ) var parse = require ( 'rehype-parse' ) var stringify = require ( 'rehype-stringify' ) module . exports = unified (). use ( parse ). use ( stringify ). freeze () The below example, a.js , shows how that processor can be used and configured. var rehype = require ( 'rehype' ) var format = require ( 'rehype-format' ) // \u2026 rehype () . use ( format ) // \u2026 The below example, b.js , shows a similar looking example that operates on the frozen rehype interface because it does not call rehype . If this behavior was allowed it would result in unexpected behavior so an error is thrown. This is invalid : var rehype = require ( 'rehype' ) var format = require ( 'rehype-format' ) // \u2026 rehype . use ( format ) // \u2026 Yields: ~/node_modules/unified/index.js:440 throw new Error( ^ Error: Cannot invoke `use` on a frozen processor. Create a new processor first, by invoking it: use `processor()` instead of `processor`. at assertUnfrozen (~/node_modules/unified/index.js:440:11) at Function.use (~/node_modules/unified/index.js:172:5) at Object.<anonymous> (~/b.js:6:4)","title":"Example"},{"location":"node_modules/unified/readme/#plugin","text":"Plugins configure the processors they are applied on in the following ways: They change the processor: such as the parser , the compiler , or configuring data They specify how to handle syntax trees and files Plugins are a concept. They materialize as attacher s.","title":"Plugin"},{"location":"node_modules/unified/readme/#example_10","text":"move.js : module . exports = move function move ( options ) { var expected = ( options || {}). extname if ( ! expected ) { throw new Error ( 'Missing `extname` in options' ) } return transformer function transformer ( tree , file ) { if ( file . extname && file . extname !== expected ) { file . extname = expected } } } index.md : # Hello, world! index.js : var unified = require ( 'unified' ) var parse = require ( 'remark-parse' ) var remark2rehype = require ( 'remark-rehype' ) var stringify = require ( 'rehype-stringify' ) var vfile = require ( 'to-vfile' ) var report = require ( 'vfile-reporter' ) var move = require ( './move' ) unified () . use ( parse ) . use ( remark2rehype ) . use ( move , { extname : '.html' }) . use ( stringify ) . process ( vfile . readSync ( 'index.md' ), function ( err , file ) { console . error ( report ( err || file )) if ( file ) { vfile . writeSync ( file ) // Written to `index.html`. } }) Yields: index.md: no issues found index.html : < h1 > Hello, world! </ h1 >","title":"Example"},{"location":"node_modules/unified/readme/#function-attacheroptions","text":"Attachers are materialized plugin s. An attacher is a function that can receive options and configures the processor. Attachers change the processor, such as the parser , the compiler , configuring data , or by specifying how the syntax tree or file are handled.","title":"function attacher([options])"},{"location":"node_modules/unified/readme/#context","text":"The context object ( this ) is set to the processor the attacher is applied on.","title":"Context"},{"location":"node_modules/unified/readme/#parameters_10","text":"options ( * , optional) \u2014 Configuration","title":"Parameters"},{"location":"node_modules/unified/readme/#returns_10","text":"transformer \u2014 Optional.","title":"Returns"},{"location":"node_modules/unified/readme/#note_8","text":"Attachers are called when the processor is frozen , not when they are applied.","title":"Note"},{"location":"node_modules/unified/readme/#function-transformernode-file-next","text":"Transformers handle syntax tree s and file s. A transformer is a function that is called each time a syntax tree and file are passed through the run phase . If an error occurs (either because it\u2019s thrown, returned, rejected, or passed to next ), the process stops. The run phase is handled by trough , see its documentation for the exact semantics of these functions.","title":"function transformer(node, file[, next])"},{"location":"node_modules/unified/readme/#parameters_11","text":"node ( Node ) \u2014 Syntax tree to handle file ( VFile ) \u2014 File to handle next ( Function , optional)","title":"Parameters"},{"location":"node_modules/unified/readme/#returns_11","text":"void \u2014 If nothing is returned, the next transformer keeps using same tree. Error \u2014 Fatal error to stop the process node ( Node ) \u2014 New syntax tree . If returned, the next transformer is given this new tree Promise \u2014 Returned to perform an asynchronous operation. The promise must be resolved (optionally with a Node ) or rejected (optionally with an Error )","title":"Returns"},{"location":"node_modules/unified/readme/#function-nexterr-tree-file","text":"If the signature of a transformer includes next (the third argument), the transformer may perform asynchronous operations, and must call next() .","title":"function next(err[, tree[, file]])"},{"location":"node_modules/unified/readme/#parameters_12","text":"err ( Error , optional) \u2014 Fatal error to stop the process node ( Node , optional) \u2014 New syntax tree . If given, the next transformer is given this new tree file ( VFile , optional) \u2014 New file . If given, the next transformer is given this new file","title":"Parameters"},{"location":"node_modules/unified/readme/#preset","text":"Presets are sharable configuration . They can contain plugins and settings.","title":"Preset"},{"location":"node_modules/unified/readme/#example_11","text":"preset.js : exports . settings = { bullet : '*' , emphasis : '*' , fences : true } exports . plugins = [ require ( 'remark-preset-lint-recommended' ), require ( 'remark-preset-lint-consistent' ), require ( 'remark-comment-config' ), [ require ( 'remark-toc' ), { maxDepth : 3 , tight : true }], require ( 'remark-license' ) ] readme.md : # Hello, world! _Emphasis_ and **importance** . ## Table of contents ## API ## License index.js : var remark = require ( 'remark' ) var vfile = require ( 'to-vfile' ) var report = require ( 'vfile-reporter' ) var preset = require ( './preset' ) remark () . use ( preset ) . process ( vfile . readSync ( 'readme.md' ), function ( err , file ) { console . error ( report ( err || file )) if ( file ) { vfile . writeSync ( file ) } }) Yields: readme.md: no issues found readme.md now contains: # Hello, world! *Emphasis* and **importance** . ## Table of contents * [ API ]( #api ) * [ License ]( #license ) ## API ## License [ MIT ]( license ) \u00a9 [ Titus Wormer ]( https://wooorm.com )","title":"Example"},{"location":"node_modules/unified/readme/#contribute","text":"See contributing.md in unifiedjs/.github for ways to get started. See support.md for ways to get help. Ideas for new plugins and tools can be posted in unifiedjs/ideas . A curated list of awesome unified resources can be found in awesome unified . This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms.","title":"Contribute"},{"location":"node_modules/unified/readme/#acknowledgments","text":"Preliminary work for unified was done in 2014 for retext and inspired by ware . Further incubation happened in remark . The project was finally externalised in 2015 and published as unified . The project was authored by @wooorm . Although unified since moved its plugin architecture to trough , thanks to @calvinfo , @ianstormtaylor , and others for their work on ware , as it was a huge initial inspiration.","title":"Acknowledgments"},{"location":"node_modules/unified/readme/#license","text":"MIT \u00a9 Titus Wormer","title":"License"},{"location":"node_modules/unified/node_modules/is-buffer/","text":"is-buffer Determine if an object is a Buffer (including the browserify Buffer ) Why not use Buffer.isBuffer ? This module lets you check if an object is a Buffer without using Buffer.isBuffer (which includes the whole buffer module in browserify ). It's future-proof and works in node too! install npm install is-buffer usage var isBuffer = require ( 'is-buffer' ) isBuffer ( new Buffer ( 4 )) // true isBuffer ( Buffer . alloc ( 4 )) //true isBuffer ( undefined ) // false isBuffer ( null ) // false isBuffer ( '' ) // false isBuffer ( true ) // false isBuffer ( false ) // false isBuffer ( 0 ) // false isBuffer ( 1 ) // false isBuffer ( 1.0 ) // false isBuffer ( 'string' ) // false isBuffer ({}) // false isBuffer ( function foo () {}) // false license MIT. Copyright (C) Feross Aboukhadijeh .","title":"is-buffer [![travis][travis-image]][travis-url] [![npm][npm-image]][npm-url] [![downloads][downloads-image]][downloads-url] [![javascript style guide][standard-image]][standard-url]"},{"location":"node_modules/unified/node_modules/is-buffer/#is-buffer","text":"","title":"is-buffer"},{"location":"node_modules/unified/node_modules/is-buffer/#determine-if-an-object-is-a-buffer-including-the-browserify-buffer","text":"","title":"Determine if an object is a Buffer (including the browserify Buffer)"},{"location":"node_modules/unified/node_modules/is-buffer/#why-not-use-bufferisbuffer","text":"This module lets you check if an object is a Buffer without using Buffer.isBuffer (which includes the whole buffer module in browserify ). It's future-proof and works in node too!","title":"Why not use Buffer.isBuffer?"},{"location":"node_modules/unified/node_modules/is-buffer/#install","text":"npm install is-buffer","title":"install"},{"location":"node_modules/unified/node_modules/is-buffer/#usage","text":"var isBuffer = require ( 'is-buffer' ) isBuffer ( new Buffer ( 4 )) // true isBuffer ( Buffer . alloc ( 4 )) //true isBuffer ( undefined ) // false isBuffer ( null ) // false isBuffer ( '' ) // false isBuffer ( true ) // false isBuffer ( false ) // false isBuffer ( 0 ) // false isBuffer ( 1 ) // false isBuffer ( 1.0 ) // false isBuffer ( 'string' ) // false isBuffer ({}) // false isBuffer ( function foo () {}) // false","title":"usage"},{"location":"node_modules/unified/node_modules/is-buffer/#license","text":"MIT. Copyright (C) Feross Aboukhadijeh .","title":"license"},{"location":"node_modules/unique-concat/","text":"unique-concat Concatenates two arrays, removing duplicates in the process and returns one array with unique values. var concat = require ( 'unique-concat' ); var res = concat ([ 1 , 2 , 3 ], [ 1 , 2 , 3 , 4 , 5 , 6 ]) console . log ( res ); // => [1, 2, 3, 4, 5, 6] Installation npm install unique-concat API function uniqueConcat(arr1, arr2[, identity]) /** * Concatenates two arrays, removing duplicates in the process and returns one array with unique values. * In case the elements in the array don't have a proper built in way to determine their identity, * a custom identity function must be provided. * * As an example, {Object}s all return '[ 'object' ]' when .toString()ed and therefore require a custom * identity function. * * @name exports * @function unique-concat * @param arr1 {Array} first batch of elements * @param arr2 {Array} second batch of elements * @param identity {Function} (optional) supply an alternative way to get an element's identity */ Identity function example var identity = function ( obj ) { return obj . a ; } var res = concat ([{ a : 1 }, { a : 2 , b : 1 }], [{ a : 2 , b : 2 }, { a : 3 }], identity ); console . log ( res ); // => [ { a: 1 }, { a: 2, b: 2 }, { a: 3 } ] For more examples see tests License MIT","title":"unique-concat [![build status](https://secure.travis-ci.org/thlorenz/unique-concat.png)](http://travis-ci.org/thlorenz/unique-concat)"},{"location":"node_modules/unique-concat/#unique-concat","text":"Concatenates two arrays, removing duplicates in the process and returns one array with unique values. var concat = require ( 'unique-concat' ); var res = concat ([ 1 , 2 , 3 ], [ 1 , 2 , 3 , 4 , 5 , 6 ]) console . log ( res ); // => [1, 2, 3, 4, 5, 6]","title":"unique-concat"},{"location":"node_modules/unique-concat/#installation","text":"npm install unique-concat","title":"Installation"},{"location":"node_modules/unique-concat/#api","text":"","title":"API"},{"location":"node_modules/unique-concat/#function-uniqueconcatarr1-arr2-identity","text":"/** * Concatenates two arrays, removing duplicates in the process and returns one array with unique values. * In case the elements in the array don't have a proper built in way to determine their identity, * a custom identity function must be provided. * * As an example, {Object}s all return '[ 'object' ]' when .toString()ed and therefore require a custom * identity function. * * @name exports * @function unique-concat * @param arr1 {Array} first batch of elements * @param arr2 {Array} second batch of elements * @param identity {Function} (optional) supply an alternative way to get an element's identity */","title":"function uniqueConcat(arr1, arr2[, identity])"},{"location":"node_modules/unique-concat/#identity-function-example","text":"var identity = function ( obj ) { return obj . a ; } var res = concat ([{ a : 1 }, { a : 2 , b : 1 }], [{ a : 2 , b : 2 }, { a : 3 }], identity ); console . log ( res ); // => [ { a: 1 }, { a: 2, b: 2 }, { a: 3 } ] For more examples see tests","title":"Identity function example"},{"location":"node_modules/unique-concat/#license","text":"MIT","title":"License"},{"location":"node_modules/unist-util-is/readme/","text":"unist-util-is unist utility to check if a node passes a test. Install npm : npm install unist-util-is Use var is = require ( 'unist-util-is' ) var node = { type : 'strong' } var parent = { type : 'paragraph' , children : [ node ]} function test ( node , n ) { return n === 5 } is () // => false is ({ children : []}) // => false is ( node ) // => true is ( node , 'strong' ) // => true is ( node , 'emphasis' ) // => false is ( node , node ) // => true is ( parent , { type : 'paragraph' }) // => true is ( parent , { type : 'strong' }) // => false is ( node , test ) // => false is ( node , test , 4 , parent ) // => false is ( node , test , 5 , parent ) // => true API is(node[, test[, index, parent[, context]]]) Parameters node ( Node ) \u2014 Node to check. test ( Function , string , Object , or Array.<Test> , optional) \u2014 When nullish, checks if node is a Node . When string , works like passing node => node.type === test . When array , checks if any one of the subtests pass. When object , checks that all keys in test are in node , and that they have strictly equal values index ( number , optional) \u2014 Index of node in parent parent ( Node , optional) \u2014 Parent of node context ( * , optional) \u2014 Context object to invoke test with Returns boolean \u2014 Whether test passed and node is a Node (object with type set to a non-empty string ). function test(node[, index, parent]) Parameters node ( Node ) \u2014 Node to check index ( number? ) \u2014 Index of node in parent parent ( Node? ) \u2014 Parent of node Context * \u2014 The to is given context . Returns boolean? \u2014 Whether node matches. is.convert(test) Create a test function from test , that can later be called with a node , index , and parent . Useful if you\u2019re going to test many nodes, for example when creating a utility where something else passes an is-compatible test. The created function is slightly faster because it expects valid input only. Therefore, passing invalid input, yields unexpected results. Can also be accessed with require('unist-util-is/convert') . For example: var u = require ( 'unist-builder' ) var convert = require ( 'unist-util-is/convert' ) var test = convert ( 'leaf' ) var tree = u ( 'tree' , [ u ( 'node' , [ u ( 'leaf' , '1' )]), u ( 'leaf' , '2' ), u ( 'node' , [ u ( 'leaf' , '3' ), u ( 'leaf' , '4' )]), u ( 'leaf' , '5' ) ]) var leafs = tree . children . filter (( child , index ) => test ( child , index , tree )) console . log ( leafs ) Yields: [{ type : 'leaf' , value : '2' }, { type : 'leaf' , value : '5' }] Related unist-util-find-after \u2014 Find a node after another node unist-util-find-before \u2014 Find a node before another node unist-util-find-all-after \u2014 Find all nodes after another node unist-util-find-all-before \u2014 Find all nodes before another node unist-util-find-all-between \u2014 Find all nodes between two nodes unist-util-filter \u2014 Create a new tree with nodes that pass a check unist-util-remove \u2014 Remove nodes from tree Contribute See contributing.md in syntax-tree/.github for ways to get started. See support.md for ways to get help. This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms. License MIT \u00a9 Titus Wormer","title":"unist-util-is"},{"location":"node_modules/unist-util-is/readme/#unist-util-is","text":"unist utility to check if a node passes a test.","title":"unist-util-is"},{"location":"node_modules/unist-util-is/readme/#install","text":"npm : npm install unist-util-is","title":"Install"},{"location":"node_modules/unist-util-is/readme/#use","text":"var is = require ( 'unist-util-is' ) var node = { type : 'strong' } var parent = { type : 'paragraph' , children : [ node ]} function test ( node , n ) { return n === 5 } is () // => false is ({ children : []}) // => false is ( node ) // => true is ( node , 'strong' ) // => true is ( node , 'emphasis' ) // => false is ( node , node ) // => true is ( parent , { type : 'paragraph' }) // => true is ( parent , { type : 'strong' }) // => false is ( node , test ) // => false is ( node , test , 4 , parent ) // => false is ( node , test , 5 , parent ) // => true","title":"Use"},{"location":"node_modules/unist-util-is/readme/#api","text":"","title":"API"},{"location":"node_modules/unist-util-is/readme/#isnode-test-index-parent-context","text":"","title":"is(node[, test[, index, parent[, context]]])"},{"location":"node_modules/unist-util-is/readme/#parameters","text":"node ( Node ) \u2014 Node to check. test ( Function , string , Object , or Array.<Test> , optional) \u2014 When nullish, checks if node is a Node . When string , works like passing node => node.type === test . When array , checks if any one of the subtests pass. When object , checks that all keys in test are in node , and that they have strictly equal values index ( number , optional) \u2014 Index of node in parent parent ( Node , optional) \u2014 Parent of node context ( * , optional) \u2014 Context object to invoke test with","title":"Parameters"},{"location":"node_modules/unist-util-is/readme/#returns","text":"boolean \u2014 Whether test passed and node is a Node (object with type set to a non-empty string ).","title":"Returns"},{"location":"node_modules/unist-util-is/readme/#function-testnode-index-parent","text":"","title":"function test(node[, index, parent])"},{"location":"node_modules/unist-util-is/readme/#parameters_1","text":"node ( Node ) \u2014 Node to check index ( number? ) \u2014 Index of node in parent parent ( Node? ) \u2014 Parent of node","title":"Parameters"},{"location":"node_modules/unist-util-is/readme/#context","text":"* \u2014 The to is given context .","title":"Context"},{"location":"node_modules/unist-util-is/readme/#returns_1","text":"boolean? \u2014 Whether node matches.","title":"Returns"},{"location":"node_modules/unist-util-is/readme/#isconverttest","text":"Create a test function from test , that can later be called with a node , index , and parent . Useful if you\u2019re going to test many nodes, for example when creating a utility where something else passes an is-compatible test. The created function is slightly faster because it expects valid input only. Therefore, passing invalid input, yields unexpected results. Can also be accessed with require('unist-util-is/convert') . For example: var u = require ( 'unist-builder' ) var convert = require ( 'unist-util-is/convert' ) var test = convert ( 'leaf' ) var tree = u ( 'tree' , [ u ( 'node' , [ u ( 'leaf' , '1' )]), u ( 'leaf' , '2' ), u ( 'node' , [ u ( 'leaf' , '3' ), u ( 'leaf' , '4' )]), u ( 'leaf' , '5' ) ]) var leafs = tree . children . filter (( child , index ) => test ( child , index , tree )) console . log ( leafs ) Yields: [{ type : 'leaf' , value : '2' }, { type : 'leaf' , value : '5' }]","title":"is.convert(test)"},{"location":"node_modules/unist-util-is/readme/#related","text":"unist-util-find-after \u2014 Find a node after another node unist-util-find-before \u2014 Find a node before another node unist-util-find-all-after \u2014 Find all nodes after another node unist-util-find-all-before \u2014 Find all nodes before another node unist-util-find-all-between \u2014 Find all nodes between two nodes unist-util-filter \u2014 Create a new tree with nodes that pass a check unist-util-remove \u2014 Remove nodes from tree","title":"Related"},{"location":"node_modules/unist-util-is/readme/#contribute","text":"See contributing.md in syntax-tree/.github for ways to get started. See support.md for ways to get help. This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms.","title":"Contribute"},{"location":"node_modules/unist-util-is/readme/#license","text":"MIT \u00a9 Titus Wormer","title":"License"},{"location":"node_modules/unist-util-stringify-position/readme/","text":"unist-util-stringify-position unist utility to pretty print the positional information of a node. Install npm : npm install unist-util-stringify-position Use var stringify = require ( 'unist-util-stringify-position' ) // Point stringify ({ line : 2 , column : 3 }) // => '2:3' // Position stringify ({ start : { line : 2 }, end : { line : 3 }}) // => '2:1-3:1' // Node stringify ({ type : 'text' , value : '!' , position : { start : { line : 5 , column : 11 }, end : { line : 5 , column : 12 } } }) // => '5:11-5:12' API stringifyPosition(node|position|point) Stringify one point , a position (start and end point s), or a node\u2019s positional information . Parameters node ( Node ) \u2014 Node whose 'position' property to stringify position ( Position ) \u2014 Position whose 'start' and 'end' points to stringify point ( Point ) \u2014 Point whose 'line' and 'column' to stringify Returns string? \u2014 A range ls:cs-le:ce (when given node or position ) or a point l:c (when given point ), where l stands for line, c for column, s for start , and e for end. An empty string ( '' ) is returned if the given value is neither node , position , nor point . Related unist-util-generated \u2014 Check if a node is generated unist-util-position \u2014 Get positional info of nodes unist-util-remove-position \u2014 Remove positional info from trees unist-util-source \u2014 Get the source of a value (node or position) in a file Contribute See contributing.md in syntax-tree/.github for ways to get started. See support.md for ways to get help. This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms. License MIT \u00a9 Titus Wormer","title":"unist-util-stringify-position"},{"location":"node_modules/unist-util-stringify-position/readme/#unist-util-stringify-position","text":"unist utility to pretty print the positional information of a node.","title":"unist-util-stringify-position"},{"location":"node_modules/unist-util-stringify-position/readme/#install","text":"npm : npm install unist-util-stringify-position","title":"Install"},{"location":"node_modules/unist-util-stringify-position/readme/#use","text":"var stringify = require ( 'unist-util-stringify-position' ) // Point stringify ({ line : 2 , column : 3 }) // => '2:3' // Position stringify ({ start : { line : 2 }, end : { line : 3 }}) // => '2:1-3:1' // Node stringify ({ type : 'text' , value : '!' , position : { start : { line : 5 , column : 11 }, end : { line : 5 , column : 12 } } }) // => '5:11-5:12'","title":"Use"},{"location":"node_modules/unist-util-stringify-position/readme/#api","text":"","title":"API"},{"location":"node_modules/unist-util-stringify-position/readme/#stringifypositionnodepositionpoint","text":"Stringify one point , a position (start and end point s), or a node\u2019s positional information .","title":"stringifyPosition(node|position|point)"},{"location":"node_modules/unist-util-stringify-position/readme/#parameters","text":"node ( Node ) \u2014 Node whose 'position' property to stringify position ( Position ) \u2014 Position whose 'start' and 'end' points to stringify point ( Point ) \u2014 Point whose 'line' and 'column' to stringify","title":"Parameters"},{"location":"node_modules/unist-util-stringify-position/readme/#returns","text":"string? \u2014 A range ls:cs-le:ce (when given node or position ) or a point l:c (when given point ), where l stands for line, c for column, s for start , and e for end. An empty string ( '' ) is returned if the given value is neither node , position , nor point .","title":"Returns"},{"location":"node_modules/unist-util-stringify-position/readme/#related","text":"unist-util-generated \u2014 Check if a node is generated unist-util-position \u2014 Get positional info of nodes unist-util-remove-position \u2014 Remove positional info from trees unist-util-source \u2014 Get the source of a value (node or position) in a file","title":"Related"},{"location":"node_modules/unist-util-stringify-position/readme/#contribute","text":"See contributing.md in syntax-tree/.github for ways to get started. See support.md for ways to get help. This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms.","title":"Contribute"},{"location":"node_modules/unist-util-stringify-position/readme/#license","text":"MIT \u00a9 Titus Wormer","title":"License"},{"location":"node_modules/unist-util-visit/readme/","text":"unist-util-visit unist utility to visit nodes. Install npm : npm install unist-util-visit Use var u = require ( 'unist-builder' ) var visit = require ( 'unist-util-visit' ) var tree = u ( 'tree' , [ u ( 'leaf' , '1' ), u ( 'node' , [ u ( 'leaf' , '2' )]), u ( 'void' ), u ( 'leaf' , '3' ) ]) visit ( tree , 'leaf' , function ( node ) { console . log ( node ) }) Yields: { type : 'leaf' , value : '1' } { type : 'leaf' , value : '2' } { type : 'leaf' , value : '3' } API visit(tree[, test], visitor[, reverse]) This function works exactly the same as unist-util-visit-parents , but visitor has a different signature. next? = visitor(node, index, parent) Instead of being passed an array of ancestors, visitor is invoked with the node\u2019s index and its parent . Otherwise the same as unist-util-visit-parents . Related unist-util-visit-parents \u2014 Like visit , but with a stack of parents unist-util-filter \u2014 Create a new tree with all nodes that pass a test unist-util-map \u2014 Create a new tree with all nodes mapped by a given function unist-util-flatmap \u2014 Create a new tree by mapping (to an array) with the given function unist-util-remove \u2014 Remove nodes from a tree that pass a test unist-util-select \u2014 Select nodes with CSS-like selectors Contribute See contributing.md in syntax-tree/.github for ways to get started. See support.md for ways to get help. This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms. License MIT \u00a9 Titus Wormer","title":"unist-util-visit"},{"location":"node_modules/unist-util-visit/readme/#unist-util-visit","text":"unist utility to visit nodes.","title":"unist-util-visit"},{"location":"node_modules/unist-util-visit/readme/#install","text":"npm : npm install unist-util-visit","title":"Install"},{"location":"node_modules/unist-util-visit/readme/#use","text":"var u = require ( 'unist-builder' ) var visit = require ( 'unist-util-visit' ) var tree = u ( 'tree' , [ u ( 'leaf' , '1' ), u ( 'node' , [ u ( 'leaf' , '2' )]), u ( 'void' ), u ( 'leaf' , '3' ) ]) visit ( tree , 'leaf' , function ( node ) { console . log ( node ) }) Yields: { type : 'leaf' , value : '1' } { type : 'leaf' , value : '2' } { type : 'leaf' , value : '3' }","title":"Use"},{"location":"node_modules/unist-util-visit/readme/#api","text":"","title":"API"},{"location":"node_modules/unist-util-visit/readme/#visittree-test-visitor-reverse","text":"This function works exactly the same as unist-util-visit-parents , but visitor has a different signature.","title":"visit(tree[, test], visitor[, reverse])"},{"location":"node_modules/unist-util-visit/readme/#next-visitornode-index-parent","text":"Instead of being passed an array of ancestors, visitor is invoked with the node\u2019s index and its parent . Otherwise the same as unist-util-visit-parents .","title":"next? = visitor(node, index, parent)"},{"location":"node_modules/unist-util-visit/readme/#related","text":"unist-util-visit-parents \u2014 Like visit , but with a stack of parents unist-util-filter \u2014 Create a new tree with all nodes that pass a test unist-util-map \u2014 Create a new tree with all nodes mapped by a given function unist-util-flatmap \u2014 Create a new tree by mapping (to an array) with the given function unist-util-remove \u2014 Remove nodes from a tree that pass a test unist-util-select \u2014 Select nodes with CSS-like selectors","title":"Related"},{"location":"node_modules/unist-util-visit/readme/#contribute","text":"See contributing.md in syntax-tree/.github for ways to get started. See support.md for ways to get help. This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms.","title":"Contribute"},{"location":"node_modules/unist-util-visit/readme/#license","text":"MIT \u00a9 Titus Wormer","title":"License"},{"location":"node_modules/unist-util-visit-parents/readme/","text":"unist-util-visit-parents unist utility to visit nodes, with ancestral information. Install npm : npm install unist-util-visit-parents Use var remark = require ( 'remark' ) var visit = require ( 'unist-util-visit-parents' ) var tree = remark . parse ( 'Some _emphasis_, **importance**, and `code`.' ) visit ( tree , 'strong' , visitor ) function visitor ( node , ancestors ) { console . log ( ancestors ) } Yields: [ { type : 'root' , children : [ [ Object ] ] }, { type : 'paragraph' , children : [ [ Object ], [ Object ], [ Object ], [ Object ], [ Object ], [ Object ], [ Object ] ] } ] API visit(tree[, test], visitor[, reverse]) Visit nodes ( inclusive descendants of tree ), with ancestral information. Optionally filtering nodes. Optionally in reverse. This algorithm performs depth-first tree traversal in preorder ( NLR ), or if reverse is given, in reverse preorder ( NRL ). Walking the tree is an intensive task. Make use of the return values of the visitor when possible. Instead of walking a tree multiple times with different test s, walk it once without a test, and use unist-util-is to check if a node matches a test, and then perform different operations. Parameters tree ( Node ) \u2014 Tree to traverse test ( Test , optional) \u2014 is -compatible test (such as a type ) visitor ( Function ) \u2014 Function invoked when a node is found that passes test reverse ( boolean , default: false ) \u2014 The tree is traversed in preorder (NLR), visiting the node itself, then its head , etc. When reverse is passed, the tree is traversed in reverse preorder (NRL): the node itself is visited, then its tail , etc. next? = visitor(node, ancestors) Invoked when a node (matching test , if given) is found. Visitors are free to transform node . They can also transform the parent of node (the last of ancestors ). Replacing node itself, if visit.SKIP is not returned, still causes its descendant s to be visited. If adding or removing previous sibling s (or next siblings, in case of reverse ) of node , visitor should return a new index ( number ) to specify the sibling to traverse after node is traversed. Adding or removing next siblings of node (or previous siblings, in case of reverse) is handled as expected without needing to return a new index . Removing the children property of an ancestor still results in them being traversed. Parameters node ( Node ) \u2014 Found node ancestors ( Array.<Node> ) \u2014 Ancestor s of node Returns The return value can have the following forms: index ( number ) \u2014 Treated as a tuple of [CONTINUE, index] action ( * ) \u2014 Treated as a tuple of [action] tuple ( Array.<*> ) \u2014 List with one or two values, the first an action , the second and index . Note that passing a tuple only makes sense if the action is SKIP . If the action is EXIT , that action can be returned. If the action is CONTINUE , index can be returned. action An action can have the following values: visit.EXIT ( false ) \u2014 Stop traversing immediately visit.CONTINUE ( true ) \u2014 Continue traversing as normal (same behaviour as not returning anything) visit.SKIP ( 'skip' ) \u2014 Do not traverse this node\u2019s children; continue with the specified index index index ( number ) \u2014 Move to the sibling at index next (after node itself is completely traversed). Useful if mutating the tree, such as removing the node the visitor is currently on, or any of its previous siblings (or next siblings, in case of reverse ) Results less than 0 or greater than or equal to children.length stop traversing the parent Related unist-util-visit \u2014 Like visit-parents , but with one parent unist-util-filter \u2014 Create a new tree with all nodes that pass a test unist-util-map \u2014 Create a new tree with all nodes mapped by a given function unist-util-flatmap \u2014 Create a new tree by mapping (to an array) with the given function unist-util-remove \u2014 Remove nodes from a tree that pass a test unist-util-select \u2014 Select nodes with CSS-like selectors Contribute See contributing.md in syntax-tree/.github for ways to get started. See support.md for ways to get help. This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms. License MIT \u00a9 Titus Wormer","title":"unist-util-visit-parents"},{"location":"node_modules/unist-util-visit-parents/readme/#unist-util-visit-parents","text":"unist utility to visit nodes, with ancestral information.","title":"unist-util-visit-parents"},{"location":"node_modules/unist-util-visit-parents/readme/#install","text":"npm : npm install unist-util-visit-parents","title":"Install"},{"location":"node_modules/unist-util-visit-parents/readme/#use","text":"var remark = require ( 'remark' ) var visit = require ( 'unist-util-visit-parents' ) var tree = remark . parse ( 'Some _emphasis_, **importance**, and `code`.' ) visit ( tree , 'strong' , visitor ) function visitor ( node , ancestors ) { console . log ( ancestors ) } Yields: [ { type : 'root' , children : [ [ Object ] ] }, { type : 'paragraph' , children : [ [ Object ], [ Object ], [ Object ], [ Object ], [ Object ], [ Object ], [ Object ] ] } ]","title":"Use"},{"location":"node_modules/unist-util-visit-parents/readme/#api","text":"","title":"API"},{"location":"node_modules/unist-util-visit-parents/readme/#visittree-test-visitor-reverse","text":"Visit nodes ( inclusive descendants of tree ), with ancestral information. Optionally filtering nodes. Optionally in reverse. This algorithm performs depth-first tree traversal in preorder ( NLR ), or if reverse is given, in reverse preorder ( NRL ). Walking the tree is an intensive task. Make use of the return values of the visitor when possible. Instead of walking a tree multiple times with different test s, walk it once without a test, and use unist-util-is to check if a node matches a test, and then perform different operations.","title":"visit(tree[, test], visitor[, reverse])"},{"location":"node_modules/unist-util-visit-parents/readme/#parameters","text":"tree ( Node ) \u2014 Tree to traverse test ( Test , optional) \u2014 is -compatible test (such as a type ) visitor ( Function ) \u2014 Function invoked when a node is found that passes test reverse ( boolean , default: false ) \u2014 The tree is traversed in preorder (NLR), visiting the node itself, then its head , etc. When reverse is passed, the tree is traversed in reverse preorder (NRL): the node itself is visited, then its tail , etc.","title":"Parameters"},{"location":"node_modules/unist-util-visit-parents/readme/#next-visitornode-ancestors","text":"Invoked when a node (matching test , if given) is found. Visitors are free to transform node . They can also transform the parent of node (the last of ancestors ). Replacing node itself, if visit.SKIP is not returned, still causes its descendant s to be visited. If adding or removing previous sibling s (or next siblings, in case of reverse ) of node , visitor should return a new index ( number ) to specify the sibling to traverse after node is traversed. Adding or removing next siblings of node (or previous siblings, in case of reverse) is handled as expected without needing to return a new index . Removing the children property of an ancestor still results in them being traversed.","title":"next? = visitor(node, ancestors)"},{"location":"node_modules/unist-util-visit-parents/readme/#parameters_1","text":"node ( Node ) \u2014 Found node ancestors ( Array.<Node> ) \u2014 Ancestor s of node","title":"Parameters"},{"location":"node_modules/unist-util-visit-parents/readme/#returns","text":"The return value can have the following forms: index ( number ) \u2014 Treated as a tuple of [CONTINUE, index] action ( * ) \u2014 Treated as a tuple of [action] tuple ( Array.<*> ) \u2014 List with one or two values, the first an action , the second and index . Note that passing a tuple only makes sense if the action is SKIP . If the action is EXIT , that action can be returned. If the action is CONTINUE , index can be returned.","title":"Returns"},{"location":"node_modules/unist-util-visit-parents/readme/#action","text":"An action can have the following values: visit.EXIT ( false ) \u2014 Stop traversing immediately visit.CONTINUE ( true ) \u2014 Continue traversing as normal (same behaviour as not returning anything) visit.SKIP ( 'skip' ) \u2014 Do not traverse this node\u2019s children; continue with the specified index","title":"action"},{"location":"node_modules/unist-util-visit-parents/readme/#index","text":"index ( number ) \u2014 Move to the sibling at index next (after node itself is completely traversed). Useful if mutating the tree, such as removing the node the visitor is currently on, or any of its previous siblings (or next siblings, in case of reverse ) Results less than 0 or greater than or equal to children.length stop traversing the parent","title":"index"},{"location":"node_modules/unist-util-visit-parents/readme/#related","text":"unist-util-visit \u2014 Like visit-parents , but with one parent unist-util-filter \u2014 Create a new tree with all nodes that pass a test unist-util-map \u2014 Create a new tree with all nodes mapped by a given function unist-util-flatmap \u2014 Create a new tree by mapping (to an array) with the given function unist-util-remove \u2014 Remove nodes from a tree that pass a test unist-util-select \u2014 Select nodes with CSS-like selectors","title":"Related"},{"location":"node_modules/unist-util-visit-parents/readme/#contribute","text":"See contributing.md in syntax-tree/.github for ways to get started. See support.md for ways to get help. This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms.","title":"Contribute"},{"location":"node_modules/unist-util-visit-parents/readme/#license","text":"MIT \u00a9 Titus Wormer","title":"License"},{"location":"node_modules/uri-js/","text":"URI.js URI.js is an RFC 3986 compliant, scheme extendable URI parsing/validating/resolving library for all JavaScript environments (browsers, Node.js, etc). It is also compliant with the IRI ( RFC 3987 ), IDNA ( RFC 5890 ), IPv6 Address ( RFC 5952 ), IPv6 Zone Identifier ( RFC 6874 ) specifications. URI.js has an extensive test suite, and works in all (Node.js, web) environments. It weighs in at 6.4kb (gzipped, 17kb deflated). API Parsing URI.parse(\"uri://user:pass@example.com:123/one/two.three?q1=a1&q2=a2#body\"); //returns: //{ // scheme : \"uri\", // userinfo : \"user:pass\", // host : \"example.com\", // port : 123, // path : \"/one/two.three\", // query : \"q1=a1&q2=a2\", // fragment : \"body\" //} Serializing URI.serialize({scheme : \"http\", host : \"example.com\", fragment : \"footer\"}) === \"http://example.com/#footer\" Resolving URI.resolve(\"uri://a/b/c/d?q\", \"../../g\") === \"uri://a/g\" Normalizing URI.normalize(\"HTTP://ABC.com:80/%7Esmith/home.html\") === \"http://abc.com/~smith/home.html\" Comparison URI.equal(\"example://a/b/c/%7Bfoo%7D\", \"eXAMPLE://a/./b/../b/%63/%7bfoo%7d\") === true IP Support //IPv4 normalization URI.normalize(\"//192.068.001.000\") === \"//192.68.1.0\" //IPv6 normalization URI.normalize(\"//[2001:0:0DB8::0:0001]\") === \"//[2001:0:db8::1]\" //IPv6 zone identifier support URI.parse(\"//[2001:db8::7%25en1]\"); //returns: //{ // host : \"2001:db8::7%en1\" //} IRI Support //convert IRI to URI URI.serialize(URI.parse(\"http://exampl\u00e9.org/ros\u00e9\")) === \"http://xn--exampl-gva.org/ros%C3%A9\" //convert URI to IRI URI.serialize(URI.parse(\"http://xn--exampl-gva.org/ros%C3%A9\"), {iri:true}) === \"http://exampl\u00e9.org/ros\u00e9\" Options All of the above functions can accept an additional options argument that is an object that can contain one or more of the following properties: scheme (string) Indicates the scheme that the URI should be treated as, overriding the URI's normal scheme parsing behavior. reference (string) If set to \"suffix\" , it indicates that the URI is in the suffix format, and the validator will use the option's scheme property to determine the URI's scheme. tolerant (boolean, false) If set to true , the parser will relax URI resolving rules. absolutePath (boolean, false) If set to true , the serializer will not resolve a relative path component. iri (boolean, false) If set to true , the serializer will unescape non-ASCII characters as per RFC 3987 . unicodeSupport (boolean, false) If set to true , the parser will unescape non-ASCII characters in the parsed output as per RFC 3987 . domainHost (boolean, false) If set to true , the library will treat the host component as a domain name, and convert IDNs (International Domain Names) as per RFC 5891 . Scheme Extendable URI.js supports inserting custom scheme dependent processing rules. Currently, URI.js has built in support for the following schemes: http [ RFC 2616 ] https [ RFC 2818 ] ws [ RFC 6455 ] wss [ RFC 6455 ] mailto [ RFC 6068 ] urn [ RFC 2141 ] urn:uuid [ RFC 4122 ] HTTP/HTTPS Support URI.equal(\"HTTP://ABC.COM:80\", \"http://abc.com/\") === true URI.equal(\"https://abc.com\", \"HTTPS://ABC.COM:443/\") === true WS/WSS Support URI.parse(\"wss://example.com/foo?bar=baz\"); //returns: //{ // scheme : \"wss\", // host: \"example.com\", // resourceName: \"/foo?bar=baz\", // secure: true, //} URI.equal(\"WS://ABC.COM:80/chat#one\", \"ws://abc.com/chat\") === true Mailto Support URI.parse(\"mailto:alpha@example.com,bravo@example.com?subject=SUBSCRIBE&body=Sign%20me%20up!\"); //returns: //{ // scheme : \"mailto\", // to : [\"alpha@example.com\", \"bravo@example.com\"], // subject : \"SUBSCRIBE\", // body : \"Sign me up!\" //} URI.serialize({ scheme : \"mailto\", to : [\"alpha@example.com\"], subject : \"REMOVE\", body : \"Please remove me\", headers : { cc : \"charlie@example.com\" } }) === \"mailto:alpha@example.com?cc=charlie@example.com&subject=REMOVE&body=Please%20remove%20me\" URN Support URI.parse(\"urn:example:foo\"); //returns: //{ // scheme : \"urn\", // nid : \"example\", // nss : \"foo\", //} URN UUID Support URI.parse(\"urn:uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf6\"); //returns: //{ // scheme : \"urn\", // nid : \"uuid\", // uuid : \"f81d4fae-7dec-11d0-a765-00a0c91e6bf6\", //} Usage To load in a browser, use the following tag: <script type=\"text/javascript\" src=\"uri-js/dist/es5/uri.all.min.js\"></script> To load in a CommonJS/Module environment, first install with npm/yarn by running on the command line: npm install uri-js # OR yarn add uri-js Then, in your code, load it using: const URI = require(\"uri-js\"); If you are writing your code in ES6+ (ESNEXT) or TypeScript, you would load it using: import * as URI from \"uri-js\"; Or you can load just what you need using named exports: import { parse, serialize, resolve, resolveComponents, normalize, equal, removeDotSegments, pctEncChar, pctDecChars, escapeComponent, unescapeComponent } from \"uri-js\"; Breaking changes Breaking changes from 3.x URN parsing has been completely changed to better align with the specification. Scheme is now always urn , but has two new properties: nid which contains the Namspace Identifier, and nss which contains the Namespace Specific String. The nss property will be removed by higher order scheme handlers, such as the UUID URN scheme handler. The UUID of a URN can now be found in the uuid property. Breaking changes from 2.x URI validation has been removed as it was slow, exposed a vulnerabilty, and was generally not useful. Breaking changes from 1.x The errors array on parsed components is now an error string.","title":"URI.js"},{"location":"node_modules/uri-js/#urijs","text":"URI.js is an RFC 3986 compliant, scheme extendable URI parsing/validating/resolving library for all JavaScript environments (browsers, Node.js, etc). It is also compliant with the IRI ( RFC 3987 ), IDNA ( RFC 5890 ), IPv6 Address ( RFC 5952 ), IPv6 Zone Identifier ( RFC 6874 ) specifications. URI.js has an extensive test suite, and works in all (Node.js, web) environments. It weighs in at 6.4kb (gzipped, 17kb deflated).","title":"URI.js"},{"location":"node_modules/uri-js/#api","text":"","title":"API"},{"location":"node_modules/uri-js/#parsing","text":"URI.parse(\"uri://user:pass@example.com:123/one/two.three?q1=a1&q2=a2#body\"); //returns: //{ // scheme : \"uri\", // userinfo : \"user:pass\", // host : \"example.com\", // port : 123, // path : \"/one/two.three\", // query : \"q1=a1&q2=a2\", // fragment : \"body\" //}","title":"Parsing"},{"location":"node_modules/uri-js/#serializing","text":"URI.serialize({scheme : \"http\", host : \"example.com\", fragment : \"footer\"}) === \"http://example.com/#footer\"","title":"Serializing"},{"location":"node_modules/uri-js/#resolving","text":"URI.resolve(\"uri://a/b/c/d?q\", \"../../g\") === \"uri://a/g\"","title":"Resolving"},{"location":"node_modules/uri-js/#normalizing","text":"URI.normalize(\"HTTP://ABC.com:80/%7Esmith/home.html\") === \"http://abc.com/~smith/home.html\"","title":"Normalizing"},{"location":"node_modules/uri-js/#comparison","text":"URI.equal(\"example://a/b/c/%7Bfoo%7D\", \"eXAMPLE://a/./b/../b/%63/%7bfoo%7d\") === true","title":"Comparison"},{"location":"node_modules/uri-js/#ip-support","text":"//IPv4 normalization URI.normalize(\"//192.068.001.000\") === \"//192.68.1.0\" //IPv6 normalization URI.normalize(\"//[2001:0:0DB8::0:0001]\") === \"//[2001:0:db8::1]\" //IPv6 zone identifier support URI.parse(\"//[2001:db8::7%25en1]\"); //returns: //{ // host : \"2001:db8::7%en1\" //}","title":"IP Support"},{"location":"node_modules/uri-js/#iri-support","text":"//convert IRI to URI URI.serialize(URI.parse(\"http://exampl\u00e9.org/ros\u00e9\")) === \"http://xn--exampl-gva.org/ros%C3%A9\" //convert URI to IRI URI.serialize(URI.parse(\"http://xn--exampl-gva.org/ros%C3%A9\"), {iri:true}) === \"http://exampl\u00e9.org/ros\u00e9\"","title":"IRI Support"},{"location":"node_modules/uri-js/#options","text":"All of the above functions can accept an additional options argument that is an object that can contain one or more of the following properties: scheme (string) Indicates the scheme that the URI should be treated as, overriding the URI's normal scheme parsing behavior. reference (string) If set to \"suffix\" , it indicates that the URI is in the suffix format, and the validator will use the option's scheme property to determine the URI's scheme. tolerant (boolean, false) If set to true , the parser will relax URI resolving rules. absolutePath (boolean, false) If set to true , the serializer will not resolve a relative path component. iri (boolean, false) If set to true , the serializer will unescape non-ASCII characters as per RFC 3987 . unicodeSupport (boolean, false) If set to true , the parser will unescape non-ASCII characters in the parsed output as per RFC 3987 . domainHost (boolean, false) If set to true , the library will treat the host component as a domain name, and convert IDNs (International Domain Names) as per RFC 5891 .","title":"Options"},{"location":"node_modules/uri-js/#scheme-extendable","text":"URI.js supports inserting custom scheme dependent processing rules. Currently, URI.js has built in support for the following schemes: http [ RFC 2616 ] https [ RFC 2818 ] ws [ RFC 6455 ] wss [ RFC 6455 ] mailto [ RFC 6068 ] urn [ RFC 2141 ] urn:uuid [ RFC 4122 ]","title":"Scheme Extendable"},{"location":"node_modules/uri-js/#httphttps-support","text":"URI.equal(\"HTTP://ABC.COM:80\", \"http://abc.com/\") === true URI.equal(\"https://abc.com\", \"HTTPS://ABC.COM:443/\") === true","title":"HTTP/HTTPS Support"},{"location":"node_modules/uri-js/#wswss-support","text":"URI.parse(\"wss://example.com/foo?bar=baz\"); //returns: //{ // scheme : \"wss\", // host: \"example.com\", // resourceName: \"/foo?bar=baz\", // secure: true, //} URI.equal(\"WS://ABC.COM:80/chat#one\", \"ws://abc.com/chat\") === true","title":"WS/WSS Support"},{"location":"node_modules/uri-js/#mailto-support","text":"URI.parse(\"mailto:alpha@example.com,bravo@example.com?subject=SUBSCRIBE&body=Sign%20me%20up!\"); //returns: //{ // scheme : \"mailto\", // to : [\"alpha@example.com\", \"bravo@example.com\"], // subject : \"SUBSCRIBE\", // body : \"Sign me up!\" //} URI.serialize({ scheme : \"mailto\", to : [\"alpha@example.com\"], subject : \"REMOVE\", body : \"Please remove me\", headers : { cc : \"charlie@example.com\" } }) === \"mailto:alpha@example.com?cc=charlie@example.com&subject=REMOVE&body=Please%20remove%20me\"","title":"Mailto Support"},{"location":"node_modules/uri-js/#urn-support","text":"URI.parse(\"urn:example:foo\"); //returns: //{ // scheme : \"urn\", // nid : \"example\", // nss : \"foo\", //}","title":"URN Support"},{"location":"node_modules/uri-js/#urn-uuid-support","text":"URI.parse(\"urn:uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf6\"); //returns: //{ // scheme : \"urn\", // nid : \"uuid\", // uuid : \"f81d4fae-7dec-11d0-a765-00a0c91e6bf6\", //}","title":"URN UUID Support"},{"location":"node_modules/uri-js/#usage","text":"To load in a browser, use the following tag: <script type=\"text/javascript\" src=\"uri-js/dist/es5/uri.all.min.js\"></script> To load in a CommonJS/Module environment, first install with npm/yarn by running on the command line: npm install uri-js # OR yarn add uri-js Then, in your code, load it using: const URI = require(\"uri-js\"); If you are writing your code in ES6+ (ESNEXT) or TypeScript, you would load it using: import * as URI from \"uri-js\"; Or you can load just what you need using named exports: import { parse, serialize, resolve, resolveComponents, normalize, equal, removeDotSegments, pctEncChar, pctDecChars, escapeComponent, unescapeComponent } from \"uri-js\";","title":"Usage"},{"location":"node_modules/uri-js/#breaking-changes","text":"","title":"Breaking changes"},{"location":"node_modules/uri-js/#breaking-changes-from-3x","text":"URN parsing has been completely changed to better align with the specification. Scheme is now always urn , but has two new properties: nid which contains the Namspace Identifier, and nss which contains the Namespace Specific String. The nss property will be removed by higher order scheme handlers, such as the UUID URN scheme handler. The UUID of a URN can now be found in the uuid property.","title":"Breaking changes from 3.x"},{"location":"node_modules/uri-js/#breaking-changes-from-2x","text":"URI validation has been removed as it was slow, exposed a vulnerabilty, and was generally not useful.","title":"Breaking changes from 2.x"},{"location":"node_modules/uri-js/#breaking-changes-from-1x","text":"The errors array on parsed components is now an error string.","title":"Breaking changes from 1.x"},{"location":"node_modules/validate-npm-package-license/","text":"validate-npm-package-license Give me a string and I'll tell you if it's a valid npm package license string. var valid = require ( 'validate-npm-package-license' ); SPDX license identifiers are valid license strings: var assert = require ( 'assert' ); var validSPDXExpression = { validForNewPackages : true , validForOldPackages : true , spdx : true }; assert . deepEqual ( valid ( 'MIT' ), validSPDXExpression ); assert . deepEqual ( valid ( 'BSD-2-Clause' ), validSPDXExpression ); assert . deepEqual ( valid ( 'Apache-2.0' ), validSPDXExpression ); assert . deepEqual ( valid ( 'ISC' ), validSPDXExpression ); The function will return a warning and suggestion for nearly-correct license identifiers: assert . deepEqual ( valid ( 'Apache 2.0' ), { validForOldPackages : false , validForNewPackages : false , warnings : [ 'license should be ' + 'a valid SPDX license expression (without \"LicenseRef\"), ' + '\"UNLICENSED\", or ' + '\"SEE LICENSE IN <filename>\"' , 'license is similar to the valid expression \"Apache-2.0\"' ] } ); SPDX expressions are valid, too ... // Simple SPDX license expression for dual licensing assert . deepEqual ( valid ( '(GPL-3.0-only OR BSD-2-Clause)' ), validSPDXExpression ); ... except if they contain LicenseRef : var warningAboutLicenseRef = { validForOldPackages : false , validForNewPackages : false , spdx : true , warnings : [ 'license should be ' + 'a valid SPDX license expression (without \"LicenseRef\"), ' + '\"UNLICENSED\", or ' + '\"SEE LICENSE IN <filename>\"' , ] }; assert . deepEqual ( valid ( 'LicenseRef-Made-Up' ), warningAboutLicenseRef ); assert . deepEqual ( valid ( '(MIT OR LicenseRef-Made-Up)' ), warningAboutLicenseRef ); If you can't describe your licensing terms with standardized SPDX identifiers, put the terms in a file in the package and point users there: assert . deepEqual ( valid ( 'SEE LICENSE IN LICENSE.txt' ), { validForNewPackages : true , validForOldPackages : true , inFile : 'LICENSE.txt' } ); assert . deepEqual ( valid ( 'SEE LICENSE IN license.md' ), { validForNewPackages : true , validForOldPackages : true , inFile : 'license.md' } ); If there aren't any licensing terms, use UNLICENSED : var unlicensed = { validForNewPackages : true , validForOldPackages : true , unlicensed : true }; assert . deepEqual ( valid ( 'UNLICENSED' ), unlicensed ); assert . deepEqual ( valid ( 'UNLICENCED' ), unlicensed );","title":"Index"},{"location":"node_modules/validate-npm-package-license/#validate-npm-package-license","text":"Give me a string and I'll tell you if it's a valid npm package license string. var valid = require ( 'validate-npm-package-license' ); SPDX license identifiers are valid license strings: var assert = require ( 'assert' ); var validSPDXExpression = { validForNewPackages : true , validForOldPackages : true , spdx : true }; assert . deepEqual ( valid ( 'MIT' ), validSPDXExpression ); assert . deepEqual ( valid ( 'BSD-2-Clause' ), validSPDXExpression ); assert . deepEqual ( valid ( 'Apache-2.0' ), validSPDXExpression ); assert . deepEqual ( valid ( 'ISC' ), validSPDXExpression ); The function will return a warning and suggestion for nearly-correct license identifiers: assert . deepEqual ( valid ( 'Apache 2.0' ), { validForOldPackages : false , validForNewPackages : false , warnings : [ 'license should be ' + 'a valid SPDX license expression (without \"LicenseRef\"), ' + '\"UNLICENSED\", or ' + '\"SEE LICENSE IN <filename>\"' , 'license is similar to the valid expression \"Apache-2.0\"' ] } ); SPDX expressions are valid, too ... // Simple SPDX license expression for dual licensing assert . deepEqual ( valid ( '(GPL-3.0-only OR BSD-2-Clause)' ), validSPDXExpression ); ... except if they contain LicenseRef : var warningAboutLicenseRef = { validForOldPackages : false , validForNewPackages : false , spdx : true , warnings : [ 'license should be ' + 'a valid SPDX license expression (without \"LicenseRef\"), ' + '\"UNLICENSED\", or ' + '\"SEE LICENSE IN <filename>\"' , ] }; assert . deepEqual ( valid ( 'LicenseRef-Made-Up' ), warningAboutLicenseRef ); assert . deepEqual ( valid ( '(MIT OR LicenseRef-Made-Up)' ), warningAboutLicenseRef ); If you can't describe your licensing terms with standardized SPDX identifiers, put the terms in a file in the package and point users there: assert . deepEqual ( valid ( 'SEE LICENSE IN LICENSE.txt' ), { validForNewPackages : true , validForOldPackages : true , inFile : 'LICENSE.txt' } ); assert . deepEqual ( valid ( 'SEE LICENSE IN license.md' ), { validForNewPackages : true , validForOldPackages : true , inFile : 'license.md' } ); If there aren't any licensing terms, use UNLICENSED : var unlicensed = { validForNewPackages : true , validForOldPackages : true , unlicensed : true }; assert . deepEqual ( valid ( 'UNLICENSED' ), unlicensed ); assert . deepEqual ( valid ( 'UNLICENCED' ), unlicensed );","title":"validate-npm-package-license"},{"location":"node_modules/vfile/changelog/","text":"Changelog See GitHub Releases for the changelog.","title":"Changelog"},{"location":"node_modules/vfile/changelog/#changelog","text":"See GitHub Releases for the changelog.","title":"Changelog"},{"location":"node_modules/vfile/readme/","text":"vfile is a small and browser friendly virtual file format that tracks metadata (such as a file\u2019s path and contents ) and messages . It was made specifically for unified and generally for the common task of parsing, transforming, and serializing data, where vfile handles everything about the document being compiled. This is useful for example when building linters, compilers, static site generators, or other build tools. vfile is part of the unified collective . for updates, see Twitter for more about us, see unifiedjs.com for questions, see Discussions to help, see contribute or sponsor below vfile is different from the excellent vinyl in that it has a smaller API, a smaller size, and focuses on messages . Contents Install Use API VFile(options?) vfile.contents vfile.cwd vfile.path vfile.basename vfile.stem vfile.extname vfile.dirname vfile.history vfile.messages vfile.data VFile#toString(encoding?) VFile#message(reason[, position][, origin]) VFile#info(reason[, position][, origin]) VFile#fail(reason[, position][, origin]) List of utilities Reporters Contribute Sponsor Acknowledgments License Install npm : npm install vfile Use var vfile = require ( 'vfile' ) var file = vfile ({ path : '~/example.txt' , contents : 'Alpha *braavo* charlie.' }) file . path // => '~/example.txt' file . dirname // => '~' file . extname = '.md' file . basename // => 'example.md' file . basename = 'index.text' file . history // => ['~/example.txt', '~/example.md', '~/index.text'] file . message ( '`braavo` is misspelt; did you mean `bravo`?' , { line : 1 , column : 8 }) console . log ( file . messages ) Yields: [ { [ ~ /index.text:1:8: `braavo` is misspelt; did you mean `bravo`?] message : '`braavo` is misspelt; did you mean `bravo`?' , name : '~/index.text:1:8' , file : '~/index.text' , reason : '`braavo` is misspelt; did you mean `bravo`?' , line : 1 , column : 8 , location : { start : [ Object ], end : [ Object ] }, ruleId : null , source : null , fatal : false } ] API VFile(options?) Create a new virtual file. If options is string or Buffer , treats it as {contents: options} . If options is a VFile , returns it. All other options are set on the newly created vfile . Path related properties are set in the following order (least specific to most specific): history , path , basename , stem , extname , dirname . It\u2019s not possible to set either dirname or extname without setting either history , path , basename , or stem as well. Example vfile () vfile ( 'console.log(\"alpha\");' ) vfile ( Buffer . from ( 'exit 1' )) vfile ({ path : path . join ( __dirname , 'readme.md' )}) vfile ({ stem : 'readme' , extname : '.md' , dirname : __dirname }) vfile ({ other : 'properties' , are : 'copied' , ov : { e : 'r' }}) vfile.contents Buffer , string , null \u2014 Raw value. vfile.cwd string \u2014 Base of path . Defaults to process.cwd() . vfile.path string? \u2014 Path of vfile . Cannot be nullified. vfile.basename string? \u2014 Current name (including extension) of vfile . Cannot contain path separators. Cannot be nullified either (use file.path = file.dirname instead). vfile.stem string? \u2014 Name (without extension) of vfile . Cannot be nullified, and cannot contain path separators. vfile.extname string? \u2014 Extension (with dot) of vfile . Cannot be set if there\u2019s no path yet and cannot contain path separators. vfile.dirname string? \u2014 Path to parent directory of vfile . Cannot be set if there\u2019s no path yet. vfile.history Array.<string> \u2014 List of file-paths the file moved between. vfile.messages Array.<VMessage> \u2014 List of messages associated with the file. vfile.data Object \u2014 Place to store custom information. It\u2019s OK to store custom data directly on the vfile , moving it to data gives a little more privacy. VFile#toString(encoding?) Convert contents of vfile to string. When contents is a Buffer , encoding is a character encoding to understand doc as ( string , default: 'utf8' ). VFile#message(reason[, position][, origin]) Associates a message with the file, where fatal is set to false . Constructs a new VMessage and adds it to vfile.messages . Returns VMessage . VFile#info(reason[, position][, origin]) Associates an informational message with the file, where fatal is set to null . Calls #message() internally. Returns VMessage . VFile#fail(reason[, position][, origin]) Associates a fatal message with the file, then immediately throws it. Note: fatal errors mean a file is no longer processable. Calls #message() internally. Throws VMessage . List of utilities The following list of projects includes tools for working with virtual files. See unist for projects that work with nodes. convert-vinyl-to-vfile \u2014 transform from Vinyl to vfile to-vfile \u2014 create a vfile from a filepath vfile-find-down \u2014 find files by searching the file system downwards vfile-find-up \u2014 find files by searching the file system upwards vfile-glob \u2014 find files by glob patterns vfile-is \u2014 check if a vfile passes a test vfile-location \u2014 convert between positional and offset locations vfile-matter \u2014 parse the YAML front matter vfile-message \u2014 create a vfile message vfile-messages-to-vscode-diagnostics \u2014 transform vfile messages to VS Code diagnostics vfile-mkdirp \u2014 make sure the directory of a vfile exists on the file system vfile-rename \u2014 rename the path parts of a vfile vfile-sort \u2014 sort messages by line/column vfile-statistics \u2014 count messages per category: failures, warnings, etc vfile-to-eslint \u2014 convert to ESLint formatter compatible output Reporters The following list of projects show linting results for given virtual files. Reporters must accept Array.<VFile> as their first argument, and return string . Reporters may accept other values too, in which case it\u2019s suggested to stick to vfile-reporter s interface. vfile-reporter \u2014 create a report vfile-reporter-json \u2014 create a JSON report vfile-reporter-folder-json \u2014 create a JSON representation of vfiles vfile-reporter-pretty \u2014 create a pretty report vfile-reporter-junit \u2014 create a jUnit report vfile-reporter-position \u2014 create a report with content excerpts Contribute See contributing.md in vfile/.github for ways to get started. See support.md for ways to get help. Ideas for new utilities and tools can be posted in vfile/ideas . This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms. Sponsor Support this effort and give back by sponsoring on OpenCollective ! Gatsby \ud83e\udd47 Vercel \ud83e\udd47 Netlify Holloway ThemeIsle Boost Hub Expo You? Acknowledgments The initial release of this project was authored by @wooorm . Thanks to @contra , @phated , and others for their work on Vinyl , which was a huge inspiration. Thanks to @brendo , @shinnn , @KyleAMathews , @sindresorhus , and @denysdovhan for contributing commits since! License MIT \u00a9 Titus Wormer","title":"Readme"},{"location":"node_modules/vfile/readme/#contents","text":"Install Use API VFile(options?) vfile.contents vfile.cwd vfile.path vfile.basename vfile.stem vfile.extname vfile.dirname vfile.history vfile.messages vfile.data VFile#toString(encoding?) VFile#message(reason[, position][, origin]) VFile#info(reason[, position][, origin]) VFile#fail(reason[, position][, origin]) List of utilities Reporters Contribute Sponsor Acknowledgments License","title":"Contents"},{"location":"node_modules/vfile/readme/#install","text":"npm : npm install vfile","title":"Install"},{"location":"node_modules/vfile/readme/#use","text":"var vfile = require ( 'vfile' ) var file = vfile ({ path : '~/example.txt' , contents : 'Alpha *braavo* charlie.' }) file . path // => '~/example.txt' file . dirname // => '~' file . extname = '.md' file . basename // => 'example.md' file . basename = 'index.text' file . history // => ['~/example.txt', '~/example.md', '~/index.text'] file . message ( '`braavo` is misspelt; did you mean `bravo`?' , { line : 1 , column : 8 }) console . log ( file . messages ) Yields: [ { [ ~ /index.text:1:8: `braavo` is misspelt; did you mean `bravo`?] message : '`braavo` is misspelt; did you mean `bravo`?' , name : '~/index.text:1:8' , file : '~/index.text' , reason : '`braavo` is misspelt; did you mean `bravo`?' , line : 1 , column : 8 , location : { start : [ Object ], end : [ Object ] }, ruleId : null , source : null , fatal : false } ]","title":"Use"},{"location":"node_modules/vfile/readme/#api","text":"","title":"API"},{"location":"node_modules/vfile/readme/#vfileoptions","text":"Create a new virtual file. If options is string or Buffer , treats it as {contents: options} . If options is a VFile , returns it. All other options are set on the newly created vfile . Path related properties are set in the following order (least specific to most specific): history , path , basename , stem , extname , dirname . It\u2019s not possible to set either dirname or extname without setting either history , path , basename , or stem as well.","title":"VFile(options?)"},{"location":"node_modules/vfile/readme/#example","text":"vfile () vfile ( 'console.log(\"alpha\");' ) vfile ( Buffer . from ( 'exit 1' )) vfile ({ path : path . join ( __dirname , 'readme.md' )}) vfile ({ stem : 'readme' , extname : '.md' , dirname : __dirname }) vfile ({ other : 'properties' , are : 'copied' , ov : { e : 'r' }})","title":"Example"},{"location":"node_modules/vfile/readme/#vfilecontents","text":"Buffer , string , null \u2014 Raw value.","title":"vfile.contents"},{"location":"node_modules/vfile/readme/#vfilecwd","text":"string \u2014 Base of path . Defaults to process.cwd() .","title":"vfile.cwd"},{"location":"node_modules/vfile/readme/#vfilepath","text":"string? \u2014 Path of vfile . Cannot be nullified.","title":"vfile.path"},{"location":"node_modules/vfile/readme/#vfilebasename","text":"string? \u2014 Current name (including extension) of vfile . Cannot contain path separators. Cannot be nullified either (use file.path = file.dirname instead).","title":"vfile.basename"},{"location":"node_modules/vfile/readme/#vfilestem","text":"string? \u2014 Name (without extension) of vfile . Cannot be nullified, and cannot contain path separators.","title":"vfile.stem"},{"location":"node_modules/vfile/readme/#vfileextname","text":"string? \u2014 Extension (with dot) of vfile . Cannot be set if there\u2019s no path yet and cannot contain path separators.","title":"vfile.extname"},{"location":"node_modules/vfile/readme/#vfiledirname","text":"string? \u2014 Path to parent directory of vfile . Cannot be set if there\u2019s no path yet.","title":"vfile.dirname"},{"location":"node_modules/vfile/readme/#vfilehistory","text":"Array.<string> \u2014 List of file-paths the file moved between.","title":"vfile.history"},{"location":"node_modules/vfile/readme/#vfilemessages","text":"Array.<VMessage> \u2014 List of messages associated with the file.","title":"vfile.messages"},{"location":"node_modules/vfile/readme/#vfiledata","text":"Object \u2014 Place to store custom information. It\u2019s OK to store custom data directly on the vfile , moving it to data gives a little more privacy.","title":"vfile.data"},{"location":"node_modules/vfile/readme/#vfiletostringencoding","text":"Convert contents of vfile to string. When contents is a Buffer , encoding is a character encoding to understand doc as ( string , default: 'utf8' ).","title":"VFile#toString(encoding?)"},{"location":"node_modules/vfile/readme/#vfilemessagereason-position-origin","text":"Associates a message with the file, where fatal is set to false . Constructs a new VMessage and adds it to vfile.messages .","title":"VFile#message(reason[, position][, origin])"},{"location":"node_modules/vfile/readme/#returns","text":"VMessage .","title":"Returns"},{"location":"node_modules/vfile/readme/#vfileinforeason-position-origin","text":"Associates an informational message with the file, where fatal is set to null . Calls #message() internally.","title":"VFile#info(reason[, position][, origin])"},{"location":"node_modules/vfile/readme/#returns_1","text":"VMessage .","title":"Returns"},{"location":"node_modules/vfile/readme/#vfilefailreason-position-origin","text":"Associates a fatal message with the file, then immediately throws it. Note: fatal errors mean a file is no longer processable. Calls #message() internally.","title":"VFile#fail(reason[, position][, origin])"},{"location":"node_modules/vfile/readme/#throws","text":"VMessage .","title":"Throws"},{"location":"node_modules/vfile/readme/#list-of-utilities","text":"The following list of projects includes tools for working with virtual files. See unist for projects that work with nodes. convert-vinyl-to-vfile \u2014 transform from Vinyl to vfile to-vfile \u2014 create a vfile from a filepath vfile-find-down \u2014 find files by searching the file system downwards vfile-find-up \u2014 find files by searching the file system upwards vfile-glob \u2014 find files by glob patterns vfile-is \u2014 check if a vfile passes a test vfile-location \u2014 convert between positional and offset locations vfile-matter \u2014 parse the YAML front matter vfile-message \u2014 create a vfile message vfile-messages-to-vscode-diagnostics \u2014 transform vfile messages to VS Code diagnostics vfile-mkdirp \u2014 make sure the directory of a vfile exists on the file system vfile-rename \u2014 rename the path parts of a vfile vfile-sort \u2014 sort messages by line/column vfile-statistics \u2014 count messages per category: failures, warnings, etc vfile-to-eslint \u2014 convert to ESLint formatter compatible output","title":"List of utilities"},{"location":"node_modules/vfile/readme/#reporters","text":"The following list of projects show linting results for given virtual files. Reporters must accept Array.<VFile> as their first argument, and return string . Reporters may accept other values too, in which case it\u2019s suggested to stick to vfile-reporter s interface. vfile-reporter \u2014 create a report vfile-reporter-json \u2014 create a JSON report vfile-reporter-folder-json \u2014 create a JSON representation of vfiles vfile-reporter-pretty \u2014 create a pretty report vfile-reporter-junit \u2014 create a jUnit report vfile-reporter-position \u2014 create a report with content excerpts","title":"Reporters"},{"location":"node_modules/vfile/readme/#contribute","text":"See contributing.md in vfile/.github for ways to get started. See support.md for ways to get help. Ideas for new utilities and tools can be posted in vfile/ideas . This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms.","title":"Contribute"},{"location":"node_modules/vfile/readme/#sponsor","text":"Support this effort and give back by sponsoring on OpenCollective ! Gatsby \ud83e\udd47 Vercel \ud83e\udd47 Netlify Holloway ThemeIsle Boost Hub Expo You?","title":"Sponsor"},{"location":"node_modules/vfile/readme/#acknowledgments","text":"The initial release of this project was authored by @wooorm . Thanks to @contra , @phated , and others for their work on Vinyl , which was a huge inspiration. Thanks to @brendo , @shinnn , @KyleAMathews , @sindresorhus , and @denysdovhan for contributing commits since!","title":"Acknowledgments"},{"location":"node_modules/vfile/readme/#license","text":"MIT \u00a9 Titus Wormer","title":"License"},{"location":"node_modules/vfile/node_modules/is-buffer/","text":"is-buffer Determine if an object is a Buffer (including the browserify Buffer ) Why not use Buffer.isBuffer ? This module lets you check if an object is a Buffer without using Buffer.isBuffer (which includes the whole buffer module in browserify ). It's future-proof and works in node too! install npm install is-buffer usage var isBuffer = require ( 'is-buffer' ) isBuffer ( new Buffer ( 4 )) // true isBuffer ( Buffer . alloc ( 4 )) //true isBuffer ( undefined ) // false isBuffer ( null ) // false isBuffer ( '' ) // false isBuffer ( true ) // false isBuffer ( false ) // false isBuffer ( 0 ) // false isBuffer ( 1 ) // false isBuffer ( 1.0 ) // false isBuffer ( 'string' ) // false isBuffer ({}) // false isBuffer ( function foo () {}) // false license MIT. Copyright (C) Feross Aboukhadijeh .","title":"is-buffer [![travis][travis-image]][travis-url] [![npm][npm-image]][npm-url] [![downloads][downloads-image]][downloads-url] [![javascript style guide][standard-image]][standard-url]"},{"location":"node_modules/vfile/node_modules/is-buffer/#is-buffer","text":"","title":"is-buffer"},{"location":"node_modules/vfile/node_modules/is-buffer/#determine-if-an-object-is-a-buffer-including-the-browserify-buffer","text":"","title":"Determine if an object is a Buffer (including the browserify Buffer)"},{"location":"node_modules/vfile/node_modules/is-buffer/#why-not-use-bufferisbuffer","text":"This module lets you check if an object is a Buffer without using Buffer.isBuffer (which includes the whole buffer module in browserify ). It's future-proof and works in node too!","title":"Why not use Buffer.isBuffer?"},{"location":"node_modules/vfile/node_modules/is-buffer/#install","text":"npm install is-buffer","title":"install"},{"location":"node_modules/vfile/node_modules/is-buffer/#usage","text":"var isBuffer = require ( 'is-buffer' ) isBuffer ( new Buffer ( 4 )) // true isBuffer ( Buffer . alloc ( 4 )) //true isBuffer ( undefined ) // false isBuffer ( null ) // false isBuffer ( '' ) // false isBuffer ( true ) // false isBuffer ( false ) // false isBuffer ( 0 ) // false isBuffer ( 1 ) // false isBuffer ( 1.0 ) // false isBuffer ( 'string' ) // false isBuffer ({}) // false isBuffer ( function foo () {}) // false","title":"usage"},{"location":"node_modules/vfile/node_modules/is-buffer/#license","text":"MIT. Copyright (C) Feross Aboukhadijeh .","title":"license"},{"location":"node_modules/vfile-message/readme/","text":"vfile-message Create vfile messages. Install npm : npm install vfile-message Use var VMessage = require ( 'vfile-message' ) var message = new VMessage ( '`braavo` is misspelt; did you mean `bravo`?' , { line : 1 , column : 8 }, 'spell:typo' ) console . log ( message ) Yields: { [ 1 : 8 : `braavo` is misspelt ; did you mean `bravo` ? ] reason : '`braavo` is misspelt; did you mean `bravo`?' , fatal : null , line : 1 , column : 8 , location : { start : { line : 1 , column : 8 }, end : { line : null , column : null } }, source : 'spell' , ruleId : 'typo' } API VMessage(reason[, position][, origin]) Constructor of a message for reason at position from origin . When an error is passed in as reason , copies the stack. Parameters reason Reason for message ( string or Error ). Uses the stack and message of the error if given. position Place at which the message occurred in a file ( Node , Position , or Point , optional). origin Place in code the message originates from ( string , optional). Can either be the ruleId ( 'rule' ), or a string with both a source and a ruleId delimited with a colon ( 'source:rule' ). Extends Error . Returns An instance of itself. Properties reason Reason for message ( string ). fatal If true , marks associated file as no longer processable ( boolean? ). If false , necessitates a (potential) change. The value can also be null or undefined . line Starting line of error ( number? ). column Starting column of error ( number? ). location Full range information, when available ( Position ). Has start and end properties, both set to an object with line and column , set to number? . source Namespace of warning ( string? ). ruleId Category of message ( string? ). stack Stack of message ( string? ). Custom properties It\u2019s OK to store custom data directly on the VMessage , some of those are handled by utilities . file You may add a file property with a path of a file (used throughout the VFile ecosystem). note You may add a note property with a long form description of the message (supported by vfile-reporter ). url You may add a url property with a link to documentation for the message. Contribute See contributing.md in vfile/.github for ways to get started. See support.md for ways to get help. This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms. License MIT \u00a9 Titus Wormer","title":"vfile-message"},{"location":"node_modules/vfile-message/readme/#vfile-message","text":"Create vfile messages.","title":"vfile-message"},{"location":"node_modules/vfile-message/readme/#install","text":"npm : npm install vfile-message","title":"Install"},{"location":"node_modules/vfile-message/readme/#use","text":"var VMessage = require ( 'vfile-message' ) var message = new VMessage ( '`braavo` is misspelt; did you mean `bravo`?' , { line : 1 , column : 8 }, 'spell:typo' ) console . log ( message ) Yields: { [ 1 : 8 : `braavo` is misspelt ; did you mean `bravo` ? ] reason : '`braavo` is misspelt; did you mean `bravo`?' , fatal : null , line : 1 , column : 8 , location : { start : { line : 1 , column : 8 }, end : { line : null , column : null } }, source : 'spell' , ruleId : 'typo' }","title":"Use"},{"location":"node_modules/vfile-message/readme/#api","text":"","title":"API"},{"location":"node_modules/vfile-message/readme/#vmessagereason-position-origin","text":"Constructor of a message for reason at position from origin . When an error is passed in as reason , copies the stack.","title":"VMessage(reason[, position][, origin])"},{"location":"node_modules/vfile-message/readme/#parameters","text":"","title":"Parameters"},{"location":"node_modules/vfile-message/readme/#reason","text":"Reason for message ( string or Error ). Uses the stack and message of the error if given.","title":"reason"},{"location":"node_modules/vfile-message/readme/#position","text":"Place at which the message occurred in a file ( Node , Position , or Point , optional).","title":"position"},{"location":"node_modules/vfile-message/readme/#origin","text":"Place in code the message originates from ( string , optional). Can either be the ruleId ( 'rule' ), or a string with both a source and a ruleId delimited with a colon ( 'source:rule' ).","title":"origin"},{"location":"node_modules/vfile-message/readme/#extends","text":"Error .","title":"Extends"},{"location":"node_modules/vfile-message/readme/#returns","text":"An instance of itself.","title":"Returns"},{"location":"node_modules/vfile-message/readme/#properties","text":"","title":"Properties"},{"location":"node_modules/vfile-message/readme/#reason_1","text":"Reason for message ( string ).","title":"reason"},{"location":"node_modules/vfile-message/readme/#fatal","text":"If true , marks associated file as no longer processable ( boolean? ). If false , necessitates a (potential) change. The value can also be null or undefined .","title":"fatal"},{"location":"node_modules/vfile-message/readme/#line","text":"Starting line of error ( number? ).","title":"line"},{"location":"node_modules/vfile-message/readme/#column","text":"Starting column of error ( number? ).","title":"column"},{"location":"node_modules/vfile-message/readme/#location","text":"Full range information, when available ( Position ). Has start and end properties, both set to an object with line and column , set to number? .","title":"location"},{"location":"node_modules/vfile-message/readme/#source","text":"Namespace of warning ( string? ).","title":"source"},{"location":"node_modules/vfile-message/readme/#ruleid","text":"Category of message ( string? ).","title":"ruleId"},{"location":"node_modules/vfile-message/readme/#stack","text":"Stack of message ( string? ).","title":"stack"},{"location":"node_modules/vfile-message/readme/#custom-properties","text":"It\u2019s OK to store custom data directly on the VMessage , some of those are handled by utilities .","title":"Custom properties"},{"location":"node_modules/vfile-message/readme/#file","text":"You may add a file property with a path of a file (used throughout the VFile ecosystem).","title":"file"},{"location":"node_modules/vfile-message/readme/#note","text":"You may add a note property with a long form description of the message (supported by vfile-reporter ).","title":"note"},{"location":"node_modules/vfile-message/readme/#url","text":"You may add a url property with a link to documentation for the message.","title":"url"},{"location":"node_modules/vfile-message/readme/#contribute","text":"See contributing.md in vfile/.github for ways to get started. See support.md for ways to get help. This project has a code of conduct . By interacting with this repository, organization, or community you agree to abide by its terms.","title":"Contribute"},{"location":"node_modules/vfile-message/readme/#license","text":"MIT \u00a9 Titus Wormer","title":"License"},{"location":"node_modules/word-wrap/","text":"word-wrap Wrap words to a specified length. Install Install with npm : $ npm install --save word-wrap Usage var wrap = require ( 'word-wrap' ); wrap ( 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.' ); Results in: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Options options.width Type: Number Default: 50 The width of the text before wrapping to a new line. Example: wrap ( str , { width : 60 }); options.indent Type: String Default: `` (two spaces) The string to use at the beginning of each line. Example: wrap ( str , { indent : ' ' }); options.newline Type: String Default: \\n The string to use at the end of each line. Example: wrap ( str , { newline : '\\n\\n' }); options.escape Type: function Default: function(str){return str;} An escape function to run on each line after splitting them. Example: var xmlescape = require ( 'xml-escape' ); wrap ( str , { escape : function ( string ){ return xmlescape ( string ); } }); options.trim Type: Boolean Default: false Trim trailing whitespace from the returned string. This option is included since .trim() would also strip the leading indentation from the first line. Example: wrap ( str , { trim : true }); options.cut Type: Boolean Default: false Break a word between any two letters when the word is longer than the specified width. Example: wrap ( str , { cut : true }); About Related projects common-words : Updated list (JSON) of the 100 most common words in the English language. Useful for\u2026 more | homepage shuffle-words : Shuffle the words in a string and optionally the letters in each word using the\u2026 more | homepage unique-words : Return the unique words in a string or array. | homepage wordcount : Count the words in a string. Support for english, CJK and Cyrillic. | homepage Contributing Pull requests and stars are always welcome. For bugs and feature requests, please create an issue . Contributors Commits Contributor 43 jonschlinkert 2 lordvlad 2 hildjj 1 danilosampaio 1 2fd 1 toddself 1 wolfgang42 1 zachhale Building docs (This project's readme.md is generated by verb , please don't edit the readme directly. Any changes to the readme must be made in the .verb.md readme template.) To generate the readme, run the following command: $ npm install -g verbose/verb#dev verb-generate-readme && verb Running tests Running and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command: $ npm install && npm test Author Jon Schlinkert github/jonschlinkert twitter/jonschlinkert License Copyright \u00a9 2017, Jon Schlinkert . Released under the MIT License . This file was generated by verb-generate-readme , v0.6.0, on June 02, 2017.","title":"word-wrap [![NPM version](https://img.shields.io/npm/v/word-wrap.svg?style=flat)](https://www.npmjs.com/package/word-wrap) [![NPM monthly downloads](https://img.shields.io/npm/dm/word-wrap.svg?style=flat)](https://npmjs.org/package/word-wrap) [![NPM total downloads](https://img.shields.io/npm/dt/word-wrap.svg?style=flat)](https://npmjs.org/package/word-wrap) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/word-wrap.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/word-wrap)"},{"location":"node_modules/word-wrap/#word-wrap","text":"Wrap words to a specified length.","title":"word-wrap"},{"location":"node_modules/word-wrap/#install","text":"Install with npm : $ npm install --save word-wrap","title":"Install"},{"location":"node_modules/word-wrap/#usage","text":"var wrap = require ( 'word-wrap' ); wrap ( 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.' ); Results in: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.","title":"Usage"},{"location":"node_modules/word-wrap/#options","text":"","title":"Options"},{"location":"node_modules/word-wrap/#optionswidth","text":"Type: Number Default: 50 The width of the text before wrapping to a new line. Example: wrap ( str , { width : 60 });","title":"options.width"},{"location":"node_modules/word-wrap/#optionsindent","text":"Type: String Default: `` (two spaces) The string to use at the beginning of each line. Example: wrap ( str , { indent : ' ' });","title":"options.indent"},{"location":"node_modules/word-wrap/#optionsnewline","text":"Type: String Default: \\n The string to use at the end of each line. Example: wrap ( str , { newline : '\\n\\n' });","title":"options.newline"},{"location":"node_modules/word-wrap/#optionsescape","text":"Type: function Default: function(str){return str;} An escape function to run on each line after splitting them. Example: var xmlescape = require ( 'xml-escape' ); wrap ( str , { escape : function ( string ){ return xmlescape ( string ); } });","title":"options.escape"},{"location":"node_modules/word-wrap/#optionstrim","text":"Type: Boolean Default: false Trim trailing whitespace from the returned string. This option is included since .trim() would also strip the leading indentation from the first line. Example: wrap ( str , { trim : true });","title":"options.trim"},{"location":"node_modules/word-wrap/#optionscut","text":"Type: Boolean Default: false Break a word between any two letters when the word is longer than the specified width. Example: wrap ( str , { cut : true });","title":"options.cut"},{"location":"node_modules/word-wrap/#about","text":"","title":"About"},{"location":"node_modules/word-wrap/#related-projects","text":"common-words : Updated list (JSON) of the 100 most common words in the English language. Useful for\u2026 more | homepage shuffle-words : Shuffle the words in a string and optionally the letters in each word using the\u2026 more | homepage unique-words : Return the unique words in a string or array. | homepage wordcount : Count the words in a string. Support for english, CJK and Cyrillic. | homepage","title":"Related projects"},{"location":"node_modules/word-wrap/#contributing","text":"Pull requests and stars are always welcome. For bugs and feature requests, please create an issue .","title":"Contributing"},{"location":"node_modules/word-wrap/#contributors","text":"Commits Contributor 43 jonschlinkert 2 lordvlad 2 hildjj 1 danilosampaio 1 2fd 1 toddself 1 wolfgang42 1 zachhale","title":"Contributors"},{"location":"node_modules/word-wrap/#building-docs","text":"(This project's readme.md is generated by verb , please don't edit the readme directly. Any changes to the readme must be made in the .verb.md readme template.) To generate the readme, run the following command: $ npm install -g verbose/verb#dev verb-generate-readme && verb","title":"Building docs"},{"location":"node_modules/word-wrap/#running-tests","text":"Running and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command: $ npm install && npm test","title":"Running tests"},{"location":"node_modules/word-wrap/#author","text":"Jon Schlinkert github/jonschlinkert twitter/jonschlinkert","title":"Author"},{"location":"node_modules/word-wrap/#license","text":"Copyright \u00a9 2017, Jon Schlinkert . Released under the MIT License . This file was generated by verb-generate-readme , v0.6.0, on June 02, 2017.","title":"License"},{"location":"node_modules/wrappy/","text":"wrappy Callback wrapping utility USAGE var wrappy = require ( \"wrappy\" ) // var wrapper = wrappy(wrapperFunction) // make sure a cb is called only once // See also: http://npm.im/once for this specific use case var once = wrappy ( function ( cb ) { var called = false return function () { if ( called ) return called = true return cb . apply ( this , arguments ) } }) function printBoo () { console . log ( 'boo' ) } // has some rando property printBoo . iAmBooPrinter = true var onlyPrintOnce = once ( printBoo ) onlyPrintOnce () // prints 'boo' onlyPrintOnce () // does nothing // random property is retained! assert . equal ( onlyPrintOnce . iAmBooPrinter , true )","title":"wrappy"},{"location":"node_modules/wrappy/#wrappy","text":"Callback wrapping utility","title":"wrappy"},{"location":"node_modules/wrappy/#usage","text":"var wrappy = require ( \"wrappy\" ) // var wrapper = wrappy(wrapperFunction) // make sure a cb is called only once // See also: http://npm.im/once for this specific use case var once = wrappy ( function ( cb ) { var called = false return function () { if ( called ) return called = true return cb . apply ( this , arguments ) } }) function printBoo () { console . log ( 'boo' ) } // has some rando property printBoo . iAmBooPrinter = true var onlyPrintOnce = once ( printBoo ) onlyPrintOnce () // prints 'boo' onlyPrintOnce () // does nothing // random property is retained! assert . equal ( onlyPrintOnce . iAmBooPrinter , true )","title":"USAGE"},{"location":"node_modules/write/","text":"write Write data to a file, replacing the file if it already exists and creating any intermediate directories if they don't already exist. Thin wrapper around node's native fs methods. Install Install with npm : $ npm install --save write Usage var writeFile = require ( 'write' ); API writeFile Asynchronously writes data to a file, replacing the file if it already exists and creating any intermediate directories if they don't already exist. Data can be a string or a buffer. Returns a promise if a callback function is not passed. Params filepath {string|Buffer|integer} : filepath or file descriptor. data {string|Buffer|Uint8Array} : String to write to disk. options {object} : Options to pass to fs.writeFile and/or mkdirp callback {Function} : (optional) If no callback is provided, a promise is returned. Example var writeFile = require ( 'write' ); writeFile ( 'foo.txt' , 'This is content...' , function ( err ) { if ( err ) console . log ( err ); }); // promise writeFile ( 'foo.txt' , 'This is content...' ) . then ( function () { // do stuff }); .promise The promise version of writeFile . Returns a promise. Params filepath {string|Buffer|integer} : filepath or file descriptor. val {string|Buffer|Uint8Array} : String or buffer to write to disk. options {object} : Options to pass to fs.writeFile and/or mkdirp returns {Promise} Example var writeFile = require ( 'write' ); writeFile . promise ( 'foo.txt' , 'This is content...' ) . then ( function () { // do stuff }); .sync The synchronous version of writeFile . Returns undefined. Params filepath {string|Buffer|integer} : filepath or file descriptor. data {string|Buffer|Uint8Array} : String or buffer to write to disk. options {object} : Options to pass to fs.writeFileSync and/or mkdirp returns {undefined} Example var writeFile = require ( 'write' ); writeFile . sync ( 'foo.txt' , 'This is content...' ); .stream Uses fs.createWriteStream to write data to a file, replacing the file if it already exists and creating any intermediate directories if they don't already exist. Data can be a string or a buffer. Returns a new WriteStream object. Params filepath {string|Buffer|integer} : filepath or file descriptor. options {object} : Options to pass to mkdirp and fs.createWriteStream returns {Stream} : Returns a new WriteStream object. (See Writable Stream ). Example var fs = require ( 'fs' ); var writeFile = require ( 'write' ); fs . createReadStream ( 'README.md' ) . pipe ( writeFile . stream ( 'a/b/c/other-file.md' )) . on ( 'close' , function () { // do stuff }); Release history v1.0.2 - 2017-07-11 improved documentation v1.0.0 - 2017-07-09 Added promise support Changed The main export will now return a promise if no callback is passed About Related projects delete : Delete files and folders and any intermediate directories if they exist (sync and async). | homepage read-data : Read JSON or YAML files. | homepage read-yaml : Very thin wrapper around js-yaml for directly reading in YAML files. | homepage write-data : Write a YAML or JSON file to disk. Automatically detects the format to write based\u2026 more | homepage write-json : Write a JSON file to disk, also creates intermediate directories in the destination path if\u2026 more | homepage write-yaml : Write YAML. Converts JSON to YAML writes it to the specified file. | homepage Contributing Pull requests and stars are always welcome. For bugs and feature requests, please create an issue . Contributors Commits Contributor 33 jonschlinkert 1 tunnckoCore Building docs (This project's readme.md is generated by verb , please don't edit the readme directly. Any changes to the readme must be made in the .verb.md readme template.) To generate the readme, run the following command: $ npm install -g verbose/verb#dev verb-generate-readme && verb Running tests Running and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command: $ npm install && npm test Author Jon Schlinkert github/jonschlinkert twitter/jonschlinkert License Copyright \u00a9 2017, Jon Schlinkert . Released under the MIT License . This file was generated by verb-generate-readme , v0.6.0, on July 11, 2017.","title":"write [![NPM version](https://img.shields.io/npm/v/write.svg?style=flat)](https://www.npmjs.com/package/write) [![NPM monthly downloads](https://img.shields.io/npm/dm/write.svg?style=flat)](https://npmjs.org/package/write) [![NPM total downloads](https://img.shields.io/npm/dt/write.svg?style=flat)](https://npmjs.org/package/write) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/write.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/write)"},{"location":"node_modules/write/#write","text":"Write data to a file, replacing the file if it already exists and creating any intermediate directories if they don't already exist. Thin wrapper around node's native fs methods.","title":"write"},{"location":"node_modules/write/#install","text":"Install with npm : $ npm install --save write","title":"Install"},{"location":"node_modules/write/#usage","text":"var writeFile = require ( 'write' );","title":"Usage"},{"location":"node_modules/write/#api","text":"","title":"API"},{"location":"node_modules/write/#writefile","text":"Asynchronously writes data to a file, replacing the file if it already exists and creating any intermediate directories if they don't already exist. Data can be a string or a buffer. Returns a promise if a callback function is not passed. Params filepath {string|Buffer|integer} : filepath or file descriptor. data {string|Buffer|Uint8Array} : String to write to disk. options {object} : Options to pass to fs.writeFile and/or mkdirp callback {Function} : (optional) If no callback is provided, a promise is returned. Example var writeFile = require ( 'write' ); writeFile ( 'foo.txt' , 'This is content...' , function ( err ) { if ( err ) console . log ( err ); }); // promise writeFile ( 'foo.txt' , 'This is content...' ) . then ( function () { // do stuff });","title":"writeFile"},{"location":"node_modules/write/#promise","text":"The promise version of writeFile . Returns a promise. Params filepath {string|Buffer|integer} : filepath or file descriptor. val {string|Buffer|Uint8Array} : String or buffer to write to disk. options {object} : Options to pass to fs.writeFile and/or mkdirp returns {Promise} Example var writeFile = require ( 'write' ); writeFile . promise ( 'foo.txt' , 'This is content...' ) . then ( function () { // do stuff });","title":".promise"},{"location":"node_modules/write/#sync","text":"The synchronous version of writeFile . Returns undefined. Params filepath {string|Buffer|integer} : filepath or file descriptor. data {string|Buffer|Uint8Array} : String or buffer to write to disk. options {object} : Options to pass to fs.writeFileSync and/or mkdirp returns {undefined} Example var writeFile = require ( 'write' ); writeFile . sync ( 'foo.txt' , 'This is content...' );","title":".sync"},{"location":"node_modules/write/#stream","text":"Uses fs.createWriteStream to write data to a file, replacing the file if it already exists and creating any intermediate directories if they don't already exist. Data can be a string or a buffer. Returns a new WriteStream object. Params filepath {string|Buffer|integer} : filepath or file descriptor. options {object} : Options to pass to mkdirp and fs.createWriteStream returns {Stream} : Returns a new WriteStream object. (See Writable Stream ). Example var fs = require ( 'fs' ); var writeFile = require ( 'write' ); fs . createReadStream ( 'README.md' ) . pipe ( writeFile . stream ( 'a/b/c/other-file.md' )) . on ( 'close' , function () { // do stuff });","title":".stream"},{"location":"node_modules/write/#release-history","text":"","title":"Release history"},{"location":"node_modules/write/#v102-2017-07-11","text":"improved documentation","title":"v1.0.2 - 2017-07-11"},{"location":"node_modules/write/#v100-2017-07-09","text":"Added promise support Changed The main export will now return a promise if no callback is passed","title":"v1.0.0 - 2017-07-09"},{"location":"node_modules/write/#about","text":"","title":"About"},{"location":"node_modules/write/#related-projects","text":"delete : Delete files and folders and any intermediate directories if they exist (sync and async). | homepage read-data : Read JSON or YAML files. | homepage read-yaml : Very thin wrapper around js-yaml for directly reading in YAML files. | homepage write-data : Write a YAML or JSON file to disk. Automatically detects the format to write based\u2026 more | homepage write-json : Write a JSON file to disk, also creates intermediate directories in the destination path if\u2026 more | homepage write-yaml : Write YAML. Converts JSON to YAML writes it to the specified file. | homepage","title":"Related projects"},{"location":"node_modules/write/#contributing","text":"Pull requests and stars are always welcome. For bugs and feature requests, please create an issue .","title":"Contributing"},{"location":"node_modules/write/#contributors","text":"Commits Contributor 33 jonschlinkert 1 tunnckoCore","title":"Contributors"},{"location":"node_modules/write/#building-docs","text":"(This project's readme.md is generated by verb , please don't edit the readme directly. Any changes to the readme must be made in the .verb.md readme template.) To generate the readme, run the following command: $ npm install -g verbose/verb#dev verb-generate-readme && verb","title":"Building docs"},{"location":"node_modules/write/#running-tests","text":"Running and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command: $ npm install && npm test","title":"Running tests"},{"location":"node_modules/write/#author","text":"Jon Schlinkert github/jonschlinkert twitter/jonschlinkert","title":"Author"},{"location":"node_modules/write/#license","text":"Copyright \u00a9 2017, Jon Schlinkert . Released under the MIT License . This file was generated by verb-generate-readme , v0.6.0, on July 11, 2017.","title":"License"},{"location":"node_modules/xml-escape/","text":"xml-escape Escape XML in javascript (NodeJS) npm install xml-escape // Warning escape is a reserved word, so maybe best to use xmlescape for var name var xmlescape = require ( 'xml-escape' ); xmlescape ( '\"hello\" \\'world\\' & false < true > -1' ); // output // '&quot;hello&quot; &apos;world&apos; &amp; false &lt; true &gt; -1' // don't escape some characters xmlescape ( '\"hello\" \\'world\\' & false < true > -1' , '>\"&' ) // output // '\"hello\" &apos;world&apos; & false &lt; true > -1' There is also now an ignore function thanks to @jayflo esc = require ( './' ); ignore = '\"<&' // note you should never ignore an & output = esc ( 'I am \"<&not>\" escaped' , ignore ) console . log ( output ) //I am \"<&not&gt;\" escaped","title":"Index"},{"location":"node_modules/xml-escape/#xml-escape","text":"Escape XML in javascript (NodeJS) npm install xml-escape // Warning escape is a reserved word, so maybe best to use xmlescape for var name var xmlescape = require ( 'xml-escape' ); xmlescape ( '\"hello\" \\'world\\' & false < true > -1' ); // output // '&quot;hello&quot; &apos;world&apos; &amp; false &lt; true &gt; -1' // don't escape some characters xmlescape ( '\"hello\" \\'world\\' & false < true > -1' , '>\"&' ) // output // '\"hello\" &apos;world&apos; & false &lt; true > -1' There is also now an ignore function thanks to @jayflo esc = require ( './' ); ignore = '\"<&' // note you should never ignore an & output = esc ( 'I am \"<&not>\" escaped' , ignore ) console . log ( output ) //I am \"<&not&gt;\" escaped","title":"xml-escape"},{"location":"node_modules/zwitch/readme/","text":"zwitch Handle values based on a property. Install npm : npm install zwitch Use var zwitch = require ( 'zwitch' ) var handle = zwitch ( 'type' ) handle . invalid = invalid handle . unknown = unknown handle . handlers . alpha = handle handle ({ type : 'alpha' }) Or, with a switch statement: function handle ( value ) { var fn if ( ! value || typeof value !== 'object' || ! ( 'type' in value )) { fn = invalid } else { switch ( value . type ) { case 'alpha' : fn = handle break default : fn = unknown break } } return fn . apply ( this , arguments ) } handle ({ type : 'alpha' }) API zwitch(key[, options]) Create a functional switch, based on a key ( string ). options Options can be omitted and added later to one . handlers ( Object.<Function> , optional) \u2014 Object mapping values to handle, stored on one.handlers invalid ( Function , optional) \u2014 Handle values without key , stored on one.invalid unknown ( Function , optional) \u2014 Handle values with an unhandled key , stored on one.unknown Returns Function \u2014 See one . one(value[, rest...]) Handle one value. Based on the bound key , a respective handler will be invoked. If value is not an object, or doesn\u2019t have a key property, the special \u201cinvalid\u201d handler will be invoked. If value has an unknown key , the special \u201cunknown\u201d handler will be invoked. All arguments, and the context object, are passed through to the handler , and it\u2019s result is returned. one.handlers Map of handler s ( Object.<string, Function> ). one.invalid Special handler invoked if a value doesn\u2019t have a key property. If not set, undefined is returned for invalid values. one.unknown Special handler invoked if a value does not have a matching handler. If not set, undefined is returned for unknown values. function handler(value[, rest...]) Handle one value. Related mapz \u2014 Functional map License MIT \u00a9 Titus Wormer","title":"zwitch"},{"location":"node_modules/zwitch/readme/#zwitch","text":"Handle values based on a property.","title":"zwitch"},{"location":"node_modules/zwitch/readme/#install","text":"npm : npm install zwitch","title":"Install"},{"location":"node_modules/zwitch/readme/#use","text":"var zwitch = require ( 'zwitch' ) var handle = zwitch ( 'type' ) handle . invalid = invalid handle . unknown = unknown handle . handlers . alpha = handle handle ({ type : 'alpha' }) Or, with a switch statement: function handle ( value ) { var fn if ( ! value || typeof value !== 'object' || ! ( 'type' in value )) { fn = invalid } else { switch ( value . type ) { case 'alpha' : fn = handle break default : fn = unknown break } } return fn . apply ( this , arguments ) } handle ({ type : 'alpha' })","title":"Use"},{"location":"node_modules/zwitch/readme/#api","text":"","title":"API"},{"location":"node_modules/zwitch/readme/#zwitchkey-options","text":"Create a functional switch, based on a key ( string ).","title":"zwitch(key[, options])"},{"location":"node_modules/zwitch/readme/#options","text":"Options can be omitted and added later to one . handlers ( Object.<Function> , optional) \u2014 Object mapping values to handle, stored on one.handlers invalid ( Function , optional) \u2014 Handle values without key , stored on one.invalid unknown ( Function , optional) \u2014 Handle values with an unhandled key , stored on one.unknown","title":"options"},{"location":"node_modules/zwitch/readme/#returns","text":"Function \u2014 See one .","title":"Returns"},{"location":"node_modules/zwitch/readme/#onevalue-rest","text":"Handle one value. Based on the bound key , a respective handler will be invoked. If value is not an object, or doesn\u2019t have a key property, the special \u201cinvalid\u201d handler will be invoked. If value has an unknown key , the special \u201cunknown\u201d handler will be invoked. All arguments, and the context object, are passed through to the handler , and it\u2019s result is returned.","title":"one(value[, rest...])"},{"location":"node_modules/zwitch/readme/#onehandlers","text":"Map of handler s ( Object.<string, Function> ).","title":"one.handlers"},{"location":"node_modules/zwitch/readme/#oneinvalid","text":"Special handler invoked if a value doesn\u2019t have a key property. If not set, undefined is returned for invalid values.","title":"one.invalid"},{"location":"node_modules/zwitch/readme/#oneunknown","text":"Special handler invoked if a value does not have a matching handler. If not set, undefined is returned for unknown values.","title":"one.unknown"},{"location":"node_modules/zwitch/readme/#function-handlervalue-rest","text":"Handle one value.","title":"function handler(value[, rest...])"},{"location":"node_modules/zwitch/readme/#related","text":"mapz \u2014 Functional map","title":"Related"},{"location":"node_modules/zwitch/readme/#license","text":"MIT \u00a9 Titus Wormer","title":"License"},{"location":"tips/%E5%8E%A8%E6%88%BF%E5%87%86%E5%A4%87/","text":"\u53a8\u623f\u51c6\u5907 \u5728\u9605\u8bfb\u548c\u53c2\u8003\u83dc\u8c31\u4e4b\u524d\uff0c\u5047\u60f3\u4f60\u5df2\u7ecf\u5728\u53a8\u623f\u4e2d\u51c6\u5907\u597d\u4e86\u4e0b\u5217\u7269\u54c1\u3002\u8fd9\u4e9b\u7269\u54c1\u4e0d\u4f1a\u5728\u539f\u6750\u6599\u548c\u5de5\u5177\u90e8\u5206\u63d0\u53ca\u3002 \u71c3\u6c14\u7076\uff0c\u996e\u7528\u6c34\uff0c\u7092\u9505\uff0c\u84b8\u9505\uff0c\u716e\u9505\uff0c\u7535\u996d\u9505\uff0c\u98df\u7528\u6cb9\uff0c\u6d17\u83dc\u76c6\uff0c\u789f\u5b50\uff0c\u7897\uff0c\u7b77\u5b50\uff0c\u52fa\u5b50\uff0c\u6c64\u52fa\uff0c\u6f0f\u52fa\uff0c\u6d17\u6da4\u5242\uff0c\u62b9\u5e03\uff0c\u94a2\u4e1d\u7403\uff0c\u83dc\u5200\uff0c\u524a\u76ae\u5200 \u4e0b\u5217\u6750\u6599\u53ef\u80fd\u4f1a\u88ab\u9ad8\u9891\u4f7f\u7528\u3002\u5efa\u8bae\u63d0\u524d\u4e3a\u53a8\u623f\u91c7\u8d2d\u597d\uff0c\u5e76\u6c38\u8fdc\u4fdd\u969c\u6709\u65b0\u9c9c\u7684\u53ef\u4ee5\u53d6\u7528\u3002 \u5927\u8471\uff0c\u5c0f\u8471\uff0c\u751f\u59dc\uff0c\u5927\u849c\uff0c\u82b1\u6912\uff0c\u516b\u89d2\uff0c\u6842\u76ae\uff0c\u9999\u53f6 \u5e72\u8fa3\u6912\uff0c\u5c0f\u7c73\u6912\uff0c\u751f\u62bd\uff0c\u8001\u62bd\uff0c\u869d\u6cb9\uff0c\u6599\u9152 \u9ed1\u918b\uff0c\u767d\u918b\uff0c\u8c46\u74e3\u9171\uff0c\u51b0\u7cd6\uff0c\u68c9\u767d\u7cd6\uff0c\u76d0\uff0c\u9e21\u7cbe \u9ed1\u80e1\u6912\uff0c\u767d\u80e1\u6912\uff0c\u4e94\u9999\u7c89\uff0c\u7389\u7c73\u6dc0\u7c89\uff0c\u756a\u85af\u6dc0\u7c89 \u5982\u679c\u4f60\u9884\u8ba1\u5c06\u88ab\u9694\u79bb\u5f88\u4e45\uff0c\u5efa\u8bae\u540c\u6837\u91c7\u8d2d\u597d\u4e0b\u5217\u5185\u5bb9\uff1a \u51b0\u7bb1\u3001\u5fae\u6ce2\u7089\u3001\u4fdd\u9c9c\u819c\u3001\u4fdd\u9c9c\u888b \u9e21\u86cb\u3001\u9752\u6912\u3001\u80e1\u841d\u535c\u3001\u9ec4\u74dc\u3001\u897f\u7ea2\u67ff\u3001\u6728\u8033\u3001\u91cc\u810a\u8089\u3001\u65b9\u4fbf\u9762\u3001\u8304\u5b50\u3001\u7c73\u3001\u6302\u9762\u6216\u65b9\u4fbf\u9762 \u5982\u679c\u4f60\u975e\u5e38\u60f3\u8ffd\u6c42\u5f62\u5f0f\u5316\u3001\u6807\u51c6\u5316\u548c\u4eea\u5f0f\u611f\uff0c\u5e76\u4e14\u60f3\u62e5\u6709\u4e00\u4e2a\u4e0e\u4f17\u4e0d\u540c\u7684\u6709\u8da3\u53a8\u623f\uff0c\u90a3\u5c31\u540c\u6837\u91c7\u8d2d\u4e0b\u5217\u5185\u5bb9\uff1a \u5929\u5e73\u3001\u6e38\u6807\u5361\u5c3a\u3001\u91cf\u7b52\u3001\u505c\u8868\u3001\u70e7\u676f\u3001\u6d4b\u6e29\u67aa\u3001\u79fb\u6db2\u5668 \u5982\u679c\u4f60\u60f3\u8282\u7ea6\u65f6\u95f4\uff0c\u53ef\u4ee5\u8d2d\u4e70\u534a\u6210\u54c1\u5e76\u7b80\u5355\u5904\u7406\u540e\u98df\u7528\uff1a \u9884\u70b8\u8fc7\u7684\u70b8\u9e21\u5757\u3001\u51b7\u51bb\u624b\u6293\u997c\u3001\u5305\u597d\u7684\u997a\u5b50\u3001\u888b\u88c5\u5496\u55b1\u3001\u5404\u79cd\u4e3c\u7c7b\uff08\u76d6\u996d\uff09\u3001\u81ea\u70ed\u98df\u54c1\u3001\u62cc\u9762\u6599\u5305\u3001\u65b9\u4fbf\u98df\u54c1 \u5176\u5b83\u9488\u5bf9\u6bcf\u9053\u83dc\u7684\u539f\u6750\u6599\uff0c\u8bf7\u5177\u4f53\u53c2\u8003\u83dc\u54c1\u672c\u8eab\u7684 \u6240\u9700\u539f\u6750\u6599 \u7ae0\u8282\u3002","title":"\u53a8\u623f\u51c6\u5907"},{"location":"tips/%E5%8E%A8%E6%88%BF%E5%87%86%E5%A4%87/#_1","text":"\u5728\u9605\u8bfb\u548c\u53c2\u8003\u83dc\u8c31\u4e4b\u524d\uff0c\u5047\u60f3\u4f60\u5df2\u7ecf\u5728\u53a8\u623f\u4e2d\u51c6\u5907\u597d\u4e86\u4e0b\u5217\u7269\u54c1\u3002\u8fd9\u4e9b\u7269\u54c1\u4e0d\u4f1a\u5728\u539f\u6750\u6599\u548c\u5de5\u5177\u90e8\u5206\u63d0\u53ca\u3002 \u71c3\u6c14\u7076\uff0c\u996e\u7528\u6c34\uff0c\u7092\u9505\uff0c\u84b8\u9505\uff0c\u716e\u9505\uff0c\u7535\u996d\u9505\uff0c\u98df\u7528\u6cb9\uff0c\u6d17\u83dc\u76c6\uff0c\u789f\u5b50\uff0c\u7897\uff0c\u7b77\u5b50\uff0c\u52fa\u5b50\uff0c\u6c64\u52fa\uff0c\u6f0f\u52fa\uff0c\u6d17\u6da4\u5242\uff0c\u62b9\u5e03\uff0c\u94a2\u4e1d\u7403\uff0c\u83dc\u5200\uff0c\u524a\u76ae\u5200 \u4e0b\u5217\u6750\u6599\u53ef\u80fd\u4f1a\u88ab\u9ad8\u9891\u4f7f\u7528\u3002\u5efa\u8bae\u63d0\u524d\u4e3a\u53a8\u623f\u91c7\u8d2d\u597d\uff0c\u5e76\u6c38\u8fdc\u4fdd\u969c\u6709\u65b0\u9c9c\u7684\u53ef\u4ee5\u53d6\u7528\u3002 \u5927\u8471\uff0c\u5c0f\u8471\uff0c\u751f\u59dc\uff0c\u5927\u849c\uff0c\u82b1\u6912\uff0c\u516b\u89d2\uff0c\u6842\u76ae\uff0c\u9999\u53f6 \u5e72\u8fa3\u6912\uff0c\u5c0f\u7c73\u6912\uff0c\u751f\u62bd\uff0c\u8001\u62bd\uff0c\u869d\u6cb9\uff0c\u6599\u9152 \u9ed1\u918b\uff0c\u767d\u918b\uff0c\u8c46\u74e3\u9171\uff0c\u51b0\u7cd6\uff0c\u68c9\u767d\u7cd6\uff0c\u76d0\uff0c\u9e21\u7cbe \u9ed1\u80e1\u6912\uff0c\u767d\u80e1\u6912\uff0c\u4e94\u9999\u7c89\uff0c\u7389\u7c73\u6dc0\u7c89\uff0c\u756a\u85af\u6dc0\u7c89 \u5982\u679c\u4f60\u9884\u8ba1\u5c06\u88ab\u9694\u79bb\u5f88\u4e45\uff0c\u5efa\u8bae\u540c\u6837\u91c7\u8d2d\u597d\u4e0b\u5217\u5185\u5bb9\uff1a \u51b0\u7bb1\u3001\u5fae\u6ce2\u7089\u3001\u4fdd\u9c9c\u819c\u3001\u4fdd\u9c9c\u888b \u9e21\u86cb\u3001\u9752\u6912\u3001\u80e1\u841d\u535c\u3001\u9ec4\u74dc\u3001\u897f\u7ea2\u67ff\u3001\u6728\u8033\u3001\u91cc\u810a\u8089\u3001\u65b9\u4fbf\u9762\u3001\u8304\u5b50\u3001\u7c73\u3001\u6302\u9762\u6216\u65b9\u4fbf\u9762 \u5982\u679c\u4f60\u975e\u5e38\u60f3\u8ffd\u6c42\u5f62\u5f0f\u5316\u3001\u6807\u51c6\u5316\u548c\u4eea\u5f0f\u611f\uff0c\u5e76\u4e14\u60f3\u62e5\u6709\u4e00\u4e2a\u4e0e\u4f17\u4e0d\u540c\u7684\u6709\u8da3\u53a8\u623f\uff0c\u90a3\u5c31\u540c\u6837\u91c7\u8d2d\u4e0b\u5217\u5185\u5bb9\uff1a \u5929\u5e73\u3001\u6e38\u6807\u5361\u5c3a\u3001\u91cf\u7b52\u3001\u505c\u8868\u3001\u70e7\u676f\u3001\u6d4b\u6e29\u67aa\u3001\u79fb\u6db2\u5668 \u5982\u679c\u4f60\u60f3\u8282\u7ea6\u65f6\u95f4\uff0c\u53ef\u4ee5\u8d2d\u4e70\u534a\u6210\u54c1\u5e76\u7b80\u5355\u5904\u7406\u540e\u98df\u7528\uff1a \u9884\u70b8\u8fc7\u7684\u70b8\u9e21\u5757\u3001\u51b7\u51bb\u624b\u6293\u997c\u3001\u5305\u597d\u7684\u997a\u5b50\u3001\u888b\u88c5\u5496\u55b1\u3001\u5404\u79cd\u4e3c\u7c7b\uff08\u76d6\u996d\uff09\u3001\u81ea\u70ed\u98df\u54c1\u3001\u62cc\u9762\u6599\u5305\u3001\u65b9\u4fbf\u98df\u54c1 \u5176\u5b83\u9488\u5bf9\u6bcf\u9053\u83dc\u7684\u539f\u6750\u6599\uff0c\u8bf7\u5177\u4f53\u53c2\u8003\u83dc\u54c1\u672c\u8eab\u7684 \u6240\u9700\u539f\u6750\u6599 \u7ae0\u8282\u3002","title":"\u53a8\u623f\u51c6\u5907"},{"location":"tips/%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9%E7%8E%B0%E5%9C%A8%E5%90%83%E4%BB%80%E4%B9%88/","text":"\u5982\u4f55\u51b3\u7b56\u5403\u4ec0\u4e48 \u5982\u4f55\u51b3\u7b56\u5403\u4ec0\u4e48\u4e5f\u662f\u6211\u505a\u83dc\u4e4b\u524d\u4e00\u5927\u96be\u9898\u3002\u6240\u4ee5\u53ea\u80fd\u7528\u6570\u5b66\u63cf\u8ff0\u4e00\u4e0b\u4e86\u3002 \u8ba1\u7b97\u65b9\u6cd5 \u8ba1\u7b97\u8364\u83dc\u548c\u7d20\u83dc\u6570\u91cf \u83dc\u7684\u6570\u91cf = \u4eba\u6570 + 1\u3002 \u8364\u83dc\u6bd4\u7d20\u83dc\u591a\u4e00\u4e2a\uff0c\u6216\u4e00\u6837\u591a\u5373\u53ef\u3002 \u7531\u6b64\u5f97\u5230\u8364\u83dc\u6570\u91cf\u548c\u7d20\u83dc\u6570\u91cf\uff0c\u518d\u5728\u4e0a\u4e00\u6b65\u7684\u83dc\u8c31\u4e2d\u9009\u62e9\u5373\u53ef\u3002 \u5f62\u5f0f\u8bed\u8a00\u63cf\u8ff0 \u5f53 \u6709\u4eba\u6570 N \u65f6\uff0c \u8bbe \u7d20\u83dc\u6570 \u4e3a a , \u8364\u83dc\u6570 \u4e3a b \u3002 N , a , b \u5747\u4e3a\u6574\u6570\u3002 \u6b64\u65f6\u6709\u4e0b\u5217\u4e0d\u7b49\u5f0f\u7ec4\uff1a a + b = N + 1 a \u2264 b \u2264 a+1 \u89e3\u5f97 a = floor(N/2) b = ceil(N/2) \u83dc\u7684\u9009\u62e9 \u5982\u679c\u4eba\u6570\u8d85\u8fc7 8 \u4eba\uff0c\u8003\u8651\u5728\u8364\u83dc\u4e2d\u589e\u52a0\u9c7c\u7c7b\u8364\u83dc\u3002 \u5982\u679c\u6709\u5c0f\u5b69\uff0c\u8003\u8651\u589e\u52a0\u6709\u751c\u5473\u7684\u83dc\u3002 \u8003\u8651\u589e\u52a0\u7279\u8272\u83dc\u3001\u62ff\u624b\u83dc\u3002 \u6ce8\u610f\u51b3\u7b56\u8364\u83dc\u65f6\u4e0d\u8981\u5168\u90e8\u4f7f\u7528\u540c\u4e00\u79cd\u52a8\u7269\u7684\u8089\u3002\u8003\u8651\u987a\u5e8f\u4e3a\uff1a \u732a\u8089 \u3001 \u9e21\u8089 \u3001 \u725b\u8089 \u3001 \u7f8a\u8089 \u3001 \u9e2d\u8089 \u3001 \u9c7c\u8089 \u3002 \u4e0d\u8981\u9009\u62e9\u5947\u5947\u602a\u602a\u7684\u52a8\u7269\u505a\u8364\u83dc\u3002","title":"\u5982\u4f55\u9009\u62e9\u73b0\u5728\u5403\u4ec0\u4e48"},{"location":"tips/%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9%E7%8E%B0%E5%9C%A8%E5%90%83%E4%BB%80%E4%B9%88/#_1","text":"\u5982\u4f55\u51b3\u7b56\u5403\u4ec0\u4e48\u4e5f\u662f\u6211\u505a\u83dc\u4e4b\u524d\u4e00\u5927\u96be\u9898\u3002\u6240\u4ee5\u53ea\u80fd\u7528\u6570\u5b66\u63cf\u8ff0\u4e00\u4e0b\u4e86\u3002","title":"\u5982\u4f55\u51b3\u7b56\u5403\u4ec0\u4e48"},{"location":"tips/%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9%E7%8E%B0%E5%9C%A8%E5%90%83%E4%BB%80%E4%B9%88/#_2","text":"","title":"\u8ba1\u7b97\u65b9\u6cd5"},{"location":"tips/%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9%E7%8E%B0%E5%9C%A8%E5%90%83%E4%BB%80%E4%B9%88/#_3","text":"\u83dc\u7684\u6570\u91cf = \u4eba\u6570 + 1\u3002 \u8364\u83dc\u6bd4\u7d20\u83dc\u591a\u4e00\u4e2a\uff0c\u6216\u4e00\u6837\u591a\u5373\u53ef\u3002 \u7531\u6b64\u5f97\u5230\u8364\u83dc\u6570\u91cf\u548c\u7d20\u83dc\u6570\u91cf\uff0c\u518d\u5728\u4e0a\u4e00\u6b65\u7684\u83dc\u8c31\u4e2d\u9009\u62e9\u5373\u53ef\u3002","title":"\u8ba1\u7b97\u8364\u83dc\u548c\u7d20\u83dc\u6570\u91cf"},{"location":"tips/%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9%E7%8E%B0%E5%9C%A8%E5%90%83%E4%BB%80%E4%B9%88/#_4","text":"\u5f53 \u6709\u4eba\u6570 N \u65f6\uff0c \u8bbe \u7d20\u83dc\u6570 \u4e3a a , \u8364\u83dc\u6570 \u4e3a b \u3002 N , a , b \u5747\u4e3a\u6574\u6570\u3002 \u6b64\u65f6\u6709\u4e0b\u5217\u4e0d\u7b49\u5f0f\u7ec4\uff1a a + b = N + 1 a \u2264 b \u2264 a+1 \u89e3\u5f97 a = floor(N/2) b = ceil(N/2)","title":"\u5f62\u5f0f\u8bed\u8a00\u63cf\u8ff0"},{"location":"tips/%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9%E7%8E%B0%E5%9C%A8%E5%90%83%E4%BB%80%E4%B9%88/#_5","text":"\u5982\u679c\u4eba\u6570\u8d85\u8fc7 8 \u4eba\uff0c\u8003\u8651\u5728\u8364\u83dc\u4e2d\u589e\u52a0\u9c7c\u7c7b\u8364\u83dc\u3002 \u5982\u679c\u6709\u5c0f\u5b69\uff0c\u8003\u8651\u589e\u52a0\u6709\u751c\u5473\u7684\u83dc\u3002 \u8003\u8651\u589e\u52a0\u7279\u8272\u83dc\u3001\u62ff\u624b\u83dc\u3002 \u6ce8\u610f\u51b3\u7b56\u8364\u83dc\u65f6\u4e0d\u8981\u5168\u90e8\u4f7f\u7528\u540c\u4e00\u79cd\u52a8\u7269\u7684\u8089\u3002\u8003\u8651\u987a\u5e8f\u4e3a\uff1a \u732a\u8089 \u3001 \u9e21\u8089 \u3001 \u725b\u8089 \u3001 \u7f8a\u8089 \u3001 \u9e2d\u8089 \u3001 \u9c7c\u8089 \u3002 \u4e0d\u8981\u9009\u62e9\u5947\u5947\u602a\u602a\u7684\u52a8\u7269\u505a\u8364\u83dc\u3002","title":"\u83dc\u7684\u9009\u62e9"},{"location":"tips/advanced/%E6%B2%B9%E6%B8%A9%E5%88%A4%E6%96%AD%E6%8A%80%E5%B7%A7/","text":"\u6cb9\u6e29\u5224\u65ad\u6280\u5de7 \u6cb9\u6e29\u5728 120\u00b0C-140\u00b0C \u4e4b\u95f4\uff1a\u9002\u5408\u8f6f\u70b8\u3001\u6ed1\u7092, \u628a\u7b77\u5b50\u653e\u5165\u6cb9\u9505\u4e2d\uff0c\u5468\u56f4\u57fa\u672c\u4e0d\u8d77\u6ce1\u6ce1\uff0c\u65e0\u9752\u70df\u3001\u65e0\u54cd\u58f0\u3001\u6cb9\u6e29\u5e73\u9759\u3002 \u6cb9\u6e29\u5728 150\u00b0C-160\u00b0C \u4e4b\u95f4\uff1a\u6700\u4f73\u70f9\u996a\u6e29\u5ea6\uff0c\u628a\u7b77\u5b50\u653e\u5165\u6cb9\u9505\u4e2d\uff0c\u5468\u56f4\u4f1a\u5192\u51fa\u5c11\u8bb8\u6cb9\u6ce1\uff0c\u7565\u6709\u9752\u70df\uff0c\u6cb9\u4ece\u56db\u5468\u5f80\u4e2d\u95f4\u7ffb\u52a8\u3002 \u6cb9\u6e29\u5728 160\u00b0C-180\u00b0C \u4e4b\u95f4\uff1a\u9002\u5408\u4e0a\u8272\u70b8\u9165\uff0c\u628a\u7b77\u5b50\u653e\u5165\u6cb9\u9505\u4e2d\uff0c\u5927\u91cf\u9752\u70df\u4e0a\u5347\uff0c\u6cb9\u9762\u53cd\u800c\u8f83\u5e73\u9759\u3002 \uff08\u6ce8\uff09 \u6700\u597d\u4e70\u628a\u6cb9\u6e29\u67aa\uff0c\u8c28\u614e\u4f7f\u7528\u6e29\u5ea6\u8ba1\u3002 \u7f51\u7edc\u89c6\u9891\u6559\u7a0b\u4e2d\u6240\u8c13\u7684 \u201c\u51e0\u6210\u6cb9\u6e29\u201d \u6307\u7684\u662f\u76f8\u5bf9\u4e8e\u5341\u6210\u6cb9\u6e29\uff0c\u4e3a 300\u00b0C\u3002","title":"\u6cb9\u6e29\u5224\u65ad\u6280\u5de7"},{"location":"tips/advanced/%E6%B2%B9%E6%B8%A9%E5%88%A4%E6%96%AD%E6%8A%80%E5%B7%A7/#_1","text":"\u6cb9\u6e29\u5728 120\u00b0C-140\u00b0C \u4e4b\u95f4\uff1a\u9002\u5408\u8f6f\u70b8\u3001\u6ed1\u7092, \u628a\u7b77\u5b50\u653e\u5165\u6cb9\u9505\u4e2d\uff0c\u5468\u56f4\u57fa\u672c\u4e0d\u8d77\u6ce1\u6ce1\uff0c\u65e0\u9752\u70df\u3001\u65e0\u54cd\u58f0\u3001\u6cb9\u6e29\u5e73\u9759\u3002 \u6cb9\u6e29\u5728 150\u00b0C-160\u00b0C \u4e4b\u95f4\uff1a\u6700\u4f73\u70f9\u996a\u6e29\u5ea6\uff0c\u628a\u7b77\u5b50\u653e\u5165\u6cb9\u9505\u4e2d\uff0c\u5468\u56f4\u4f1a\u5192\u51fa\u5c11\u8bb8\u6cb9\u6ce1\uff0c\u7565\u6709\u9752\u70df\uff0c\u6cb9\u4ece\u56db\u5468\u5f80\u4e2d\u95f4\u7ffb\u52a8\u3002 \u6cb9\u6e29\u5728 160\u00b0C-180\u00b0C \u4e4b\u95f4\uff1a\u9002\u5408\u4e0a\u8272\u70b8\u9165\uff0c\u628a\u7b77\u5b50\u653e\u5165\u6cb9\u9505\u4e2d\uff0c\u5927\u91cf\u9752\u70df\u4e0a\u5347\uff0c\u6cb9\u9762\u53cd\u800c\u8f83\u5e73\u9759\u3002 \uff08\u6ce8\uff09 \u6700\u597d\u4e70\u628a\u6cb9\u6e29\u67aa\uff0c\u8c28\u614e\u4f7f\u7528\u6e29\u5ea6\u8ba1\u3002 \u7f51\u7edc\u89c6\u9891\u6559\u7a0b\u4e2d\u6240\u8c13\u7684 \u201c\u51e0\u6210\u6cb9\u6e29\u201d \u6307\u7684\u662f\u76f8\u5bf9\u4e8e\u5341\u6210\u6cb9\u6e29\uff0c\u4e3a 300\u00b0C\u3002","title":"\u6cb9\u6e29\u5224\u65ad\u6280\u5de7"},{"location":"tips/advanced/%E8%BE%85%E6%96%99%E6%8A%80%E5%B7%A7/","text":"\u8f85\u6599\u6280\u5de7 \u8f85\u6599\u7684\u653e\u5165\u987a\u5e8f\u57fa\u672c\u4e3a\u4e0b\uff1a\u5148\u653e\u59dc\u3001\u540e\u653e\u8471\u548c\u849c\u3001\u8fa3\u6912\u3001\u518d\u653e\u5e72\u6599\uff08\u516b\u89d2/\u82b1\u6912/\u9ebb\u6912\uff09\u3001\u518d\u653e\u5e72\u8fa3\u6912\u3002\u4ee5\u4e0a\u6bcf\u4e00\u6b65\u9aa4\u6839\u636e\u6240\u505a\u83dc\u7684\u4e0d\u540c\uff0c\u53ef\u4ee5\u628a\u4e0d\u9700\u8981\u7684\u8f85\u6599\u4ece\u961f\u5217\u4e2d\u88ab\u79fb\u9664\u3002 \u59dc\u7684\u542b\u6c34\u91cf\u662f\u6700\u5927\u7684\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u9700\u8981\u66f4\u591a\u7684\u65f6\u95f4\u5c06\u59dc\u7684\u6c41\u6c34\u7178\u51fa\u3002 \u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f\u8471\u6bb5\uff08\u8471\u6bb5\u6700\u597d\u4f7f\u7528\u83dc\u5200\u62cd\u4e24\u4e0b\uff09\uff0c\u90a3\u4e48\u6211\u63a8\u8350\u4f60\u5148\u653e\u5165\u8471\u6bb5\uff0c\u518d\u653e\u5165\u849c\u788e\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f\u8471\u82b1\uff0c\u90a3\u4e48\u53ef\u4ee5\u5c06\u8fd9\u4e24\u79cd\u8f85\u6599\u4e00\u8d77\u4e0b\u9505\u3002\u6ce8\uff1a\u8471\u6bb5\u4e2d\u7684\u6c41\u6c34\u66f4\u96be\u88ab\u7092\u51fa\u3002 \u5982\u679c\u4f60\u505a\u7684\u662f\u7092\u83dc\uff0c\u90a3\u4e48\u6211\u66f4\u63a8\u8350\u4f60\u5728\u6ca1\u653e\u59dc\u4e4b\u524d\u5148\u653e\u5165\u5e72\u6599\uff0c\u8fd9\u53ef\u4ee5\u8ba9\u6cb9\u53d8\u5f97\u66f4\u6709\u5473\u9053\uff0c\u4ee5\u81f3\u4e8e\u7092\u51fa\u6765\u7684\u83dc\u66f4\u9999\u3002\u4e3a\u4ec0\u4e48\u7096\u83dc\u3001\u7116\u83dc\u4e0d\u8fd9\u6837\u505a\uff0c\u662f\u56e0\u4e3a\u4f60\u53ef\u80fd\u9700\u8981\u7ffb\u7092\u5f88\u591a\u8f85\u6599\uff0c\u4ee5\u81f3\u4e8e\u8f85\u6599\u7ffb\u7092\u65f6\u95f4\u8fc7\u957f\u5bfc\u81f4\u5e72\u6599\u53d8\u9ed1\u3001\u53d8\u82e6\u3002 \u5c06\u5e72\u8fa3\u6912\u653e\u5728\u6700\u540e\u662f\u56e0\u4e3a\u5e72\u8fa3\u6912\u5f88\u5bb9\u6613\u56e0\u4e3a\u9505\u7684\u6e29\u5ea6\u800c\u53d8\u9ed1\uff0c\u5e72\u8fa3\u6912\u7a0d\u5fae\u7ffb\u7092\u51e0\u79d2\u949f\u5373\u53ef\u3002 \u6ce8\uff1a\u4e0d\u8bba\u4f60\u559c\u6b22\u505a\u4ec0\u4e48\u83dc\u7cfb\uff0c\u5c0f\u706b\u5c06\u8fd9\u4e9b\u8f85\u6599\u7092\u81f3\u91d1\u9ec4\uff0c\u90fd\u53ef\u4ee5\u5c06\u6574\u9053\u83dc\u53d8\u5f97\u66f4\u6709\u9999\u5473\uff0c\u8fd9\u662f\u8c03\u6599\u6240\u4e0d\u80fd\u7ed9\u4e88\u7684\u3002 \u653e\u76d0\u65f6\u673a\u4e0e\u76d0\u91cf\u63a7\u5236 \u5feb\u7092\u6599\u7406\u5148\u52a0\u76d0\uff0c\u76d0\u91cf=\u98df\u6750\u603b\u91cd\u91cf x0.9%\uff1b \u8089\u98df\u6599\u7406\u516b\u6210\u719f\u65f6\u52a0\u76d0\uff0c\u76d0\u91cf=\uff08\u98df\u6750\u603b\u91cd\u91cf+30mL \u6c41\u6c34\uff09x(1\uff5e1.2%); \u6c64\u6599\u7406\u6700\u540e\u65f6\u518d\u52a0\u76d0\uff0c\u76d0\u91cf=\u6700\u5f00\u59cb\u7684\u6c34\u91cf x0.8%\u3002 \u4e00\u5929\u7684\u603b\u76d0\u91cf\u4e0d\u5efa\u8bae\u8d85\u8fc7 5g\uff0c\u53c2\u8003 WHO","title":"\u8f85\u6599\u6280\u5de7"},{"location":"tips/advanced/%E8%BE%85%E6%96%99%E6%8A%80%E5%B7%A7/#_1","text":"\u8f85\u6599\u7684\u653e\u5165\u987a\u5e8f\u57fa\u672c\u4e3a\u4e0b\uff1a\u5148\u653e\u59dc\u3001\u540e\u653e\u8471\u548c\u849c\u3001\u8fa3\u6912\u3001\u518d\u653e\u5e72\u6599\uff08\u516b\u89d2/\u82b1\u6912/\u9ebb\u6912\uff09\u3001\u518d\u653e\u5e72\u8fa3\u6912\u3002\u4ee5\u4e0a\u6bcf\u4e00\u6b65\u9aa4\u6839\u636e\u6240\u505a\u83dc\u7684\u4e0d\u540c\uff0c\u53ef\u4ee5\u628a\u4e0d\u9700\u8981\u7684\u8f85\u6599\u4ece\u961f\u5217\u4e2d\u88ab\u79fb\u9664\u3002 \u59dc\u7684\u542b\u6c34\u91cf\u662f\u6700\u5927\u7684\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u9700\u8981\u66f4\u591a\u7684\u65f6\u95f4\u5c06\u59dc\u7684\u6c41\u6c34\u7178\u51fa\u3002 \u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f\u8471\u6bb5\uff08\u8471\u6bb5\u6700\u597d\u4f7f\u7528\u83dc\u5200\u62cd\u4e24\u4e0b\uff09\uff0c\u90a3\u4e48\u6211\u63a8\u8350\u4f60\u5148\u653e\u5165\u8471\u6bb5\uff0c\u518d\u653e\u5165\u849c\u788e\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f\u8471\u82b1\uff0c\u90a3\u4e48\u53ef\u4ee5\u5c06\u8fd9\u4e24\u79cd\u8f85\u6599\u4e00\u8d77\u4e0b\u9505\u3002\u6ce8\uff1a\u8471\u6bb5\u4e2d\u7684\u6c41\u6c34\u66f4\u96be\u88ab\u7092\u51fa\u3002 \u5982\u679c\u4f60\u505a\u7684\u662f\u7092\u83dc\uff0c\u90a3\u4e48\u6211\u66f4\u63a8\u8350\u4f60\u5728\u6ca1\u653e\u59dc\u4e4b\u524d\u5148\u653e\u5165\u5e72\u6599\uff0c\u8fd9\u53ef\u4ee5\u8ba9\u6cb9\u53d8\u5f97\u66f4\u6709\u5473\u9053\uff0c\u4ee5\u81f3\u4e8e\u7092\u51fa\u6765\u7684\u83dc\u66f4\u9999\u3002\u4e3a\u4ec0\u4e48\u7096\u83dc\u3001\u7116\u83dc\u4e0d\u8fd9\u6837\u505a\uff0c\u662f\u56e0\u4e3a\u4f60\u53ef\u80fd\u9700\u8981\u7ffb\u7092\u5f88\u591a\u8f85\u6599\uff0c\u4ee5\u81f3\u4e8e\u8f85\u6599\u7ffb\u7092\u65f6\u95f4\u8fc7\u957f\u5bfc\u81f4\u5e72\u6599\u53d8\u9ed1\u3001\u53d8\u82e6\u3002 \u5c06\u5e72\u8fa3\u6912\u653e\u5728\u6700\u540e\u662f\u56e0\u4e3a\u5e72\u8fa3\u6912\u5f88\u5bb9\u6613\u56e0\u4e3a\u9505\u7684\u6e29\u5ea6\u800c\u53d8\u9ed1\uff0c\u5e72\u8fa3\u6912\u7a0d\u5fae\u7ffb\u7092\u51e0\u79d2\u949f\u5373\u53ef\u3002 \u6ce8\uff1a\u4e0d\u8bba\u4f60\u559c\u6b22\u505a\u4ec0\u4e48\u83dc\u7cfb\uff0c\u5c0f\u706b\u5c06\u8fd9\u4e9b\u8f85\u6599\u7092\u81f3\u91d1\u9ec4\uff0c\u90fd\u53ef\u4ee5\u5c06\u6574\u9053\u83dc\u53d8\u5f97\u66f4\u6709\u9999\u5473\uff0c\u8fd9\u662f\u8c03\u6599\u6240\u4e0d\u80fd\u7ed9\u4e88\u7684\u3002","title":"\u8f85\u6599\u6280\u5de7"},{"location":"tips/advanced/%E8%BE%85%E6%96%99%E6%8A%80%E5%B7%A7/#_2","text":"\u5feb\u7092\u6599\u7406\u5148\u52a0\u76d0\uff0c\u76d0\u91cf=\u98df\u6750\u603b\u91cd\u91cf x0.9%\uff1b \u8089\u98df\u6599\u7406\u516b\u6210\u719f\u65f6\u52a0\u76d0\uff0c\u76d0\u91cf=\uff08\u98df\u6750\u603b\u91cd\u91cf+30mL \u6c41\u6c34\uff09x(1\uff5e1.2%); \u6c64\u6599\u7406\u6700\u540e\u65f6\u518d\u52a0\u76d0\uff0c\u76d0\u91cf=\u6700\u5f00\u59cb\u7684\u6c34\u91cf x0.8%\u3002 \u4e00\u5929\u7684\u603b\u76d0\u91cf\u4e0d\u5efa\u8bae\u8d85\u8fc7 5g\uff0c\u53c2\u8003 WHO","title":"\u653e\u76d0\u65f6\u673a\u4e0e\u76d0\u91cf\u63a7\u5236"},{"location":"tips/advanced/%E9%AB%98%E7%BA%A7%E4%B8%93%E4%B8%9A%E6%9C%AF%E8%AF%AD/","text":"\u505a\u83dc\u4e13\u4e1a\u672f\u8bed \u505a\u83dc\u548c\u5b66\u4e60\u7f16\u7a0b\u4e00\u6837\uff0c\u9996\u5148\u5f97\u8ba4\u8bc6\u4e13\u4e1a\u672f\u8bed\u5c31\u597d\u6bd4\u5b66\u4e60\u57fa\u7840\u8bed\u6cd5\uff0c\u901a\u8fc7\u672f\u8bed\u4e4b\u95f4\u7684\u7ec4\u5408\u65b9\u80fd\u5b8c\u6210\u4e00\u9053\u83dc\u3002 \u3010\u7092\u3011\u53e4\u5199\u4f5c\u201c\u717c(ch\u01ceo)\u201d\uff0c\u662f\u76ee\u524d\u6700\u57fa\u672c\u7684\u70f9\u8c03\u65b9\u6cd5\u4e4b\u4e00\uff1b\u5373\u5c06\u98df\u7269\u5207\u6210\u5c0f\u4ef6\uff0c\u8fde\u540c\u8c03\u5473\u6599\u653e\u5165\u70e7\u731b\u6cb9\u7684\u94c1\u956c(hu\u00f2)\uff08\u9505\uff09\u4e2d\u8fc5\u901f\u7ffb\u6405\u81f4\u719f\u7684\u624b\u6cd5\u3002 \u3010\u709d\u3011\u98df\u7269\u5207\u597d\u540e\uff0c\u7ecf\u6cb8\u6c34\u6216\u70ed\u6cb9\u7684\u201c\u707c\u201d\u6216\u201c\u6ce1\u201d\u7b49\u5904\u7406\u540e\uff0c\u518d\u5728\u70e7\u956c\uff08\u9505\uff09\u4e2d\u7206\u5165\u5e72\u8fa3\u6912\u548c\u82b1\u6912\u6cb9\u62cc\u5300\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u708a\u3011\u5373\u5229\u7528\u84b8\u3001\u716e\u7b49\u5c06\u98df\u7269\u81f4\u719f\u7684\u65b9\u6cd5\u3002\u591a\u89c1\u51a0\u540d\u5728\u6f6e\u5dde\u83dc\u4e2d\u3002 \u3010\u716e\u3011\u6700\u7b80\u5355\u7684\u70f9\u8c03\u65b9\u6cd5\u4e4b\u4e00\uff1b\u5728\u956c\uff08\u9505\uff09\u4e2d\u7528\u9002\u91cf\u7684\u6cb8\u6c34\u6216\u6c64\u6c34\u4ee5\u53ca\u8c03\u5473\u6599\u5c06\u98df\u7269\u81f4\u719f\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u714e\u3011\u70e7\u70ed\u94c1\u956c\uff08\u9505\uff09\uff0c\u653e\u5165\u5c11\u8bb8\u751f\u6cb9\uff0c\u7136\u540e\u5c06\u98df\u7269\u5e73\u6ee9\u7d27\u8d34\u5728\u956c\u4e2d\uff0c\u5229\u7528\u6162\u706b\u70ed\u6cb9\u4f7f\u98df\u7269\u7684\u8868\u9762\u5448\u91d1\u9ec4\u8272\u53ca\u81f4\u719f\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u7206\u3011\u5229\u7528\u70ed\u956c\uff08\u9505\uff09\u70ed\u6cb9\uff0c\u6512\u5165\u9002\u91cf\u8c03\u597d\u7684\u6c41\u9171\u6216\u6c64\u6c34\uff0c\u4f7f\u956c\u4e2d\u7684\u5c0f\u4ef6\u98df\u7269\u5feb\u901f\u81f4\u719f\u53c8\u8d4b\u5165\u9999\u6c14\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u70b8(zh\u00e0)\u3011\u53e4\u5199\u4f5c\u201c\u7160(zh\u00e1)\u201d\uff0c\u6700\u5e38\u7528\u7684\u70f9\u8c03\u65b9\u6cd5\u4e4b\u4e00\uff1b\u6307\u5c06\u98df\u7269\u653e\u5165\u5927\u91cf\u7684\u70ed\u6cb9\u4e2d\u81f4\u719f\u81f3\u8106\u7684\u70f9\u8c03\u624b\u6cd5\u3002 \u3010\u70da(xi\u00e1)\u3011\u53e4\u5199\u4f5c\u201c\u7160\u201d\uff0c\u5229\u7528\u5927\u91cf\u7684\u6cb8\u6c34\u5c06\u8089\u8d28\u8f83\u97e7\u7684\u98df\u7269\u5728\u7089\u706b\u4e0a\u708a\u8f6f\u708a\u719f\u7684\u52a0\u5de5\u65b9\u6cd5\u3002 \u3010\u6eda\u3011\u5229\u7528\u5927\u91cf\u7684\u6cb8\u6c34\u7684\u6d8c\u52a8\u5c06\u98df\u7269\u7ab3(y\u01d4)\u5473\u5e26\u51fa\u7684\u52a0\u5de5\u65b9\u6cd5\u3002 \u3010\u6c3d(t\u01d4n)\u3011\u5317\u65b9\u70f9\u8c03\u672f\u8bed\uff0c\u53e4\u4e3a\u201c\u5ddd\u201d\uff1b\u8fd1\u4e4e\u7ca4\u83dc\u7684\u201c\u6e0c(l\u00f9)\u201d\uff0c\u5373\u5c06\u52a0\u5de5\u6210\u4e38\u72b6\u6216\u7247\u72b6\u7684\u98df\u7269\u5728\u6cb8\u6c34\u4e2d\u81f4\u719f\u540e\uff0c\u635e\u8d77\u5165\u7897\u4e2d\uff0c\u518d\u6dfb\u5165\u6cb8\u6c64\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u707c(zhu\u00f3)\u3011\u5317\u65b9\u5199\u4f5c\u201c\u712f(ch\u0101o)\u201d\uff1b\u662f\u6307\u98df\u7269\u5207\u6210\u8584\u7247\u7b49\uff0c\u5229\u7528\u6cb8\u6c34\u8fc5\u901f\u81f3\u719f\u518d\u8638(zh\u00e0n)\u4e0a\u9171\u6599\u800c\u5403\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u709f(d\u00e1)\u3011\u5c06\u852c\u83dc\u653e\u5165\u6dfb\u6709\u67a7(ji\u01cen)\u6c34\u6216\u751f\u6cb9\u7684\u6cb8\u4e2d\u7528\u6162\u706b\u716e\u900f\uff0c\u4f7f\u6210\u54c1\u8f6f\u5e76\u4fdd\u6301\u7fe0\u7eff\u7684\u52a0\u5de5\u65b9\u6cd5\u3002 \u3010\u6dae(shu\u00e0n)\u3011\u5317\u65b9\u70f9\u8c03\u672f\u8bed\uff1b\u5c06\u5207\u6210\u8584\u7247\u7684\u98df\u7269\u653e\u5165\u8fa3\u6c64\u4e2d\u81f4\u719f\u518d\u8638\u4e0a\u9171\u6599\u800c\u5403\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u7140(ku\u00f2)\u3011\u53e4\u65f6\u5199\u4f5c\u201c\u7229(y\u00f9)\u201d\uff1b\u6307\u5c06\u98df\u7269\u76f4\u63a5\u653e\u5165\u956c\uff08\u9505\uff09\u4e2d\u6216\u74e6\u7f49\uff08\u7172\uff09\u4e2d\uff0c\u52a0\u5165\u5927\u91cf\u59dc\u8471\u7b49\u9999\u6599\u6599\u5934\uff0c\u76d6\u4e0a\u76d6\uff0c\u5229\u7528\u5927\u91cf\u7684\u9999\u6599\u6599\u5934\u81f3\u9999\u53ca\u8fbe\u5230\u6210\u719f\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u7117(j\u00fa)\u3011\u5229\u7528\u707c\u70ed\u7684\u7c97\u76d0\u7b49\u5c06\u7528\u9521\u7eb8\u6216\u7389\u6263\u7eb8\u7b49\u5305\u5c01\u597d\u7684\u98df\u7269\u5728\u5bc6\u5c01\u7684\u6761\u4ef6\u4e0b\u81f4\u719f\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u7116(m\u00e8n)\u3011\u5317\u65b9\u70f9\u8c03\u6cd5\uff1b\u6307\u8d28\u97e7\u7684\u98df\u7269\u653e\u5165\u956c\uff08\u9505\uff09\u4e2d\uff0c\u52a0\u5165\u9002\u91cf\u7684\u6c64\u6c34\uff0c\u76d6\u4e0a\u76d6\u5e76\u5229\u7528\u6587\u706b\u708a\u8f6f\u53ca\u81f4\u719f\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u7086(w\u00e9n)\u3011\u8fd1\u4e4e\u5317\u65b9\u70f9\u8c03\u6cd5\u7684\u201c\u70e7\u201d\uff0c\u6545\u6709\u201c\u5357\u7086\u5317\u70e7\u201d\u4e4b\u8bf4\uff1b\u6307\u8d28\u97e7\u7684\u98df\u7269\u653e\u5165\u956c\uff08\u9505\uff09\u4e2d\uff0c\u52a0\u5165\u9002\u91cf\u7684\u6c64\u6c34\uff0c\u5229\u7528\u6587\u706b\u708a\u8f6f\u53ca\u81f4\u719f\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u70e9(hu\u00ec)\u3011\u7528\u9002\u91cf\u7684\u6c64\u6c34\u5c06\u591a\u79cd\u8089\u6599\u548c\u852c\u83dc\u4e00\u540c\u708a\u716e\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u84b8\u3011\u5229\u7528\u6c34\u84b8\u6c7d\u7684\u70ed\u529b\u4f7f\u98df\u7269\u81f4\u719f\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u7096(d\u00f9n)\u3011\u98df\u7269\u52a0\u5165\u6e05\u6c34\u6216\u6c64\u6c34\uff0c\u653e\u5165\u6709\u76d6\u7684\u5bb9\u5668\u4e2d\uff0c\u76d6\u76d6\uff0c\u518d\u5229\u7528\u6c34\u84b8\u6c7d\u7684\u70ed\u529b\u81f4\u719f\u5e76\u5f97\u51fa\u6c64\u6c34\u7684\u70f9\u8c03\u65b9\u6cd5\u3002\u5317\u65b9\u83dc\u7cfb\u662f\u6307\u7528\u5927\u91cf\u6c64\u6c34\u53ca\u6587\u706b\u5c06\u98df\u7269\u708a\u8f6f\u708a\u719f\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u6263\u3011\u98df\u7269\u7ecf\u8c03\u5473\u53ca\u9884\u52a0\u5de5\u540e\uff0c\u6574\u9f50\u6392\u653e\u5165\u6263\u7897\u4e4b\u4e2d\u9694\u6c34\u84b8\u719f\uff0c\u7136\u540e\u4e3b\u6599\u8986\u6263\u5165\u789f\u4e2d\u518d\u6cfc\u4e0a\u7528\u539f\u6c41\u52fe\u597d\u7684\u7409\u7483\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u7172(b\u0101o)\u3011\u5c06\u98df\u7269\u653e\u5165\u5927\u91cf\u7684\u6e05\u6c34\uff0c\u7f6e\u5728\u7089\u706b\u4e0a\u6162\u706b\u708a\u719f\u5e76\u5f97\u51fa\u6c64\u6c34\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u71ac\u3011\u5229\u7528\u6162\u706b\u957f\u65f6\u95f4\u5730\u5c06\u8089\u6599\u9c9c\u5473\u878d\u5165\u6c64\u6c34\u4e2d\u5e76\u4f7f\u6c64\u6c34\u6d53\u7f29\u7684\u52a0\u5de5\u65b9\u6cd5\u3002 \u3010\u9760(k\u00e0o)\u3011\u5229\u7528\u6d53\u5473\u7684\u539f\u6599\u548c\u9c9c\u6c64\uff0c\u5229\u7528\u6587\u706b\u548c\u901a\u8fc7\u8f83\u957f\u7684\u65f6\u95f4\u5c06\u9c9c\u5473\u8d4b\u5165\u53e6\u4e00\u79cd\u4e4f\u5473\u4e3b\u6599\u4e2d\u7684\u52a0\u5de5\u6216\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u7168(w\u0113i)\u3011\u53e4\u4f5c\u57cb\u5165\u70ad\u7070\u81f3\u719f\u65b9\u6cd5\u3002\u4eca\u6307\u5229\u7528\u59dc\u8471\u548c\u6c64\u6c34\u4f7f\u98df\u7269\u5165\u5473\u53ca\u8f9f\u53bb\u98df\u7269\u672c\u8eab\u7684\u5f02\u5473\u7684\u52a0\u5de5\u65b9\u6cd5\u3002\u5317\u65b9\u83dc\u7cfb\u53c8\u6307\u98df\u7269\u8fde\u540c\u6c64\u6c34\u653e\u5165\u5bc6\u5c01\u7684\u74e6\u575b\u4e2d\uff0c\u5728\u6587\u706b\u4e2d\u81f4\u719f\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u7110(w\u00f9)\u3011\u66ff\u4ee3\u201c\u7168\u201d\u7684\u53e4\u610f\uff0c\u6307\u98df\u7269\u7ecf\u814c\u5236\u540e\uff0c\u7528\u8377\u53f6\u7b49\u5305\u88f9\uff0c\u518d\u7528\u6e7f\u6ce5\u6216\u9762\u56fe\u88f9\u5c01\uff0c\u7f6e\u5165\u70ad\u706b\u4e2d\u81f4\u719f\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u70d8(h\u014dng)\u3011\u70b9\u5fc3\u6216\u98df\u7269\u8c03\u597d\u5473\u6216\u52a0\u5de5\u597d\u540e\u7f6e\u5165\u70d8\u7089\u4e2d\u81f4\u719f\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u7178(bi\u0101n)\u3011\u540c\u714f(b\u00ec)\uff0c\u65e7\u8bb9\u5199\u4f5c\u201c\u97ad\u201d\u6216\u201c\u706b\u4fbf\u201d\uff0c\u8fd1\u4e4e\u201c\u71af(r\u01cen)\u201d\uff0c\u662f\u6307\u5c06\u98df\u7269\u653e\u5165\u70ed\u956c\uff08\u9505\uff09\u4e2d\uff0c\u4e0d\u65ad\u5730\u7ffb\u7092\uff0c\u4f7f\u98df\u7269\u4e2d\u6c34\u5206\u7565\u71af\u5e72\u800c\u8f9f\u9664\u7ab3\u5473\u7684\u52a0\u5de5\u65b9\u6cd5\uff1b\u6216\u7ecf\u6b64\u800c\u6536\u6d53\u9c9c\u5473\u800c\u5403\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u6e9c(li\u016b)\u3011\u5317\u65b9\u70f9\u8c03\u672f\u8bed\uff0c\u8fd1\u4e4e\u7ca4\u83dc\u7684\u201c\u6253\u82a1(qi\u00e0n)\u201d\uff0c\u5373\u9178\u751c\u7684\u6c41\u6c34\u7528\u751f\u7c89\u52fe\u82a1\u4ee4\u9165\u70b8\u8fc7\u7684\u98df\u7269\u6ed1\u5ae9\u53ef\u53e3\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u7fb9(g\u0113ng)\u3011\u53e4\u8001\u7684\u70f9\u8c03\u6cd5\u4e4b\u4e00\uff0c\u662f\u6307\u5207\u5236\u6210\u4e01\u7684\u98df\u7269\u7528\u6cb8\u6c64\u716e\u540e\uff0c\u9664\u9664\u52a0\u5165\u6e7f\u751f\u7c89\uff0c\u4f7f\u6c64\u6c34\u6e9c\u6210\u7cca\u72b6\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u6512(z\u01cen)\u3011\u66fe\u5199\u4f5c\u201c\u6e85\u201d\u6216\u201c\u7052(z\u00e0n)\u201d\u7b49\uff0c\u5206\u201c\u6512\u6cb9\u201d\u6216\u201c\u6512\u9152\u201d\uff1b\u524d\u8005\u662f\u6307\u5c06\u70e7\u6cb8\u7684\u70ed\u6cb9\u6cfc\u6d12\u5728\u84b8\u719f\u7684\u98df\u7269\u4e0a\u4ee5\u8f9f\u8165\u589e\u6ed1\u7684\u624b\u6cd5\uff1b\u540e\u8005\u662f\u6307\u5c06\u7ecd\u9152\u6cfc\u6d12\u5165\u6b63\u5728\u70f9\u716e\u7684\u98df\u7269\u4e0a\uff0c\u4ee4\u98df\u7269\u66f4\u6709\u201c\u956c(hu\u00f2)\u6c14\u201d\u7684\u624b\u6cd5\u3002 \u3010\u70eb\u3011\u6307\u7528\u6cb8\u6c34\u6536\u7d27\u8089\u6599\u8868\u76ae\u7684\u52a0\u5de5\u65b9\u6cd5\u3002\u5317\u65b9\u5e38\u89c1\u662f\u6307\u5c06\u5207\u7247\u3001\u5207\u4ef6\u7684\u539f\u6599\u5728\u6cb8\u6c64\u6216\u8fa3\u6c64\u4e2d\u81f4\u719f\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u70e7\u3011\u53e4\u65f6\u7684\u201c\u7099(zh\u00ec)\u201d\uff0c\u7ca4\u83dc\u662f\u6307\u5c06\u98df\u7269\u653e\u5728\u70ad\u706b\u6216\u660e\u706b\u4e0a\u81f4\u719f\u7684\u70f9\u8c03\u65b9\u6cd5\u3002\u73b0\u5317\u65b9\u83dc\u7cfb\u662f\u6307\u901a\u8fc7\u6162\u706b\u5c06\u6c41\u6c34\u7565\u6536\u5e72\u5e76\u5c06\u98df\u7269\u708a\u719f\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u70e4\u3011\u5317\u65b9\u83dc\u7cfb\u7528\u6765\u66ff\u4ee3\u201c\u70e7\u201d\u7684\u65e7\u610f\uff0c\u6545\u6709\u201c\u5357\u70e7\u5317\u70e4\u201d\u4e4b\u8bf4\u3002\u662f\u6307\u98df\u7269\u7f6e\u5728\u660e\u706b\u4e0a\u81f4\u719f\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u5364(l\u01d4)\u3011\u5229\u7528\u751f\u62bd\u4e0e\u9999\u6599\u836f\u6750\u8c03\u597d\u7684\u201c\u5364\u6c34\u6c41\u201d\u4f7f\u98df\u7269\u81f4\u719f\u6216\u4ee4\u5176\u5165\u5473\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u9171(ji\u00e0ng)\u3011\u5229\u7528\u5927\u91cf\u7684\u6c41\u9171\u6216\u751f\u62bd\u5165\u5473\u6216\u81f4\u719f\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u6d78\u3011\u5229\u7528\u5927\u91cf\u7684\u6cb8\u6c34\u6216\u6c64\u6c34\u4ee5\u201c\u83ca\u82b1\u5fc3\u201d\u4e3a\u5ea6\u7684\u70ed\u529b\u5728\u4e00\u5b9a\u65f6\u95f4\u5185\u5c06\u98df\u7269\u81f4\u719f\u7684\u70f9\u8c03\u65b9\u6cd5\u3002\u7c7b\u4f3c\u5317\u65b9\u7684\u201c\u6c3d(t\u01d4n)\u201d\uff0c\u5373\u7269\u6599\u707c\u719f\u540e\uff0c\u518d\u8200(y\u01ceo)\u5165\u8fc7\u9762\u7684\u6c64\u6c34\u800c\u98df\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u98ce\u3011\u5e38\u5e74\u5c06\u814c\u5236\u597d\u7684\u98df\u7269\u540a\u6302\u5728\u901a\u98ce\u7684\u5730\u65b9\uff0c\u8ba9\u5176\u81ea\u7136\u9634\u5e72\u6216\u98ce\u5e72\u7684\u52a0\u5de5\u65b9\u6cd5\u3002 \u3010\u814a\u3011\u5728\u519c\u5386\u5341\u4e8c\u6708\u524d\u540e\u5c06\u814c\u597d\u7684\u98df\u7269\u540a\u6302\u5728\u901a\u98ce\u7684\u5730\u65b9\uff0c\u8ba9\u5176\u81ea\u7136\u9634\u5e72\u6216\u98ce\u5e72\u7684\u52a0\u5de5\u65b9\u6cd5\u3002 \u3010\u70df\u3011\u8336\u5473\u6216\u9999\u6599\u836f\u6750\u5728\u5bc6\u5c01\u60c5\u51b5\u4e0b\u70b9\u71c3\uff0c\u8ba9\u98df\u7269\u8d4b\u5165\u5176\u9999\u55b7\u70df\u5473\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u718f\u3011\u65e7\u5199\u4f5c\u201c\u718f\u201d\uff0c\u6709\u201c\u5e72\u718f\u201d\u4e0e\u201c\u6e7f\u718f\u201d\u4e4b\u5206\uff0c\u201c\u5e72\u718f\u201d\u7c7b\u4f3c\u201c\u70df\u201d\uff1b\u201c\u6e7f\u718f\u201d\u662f\u98df\u7269\u7528\u9c9c\u82b1\u6216\u7ecd\u9152\u7b49\u8d4b\u5165\u9999\u5473\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u7cdf(z\u0101o)\u3011\u5c06\u98df\u7269\u653e\u5165\u9152\u7cdf\u4e4b\u4e2d\u5165\u5473\u6216\u81f4\u719f\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u9189\u3011\u5229\u7528\u5927\u91cf\u7684\u70e7\u9152\u5165\u5473\u6216\u81f4\u719f\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u7511(z\u00e8ng)\u3011\u53e4\u65f6\u7684\u201c\u84b8\u201d\uff1b\u5c06\u98df\u7269\u65a9\u4ef6\u8c03\u5473\u540e\u653e\u5165\u74e6\u94b5(b\u014d)\u4e4b\u4e2d\uff0c\u518d\u5229\u7528\u8f83\u5f3a\u7684\u84b8\u6c14\u81f4\u719f\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u51bb\u3011\u53c8\u79f0\u201c\u6c34\u6676\u201d\uff0c\u662f\u6307\u5c06\u716e\u70c2\u7684\u98df\u7269\u52a0\u5165\u743c\u8102\u6216\u732a\u76ae\u7b49\u518d\u716e\u6210\u7fb9\uff0c\u7136\u540e\u7f6e\u5165\u51b0\u7bb1\u5f85\u5176\u51b0\u51bb\u51dd\u7ed3\u800c\u5403\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u98de\u6c34\u3011\u5c06\u98df\u7269\u6295\u5165\u6cb8\u6c34\u4e2d\u8fc7\u4e00\u8fc7\u6c34\u81f4\u534a\u719f\u800c\u8fc5\u901f\u635e\u8d77\uff0c\u4e3a\u7ee7\u540e\u7684\u70f9\u8c03\u63d0\u4f9b\u826f\u597d\u524d\u6cbf\u57fa\u7840\u7684\u52a0\u5de5\u65b9\u6cd5\u3002 \u3010\u51b0\u6d78\u3011\u98df\u7269\u5207\u6210\u4e1d\u540e\uff0c\u8fc5\u901f\u6295\u5165\u51b0\u6c34\u4e4b\u4e2d\uff0c\u4ee4\u98df\u7269\u6709\u723d\u8106\u6548\u679c\u7684\u4e00\u79cd\u52a0\u5de5\u70f9\u8c03\u65b9\u6cd5\u3002\u6b64\u6cd5\u6e90\u4e8e\u66f0\u672c\u3002 \u3010\u62e8\u4e1d\u3011\u98df\u7269\u4e0a\u6d46\u6cb9\u70b8\u540e\uff0c\u653e\u5165\u716e\u6eb6\u7684\u7cd6\u6d46\u4e2d\u62cc\u5300\uff0c\u4f7f\u98df\u7269\u5939\u8d77\u65f6\u80fd\u62c9\u51fa\u7ec6\u4e1d\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u6302\u971c\u3011\u98df\u7269\u7ecf\u6cb9\u70b8\u540e\uff0c\u653e\u5165\u716e\u6eb6\u7684\u7cd6\u6d46\u4e2d\u62cc\u5300\u6253\u6563\u6216\u76f4\u63a5\u6d12\u5165\u7cd6\u7c89\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u6912\u76d0\u3011\u98df\u7269\u7ecf\u6cb9\u70b8\u540e\u81f4\u719f\u548c\u5e72\u8eab\u540e\uff0c\u518d\u7528\u4e8b\u5148\u7528\u6912\u7c73\u548c\u7cbe\u76d0\u914d\u597d\u7684\u201c\u6912\u76d0\u201d\u7ffb\u7092\u62cc\u5300\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u6cb9\u6ce1\u3011\u5229\u7528\u5927\u91cf\u7684\u70ed\u6cb9\uff0c\u8fc5\u901f\u5730\u5c06\u98df\u7269\u81f4\u719f\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u8d70\u6cb9\u3011\u53c8\u79f0\u201c\u62d6\u6cb9\u201d\u201c\u8d70\u6cb9\u201d\u201c\u8dd1\u6cb9\u201d\uff1b\u662f\u6307\u5c06\u52a0\u5de5\u597d\u7684\u539f\u6599\u653e\u5165\u6eda\u6cb9\u4e4b\u4e2d\u8fc5\u901f\u62d6\u8fc7\uff0c\u4e3a\u7ee7\u540e\u7684\u70f9\u8c03\u63d0\u4f9b\u524d\u6cbf\u57fa\u7840\u7684\u52a0\u5de5\u65b9\u6cd5\u3002 \u3010\u706b\u7130\u3011\u5c06\u751f\u731b\u65b0\u9c9c\u7684\u6d77\u9c9c\u653e\u5165\u73bb\u7483\u5668\u76bf\u5185\uff0c\u5229\u7528\u70b9\u71c3\u9ad8\u5ea6\u6570\u7684\u767d\u9152\u4ea7\u751f\u7684\u70ed\u529b\u81f4\u719f\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u556b(z\u00e9)\u556b(z\u00e9)\u3011\u98df\u7269\u53ca\u59dc\u8471\u7b49\u653e\u5165\u70e7\u81f4\u6781\u70ed\u7684\u74e6\u7f49\uff08\u7172\uff09\uff0c\u4f7f\u98df\u7269\u53d1\u51fa\u201c\u556b\u556b\u201d\u58f0\u97f3\u548c\u55b7\u51fa\u9999\u6c14\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u4e32\u70e7\u3011\u8089\u6599\u5207\u7247\u814c\u5236\u597d\u540e\uff0c\u7528\u7af9\u7b7e\u4e32\u4e10\uff0c\u653e\u5165\u70ed\u6cb9\u4e2d\u201c\u6ce1\u201d\u800c\u98df\u7684\u70f9\u8c03\u65b9\u6cd5\u3002\u6216\u8089\u6599\u5207\u7247\u540e\uff0c\u7528\u94c1\u948e\u4e32\u8d77\uff0c\u653e\u5165\u70ad\u708e\u4e0a\u70e7\u719f\uff0c\u518d\u6492\u4e0a\u5b5c(z\u012b)\u7136\u7b49\u5473\u6599\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u94c1\u677f\u3011\u539f\u662f\u897f\u5f0f\u70f9\u8c03\u65b9\u6cd5\uff1b\u5373\u6307\u98df\u7269\u201c\u8d70\u6cb9\u201d\u540e\uff0c\u8fde\u540c\u4ee5\u6d0b\u8471\u4e3a\u4e3b\u7684\u9999\u6599\u6599\u5934\u548c\u6c41\u9171\uff0c\u653e\u5165\u70e7\u81f4\u6781\u70ed\u7684\u94c1\u677f\u4e2d\u81f4\u719f\u548c\u81f4\u4ee4\u98df\u7269\u55b7\u9999\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u6851\u62ff\u3011\u53c8\u79f0\u201c\u77f3\u70f9\u201d\u7b49\uff1b\u98df\u7269\u7ecf\u62d6\u6cb9\u540e\uff0c\u6295\u5165\u70e7\u81f3\u707c\u70ed\u7684\u77f3\u5b50\uff08\u591a\u662f\u96e8\u82b1\u77f3\uff09\u4e0a\uff0c\u518d\u6512\u5165\u8c03\u597d\u7684\u6c41\u9171\u6216\u6c64\u6c34\uff0c\u5229\u7528\u84b8\u6c14\u5c06\u98df\u7269\u81f3\u719f\u6216\u55b7\u51fa\u9999\u6c14\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u714e\u5c01\u3011\u5317\u65b9\u53c8\u79f0\u201c\u714e\u70f9\u201d\uff0c\u4e00\u822c\u9002\u5408\u4e8e\u9c7c\u7c7b\u8f83\u591a\uff1b\u5373\u5c06\u9c7c\u7c7b\u7528\u8c03\u5473\u54c1\u814c\u8fc7\u540e\uff0c\u7528\u70ed\u6cb9\u6162\u706b\u714e\u900f\uff0c\u518d\u5c01\u4e0a\u6599\u5934\u82a1(qi\u00e0n)\u4f7f\u900f\u5473\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u7a9d\u8d34\u3011\u5c5e\u201c\u534a\u714e\u70b8\u6cd5\u201d\uff0c\u5373\u5c06\u814c\u8fc7\u7684\u8089\u6599\u4e0a\u597d\u201c\u7a9d\u8d34\u6d46\u201d\u8d34\u5728\u80a5\u8089\u4e0a\uff0c\u5229\u7528\u201c\u731b\u956c\u9634\u6cb9\u201d\u4ee4\u8089\u6599\u4e00\u9762\u9165\u8106\u800c\u4e00\u9762\u8f6f\u6ed1\u7684\u70f9\u8c03\u65b9\u6cd5 \u3002 \u3010\u7a9d\u584c(t\u0101)\u3011\u5c06\u814c\u597d\u7684\u98df\u7269\u4e0a\u597d\u201c\u86cb\u7c89\u6d46\u201d\uff0c\u5229\u7528\u5148\u714e\u540e\u70b8\u7684\u624b\u6cd5\uff0c\u4f7f\u98df\u7269\u714e\u719f\uff0c\u7136\u540e\u518d\u52a0\u5165\u8c03\u597d\u5473\u7684\u9c9c\u6c64\u518d\u716e\u900f\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u8f6f\u714e\u3011\u5c5e\u201c\u534a\u714e\u70b8\u6cd5\u201d\uff0c\u5373\u5c06\u814c\u8fc7\u7684\u8089\u6599\u62cc\u4e0a\u201c\u86cb\u7c89\u6d46\u201d\uff0c\u5229\u7528\u5148\u714e\u540e\u70b8\u7684\u624b\u6cd5\u4f7f\u8089\u6599\u81f4\u719f\uff0c\u7136\u540e\u5207\u4ef6\u6dcb\u4e0a\u9171\u6c41\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u86cb\u714e\u3011\u8089\u6599\u5148\u7528\u201c\u98de\u6c34\u201d\u6216\u201c\u6cb9\u6ce1\u201d\u7684\u65b9\u6cd5\u9884\u719f\uff0c\u518d\u653e\u5165\u8c03\u597d\u5473\u7684\u9e21\u86cb\u6d46\u5185\u62cc\u5300\uff0c\u7136\u540e\u7528\u6587\u706b\u5c06\u8089\u6599\u86cb\u6d46\u5e95\u9762\u714e\u81f3\u91d1\u9ec4\u8272\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u5409\u5217\u3011\u4e3a\u82f1\u6587 CUTLET \u7684\u8bd1\u97f3\uff1b\u5373\u5c06\u98df\u7269\u4e0a\u86cb\u6d46\u540e\uff0c\u7c98\u4e0a\u9762\u5305\u7ce0\uff0c\u518d\u7528\u70ed\u6cb9\u6d78\u70b8\u7684\u70f9\u8c03\u65b9\u6cd5\u3002\u6b64\u505a\u6cd5\u6e90\u4e8e\u897f\u53a8\u3002 \u3010\u9165\u70b8\u3011\u98df\u7269\u7528\u8c03\u5473\u54c1\u814c\u8fc7\u540e\uff0c\u5148\u4e0a\u6e7f\u7c89\u6d46\uff0c\u518d\u62cd\u4e0a\u5e72\u751f\u7c89\uff0c\u518d\u7528\u70ed\u6cb9\u70b8\u719f\uff0c\u7136\u540e\u635e\u5165\u9171\u6c41\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u706b\u9505\u3011\u53c8\u79f0\u201c\u6dae\u9505\u201d\uff0c\u5e7f\u4e1c\u79f0\u201c\u6253\u8fb9\u7089\u201d\uff0c\u5373\u5c06\u65b0\u9c9c\u8089\u6599\u201c\u7247\u201d\u3001\u201c\u5207\u201d\u6210\u8584\u7247\uff0c\u6216\u8089\u6599\u631e\u6210\u4e38\u3001\u7403\u3001\u9985\u7b49\uff0c\u8fde\u540c\u852c\u83dc\u7b49\u9001\u5230\u5ba2\u4eba\u8fb9\uff0c\u8ba9\u5ba2\u4eba\u81ea\u884c\u653e\u5165\u6eda\u6c34\u6216\u6eda\u6c64\u4e2d\u70f9\u719f\u7684\u98df\u6cd5\u3002 \u3010\u6c7d\u9505\u3011\u5c06\u8089\u6599\u814c\u5236\u540e\uff0c\u8fde\u540c\u836f\u6750\uff0c\u653e\u5165\u716e\u6eda\u8c03\u5473\u6c64\u6c34\u7684\u4e00\u79cd\u7279\u5236\u7684\u201c\u6c14\u9505\u201d\u4e2d\uff0c\u7ec6\u71ac\u800c\u98df\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u51c9\u62cc\u3011\u5c06\u719f\u98df\u98df\u7269\u6216\u852c\u679c\u6539\u5207\u597d\u540e\uff0c\u52a0\u5165\u8c03\u5473\u6599\u548c\u62cc\u5747\u5300\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u9c7c\u751f\u3011\u5c06\u65b0\u9c9c\u751f\u731b\u6c34\u4ea7\u53bb\u8840\u540e\uff0c\u6539\u5207\u8584\u7247\uff0c\u62cc\u4e0a\u59dc\u4e1d\u3001\u8471\u4e1d\u3001\u8584\u8106\u3001\u67e0\u6aac\u4e1d\u7b49\uff0c\u518d\u8638\u4e0a\u751f\u62bd\u800c\u5403\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u523a\u8eab\u3011\u539f\u662f\u66f0\u672c\u6599\u7406\u7684\u505a\u6cd5\uff0c\u539f\u6307\u751f\u98df\u8089\u7247\uff0c\u7ecf\u4e2d\u56fd\u83dc\u5f15\u7528\u6307\u5c06\u9c9c\u6d3b\u7684\u6c34\u4ea7\u6216\u6d77\u4ea7\u53bb\u9cde\u51c0\u8840\uff0c\u8584\u5207\u6210\u7247\uff0c\u6ef4\u5165\u67e0\u6aac\u6c41\uff0c\u8638\u4e0a\u66f0\u672c\u82a5(ji\u00e8)\u8fa3\u800c\u5403\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u7af9\u7b52\u3011\u53e4\u79f0\u201c\u71b7(z\u0113ng)\u201d\uff0c\u6307\u7528\u7af9\u7b52\u4e3a\u5668\u76bf\uff0c\u518d\u7ecf\u201c\u70e4\u201d\u201c\u70e7\u201d\u201c\u84b8\u201d\u201c\u7096(d\u00f9n)\u201d\u7b49\u65b9\u6cd5\u5c06\u98df\u7269\u81f4\u719f\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u871c\u6c41\u3011\u6307\u5c06\u767d\u7cd6\u3001\u8702\u871c\u3001\u9ea6\u82bd\u7cd6\u7b49\u5316\u6210\u6d53\u6c41\uff0c\u653e\u5165\u52a0\u5de5\u597d\u7684\u539f\u6599\uff0c\u7ecf\u201c\u71ac\u201d\u3001\u201c\u84b8\u201d\u7b49\u65b9\u6cd5\u4f7f\u8d28\u5730\u8f6f\u7cef(nu\u00f2)\u3001\u751c\u5473\u6e17\u900f\u3001\u6da6\u900f\u7cd6\u6c41\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u712f(ch\u0101o)\u6c34\u3011\u53c8\u79f0\u201c\u51fa\u6c34\u201d\uff0c\u662f\u5c06\u539f\u6599\u7f6e\u4e8e\u5f00\u6c34\u6216\u51b7\u6c34\u9505\u4e2d\u8fdb\u884c\u521d\u6b65\u719f\u5904\u7406\u7684\u4e00\u79cd\u65b9\u6cd5\u3002 \u3010\u8fc7\u6cb9\u3011\u7528\u6cb9\u4e3a\u4f20\u70ed\u4ecb\u8d28\u5bf9\u70f9\u996a\u539f\u6599\u8fdb\u884c\u521d\u6b65\u719f\u5904\u7406\u7684\u65b9\u6cd5\u3002\u5c0f\u578b\u539f\u6599\u4ece\u6e29\u6cb9\u8d70\u8fc7\u53c8\u79f0\u201c\u6ed1\u6cb9\u201d\uff1b\u5927\u578b\u539f\u6599\u4ece\u65fa\u6cb9\u4e2d\u8d70\u8fc7\u53c8\u79f0\u201c\u8d70\u6cb9\u3002 \u3010\u6302\u7cca\u3011\u70f9\u996a\u524d\u5c06\u539f\u6599\u5747\u5300\u88f9\u4e0a\u4e00\u5c42\u7cca\u6db2\u7684\u5de5\u827a\u3002 \u3010\u4e0a\u6d46\u3011\u7528\u6dc0\u7c89\u3001\u9e21\u86cb\u3001\u76d0\u7b49\u4e0e\u539f\u6599\u4e00\u8d77\u8c03\u62cc\uff0c\u4f7f\u539f\u6599\u5916\u5c42\u88f9\u4e0a\u4e00\u5c42\u8584\u8584\u6d46\u6db2\u7684\u5de5\u827a\u3002 \u3010\u4e0a\u52b2\u3011\u5c06\u52a0\u5de5\u6210\u8338(r\u00f3ng)\u6ce5(n\u00ed)\u672b(m\u00f2)\u7684\u52a8\u7269\u6027\u539f\u6599\u52a0\u7cbe\u76d0\u3001\u6c34\u3001\u6dc0\u7c89\u53ca\u5176\u4ed6\u8f85\u6599\u540e\u53cd\u590d\u6405\u62cc\uff0c\u4f7f\u4e4b\u8fbe\u5230\u8272\u6cfd\u53d1\u4eae\u3001\u8089\u8d28\u7ec6\u5ae9\u3001\u5165\u6c34\u4e0d\u6c89\u3001\u4e0d\u6563\u72b6\u6001\u7684\u4e00\u79cd\u52a0\u5de5\u65b9\u6cd5\u3002 \u3010\u52fe(g\u014du)\u82a1\uff08qi\u00e0n)\u3011\u5728\u70f9\u996a\u8fc7\u7a0b\u4e2d\u5411\u9505\u4e2d\u52a0\u5165\u6dc0\u7c89\u6c34\u6eb6\u6db2\uff0c\u4f7f\u83dc\u80b4\u6c64\u6c41\u5177\u6709\u4e00\u5b9a\u6d53\u7a20\u5ea6\u7684\u5de5\u827a\u3002/\u53c8\u79f0\u201c\u7740\u817b\u201d\u3001\u201c\u7740\u82a1\u201d\u3001\u201c\u62e2(l\u01d2ng)\u82a1(qi\u00e0n)\u201d\u3002 \u3010\u6e29\u6cb9\u3011\u4fd7\u79f0\u4e09\u81f3\u56db\u6210\uff0c\u6e29\u5ea6\u4e00\u822c\u5728 70\u2103~100\u2103\u3002 \u3010\u70ed\u6cb9\u3011\u4fd7\u79f0\u4e94\u81f3\u516d\u6210\uff0c\u6e29\u5ea6\u4e00\u822c\u5728 110\u2103~170\u2103\u3002 \u3010\u65fa\u6cb9\u3011\u4fd7\u79f0\u4e03\u81f3\u516b\u6210\uff0c\u6e29\u5ea6\u4e00\u822c\u5728 180\u2103~220\u2103\u3002 \u3010\u6ed1\u9505\u3011\u5c06\u9505\u70e7\u70ed\uff0c\u6dcb\u5c11\u8bb8\u6cb9\u628a\u9505\u6ed1\u904d\uff0c\u518d\u5012\u51fa\u6cb9\u7684\u4e00\u79cd\u65b9\u6cd5\u3002 \u3010\u709d\u9505\u3011\u53c8\u79f0\u201c\u70b8\u9505\u201d\uff0c\u662f\u6307\u5c06\u59dc\u3001\u8471\u3001\u8fa3\u6912\u672b\u6216\u5176\u4ed6\u5e26\u6709\u9999\u5473\u7684\u8c03\u6599\u653e\u5165\u70e7\u70ed\u7684\u5e95\u6cb9,\u9505\u4e2d\u7178\u7092\u51fa\u9999\u5473\uff0c\u518d\u53ca\u65f6\u4e0b\u83dc\u6599\u7684\u4e00\u79cd\u65b9\u6cd5\u3002 \u3010\u9ad8\u6c64\u3011\u53c8\u79f0\u201c\u6e05\u6c64\u201d\u3001\u201c\u4e0a\u6c64\u201d\u3001\u201c\u9876\u6c64\u201d\uff0c\u662f\u6307\u7528\u732a\u9aa8\u3001\u9e21\u9aa8\u3001\u9e2d\u67b6\u3001\u788e\u8089\u5934\u7b49\u539f\u6599\u71ac\u5236\u597d\u7684\u6bdb\u6c64\uff0c\u52a0\u5165\u548c\u6210\u7a00\u7cca\u72b6\u7684\u3001\u672a\u52a0\u76d0\u7684\u9e21\u8338\u6216\u8089\u8338\u5904\u7406\uff0c\u4f7f\u4e4b\u6e05\u6f88\u5982\u6c34\u3001\u5473\u6d53\u800c\u9c9c\u7684\u4e00\u79cd\u6c64\u6599\u3002 \u3010\u5976\u6c64\u3011\u53c8\u79f0\u201c\u767d\u6c64\u201d\uff0c\u539f\u6599\u52a0\u6e05\u6c34\u7168\u5236\u800c\u6210\u7684\u8272\u6cfd\u4e73\u767d\u7684\u6c64\u3002","title":"\u9ad8\u7ea7\u4e13\u4e1a\u672f\u8bed"},{"location":"tips/advanced/%E9%AB%98%E7%BA%A7%E4%B8%93%E4%B8%9A%E6%9C%AF%E8%AF%AD/#_1","text":"\u505a\u83dc\u548c\u5b66\u4e60\u7f16\u7a0b\u4e00\u6837\uff0c\u9996\u5148\u5f97\u8ba4\u8bc6\u4e13\u4e1a\u672f\u8bed\u5c31\u597d\u6bd4\u5b66\u4e60\u57fa\u7840\u8bed\u6cd5\uff0c\u901a\u8fc7\u672f\u8bed\u4e4b\u95f4\u7684\u7ec4\u5408\u65b9\u80fd\u5b8c\u6210\u4e00\u9053\u83dc\u3002 \u3010\u7092\u3011\u53e4\u5199\u4f5c\u201c\u717c(ch\u01ceo)\u201d\uff0c\u662f\u76ee\u524d\u6700\u57fa\u672c\u7684\u70f9\u8c03\u65b9\u6cd5\u4e4b\u4e00\uff1b\u5373\u5c06\u98df\u7269\u5207\u6210\u5c0f\u4ef6\uff0c\u8fde\u540c\u8c03\u5473\u6599\u653e\u5165\u70e7\u731b\u6cb9\u7684\u94c1\u956c(hu\u00f2)\uff08\u9505\uff09\u4e2d\u8fc5\u901f\u7ffb\u6405\u81f4\u719f\u7684\u624b\u6cd5\u3002 \u3010\u709d\u3011\u98df\u7269\u5207\u597d\u540e\uff0c\u7ecf\u6cb8\u6c34\u6216\u70ed\u6cb9\u7684\u201c\u707c\u201d\u6216\u201c\u6ce1\u201d\u7b49\u5904\u7406\u540e\uff0c\u518d\u5728\u70e7\u956c\uff08\u9505\uff09\u4e2d\u7206\u5165\u5e72\u8fa3\u6912\u548c\u82b1\u6912\u6cb9\u62cc\u5300\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u708a\u3011\u5373\u5229\u7528\u84b8\u3001\u716e\u7b49\u5c06\u98df\u7269\u81f4\u719f\u7684\u65b9\u6cd5\u3002\u591a\u89c1\u51a0\u540d\u5728\u6f6e\u5dde\u83dc\u4e2d\u3002 \u3010\u716e\u3011\u6700\u7b80\u5355\u7684\u70f9\u8c03\u65b9\u6cd5\u4e4b\u4e00\uff1b\u5728\u956c\uff08\u9505\uff09\u4e2d\u7528\u9002\u91cf\u7684\u6cb8\u6c34\u6216\u6c64\u6c34\u4ee5\u53ca\u8c03\u5473\u6599\u5c06\u98df\u7269\u81f4\u719f\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u714e\u3011\u70e7\u70ed\u94c1\u956c\uff08\u9505\uff09\uff0c\u653e\u5165\u5c11\u8bb8\u751f\u6cb9\uff0c\u7136\u540e\u5c06\u98df\u7269\u5e73\u6ee9\u7d27\u8d34\u5728\u956c\u4e2d\uff0c\u5229\u7528\u6162\u706b\u70ed\u6cb9\u4f7f\u98df\u7269\u7684\u8868\u9762\u5448\u91d1\u9ec4\u8272\u53ca\u81f4\u719f\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u7206\u3011\u5229\u7528\u70ed\u956c\uff08\u9505\uff09\u70ed\u6cb9\uff0c\u6512\u5165\u9002\u91cf\u8c03\u597d\u7684\u6c41\u9171\u6216\u6c64\u6c34\uff0c\u4f7f\u956c\u4e2d\u7684\u5c0f\u4ef6\u98df\u7269\u5feb\u901f\u81f4\u719f\u53c8\u8d4b\u5165\u9999\u6c14\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u70b8(zh\u00e0)\u3011\u53e4\u5199\u4f5c\u201c\u7160(zh\u00e1)\u201d\uff0c\u6700\u5e38\u7528\u7684\u70f9\u8c03\u65b9\u6cd5\u4e4b\u4e00\uff1b\u6307\u5c06\u98df\u7269\u653e\u5165\u5927\u91cf\u7684\u70ed\u6cb9\u4e2d\u81f4\u719f\u81f3\u8106\u7684\u70f9\u8c03\u624b\u6cd5\u3002 \u3010\u70da(xi\u00e1)\u3011\u53e4\u5199\u4f5c\u201c\u7160\u201d\uff0c\u5229\u7528\u5927\u91cf\u7684\u6cb8\u6c34\u5c06\u8089\u8d28\u8f83\u97e7\u7684\u98df\u7269\u5728\u7089\u706b\u4e0a\u708a\u8f6f\u708a\u719f\u7684\u52a0\u5de5\u65b9\u6cd5\u3002 \u3010\u6eda\u3011\u5229\u7528\u5927\u91cf\u7684\u6cb8\u6c34\u7684\u6d8c\u52a8\u5c06\u98df\u7269\u7ab3(y\u01d4)\u5473\u5e26\u51fa\u7684\u52a0\u5de5\u65b9\u6cd5\u3002 \u3010\u6c3d(t\u01d4n)\u3011\u5317\u65b9\u70f9\u8c03\u672f\u8bed\uff0c\u53e4\u4e3a\u201c\u5ddd\u201d\uff1b\u8fd1\u4e4e\u7ca4\u83dc\u7684\u201c\u6e0c(l\u00f9)\u201d\uff0c\u5373\u5c06\u52a0\u5de5\u6210\u4e38\u72b6\u6216\u7247\u72b6\u7684\u98df\u7269\u5728\u6cb8\u6c34\u4e2d\u81f4\u719f\u540e\uff0c\u635e\u8d77\u5165\u7897\u4e2d\uff0c\u518d\u6dfb\u5165\u6cb8\u6c64\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u707c(zhu\u00f3)\u3011\u5317\u65b9\u5199\u4f5c\u201c\u712f(ch\u0101o)\u201d\uff1b\u662f\u6307\u98df\u7269\u5207\u6210\u8584\u7247\u7b49\uff0c\u5229\u7528\u6cb8\u6c34\u8fc5\u901f\u81f3\u719f\u518d\u8638(zh\u00e0n)\u4e0a\u9171\u6599\u800c\u5403\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u709f(d\u00e1)\u3011\u5c06\u852c\u83dc\u653e\u5165\u6dfb\u6709\u67a7(ji\u01cen)\u6c34\u6216\u751f\u6cb9\u7684\u6cb8\u4e2d\u7528\u6162\u706b\u716e\u900f\uff0c\u4f7f\u6210\u54c1\u8f6f\u5e76\u4fdd\u6301\u7fe0\u7eff\u7684\u52a0\u5de5\u65b9\u6cd5\u3002 \u3010\u6dae(shu\u00e0n)\u3011\u5317\u65b9\u70f9\u8c03\u672f\u8bed\uff1b\u5c06\u5207\u6210\u8584\u7247\u7684\u98df\u7269\u653e\u5165\u8fa3\u6c64\u4e2d\u81f4\u719f\u518d\u8638\u4e0a\u9171\u6599\u800c\u5403\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u7140(ku\u00f2)\u3011\u53e4\u65f6\u5199\u4f5c\u201c\u7229(y\u00f9)\u201d\uff1b\u6307\u5c06\u98df\u7269\u76f4\u63a5\u653e\u5165\u956c\uff08\u9505\uff09\u4e2d\u6216\u74e6\u7f49\uff08\u7172\uff09\u4e2d\uff0c\u52a0\u5165\u5927\u91cf\u59dc\u8471\u7b49\u9999\u6599\u6599\u5934\uff0c\u76d6\u4e0a\u76d6\uff0c\u5229\u7528\u5927\u91cf\u7684\u9999\u6599\u6599\u5934\u81f3\u9999\u53ca\u8fbe\u5230\u6210\u719f\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u7117(j\u00fa)\u3011\u5229\u7528\u707c\u70ed\u7684\u7c97\u76d0\u7b49\u5c06\u7528\u9521\u7eb8\u6216\u7389\u6263\u7eb8\u7b49\u5305\u5c01\u597d\u7684\u98df\u7269\u5728\u5bc6\u5c01\u7684\u6761\u4ef6\u4e0b\u81f4\u719f\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u7116(m\u00e8n)\u3011\u5317\u65b9\u70f9\u8c03\u6cd5\uff1b\u6307\u8d28\u97e7\u7684\u98df\u7269\u653e\u5165\u956c\uff08\u9505\uff09\u4e2d\uff0c\u52a0\u5165\u9002\u91cf\u7684\u6c64\u6c34\uff0c\u76d6\u4e0a\u76d6\u5e76\u5229\u7528\u6587\u706b\u708a\u8f6f\u53ca\u81f4\u719f\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u7086(w\u00e9n)\u3011\u8fd1\u4e4e\u5317\u65b9\u70f9\u8c03\u6cd5\u7684\u201c\u70e7\u201d\uff0c\u6545\u6709\u201c\u5357\u7086\u5317\u70e7\u201d\u4e4b\u8bf4\uff1b\u6307\u8d28\u97e7\u7684\u98df\u7269\u653e\u5165\u956c\uff08\u9505\uff09\u4e2d\uff0c\u52a0\u5165\u9002\u91cf\u7684\u6c64\u6c34\uff0c\u5229\u7528\u6587\u706b\u708a\u8f6f\u53ca\u81f4\u719f\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u70e9(hu\u00ec)\u3011\u7528\u9002\u91cf\u7684\u6c64\u6c34\u5c06\u591a\u79cd\u8089\u6599\u548c\u852c\u83dc\u4e00\u540c\u708a\u716e\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u84b8\u3011\u5229\u7528\u6c34\u84b8\u6c7d\u7684\u70ed\u529b\u4f7f\u98df\u7269\u81f4\u719f\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u7096(d\u00f9n)\u3011\u98df\u7269\u52a0\u5165\u6e05\u6c34\u6216\u6c64\u6c34\uff0c\u653e\u5165\u6709\u76d6\u7684\u5bb9\u5668\u4e2d\uff0c\u76d6\u76d6\uff0c\u518d\u5229\u7528\u6c34\u84b8\u6c7d\u7684\u70ed\u529b\u81f4\u719f\u5e76\u5f97\u51fa\u6c64\u6c34\u7684\u70f9\u8c03\u65b9\u6cd5\u3002\u5317\u65b9\u83dc\u7cfb\u662f\u6307\u7528\u5927\u91cf\u6c64\u6c34\u53ca\u6587\u706b\u5c06\u98df\u7269\u708a\u8f6f\u708a\u719f\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u6263\u3011\u98df\u7269\u7ecf\u8c03\u5473\u53ca\u9884\u52a0\u5de5\u540e\uff0c\u6574\u9f50\u6392\u653e\u5165\u6263\u7897\u4e4b\u4e2d\u9694\u6c34\u84b8\u719f\uff0c\u7136\u540e\u4e3b\u6599\u8986\u6263\u5165\u789f\u4e2d\u518d\u6cfc\u4e0a\u7528\u539f\u6c41\u52fe\u597d\u7684\u7409\u7483\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u7172(b\u0101o)\u3011\u5c06\u98df\u7269\u653e\u5165\u5927\u91cf\u7684\u6e05\u6c34\uff0c\u7f6e\u5728\u7089\u706b\u4e0a\u6162\u706b\u708a\u719f\u5e76\u5f97\u51fa\u6c64\u6c34\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u71ac\u3011\u5229\u7528\u6162\u706b\u957f\u65f6\u95f4\u5730\u5c06\u8089\u6599\u9c9c\u5473\u878d\u5165\u6c64\u6c34\u4e2d\u5e76\u4f7f\u6c64\u6c34\u6d53\u7f29\u7684\u52a0\u5de5\u65b9\u6cd5\u3002 \u3010\u9760(k\u00e0o)\u3011\u5229\u7528\u6d53\u5473\u7684\u539f\u6599\u548c\u9c9c\u6c64\uff0c\u5229\u7528\u6587\u706b\u548c\u901a\u8fc7\u8f83\u957f\u7684\u65f6\u95f4\u5c06\u9c9c\u5473\u8d4b\u5165\u53e6\u4e00\u79cd\u4e4f\u5473\u4e3b\u6599\u4e2d\u7684\u52a0\u5de5\u6216\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u7168(w\u0113i)\u3011\u53e4\u4f5c\u57cb\u5165\u70ad\u7070\u81f3\u719f\u65b9\u6cd5\u3002\u4eca\u6307\u5229\u7528\u59dc\u8471\u548c\u6c64\u6c34\u4f7f\u98df\u7269\u5165\u5473\u53ca\u8f9f\u53bb\u98df\u7269\u672c\u8eab\u7684\u5f02\u5473\u7684\u52a0\u5de5\u65b9\u6cd5\u3002\u5317\u65b9\u83dc\u7cfb\u53c8\u6307\u98df\u7269\u8fde\u540c\u6c64\u6c34\u653e\u5165\u5bc6\u5c01\u7684\u74e6\u575b\u4e2d\uff0c\u5728\u6587\u706b\u4e2d\u81f4\u719f\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u7110(w\u00f9)\u3011\u66ff\u4ee3\u201c\u7168\u201d\u7684\u53e4\u610f\uff0c\u6307\u98df\u7269\u7ecf\u814c\u5236\u540e\uff0c\u7528\u8377\u53f6\u7b49\u5305\u88f9\uff0c\u518d\u7528\u6e7f\u6ce5\u6216\u9762\u56fe\u88f9\u5c01\uff0c\u7f6e\u5165\u70ad\u706b\u4e2d\u81f4\u719f\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u70d8(h\u014dng)\u3011\u70b9\u5fc3\u6216\u98df\u7269\u8c03\u597d\u5473\u6216\u52a0\u5de5\u597d\u540e\u7f6e\u5165\u70d8\u7089\u4e2d\u81f4\u719f\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u7178(bi\u0101n)\u3011\u540c\u714f(b\u00ec)\uff0c\u65e7\u8bb9\u5199\u4f5c\u201c\u97ad\u201d\u6216\u201c\u706b\u4fbf\u201d\uff0c\u8fd1\u4e4e\u201c\u71af(r\u01cen)\u201d\uff0c\u662f\u6307\u5c06\u98df\u7269\u653e\u5165\u70ed\u956c\uff08\u9505\uff09\u4e2d\uff0c\u4e0d\u65ad\u5730\u7ffb\u7092\uff0c\u4f7f\u98df\u7269\u4e2d\u6c34\u5206\u7565\u71af\u5e72\u800c\u8f9f\u9664\u7ab3\u5473\u7684\u52a0\u5de5\u65b9\u6cd5\uff1b\u6216\u7ecf\u6b64\u800c\u6536\u6d53\u9c9c\u5473\u800c\u5403\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u6e9c(li\u016b)\u3011\u5317\u65b9\u70f9\u8c03\u672f\u8bed\uff0c\u8fd1\u4e4e\u7ca4\u83dc\u7684\u201c\u6253\u82a1(qi\u00e0n)\u201d\uff0c\u5373\u9178\u751c\u7684\u6c41\u6c34\u7528\u751f\u7c89\u52fe\u82a1\u4ee4\u9165\u70b8\u8fc7\u7684\u98df\u7269\u6ed1\u5ae9\u53ef\u53e3\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u7fb9(g\u0113ng)\u3011\u53e4\u8001\u7684\u70f9\u8c03\u6cd5\u4e4b\u4e00\uff0c\u662f\u6307\u5207\u5236\u6210\u4e01\u7684\u98df\u7269\u7528\u6cb8\u6c64\u716e\u540e\uff0c\u9664\u9664\u52a0\u5165\u6e7f\u751f\u7c89\uff0c\u4f7f\u6c64\u6c34\u6e9c\u6210\u7cca\u72b6\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u6512(z\u01cen)\u3011\u66fe\u5199\u4f5c\u201c\u6e85\u201d\u6216\u201c\u7052(z\u00e0n)\u201d\u7b49\uff0c\u5206\u201c\u6512\u6cb9\u201d\u6216\u201c\u6512\u9152\u201d\uff1b\u524d\u8005\u662f\u6307\u5c06\u70e7\u6cb8\u7684\u70ed\u6cb9\u6cfc\u6d12\u5728\u84b8\u719f\u7684\u98df\u7269\u4e0a\u4ee5\u8f9f\u8165\u589e\u6ed1\u7684\u624b\u6cd5\uff1b\u540e\u8005\u662f\u6307\u5c06\u7ecd\u9152\u6cfc\u6d12\u5165\u6b63\u5728\u70f9\u716e\u7684\u98df\u7269\u4e0a\uff0c\u4ee4\u98df\u7269\u66f4\u6709\u201c\u956c(hu\u00f2)\u6c14\u201d\u7684\u624b\u6cd5\u3002 \u3010\u70eb\u3011\u6307\u7528\u6cb8\u6c34\u6536\u7d27\u8089\u6599\u8868\u76ae\u7684\u52a0\u5de5\u65b9\u6cd5\u3002\u5317\u65b9\u5e38\u89c1\u662f\u6307\u5c06\u5207\u7247\u3001\u5207\u4ef6\u7684\u539f\u6599\u5728\u6cb8\u6c64\u6216\u8fa3\u6c64\u4e2d\u81f4\u719f\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u70e7\u3011\u53e4\u65f6\u7684\u201c\u7099(zh\u00ec)\u201d\uff0c\u7ca4\u83dc\u662f\u6307\u5c06\u98df\u7269\u653e\u5728\u70ad\u706b\u6216\u660e\u706b\u4e0a\u81f4\u719f\u7684\u70f9\u8c03\u65b9\u6cd5\u3002\u73b0\u5317\u65b9\u83dc\u7cfb\u662f\u6307\u901a\u8fc7\u6162\u706b\u5c06\u6c41\u6c34\u7565\u6536\u5e72\u5e76\u5c06\u98df\u7269\u708a\u719f\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u70e4\u3011\u5317\u65b9\u83dc\u7cfb\u7528\u6765\u66ff\u4ee3\u201c\u70e7\u201d\u7684\u65e7\u610f\uff0c\u6545\u6709\u201c\u5357\u70e7\u5317\u70e4\u201d\u4e4b\u8bf4\u3002\u662f\u6307\u98df\u7269\u7f6e\u5728\u660e\u706b\u4e0a\u81f4\u719f\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u5364(l\u01d4)\u3011\u5229\u7528\u751f\u62bd\u4e0e\u9999\u6599\u836f\u6750\u8c03\u597d\u7684\u201c\u5364\u6c34\u6c41\u201d\u4f7f\u98df\u7269\u81f4\u719f\u6216\u4ee4\u5176\u5165\u5473\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u9171(ji\u00e0ng)\u3011\u5229\u7528\u5927\u91cf\u7684\u6c41\u9171\u6216\u751f\u62bd\u5165\u5473\u6216\u81f4\u719f\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u6d78\u3011\u5229\u7528\u5927\u91cf\u7684\u6cb8\u6c34\u6216\u6c64\u6c34\u4ee5\u201c\u83ca\u82b1\u5fc3\u201d\u4e3a\u5ea6\u7684\u70ed\u529b\u5728\u4e00\u5b9a\u65f6\u95f4\u5185\u5c06\u98df\u7269\u81f4\u719f\u7684\u70f9\u8c03\u65b9\u6cd5\u3002\u7c7b\u4f3c\u5317\u65b9\u7684\u201c\u6c3d(t\u01d4n)\u201d\uff0c\u5373\u7269\u6599\u707c\u719f\u540e\uff0c\u518d\u8200(y\u01ceo)\u5165\u8fc7\u9762\u7684\u6c64\u6c34\u800c\u98df\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u98ce\u3011\u5e38\u5e74\u5c06\u814c\u5236\u597d\u7684\u98df\u7269\u540a\u6302\u5728\u901a\u98ce\u7684\u5730\u65b9\uff0c\u8ba9\u5176\u81ea\u7136\u9634\u5e72\u6216\u98ce\u5e72\u7684\u52a0\u5de5\u65b9\u6cd5\u3002 \u3010\u814a\u3011\u5728\u519c\u5386\u5341\u4e8c\u6708\u524d\u540e\u5c06\u814c\u597d\u7684\u98df\u7269\u540a\u6302\u5728\u901a\u98ce\u7684\u5730\u65b9\uff0c\u8ba9\u5176\u81ea\u7136\u9634\u5e72\u6216\u98ce\u5e72\u7684\u52a0\u5de5\u65b9\u6cd5\u3002 \u3010\u70df\u3011\u8336\u5473\u6216\u9999\u6599\u836f\u6750\u5728\u5bc6\u5c01\u60c5\u51b5\u4e0b\u70b9\u71c3\uff0c\u8ba9\u98df\u7269\u8d4b\u5165\u5176\u9999\u55b7\u70df\u5473\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u718f\u3011\u65e7\u5199\u4f5c\u201c\u718f\u201d\uff0c\u6709\u201c\u5e72\u718f\u201d\u4e0e\u201c\u6e7f\u718f\u201d\u4e4b\u5206\uff0c\u201c\u5e72\u718f\u201d\u7c7b\u4f3c\u201c\u70df\u201d\uff1b\u201c\u6e7f\u718f\u201d\u662f\u98df\u7269\u7528\u9c9c\u82b1\u6216\u7ecd\u9152\u7b49\u8d4b\u5165\u9999\u5473\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u7cdf(z\u0101o)\u3011\u5c06\u98df\u7269\u653e\u5165\u9152\u7cdf\u4e4b\u4e2d\u5165\u5473\u6216\u81f4\u719f\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u9189\u3011\u5229\u7528\u5927\u91cf\u7684\u70e7\u9152\u5165\u5473\u6216\u81f4\u719f\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u7511(z\u00e8ng)\u3011\u53e4\u65f6\u7684\u201c\u84b8\u201d\uff1b\u5c06\u98df\u7269\u65a9\u4ef6\u8c03\u5473\u540e\u653e\u5165\u74e6\u94b5(b\u014d)\u4e4b\u4e2d\uff0c\u518d\u5229\u7528\u8f83\u5f3a\u7684\u84b8\u6c14\u81f4\u719f\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u51bb\u3011\u53c8\u79f0\u201c\u6c34\u6676\u201d\uff0c\u662f\u6307\u5c06\u716e\u70c2\u7684\u98df\u7269\u52a0\u5165\u743c\u8102\u6216\u732a\u76ae\u7b49\u518d\u716e\u6210\u7fb9\uff0c\u7136\u540e\u7f6e\u5165\u51b0\u7bb1\u5f85\u5176\u51b0\u51bb\u51dd\u7ed3\u800c\u5403\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u98de\u6c34\u3011\u5c06\u98df\u7269\u6295\u5165\u6cb8\u6c34\u4e2d\u8fc7\u4e00\u8fc7\u6c34\u81f4\u534a\u719f\u800c\u8fc5\u901f\u635e\u8d77\uff0c\u4e3a\u7ee7\u540e\u7684\u70f9\u8c03\u63d0\u4f9b\u826f\u597d\u524d\u6cbf\u57fa\u7840\u7684\u52a0\u5de5\u65b9\u6cd5\u3002 \u3010\u51b0\u6d78\u3011\u98df\u7269\u5207\u6210\u4e1d\u540e\uff0c\u8fc5\u901f\u6295\u5165\u51b0\u6c34\u4e4b\u4e2d\uff0c\u4ee4\u98df\u7269\u6709\u723d\u8106\u6548\u679c\u7684\u4e00\u79cd\u52a0\u5de5\u70f9\u8c03\u65b9\u6cd5\u3002\u6b64\u6cd5\u6e90\u4e8e\u66f0\u672c\u3002 \u3010\u62e8\u4e1d\u3011\u98df\u7269\u4e0a\u6d46\u6cb9\u70b8\u540e\uff0c\u653e\u5165\u716e\u6eb6\u7684\u7cd6\u6d46\u4e2d\u62cc\u5300\uff0c\u4f7f\u98df\u7269\u5939\u8d77\u65f6\u80fd\u62c9\u51fa\u7ec6\u4e1d\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u6302\u971c\u3011\u98df\u7269\u7ecf\u6cb9\u70b8\u540e\uff0c\u653e\u5165\u716e\u6eb6\u7684\u7cd6\u6d46\u4e2d\u62cc\u5300\u6253\u6563\u6216\u76f4\u63a5\u6d12\u5165\u7cd6\u7c89\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u6912\u76d0\u3011\u98df\u7269\u7ecf\u6cb9\u70b8\u540e\u81f4\u719f\u548c\u5e72\u8eab\u540e\uff0c\u518d\u7528\u4e8b\u5148\u7528\u6912\u7c73\u548c\u7cbe\u76d0\u914d\u597d\u7684\u201c\u6912\u76d0\u201d\u7ffb\u7092\u62cc\u5300\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u6cb9\u6ce1\u3011\u5229\u7528\u5927\u91cf\u7684\u70ed\u6cb9\uff0c\u8fc5\u901f\u5730\u5c06\u98df\u7269\u81f4\u719f\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u8d70\u6cb9\u3011\u53c8\u79f0\u201c\u62d6\u6cb9\u201d\u201c\u8d70\u6cb9\u201d\u201c\u8dd1\u6cb9\u201d\uff1b\u662f\u6307\u5c06\u52a0\u5de5\u597d\u7684\u539f\u6599\u653e\u5165\u6eda\u6cb9\u4e4b\u4e2d\u8fc5\u901f\u62d6\u8fc7\uff0c\u4e3a\u7ee7\u540e\u7684\u70f9\u8c03\u63d0\u4f9b\u524d\u6cbf\u57fa\u7840\u7684\u52a0\u5de5\u65b9\u6cd5\u3002 \u3010\u706b\u7130\u3011\u5c06\u751f\u731b\u65b0\u9c9c\u7684\u6d77\u9c9c\u653e\u5165\u73bb\u7483\u5668\u76bf\u5185\uff0c\u5229\u7528\u70b9\u71c3\u9ad8\u5ea6\u6570\u7684\u767d\u9152\u4ea7\u751f\u7684\u70ed\u529b\u81f4\u719f\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u556b(z\u00e9)\u556b(z\u00e9)\u3011\u98df\u7269\u53ca\u59dc\u8471\u7b49\u653e\u5165\u70e7\u81f4\u6781\u70ed\u7684\u74e6\u7f49\uff08\u7172\uff09\uff0c\u4f7f\u98df\u7269\u53d1\u51fa\u201c\u556b\u556b\u201d\u58f0\u97f3\u548c\u55b7\u51fa\u9999\u6c14\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u4e32\u70e7\u3011\u8089\u6599\u5207\u7247\u814c\u5236\u597d\u540e\uff0c\u7528\u7af9\u7b7e\u4e32\u4e10\uff0c\u653e\u5165\u70ed\u6cb9\u4e2d\u201c\u6ce1\u201d\u800c\u98df\u7684\u70f9\u8c03\u65b9\u6cd5\u3002\u6216\u8089\u6599\u5207\u7247\u540e\uff0c\u7528\u94c1\u948e\u4e32\u8d77\uff0c\u653e\u5165\u70ad\u708e\u4e0a\u70e7\u719f\uff0c\u518d\u6492\u4e0a\u5b5c(z\u012b)\u7136\u7b49\u5473\u6599\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u94c1\u677f\u3011\u539f\u662f\u897f\u5f0f\u70f9\u8c03\u65b9\u6cd5\uff1b\u5373\u6307\u98df\u7269\u201c\u8d70\u6cb9\u201d\u540e\uff0c\u8fde\u540c\u4ee5\u6d0b\u8471\u4e3a\u4e3b\u7684\u9999\u6599\u6599\u5934\u548c\u6c41\u9171\uff0c\u653e\u5165\u70e7\u81f4\u6781\u70ed\u7684\u94c1\u677f\u4e2d\u81f4\u719f\u548c\u81f4\u4ee4\u98df\u7269\u55b7\u9999\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u6851\u62ff\u3011\u53c8\u79f0\u201c\u77f3\u70f9\u201d\u7b49\uff1b\u98df\u7269\u7ecf\u62d6\u6cb9\u540e\uff0c\u6295\u5165\u70e7\u81f3\u707c\u70ed\u7684\u77f3\u5b50\uff08\u591a\u662f\u96e8\u82b1\u77f3\uff09\u4e0a\uff0c\u518d\u6512\u5165\u8c03\u597d\u7684\u6c41\u9171\u6216\u6c64\u6c34\uff0c\u5229\u7528\u84b8\u6c14\u5c06\u98df\u7269\u81f3\u719f\u6216\u55b7\u51fa\u9999\u6c14\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u714e\u5c01\u3011\u5317\u65b9\u53c8\u79f0\u201c\u714e\u70f9\u201d\uff0c\u4e00\u822c\u9002\u5408\u4e8e\u9c7c\u7c7b\u8f83\u591a\uff1b\u5373\u5c06\u9c7c\u7c7b\u7528\u8c03\u5473\u54c1\u814c\u8fc7\u540e\uff0c\u7528\u70ed\u6cb9\u6162\u706b\u714e\u900f\uff0c\u518d\u5c01\u4e0a\u6599\u5934\u82a1(qi\u00e0n)\u4f7f\u900f\u5473\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u7a9d\u8d34\u3011\u5c5e\u201c\u534a\u714e\u70b8\u6cd5\u201d\uff0c\u5373\u5c06\u814c\u8fc7\u7684\u8089\u6599\u4e0a\u597d\u201c\u7a9d\u8d34\u6d46\u201d\u8d34\u5728\u80a5\u8089\u4e0a\uff0c\u5229\u7528\u201c\u731b\u956c\u9634\u6cb9\u201d\u4ee4\u8089\u6599\u4e00\u9762\u9165\u8106\u800c\u4e00\u9762\u8f6f\u6ed1\u7684\u70f9\u8c03\u65b9\u6cd5 \u3002 \u3010\u7a9d\u584c(t\u0101)\u3011\u5c06\u814c\u597d\u7684\u98df\u7269\u4e0a\u597d\u201c\u86cb\u7c89\u6d46\u201d\uff0c\u5229\u7528\u5148\u714e\u540e\u70b8\u7684\u624b\u6cd5\uff0c\u4f7f\u98df\u7269\u714e\u719f\uff0c\u7136\u540e\u518d\u52a0\u5165\u8c03\u597d\u5473\u7684\u9c9c\u6c64\u518d\u716e\u900f\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u8f6f\u714e\u3011\u5c5e\u201c\u534a\u714e\u70b8\u6cd5\u201d\uff0c\u5373\u5c06\u814c\u8fc7\u7684\u8089\u6599\u62cc\u4e0a\u201c\u86cb\u7c89\u6d46\u201d\uff0c\u5229\u7528\u5148\u714e\u540e\u70b8\u7684\u624b\u6cd5\u4f7f\u8089\u6599\u81f4\u719f\uff0c\u7136\u540e\u5207\u4ef6\u6dcb\u4e0a\u9171\u6c41\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u86cb\u714e\u3011\u8089\u6599\u5148\u7528\u201c\u98de\u6c34\u201d\u6216\u201c\u6cb9\u6ce1\u201d\u7684\u65b9\u6cd5\u9884\u719f\uff0c\u518d\u653e\u5165\u8c03\u597d\u5473\u7684\u9e21\u86cb\u6d46\u5185\u62cc\u5300\uff0c\u7136\u540e\u7528\u6587\u706b\u5c06\u8089\u6599\u86cb\u6d46\u5e95\u9762\u714e\u81f3\u91d1\u9ec4\u8272\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u5409\u5217\u3011\u4e3a\u82f1\u6587 CUTLET \u7684\u8bd1\u97f3\uff1b\u5373\u5c06\u98df\u7269\u4e0a\u86cb\u6d46\u540e\uff0c\u7c98\u4e0a\u9762\u5305\u7ce0\uff0c\u518d\u7528\u70ed\u6cb9\u6d78\u70b8\u7684\u70f9\u8c03\u65b9\u6cd5\u3002\u6b64\u505a\u6cd5\u6e90\u4e8e\u897f\u53a8\u3002 \u3010\u9165\u70b8\u3011\u98df\u7269\u7528\u8c03\u5473\u54c1\u814c\u8fc7\u540e\uff0c\u5148\u4e0a\u6e7f\u7c89\u6d46\uff0c\u518d\u62cd\u4e0a\u5e72\u751f\u7c89\uff0c\u518d\u7528\u70ed\u6cb9\u70b8\u719f\uff0c\u7136\u540e\u635e\u5165\u9171\u6c41\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u706b\u9505\u3011\u53c8\u79f0\u201c\u6dae\u9505\u201d\uff0c\u5e7f\u4e1c\u79f0\u201c\u6253\u8fb9\u7089\u201d\uff0c\u5373\u5c06\u65b0\u9c9c\u8089\u6599\u201c\u7247\u201d\u3001\u201c\u5207\u201d\u6210\u8584\u7247\uff0c\u6216\u8089\u6599\u631e\u6210\u4e38\u3001\u7403\u3001\u9985\u7b49\uff0c\u8fde\u540c\u852c\u83dc\u7b49\u9001\u5230\u5ba2\u4eba\u8fb9\uff0c\u8ba9\u5ba2\u4eba\u81ea\u884c\u653e\u5165\u6eda\u6c34\u6216\u6eda\u6c64\u4e2d\u70f9\u719f\u7684\u98df\u6cd5\u3002 \u3010\u6c7d\u9505\u3011\u5c06\u8089\u6599\u814c\u5236\u540e\uff0c\u8fde\u540c\u836f\u6750\uff0c\u653e\u5165\u716e\u6eda\u8c03\u5473\u6c64\u6c34\u7684\u4e00\u79cd\u7279\u5236\u7684\u201c\u6c14\u9505\u201d\u4e2d\uff0c\u7ec6\u71ac\u800c\u98df\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u51c9\u62cc\u3011\u5c06\u719f\u98df\u98df\u7269\u6216\u852c\u679c\u6539\u5207\u597d\u540e\uff0c\u52a0\u5165\u8c03\u5473\u6599\u548c\u62cc\u5747\u5300\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u9c7c\u751f\u3011\u5c06\u65b0\u9c9c\u751f\u731b\u6c34\u4ea7\u53bb\u8840\u540e\uff0c\u6539\u5207\u8584\u7247\uff0c\u62cc\u4e0a\u59dc\u4e1d\u3001\u8471\u4e1d\u3001\u8584\u8106\u3001\u67e0\u6aac\u4e1d\u7b49\uff0c\u518d\u8638\u4e0a\u751f\u62bd\u800c\u5403\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u523a\u8eab\u3011\u539f\u662f\u66f0\u672c\u6599\u7406\u7684\u505a\u6cd5\uff0c\u539f\u6307\u751f\u98df\u8089\u7247\uff0c\u7ecf\u4e2d\u56fd\u83dc\u5f15\u7528\u6307\u5c06\u9c9c\u6d3b\u7684\u6c34\u4ea7\u6216\u6d77\u4ea7\u53bb\u9cde\u51c0\u8840\uff0c\u8584\u5207\u6210\u7247\uff0c\u6ef4\u5165\u67e0\u6aac\u6c41\uff0c\u8638\u4e0a\u66f0\u672c\u82a5(ji\u00e8)\u8fa3\u800c\u5403\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u7af9\u7b52\u3011\u53e4\u79f0\u201c\u71b7(z\u0113ng)\u201d\uff0c\u6307\u7528\u7af9\u7b52\u4e3a\u5668\u76bf\uff0c\u518d\u7ecf\u201c\u70e4\u201d\u201c\u70e7\u201d\u201c\u84b8\u201d\u201c\u7096(d\u00f9n)\u201d\u7b49\u65b9\u6cd5\u5c06\u98df\u7269\u81f4\u719f\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u871c\u6c41\u3011\u6307\u5c06\u767d\u7cd6\u3001\u8702\u871c\u3001\u9ea6\u82bd\u7cd6\u7b49\u5316\u6210\u6d53\u6c41\uff0c\u653e\u5165\u52a0\u5de5\u597d\u7684\u539f\u6599\uff0c\u7ecf\u201c\u71ac\u201d\u3001\u201c\u84b8\u201d\u7b49\u65b9\u6cd5\u4f7f\u8d28\u5730\u8f6f\u7cef(nu\u00f2)\u3001\u751c\u5473\u6e17\u900f\u3001\u6da6\u900f\u7cd6\u6c41\u7684\u70f9\u8c03\u65b9\u6cd5\u3002 \u3010\u712f(ch\u0101o)\u6c34\u3011\u53c8\u79f0\u201c\u51fa\u6c34\u201d\uff0c\u662f\u5c06\u539f\u6599\u7f6e\u4e8e\u5f00\u6c34\u6216\u51b7\u6c34\u9505\u4e2d\u8fdb\u884c\u521d\u6b65\u719f\u5904\u7406\u7684\u4e00\u79cd\u65b9\u6cd5\u3002 \u3010\u8fc7\u6cb9\u3011\u7528\u6cb9\u4e3a\u4f20\u70ed\u4ecb\u8d28\u5bf9\u70f9\u996a\u539f\u6599\u8fdb\u884c\u521d\u6b65\u719f\u5904\u7406\u7684\u65b9\u6cd5\u3002\u5c0f\u578b\u539f\u6599\u4ece\u6e29\u6cb9\u8d70\u8fc7\u53c8\u79f0\u201c\u6ed1\u6cb9\u201d\uff1b\u5927\u578b\u539f\u6599\u4ece\u65fa\u6cb9\u4e2d\u8d70\u8fc7\u53c8\u79f0\u201c\u8d70\u6cb9\u3002 \u3010\u6302\u7cca\u3011\u70f9\u996a\u524d\u5c06\u539f\u6599\u5747\u5300\u88f9\u4e0a\u4e00\u5c42\u7cca\u6db2\u7684\u5de5\u827a\u3002 \u3010\u4e0a\u6d46\u3011\u7528\u6dc0\u7c89\u3001\u9e21\u86cb\u3001\u76d0\u7b49\u4e0e\u539f\u6599\u4e00\u8d77\u8c03\u62cc\uff0c\u4f7f\u539f\u6599\u5916\u5c42\u88f9\u4e0a\u4e00\u5c42\u8584\u8584\u6d46\u6db2\u7684\u5de5\u827a\u3002 \u3010\u4e0a\u52b2\u3011\u5c06\u52a0\u5de5\u6210\u8338(r\u00f3ng)\u6ce5(n\u00ed)\u672b(m\u00f2)\u7684\u52a8\u7269\u6027\u539f\u6599\u52a0\u7cbe\u76d0\u3001\u6c34\u3001\u6dc0\u7c89\u53ca\u5176\u4ed6\u8f85\u6599\u540e\u53cd\u590d\u6405\u62cc\uff0c\u4f7f\u4e4b\u8fbe\u5230\u8272\u6cfd\u53d1\u4eae\u3001\u8089\u8d28\u7ec6\u5ae9\u3001\u5165\u6c34\u4e0d\u6c89\u3001\u4e0d\u6563\u72b6\u6001\u7684\u4e00\u79cd\u52a0\u5de5\u65b9\u6cd5\u3002 \u3010\u52fe(g\u014du)\u82a1\uff08qi\u00e0n)\u3011\u5728\u70f9\u996a\u8fc7\u7a0b\u4e2d\u5411\u9505\u4e2d\u52a0\u5165\u6dc0\u7c89\u6c34\u6eb6\u6db2\uff0c\u4f7f\u83dc\u80b4\u6c64\u6c41\u5177\u6709\u4e00\u5b9a\u6d53\u7a20\u5ea6\u7684\u5de5\u827a\u3002/\u53c8\u79f0\u201c\u7740\u817b\u201d\u3001\u201c\u7740\u82a1\u201d\u3001\u201c\u62e2(l\u01d2ng)\u82a1(qi\u00e0n)\u201d\u3002 \u3010\u6e29\u6cb9\u3011\u4fd7\u79f0\u4e09\u81f3\u56db\u6210\uff0c\u6e29\u5ea6\u4e00\u822c\u5728 70\u2103~100\u2103\u3002 \u3010\u70ed\u6cb9\u3011\u4fd7\u79f0\u4e94\u81f3\u516d\u6210\uff0c\u6e29\u5ea6\u4e00\u822c\u5728 110\u2103~170\u2103\u3002 \u3010\u65fa\u6cb9\u3011\u4fd7\u79f0\u4e03\u81f3\u516b\u6210\uff0c\u6e29\u5ea6\u4e00\u822c\u5728 180\u2103~220\u2103\u3002 \u3010\u6ed1\u9505\u3011\u5c06\u9505\u70e7\u70ed\uff0c\u6dcb\u5c11\u8bb8\u6cb9\u628a\u9505\u6ed1\u904d\uff0c\u518d\u5012\u51fa\u6cb9\u7684\u4e00\u79cd\u65b9\u6cd5\u3002 \u3010\u709d\u9505\u3011\u53c8\u79f0\u201c\u70b8\u9505\u201d\uff0c\u662f\u6307\u5c06\u59dc\u3001\u8471\u3001\u8fa3\u6912\u672b\u6216\u5176\u4ed6\u5e26\u6709\u9999\u5473\u7684\u8c03\u6599\u653e\u5165\u70e7\u70ed\u7684\u5e95\u6cb9,\u9505\u4e2d\u7178\u7092\u51fa\u9999\u5473\uff0c\u518d\u53ca\u65f6\u4e0b\u83dc\u6599\u7684\u4e00\u79cd\u65b9\u6cd5\u3002 \u3010\u9ad8\u6c64\u3011\u53c8\u79f0\u201c\u6e05\u6c64\u201d\u3001\u201c\u4e0a\u6c64\u201d\u3001\u201c\u9876\u6c64\u201d\uff0c\u662f\u6307\u7528\u732a\u9aa8\u3001\u9e21\u9aa8\u3001\u9e2d\u67b6\u3001\u788e\u8089\u5934\u7b49\u539f\u6599\u71ac\u5236\u597d\u7684\u6bdb\u6c64\uff0c\u52a0\u5165\u548c\u6210\u7a00\u7cca\u72b6\u7684\u3001\u672a\u52a0\u76d0\u7684\u9e21\u8338\u6216\u8089\u8338\u5904\u7406\uff0c\u4f7f\u4e4b\u6e05\u6f88\u5982\u6c34\u3001\u5473\u6d53\u800c\u9c9c\u7684\u4e00\u79cd\u6c64\u6599\u3002 \u3010\u5976\u6c64\u3011\u53c8\u79f0\u201c\u767d\u6c64\u201d\uff0c\u539f\u6599\u52a0\u6e05\u6c34\u7168\u5236\u800c\u6210\u7684\u8272\u6cfd\u4e73\u767d\u7684\u6c64\u3002","title":"\u505a\u83dc\u4e13\u4e1a\u672f\u8bed"},{"location":"tips/learn/%E5%AD%A6%E4%B9%A0%E7%82%92%E4%B8%8E%E7%85%8E/","text":"\u7092/\u714e \u5668\u5177 \u53ef\u4f7f\u7528\u666e\u901a\u91d1\u5c5e\u5236\uff08\u94c1/\u4e0d\u9508\u94a2/\u94dd\uff09\u7092/\u714e\u9505\u6216\u4e0d\u7c98\u9505\u3002 \u6ce8\u610f\u4e8b\u9879 \u4f7f\u7528\u666e\u901a\u9505\u7092\u83dc\u4e0d\u7c98\u7684\u65b9\u6cd5\uff1a \u5148\u7092\u9e21\u86cb\u6cd5 \u4e0d\u7ba1\u4f60\u7092\u4ec0\u4e48\u83dc\u4e4b\u524d\u90fd\u7092\u4e2a\u9e21\u86cb\uff0c\u7092\u5b8c\u4e0d\u5237\u9505\uff0c\u518d\u7092\u4e0b\u4e2a\u83dc\u65f6\u5c31\u4e0d\u7c98\u3002 \u70ed\u9505\u51c9\u6cb9\u6cd5 \u8bb0\u4f4f\u4e00\u5b9a\u8981\u662f\u70ed\u9505\u51c9\u6cb9\uff0c\u9996\u5148\u70ed\u9505 \u5e72\u51c0\u7684\u9505\u4ec0\u4e48\u90fd\u4e0d\u653e\uff0c\u5e72\u70e7\uff0c\u4f7f\u5176\u53d7\u70ed\u5747\u5300\uff0c\u70e7\u70ed \u653e\u5165\u51c9\u6cb9\uff0c\u65cb\u8f6c\u9505\u5b50\uff0c\u4f7f\u6cb9\u6cbe\u6ee1\u6574\u4e2a\u9505\uff08\u53ef\u4ee5\u6765\u56de\u65cb\u8f6c\u4f7f\u5176\u53d7\u70ed\u5747\u5300\uff09 \u770b\u5230\u6709\u6c14\u4f53\u4ece\u9505\u4e2d\u53d1\u51fa\u65f6\uff0c\u5c31\u8868\u793a\u9505\u5b50\u7684\u6cb9\u5df2\u7ecf\u70e7\u70ed\u4e86 \u628a\u6cb9\u5012\u51fa\u6765\uff0c\u5012\u51fa\u6765\u540e\u4e0d\u8981\u5237\u9505 \u53ef\u4ee5\u91cd\u590d\u4e0a\u8ff0\u6b65\u9aa4 2-3 \u904d\u4ee5\u5f97\u5230\u66f4\u597d\u7684\u4e0d\u7c98\u6548\u679c \u6ce8\u610f\uff1a\u5982\u679c\u662f\u71c3\u6c14\uff0c\u53ef\u80fd\u4f1a\u55b7\u706b\uff0c\u6ce8\u610f\u5b89\u5168 \u70ed\u9505\u53cc\u6cb9\u6cd5 \u9996\u5148\u70ed\u9505 \u5e72\u51c0\u7684\u9505\u4ec0\u4e48\u90fd\u4e0d\u653e\uff0c\u5e72\u70e7\uff0c\u4f7f\u5176\u53d7\u70ed\u5747\u5300\uff0c\u70e7\u70ed \u653e\u5165\u201c\u5c11\u91cf\u51c9\u6cb9\u201d\uff0c\u65cb\u8f6c\u9505\u5b50\uff0c\u4f7f\u6cb9\u6cbe\u6ee1\u6574\u4e2a\u9505\uff08\u53ef\u4ee5\u6765\u56de\u65cb\u8f6c\u4f7f\u5176\u53d7\u70ed\u5747\u5300\uff09 \u770b\u5230\u6709\u6c14\u4f53\u4ece\u9505\u4e2d\u53d1\u51fa\u65f6\uff0c\u5c31\u8868\u793a\u9505\u5b50\u7684\u6cb9\u5df2\u7ecf\u70e7\u70ed\u4e86 \u518d\u7ee7\u7eed\u653e\u5165\u51c9\u6cb9\uff0c\u5f00\u59cb\u7092\u83dc \u6ce8\u610f\uff1a\u5982\u679c\u662f\u71c3\u6c14\uff0c\u53ef\u80fd\u4f1a\u55b7\u706b\uff0c\u6ce8\u610f\u5b89\u5168\u3002 \u8865\u5145\uff1a \u76ee\u7684\u662f\u4f7f\u6cb9\u6302\u6ee1\u9505\u5e95\uff0c\u6240\u6709\u5e02\u9762\u4e0a\u7684\u5bb6\u7528\u9505\u90fd\u9002\u7528\uff0c\u6302\u6cb9\u540e\u79d2\u53d8\u4e0d\u7c98\u9505\u3002 \u4f7f\u7528\u4e0d\u7c98\u9505\u714e\u7092\u98df\u7269\u4e0d\u4f1a\u7c98\u9505\u3002\u4e0d\u7c98\u9505\u7684\u529f\u80fd\u6765\u6e90\u4e8e\u5176\u5185\u58c1\u4e0a\u7684\u6d82\u5c42\u3002 \u91d1\u5c5e\u9505\u94f2\u4f1a\u5212\u4f24\u6d82\u5c42\u3002\u4f7f\u7528\u4e0d\u7c98\u9505\u65f6\u5e94\u4f7f\u7528\u6728\u5236\u6216\u7845\u80f6\u9505\u94f2\u4ee5\u907f\u514d\u635f\u574f\u6d82\u5c42\u3002 \u6d41\u7a0b \u5f00\u706b\u2014\u2014\u76f4\u63a5\u5c06\u9505\u5e73\u653e\u4e8e\u706b\u4e0a\uff0c\u70e7\u70ed\u2014\u2014\u5c06\u6cb9\u5012\u5165\u9505\u4e2d\uff0c\u70e7\u70ed\u2014\u2014\u653e\u5165\u83dc\u54c1\uff0c\u7ffb\u7092\u2014\u2014\u51fa\u9505\u524d\u8bb0\u5f97\u653e\u8c03\u6599 \u6ce8\u610f\u4e8b\u9879 \u5224\u65ad\u9505/\u6cb9\u662f\u5426\u70e7\u70ed\u65f6\uff0c\u53ef\u5c06\u624b\u5e73\u653e\u4e8e\u9505\u7684\u4e0a\u65b9\u611f\u53d7\u70ed\u91cf\uff1b\u6cb9\u70ed\u540e\u65b9\u53ef\u653e\u5165\u98df\u6750\u3002 \u5012\u6cb9\u5165\u9505\u524d\uff0c\u52a1\u5fc5\u786e\u8ba4\u9505\u7684\u5185\u90e8\u6ca1\u6709\u6b8b\u4f59\u6c34\u4efd\u3002 \u6c34\u4f1a\u5bfc\u81f4\u70ed\u6cb9\u98de\u6e85\uff0c\u9020\u6210\u5371\u9669\u3002 \u63a5\u4e0a\u6761\uff0c\u98df\u6750\u653e\u5165\u6cb9\u9505\u524d\uff0c\u5e94\u5f53\u6ca5\u5e72\u6c34\u4efd\uff08\u86cb\u6db2\u6ca1\u4e8b\uff09\uff1b\u540c\u7406\uff0c\u4e0d\u53ef\u5c06\u672a\u89e3\u51bb\u7684\u98df\u6750\u653e\u5165\u6cb9\u9505\uff0c\u4ee5\u514d\u51b0\u5316\u540e\u9020\u6210\u5371\u9669\u3002 \u82e5\u6cb9\u9505\u8d77\u706b\uff0c\u5207\u4e0d\u53ef\u5012\u6c34\u706d\u706b \u3002\u8fd9\u6837\u505a\u4f1a\u4f7f\u706b\u52bf\u6269\u5927\u3002\u706b\u521a\u8d77\u65f6\uff0c\u53ef\u8fc5\u901f\u5173\u706b\uff0c\u76d6\u4e0a\u9505\u76d6\u3002","title":"\u5b66\u4e60\u7092\u4e0e\u714e"},{"location":"tips/learn/%E5%AD%A6%E4%B9%A0%E7%82%92%E4%B8%8E%E7%85%8E/#_1","text":"","title":"\u7092/\u714e"},{"location":"tips/learn/%E5%AD%A6%E4%B9%A0%E7%82%92%E4%B8%8E%E7%85%8E/#_2","text":"\u53ef\u4f7f\u7528\u666e\u901a\u91d1\u5c5e\u5236\uff08\u94c1/\u4e0d\u9508\u94a2/\u94dd\uff09\u7092/\u714e\u9505\u6216\u4e0d\u7c98\u9505\u3002","title":"\u5668\u5177"},{"location":"tips/learn/%E5%AD%A6%E4%B9%A0%E7%82%92%E4%B8%8E%E7%85%8E/#_3","text":"\u4f7f\u7528\u666e\u901a\u9505\u7092\u83dc\u4e0d\u7c98\u7684\u65b9\u6cd5\uff1a","title":"\u6ce8\u610f\u4e8b\u9879"},{"location":"tips/learn/%E5%AD%A6%E4%B9%A0%E7%82%92%E4%B8%8E%E7%85%8E/#_4","text":"\u4e0d\u7ba1\u4f60\u7092\u4ec0\u4e48\u83dc\u4e4b\u524d\u90fd\u7092\u4e2a\u9e21\u86cb\uff0c\u7092\u5b8c\u4e0d\u5237\u9505\uff0c\u518d\u7092\u4e0b\u4e2a\u83dc\u65f6\u5c31\u4e0d\u7c98\u3002","title":"\u5148\u7092\u9e21\u86cb\u6cd5"},{"location":"tips/learn/%E5%AD%A6%E4%B9%A0%E7%82%92%E4%B8%8E%E7%85%8E/#_5","text":"\u8bb0\u4f4f\u4e00\u5b9a\u8981\u662f\u70ed\u9505\u51c9\u6cb9\uff0c\u9996\u5148\u70ed\u9505 \u5e72\u51c0\u7684\u9505\u4ec0\u4e48\u90fd\u4e0d\u653e\uff0c\u5e72\u70e7\uff0c\u4f7f\u5176\u53d7\u70ed\u5747\u5300\uff0c\u70e7\u70ed \u653e\u5165\u51c9\u6cb9\uff0c\u65cb\u8f6c\u9505\u5b50\uff0c\u4f7f\u6cb9\u6cbe\u6ee1\u6574\u4e2a\u9505\uff08\u53ef\u4ee5\u6765\u56de\u65cb\u8f6c\u4f7f\u5176\u53d7\u70ed\u5747\u5300\uff09 \u770b\u5230\u6709\u6c14\u4f53\u4ece\u9505\u4e2d\u53d1\u51fa\u65f6\uff0c\u5c31\u8868\u793a\u9505\u5b50\u7684\u6cb9\u5df2\u7ecf\u70e7\u70ed\u4e86 \u628a\u6cb9\u5012\u51fa\u6765\uff0c\u5012\u51fa\u6765\u540e\u4e0d\u8981\u5237\u9505 \u53ef\u4ee5\u91cd\u590d\u4e0a\u8ff0\u6b65\u9aa4 2-3 \u904d\u4ee5\u5f97\u5230\u66f4\u597d\u7684\u4e0d\u7c98\u6548\u679c \u6ce8\u610f\uff1a\u5982\u679c\u662f\u71c3\u6c14\uff0c\u53ef\u80fd\u4f1a\u55b7\u706b\uff0c\u6ce8\u610f\u5b89\u5168","title":"\u70ed\u9505\u51c9\u6cb9\u6cd5"},{"location":"tips/learn/%E5%AD%A6%E4%B9%A0%E7%82%92%E4%B8%8E%E7%85%8E/#_6","text":"\u9996\u5148\u70ed\u9505 \u5e72\u51c0\u7684\u9505\u4ec0\u4e48\u90fd\u4e0d\u653e\uff0c\u5e72\u70e7\uff0c\u4f7f\u5176\u53d7\u70ed\u5747\u5300\uff0c\u70e7\u70ed \u653e\u5165\u201c\u5c11\u91cf\u51c9\u6cb9\u201d\uff0c\u65cb\u8f6c\u9505\u5b50\uff0c\u4f7f\u6cb9\u6cbe\u6ee1\u6574\u4e2a\u9505\uff08\u53ef\u4ee5\u6765\u56de\u65cb\u8f6c\u4f7f\u5176\u53d7\u70ed\u5747\u5300\uff09 \u770b\u5230\u6709\u6c14\u4f53\u4ece\u9505\u4e2d\u53d1\u51fa\u65f6\uff0c\u5c31\u8868\u793a\u9505\u5b50\u7684\u6cb9\u5df2\u7ecf\u70e7\u70ed\u4e86 \u518d\u7ee7\u7eed\u653e\u5165\u51c9\u6cb9\uff0c\u5f00\u59cb\u7092\u83dc \u6ce8\u610f\uff1a\u5982\u679c\u662f\u71c3\u6c14\uff0c\u53ef\u80fd\u4f1a\u55b7\u706b\uff0c\u6ce8\u610f\u5b89\u5168\u3002 \u8865\u5145\uff1a \u76ee\u7684\u662f\u4f7f\u6cb9\u6302\u6ee1\u9505\u5e95\uff0c\u6240\u6709\u5e02\u9762\u4e0a\u7684\u5bb6\u7528\u9505\u90fd\u9002\u7528\uff0c\u6302\u6cb9\u540e\u79d2\u53d8\u4e0d\u7c98\u9505\u3002 \u4f7f\u7528\u4e0d\u7c98\u9505\u714e\u7092\u98df\u7269\u4e0d\u4f1a\u7c98\u9505\u3002\u4e0d\u7c98\u9505\u7684\u529f\u80fd\u6765\u6e90\u4e8e\u5176\u5185\u58c1\u4e0a\u7684\u6d82\u5c42\u3002 \u91d1\u5c5e\u9505\u94f2\u4f1a\u5212\u4f24\u6d82\u5c42\u3002\u4f7f\u7528\u4e0d\u7c98\u9505\u65f6\u5e94\u4f7f\u7528\u6728\u5236\u6216\u7845\u80f6\u9505\u94f2\u4ee5\u907f\u514d\u635f\u574f\u6d82\u5c42\u3002","title":"\u70ed\u9505\u53cc\u6cb9\u6cd5"},{"location":"tips/learn/%E5%AD%A6%E4%B9%A0%E7%82%92%E4%B8%8E%E7%85%8E/#_7","text":"\u5f00\u706b\u2014\u2014\u76f4\u63a5\u5c06\u9505\u5e73\u653e\u4e8e\u706b\u4e0a\uff0c\u70e7\u70ed\u2014\u2014\u5c06\u6cb9\u5012\u5165\u9505\u4e2d\uff0c\u70e7\u70ed\u2014\u2014\u653e\u5165\u83dc\u54c1\uff0c\u7ffb\u7092\u2014\u2014\u51fa\u9505\u524d\u8bb0\u5f97\u653e\u8c03\u6599","title":"\u6d41\u7a0b"},{"location":"tips/learn/%E5%AD%A6%E4%B9%A0%E7%82%92%E4%B8%8E%E7%85%8E/#_8","text":"\u5224\u65ad\u9505/\u6cb9\u662f\u5426\u70e7\u70ed\u65f6\uff0c\u53ef\u5c06\u624b\u5e73\u653e\u4e8e\u9505\u7684\u4e0a\u65b9\u611f\u53d7\u70ed\u91cf\uff1b\u6cb9\u70ed\u540e\u65b9\u53ef\u653e\u5165\u98df\u6750\u3002 \u5012\u6cb9\u5165\u9505\u524d\uff0c\u52a1\u5fc5\u786e\u8ba4\u9505\u7684\u5185\u90e8\u6ca1\u6709\u6b8b\u4f59\u6c34\u4efd\u3002 \u6c34\u4f1a\u5bfc\u81f4\u70ed\u6cb9\u98de\u6e85\uff0c\u9020\u6210\u5371\u9669\u3002 \u63a5\u4e0a\u6761\uff0c\u98df\u6750\u653e\u5165\u6cb9\u9505\u524d\uff0c\u5e94\u5f53\u6ca5\u5e72\u6c34\u4efd\uff08\u86cb\u6db2\u6ca1\u4e8b\uff09\uff1b\u540c\u7406\uff0c\u4e0d\u53ef\u5c06\u672a\u89e3\u51bb\u7684\u98df\u6750\u653e\u5165\u6cb9\u9505\uff0c\u4ee5\u514d\u51b0\u5316\u540e\u9020\u6210\u5371\u9669\u3002 \u82e5\u6cb9\u9505\u8d77\u706b\uff0c\u5207\u4e0d\u53ef\u5012\u6c34\u706d\u706b \u3002\u8fd9\u6837\u505a\u4f1a\u4f7f\u706b\u52bf\u6269\u5927\u3002\u706b\u521a\u8d77\u65f6\uff0c\u53ef\u8fc5\u901f\u5173\u706b\uff0c\u76d6\u4e0a\u9505\u76d6\u3002","title":"\u6ce8\u610f\u4e8b\u9879"},{"location":"tips/learn/%E5%AD%A6%E4%B9%A0%E7%84%AF%E6%B0%B4/","text":"\u712f\u6c34 \u712f\u6c34\u662f\u505a\u996d\u7684\u4e00\u9053\u5de5\u5e8f\uff0c\u8bfb\u4f5c ch\u0101o shu\u01d0\u3002 \u712f\u6c34\u6307\u5c06\u521d\u6b65\u52a0\u5de5\u7684\u539f\u6599\u653e\u5728\u5f00\u6c34\u9505\u4e2d\u52a0\u70ed\u81f3\u534a\u719f\u6216\u5168\u719f\uff0c\u53d6\u51fa\u4ee5\u5907\u8fdb\u4e00\u6b65\u70f9\u8c03\u6216\u8c03\u5473\u3002 \u712f\u6c34\u662f\u70f9\u8c03\u4e2d\u7279\u522b\u662f\u51b7\u62cc\u83dc\u4e0d\u53ef\u7f3a\u5c11\u7684\u4e00\u9053\u5de5\u5e8f\u3002 \u5bf9\u83dc\u80b4\u7684\u8272\u3001\u9999\u3001\u5473\uff0c\u7279\u522b\u662f\u8272\u8d77\u7740\u5173\u952e\u4f5c\u7528\u3002 \u5927\u90e8\u5206\u852c\u83dc\u548c\u5e26\u6709\u8165\u7fb6\u6c14\u5473\u7684\u8089\u7c7b\u539f\u6599\u90fd\u9700\u8981\u712f\u6c34\u3002 \u64cd\u4f5c \u5f00\u6c34\u9505\u712f\u6c34 \u5f00\u6c34\u9505\u712f\u6c34\uff0c\u5c31\u662f\u5c06\u9505\u5185\u7684\u6c34\u52a0\u70ed\uff0c\u7136\u540e\u5c06\u539f\u6599\u4e0b\u9505\u3002\u4e0b\u9505\u540e\u53ca\u65f6\u7ffb\u52a8\uff0c\u65f6\u95f4\u8981\u77ed\uff0c\u4e0d\u8981\u8fc7\u706b\u3002 \u8fd9\u79cd\u65b9\u6cd5\u591a\u7528\u4e8e\u690d\u7269\u6027\u539f\u6599\uff0c\u5982\uff1a\u82b9\u83dc\u3001\u83e0\u83dc\u3001\u83b4\u7b0b\u7b49\u3002 \u712f\u6c34\u65f6\u8981\u7279\u522b\u6ce8\u610f\u706b\u5019\uff0c\u65f6\u95f4\u7a0d\u957f\uff0c\u989c\u8272\u5c31\u4f1a\u53d8\u6de1\uff0c\u800c\u4e14\u4e5f\u4e0d\u8106\u3001\u5ae9\u3002 \u56e0\u6b64\u653e\u5165\u9505\u5185\u540e\uff0c\u6c34\u5fae\u5f00\u65f6\u5373\u53ef\u635e\u51fa\u667e\u51c9\u3002 \u53f6\u7c7b\u852c\u83dc\u539f\u6599\u5e94\u5148\u712f\u6c34\u518d\u5207\u7247\uff0c\u4ee5\u514d\u8425\u517b\u6210\u5206\u635f\u5931\u8fc7\u591a\u3002 \u712f\u6c34\u65f6\u5e94\u6c34\u5bbd\u706b\u65fa\uff0c\u4ee5\u4f7f\u6295\u5165\u539f\u6599\u540e\u80fd\u53ca\u65f6\u5f00\u9505\uff1b\u712f\u5236\u7eff\u53f6\u852c\u83dc\u65f6\uff0c\u5e94\u7565\u6eda\u5373\u635e\u51fa\u3002 \u852c\u83dc\u7c7b\u539f\u6599\u5728\u712f\u6c34\u540e\u5e94\u7acb\u5373\u6295\u51c9\u63a7\u5e72\uff0c\u4ee5\u514d\u56e0\u4f59\u70ed\u800c\u4f7f\u4e4b\u53d8\u9ec4\u3001\u719f\u70c2\u7684\u73b0\u8c61\u53d1\u751f\u3002 \u852c\u83dc\u712f\u6c34\u53ef\u4ee5\u653e\u5165\u9002\u91cf\u8272\u62c9\u6cb9\u5982\u82b1\u751f\u6cb9\u3001\u7389\u7c73\u6cb9\u3001\u5927\u8c46\u6cb9\u4ee5\u4fdd\u6301\u7fe0\u7eff\u3002 \u51b7\u6c34\u9505\u712f\u6c34 \u51b7\u6c34\u9505\u712f\u6c34\u662f\u5c06\u539f\u6599\u4e0e\u51b7\u6c34\u540c\u65f6\u4e0b\u9505\u3002 \u6c34\u8981\u6ca1\u8fc7\u539f\u6599\uff0c\u7136\u540e\u70e7\u5f00\uff0c\u76ee\u7684\u662f\u4f7f\u539f\u6599\u6210\u719f\uff0c\u4fbf\u4e8e\u8fdb\u4e00\u6b65\u52a0\u5de5\u3002 \u571f\u8c46\u3001\u80e1\u841d\u535c\u7b49\u56e0\u4f53\u79ef\u5927\uff0c\u4e0d\u6613\u6210\u719f\uff0c\u9700\u8981\u716e\u7684\u65f6\u95f4\u957f\u4e00\u4e9b\u3002 \u6709\u4e9b\u52a8\u7269\u6027\u539f\u6599\uff0c\u5982\uff1a\u767d\u8089\u3001\u725b\u767e\u9875\u3001\u725b\u809a\u9886\u7b49\uff0c\u4e5f\u662f\u51b7\u6c34\u4e0b\u9505\u52a0\u70ed\u6210\u719f\u540e\u518d\u8fdb\u4e00\u6b65\u52a0\u5de5\u7684\u3002\u6709\u4e9b\u7528\u4e8e\u716e\u6c64\u7684\u52a8\u7269\u6027\u539f\u6599\u4e5f\u8981\u51b7\u6c34\u4e0b\u9505\uff0c\u5728\u52a0\u70ed\u8fc7\u7a0b\u4e2d\u4f7f\u8425\u517b\u7269\u8d28\u9010\u6e10\u6ea2\u51fa\uff0c\u4f7f\u6c64\u5473\u9c9c\u7f8e\uff0c\u5982\u7528\u70ed\u6c34\u9505\uff0c\u5219\u4f1a\u9020\u6210\u86cb\u767d\u8d28\u51dd\u56fa\u3002 \u9505\u5185\u7684\u52a0\u6c34\u91cf\u4e0d\u5b9c\u8fc7\u591a\uff0c\u4ee5\u6df9\u6ca1\u539f\u6599\u4e3a\u5ea6\u3002 \u5728\u9010\u6e10\u52a0\u70ed\u8fc7\u7a0b\u4e2d\uff0c\u5fc5\u987b\u5bf9\u539f\u6599\u52e4\u7ffb\u52a8\uff0c\u4ee5\u4f7f\u539f\u6599\u53d7\u70ed\u5747\u5300\uff0c\u8fbe\u5230\u712f\u6c34\u7684\u76ee\u7684\u3002 \u989d\u5916\u6ce8\u610f\u4e8b\u9879 \u712f\u6c34\u6709\u65f6\u4e5f\u4f1a\u4f7f\u539f\u6599\u5185\u7684\u4e00\u4e9b\u4e0d\u7a33\u5b9a\u3001\u53ef\u6eb6\u6027\u8425\u517b\u7269\u8d28\u6ea2\u51fa\uff0c\u7279\u522b\u662f\u65b0\u9c9c\u852c\u83dc\u4e2d\u7684\u6c34\u6eb6\u6027\u7ef4\u751f\u7d20\u66f4\u5bb9\u6613\u53d7\u5230\u635f\u5931 \u52a8\u7269\u7c7b\u539f\u6599\u4e0e\u690d\u7269\u7c7b\u539f\u6599\u8981\u5206\u522b\u712f\u6c34\uff1b\u8272\u5473\u8f83\u91cd\u7684\u4e0e\u8272\u5473\u8f83\u8f7b\u7684\u8981\u5206\u522b\u712f\u6c34\uff1b\u5757\u72b6\u5927\u7684\u8981\u4e0e\u5757\u72b6\u5c0f\u7684\u5206\u522b\u712f\u6c34\uff0c\u4ee5\u9632\u5f7c\u6b64\u4e32\u5473 \u712f\u5236\u52a8\u7269\u6027\u539f\u6599\u540e\uff0c\u6c64\u6c41\u53ef\u5728\u6487\u6cab\u6f84\u6e05\u540e\u4f5c\u4e3a\u9c9c\u6c64\u4f7f\u7528 \u8089\u7684\u712f\u6c34 \u8089\u7c7b\u539f\u6599\u7ecf\u8fc7\u5f00\u6c34\u712f\u8fc7\u540e\u53d8\u8272\u5373\u53ef\uff0c\u635e\u51fa\u6ca5\u5e72\u6c34\u5206\u540e\u53ef\u4ee5\u8fdb\u884c\u4e0b\u4e00\u6b65\u7684\u70f9\u8c03\u3002 \u8089\u7c7b\u712f\u6c34\u540e\u9700\u8981\u6d17\u53bb\u6cbe\u9644\u7684\u8840\u6cab\u6c61\u6e0d\uff0c\u8bb0\u5f97\u7528\u6e29\u6c34\u6e05\u6d17\uff0c\u5426\u5219\u8089\u70ed\u80c0\u51b7\u7f29\u4f1a\u5438\u9644\u6c61\u6e0d\uff0c\u5bfc\u81f4\u65e0\u6cd5\u6d17\u51c0\u8840\u6cab\u3002 \u9752\u83dc\u7684\u712f\u6c34 \u6d17\u9752\u83dc\u65f6\uff0c\u5728\u6e05\u6c34\u91cc\u6492\u4e00\u4e9b\u76d0\uff0c\u8fd9\u6837\u53ef\u4ee5\u628a\u9752\u83dc\u91cc\u7684\u866b\u5b50\u6e05\u6d17\u51fa\u6765 \u712f\u8fc7\u540e\u7684\u9752\u83dc\u5e94\u7acb\u5373\u6d78\u5165\u51b7\u6c34\u4e2d\uff0c\u4ee5\u4fdd\u6301\u989c\u8272\u548c\u53e3\u611f\u3002\u5982\u679c\u4e0d\u7528\u51b7\u6c34\u6d78\uff0c\u9752\u83dc\u4f1a\u56e0\u4e3a\u5f00\u6c34\u7684\u4f59\u6e29\u53d8\u7684\u4e0d\u518d\u6e05\u8106\uff0c\u800c\u51fa\u73b0\u70c2\u70c2\u7684\u611f\u89c9","title":"\u5b66\u4e60\u712f\u6c34"},{"location":"tips/learn/%E5%AD%A6%E4%B9%A0%E7%84%AF%E6%B0%B4/#_1","text":"\u712f\u6c34\u662f\u505a\u996d\u7684\u4e00\u9053\u5de5\u5e8f\uff0c\u8bfb\u4f5c ch\u0101o shu\u01d0\u3002 \u712f\u6c34\u6307\u5c06\u521d\u6b65\u52a0\u5de5\u7684\u539f\u6599\u653e\u5728\u5f00\u6c34\u9505\u4e2d\u52a0\u70ed\u81f3\u534a\u719f\u6216\u5168\u719f\uff0c\u53d6\u51fa\u4ee5\u5907\u8fdb\u4e00\u6b65\u70f9\u8c03\u6216\u8c03\u5473\u3002 \u712f\u6c34\u662f\u70f9\u8c03\u4e2d\u7279\u522b\u662f\u51b7\u62cc\u83dc\u4e0d\u53ef\u7f3a\u5c11\u7684\u4e00\u9053\u5de5\u5e8f\u3002 \u5bf9\u83dc\u80b4\u7684\u8272\u3001\u9999\u3001\u5473\uff0c\u7279\u522b\u662f\u8272\u8d77\u7740\u5173\u952e\u4f5c\u7528\u3002 \u5927\u90e8\u5206\u852c\u83dc\u548c\u5e26\u6709\u8165\u7fb6\u6c14\u5473\u7684\u8089\u7c7b\u539f\u6599\u90fd\u9700\u8981\u712f\u6c34\u3002","title":"\u712f\u6c34"},{"location":"tips/learn/%E5%AD%A6%E4%B9%A0%E7%84%AF%E6%B0%B4/#_2","text":"","title":"\u64cd\u4f5c"},{"location":"tips/learn/%E5%AD%A6%E4%B9%A0%E7%84%AF%E6%B0%B4/#_3","text":"\u5f00\u6c34\u9505\u712f\u6c34\uff0c\u5c31\u662f\u5c06\u9505\u5185\u7684\u6c34\u52a0\u70ed\uff0c\u7136\u540e\u5c06\u539f\u6599\u4e0b\u9505\u3002\u4e0b\u9505\u540e\u53ca\u65f6\u7ffb\u52a8\uff0c\u65f6\u95f4\u8981\u77ed\uff0c\u4e0d\u8981\u8fc7\u706b\u3002 \u8fd9\u79cd\u65b9\u6cd5\u591a\u7528\u4e8e\u690d\u7269\u6027\u539f\u6599\uff0c\u5982\uff1a\u82b9\u83dc\u3001\u83e0\u83dc\u3001\u83b4\u7b0b\u7b49\u3002 \u712f\u6c34\u65f6\u8981\u7279\u522b\u6ce8\u610f\u706b\u5019\uff0c\u65f6\u95f4\u7a0d\u957f\uff0c\u989c\u8272\u5c31\u4f1a\u53d8\u6de1\uff0c\u800c\u4e14\u4e5f\u4e0d\u8106\u3001\u5ae9\u3002 \u56e0\u6b64\u653e\u5165\u9505\u5185\u540e\uff0c\u6c34\u5fae\u5f00\u65f6\u5373\u53ef\u635e\u51fa\u667e\u51c9\u3002 \u53f6\u7c7b\u852c\u83dc\u539f\u6599\u5e94\u5148\u712f\u6c34\u518d\u5207\u7247\uff0c\u4ee5\u514d\u8425\u517b\u6210\u5206\u635f\u5931\u8fc7\u591a\u3002 \u712f\u6c34\u65f6\u5e94\u6c34\u5bbd\u706b\u65fa\uff0c\u4ee5\u4f7f\u6295\u5165\u539f\u6599\u540e\u80fd\u53ca\u65f6\u5f00\u9505\uff1b\u712f\u5236\u7eff\u53f6\u852c\u83dc\u65f6\uff0c\u5e94\u7565\u6eda\u5373\u635e\u51fa\u3002 \u852c\u83dc\u7c7b\u539f\u6599\u5728\u712f\u6c34\u540e\u5e94\u7acb\u5373\u6295\u51c9\u63a7\u5e72\uff0c\u4ee5\u514d\u56e0\u4f59\u70ed\u800c\u4f7f\u4e4b\u53d8\u9ec4\u3001\u719f\u70c2\u7684\u73b0\u8c61\u53d1\u751f\u3002 \u852c\u83dc\u712f\u6c34\u53ef\u4ee5\u653e\u5165\u9002\u91cf\u8272\u62c9\u6cb9\u5982\u82b1\u751f\u6cb9\u3001\u7389\u7c73\u6cb9\u3001\u5927\u8c46\u6cb9\u4ee5\u4fdd\u6301\u7fe0\u7eff\u3002","title":"\u5f00\u6c34\u9505\u712f\u6c34"},{"location":"tips/learn/%E5%AD%A6%E4%B9%A0%E7%84%AF%E6%B0%B4/#_4","text":"\u51b7\u6c34\u9505\u712f\u6c34\u662f\u5c06\u539f\u6599\u4e0e\u51b7\u6c34\u540c\u65f6\u4e0b\u9505\u3002 \u6c34\u8981\u6ca1\u8fc7\u539f\u6599\uff0c\u7136\u540e\u70e7\u5f00\uff0c\u76ee\u7684\u662f\u4f7f\u539f\u6599\u6210\u719f\uff0c\u4fbf\u4e8e\u8fdb\u4e00\u6b65\u52a0\u5de5\u3002 \u571f\u8c46\u3001\u80e1\u841d\u535c\u7b49\u56e0\u4f53\u79ef\u5927\uff0c\u4e0d\u6613\u6210\u719f\uff0c\u9700\u8981\u716e\u7684\u65f6\u95f4\u957f\u4e00\u4e9b\u3002 \u6709\u4e9b\u52a8\u7269\u6027\u539f\u6599\uff0c\u5982\uff1a\u767d\u8089\u3001\u725b\u767e\u9875\u3001\u725b\u809a\u9886\u7b49\uff0c\u4e5f\u662f\u51b7\u6c34\u4e0b\u9505\u52a0\u70ed\u6210\u719f\u540e\u518d\u8fdb\u4e00\u6b65\u52a0\u5de5\u7684\u3002\u6709\u4e9b\u7528\u4e8e\u716e\u6c64\u7684\u52a8\u7269\u6027\u539f\u6599\u4e5f\u8981\u51b7\u6c34\u4e0b\u9505\uff0c\u5728\u52a0\u70ed\u8fc7\u7a0b\u4e2d\u4f7f\u8425\u517b\u7269\u8d28\u9010\u6e10\u6ea2\u51fa\uff0c\u4f7f\u6c64\u5473\u9c9c\u7f8e\uff0c\u5982\u7528\u70ed\u6c34\u9505\uff0c\u5219\u4f1a\u9020\u6210\u86cb\u767d\u8d28\u51dd\u56fa\u3002 \u9505\u5185\u7684\u52a0\u6c34\u91cf\u4e0d\u5b9c\u8fc7\u591a\uff0c\u4ee5\u6df9\u6ca1\u539f\u6599\u4e3a\u5ea6\u3002 \u5728\u9010\u6e10\u52a0\u70ed\u8fc7\u7a0b\u4e2d\uff0c\u5fc5\u987b\u5bf9\u539f\u6599\u52e4\u7ffb\u52a8\uff0c\u4ee5\u4f7f\u539f\u6599\u53d7\u70ed\u5747\u5300\uff0c\u8fbe\u5230\u712f\u6c34\u7684\u76ee\u7684\u3002","title":"\u51b7\u6c34\u9505\u712f\u6c34"},{"location":"tips/learn/%E5%AD%A6%E4%B9%A0%E7%84%AF%E6%B0%B4/#_5","text":"\u712f\u6c34\u6709\u65f6\u4e5f\u4f1a\u4f7f\u539f\u6599\u5185\u7684\u4e00\u4e9b\u4e0d\u7a33\u5b9a\u3001\u53ef\u6eb6\u6027\u8425\u517b\u7269\u8d28\u6ea2\u51fa\uff0c\u7279\u522b\u662f\u65b0\u9c9c\u852c\u83dc\u4e2d\u7684\u6c34\u6eb6\u6027\u7ef4\u751f\u7d20\u66f4\u5bb9\u6613\u53d7\u5230\u635f\u5931 \u52a8\u7269\u7c7b\u539f\u6599\u4e0e\u690d\u7269\u7c7b\u539f\u6599\u8981\u5206\u522b\u712f\u6c34\uff1b\u8272\u5473\u8f83\u91cd\u7684\u4e0e\u8272\u5473\u8f83\u8f7b\u7684\u8981\u5206\u522b\u712f\u6c34\uff1b\u5757\u72b6\u5927\u7684\u8981\u4e0e\u5757\u72b6\u5c0f\u7684\u5206\u522b\u712f\u6c34\uff0c\u4ee5\u9632\u5f7c\u6b64\u4e32\u5473 \u712f\u5236\u52a8\u7269\u6027\u539f\u6599\u540e\uff0c\u6c64\u6c41\u53ef\u5728\u6487\u6cab\u6f84\u6e05\u540e\u4f5c\u4e3a\u9c9c\u6c64\u4f7f\u7528","title":"\u989d\u5916\u6ce8\u610f\u4e8b\u9879"},{"location":"tips/learn/%E5%AD%A6%E4%B9%A0%E7%84%AF%E6%B0%B4/#_6","text":"\u8089\u7c7b\u539f\u6599\u7ecf\u8fc7\u5f00\u6c34\u712f\u8fc7\u540e\u53d8\u8272\u5373\u53ef\uff0c\u635e\u51fa\u6ca5\u5e72\u6c34\u5206\u540e\u53ef\u4ee5\u8fdb\u884c\u4e0b\u4e00\u6b65\u7684\u70f9\u8c03\u3002 \u8089\u7c7b\u712f\u6c34\u540e\u9700\u8981\u6d17\u53bb\u6cbe\u9644\u7684\u8840\u6cab\u6c61\u6e0d\uff0c\u8bb0\u5f97\u7528\u6e29\u6c34\u6e05\u6d17\uff0c\u5426\u5219\u8089\u70ed\u80c0\u51b7\u7f29\u4f1a\u5438\u9644\u6c61\u6e0d\uff0c\u5bfc\u81f4\u65e0\u6cd5\u6d17\u51c0\u8840\u6cab\u3002","title":"\u8089\u7684\u712f\u6c34"},{"location":"tips/learn/%E5%AD%A6%E4%B9%A0%E7%84%AF%E6%B0%B4/#_7","text":"\u6d17\u9752\u83dc\u65f6\uff0c\u5728\u6e05\u6c34\u91cc\u6492\u4e00\u4e9b\u76d0\uff0c\u8fd9\u6837\u53ef\u4ee5\u628a\u9752\u83dc\u91cc\u7684\u866b\u5b50\u6e05\u6d17\u51fa\u6765 \u712f\u8fc7\u540e\u7684\u9752\u83dc\u5e94\u7acb\u5373\u6d78\u5165\u51b7\u6c34\u4e2d\uff0c\u4ee5\u4fdd\u6301\u989c\u8272\u548c\u53e3\u611f\u3002\u5982\u679c\u4e0d\u7528\u51b7\u6c34\u6d78\uff0c\u9752\u83dc\u4f1a\u56e0\u4e3a\u5f00\u6c34\u7684\u4f59\u6e29\u53d8\u7684\u4e0d\u518d\u6e05\u8106\uff0c\u800c\u51fa\u73b0\u70c2\u70c2\u7684\u611f\u89c9","title":"\u9752\u83dc\u7684\u712f\u6c34"},{"location":"tips/learn/%E5%AD%A6%E4%B9%A0%E7%85%AE/","text":"\u716e \u6d41\u7a0b \u5012\u6c34\u5165\u9505\u2014\u2014\u5f00\u706b\uff0c\u5c06\u9505\u653e\u4e8e\u706b\u4e0a\u52a0\u70ed\u2014\u2014\u6c34\u5f00\uff08\u6c34\u7ffb\u6eda\uff0c\u6709\u5927\u91cf\u6c14\u6ce1\u5192\u51fa\uff09\u540e\u653e\u5165\u98df\u6750 \u6ce8\u610f\u4e8b\u9879 \u52a0\u70ed\u65f6\u76d6\u4e0a\u9505\u76d6\u53ef\u4ee5\u52a0\u5feb\u53d7\u70ed\u3002 \u4f46\u8fd9\u6837\u505a\u6709\u6ea2\u9505\u7684\u98ce\u9669 \u3002\u6301\u7eed\u52a0\u70ed\u540e\uff0c\u8fc7\u6e21\u7ffb\u817e\u7684\u6d41\u4f53\u53ef\u80fd\u4f1a\u5192\u51fa\u9505\u5916\uff0c\u8fd9\u5c31\u662f\u6ea2\u9505\u3002 \u82e5\u5373\u5c06\u6ea2\u9505\uff0c\u7acb\u523b\u5173\u5c0f\u706b\u5e76\u6253\u5f00\u9505\u76d6\u5373\u53ef\u3002 \u60f3\u8981\u52a0\u5feb\u53d7\u70ed\u53c8\u907f\u514d\u6ea2\u9505\uff0c\u53ef\u4ee5\u534a\u5f00\u9505\u76d6\uff0c\u7559\u51fa\u6c14\u4f53\u51fa\u53e3\uff1b\u4e5f\u53ef\u5728\u540e\u671f\u5173\u5c0f\u706b\uff0c\u5e76\u65f6\u65f6\u6ce8\u610f\u9505\u4e2d\u60c5\u51b5\u3002 \u6839\u636e\u70f9\u996a\u9700\u8981\uff0c\u98df\u6750\u4e5f\u53ef\u51b7\u6c34\u4e0b\u9505\u3002\u4e0d\u8fc7\u8fd9\u6837\u6c34\u70e7\u5f00\u9700\u8981\u7684\u65f6\u95f4\u66f4\u4e45\u3002","title":"\u5b66\u4e60\u716e"},{"location":"tips/learn/%E5%AD%A6%E4%B9%A0%E7%85%AE/#_1","text":"","title":"\u716e"},{"location":"tips/learn/%E5%AD%A6%E4%B9%A0%E7%85%AE/#_2","text":"\u5012\u6c34\u5165\u9505\u2014\u2014\u5f00\u706b\uff0c\u5c06\u9505\u653e\u4e8e\u706b\u4e0a\u52a0\u70ed\u2014\u2014\u6c34\u5f00\uff08\u6c34\u7ffb\u6eda\uff0c\u6709\u5927\u91cf\u6c14\u6ce1\u5192\u51fa\uff09\u540e\u653e\u5165\u98df\u6750","title":"\u6d41\u7a0b"},{"location":"tips/learn/%E5%AD%A6%E4%B9%A0%E7%85%AE/#_3","text":"\u52a0\u70ed\u65f6\u76d6\u4e0a\u9505\u76d6\u53ef\u4ee5\u52a0\u5feb\u53d7\u70ed\u3002 \u4f46\u8fd9\u6837\u505a\u6709\u6ea2\u9505\u7684\u98ce\u9669 \u3002\u6301\u7eed\u52a0\u70ed\u540e\uff0c\u8fc7\u6e21\u7ffb\u817e\u7684\u6d41\u4f53\u53ef\u80fd\u4f1a\u5192\u51fa\u9505\u5916\uff0c\u8fd9\u5c31\u662f\u6ea2\u9505\u3002 \u82e5\u5373\u5c06\u6ea2\u9505\uff0c\u7acb\u523b\u5173\u5c0f\u706b\u5e76\u6253\u5f00\u9505\u76d6\u5373\u53ef\u3002 \u60f3\u8981\u52a0\u5feb\u53d7\u70ed\u53c8\u907f\u514d\u6ea2\u9505\uff0c\u53ef\u4ee5\u534a\u5f00\u9505\u76d6\uff0c\u7559\u51fa\u6c14\u4f53\u51fa\u53e3\uff1b\u4e5f\u53ef\u5728\u540e\u671f\u5173\u5c0f\u706b\uff0c\u5e76\u65f6\u65f6\u6ce8\u610f\u9505\u4e2d\u60c5\u51b5\u3002 \u6839\u636e\u70f9\u996a\u9700\u8981\uff0c\u98df\u6750\u4e5f\u53ef\u51b7\u6c34\u4e0b\u9505\u3002\u4e0d\u8fc7\u8fd9\u6837\u6c34\u70e7\u5f00\u9700\u8981\u7684\u65f6\u95f4\u66f4\u4e45\u3002","title":"\u6ce8\u610f\u4e8b\u9879"},{"location":"tips/learn/%E5%AD%A6%E4%B9%A0%E8%85%8C/","text":"\u814c\uff08\u8089\uff09 \u6ce8\u610f \u6b64\u5904\u6240\u63cf\u8ff0\u7684\u814c\u6e0d\u662f\u98df\u6750\u70f9\u996a\u524d\u5904\u7406\u7684\u6b65\u9aa4\uff0c\u5e76\u975e\u5236\u4f5c\u54b8\u8089\u6216\u814c\u5236\u9999\u80a0\u7b49\u6210\u54c1 \u814c\u6e0d \u5728\u70f9\u996a\u524d\u814c\u5236\u8089\u7c7b\u662f\u8ba9\u8089\u7c7b\u9884\u5148\u5165\u5473\u7684\u5e38\u7528\u65b9\u6cd5\u3002\u4e00\u822c\u814c\u6e0d\u7684\u5bf9\u8c61\u662f\u751f\u8089\u3002\u6839\u636e\u83dc\u54c1\u7684\u9700\u6c42\uff0c\u53ef\u4ee5\u81ea\u884c\u786e\u5b9a\u8089\u7c7b\u6539\u5200\u7684\u5927\u5c0f\u3002 \u4f8b\u5982\u70b8\u9e21\u7c73\u82b1\uff0c\u9e21\u80f8\u8089\u662f\u5728\u6539\u5200\u4e3a\u9ab0\u5b50\u5927\u5c0f\u7684\u5c0f\u5757\u540e\u653e\u5165\u7897\u4e2d\u814c\u6e0d \u4f8b\u5982\u70e4\u5168\u7f8a\uff0c\u7f8a\u817f\uff0c\u534a\u6247\u6216\u6574\u6247\u7f8a\u8089\u4e0d\u5fc5\u6539\u5200\u5373\u53ef\u7528\u5927\u91cf\u8c03\u5473\u6599\u6d82\u62b9\u5728\u8868\u9762\u4ece\u800c\u814c\u6e0d\u5165\u5473 \u6839\u636e\u83dc\u54c1\u7684\u4e0d\u540c\uff0c\u814c\u6e0d\u6240\u9009\u7684\u8c03\u5473\u6599\u3001\u8f85\u6599\u53ef\u4ee5\u662f\u4efb\u4f55\u79cd\u7c7b\u3002\u6709\u65f6\u5019\u4e3a\u4e86\u4e0d\u540c\u7684\u53e3\u5473\uff0c\u8f85\u6599\u4e5f\u53ef\u80fd\u9700\u8981\u9884\u5148\u5904\u7406\u3002 \u814c\u6e0d\u57fa\u672c\u6982\u5ff5 \u6b64\u5904\u4ecb\u7ecd\u7684\u662f\u6b63\u5e38\u53e3\u5473\u7684\u814c\u6e0d\u8fc7\u7a0b\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u8089\u91cf\u8d8a\u5927\uff08\u6bd4\u5982\u4e00\u6b21\u6027\u814c\u6e0d 5kg \u9e21\u7fc5\uff09\uff0c\u4f53\u79ef\u8d8a\u5927\uff08\u6bd4\u5982\u4e00\u6574\u4e2a\u7f8a\u817f\uff09\uff0c\u53e3\u5473\u8d8a\u91cd\uff0c\u5219\u9700\u8981\u8c03\u5473\u6599\u548c\u8f85\u6599\u8d8a\u591a \u4e00\u822c\u6765\u8bf4\uff0c\u8ba1\u5212\u814c\u6e0d\u7684\u65f6\u95f4\u8d8a\u957f\uff0c\u4f7f\u7528\u7684\u8c03\u5473\u6599\u548c\u8f85\u6599\u8d8a\u5c11 \u814c\u6e0d\u65f6\u5e94\u4f7f\u7528\u6599\u5747\u5300\u8986\u76d6\u5728\u6240\u6709\u7684\u8868\u9762\u3002\u5982\u679c\u662f\u8089\u7247\u3001\u8089\u4e1d\uff0c\u5e94\u8be5\u7528\u624b\u5c3d\u91cf\u6293\u5300\u3001\u6405\u5300\u3002\u5982\u679c\u662f\u6574\u4e2a\u7f8a\u817f\uff0c\u5e94\u8be5\u7528\u624b\u6216\u5237\u5b50\u5728\u8868\u9762\u5237\u5300 \u4e00\u822c\u7092\u8089\u3001\u70b8\u8089\u9700\u8981\u63d0\u524d\u814c\u6e0d\u3002\u7092\u8089\u5e94\u8be5\u4fdd\u8bc1\u8089\u9c9c\u5ae9\u7684\u53e3\u611f\uff0c\u70f9\u8c03\u5f80\u5f80\u9700\u8981\u5927\u706b\u4e14\u65f6\u95f4\u8f83\u77ed\u3002\u77ed\u65f6\u95f4\u70f9\u996a\u4e0d\u5bb9\u6613\u5165\u5473\u65f6\uff0c\u63d0\u524d\u814c\u6e0d\u5c31\u80fd\u5f25\u8865\u53e3\u5473\u7684\u4e0d\u8db3 \u814c\u6e0d\u624b\u6cd5 \u7ec6\u8089\u4e1d\u3001\u8584\u8089\u7247\uff1a\u7531\u4e8e\u8089\u8d28\u8f83\u8106\u5f31\uff0c\u9700\u8981\u5c3d\u91cf\u8f7b\u67d4\u3002\u624b\u6307\u5448\u5a03\u5a03\u673a\u94b3\u5b50\u7684\u5f62\u72b6\uff0c\u8f7b\u5fae\u6293\u5300\u814c\u6599\u3002\u7136\u540e\u5411\u4e00\u4e2a\u65b9\u5411\u8f7b\u8f7b\u6405\u5300\u5373\u53ef \u8089\u4e1d\u3001\u8089\u7247\u3001\u8089\u5757\uff1a\u624b\u6cd5\u540c\u4e0a\uff0c\u4f46\u662f\u529b\u91cf\u53ef\u4ee5\u7a0d\u5927 \u9e21\u817f\u3001\u9e21\u7fc5\u7b49\u5927\u5c0f\uff1a\u5148\u5728\u98df\u6750\u4e0a\u6539\u51e0\u9053\u82b1\u5200\u3002\u9e21\u7fc5\u6839\u3001\u9e21\u817f\u53ef\u4ee5\u7528\u5200\u624e\u5bf9\u7a7f\u5b54\u3002\u7136\u540e\u5148\u5728\u7897\u91cc\u6df7\u5408\u597d\u814c\u6599\uff0c\u5728\u628a\u98df\u6750\u653e\u5165\u6599\u7897\u4e2d\u88f9\u5300 \u7f8a\u817f\u7b49\u5927\u5c0f\uff1a\u4e00\u822c\u53ef\u4ee5\u5728\u8089\u8f83\u539a\u7684\u4f4d\u7f6e\u624e\u5bf9\u7a7f\u5b54\u3002\u7136\u540e\u814c\u6599\u6df7\u5408\u597d\u540e\u5747\u5300\u6d82\u62b9\u5728\u98df\u6750\u8868\u9762 \u814c\u6e0d\u5bb9\u5668\u53ca\u65f6\u95f4 \u9009\u62e9\u80fd\u88c5\u4e0b\u98df\u6750\u548c\u814c\u6599\u7684\u5bb9\u5668\u5373\u53ef\u3002\u5305\u62ec\u7897\u3001\u76d8\u5b50\u3001\u6258\u76d8\u7b49\u3002\u6b64\u65f6\u662f\u5f00\u53e3\u814c\u6e0d\uff0c\u4e00\u822c\u65f6\u95f4\u8f83\u77ed\uff0c\u5e38\u89c1 0.5-2 \u5c0f\u65f6\u7684\u814c\u6e0d\u65f6\u95f4\u3002\uff08\u70e4\uff09\u7f8a\u817f\u7b49\u4e5f\u53ef\u4ee5\u5982\u6b64\u814c\u6e0d\uff0c\u4f46\u65f6\u95f4\u8f83\u957f \u53ef\u4ee5\u9009\u62e9\u8db3\u591f\u5927\u7684\u98df\u54c1\u5bc6\u5c01\u888b\u814c\u6e0d\u3002\u6b64\u65f6\u662f\u5c01\u53e3\u814c\u6e0d\uff0c\u4e00\u822c\u65f6\u95f4\u5f88\u957f\uff0c\u4f8b\u5982\u9694\u591c\u814c\u6e0d\uff0c\u6216\u814c\u6e0d\u4e0d\u6613\u5165\u5473\u7684\u6392\u9aa8\u7b49\u3002\u5e38\u89c1 4 \u5c0f\u65f6-\u9694\u591c\u3002\u6b64\u65f6\u7528\u6599\u8981\u7a0d\u5fae\u51cf\u5c11\uff0c\u9632\u6b62\u6210\u83dc\u53e3\u611f\u592a\u91cd\u592a\u54b8 \u5e38\u7528\u7684\u814c\u6e0d\u7528\u6599 \u751f\u62bd\uff1a\u8c03\u9171\u9999\u4e14\u5e26\u6709\u54b8\u5473\u7684\u5e95\u5473\u3002\u53ef\u7528\u4e8e\u51e0\u4e4e\u6240\u6709\u8089\u7c7b \u8001\u62bd\uff1a\u54b8\u5473\u5e76\u4e0d\u5f3a\u70c8\uff0c\u4f46\u662f\u6613\u4e8e\u67d3\u8272\u3002\u7528\u4e8e\u8c03\u5e95\u8272\u548c\u589e\u9999\u3002\u4e00\u822c\u4e0d\u5e94\u5927\u91cf\u4f7f\u7528\u9632\u6b62\u4ea7\u751f\u8c46\u8165\u5473\u3002\u53ef\u7528\u4e8e\u51e0\u4e4e\u6240\u6709\u7ea2\u8089\u7c7b\uff08\u8f83\u5c11\u7528\uff09\uff0c\u732a\u809d\u7b49\u53ef\u4ee5\u591a\u52a0 \u98df\u76d0\uff1a\u54b8\u5473\u4f46\u7092\u5236\u540e\u4e0d\u5e26\u6709\u9171\u9999\u5473\u3002\u53ef\u7528\u4e8e\u6240\u6709\u8089\u7c7b \u767d\uff08\u7802\uff09\u7cd6\uff1a\u8c03\u751c\u5473\uff08\u91cf\u5927\uff09\uff0c\u4e5f\u53ef\u4ee5\u4e3a\u8089\u589e\u52a0\u9c9c\u5ae9\u7684\u53e3\u611f\uff08\u91cf\u5c11\uff09\u3002\u53ef\u7528\u4e8e\u6240\u6709\u79bd\u755c\u7c7b\u8089\u7c7b\uff0c\u4f46\u9c7c\u7c7b\u548c\u6d77\u9c9c\u5e76\u4e0d\u5e38\u7528\u3002 \u7ea2\u7cd6\uff1a\u8c03\u751c\u5473\u548c\u7ea2\u7cd6\u7279\u6709\u7684\u53e3\u611f\uff0c\u53e3\u5473\u6bd4\u767d\u7cd6\u7565\u91cd\u3002\u53ef\u7528\u4e8e\u51e0\u4e4e\u6240\u6709\u8089\u7c7b\uff08\u4e00\u822c\u8089\u8272\u8f83\u6df1\u6216\u8005\u6210\u83dc\u989c\u8272\u8f83\u6df1\uff09 \u869d\u6cb9\uff1a\u589e\u52a0\u9c9c\u3001\u54b8\u3001\u751c\u7684\u53e3\u5473\u3002\u4e00\u822c\u7528\u4e8e\u7ea2\u8089 \u767d\u918b/\u7c73\u918b\uff1a\u589e\u52a0\u9178\u7684\u53e3\u5473\u3002\u8f83\u5c11\u4f7f\u7528 \u9648\u918b/\u9999\u918b\uff1a\u4e0d\u4ec5\u5e26\u6709\u9178\u7684\u53e3\u5473\uff0c\u8fd8\u80fd\u4e3a\u83dc\u54c1\u589e\u9999\u589e\u8272\u3002\u9999\u918b\u6bd4\u8f83\u9002\u5408\u6df1\u8272\u9c7c\u7c7b\uff08\u5c24\u5176\u662f\u70e4\u9c7c\uff09 \u6599\u9152\uff1a\u53bb\u8165\u589e\u9999\u3002\u53ef\u7528\u4e8e\u51e0\u4e4e\u6240\u6709\u8089\u7c7b\u3002\u4f46\u767d\u8272\u8089\u7c7b\u5e94\u8be5\u5c11\u7528 \u9ec4\u9152\uff1a\u53bb\u8165\u589e\u9999\uff0c\u6548\u679c\u6bd4\u6599\u9152\u66f4\u597d\uff0c\u9999\u5473\u6bd4\u6599\u9152\u66f4\u590d\u6742\u3002\u4e00\u822c\u7528\u4e8e\u767d\u8089\u7c7b\u3002\u7ea2\u8089\u4e5f\u53ef\u7528\uff0c\u4f46\u662f\u6548\u679c\u4e0e\u6599\u9152\u76f8\u5f53\u3002 \u4e94\u9999\u7c89/\u5341\u4e09\u9999\uff1a\u4e3a\u8089\u7c7b\u589e\u52a0\u9999\u5473\uff0c\u662f\u6700\u7b80\u5355\u7684\u590d\u5408\u9999\u6599\u3002\u4e94\u9999\u7c89\u4ec5\u4ec5\u589e\u52a0\u9999\u5473\uff0c\u5341\u4e09\u9999\u7684\u9999\u5473\u6bd4\u8f83\u72ec\u7279\uff0c\u6709\u8fa8\u8bc6\u5ea6\u3002\u7528\u6b64\u7c7b\u9999\u6599\u814c\u6e0d\u5e94\u8be5\u63a7\u5236\u7528\u91cf\u3002\u53ef\u7528\u4e8e\u51e0\u4e4e\u6240\u6709\u8089\u7c7b\uff0c\u4f46\u9c7c\u7c7b\u548c\u6d77\u9c9c\u4e0d\u5e38\u7528 \u8fa3\u6912\u7c89\uff1a\u8fa3\u6912\u7c89\u5206\u4e3a\u5f88\u591a\u79cd\u3002\u4e0d\u8c08\u8fa3\u6912\u7684\u79cd\u7c7b\uff0c\u4ece\u7814\u78e8\u7cbe\u7ec6\u5ea6\u5212\u5206\u6709\u8fa3\u6912\u7c89/\u8fa3\u6912\u9762\uff0c\u8fa3\u6912\u788e\u7b49\u3002\u9664\u4e86\u4e3a\u8089\u7c7b\u589e\u52a0\u8fa3\u5473\uff0c\u8fd8\u80fd\u4e3a\u6210\u83dc\u914d\u8272\u3002\u7528\u8fa3\u6912\u814c\u6e0d\u7684\u83dc\u54c1\u5e94\u8be5\u907f\u514d\u8fa3\u6912\u8fc7\u91cf\u3002\u53ef\u7528\u4e8e\u51e0\u4e4e\u6240\u6709\u9700\u8981\u8fa3\u5473\u5e95\u5473\u7684\u8089\u7c7b\uff0c\u4f46\u70f9\u8c03\u65f6\u95f4\u5e94\u8be5\u7565\u52a0\u63a7\u5236\uff0c\u9632\u6b62\u8fa3\u6912\u5473\u9053\u53d8\u82e6\uff0c\u6216\u8005\u989c\u8272\u53d8\u6df1 \u5b5c\u7136\u7c89\u3001\u5c0f\u8334\u9999\u7c89\uff1a\u4e00\u822c\u7528\u78e8\u7c89\u4f5c\u4e3a\u814c\u6599\uff0c\u4e0d\u7528\u9897\u7c92\uff0c\u8fd9\u6837\u53ef\u4ee5\u4f7f\u8089\u7c7b\u66f4\u5bb9\u6613\u5165\u5473\u3002\u53ef\u7528\u4e8e\u51e0\u4e4e\u6240\u6709\u7ea2\u8089\u548c\u9e21\u8089 X \u6912\u7c89\uff1a\u4e3a\u8089\u7c7b\u589e\u52a0\u8f9b\u3001\u8fa3\u3001\u9999\u3001\u545b\u7684\u53e3\u5473\u3002\u4f7f\u7528\u5e94\u8be5\u9002\u91cf\uff0c\u9632\u6b62\u76d6\u8fc7\u5176\u4ed6\u53e3\u5473 \u9ed1\u80e1\u6912\u7c89\uff1a\u53e3\u5473\u8f9b\u3001\u8fa3\u3002\u53ef\u7528\u4e8e\u51e0\u4e4e\u6240\u6709\u7ea2\u8089 \u767d\u80e1\u6912\u7c89\uff1a\u53e3\u5473\u8f9b\u3001\u9999\u3002\u6bd4\u9ed1\u80e1\u6912\u7565\u5f31\uff0c\u7a81\u51fa\u9999\u5473\u3002\u53ef\u7528\u4e8e\u51e0\u4e4e\u6240\u6709\u8089\u7c7b \u82b1\u6912\u7c89\uff1a\u53e3\u5473\u8f9b\u3001\u545b\u3002\u6709\u82b1\u6912\u7279\u6b8a\u7684\u9999\u5473\uff0c\u6bd4\u8f83\u6709\u8fa8\u8bc6\u5ea6\u3002\u53ef\u7528\u4e8e\u51e0\u4e4e\u6240\u6709\u8089\u7c7b \u8c46\u74e3\u9171\uff1a\u4e3a\u8089\u7c7b\u589e\u52a0\u8c46\u7c7b\u7684\u9171\u9999\u548c\u54b8\u5473\u3001\u8fa3\u5473\u3002\u53ef\u7528\u4e8e\u51e0\u4e4e\u6240\u6709\u7ea2\u8089\u7c7b \u8471\u59dc\u849c\uff1a\u8471\u59dc\u53bb\u8165\u589e\u9999\uff0c\u53bb\u9664\u5f02\u5473\uff1b\u849c\u589e\u52a0\u8f9b\u9999\u5473\u3002\u8471\u53ef\u6839\u636e\u9700\u8981\u5207\u6bb5\u6216\u8005\u5207\u7247\uff1b\u59dc\u4e00\u822c\u5207\u7247\uff0c\u6709\u4e9b\u573a\u666f\u9700\u8981\u53bb\u76ae\uff1b\u849c\u53ef\u5207\u7247\u6216\u5207\u788e\u3002\u8471\u59dc\u4e0d\u60f3\u51fa\u73b0\u5728\u6210\u83dc\u4e2d\uff0c\u6216\u8005\u53e3\u5473\u9700\u8981\u8f83\u8f7b\uff0c\u53ef\u4ee5\u5c06\u8471\u59dc\u5757\u653e\u4e8e\u6709\u6781\u5c11\u91cf\u6e05\u6c34\u7684\u7897\u91cc\u6324\u538b\u51fa\u6c41\uff0c\u7528\u8471\u59dc\u6c34\u814c\u6e0d\u8089\u7c7b\u3002\u849c\u4e00\u822c\u4e0d\u76f4\u63a5\u52a0\u5165\u3002\u53ef\u7528\u4e8e\u6240\u6709\u8089\u7c7b \u6d77\u9c9c\u9171\u3001\u867e\u9171\u7b49\uff1a\u4e3a\u8089\u7c7b\u589e\u52a0\u9c9c\u3001\u54b8\u5473\u3002\u6d77\u9c9c\u9171\u53e3\u5473\u504f\u751c\uff0c\u867e\u9171\u53e3\u5473\u504f\u91cd\u3002\u53ef\u7528\u4e8e\u51e0\u4e4e\u6240\u6709\u8089\u7c7b\uff0c\u4f46\u4f7f\u7528\u573a\u666f\u4e0d\u591a \u8c46\u8c49\uff1a\u4e3a\u8089\u7c7b\u589e\u52a0\u53d1\u9175\u8c46\u7c7b\u7684\u9999\u5473\u548c\u54b8\u5473\u3002\u53ef\u7528\u4e8e\u51e0\u4e4e\u6240\u6709\u7ea2\u8089\u7c7b\uff0c\u4f46\u662f\u4f7f\u7528\u7684\u5e76\u4e0d\u591a \u751f\u7c89\uff1a\u5373\u4e3a\u6dc0\u7c89\u3002\u751f\u7c89\u662f\u4e0a\u6d46\u7684\u91cd\u8981\u814c\u6599\u3002\u4e0a\u6d46\u8d8a\u539a\uff0c\u6216\u8005\u9700\u8981\u53e3\u611f\u8d8a\u6ed1\u5ae9\uff0c\u9700\u8981\u7684\u751f\u7c89\u8d8a\u591a\u3002\u53ef\u7528\u4e8e\u51e0\u4e4e\u6240\u6709\u8089\u7c7b\u3002 \u751f\u7c89\u53ef\u4f5c\u4e3a\u7b80\u6613\u7684\u6cb9\u70b8\u5916\u8863\u4f7f\u7528\uff08\u4e00\u822c\u6839\u636e\u9700\u8981\u8fd8\u9700\u52a0\u5165\u9762\u7c89\u7b49\uff09\uff0c\u6b64\u65f6\u4e00\u822c\u4e0d\u5728\u814c\u6e0d\u65f6\u52a0\u5165 \u7389\u7c73\u6dc0\u7c89\u3001\u571f\u8c46\u6dc0\u7c89\uff1a\u7c98\u6027\u4e00\u822c\u6700\u5927 \u7ea2\u85af\u6dc0\u7c89\uff1a\u7c98\u6027\u7565\u4f4e \u6cb9\uff1a\u5728\u814c\u6e0d\u65f6\u52a0\u5165\u9002\u91cf\u6cb9\u8fdb\u884c\u6cb9\u5c01\uff0c\u53ef\u4ee5\u9501\u4f4f\u6c34\u5206\u548c\u98ce\u5473\u3002\u5982\u4f7f\u7528\u5f00\u53e3\u5bb9\u5668\u814c\u6e0d\uff0c\u4e14\u65f6\u95f4\u8f83\u957f\uff08\u4f8b\u5982\u5728\u7897\u91cc\uff09\uff0c\u6cb9\u5c01\u80fd\u6781\u5927\u7a0b\u5ea6\u4fdd\u8bc1\u8089\u8d28\u4e0d\u53d8\u5e72\u6216\u53d8\u67f4\u3002\u53ef\u7528\u4e8e\u51e0\u4e4e\u6240\u6709\u8089\u7c7b\u3002\u6cb9\u5c01\u540e\u7092\u5236\u5e94\u7565\u5fae\u51cf\u5c11\u5e95\u6cb9\uff0c\u6cb9\u70b8\u5219\u6ca1\u6709\u533a\u522b \u51e0\u79cd\u8f83\u4e3a\u901a\u7528\u7684\u814c\u6e0d\u516c\u5f0f \u725b\u8089\uff1a\u4f7f\u7528\u9002\u91cf\u751f\u62bd\uff0c\u5c11\u91cf\u6599\u9152\uff0c\u5c11\u91cf\u767d\u7802\u7cd6\u814c\u6e0d\u3002\u6839\u636e\u53e3\u5473\u9009\u7528\u98df\u76d0\uff08\u8865\u5145\u54b8\u5473\uff09\uff0c\u869d\u6cb9\u548c\u6781\u5c11\u91cf\u6d77\u9c9c\u9171\uff08\u869d\u6cb9\u725b\u8089\uff09\uff0c\u4e94\u9999\u7c89/\u5341\u4e09\u9999\uff08\u6d0b\u8471\u7092\u725b\u8089\uff09\u3002\u614e\u7528\u8471\u59dc \u9e21\u8089\uff08\u5305\u62ec\u9e21\u80f8\u8089\u548c\u9e21\u7fc5\uff09\uff1a\u4f7f\u7528\u9002\u91cf\u751f\u62bd\uff0c\u8f83\u5c11\u91cf\u767d\u7802\u7cd6\uff0c\u5c11\u91cf\u6599\u9152\u814c\u6e0d\u3002\u6839\u636e\u53e3\u5473\u9009\u7528\u98df\u76d0\uff08\u8865\u5145\u54b8\u5473\uff09\uff0c\u4e94\u9999\u7c89/\u5341\u4e09\u9999\uff08\u70b8\u9e21\u7c73\u82b1\uff09\uff0c\u6781\u5c11\u91cf\u8001\u62bd\uff08\u9999\u714e\u9e21\u7fc5\u4e2d\uff09 \u767d\u8272\u9c7c\u8089\uff1a\u4f7f\u7528\u9002\u91cf\u98df\u76d0\uff0c\u5c11\u91cf\u6599\u9152/\u9ec4\u9152\u814c\u6e0d\u3002\u6839\u636e\u53e3\u5473\u9009\u7528\u6d77\u9c9c\u9171/\u6d77\u9c9c\u9171\u6cb9/\u84b8\u9c7c\u8c49\u6cb9\uff08\u9999\u714e\u5e26\u9c7c\uff09\uff0c\u8471\u59dc\uff08\u6c34\uff09\uff08\u70e4\u5e26\u76ae\u9c7c\u8089\uff09 \u7ea2\u8272\u9c7c\u8089\uff1a\u4f7f\u7528\u9002\u91cf\u751f\u62bd\uff0c\u5c11\u91cf\u6599\u9152\u814c\u6e0d\u3002\u6839\u636e\u53e3\u5473\u9009\u7528\u6d77\u9c9c\u9171\u6cb9/\u5c11\u91cf\u84b8\u9c7c\u8c49\u6cb9\uff08\u9999\u714e\u4e09\u6587\u9c7c\uff09\uff0c\u7ea2\u7cd6\uff08\u5317\u6b27\u9999\u70e4\u4e09\u6587\u9c7c\uff09 \u732a\u809d\uff1a\u4f7f\u7528\u9002\u91cf\u751f\u62bd\uff0c\u9002\u91cf\u6599\u9152\u814c\u6e0d\u3002\u6839\u636e\u53e3\u5473\u9009\u7528\u751f\u7c89\u548c\u9002\u91cf\u8001\u62bd\uff08\u6ed1\u7092\u732a\u809d\uff09\uff0c\u5c11\u91cf\u7cd6\u7b49 \u83dc\u54c1\u5b9e\u6218\u793a\u4f8b \u6d0b\u8471\u7092\u725b\u8089\uff1a\u4ee5\u4e00\u4eba\u4efd\u7684 150g \u725b\u8089\u4e3a\u4f8b\u3002\u725b\u8089\u5e94\u5207\u7247\uff0c\u6210\u83dc\u53e3\u611f\u5e94\u5ae9\u6ed1\uff0c\u9700\u7092\u5236 \u751f\u62bd 10ml\uff08\u7ea6 2 \u6c64\u5319\uff09 \u6599\u9152 5ml\uff08\u7ea6 1 \u6c64\u5319\uff09 \u767d\u7802\u7cd6 2.5-10g\uff08\u7ea6 1-4 \u8336\u5319\uff0c\u6839\u636e\u53e3\u5473\u751c\u5ea6\u9009\u62e9\uff09 \u5b5c\u7136\u7c89 5g\uff08\u7ea6 2 \u8336\u5319\uff09 \u751f\u7c89 10-15g\uff08\u7ea6 1 \u5c0f\u628a\uff09 \u6cb9 10ml\uff08\u7ea6 2 \u6c64\u5319\uff09 \uff08\u53ef\u9009\uff09\u5341\u4e09\u9999 1g\uff08\u7ea6 0.5 \u8336\u5319\uff09 \uff08\u53ef\u9009\uff09\u9ed1\u80e1\u6912\u7c89 1g\uff08\u7ea6 0.5 \u8336\u5319\uff09 \u869d\u6cb9\u725b\u8089\uff1a\u4ee5\u4e00\u4eba\u4efd\u7684 150g \u725b\u8089\u4e3a\u4f8b\u3002\u725b\u8089\u5e94\u5207\u7247\uff0c\u6210\u624d\u53e3\u611f\u5e94\u5ae9\u6ed1\u4e14\u4e0a\u6d46\u611f\u8db3\uff0c\u6b64\u83dc\u53e3\u611f\u504f\u751c\uff0c\u9700\u7092\u5236 \u751f\u62bd 5ml\uff08\u7ea6 1 \u6c64\u5319\uff09 \u6599\u9152 5ml\uff08\u7ea6 1 \u6c64\u5319\uff09 \u869d\u6cb9 10-20ml\uff08\u7ea6 2-4 \u6c64\u5319\uff0c\u6839\u636e\u53e3\u5473\u54b8\u5ea6\u9009\u62e9\uff0c\u869d\u6cb9\u6bd4\u8f83\u54b8\uff09 \u767d\u7802\u7cd6 5-15g\uff08\u7ea6 2-6 \u8336\u5319\uff0c\u6839\u636e\u53e3\u5473\u751c\u5ea6\u9009\u62e9\uff09 \u751f\u7c89 25-35g\uff08\u7ea6 1 \u5927\u628a\uff09 \u6cb9 10ml\uff08\u7ea6 2 \u6c64\u5319\uff09 \u4e94\u9999\u76d0\u9165\u9e21\uff1a\u4ee5\u4e00\u4eba\u4efd\u7684 150g \u9e21\u80f8\u8089\u4e3a\u4f8b\u3002\u9e21\u8089\u5e94\u5207\u6210\u9ab0\u5b50\u5f62\u72b6\uff0c\u9700\u70b8\u5236 \u751f\u62bd 10ml\uff08\u7ea6 2 \u6c64\u5319\uff09 \u6599\u9152 2.5ml\uff08\u7ea6 0.5 \u6c64\u5319\uff09 \u4e94\u9999\u7c89 5g\uff08\u7ea6 2 \u8336\u5319\uff09\u6216\u5341\u4e09\u9999 2.5-5g\uff08\u7ea6 1-2 \u8336\u5319\uff09 \uff08\u53ef\u9009\uff09\u5b5c\u7136\u7c89 1g\uff08\u7ea6 0.5 \u8336\u5319\uff09 \uff08\u53ef\u9009\uff09\u767d\u80e1\u6912\u7c89 1g\uff08\u7ea6 0.5 \u8336\u5319\uff09 \u871c\u6c41\u70e4\u9e21\u7fc5\uff1a\u4ee5\u4e00\u4eba\u4efd\u7684 250g \u5e26\u9aa8\u9e21\u7fc5\u4e2d\u4e3a\u4f8b\u3002\u9e21\u7fc5\u4e0a\u5e94\u5207\u51e0\u9053\u82b1\u5200\uff0c\u6210\u83dc\u54b8\u751c\uff0c\u4f46\u7a81\u51fa\u751c\u53e3\uff0c\u9700\u70e4\u5236 \u751f\u62bd 10ml\uff08\u7ea6 2 \u6c64\u5319\uff09 \u6599\u9152 2.5ml\uff08\u7ea6 0.5 \u6c64\u5319\uff09 \u767d\u7802\u7cd6 5-15g\uff08\u7ea6 2-6 \u8336\u5319\uff0c\u6839\u636e\u53e3\u5473\u751c\u5ea6\u9009\u62e9\uff09 \u8702\u871c/\u7cd6\u6d46 10-20ml\uff08\u7ea6 2-4 \u6c64\u5319\uff0c\u6839\u636e\u53e3\u5473\u751c\u5ea6\u9009\u62e9\u3002\u5982\u767d\u7802\u7cd6\u8d85\u8fc7\u6216\u7b49\u4e8e 10g\uff0c\u5efa\u8bae\u53ea\u52a0\u5165 10ml\uff09 \uff08\u53ef\u9009\uff09\u4e94\u9999\u7c89 2.5g\uff08\u7ea6 1 \u8336\u5319\u3002\u4e0d\u53ef\u7528\u5341\u4e09\u9999\uff09 \u9999\u70e4\u4e09\u6587\u9c7c\uff1a\u4ee5\u4e00\u4eba\u4efd\u7684 200g \u53bb\u9aa8\u4e09\u6587\u9c7c\u6392\u4e3a\u4f8b\u3002\u9c7c\u8089\u4e0d\u5e94\u6539\u5200\uff0c\u9700\u70e4\u7bb1\u70e4\u5236 \u751f\u62bd 10ml\uff08\u7ea6 2 \u6c64\u5319\uff09 \u6599\u9152 2.5ml\uff08\u7ea6 0.5 \u6c64\u5319\uff09 \u7ea2\u7cd6 10-20g\uff08\u7ea6 4-8 \u8336\u5319\uff0c\u6839\u636e\u53e3\u5473\u751c\u5ea6\u9009\u62e9\uff09 \u610f\u5927\u5229\u9ed1\u918b/\u9547\u6c5f\u9999\u918b 2.5-5ml\uff08\u7ea6 0.5-1 \u6c64\u5319\uff0c\u6839\u636e\u53e3\u5473\u9178\u5ea6\u9009\u62e9\uff09 \u8089\u8c46\u853b\u7c89 2.5g\uff08\u7ea6 1 \u8336\u5319\uff09 \u767e\u91cc\u9999\u7c89 1g\uff08\u7ea6 0.5 \u8336\u5319\uff09 \u59dc\u7c89 1g\uff08\u7ea6 0.5 \u8336\u5319\uff09 \u8ff7\u8fed\u9999\u7c89 1-2g\uff08\u7ea6 0.5-1 \u8336\u5319\uff09 \uff08\u53ef\u9009\uff09\u767d\u80e1\u6912\u7c89 1g\uff08\u7ea6 0.5 \u8336\u5319\uff09 \uff08\u53ef\u9009\uff09\u5e72\u8fa3\u6912\u788e 2.5-10g\uff08\u7ea6 1-4 \u8336\u5319\uff0c\u6839\u636e\u53e3\u5473\u8fa3\u5ea6\u9009\u62e9\uff09","title":"\u5b66\u4e60\u814c"},{"location":"tips/learn/%E5%AD%A6%E4%B9%A0%E8%85%8C/#_1","text":"","title":"\u814c\uff08\u8089\uff09"},{"location":"tips/learn/%E5%AD%A6%E4%B9%A0%E8%85%8C/#_2","text":"\u6b64\u5904\u6240\u63cf\u8ff0\u7684\u814c\u6e0d\u662f\u98df\u6750\u70f9\u996a\u524d\u5904\u7406\u7684\u6b65\u9aa4\uff0c\u5e76\u975e\u5236\u4f5c\u54b8\u8089\u6216\u814c\u5236\u9999\u80a0\u7b49\u6210\u54c1","title":"\u6ce8\u610f"},{"location":"tips/learn/%E5%AD%A6%E4%B9%A0%E8%85%8C/#_3","text":"\u5728\u70f9\u996a\u524d\u814c\u5236\u8089\u7c7b\u662f\u8ba9\u8089\u7c7b\u9884\u5148\u5165\u5473\u7684\u5e38\u7528\u65b9\u6cd5\u3002\u4e00\u822c\u814c\u6e0d\u7684\u5bf9\u8c61\u662f\u751f\u8089\u3002\u6839\u636e\u83dc\u54c1\u7684\u9700\u6c42\uff0c\u53ef\u4ee5\u81ea\u884c\u786e\u5b9a\u8089\u7c7b\u6539\u5200\u7684\u5927\u5c0f\u3002 \u4f8b\u5982\u70b8\u9e21\u7c73\u82b1\uff0c\u9e21\u80f8\u8089\u662f\u5728\u6539\u5200\u4e3a\u9ab0\u5b50\u5927\u5c0f\u7684\u5c0f\u5757\u540e\u653e\u5165\u7897\u4e2d\u814c\u6e0d \u4f8b\u5982\u70e4\u5168\u7f8a\uff0c\u7f8a\u817f\uff0c\u534a\u6247\u6216\u6574\u6247\u7f8a\u8089\u4e0d\u5fc5\u6539\u5200\u5373\u53ef\u7528\u5927\u91cf\u8c03\u5473\u6599\u6d82\u62b9\u5728\u8868\u9762\u4ece\u800c\u814c\u6e0d\u5165\u5473 \u6839\u636e\u83dc\u54c1\u7684\u4e0d\u540c\uff0c\u814c\u6e0d\u6240\u9009\u7684\u8c03\u5473\u6599\u3001\u8f85\u6599\u53ef\u4ee5\u662f\u4efb\u4f55\u79cd\u7c7b\u3002\u6709\u65f6\u5019\u4e3a\u4e86\u4e0d\u540c\u7684\u53e3\u5473\uff0c\u8f85\u6599\u4e5f\u53ef\u80fd\u9700\u8981\u9884\u5148\u5904\u7406\u3002","title":"\u814c\u6e0d"},{"location":"tips/learn/%E5%AD%A6%E4%B9%A0%E8%85%8C/#_4","text":"\u6b64\u5904\u4ecb\u7ecd\u7684\u662f\u6b63\u5e38\u53e3\u5473\u7684\u814c\u6e0d\u8fc7\u7a0b\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u8089\u91cf\u8d8a\u5927\uff08\u6bd4\u5982\u4e00\u6b21\u6027\u814c\u6e0d 5kg \u9e21\u7fc5\uff09\uff0c\u4f53\u79ef\u8d8a\u5927\uff08\u6bd4\u5982\u4e00\u6574\u4e2a\u7f8a\u817f\uff09\uff0c\u53e3\u5473\u8d8a\u91cd\uff0c\u5219\u9700\u8981\u8c03\u5473\u6599\u548c\u8f85\u6599\u8d8a\u591a \u4e00\u822c\u6765\u8bf4\uff0c\u8ba1\u5212\u814c\u6e0d\u7684\u65f6\u95f4\u8d8a\u957f\uff0c\u4f7f\u7528\u7684\u8c03\u5473\u6599\u548c\u8f85\u6599\u8d8a\u5c11 \u814c\u6e0d\u65f6\u5e94\u4f7f\u7528\u6599\u5747\u5300\u8986\u76d6\u5728\u6240\u6709\u7684\u8868\u9762\u3002\u5982\u679c\u662f\u8089\u7247\u3001\u8089\u4e1d\uff0c\u5e94\u8be5\u7528\u624b\u5c3d\u91cf\u6293\u5300\u3001\u6405\u5300\u3002\u5982\u679c\u662f\u6574\u4e2a\u7f8a\u817f\uff0c\u5e94\u8be5\u7528\u624b\u6216\u5237\u5b50\u5728\u8868\u9762\u5237\u5300 \u4e00\u822c\u7092\u8089\u3001\u70b8\u8089\u9700\u8981\u63d0\u524d\u814c\u6e0d\u3002\u7092\u8089\u5e94\u8be5\u4fdd\u8bc1\u8089\u9c9c\u5ae9\u7684\u53e3\u611f\uff0c\u70f9\u8c03\u5f80\u5f80\u9700\u8981\u5927\u706b\u4e14\u65f6\u95f4\u8f83\u77ed\u3002\u77ed\u65f6\u95f4\u70f9\u996a\u4e0d\u5bb9\u6613\u5165\u5473\u65f6\uff0c\u63d0\u524d\u814c\u6e0d\u5c31\u80fd\u5f25\u8865\u53e3\u5473\u7684\u4e0d\u8db3","title":"\u814c\u6e0d\u57fa\u672c\u6982\u5ff5"},{"location":"tips/learn/%E5%AD%A6%E4%B9%A0%E8%85%8C/#_5","text":"\u7ec6\u8089\u4e1d\u3001\u8584\u8089\u7247\uff1a\u7531\u4e8e\u8089\u8d28\u8f83\u8106\u5f31\uff0c\u9700\u8981\u5c3d\u91cf\u8f7b\u67d4\u3002\u624b\u6307\u5448\u5a03\u5a03\u673a\u94b3\u5b50\u7684\u5f62\u72b6\uff0c\u8f7b\u5fae\u6293\u5300\u814c\u6599\u3002\u7136\u540e\u5411\u4e00\u4e2a\u65b9\u5411\u8f7b\u8f7b\u6405\u5300\u5373\u53ef \u8089\u4e1d\u3001\u8089\u7247\u3001\u8089\u5757\uff1a\u624b\u6cd5\u540c\u4e0a\uff0c\u4f46\u662f\u529b\u91cf\u53ef\u4ee5\u7a0d\u5927 \u9e21\u817f\u3001\u9e21\u7fc5\u7b49\u5927\u5c0f\uff1a\u5148\u5728\u98df\u6750\u4e0a\u6539\u51e0\u9053\u82b1\u5200\u3002\u9e21\u7fc5\u6839\u3001\u9e21\u817f\u53ef\u4ee5\u7528\u5200\u624e\u5bf9\u7a7f\u5b54\u3002\u7136\u540e\u5148\u5728\u7897\u91cc\u6df7\u5408\u597d\u814c\u6599\uff0c\u5728\u628a\u98df\u6750\u653e\u5165\u6599\u7897\u4e2d\u88f9\u5300 \u7f8a\u817f\u7b49\u5927\u5c0f\uff1a\u4e00\u822c\u53ef\u4ee5\u5728\u8089\u8f83\u539a\u7684\u4f4d\u7f6e\u624e\u5bf9\u7a7f\u5b54\u3002\u7136\u540e\u814c\u6599\u6df7\u5408\u597d\u540e\u5747\u5300\u6d82\u62b9\u5728\u98df\u6750\u8868\u9762","title":"\u814c\u6e0d\u624b\u6cd5"},{"location":"tips/learn/%E5%AD%A6%E4%B9%A0%E8%85%8C/#_6","text":"\u9009\u62e9\u80fd\u88c5\u4e0b\u98df\u6750\u548c\u814c\u6599\u7684\u5bb9\u5668\u5373\u53ef\u3002\u5305\u62ec\u7897\u3001\u76d8\u5b50\u3001\u6258\u76d8\u7b49\u3002\u6b64\u65f6\u662f\u5f00\u53e3\u814c\u6e0d\uff0c\u4e00\u822c\u65f6\u95f4\u8f83\u77ed\uff0c\u5e38\u89c1 0.5-2 \u5c0f\u65f6\u7684\u814c\u6e0d\u65f6\u95f4\u3002\uff08\u70e4\uff09\u7f8a\u817f\u7b49\u4e5f\u53ef\u4ee5\u5982\u6b64\u814c\u6e0d\uff0c\u4f46\u65f6\u95f4\u8f83\u957f \u53ef\u4ee5\u9009\u62e9\u8db3\u591f\u5927\u7684\u98df\u54c1\u5bc6\u5c01\u888b\u814c\u6e0d\u3002\u6b64\u65f6\u662f\u5c01\u53e3\u814c\u6e0d\uff0c\u4e00\u822c\u65f6\u95f4\u5f88\u957f\uff0c\u4f8b\u5982\u9694\u591c\u814c\u6e0d\uff0c\u6216\u814c\u6e0d\u4e0d\u6613\u5165\u5473\u7684\u6392\u9aa8\u7b49\u3002\u5e38\u89c1 4 \u5c0f\u65f6-\u9694\u591c\u3002\u6b64\u65f6\u7528\u6599\u8981\u7a0d\u5fae\u51cf\u5c11\uff0c\u9632\u6b62\u6210\u83dc\u53e3\u611f\u592a\u91cd\u592a\u54b8","title":"\u814c\u6e0d\u5bb9\u5668\u53ca\u65f6\u95f4"},{"location":"tips/learn/%E5%AD%A6%E4%B9%A0%E8%85%8C/#_7","text":"\u751f\u62bd\uff1a\u8c03\u9171\u9999\u4e14\u5e26\u6709\u54b8\u5473\u7684\u5e95\u5473\u3002\u53ef\u7528\u4e8e\u51e0\u4e4e\u6240\u6709\u8089\u7c7b \u8001\u62bd\uff1a\u54b8\u5473\u5e76\u4e0d\u5f3a\u70c8\uff0c\u4f46\u662f\u6613\u4e8e\u67d3\u8272\u3002\u7528\u4e8e\u8c03\u5e95\u8272\u548c\u589e\u9999\u3002\u4e00\u822c\u4e0d\u5e94\u5927\u91cf\u4f7f\u7528\u9632\u6b62\u4ea7\u751f\u8c46\u8165\u5473\u3002\u53ef\u7528\u4e8e\u51e0\u4e4e\u6240\u6709\u7ea2\u8089\u7c7b\uff08\u8f83\u5c11\u7528\uff09\uff0c\u732a\u809d\u7b49\u53ef\u4ee5\u591a\u52a0 \u98df\u76d0\uff1a\u54b8\u5473\u4f46\u7092\u5236\u540e\u4e0d\u5e26\u6709\u9171\u9999\u5473\u3002\u53ef\u7528\u4e8e\u6240\u6709\u8089\u7c7b \u767d\uff08\u7802\uff09\u7cd6\uff1a\u8c03\u751c\u5473\uff08\u91cf\u5927\uff09\uff0c\u4e5f\u53ef\u4ee5\u4e3a\u8089\u589e\u52a0\u9c9c\u5ae9\u7684\u53e3\u611f\uff08\u91cf\u5c11\uff09\u3002\u53ef\u7528\u4e8e\u6240\u6709\u79bd\u755c\u7c7b\u8089\u7c7b\uff0c\u4f46\u9c7c\u7c7b\u548c\u6d77\u9c9c\u5e76\u4e0d\u5e38\u7528\u3002 \u7ea2\u7cd6\uff1a\u8c03\u751c\u5473\u548c\u7ea2\u7cd6\u7279\u6709\u7684\u53e3\u611f\uff0c\u53e3\u5473\u6bd4\u767d\u7cd6\u7565\u91cd\u3002\u53ef\u7528\u4e8e\u51e0\u4e4e\u6240\u6709\u8089\u7c7b\uff08\u4e00\u822c\u8089\u8272\u8f83\u6df1\u6216\u8005\u6210\u83dc\u989c\u8272\u8f83\u6df1\uff09 \u869d\u6cb9\uff1a\u589e\u52a0\u9c9c\u3001\u54b8\u3001\u751c\u7684\u53e3\u5473\u3002\u4e00\u822c\u7528\u4e8e\u7ea2\u8089 \u767d\u918b/\u7c73\u918b\uff1a\u589e\u52a0\u9178\u7684\u53e3\u5473\u3002\u8f83\u5c11\u4f7f\u7528 \u9648\u918b/\u9999\u918b\uff1a\u4e0d\u4ec5\u5e26\u6709\u9178\u7684\u53e3\u5473\uff0c\u8fd8\u80fd\u4e3a\u83dc\u54c1\u589e\u9999\u589e\u8272\u3002\u9999\u918b\u6bd4\u8f83\u9002\u5408\u6df1\u8272\u9c7c\u7c7b\uff08\u5c24\u5176\u662f\u70e4\u9c7c\uff09 \u6599\u9152\uff1a\u53bb\u8165\u589e\u9999\u3002\u53ef\u7528\u4e8e\u51e0\u4e4e\u6240\u6709\u8089\u7c7b\u3002\u4f46\u767d\u8272\u8089\u7c7b\u5e94\u8be5\u5c11\u7528 \u9ec4\u9152\uff1a\u53bb\u8165\u589e\u9999\uff0c\u6548\u679c\u6bd4\u6599\u9152\u66f4\u597d\uff0c\u9999\u5473\u6bd4\u6599\u9152\u66f4\u590d\u6742\u3002\u4e00\u822c\u7528\u4e8e\u767d\u8089\u7c7b\u3002\u7ea2\u8089\u4e5f\u53ef\u7528\uff0c\u4f46\u662f\u6548\u679c\u4e0e\u6599\u9152\u76f8\u5f53\u3002 \u4e94\u9999\u7c89/\u5341\u4e09\u9999\uff1a\u4e3a\u8089\u7c7b\u589e\u52a0\u9999\u5473\uff0c\u662f\u6700\u7b80\u5355\u7684\u590d\u5408\u9999\u6599\u3002\u4e94\u9999\u7c89\u4ec5\u4ec5\u589e\u52a0\u9999\u5473\uff0c\u5341\u4e09\u9999\u7684\u9999\u5473\u6bd4\u8f83\u72ec\u7279\uff0c\u6709\u8fa8\u8bc6\u5ea6\u3002\u7528\u6b64\u7c7b\u9999\u6599\u814c\u6e0d\u5e94\u8be5\u63a7\u5236\u7528\u91cf\u3002\u53ef\u7528\u4e8e\u51e0\u4e4e\u6240\u6709\u8089\u7c7b\uff0c\u4f46\u9c7c\u7c7b\u548c\u6d77\u9c9c\u4e0d\u5e38\u7528 \u8fa3\u6912\u7c89\uff1a\u8fa3\u6912\u7c89\u5206\u4e3a\u5f88\u591a\u79cd\u3002\u4e0d\u8c08\u8fa3\u6912\u7684\u79cd\u7c7b\uff0c\u4ece\u7814\u78e8\u7cbe\u7ec6\u5ea6\u5212\u5206\u6709\u8fa3\u6912\u7c89/\u8fa3\u6912\u9762\uff0c\u8fa3\u6912\u788e\u7b49\u3002\u9664\u4e86\u4e3a\u8089\u7c7b\u589e\u52a0\u8fa3\u5473\uff0c\u8fd8\u80fd\u4e3a\u6210\u83dc\u914d\u8272\u3002\u7528\u8fa3\u6912\u814c\u6e0d\u7684\u83dc\u54c1\u5e94\u8be5\u907f\u514d\u8fa3\u6912\u8fc7\u91cf\u3002\u53ef\u7528\u4e8e\u51e0\u4e4e\u6240\u6709\u9700\u8981\u8fa3\u5473\u5e95\u5473\u7684\u8089\u7c7b\uff0c\u4f46\u70f9\u8c03\u65f6\u95f4\u5e94\u8be5\u7565\u52a0\u63a7\u5236\uff0c\u9632\u6b62\u8fa3\u6912\u5473\u9053\u53d8\u82e6\uff0c\u6216\u8005\u989c\u8272\u53d8\u6df1 \u5b5c\u7136\u7c89\u3001\u5c0f\u8334\u9999\u7c89\uff1a\u4e00\u822c\u7528\u78e8\u7c89\u4f5c\u4e3a\u814c\u6599\uff0c\u4e0d\u7528\u9897\u7c92\uff0c\u8fd9\u6837\u53ef\u4ee5\u4f7f\u8089\u7c7b\u66f4\u5bb9\u6613\u5165\u5473\u3002\u53ef\u7528\u4e8e\u51e0\u4e4e\u6240\u6709\u7ea2\u8089\u548c\u9e21\u8089 X \u6912\u7c89\uff1a\u4e3a\u8089\u7c7b\u589e\u52a0\u8f9b\u3001\u8fa3\u3001\u9999\u3001\u545b\u7684\u53e3\u5473\u3002\u4f7f\u7528\u5e94\u8be5\u9002\u91cf\uff0c\u9632\u6b62\u76d6\u8fc7\u5176\u4ed6\u53e3\u5473 \u9ed1\u80e1\u6912\u7c89\uff1a\u53e3\u5473\u8f9b\u3001\u8fa3\u3002\u53ef\u7528\u4e8e\u51e0\u4e4e\u6240\u6709\u7ea2\u8089 \u767d\u80e1\u6912\u7c89\uff1a\u53e3\u5473\u8f9b\u3001\u9999\u3002\u6bd4\u9ed1\u80e1\u6912\u7565\u5f31\uff0c\u7a81\u51fa\u9999\u5473\u3002\u53ef\u7528\u4e8e\u51e0\u4e4e\u6240\u6709\u8089\u7c7b \u82b1\u6912\u7c89\uff1a\u53e3\u5473\u8f9b\u3001\u545b\u3002\u6709\u82b1\u6912\u7279\u6b8a\u7684\u9999\u5473\uff0c\u6bd4\u8f83\u6709\u8fa8\u8bc6\u5ea6\u3002\u53ef\u7528\u4e8e\u51e0\u4e4e\u6240\u6709\u8089\u7c7b \u8c46\u74e3\u9171\uff1a\u4e3a\u8089\u7c7b\u589e\u52a0\u8c46\u7c7b\u7684\u9171\u9999\u548c\u54b8\u5473\u3001\u8fa3\u5473\u3002\u53ef\u7528\u4e8e\u51e0\u4e4e\u6240\u6709\u7ea2\u8089\u7c7b \u8471\u59dc\u849c\uff1a\u8471\u59dc\u53bb\u8165\u589e\u9999\uff0c\u53bb\u9664\u5f02\u5473\uff1b\u849c\u589e\u52a0\u8f9b\u9999\u5473\u3002\u8471\u53ef\u6839\u636e\u9700\u8981\u5207\u6bb5\u6216\u8005\u5207\u7247\uff1b\u59dc\u4e00\u822c\u5207\u7247\uff0c\u6709\u4e9b\u573a\u666f\u9700\u8981\u53bb\u76ae\uff1b\u849c\u53ef\u5207\u7247\u6216\u5207\u788e\u3002\u8471\u59dc\u4e0d\u60f3\u51fa\u73b0\u5728\u6210\u83dc\u4e2d\uff0c\u6216\u8005\u53e3\u5473\u9700\u8981\u8f83\u8f7b\uff0c\u53ef\u4ee5\u5c06\u8471\u59dc\u5757\u653e\u4e8e\u6709\u6781\u5c11\u91cf\u6e05\u6c34\u7684\u7897\u91cc\u6324\u538b\u51fa\u6c41\uff0c\u7528\u8471\u59dc\u6c34\u814c\u6e0d\u8089\u7c7b\u3002\u849c\u4e00\u822c\u4e0d\u76f4\u63a5\u52a0\u5165\u3002\u53ef\u7528\u4e8e\u6240\u6709\u8089\u7c7b \u6d77\u9c9c\u9171\u3001\u867e\u9171\u7b49\uff1a\u4e3a\u8089\u7c7b\u589e\u52a0\u9c9c\u3001\u54b8\u5473\u3002\u6d77\u9c9c\u9171\u53e3\u5473\u504f\u751c\uff0c\u867e\u9171\u53e3\u5473\u504f\u91cd\u3002\u53ef\u7528\u4e8e\u51e0\u4e4e\u6240\u6709\u8089\u7c7b\uff0c\u4f46\u4f7f\u7528\u573a\u666f\u4e0d\u591a \u8c46\u8c49\uff1a\u4e3a\u8089\u7c7b\u589e\u52a0\u53d1\u9175\u8c46\u7c7b\u7684\u9999\u5473\u548c\u54b8\u5473\u3002\u53ef\u7528\u4e8e\u51e0\u4e4e\u6240\u6709\u7ea2\u8089\u7c7b\uff0c\u4f46\u662f\u4f7f\u7528\u7684\u5e76\u4e0d\u591a \u751f\u7c89\uff1a\u5373\u4e3a\u6dc0\u7c89\u3002\u751f\u7c89\u662f\u4e0a\u6d46\u7684\u91cd\u8981\u814c\u6599\u3002\u4e0a\u6d46\u8d8a\u539a\uff0c\u6216\u8005\u9700\u8981\u53e3\u611f\u8d8a\u6ed1\u5ae9\uff0c\u9700\u8981\u7684\u751f\u7c89\u8d8a\u591a\u3002\u53ef\u7528\u4e8e\u51e0\u4e4e\u6240\u6709\u8089\u7c7b\u3002 \u751f\u7c89\u53ef\u4f5c\u4e3a\u7b80\u6613\u7684\u6cb9\u70b8\u5916\u8863\u4f7f\u7528\uff08\u4e00\u822c\u6839\u636e\u9700\u8981\u8fd8\u9700\u52a0\u5165\u9762\u7c89\u7b49\uff09\uff0c\u6b64\u65f6\u4e00\u822c\u4e0d\u5728\u814c\u6e0d\u65f6\u52a0\u5165 \u7389\u7c73\u6dc0\u7c89\u3001\u571f\u8c46\u6dc0\u7c89\uff1a\u7c98\u6027\u4e00\u822c\u6700\u5927 \u7ea2\u85af\u6dc0\u7c89\uff1a\u7c98\u6027\u7565\u4f4e \u6cb9\uff1a\u5728\u814c\u6e0d\u65f6\u52a0\u5165\u9002\u91cf\u6cb9\u8fdb\u884c\u6cb9\u5c01\uff0c\u53ef\u4ee5\u9501\u4f4f\u6c34\u5206\u548c\u98ce\u5473\u3002\u5982\u4f7f\u7528\u5f00\u53e3\u5bb9\u5668\u814c\u6e0d\uff0c\u4e14\u65f6\u95f4\u8f83\u957f\uff08\u4f8b\u5982\u5728\u7897\u91cc\uff09\uff0c\u6cb9\u5c01\u80fd\u6781\u5927\u7a0b\u5ea6\u4fdd\u8bc1\u8089\u8d28\u4e0d\u53d8\u5e72\u6216\u53d8\u67f4\u3002\u53ef\u7528\u4e8e\u51e0\u4e4e\u6240\u6709\u8089\u7c7b\u3002\u6cb9\u5c01\u540e\u7092\u5236\u5e94\u7565\u5fae\u51cf\u5c11\u5e95\u6cb9\uff0c\u6cb9\u70b8\u5219\u6ca1\u6709\u533a\u522b","title":"\u5e38\u7528\u7684\u814c\u6e0d\u7528\u6599"},{"location":"tips/learn/%E5%AD%A6%E4%B9%A0%E8%85%8C/#_8","text":"\u725b\u8089\uff1a\u4f7f\u7528\u9002\u91cf\u751f\u62bd\uff0c\u5c11\u91cf\u6599\u9152\uff0c\u5c11\u91cf\u767d\u7802\u7cd6\u814c\u6e0d\u3002\u6839\u636e\u53e3\u5473\u9009\u7528\u98df\u76d0\uff08\u8865\u5145\u54b8\u5473\uff09\uff0c\u869d\u6cb9\u548c\u6781\u5c11\u91cf\u6d77\u9c9c\u9171\uff08\u869d\u6cb9\u725b\u8089\uff09\uff0c\u4e94\u9999\u7c89/\u5341\u4e09\u9999\uff08\u6d0b\u8471\u7092\u725b\u8089\uff09\u3002\u614e\u7528\u8471\u59dc \u9e21\u8089\uff08\u5305\u62ec\u9e21\u80f8\u8089\u548c\u9e21\u7fc5\uff09\uff1a\u4f7f\u7528\u9002\u91cf\u751f\u62bd\uff0c\u8f83\u5c11\u91cf\u767d\u7802\u7cd6\uff0c\u5c11\u91cf\u6599\u9152\u814c\u6e0d\u3002\u6839\u636e\u53e3\u5473\u9009\u7528\u98df\u76d0\uff08\u8865\u5145\u54b8\u5473\uff09\uff0c\u4e94\u9999\u7c89/\u5341\u4e09\u9999\uff08\u70b8\u9e21\u7c73\u82b1\uff09\uff0c\u6781\u5c11\u91cf\u8001\u62bd\uff08\u9999\u714e\u9e21\u7fc5\u4e2d\uff09 \u767d\u8272\u9c7c\u8089\uff1a\u4f7f\u7528\u9002\u91cf\u98df\u76d0\uff0c\u5c11\u91cf\u6599\u9152/\u9ec4\u9152\u814c\u6e0d\u3002\u6839\u636e\u53e3\u5473\u9009\u7528\u6d77\u9c9c\u9171/\u6d77\u9c9c\u9171\u6cb9/\u84b8\u9c7c\u8c49\u6cb9\uff08\u9999\u714e\u5e26\u9c7c\uff09\uff0c\u8471\u59dc\uff08\u6c34\uff09\uff08\u70e4\u5e26\u76ae\u9c7c\u8089\uff09 \u7ea2\u8272\u9c7c\u8089\uff1a\u4f7f\u7528\u9002\u91cf\u751f\u62bd\uff0c\u5c11\u91cf\u6599\u9152\u814c\u6e0d\u3002\u6839\u636e\u53e3\u5473\u9009\u7528\u6d77\u9c9c\u9171\u6cb9/\u5c11\u91cf\u84b8\u9c7c\u8c49\u6cb9\uff08\u9999\u714e\u4e09\u6587\u9c7c\uff09\uff0c\u7ea2\u7cd6\uff08\u5317\u6b27\u9999\u70e4\u4e09\u6587\u9c7c\uff09 \u732a\u809d\uff1a\u4f7f\u7528\u9002\u91cf\u751f\u62bd\uff0c\u9002\u91cf\u6599\u9152\u814c\u6e0d\u3002\u6839\u636e\u53e3\u5473\u9009\u7528\u751f\u7c89\u548c\u9002\u91cf\u8001\u62bd\uff08\u6ed1\u7092\u732a\u809d\uff09\uff0c\u5c11\u91cf\u7cd6\u7b49","title":"\u51e0\u79cd\u8f83\u4e3a\u901a\u7528\u7684\u814c\u6e0d\u516c\u5f0f"},{"location":"tips/learn/%E5%AD%A6%E4%B9%A0%E8%85%8C/#_9","text":"\u6d0b\u8471\u7092\u725b\u8089\uff1a\u4ee5\u4e00\u4eba\u4efd\u7684 150g \u725b\u8089\u4e3a\u4f8b\u3002\u725b\u8089\u5e94\u5207\u7247\uff0c\u6210\u83dc\u53e3\u611f\u5e94\u5ae9\u6ed1\uff0c\u9700\u7092\u5236 \u751f\u62bd 10ml\uff08\u7ea6 2 \u6c64\u5319\uff09 \u6599\u9152 5ml\uff08\u7ea6 1 \u6c64\u5319\uff09 \u767d\u7802\u7cd6 2.5-10g\uff08\u7ea6 1-4 \u8336\u5319\uff0c\u6839\u636e\u53e3\u5473\u751c\u5ea6\u9009\u62e9\uff09 \u5b5c\u7136\u7c89 5g\uff08\u7ea6 2 \u8336\u5319\uff09 \u751f\u7c89 10-15g\uff08\u7ea6 1 \u5c0f\u628a\uff09 \u6cb9 10ml\uff08\u7ea6 2 \u6c64\u5319\uff09 \uff08\u53ef\u9009\uff09\u5341\u4e09\u9999 1g\uff08\u7ea6 0.5 \u8336\u5319\uff09 \uff08\u53ef\u9009\uff09\u9ed1\u80e1\u6912\u7c89 1g\uff08\u7ea6 0.5 \u8336\u5319\uff09 \u869d\u6cb9\u725b\u8089\uff1a\u4ee5\u4e00\u4eba\u4efd\u7684 150g \u725b\u8089\u4e3a\u4f8b\u3002\u725b\u8089\u5e94\u5207\u7247\uff0c\u6210\u624d\u53e3\u611f\u5e94\u5ae9\u6ed1\u4e14\u4e0a\u6d46\u611f\u8db3\uff0c\u6b64\u83dc\u53e3\u611f\u504f\u751c\uff0c\u9700\u7092\u5236 \u751f\u62bd 5ml\uff08\u7ea6 1 \u6c64\u5319\uff09 \u6599\u9152 5ml\uff08\u7ea6 1 \u6c64\u5319\uff09 \u869d\u6cb9 10-20ml\uff08\u7ea6 2-4 \u6c64\u5319\uff0c\u6839\u636e\u53e3\u5473\u54b8\u5ea6\u9009\u62e9\uff0c\u869d\u6cb9\u6bd4\u8f83\u54b8\uff09 \u767d\u7802\u7cd6 5-15g\uff08\u7ea6 2-6 \u8336\u5319\uff0c\u6839\u636e\u53e3\u5473\u751c\u5ea6\u9009\u62e9\uff09 \u751f\u7c89 25-35g\uff08\u7ea6 1 \u5927\u628a\uff09 \u6cb9 10ml\uff08\u7ea6 2 \u6c64\u5319\uff09 \u4e94\u9999\u76d0\u9165\u9e21\uff1a\u4ee5\u4e00\u4eba\u4efd\u7684 150g \u9e21\u80f8\u8089\u4e3a\u4f8b\u3002\u9e21\u8089\u5e94\u5207\u6210\u9ab0\u5b50\u5f62\u72b6\uff0c\u9700\u70b8\u5236 \u751f\u62bd 10ml\uff08\u7ea6 2 \u6c64\u5319\uff09 \u6599\u9152 2.5ml\uff08\u7ea6 0.5 \u6c64\u5319\uff09 \u4e94\u9999\u7c89 5g\uff08\u7ea6 2 \u8336\u5319\uff09\u6216\u5341\u4e09\u9999 2.5-5g\uff08\u7ea6 1-2 \u8336\u5319\uff09 \uff08\u53ef\u9009\uff09\u5b5c\u7136\u7c89 1g\uff08\u7ea6 0.5 \u8336\u5319\uff09 \uff08\u53ef\u9009\uff09\u767d\u80e1\u6912\u7c89 1g\uff08\u7ea6 0.5 \u8336\u5319\uff09 \u871c\u6c41\u70e4\u9e21\u7fc5\uff1a\u4ee5\u4e00\u4eba\u4efd\u7684 250g \u5e26\u9aa8\u9e21\u7fc5\u4e2d\u4e3a\u4f8b\u3002\u9e21\u7fc5\u4e0a\u5e94\u5207\u51e0\u9053\u82b1\u5200\uff0c\u6210\u83dc\u54b8\u751c\uff0c\u4f46\u7a81\u51fa\u751c\u53e3\uff0c\u9700\u70e4\u5236 \u751f\u62bd 10ml\uff08\u7ea6 2 \u6c64\u5319\uff09 \u6599\u9152 2.5ml\uff08\u7ea6 0.5 \u6c64\u5319\uff09 \u767d\u7802\u7cd6 5-15g\uff08\u7ea6 2-6 \u8336\u5319\uff0c\u6839\u636e\u53e3\u5473\u751c\u5ea6\u9009\u62e9\uff09 \u8702\u871c/\u7cd6\u6d46 10-20ml\uff08\u7ea6 2-4 \u6c64\u5319\uff0c\u6839\u636e\u53e3\u5473\u751c\u5ea6\u9009\u62e9\u3002\u5982\u767d\u7802\u7cd6\u8d85\u8fc7\u6216\u7b49\u4e8e 10g\uff0c\u5efa\u8bae\u53ea\u52a0\u5165 10ml\uff09 \uff08\u53ef\u9009\uff09\u4e94\u9999\u7c89 2.5g\uff08\u7ea6 1 \u8336\u5319\u3002\u4e0d\u53ef\u7528\u5341\u4e09\u9999\uff09 \u9999\u70e4\u4e09\u6587\u9c7c\uff1a\u4ee5\u4e00\u4eba\u4efd\u7684 200g \u53bb\u9aa8\u4e09\u6587\u9c7c\u6392\u4e3a\u4f8b\u3002\u9c7c\u8089\u4e0d\u5e94\u6539\u5200\uff0c\u9700\u70e4\u7bb1\u70e4\u5236 \u751f\u62bd 10ml\uff08\u7ea6 2 \u6c64\u5319\uff09 \u6599\u9152 2.5ml\uff08\u7ea6 0.5 \u6c64\u5319\uff09 \u7ea2\u7cd6 10-20g\uff08\u7ea6 4-8 \u8336\u5319\uff0c\u6839\u636e\u53e3\u5473\u751c\u5ea6\u9009\u62e9\uff09 \u610f\u5927\u5229\u9ed1\u918b/\u9547\u6c5f\u9999\u918b 2.5-5ml\uff08\u7ea6 0.5-1 \u6c64\u5319\uff0c\u6839\u636e\u53e3\u5473\u9178\u5ea6\u9009\u62e9\uff09 \u8089\u8c46\u853b\u7c89 2.5g\uff08\u7ea6 1 \u8336\u5319\uff09 \u767e\u91cc\u9999\u7c89 1g\uff08\u7ea6 0.5 \u8336\u5319\uff09 \u59dc\u7c89 1g\uff08\u7ea6 0.5 \u8336\u5319\uff09 \u8ff7\u8fed\u9999\u7c89 1-2g\uff08\u7ea6 0.5-1 \u8336\u5319\uff09 \uff08\u53ef\u9009\uff09\u767d\u80e1\u6912\u7c89 1g\uff08\u7ea6 0.5 \u8336\u5319\uff09 \uff08\u53ef\u9009\uff09\u5e72\u8fa3\u6912\u788e 2.5-10g\uff08\u7ea6 1-4 \u8336\u5319\uff0c\u6839\u636e\u53e3\u5473\u8fa3\u5ea6\u9009\u62e9\uff09","title":"\u83dc\u54c1\u5b9e\u6218\u793a\u4f8b"},{"location":"tips/learn/%E5%AD%A6%E4%B9%A0%E8%92%B8/","text":"\u84b8 \u65b9\u5f0f \u84b8\u9505 \u84b8\u9505\u4e3a\u591a\u5c42\u7ed3\u6784\uff0c\u6700\u5e95\u90e8\u7528\u4e8e\u76db\u6c34\uff0c\u5229\u7528\u6c34\u5f00\u540e\u4ea7\u751f\u7684\u6c34\u84b8\u6c14\u7684\u70ed\u91cf\uff0c\u52a0\u70ed\u4e0a\u5c42\u98df\u7269\u3002 \u84b8\u9505\u6700\u5e95\u5c42\u52a0\u5165\u9002\u91cf\u6c34\u2014\u2014\u5c06\u98df\u7269\u653e\u4e8e\u4e0a\u5c42\u84b8\u5c49\u4e2d\u2014\u2014\u84b8\u9505\u653e\u4e8e\u706b\u4e0a\u52a0\u70ed \u94c1\u9505 \u5982\u679c\u6ca1\u6709\u84b8\u9505\uff0c\u53ea\u6709\u666e\u901a\u7684\u94c1\u9505\uff08\u975e\u5e73\u5e95\u9505\uff09\uff0c\u53ef\u4ee5\u5728\u9505\u5e95\u653e\u7f6e\u4e00\u4e2a\u4e09\u811a\u67b6\uff0c\u5e76\u6ce8\u5165\u8db3\u591f\u7684\u6c34\uff0c\u4ee5\u6b64\u8fbe\u5230\u7c7b\u4f3c\u4e8e\u84b8\u9505\u7684\u6548\u679c\u3002 \u94c1\u9505\u5e95\u90e8\u52a0\u5165\u8db3\u91cf\u6c34\u2014\u2014\u2014\u653e\u5165\u4e09\u811a\u67b6\u2014\u2014\u2014\u5c06\u98df\u7269\u7f6e\u4e8e\u4e09\u811a\u67b6\u4e0a\u2014\u2014\u2014\u5f00\u706b\u5173\u76d6 \u6ce8\u610f\u4e8b\u9879 \u7531\u4e8e\u70ed\u6e90\u4e3a\u6c34\u84b8\u6c14\uff0c\u8f83\u4f4e\u7684\u84b8\u5c49\u4e2d\u7684\u98df\u7269\u5e95\u90e8\u53ef\u80fd\u88ab\u6c34\u6d78\u6e7f\u3002\u53ef\u5c06\u84b8\u7b3c\u5e03\u653e\u5728\u98df\u7269\u5e95\u4e0b\u4ee5\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\u3002\u7528\u7b77\u5b50\u642d\u4e2a\u653e\u98df\u7269\u7684\u7b80\u6613\u652f\u67b6\u4e5f\u53ef\u4ee5\u3002 \u53ef\u4ee5\u5229\u7528\u667a\u80fd\u8bbe\u5907\u8bbe\u7f6e\u8ba1\u65f6\u5668\uff0c\u63d0\u9192\u5173\u706b\uff0c\u4ee5\u9632\u5fd8\u8bb0\u4ee5\u81f4\u70e7\u5e72\u3002 \u5728\u4f7f\u7528\u84b8\u7b3c\u5236\u4f5c\u98df\u54c1\u7684\u8fc7\u7a0b\u4e2d\uff0c\u9700\u8981\u6ce8\u610f\u5e95\u90e8\u533a\u57df\u7684\u5269\u4f59\u6c34\u91cf\uff0c \u7279\u522b\u662f\u94c1\u9505 \uff0c\u907f\u514d\u5e72\u9505\u4ece\u800c\u9020\u6210\u5b89\u5168\u95ee\u9898\u3002 \uff08\u53ef\u9009\uff09\u4f7f\u7528\u94c1\u9505\u84b8\u98df\u7269\u65f6\uff0c\u53ef\u4ee5\u5728\u4e09\u811a\u67b6\u4e0a\u9762\u653e\u7f6e\u4e00\u4e2a \u84b8\u76d8 \u3002","title":"\u5b66\u4e60\u84b8"},{"location":"tips/learn/%E5%AD%A6%E4%B9%A0%E8%92%B8/#_1","text":"","title":"\u84b8"},{"location":"tips/learn/%E5%AD%A6%E4%B9%A0%E8%92%B8/#_2","text":"","title":"\u65b9\u5f0f"},{"location":"tips/learn/%E5%AD%A6%E4%B9%A0%E8%92%B8/#_3","text":"\u84b8\u9505\u4e3a\u591a\u5c42\u7ed3\u6784\uff0c\u6700\u5e95\u90e8\u7528\u4e8e\u76db\u6c34\uff0c\u5229\u7528\u6c34\u5f00\u540e\u4ea7\u751f\u7684\u6c34\u84b8\u6c14\u7684\u70ed\u91cf\uff0c\u52a0\u70ed\u4e0a\u5c42\u98df\u7269\u3002 \u84b8\u9505\u6700\u5e95\u5c42\u52a0\u5165\u9002\u91cf\u6c34\u2014\u2014\u5c06\u98df\u7269\u653e\u4e8e\u4e0a\u5c42\u84b8\u5c49\u4e2d\u2014\u2014\u84b8\u9505\u653e\u4e8e\u706b\u4e0a\u52a0\u70ed","title":"\u84b8\u9505"},{"location":"tips/learn/%E5%AD%A6%E4%B9%A0%E8%92%B8/#_4","text":"\u5982\u679c\u6ca1\u6709\u84b8\u9505\uff0c\u53ea\u6709\u666e\u901a\u7684\u94c1\u9505\uff08\u975e\u5e73\u5e95\u9505\uff09\uff0c\u53ef\u4ee5\u5728\u9505\u5e95\u653e\u7f6e\u4e00\u4e2a\u4e09\u811a\u67b6\uff0c\u5e76\u6ce8\u5165\u8db3\u591f\u7684\u6c34\uff0c\u4ee5\u6b64\u8fbe\u5230\u7c7b\u4f3c\u4e8e\u84b8\u9505\u7684\u6548\u679c\u3002 \u94c1\u9505\u5e95\u90e8\u52a0\u5165\u8db3\u91cf\u6c34\u2014\u2014\u2014\u653e\u5165\u4e09\u811a\u67b6\u2014\u2014\u2014\u5c06\u98df\u7269\u7f6e\u4e8e\u4e09\u811a\u67b6\u4e0a\u2014\u2014\u2014\u5f00\u706b\u5173\u76d6","title":"\u94c1\u9505"},{"location":"tips/learn/%E5%AD%A6%E4%B9%A0%E8%92%B8/#_5","text":"\u7531\u4e8e\u70ed\u6e90\u4e3a\u6c34\u84b8\u6c14\uff0c\u8f83\u4f4e\u7684\u84b8\u5c49\u4e2d\u7684\u98df\u7269\u5e95\u90e8\u53ef\u80fd\u88ab\u6c34\u6d78\u6e7f\u3002\u53ef\u5c06\u84b8\u7b3c\u5e03\u653e\u5728\u98df\u7269\u5e95\u4e0b\u4ee5\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\u3002\u7528\u7b77\u5b50\u642d\u4e2a\u653e\u98df\u7269\u7684\u7b80\u6613\u652f\u67b6\u4e5f\u53ef\u4ee5\u3002 \u53ef\u4ee5\u5229\u7528\u667a\u80fd\u8bbe\u5907\u8bbe\u7f6e\u8ba1\u65f6\u5668\uff0c\u63d0\u9192\u5173\u706b\uff0c\u4ee5\u9632\u5fd8\u8bb0\u4ee5\u81f4\u70e7\u5e72\u3002 \u5728\u4f7f\u7528\u84b8\u7b3c\u5236\u4f5c\u98df\u54c1\u7684\u8fc7\u7a0b\u4e2d\uff0c\u9700\u8981\u6ce8\u610f\u5e95\u90e8\u533a\u57df\u7684\u5269\u4f59\u6c34\u91cf\uff0c \u7279\u522b\u662f\u94c1\u9505 \uff0c\u907f\u514d\u5e72\u9505\u4ece\u800c\u9020\u6210\u5b89\u5168\u95ee\u9898\u3002 \uff08\u53ef\u9009\uff09\u4f7f\u7528\u94c1\u9505\u84b8\u98df\u7269\u65f6\uff0c\u53ef\u4ee5\u5728\u4e09\u811a\u67b6\u4e0a\u9762\u653e\u7f6e\u4e00\u4e2a \u84b8\u76d8 \u3002","title":"\u6ce8\u610f\u4e8b\u9879"},{"location":"tips/learn/%E5%BE%AE%E6%B3%A2%E7%82%89/","text":"\u4f7f\u7528\u5fae\u6ce2\u7089 \u4ec0\u4e48\u662f\u5fae\u6ce2\u7089 \u5fae\u6ce2\u7089\u662f 1945 \u5e74\u7531 \u73c0\u897f\u00b7\u52d2\u5df4\u6717\u00b7\u65af\u5bbe\u585e \u53d1\u660e\u7684\u3002 \u4ed6\u5728\u62c5\u4efb\u96f7\u8fbe\u7cfb\u7edf\u5de5\u7a0b\u5e08\u65f6\uff0c\u7531\u4e8e\u53d1\u73b0\u96f7\u8fbe\u4e00\u5f00\u542f\u4ed6\u53e3\u888b\u91cc\u7684\u5de7\u514b\u529b\u68d2\u5c31\u5f00\u59cb\u878d\u5316\uff0c\u4ece\u800c\u4ea7\u751f\u6784\u60f3\u5e76\u53d1\u660e\u7684\u3002 \u5de5\u4f5c\u65b9\u5f0f \u5fae\u6ce2\u65f6\u901a\u8fc7\u78c1\u63a7\u7ba1\u5236\u9020\u7684\u9891\u7387 24.5 \u4ebf\u8d6b\u5179\u7684\u7535\u78c1\u6ce2\uff0c\u8fd9\u4e2a\u9891\u7387\u4f1a\u4f7f\u6c34\u548c\u6cb9\u7684\u5206\u5b50\u632f\u52a8\u5e76\u53d1\u70ed\u3002 \u6d41\u7a0b \u5fae\u6ce2\u7089\u5728\u5f88\u591a\u70f9\u996a\u4efb\u52a1\u4e2d\u6548\u679c\u76f8\u5f53\u51fa\u8272\u3002 \u5f3a\u706b\u9002\u7528\u4e8e\uff1a [\u70f9\u716e] \u70f9\u716e\u852c\u83dc [\u70f9\u716e] \u8f6f\u5316\u542b\u6c34\u7387\u9ad8\u7684\u786c\u8d28\u852c\u83dc\uff08\u5982\u9a6c\u94c3\u85af\u3001\u6d0b\u8471\u548c\u671d\u9c9c\u84df\uff09 [\u81a8\u5316] \u7206\u70b9\u5fc3\uff0c\u5982\u6ce1\u8299\u3001\u5370\u5ea6\u5e15\u5e15\u8fbe\u59c6\u8584\u8106\u997c\u3001\u7206\u7c73\u82b1\u3002 \u4e2d\u706b\u9002\u7528\u4e8e\uff1a [\u70f9\u716e] \u6d77\u9c9c \uff08\u4f8b\u5982 \u5fae\u6ce2\u8471\u59dc\u9ed1\u9cd5\u9c7c \uff09 [\u70f9\u716e] \u8f6f\u5316\u8089\u7c7b [\u8131\u6c34] \u5e72\u71e5\u852c\u679c\u76ae [\u8131\u6c34] \u5236\u4f5c\u8089\u5e72 [\u70b8] \u70b8\u8106\u9999\u6599\u690d\u7269 [\u70b8] \u8f6f\u5316\u53f6\u7c7b\u852c\u83dc [\u52a0\u70ed] \u52a0\u70ed\u5269\u83dc \u5f31\u706b\u7528\u4e8e\uff1a [\u89e3\u51bb] \u89e3\u51bb\u98df\u7269 [\u89e3\u51bb] \u878d\u5316\u9ec4\u6cb9\u548c\u5de7\u514b\u529b \u6ce8\u610f\u4e8b\u9879 \u7531\u4e8e\u5fae\u6ce2\u7684\u6ce2\u957f\u4e3a 12.2 cm\uff0c\u56e0\u6b64\u5fae\u6ce2\u7089\u52a0\u70ed\u5c0f\u7269\u4f53\u7684\u901f\u5ea6\u8981\u6bd4\u5927\u7269\u4f53\u6162\u3002\u56e0\u6b64\u5982\u679c\u662f\u5f88\u5c0f\u7684\u98df\u6750\uff0c\u5efa\u8bae\u805a\u96c6\u5728\u4e00\u8d77\u8fdb\u884c\u52a0\u70ed\u3002 \u5fae\u6ce2\u4ec5\u80fd\u6df1\u5165\u98df\u7269\u51e0\u5398\u7c73\uff0c\u56e0\u6b64\u6709\u65f6\u5019\u5916\u90e8\u5f88\u70eb\u4e86\uff0c\u5185\u90e8\u53ef\u80fd\u8fd8\u662f\u51b0\u51c9\u7684\u3002\u89e3\u51b3\u529e\u6cd5\u662f\u5c06\u98df\u6750\u52a0\u4e0a\u5c11\u91cf\u6db2\u4f53\u653e\u8fdb\u5bc6\u5c01\u888b\uff0c\u6216\u653e\u5165\u7897\u4e2d\u540e\u8499\u4e0a\u4fdd\u9c9c\u819c\uff0c\u8ba9\u5bb9\u5668\u5185\u4ea7\u751f\u8db3\u591f\u7684\u84b8\u6c7d\u6765\u5f25\u8865\u5fae\u6ce2\u7089\u5bb9\u6613\u70f9\u996a\u4e0d\u5747\u7684\u7f3a\u70b9\u3002 tips\uff1a\u6253\u5f00\u5bc6\u5c01\u888b\u65f6\uff0c\u5f53\u5fc3\u84b8\u6c7d\u55b7\u51fa \u5fae\u6ce2\u53ea\u80fd\u52a0\u70ed\u6c34\u548c\u6cb9\uff0c\u56e0\u6b64\u4fdd\u9c9c\u819c\u548c\u5bc6\u5c01\u888b\u90fd\u4e0d\u4f1a\u88ab\u5fae\u6ce2\u52a0\u70ed\u3002\u4f46\u542b\u91d1\u5c5e\u7684\u76d8\u5b50\u4f1a\u53d8\u70eb\u751a\u81f3\u7834\u88c2\uff0c\u8bf7\u52a1\u5fc5\u4f7f\u7528\u74f7\u3001\u73bb\u7483\u5bb9\u5668\u6216\u5fae\u6ce2\u7089\u4e13\u7528\u70e4\u76d8\u3002","title":"\u5fae\u6ce2\u7089"},{"location":"tips/learn/%E5%BE%AE%E6%B3%A2%E7%82%89/#_1","text":"","title":"\u4f7f\u7528\u5fae\u6ce2\u7089"},{"location":"tips/learn/%E5%BE%AE%E6%B3%A2%E7%82%89/#_2","text":"\u5fae\u6ce2\u7089\u662f 1945 \u5e74\u7531 \u73c0\u897f\u00b7\u52d2\u5df4\u6717\u00b7\u65af\u5bbe\u585e \u53d1\u660e\u7684\u3002 \u4ed6\u5728\u62c5\u4efb\u96f7\u8fbe\u7cfb\u7edf\u5de5\u7a0b\u5e08\u65f6\uff0c\u7531\u4e8e\u53d1\u73b0\u96f7\u8fbe\u4e00\u5f00\u542f\u4ed6\u53e3\u888b\u91cc\u7684\u5de7\u514b\u529b\u68d2\u5c31\u5f00\u59cb\u878d\u5316\uff0c\u4ece\u800c\u4ea7\u751f\u6784\u60f3\u5e76\u53d1\u660e\u7684\u3002","title":"\u4ec0\u4e48\u662f\u5fae\u6ce2\u7089"},{"location":"tips/learn/%E5%BE%AE%E6%B3%A2%E7%82%89/#_3","text":"\u5fae\u6ce2\u65f6\u901a\u8fc7\u78c1\u63a7\u7ba1\u5236\u9020\u7684\u9891\u7387 24.5 \u4ebf\u8d6b\u5179\u7684\u7535\u78c1\u6ce2\uff0c\u8fd9\u4e2a\u9891\u7387\u4f1a\u4f7f\u6c34\u548c\u6cb9\u7684\u5206\u5b50\u632f\u52a8\u5e76\u53d1\u70ed\u3002","title":"\u5de5\u4f5c\u65b9\u5f0f"},{"location":"tips/learn/%E5%BE%AE%E6%B3%A2%E7%82%89/#_4","text":"\u5fae\u6ce2\u7089\u5728\u5f88\u591a\u70f9\u996a\u4efb\u52a1\u4e2d\u6548\u679c\u76f8\u5f53\u51fa\u8272\u3002 \u5f3a\u706b\u9002\u7528\u4e8e\uff1a [\u70f9\u716e] \u70f9\u716e\u852c\u83dc [\u70f9\u716e] \u8f6f\u5316\u542b\u6c34\u7387\u9ad8\u7684\u786c\u8d28\u852c\u83dc\uff08\u5982\u9a6c\u94c3\u85af\u3001\u6d0b\u8471\u548c\u671d\u9c9c\u84df\uff09 [\u81a8\u5316] \u7206\u70b9\u5fc3\uff0c\u5982\u6ce1\u8299\u3001\u5370\u5ea6\u5e15\u5e15\u8fbe\u59c6\u8584\u8106\u997c\u3001\u7206\u7c73\u82b1\u3002 \u4e2d\u706b\u9002\u7528\u4e8e\uff1a [\u70f9\u716e] \u6d77\u9c9c \uff08\u4f8b\u5982 \u5fae\u6ce2\u8471\u59dc\u9ed1\u9cd5\u9c7c \uff09 [\u70f9\u716e] \u8f6f\u5316\u8089\u7c7b [\u8131\u6c34] \u5e72\u71e5\u852c\u679c\u76ae [\u8131\u6c34] \u5236\u4f5c\u8089\u5e72 [\u70b8] \u70b8\u8106\u9999\u6599\u690d\u7269 [\u70b8] \u8f6f\u5316\u53f6\u7c7b\u852c\u83dc [\u52a0\u70ed] \u52a0\u70ed\u5269\u83dc \u5f31\u706b\u7528\u4e8e\uff1a [\u89e3\u51bb] \u89e3\u51bb\u98df\u7269 [\u89e3\u51bb] \u878d\u5316\u9ec4\u6cb9\u548c\u5de7\u514b\u529b","title":"\u6d41\u7a0b"},{"location":"tips/learn/%E5%BE%AE%E6%B3%A2%E7%82%89/#_5","text":"\u7531\u4e8e\u5fae\u6ce2\u7684\u6ce2\u957f\u4e3a 12.2 cm\uff0c\u56e0\u6b64\u5fae\u6ce2\u7089\u52a0\u70ed\u5c0f\u7269\u4f53\u7684\u901f\u5ea6\u8981\u6bd4\u5927\u7269\u4f53\u6162\u3002\u56e0\u6b64\u5982\u679c\u662f\u5f88\u5c0f\u7684\u98df\u6750\uff0c\u5efa\u8bae\u805a\u96c6\u5728\u4e00\u8d77\u8fdb\u884c\u52a0\u70ed\u3002 \u5fae\u6ce2\u4ec5\u80fd\u6df1\u5165\u98df\u7269\u51e0\u5398\u7c73\uff0c\u56e0\u6b64\u6709\u65f6\u5019\u5916\u90e8\u5f88\u70eb\u4e86\uff0c\u5185\u90e8\u53ef\u80fd\u8fd8\u662f\u51b0\u51c9\u7684\u3002\u89e3\u51b3\u529e\u6cd5\u662f\u5c06\u98df\u6750\u52a0\u4e0a\u5c11\u91cf\u6db2\u4f53\u653e\u8fdb\u5bc6\u5c01\u888b\uff0c\u6216\u653e\u5165\u7897\u4e2d\u540e\u8499\u4e0a\u4fdd\u9c9c\u819c\uff0c\u8ba9\u5bb9\u5668\u5185\u4ea7\u751f\u8db3\u591f\u7684\u84b8\u6c7d\u6765\u5f25\u8865\u5fae\u6ce2\u7089\u5bb9\u6613\u70f9\u996a\u4e0d\u5747\u7684\u7f3a\u70b9\u3002 tips\uff1a\u6253\u5f00\u5bc6\u5c01\u888b\u65f6\uff0c\u5f53\u5fc3\u84b8\u6c7d\u55b7\u51fa \u5fae\u6ce2\u53ea\u80fd\u52a0\u70ed\u6c34\u548c\u6cb9\uff0c\u56e0\u6b64\u4fdd\u9c9c\u819c\u548c\u5bc6\u5c01\u888b\u90fd\u4e0d\u4f1a\u88ab\u5fae\u6ce2\u52a0\u70ed\u3002\u4f46\u542b\u91d1\u5c5e\u7684\u76d8\u5b50\u4f1a\u53d8\u70eb\u751a\u81f3\u7834\u88c2\uff0c\u8bf7\u52a1\u5fc5\u4f7f\u7528\u74f7\u3001\u73bb\u7483\u5bb9\u5668\u6216\u5fae\u6ce2\u7089\u4e13\u7528\u70e4\u76d8\u3002","title":"\u6ce8\u610f\u4e8b\u9879"},{"location":"tips/learn/%E9%A3%9F%E5%93%81%E5%AE%89%E5%85%A8/","text":"\u98df\u54c1\u5b89\u5168 \u4e2d\u6bd2 \u4ee5\u4e0b\u98df\u7269\u6709\u9020\u6210\u4e2d\u6bd2\u7684\u98ce\u9669\uff1a \u672a\u6210\u719f\u7684\u9752\u897f\u7ea2\u67ff \u672a\u70f9\u996a\u719f\u7684\u56db\u5b63\u8c46 \u672a\u716e\u719f\u7684\u8c46\u89d2 \u53d1\u82bd\u7684\u571f\u8c46 \u751f\u8c46\u6d46 \u6ce1\u53d1\u65f6\u95f4\u8fc7\u957f\u7684\u6728\u8033 \u672a\u70f9\u996a\u719f\u7684\u52a8\u7269\u5185\u810f \u2026\u2026\uff08\u6b22\u8fce\u8865\u5145\uff09 \u6c99\u95e8\u6c0f\u83cc\u611f\u67d3 \u6c99\u95e8\u6c0f\u83cc\u8f83\u5e38\u89c1\u4e8e\u52a8\u7269\u6e90\u6027\u98df\u7269\uff0c\u5305\u62ec\u852c\u83dc\u4e5f\u53ef\u80fd\u56e0\u53d7\u7caa\u4fbf\u6c61\u67d3\u800c\u542b\u6709\u6c99\u95e8\u6c0f\u83cc\u3002 \u4e0b\u5217\u98df\u54c1\u6709\u9020\u6210\u6c99\u95e8\u6c0f\u83cc\u611f\u67d3\u7684\u98ce\u9669\uff1a \u672a\u5b8c\u5168\u716e\u719f\u7684\u86cb \u672a\u5b8c\u5168\u716e\u719f\u7684\u8089 \u672a\u7ecf\u8fc7\u6740\u83cc\u7684\u5976 \u9ec4\u66f2\u9709\u7d20 \u9ec4\u66f2\u9709\u7d20\u5e38\u7531\u9ec4\u66f2\u9709\u53ca\u5bc4\u751f\u66f2\u9709\u7b49\u53e6\u5916\u51e0\u79cd\u9709\u83cc\u5728\u9709\u53d8\u7684\u8c37\u7269\u4e2d\u4ea7\u751f\uff0c\u5982\u5927\u7c73\u3001\u8c46\u7c7b\u3001\u82b1\u751f\u7b49\uff0c\u662f\u76ee\u524d\u4e3a\u6b62\u6700\u5f3a\u7684\u81f4\u764c\u7269\u8d28\u3002\u52a0\u70ed\u81f3 280\u2103\u4ee5\u4e0a\u624d\u5f00\u59cb\u5206\u89e3\uff0c\u6240\u4ee5\u4e00\u822c\u7684\u52a0\u70ed\u4e0d\u6613\u7834\u574f\u5176\u7ed3\u6784\u3002 \u4e0b\u5217\u98df\u54c1\u6709\u9020\u6210\u9ec4\u66f2\u9709\u7d20\u4e2d\u6bd2\u7684\u98ce\u9669\uff1a \u8150\u574f\u7684\u82b1\u751f \u8150\u574f\u7684\u5927\u7c73 \u8150\u574f\u7684\u7389\u7c73 \u5bc4\u751f\u866b \u5bc4\u751f\u866b\u53ef\u901a\u8fc7\u7a7a\u6c14\uff0c\u996e\u7528\u6c34\uff0c\u98df\u7269\u548c\u76f4\u63a5\u63a5\u89e6\u8fdb\u5165\u4eba\u4f53\u3002\u82e5\u5bc4\u751f\u866b\u8fdb\u5165\u4eba\u4f53\u5faa\u73af\u7cfb\u7edf\uff0c\u4e00\u65b9\u9762\u53ef\u4ee5\u653b\u51fb\u767d\u7ec6\u80de\uff0c\u53e6\u4e00\u65b9\u9762\u53ef\u8fbe\u80ba\u3001\u809d\u7b49\u810f\u5668\u6216\u662f\u5835\u585e\u8840\u7ba1\u6216\u6dcb\u5df4\u7ba1\u9053\uff0c\u4f1a\u5f15\u8d77\u5982\u809d\u786c\u5316\u3001\u95e8\u8109\u9ad8\u538b\u3001\u8c61\u76ae\u75c5\u7b49\u75be\u75c5\u3002\u800c\u4eba\u5982\u679c\u662f\u732a\u8089\u7ee6\u866b\u7684\u4e2d\u95f4\u5bbf\u4e3b\uff0c\u5bc4\u751f\u866b\u751a\u81f3\u4f1a\u8fbe\u773c\u7403\u3001\u5fc3\u810f\u548c\u5927\u8111\uff0c\u5371\u53ca\u751f\u547d\u3002 \u4e0b\u5217\u98df\u54c1\u6700\u597d\u786e\u4fdd\u5b8c\u5168\u70e7\u719f\uff0c\u5426\u5219\u53ef\u80fd\u5728\u4f53\u5185\u7559\u4e0b\u76f8\u5e94\u7684\u5bc4\u751f\u866b\uff1a \u7530\u87ba\uff1a\u7ba1\u5706\u7ebf\u866b \u751f\u9c7c\u7247\uff1a\u809d\u5438\u866b \u9ec4\u9cdd\uff1a\u989a\u53e3\u7ebf\u866b \u725b\u86d9\uff1a\u66fc\u6c0f\u88c2\u5934\u86b4\u5bc4\u751f\u866b \u732a\u8089\uff1a\u732a\u8089\u7ee6\u866b \u725b\u8089\uff1a\u725b\u8089\u7ee6\u866b \u98df\u54c1\u5b89\u5168\u6e29\u5ea6 \u901a\u8fc7\u8db3\u591f\u7684\u6e29\u5ea6\u52a0\u70ed\u98df\u7269\u5e76\u4fdd\u6301\u4e00\u5b9a\u7684\u65f6\u95f4\uff0c\u53ef\u4ee5\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u51cf\u5c0f\u7ec6\u83cc\u3001\u5bc4\u751f\u866b\u5b58\u6d3b\u7684\u98ce\u9669\u3002 \u5404\u7c7b\u98df\u54c1\u6709\u4e0d\u540c\u7684\u6e29\u5ea6\u8981\u6c42\uff0c\u70f9\u996a\u8005\u6d4b\u91cf\u6e29\u5ea6\u5e94\u8be5\u4f7f\u7528\u53a8\u623f\u7528\u6e29\u5ea6\u8ba1\u6d4b\u91cf\u98df\u7269\u4e2d\u5fc3\u6e29\u5ea6\u3002 \u6d4b\u91cf\u6e29\u5ea6\u5e94\u8be5\u4f7f\u7528\uff1a\u53a8\u623f\u7528\u6e29\u5ea6\u8ba1 \u6d4b\u91cf\u98df\u7269\u4e2d\u5fc3\u6e29\u5ea6 \u4e0b\u5217\u662f\u4e1a\u754c\u6807\u51c6\u7684\u98df\u7269\u5b89\u5168\u6e29\u5ea6\uff1a \u732a\u8089 \u6574\u5757\uff1a71\u00b0C \u788e\u8089\uff1a71\u00b0C \u79bd\u7c7b \u6574\u5757\uff1a74\u00b0C \u788e\u8089\uff1a74\u00b0C \u5168\u53ea\uff1a85\u00b0C \u725b\u8089*\u7f8a\u8089 \u6574\u5757\uff1a 3 \u5206\u719f\uff1a63\u00b0C 5 \u5206\u719f\uff1a71\u00b0C 7 \u5206\u719f\uff1a77\u00b0C \u788e\u8089\uff1a71\u00b0C \u86cb\u7c7b\uff1a74\u00b0C \u5269\u83dc\u518d\u52a0\u70ed\uff1a74\u00b0C","title":"\u98df\u54c1\u5b89\u5168"},{"location":"tips/learn/%E9%A3%9F%E5%93%81%E5%AE%89%E5%85%A8/#_1","text":"","title":"\u98df\u54c1\u5b89\u5168"},{"location":"tips/learn/%E9%A3%9F%E5%93%81%E5%AE%89%E5%85%A8/#_2","text":"\u4ee5\u4e0b\u98df\u7269\u6709\u9020\u6210\u4e2d\u6bd2\u7684\u98ce\u9669\uff1a \u672a\u6210\u719f\u7684\u9752\u897f\u7ea2\u67ff \u672a\u70f9\u996a\u719f\u7684\u56db\u5b63\u8c46 \u672a\u716e\u719f\u7684\u8c46\u89d2 \u53d1\u82bd\u7684\u571f\u8c46 \u751f\u8c46\u6d46 \u6ce1\u53d1\u65f6\u95f4\u8fc7\u957f\u7684\u6728\u8033 \u672a\u70f9\u996a\u719f\u7684\u52a8\u7269\u5185\u810f \u2026\u2026\uff08\u6b22\u8fce\u8865\u5145\uff09","title":"\u4e2d\u6bd2"},{"location":"tips/learn/%E9%A3%9F%E5%93%81%E5%AE%89%E5%85%A8/#_3","text":"\u6c99\u95e8\u6c0f\u83cc\u8f83\u5e38\u89c1\u4e8e\u52a8\u7269\u6e90\u6027\u98df\u7269\uff0c\u5305\u62ec\u852c\u83dc\u4e5f\u53ef\u80fd\u56e0\u53d7\u7caa\u4fbf\u6c61\u67d3\u800c\u542b\u6709\u6c99\u95e8\u6c0f\u83cc\u3002 \u4e0b\u5217\u98df\u54c1\u6709\u9020\u6210\u6c99\u95e8\u6c0f\u83cc\u611f\u67d3\u7684\u98ce\u9669\uff1a \u672a\u5b8c\u5168\u716e\u719f\u7684\u86cb \u672a\u5b8c\u5168\u716e\u719f\u7684\u8089 \u672a\u7ecf\u8fc7\u6740\u83cc\u7684\u5976","title":"\u6c99\u95e8\u6c0f\u83cc\u611f\u67d3"},{"location":"tips/learn/%E9%A3%9F%E5%93%81%E5%AE%89%E5%85%A8/#_4","text":"\u9ec4\u66f2\u9709\u7d20\u5e38\u7531\u9ec4\u66f2\u9709\u53ca\u5bc4\u751f\u66f2\u9709\u7b49\u53e6\u5916\u51e0\u79cd\u9709\u83cc\u5728\u9709\u53d8\u7684\u8c37\u7269\u4e2d\u4ea7\u751f\uff0c\u5982\u5927\u7c73\u3001\u8c46\u7c7b\u3001\u82b1\u751f\u7b49\uff0c\u662f\u76ee\u524d\u4e3a\u6b62\u6700\u5f3a\u7684\u81f4\u764c\u7269\u8d28\u3002\u52a0\u70ed\u81f3 280\u2103\u4ee5\u4e0a\u624d\u5f00\u59cb\u5206\u89e3\uff0c\u6240\u4ee5\u4e00\u822c\u7684\u52a0\u70ed\u4e0d\u6613\u7834\u574f\u5176\u7ed3\u6784\u3002 \u4e0b\u5217\u98df\u54c1\u6709\u9020\u6210\u9ec4\u66f2\u9709\u7d20\u4e2d\u6bd2\u7684\u98ce\u9669\uff1a \u8150\u574f\u7684\u82b1\u751f \u8150\u574f\u7684\u5927\u7c73 \u8150\u574f\u7684\u7389\u7c73","title":"\u9ec4\u66f2\u9709\u7d20"},{"location":"tips/learn/%E9%A3%9F%E5%93%81%E5%AE%89%E5%85%A8/#_5","text":"\u5bc4\u751f\u866b\u53ef\u901a\u8fc7\u7a7a\u6c14\uff0c\u996e\u7528\u6c34\uff0c\u98df\u7269\u548c\u76f4\u63a5\u63a5\u89e6\u8fdb\u5165\u4eba\u4f53\u3002\u82e5\u5bc4\u751f\u866b\u8fdb\u5165\u4eba\u4f53\u5faa\u73af\u7cfb\u7edf\uff0c\u4e00\u65b9\u9762\u53ef\u4ee5\u653b\u51fb\u767d\u7ec6\u80de\uff0c\u53e6\u4e00\u65b9\u9762\u53ef\u8fbe\u80ba\u3001\u809d\u7b49\u810f\u5668\u6216\u662f\u5835\u585e\u8840\u7ba1\u6216\u6dcb\u5df4\u7ba1\u9053\uff0c\u4f1a\u5f15\u8d77\u5982\u809d\u786c\u5316\u3001\u95e8\u8109\u9ad8\u538b\u3001\u8c61\u76ae\u75c5\u7b49\u75be\u75c5\u3002\u800c\u4eba\u5982\u679c\u662f\u732a\u8089\u7ee6\u866b\u7684\u4e2d\u95f4\u5bbf\u4e3b\uff0c\u5bc4\u751f\u866b\u751a\u81f3\u4f1a\u8fbe\u773c\u7403\u3001\u5fc3\u810f\u548c\u5927\u8111\uff0c\u5371\u53ca\u751f\u547d\u3002 \u4e0b\u5217\u98df\u54c1\u6700\u597d\u786e\u4fdd\u5b8c\u5168\u70e7\u719f\uff0c\u5426\u5219\u53ef\u80fd\u5728\u4f53\u5185\u7559\u4e0b\u76f8\u5e94\u7684\u5bc4\u751f\u866b\uff1a \u7530\u87ba\uff1a\u7ba1\u5706\u7ebf\u866b \u751f\u9c7c\u7247\uff1a\u809d\u5438\u866b \u9ec4\u9cdd\uff1a\u989a\u53e3\u7ebf\u866b \u725b\u86d9\uff1a\u66fc\u6c0f\u88c2\u5934\u86b4\u5bc4\u751f\u866b \u732a\u8089\uff1a\u732a\u8089\u7ee6\u866b \u725b\u8089\uff1a\u725b\u8089\u7ee6\u866b","title":"\u5bc4\u751f\u866b"},{"location":"tips/learn/%E9%A3%9F%E5%93%81%E5%AE%89%E5%85%A8/#_6","text":"\u901a\u8fc7\u8db3\u591f\u7684\u6e29\u5ea6\u52a0\u70ed\u98df\u7269\u5e76\u4fdd\u6301\u4e00\u5b9a\u7684\u65f6\u95f4\uff0c\u53ef\u4ee5\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u51cf\u5c0f\u7ec6\u83cc\u3001\u5bc4\u751f\u866b\u5b58\u6d3b\u7684\u98ce\u9669\u3002 \u5404\u7c7b\u98df\u54c1\u6709\u4e0d\u540c\u7684\u6e29\u5ea6\u8981\u6c42\uff0c\u70f9\u996a\u8005\u6d4b\u91cf\u6e29\u5ea6\u5e94\u8be5\u4f7f\u7528\u53a8\u623f\u7528\u6e29\u5ea6\u8ba1\u6d4b\u91cf\u98df\u7269\u4e2d\u5fc3\u6e29\u5ea6\u3002 \u6d4b\u91cf\u6e29\u5ea6\u5e94\u8be5\u4f7f\u7528\uff1a\u53a8\u623f\u7528\u6e29\u5ea6\u8ba1 \u6d4b\u91cf\u98df\u7269\u4e2d\u5fc3\u6e29\u5ea6 \u4e0b\u5217\u662f\u4e1a\u754c\u6807\u51c6\u7684\u98df\u7269\u5b89\u5168\u6e29\u5ea6\uff1a \u732a\u8089 \u6574\u5757\uff1a71\u00b0C \u788e\u8089\uff1a71\u00b0C \u79bd\u7c7b \u6574\u5757\uff1a74\u00b0C \u788e\u8089\uff1a74\u00b0C \u5168\u53ea\uff1a85\u00b0C \u725b\u8089*\u7f8a\u8089 \u6574\u5757\uff1a 3 \u5206\u719f\uff1a63\u00b0C 5 \u5206\u719f\uff1a71\u00b0C 7 \u5206\u719f\uff1a77\u00b0C \u788e\u8089\uff1a71\u00b0C \u86cb\u7c7b\uff1a74\u00b0C \u5269\u83dc\u518d\u52a0\u70ed\uff1a74\u00b0C","title":"\u98df\u54c1\u5b89\u5168\u6e29\u5ea6"},{"location":"tips/learn/%E9%AB%98%E5%8E%8B%E5%8A%9B%E9%94%85/","text":"\u84b8\uff08\u7c73\uff09/\u7096\uff08\u4f7f\u7528\u7535\u996d\u7172/\u9ad8\u538b\u9505/\u7535\u538b\u529b\u9505\uff09 \u4ec0\u4e48\u662f\u538b\u529b\u9505 \u538b\u529b\u9505\u5176\u5b9e\u662f\u4e00\u822c\u7684\u9505\u52a0\u4e0a\u53ef\u9501\u7d27\u7684\u534a\u5bc6\u5c01\u76d6\uff0c\u76d6\u4e0a\u6709\u9600\u95e8\uff0c\u53ef\u7528\u4e8e\u63a7\u5236\u9505\u5185\u7684\u538b\u529b\u3002 \u5de5\u4f5c\u65b9\u5f0f \u538b\u529b\u9505\u7684\u5de5\u4f5c\u65b9\u5f0f\u662f\u8ba9\u84b8\u6c7d\u79ef\u805a\u5728\u9505\u4e2d\uff0c\u63d0\u9ad8\u9505\u5185\u7684\u538b\u529b\u3002\u9505\u5185\u538b\u529b\u63d0\u9ad8\u65f6\uff0c\u6c34\u7684\u6cb8\u70b9\u4e5f\u968f\u4e4b\u63d0\u9ad8\uff0c\u53ef\u4f7f\u542b\u6c34\u7684\u98df\u7269\u70f9\u716e\u6e29\u5ea6\u8d85\u8fc7 100 \u2103\u3002 \u4f18\u70b9 \u7531\u4e8e\u538b\u529b\u9505\u7684\u5b9e\u9645\u70f9\u996a\u6e29\u5ea6\u8f83\u9ad8\uff0c\u56e0\u6b64\u53ef\u4ee5\u5927\u5e45\u7f29\u77ed\u70f9\u996a\u65f6\u95f4\u3002 \u538b\u529b\u9505\u5185\u90e8\u7684\u9ad8\u6e29\u53ef\u4fc3\u8fdb\u8910\u53d8\u548c\u7126\u7cd6\u5316\uff0c\u80fd\u591f\u4ea7\u751f\u72ec\u6709\u7684\u98ce\u5473\u3002 \u6d41\u7a0b \u98df\u6750\u548c\u6c34\u653e\u5165\u5185\u80c6\u540e\u76d2\u76d6\uff0c \u786e\u4fdd\u9505\u4f53\u5bc6\u5c01 \uff0c\u52a0\u70ed\u3002 \u5bf9\u4e8e\u97e7\u6027\u8f83\u5927\u7684\u98df\u6750\uff0c\u5982\u8e44\u7b4b\u7c7b\u98df\u7269\uff0c\u4f7f\u7528\u9ad8\u538b\u9505\u53ef\u4ee5\u8f83\u8f7b\u677e\u5c06\u5176\u716e\u70c2\uff0c\u83b7\u5f97\u8f83\u597d\u53e3\u611f\u3002 \u538b\u529b\u9505\u901a\u5e38\u6709\u4e00\u4e2a\u81ea\u9501\u9600\uff08\u6d6e\u5b50\u9600\uff09\u3002\u5728\u84b8\u716e\u65f6\uff0c\u968f\u7740\u9505\u5185\u538b\u529b\u589e\u5927\uff0c\u81ea\u9501\u9600\u4f1a\u542f\u52a8\u5e76\u9501\u95ed\uff0c\u9694\u7edd\u9505\u5185\u4e0e\u9505\u5916\u6c14\u4f53\uff0c\u4e3a\u9505\u5185\u589e\u538b\u521b\u9020\u6761\u4ef6\u3002\u81ea\u9501\u9600\u542f\u52a8\u540e\u8fd8\u4f1a\u9501\u4f4f\u9505\u76d6\uff0c\u9632\u6b62\u5f3a\u884c\u6253\u5f00\uff0c\u8d77\u5230\u5b89\u5168\u4fdd\u969c\u4f5c\u7528\u3002\u5728\u84b8\u716e\u65f6\u9700\u8981\u786e\u8ba4\u81ea\u9501\u9600\u4e0d\u88ab\u5f02\u7269\u906e\u6321\uff0c\u8ba9\u9ad8\u538b\u9505\u6b63\u5e38\u5de5\u4f5c\u3002 \u5207\u6362\u81f3\u4fdd\u6e29\u72b6\u6001\u540e\uff0c \u901a\u8fc7\u6392\u6c14\u9600\u5c06\u9505\u5185\u84b8\u6c7d\u6392\u7a7a\u65b9\u53ef\u5f00\u76d6 \u6ce8\u610f\u4e8b\u9879 \u6c34\u84b8\u6c14\u5f88\u70eb\uff0c\u4e0d\u8981\u51d1\u5230\u6392\u6c14\u9600\u4e0a\u3002 \u70f9\u996a \u6d41\u8d28\u98df\u7269 \u7684\u8fc7\u7a0b\u4e2d\uff0c \u4e0d\u8981\u624b\u52a8\u6392\u6c14 \uff0c\u5c0f\u5fc3\u55b7\u6e85\uff08\u53ef\u4ee5\u5c06\u98df\u6750\u653e\u5165\u5bc6\u5c01\u7f50\u6216\u8005\u771f\u7a7a\u5305\u88c5\u888b\u4e2d\u518d\u7528\u9ad8\u538b\u9505\u70f9\u996a\uff09\u3002 \u70f9\u996a\u90e8\u5206\u83dc\u7cfb\uff08\u5982\u6c64\u7c7b\uff09\u624b\u52a8\u653e\u6c14 \u53ef\u80fd\u4f1a\u5f71\u54cd\u98df\u7269\u7684\u5473\u9053\u4ee5\u53ca\u53e3\u611f \u3002 \u5f00\u76d6\u524d\u9700\u786e\u8ba4\u84b8\u6c14\u5df2\u6392\u7a7a\u3002\u5f00\u76d6\u65f6\u8bf7\u52ff\u4e00\u6b21\u6027\u5168\u90e8\u6253\u5f00\uff0c\u5c24\u5176\u662f \u4e0d\u8981\u5bf9\u7740\u4eba\u6b63\u9762\u5f00\u76d6 \uff0c\u4ee5\u514d\u84b8\u6c14\u70eb\u4f24\u3002 \u84b8\u716e\u5b8c\u6210\u540e\uff0c\u968f\u7740\u9ad8\u538b\u9505\u5185\u6c14\u538b\u964d\u4f4e\u81f3\u4e0e\u5916\u754c\u6c14\u538b\u5e73\u8861\uff0c\u81ea\u9501\u9600\u4f1a\u677e\u5f00\u3002\u8fd9\u4e2a\u53ef\u4ee5\u4f5c\u4e3a\u9505\u76d6\u662f\u5426\u80fd\u6253\u5f00\u7684\u5224\u65ad\u6807\u5fd7\u3002 \u9ad8\u538b\u9505\u7684\u5bc6\u5c01\u4f9d\u8d56\u9505\u76d6\u91cc\u7684\u5bc6\u5c01\u6a61\u80f6\u5708\uff0c\u5bf9\u4e8e\u8001\u65e7\u7684\u9ad8\u538b\u9505\u9700\u8981\u68c0\u67e5\u5bc6\u5c01\u6a61\u80f6\u5708\u662f\u5426\u4ecd\u7136\u6709\u6548\u3002 \u786e\u8ba4\u6a61\u80f6\u5708\u5b8c\u5168\u5e72\u51c0\uff0c\u4efb\u4f55\u5fae\u7c92\u5361\u5728\u5176\u4e2d\u90fd\u53ef\u80fd\u7834\u574f\u5bc6\u95ed\u73af\u5883\u3002 \u5f88\u591a\u538b\u529b\u9505\u6709\u4e00\u4e2a\u5b89\u5168\u7ebf\uff0c\u6750\u6599\u548c\u6db2\u4f53\u4e0d\u5e94\u8be5\u8d85\u8fc7\u8fd9\u4e2a\u7ebf\uff0c\u592a\u591a\u7684\u98df\u6750\u548c\u6db2\u4f53\u53ef\u80fd\u4f1a\u8ba9\u6c34\u84b8\u6c14\u55b7\u6d8c\u5835\u585e\u6392\u6c14\u9600\uff0c\u6216\u55b7\u6e85\u51fa\u592a\u591a\u6c34\u84b8\u6c14\u4e0d\u597d\u6e05\u7406\u3002 \u6ca1\u6709\u5b89\u5168\u7ebf\u7684\u538b\u529b\u9505\uff0c\u6700\u597d\u4e5f\u4e0d\u8981\u8ba9\u6c34\u4f4d\u7ebf\u8d85\u8fc7\u9505\u4f53\u7684 2/3\u3002 \u4e0d\u8981\u4f7f\u7528\u9ad8\u538b\u9505\u70f9\u996a\u71d5\u9ea6\u6216\u8005\u6302\u9762\u7b49\u5bb9\u6613\u4ea7\u751f\u6ce1\u6cab\u7684\u98df\u7269 \u3002\u6ce1\u6cab\u53ef\u80fd\u4f1a\u963b\u585e\u84b8\u6c7d\u9600\u548c\u6cc4\u538b\u7ba1\u3002 \u70f9\u996a\u8fc7\u7a0b\u4e2d\uff0c\u5f53\u538b\u529b\u9600\u5347\u9ad8\u5e76\u55b7\u51fa\u84b8\u6c7d\u6216\u8005\u70df\u96fe\u65f6\uff0c\u8bf4\u660e\u9ad8\u538b\u9505\u5185\u90e8\u8fc7\u5ea6\u52a0\u538b\uff0c\u538b\u529b\u9600\u4e3a\u4e86\u4fdd\u8bc1\u5b89\u5168\uff0c\u91ca\u653e\u51fa\u4e86\u591a\u4f59\u7684\u538b\u529b\u3002\u5c3d\u7ba1\u55b7\u51fa\u7684\u84b8\u6c7d\u5e26\u6709\u6d53\u90c1\u7684\u9999\u5473\u4f1a\u5e26\u6765\u8f83\u9ad8\u7684\u6109\u60a6\u611f\uff0c\u4f46\u4e00\u6765\u98df\u7269\u7684\u98ce\u5473\u6709\u635f\u5931\uff0c\u4e8c\u6765\u8fc7\u5ea6\u52a0\u538b\u53ef\u80fd\u4f1a\u4f7f\u90e8\u5206\u7c7b\u578b\u9ad8\u538b\u9505\u7684\u5361\u69fd\u5f2f\u66f2\u3002\u56e0\u6b64\u5f53\u770b\u5230\u55b7\u51fa\u84b8\u6c7d\u65f6\uff0c\u53ef\u51cf\u5c0f\u706b\u529b\u3002 tips\uff1a\u4ece\u4fa7\u9762\u5f00\u76d6\u662f\u4e00\u79cd\u4e0d\u9519\u7684\u9009\u62e9\u3002","title":"\u9ad8\u538b\u529b\u9505"},{"location":"tips/learn/%E9%AB%98%E5%8E%8B%E5%8A%9B%E9%94%85/#_1","text":"","title":"\u84b8\uff08\u7c73\uff09/\u7096\uff08\u4f7f\u7528\u7535\u996d\u7172/\u9ad8\u538b\u9505/\u7535\u538b\u529b\u9505\uff09"},{"location":"tips/learn/%E9%AB%98%E5%8E%8B%E5%8A%9B%E9%94%85/#_2","text":"\u538b\u529b\u9505\u5176\u5b9e\u662f\u4e00\u822c\u7684\u9505\u52a0\u4e0a\u53ef\u9501\u7d27\u7684\u534a\u5bc6\u5c01\u76d6\uff0c\u76d6\u4e0a\u6709\u9600\u95e8\uff0c\u53ef\u7528\u4e8e\u63a7\u5236\u9505\u5185\u7684\u538b\u529b\u3002","title":"\u4ec0\u4e48\u662f\u538b\u529b\u9505"},{"location":"tips/learn/%E9%AB%98%E5%8E%8B%E5%8A%9B%E9%94%85/#_3","text":"\u538b\u529b\u9505\u7684\u5de5\u4f5c\u65b9\u5f0f\u662f\u8ba9\u84b8\u6c7d\u79ef\u805a\u5728\u9505\u4e2d\uff0c\u63d0\u9ad8\u9505\u5185\u7684\u538b\u529b\u3002\u9505\u5185\u538b\u529b\u63d0\u9ad8\u65f6\uff0c\u6c34\u7684\u6cb8\u70b9\u4e5f\u968f\u4e4b\u63d0\u9ad8\uff0c\u53ef\u4f7f\u542b\u6c34\u7684\u98df\u7269\u70f9\u716e\u6e29\u5ea6\u8d85\u8fc7 100 \u2103\u3002","title":"\u5de5\u4f5c\u65b9\u5f0f"},{"location":"tips/learn/%E9%AB%98%E5%8E%8B%E5%8A%9B%E9%94%85/#_4","text":"\u7531\u4e8e\u538b\u529b\u9505\u7684\u5b9e\u9645\u70f9\u996a\u6e29\u5ea6\u8f83\u9ad8\uff0c\u56e0\u6b64\u53ef\u4ee5\u5927\u5e45\u7f29\u77ed\u70f9\u996a\u65f6\u95f4\u3002 \u538b\u529b\u9505\u5185\u90e8\u7684\u9ad8\u6e29\u53ef\u4fc3\u8fdb\u8910\u53d8\u548c\u7126\u7cd6\u5316\uff0c\u80fd\u591f\u4ea7\u751f\u72ec\u6709\u7684\u98ce\u5473\u3002","title":"\u4f18\u70b9"},{"location":"tips/learn/%E9%AB%98%E5%8E%8B%E5%8A%9B%E9%94%85/#_5","text":"\u98df\u6750\u548c\u6c34\u653e\u5165\u5185\u80c6\u540e\u76d2\u76d6\uff0c \u786e\u4fdd\u9505\u4f53\u5bc6\u5c01 \uff0c\u52a0\u70ed\u3002 \u5bf9\u4e8e\u97e7\u6027\u8f83\u5927\u7684\u98df\u6750\uff0c\u5982\u8e44\u7b4b\u7c7b\u98df\u7269\uff0c\u4f7f\u7528\u9ad8\u538b\u9505\u53ef\u4ee5\u8f83\u8f7b\u677e\u5c06\u5176\u716e\u70c2\uff0c\u83b7\u5f97\u8f83\u597d\u53e3\u611f\u3002 \u538b\u529b\u9505\u901a\u5e38\u6709\u4e00\u4e2a\u81ea\u9501\u9600\uff08\u6d6e\u5b50\u9600\uff09\u3002\u5728\u84b8\u716e\u65f6\uff0c\u968f\u7740\u9505\u5185\u538b\u529b\u589e\u5927\uff0c\u81ea\u9501\u9600\u4f1a\u542f\u52a8\u5e76\u9501\u95ed\uff0c\u9694\u7edd\u9505\u5185\u4e0e\u9505\u5916\u6c14\u4f53\uff0c\u4e3a\u9505\u5185\u589e\u538b\u521b\u9020\u6761\u4ef6\u3002\u81ea\u9501\u9600\u542f\u52a8\u540e\u8fd8\u4f1a\u9501\u4f4f\u9505\u76d6\uff0c\u9632\u6b62\u5f3a\u884c\u6253\u5f00\uff0c\u8d77\u5230\u5b89\u5168\u4fdd\u969c\u4f5c\u7528\u3002\u5728\u84b8\u716e\u65f6\u9700\u8981\u786e\u8ba4\u81ea\u9501\u9600\u4e0d\u88ab\u5f02\u7269\u906e\u6321\uff0c\u8ba9\u9ad8\u538b\u9505\u6b63\u5e38\u5de5\u4f5c\u3002 \u5207\u6362\u81f3\u4fdd\u6e29\u72b6\u6001\u540e\uff0c \u901a\u8fc7\u6392\u6c14\u9600\u5c06\u9505\u5185\u84b8\u6c7d\u6392\u7a7a\u65b9\u53ef\u5f00\u76d6","title":"\u6d41\u7a0b"},{"location":"tips/learn/%E9%AB%98%E5%8E%8B%E5%8A%9B%E9%94%85/#_6","text":"\u6c34\u84b8\u6c14\u5f88\u70eb\uff0c\u4e0d\u8981\u51d1\u5230\u6392\u6c14\u9600\u4e0a\u3002 \u70f9\u996a \u6d41\u8d28\u98df\u7269 \u7684\u8fc7\u7a0b\u4e2d\uff0c \u4e0d\u8981\u624b\u52a8\u6392\u6c14 \uff0c\u5c0f\u5fc3\u55b7\u6e85\uff08\u53ef\u4ee5\u5c06\u98df\u6750\u653e\u5165\u5bc6\u5c01\u7f50\u6216\u8005\u771f\u7a7a\u5305\u88c5\u888b\u4e2d\u518d\u7528\u9ad8\u538b\u9505\u70f9\u996a\uff09\u3002 \u70f9\u996a\u90e8\u5206\u83dc\u7cfb\uff08\u5982\u6c64\u7c7b\uff09\u624b\u52a8\u653e\u6c14 \u53ef\u80fd\u4f1a\u5f71\u54cd\u98df\u7269\u7684\u5473\u9053\u4ee5\u53ca\u53e3\u611f \u3002 \u5f00\u76d6\u524d\u9700\u786e\u8ba4\u84b8\u6c14\u5df2\u6392\u7a7a\u3002\u5f00\u76d6\u65f6\u8bf7\u52ff\u4e00\u6b21\u6027\u5168\u90e8\u6253\u5f00\uff0c\u5c24\u5176\u662f \u4e0d\u8981\u5bf9\u7740\u4eba\u6b63\u9762\u5f00\u76d6 \uff0c\u4ee5\u514d\u84b8\u6c14\u70eb\u4f24\u3002 \u84b8\u716e\u5b8c\u6210\u540e\uff0c\u968f\u7740\u9ad8\u538b\u9505\u5185\u6c14\u538b\u964d\u4f4e\u81f3\u4e0e\u5916\u754c\u6c14\u538b\u5e73\u8861\uff0c\u81ea\u9501\u9600\u4f1a\u677e\u5f00\u3002\u8fd9\u4e2a\u53ef\u4ee5\u4f5c\u4e3a\u9505\u76d6\u662f\u5426\u80fd\u6253\u5f00\u7684\u5224\u65ad\u6807\u5fd7\u3002 \u9ad8\u538b\u9505\u7684\u5bc6\u5c01\u4f9d\u8d56\u9505\u76d6\u91cc\u7684\u5bc6\u5c01\u6a61\u80f6\u5708\uff0c\u5bf9\u4e8e\u8001\u65e7\u7684\u9ad8\u538b\u9505\u9700\u8981\u68c0\u67e5\u5bc6\u5c01\u6a61\u80f6\u5708\u662f\u5426\u4ecd\u7136\u6709\u6548\u3002 \u786e\u8ba4\u6a61\u80f6\u5708\u5b8c\u5168\u5e72\u51c0\uff0c\u4efb\u4f55\u5fae\u7c92\u5361\u5728\u5176\u4e2d\u90fd\u53ef\u80fd\u7834\u574f\u5bc6\u95ed\u73af\u5883\u3002 \u5f88\u591a\u538b\u529b\u9505\u6709\u4e00\u4e2a\u5b89\u5168\u7ebf\uff0c\u6750\u6599\u548c\u6db2\u4f53\u4e0d\u5e94\u8be5\u8d85\u8fc7\u8fd9\u4e2a\u7ebf\uff0c\u592a\u591a\u7684\u98df\u6750\u548c\u6db2\u4f53\u53ef\u80fd\u4f1a\u8ba9\u6c34\u84b8\u6c14\u55b7\u6d8c\u5835\u585e\u6392\u6c14\u9600\uff0c\u6216\u55b7\u6e85\u51fa\u592a\u591a\u6c34\u84b8\u6c14\u4e0d\u597d\u6e05\u7406\u3002 \u6ca1\u6709\u5b89\u5168\u7ebf\u7684\u538b\u529b\u9505\uff0c\u6700\u597d\u4e5f\u4e0d\u8981\u8ba9\u6c34\u4f4d\u7ebf\u8d85\u8fc7\u9505\u4f53\u7684 2/3\u3002 \u4e0d\u8981\u4f7f\u7528\u9ad8\u538b\u9505\u70f9\u996a\u71d5\u9ea6\u6216\u8005\u6302\u9762\u7b49\u5bb9\u6613\u4ea7\u751f\u6ce1\u6cab\u7684\u98df\u7269 \u3002\u6ce1\u6cab\u53ef\u80fd\u4f1a\u963b\u585e\u84b8\u6c7d\u9600\u548c\u6cc4\u538b\u7ba1\u3002 \u70f9\u996a\u8fc7\u7a0b\u4e2d\uff0c\u5f53\u538b\u529b\u9600\u5347\u9ad8\u5e76\u55b7\u51fa\u84b8\u6c7d\u6216\u8005\u70df\u96fe\u65f6\uff0c\u8bf4\u660e\u9ad8\u538b\u9505\u5185\u90e8\u8fc7\u5ea6\u52a0\u538b\uff0c\u538b\u529b\u9600\u4e3a\u4e86\u4fdd\u8bc1\u5b89\u5168\uff0c\u91ca\u653e\u51fa\u4e86\u591a\u4f59\u7684\u538b\u529b\u3002\u5c3d\u7ba1\u55b7\u51fa\u7684\u84b8\u6c7d\u5e26\u6709\u6d53\u90c1\u7684\u9999\u5473\u4f1a\u5e26\u6765\u8f83\u9ad8\u7684\u6109\u60a6\u611f\uff0c\u4f46\u4e00\u6765\u98df\u7269\u7684\u98ce\u5473\u6709\u635f\u5931\uff0c\u4e8c\u6765\u8fc7\u5ea6\u52a0\u538b\u53ef\u80fd\u4f1a\u4f7f\u90e8\u5206\u7c7b\u578b\u9ad8\u538b\u9505\u7684\u5361\u69fd\u5f2f\u66f2\u3002\u56e0\u6b64\u5f53\u770b\u5230\u55b7\u51fa\u84b8\u6c7d\u65f6\uff0c\u53ef\u51cf\u5c0f\u706b\u529b\u3002 tips\uff1a\u4ece\u4fa7\u9762\u5f00\u76d6\u662f\u4e00\u79cd\u4e0d\u9519\u7684\u9009\u62e9\u3002","title":"\u6ce8\u610f\u4e8b\u9879"}]}